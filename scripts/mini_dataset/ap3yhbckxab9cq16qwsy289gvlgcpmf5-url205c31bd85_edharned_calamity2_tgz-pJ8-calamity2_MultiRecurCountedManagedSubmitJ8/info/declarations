Compiled from "MultiSubmitTPoolDemo.java"
public class MultiSubmitTPoolDemo {
  static final long NPS;
  static final java.util.Random rng;
  public MultiSubmitTPoolDemo();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static void ranFill(long[]);
  static {};
}
Compiled from "MultiSubmitTPoolDemo.java"
public class MultiSubmitTPoolDemo$Thd extends java.lang.Thread {
  final MultiSubmitTPoolDemo this$0;
  public MultiSubmitTPoolDemo$Thd(java.lang.Object, java.util.concurrent.ConcurrentLinkedQueue<long[]>, java.util.concurrent.CountDownLatch);
  public void run();
}
Compiled from "CFFailure.java"
public class calamity2.CFFailure {
  static java.util.List<java.util.concurrent.CompletableFuture<java.lang.Integer>> tasks;
  public calamity2.CFFailure();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "IntArraySum.java"
public class calamity2.IntArraySum {
  static final long NPS;
  public calamity2.IntArraySum();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static void setUp();
  static void SequentialSum();
  static void ThreadedSum();
  static void StreamSum();
  static void ParallelStreamSum();
  static java.lang.Object access$000();
  static int access$100();
  static java.util.concurrent.CountDownLatch access$200();
  static {};
}
Compiled from "IntArraySum.java"
public class calamity2.IntArraySum$Thd extends java.lang.Thread {
  public calamity2.IntArraySum$Thd(int, int);
  public void run();
}
Compiled from "MultiCompletables.java"
public class calamity2.MultiCompletables {
  static final long NPS;
  static final int recur_count;
  static final boolean USE_DELAY;
  public calamity2.MultiCompletables();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "MultiCompletables.java"
public class calamity2.MultiCompletables$MyFuture extends java.util.concurrent.CompletableFuture<java.lang.Void> {
  final calamity2.MultiCompletables this$0;
  public calamity2.MultiCompletables$MyFuture(calamity2.MultiCompletables, calamity2.MultiCompletables$Something);
  public calamity2.MultiCompletables$Something getS();
}
Compiled from "MultiCompletables.java"
public class calamity2.MultiCompletables$Something extends java.util.concurrent.RecursiveAction {
  int count;
  final calamity2.MultiCompletables this$0;
  calamity2.MultiCompletables$Something(calamity2.MultiCompletables, int);
  protected void compute();
}
Compiled from "MultiRecurCountedManagedSubmit.java"
public class calamity2.MultiRecurCountedManagedSubmit {
  static final long NPS;
  static final int FJParallism;
  static final int nbr_threads;
  static final int recur_count;
  static final java.util.concurrent.atomic.AtomicLong myCount;
  static final java.util.concurrent.atomic.AtomicLong myComputed;
  public calamity2.MultiRecurCountedManagedSubmit();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "MultiRecurCountedManagedSubmit.java"
public class calamity2.MultiRecurCountedManagedSubmit$Something extends java.util.concurrent.CountedCompleter<java.lang.Void> implements java.util.concurrent.ForkJoinPool$ManagedBlocker {
  final calamity2.MultiRecurCountedManagedSubmit this$0;
  calamity2.MultiRecurCountedManagedSubmit$Something(calamity2.MultiRecurCountedManagedSubmit, calamity2.MultiRecurCountedManagedSubmit$Something, int);
  public void compute();
  public boolean block() throws java.lang.InterruptedException;
  public boolean isReleasable();
}
Compiled from "MultiRecurCountedManagedSubmit.java"
public class calamity2.MultiRecurCountedManagedSubmit$Thd extends java.lang.Thread {
  final calamity2.MultiRecurCountedManagedSubmit this$0;
  public calamity2.MultiRecurCountedManagedSubmit$Thd(calamity2.MultiRecurCountedManagedSubmit, java.lang.String, java.util.concurrent.CountDownLatch);
  public void run();
}
Compiled from "MultiRecurCountedSubmit.java"
public class calamity2.MultiRecurCountedSubmit {
  static final long NPS;
  static final int FJParallism;
  static final int nbr_threads;
  static final int recur_count;
  static final boolean NORMALLY;
  static final java.util.concurrent.atomic.AtomicLong myCount;
  static final java.util.concurrent.atomic.AtomicLong myComputed;
  public calamity2.MultiRecurCountedSubmit();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "MultiRecurCountedSubmit.java"
public class calamity2.MultiRecurCountedSubmit$Something extends java.util.concurrent.CountedCompleter<java.lang.Void> {
  int count;
  final calamity2.MultiRecurCountedSubmit this$0;
  calamity2.MultiRecurCountedSubmit$Something(java.util.concurrent.CountedCompleter<?>, int);
  public void compute();
}
Compiled from "MultiRecurCountedSubmit.java"
public class calamity2.MultiRecurCountedSubmit$Thd extends java.lang.Thread {
  final calamity2.MultiRecurCountedSubmit this$0;
  public calamity2.MultiRecurCountedSubmit$Thd(calamity2.MultiRecurCountedSubmit, java.util.concurrent.ForkJoinPool, java.lang.String, java.util.concurrent.CountDownLatch);
  public void run();
}
Compiled from "MultiRecurSubmit.java"
public class calamity2.MultiRecurSubmit {
  static final long NPS;
  static final int FJParallism;
  static final int nbr_threads;
  static final int recur_count;
  static final java.util.concurrent.atomic.AtomicLong myCount;
  static final java.util.concurrent.atomic.AtomicLong myComputed;
  public calamity2.MultiRecurSubmit();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "MultiRecurSubmit.java"
public class calamity2.MultiRecurSubmit$Something extends java.util.concurrent.RecursiveTask<java.lang.Void> {
  int count;
  final calamity2.MultiRecurSubmit this$0;
  calamity2.MultiRecurSubmit$Something(calamity2.MultiRecurSubmit, int);
  protected java.lang.Void compute();
  protected java.lang.Object compute();
}
Compiled from "MultiRecurSubmit.java"
public class calamity2.MultiRecurSubmit$Thd extends java.lang.Thread {
  final calamity2.MultiRecurSubmit this$0;
  public calamity2.MultiRecurSubmit$Thd(calamity2.MultiRecurSubmit, java.util.concurrent.ForkJoinPool, java.lang.String, java.util.concurrent.CountDownLatch);
  public void run();
}
Compiled from "MultiSubmitFJDemo.java"
public class calamity2.MultiSubmitFJDemo {
  static final long NPS;
  static final int THRESHOLD;
  public calamity2.MultiSubmitFJDemo();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "MultiSubmitFJDemo.java"
class calamity2.MultiSubmitFJDemo$Summer extends java.util.concurrent.RecursiveTask<java.lang.Long> {
  final calamity2.MultiSubmitFJDemo this$0;
  calamity2.MultiSubmitFJDemo$Summer(calamity2.MultiSubmitFJDemo, long[], int, int);
  public java.lang.Long compute();
  public java.lang.Object compute();
}
Compiled from "MultiSubmitFJDemo.java"
public class calamity2.MultiSubmitFJDemo$Thd extends java.lang.Thread {
  final calamity2.MultiSubmitFJDemo this$0;
  public calamity2.MultiSubmitFJDemo$Thd(calamity2.MultiSubmitFJDemo, int, java.util.concurrent.ForkJoinPool, java.lang.Object, java.util.concurrent.CountDownLatch);
  public void run();
}
Compiled from "NestedParallel.java"
public class calamity2.NestedParallel {
  static final long NPS;
  static final boolean isInnerStreamParallel;
  static final boolean USE_DELAY;
  static final int outerLoop;
  static final int innerLoop;
  static final int fjParallelism;
  static final long burningCount;
  static final java.lang.Thread[] println;
  public calamity2.NestedParallel();
  public static void main(java.lang.String[]);
  public void nestedLoops();
  static {};
}
Compiled from "OOM.java"
public class calamity2.OOM {
  public calamity2.OOM();
  public static void main(java.lang.String...);
  static {};
}
