Compiled from "Main.java"
public class org.patterneria.Main {
  public org.patterneria.Main();
  public static void main(java.lang.String[]);
}
Compiled from "BWFilm.java"
public class org.patterneria.bridge.BWFilm implements org.patterneria.bridge.LightSensitiveMedium {
  public org.patterneria.bridge.BWFilm();
  public void recordLight();
}
Compiled from "BridgeSample.java"
public class org.patterneria.bridge.BridgeSample {
  public org.patterneria.bridge.BridgeSample();
  public void run();
}
Compiled from "Camera.java"
public abstract class org.patterneria.bridge.Camera {
  public org.patterneria.bridge.Camera();
  public org.patterneria.bridge.LightSensitiveMedium getLightRecorder();
  public void setLightRecorder(org.patterneria.bridge.LightSensitiveMedium);
  protected void recordLight();
  public void captureImage();
}
Compiled from "ColorFilm.java"
public class org.patterneria.bridge.ColorFilm implements org.patterneria.bridge.LightSensitiveMedium {
  public org.patterneria.bridge.ColorFilm();
  public void recordLight();
}
Compiled from "DigitalImageSensor.java"
public class org.patterneria.bridge.DigitalImageSensor implements org.patterneria.bridge.LightSensitiveMedium {
  public org.patterneria.bridge.DigitalImageSensor();
  public void recordLight();
}
Compiled from "LargeFormatCamera.java"
public class org.patterneria.bridge.LargeFormatCamera extends org.patterneria.bridge.Camera {
  public org.patterneria.bridge.LargeFormatCamera();
}
Compiled from "LightSensitiveMedium.java"
public interface org.patterneria.bridge.LightSensitiveMedium {
  public abstract void recordLight();
}
Compiled from "MediumFormatCamera.java"
public class org.patterneria.bridge.MediumFormatCamera extends org.patterneria.bridge.Camera {
  public org.patterneria.bridge.MediumFormatCamera();
}
Compiled from "The35mmCamera.java"
public class org.patterneria.bridge.The35mmCamera extends org.patterneria.bridge.Camera {
  public org.patterneria.bridge.The35mmCamera();
}
Compiled from "AnInspectorCallsByA.java"
public class org.patterneria.factory.AnInspectorCallsByA implements org.patterneria.factory.Spectacle {
  public org.patterneria.factory.AnInspectorCallsByA();
  public void perform();
}
Compiled from "DirectorA.java"
public class org.patterneria.factory.DirectorA implements org.patterneria.factory.TheatreDirector {
  public org.patterneria.factory.DirectorA();
  public java.lang.String getName();
  public org.patterneria.factory.Spectacle stage(java.lang.String);
}
Compiled from "DirectorB.java"
public class org.patterneria.factory.DirectorB implements org.patterneria.factory.TheatreDirector {
  public org.patterneria.factory.DirectorB();
  public java.lang.String getName();
  public org.patterneria.factory.Spectacle stage(java.lang.String);
}
Compiled from "Les39MarchesByB.java"
public class org.patterneria.factory.Les39MarchesByB implements org.patterneria.factory.Spectacle {
  public org.patterneria.factory.Les39MarchesByB();
  public void perform();
}
Compiled from "RichardIIIByA.java"
public class org.patterneria.factory.RichardIIIByA implements org.patterneria.factory.Spectacle {
  public org.patterneria.factory.RichardIIIByA();
  public void perform();
}
Compiled from "RichardIIIByB.java"
public class org.patterneria.factory.RichardIIIByB implements org.patterneria.factory.Spectacle {
  public org.patterneria.factory.RichardIIIByB();
  public void perform();
}
Compiled from "Spectacle.java"
public interface org.patterneria.factory.Spectacle {
  public abstract void perform();
}
Compiled from "The39StepsByA.java"
public class org.patterneria.factory.The39StepsByA implements org.patterneria.factory.Spectacle {
  public org.patterneria.factory.The39StepsByA();
  public void perform();
}
Compiled from "Theatre.java"
public class org.patterneria.factory.Theatre {
  java.lang.String name;
  org.patterneria.factory.TheatreDirector director;
  java.util.Map<java.lang.String, org.patterneria.factory.Spectacle> repertoire;
  public java.lang.String getName();
  public org.patterneria.factory.TheatreDirector getDirector();
  public void setDirector(java.lang.String, org.patterneria.factory.TheatreDirector);
  public org.patterneria.factory.Theatre(org.patterneria.factory.TheatreDirector);
  public void StagePlay(java.lang.String);
  public void PerformSpectacle(java.lang.String);
}
Compiled from "TheatreDirector.java"
public interface org.patterneria.factory.TheatreDirector {
  public abstract java.lang.String getName();
  public abstract org.patterneria.factory.Spectacle stage(java.lang.String);
}
Compiled from "IteratorSample.java"
public class org.patterneria.iterator.IteratorSample {
  public org.patterneria.iterator.IteratorSample();
  public void run();
}
Compiled from "MetroLine.java"
public class org.patterneria.iterator.MetroLine implements java.lang.Iterable<org.patterneria.iterator.Station> {
  public java.lang.String getName();
  public org.patterneria.iterator.MetroLine(java.lang.String, java.lang.String);
  public org.patterneria.iterator.MetroLine(java.lang.String, org.patterneria.iterator.Station);
  public org.patterneria.iterator.MetroLine withNextStation(java.lang.String);
  public org.patterneria.iterator.MetroLine withNextStation(org.patterneria.iterator.Station);
  public java.util.Iterator<org.patterneria.iterator.Station> iterator();
  public java.util.Iterator<org.patterneria.iterator.Station> backwardIterator();
  static org.patterneria.iterator.MetroLine$Stop access$000(org.patterneria.iterator.MetroLine);
  static org.patterneria.iterator.MetroLine$Stop access$100(org.patterneria.iterator.MetroLine);
}
Compiled from "MetroLine.java"
class org.patterneria.iterator.MetroLine$BackwardIterator implements java.util.Iterator<org.patterneria.iterator.Station> {
  final org.patterneria.iterator.MetroLine this$0;
  public org.patterneria.iterator.MetroLine$BackwardIterator(org.patterneria.iterator.MetroLine);
  public boolean hasNext();
  public org.patterneria.iterator.Station next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "MetroLine.java"
class org.patterneria.iterator.MetroLine$ForwardIterator implements java.util.Iterator<org.patterneria.iterator.Station> {
  final org.patterneria.iterator.MetroLine this$0;
  public org.patterneria.iterator.MetroLine$ForwardIterator(org.patterneria.iterator.MetroLine);
  public boolean hasNext();
  public org.patterneria.iterator.Station next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "MetroLine.java"
class org.patterneria.iterator.MetroLine$Stop {
  public org.patterneria.iterator.Station getStation();
  public org.patterneria.iterator.MetroLine$Stop getNextStop();
  public void setNextStop(org.patterneria.iterator.MetroLine$Stop);
  public org.patterneria.iterator.MetroLine$Stop getPreviousStop();
  public org.patterneria.iterator.MetroLine$Stop(org.patterneria.iterator.Station);
  static org.patterneria.iterator.Station access$200(org.patterneria.iterator.MetroLine$Stop);
}
Compiled from "Station.java"
public final class org.patterneria.iterator.Station {
  public java.lang.String getName();
  public java.lang.String getNotification();
  public void setNotification(java.lang.String);
  public org.patterneria.iterator.Station(java.lang.String);
  public org.patterneria.iterator.Station(java.lang.String, java.lang.String);
}
Compiled from "Train.java"
public class org.patterneria.iterator.Train {
  public org.patterneria.iterator.Train();
  public void go(java.util.Iterator<org.patterneria.iterator.Station>);
}
Compiled from "Dialing.java"
public class org.patterneria.state.Dialing implements org.patterneria.state.PhoneState {
  public org.patterneria.state.Dialing();
  public void dial(org.patterneria.state.Phone);
  public void endCall(org.patterneria.state.Phone);
  public void answer(org.patterneria.state.Phone);
  public void ignore(org.patterneria.state.Phone);
}
Compiled from "Idle.java"
public class org.patterneria.state.Idle implements org.patterneria.state.PhoneState {
  public org.patterneria.state.Idle();
  public void dial(org.patterneria.state.Phone);
  public void endCall(org.patterneria.state.Phone);
  public void answer(org.patterneria.state.Phone);
  public void ignore(org.patterneria.state.Phone);
}
Compiled from "IncomingCall.java"
public class org.patterneria.state.IncomingCall implements org.patterneria.state.PhoneState {
  public org.patterneria.state.IncomingCall();
  public void dial(org.patterneria.state.Phone);
  public void endCall(org.patterneria.state.Phone);
  public void answer(org.patterneria.state.Phone);
  public void ignore(org.patterneria.state.Phone);
}
Compiled from "Phone.java"
public class org.patterneria.state.Phone {
  org.patterneria.state.PhoneState state;
  public org.patterneria.state.Phone();
  public org.patterneria.state.PhoneState getState();
  public void setState(org.patterneria.state.PhoneState);
  public void dial();
  public void endCall();
  public void answer();
  public void ignore();
}
Compiled from "PhoneState.java"
public interface org.patterneria.state.PhoneState {
  public abstract void dial(org.patterneria.state.Phone);
  public abstract void endCall(org.patterneria.state.Phone);
  public abstract void answer(org.patterneria.state.Phone);
  public abstract void ignore(org.patterneria.state.Phone);
}
Compiled from "StateSample.java"
public class org.patterneria.state.StateSample {
  public org.patterneria.state.StateSample();
  public void run();
}
Compiled from "StrategyByHeadFirst.java"
public class org.patterneria.strategy.StrategyByHeadFirst implements org.patterneria.strategy.StrategyPatternLearningStrategy {
  public org.patterneria.strategy.StrategyByHeadFirst();
  public void learn();
}
Compiled from "StrategyByPatterneria.java"
public class org.patterneria.strategy.StrategyByPatterneria implements org.patterneria.strategy.StrategyPatternLearningStrategy {
  public org.patterneria.strategy.StrategyByPatterneria();
  public void learn();
}
Compiled from "StrategyMix.java"
public class org.patterneria.strategy.StrategyMix implements org.patterneria.strategy.StrategyPatternLearningStrategy {
  protected java.util.List<org.patterneria.strategy.StrategyPatternLearningStrategy> strategies;
  public org.patterneria.strategy.StrategyMix(org.patterneria.strategy.StrategyPatternLearningStrategy...);
  public void learn();
}
Compiled from "StrategyPatternByExamples.java"
public class org.patterneria.strategy.StrategyPatternByExamples implements org.patterneria.strategy.StrategyPatternLearningStrategy {
  public org.patterneria.strategy.StrategyPatternByExamples();
  public void learn();
}
Compiled from "StrategyPatternByGOF.java"
public class org.patterneria.strategy.StrategyPatternByGOF implements org.patterneria.strategy.StrategyPatternLearningStrategy {
  public org.patterneria.strategy.StrategyPatternByGOF();
  public void learn();
}
Compiled from "StrategyPatternLearningStrategy.java"
public interface org.patterneria.strategy.StrategyPatternLearningStrategy {
  public abstract void learn();
}
Compiled from "StrategyPatternTutorial.java"
public class org.patterneria.strategy.StrategyPatternTutorial {
  org.patterneria.strategy.StrategyPatternLearningStrategy learningStrategy;
  public org.patterneria.strategy.StrategyPatternTutorial();
  public org.patterneria.strategy.StrategyPatternLearningStrategy getLearningStrategy();
  public void setLearningStrategy(org.patterneria.strategy.StrategyPatternLearningStrategy);
  public void apply();
}
Compiled from "StrategySample.java"
public class org.patterneria.strategy.StrategySample {
  public org.patterneria.strategy.StrategySample();
  public void run();
}
Compiled from "StrategyWithPPTSlidesDecorator.java"
public class org.patterneria.strategy.StrategyWithPPTSlidesDecorator implements org.patterneria.strategy.StrategyPatternLearningStrategy {
  protected org.patterneria.strategy.StrategyPatternLearningStrategy innerStrategy;
  public org.patterneria.strategy.StrategyWithPPTSlidesDecorator(org.patterneria.strategy.StrategyPatternLearningStrategy);
  public void learn();
}
Compiled from "ArithmeticExpression.java"
public abstract class org.patterneria.visitor.ArithmeticExpression {
  public org.patterneria.visitor.ArithmeticExpression();
  public abstract void accept(org.patterneria.visitor.ArithmeticExpressionVisitor);
}
Compiled from "ArithmeticExpressionEvaluator.java"
public class org.patterneria.visitor.ArithmeticExpressionEvaluator implements org.patterneria.visitor.ArithmeticExpressionVisitor {
  public org.patterneria.visitor.ArithmeticExpressionEvaluator();
  public double getResult();
  public void visit(org.patterneria.visitor.ConstantExpression);
  public void visit(org.patterneria.visitor.BinaryArithmeticExpression);
  public void visit(org.patterneria.visitor.NegateExpression);
}
Compiled from "ArithmeticExpressionPrettyPrinter.java"
public class org.patterneria.visitor.ArithmeticExpressionPrettyPrinter implements org.patterneria.visitor.ArithmeticExpressionVisitor {
  public org.patterneria.visitor.ArithmeticExpressionPrettyPrinter();
  public void visit(org.patterneria.visitor.ConstantExpression);
  public void visit(org.patterneria.visitor.BinaryArithmeticExpression);
  public void visit(org.patterneria.visitor.NegateExpression);
}
Compiled from "ArithmeticExpressionVisitor.java"
public interface org.patterneria.visitor.ArithmeticExpressionVisitor {
  public abstract void visit(org.patterneria.visitor.ConstantExpression);
  public abstract void visit(org.patterneria.visitor.BinaryArithmeticExpression);
  public abstract void visit(org.patterneria.visitor.NegateExpression);
}
Compiled from "BinaryArithmeticExpression.java"
public class org.patterneria.visitor.BinaryArithmeticExpression extends org.patterneria.visitor.ArithmeticExpression {
  public org.patterneria.visitor.ArithmeticExpression getLeft();
  public org.patterneria.visitor.ArithmeticExpression getRight();
  public char getOperation();
  public org.patterneria.visitor.BinaryArithmeticExpression(org.patterneria.visitor.ArithmeticExpression, org.patterneria.visitor.ArithmeticExpression, char);
  public void accept(org.patterneria.visitor.ArithmeticExpressionVisitor);
}
Compiled from "ConstantExpression.java"
public class org.patterneria.visitor.ConstantExpression extends org.patterneria.visitor.ArithmeticExpression {
  public double getValue();
  public org.patterneria.visitor.ConstantExpression(double);
  public void accept(org.patterneria.visitor.ArithmeticExpressionVisitor);
}
Compiled from "NegateExpression.java"
public class org.patterneria.visitor.NegateExpression extends org.patterneria.visitor.ArithmeticExpression {
  public org.patterneria.visitor.ArithmeticExpression getExpressionToNegate();
  public org.patterneria.visitor.NegateExpression(org.patterneria.visitor.ArithmeticExpression);
  public void accept(org.patterneria.visitor.ArithmeticExpressionVisitor);
}
Compiled from "VisitorSample.java"
public class org.patterneria.visitor.VisitorSample {
  public org.patterneria.visitor.VisitorSample();
  public void run();
}
