Compiled from "Client.java"
public class Client {
  public Client();
  public static void main(java.lang.String[]);
}
Compiled from "Server.java"
public class Server {
  public Server();
  public static void main(java.lang.String[]);
}
Compiled from "ArrayDeque.java"
public class java5.util.ArrayDeque<E> extends java.util.AbstractCollection<E> implements java5.util.Deque<E>, java.lang.Cloneable, java.io.Serializable {
  static final boolean $assertionsDisabled;
  public java5.util.ArrayDeque();
  public java5.util.ArrayDeque(int);
  public java5.util.ArrayDeque(java.util.Collection<? extends E>);
  public void addFirst(E);
  public void addLast(E);
  public boolean offerFirst(E);
  public boolean offerLast(E);
  public E removeFirst();
  public E removeLast();
  public E pollFirst();
  public E pollLast();
  public E getFirst();
  public E getLast();
  public E peekFirst();
  public E peekLast();
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public boolean add(E);
  public boolean offer(E);
  public E remove();
  public E poll();
  public E element();
  public E peek();
  public void push(E);
  public E pop();
  public int size();
  public boolean isEmpty();
  public java.util.Iterator<E> iterator();
  public java.util.Iterator<E> descendingIterator();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public void clear();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public java5.util.ArrayDeque<E> clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static int access$200(java5.util.ArrayDeque);
  static int access$300(java5.util.ArrayDeque);
  static java.lang.Object[] access$400(java5.util.ArrayDeque);
  static boolean access$500(java5.util.ArrayDeque, int);
  static {};
}
Compiled from "ArrayDeque.java"
class java5.util.ArrayDeque$1 {
}
Compiled from "ArrayDeque.java"
class java5.util.ArrayDeque$DeqIterator implements java.util.Iterator<E> {
  final java5.util.ArrayDeque this$0;
  public boolean hasNext();
  public E next();
  public void remove();
  java5.util.ArrayDeque$DeqIterator(java5.util.ArrayDeque, java5.util.ArrayDeque$1);
}
Compiled from "ArrayDeque.java"
class java5.util.ArrayDeque$DescendingIterator implements java.util.Iterator<E> {
  final java5.util.ArrayDeque this$0;
  public boolean hasNext();
  public E next();
  public void remove();
  java5.util.ArrayDeque$DescendingIterator(java5.util.ArrayDeque, java5.util.ArrayDeque$1);
}
Compiled from "Arrays.java"
public class java5.util.Arrays {
  public static void fill(byte[], int, int, byte);
  public static byte[] copyOf(byte[], int);
}
Compiled from "Deque.java"
public interface java5.util.Deque<E> extends java.util.Queue<E> {
  public abstract void addFirst(E);
  public abstract void addLast(E);
  public abstract boolean offerFirst(E);
  public abstract boolean offerLast(E);
  public abstract E removeFirst();
  public abstract E removeLast();
  public abstract E pollFirst();
  public abstract E pollLast();
  public abstract E getFirst();
  public abstract E getLast();
  public abstract E peekFirst();
  public abstract E peekLast();
  public abstract boolean removeFirstOccurrence(java.lang.Object);
  public abstract boolean removeLastOccurrence(java.lang.Object);
  public abstract boolean add(E);
  public abstract boolean offer(E);
  public abstract E remove();
  public abstract E poll();
  public abstract E element();
  public abstract E peek();
  public abstract void push(E);
  public abstract E pop();
  public abstract boolean remove(java.lang.Object);
  public abstract boolean contains(java.lang.Object);
  public abstract int size();
  public abstract java.util.Iterator<E> iterator();
  public abstract java.util.Iterator<E> descendingIterator();
}
Compiled from "ZContext.java"
public class org.zeromq.ZContext implements java.io.Closeable {
  public org.zeromq.ZContext();
  public org.zeromq.ZContext(int);
  public void destroy();
  public org.zeromq.ZMQ$Socket createSocket(int);
  public void destroySocket(org.zeromq.ZMQ$Socket);
  public static org.zeromq.ZContext shadow(org.zeromq.ZContext);
  public int getIoThreads();
  public void setIoThreads(int);
  public int getLinger();
  public void setLinger(int);
  public int getHWM();
  public void setHWM(int);
  public boolean isMain();
  public void setMain(boolean);
  public org.zeromq.ZMQ$Context getContext();
  public void setContext(org.zeromq.ZMQ$Context);
  public java.util.List<org.zeromq.ZMQ$Socket> getSockets();
  public void close() throws java.io.IOException;
}
Compiled from "ZFrame.java"
public class org.zeromq.ZFrame {
  public static final int MORE;
  public static final int REUSE;
  public static final int DONTWAIT;
  protected org.zeromq.ZFrame();
  public org.zeromq.ZFrame(byte[]);
  public org.zeromq.ZFrame(java.lang.String);
  public void destroy();
  public byte[] getData();
  public boolean hasMore();
  public int size();
  public boolean hasData();
  public boolean send(org.zeromq.ZMQ$Socket, int);
  public boolean sendAndKeep(org.zeromq.ZMQ$Socket, int);
  public boolean sendAndKeep(org.zeromq.ZMQ$Socket);
  public boolean sendAndDestroy(org.zeromq.ZMQ$Socket, int);
  public boolean sendAndDestroy(org.zeromq.ZMQ$Socket);
  public org.zeromq.ZFrame duplicate();
  public boolean hasSameData(org.zeromq.ZFrame);
  public void reset(java.lang.String);
  public void reset(byte[]);
  public java.lang.String strhex();
  public boolean streq(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public static org.zeromq.ZFrame recvFrame(org.zeromq.ZMQ$Socket);
  public static org.zeromq.ZFrame recvFrame(org.zeromq.ZMQ$Socket, int);
  public void print(java.lang.String);
}
Compiled from "ZLoop.java"
public class org.zeromq.ZLoop {
  static final boolean $assertionsDisabled;
  public org.zeromq.ZLoop();
  public void destroy();
  public int addPoller(org.zeromq.ZMQ$PollItem, org.zeromq.ZLoop$IZLoopHandler, java.lang.Object);
  public void removePoller(org.zeromq.ZMQ$PollItem);
  public int addTimer(int, int, org.zeromq.ZLoop$IZLoopHandler, java.lang.Object);
  public int removeTimer(java.lang.Object);
  public void verbose(boolean);
  public int start();
  static {};
}
Compiled from "ZLoop.java"
public interface org.zeromq.ZLoop$IZLoopHandler {
  public abstract int handle(org.zeromq.ZLoop, org.zeromq.ZMQ$PollItem, java.lang.Object);
}
Compiled from "ZLoop.java"
class org.zeromq.ZLoop$SPoller {
  org.zeromq.ZMQ$PollItem item;
  org.zeromq.ZLoop$IZLoopHandler handler;
  java.lang.Object arg;
  int errors;
  final org.zeromq.ZLoop this$0;
  protected org.zeromq.ZLoop$SPoller(org.zeromq.ZLoop, org.zeromq.ZMQ$PollItem, org.zeromq.ZLoop$IZLoopHandler, java.lang.Object);
}
Compiled from "ZLoop.java"
class org.zeromq.ZLoop$STimer {
  int delay;
  int times;
  org.zeromq.ZLoop$IZLoopHandler handler;
  java.lang.Object arg;
  long when;
  final org.zeromq.ZLoop this$0;
  public org.zeromq.ZLoop$STimer(org.zeromq.ZLoop, int, int, org.zeromq.ZLoop$IZLoopHandler, java.lang.Object);
}
Compiled from "ZMQ.java"
public class org.zeromq.ZMQ {
  public static final int SNDMORE;
  public static final int DONTWAIT;
  public static final int NOBLOCK;
  public static final int PAIR;
  public static final int PUB;
  public static final int SUB;
  public static final int REQ;
  public static final int REP;
  public static final int DEALER;
  public static final int XREQ;
  public static final int ROUTER;
  public static final int XREP;
  public static final int PULL;
  public static final int PUSH;
  public static final int XPUB;
  public static final int XSUB;
  public static final int STREAMER;
  public static final int FORWARDER;
  public static final int QUEUE;
  public static final int UPSTREAM;
  public static final int DOWNSTREAM;
  public static final int EVENT_CONNECTED;
  public static final int EVENT_DELAYED;
  public static final int EVENT_RETRIED;
  public static final int EVENT_CONNECT_FAILED;
  public static final int EVENT_LISTENING;
  public static final int EVENT_BIND_FAILED;
  public static final int EVENT_ACCEPTED;
  public static final int EVENT_ACCEPT_FAILED;
  public static final int EVENT_CLOSED;
  public static final int EVENT_CLOSE_FAILED;
  public static final int EVENT_DISCONNECTED;
  public static final int EVENT_ALL;
  public org.zeromq.ZMQ();
  public static org.zeromq.ZMQ$Context context(int);
  public static boolean device(int, org.zeromq.ZMQ$Socket, org.zeromq.ZMQ$Socket);
  public static boolean proxy(org.zeromq.ZMQ$Socket, org.zeromq.ZMQ$Socket, org.zeromq.ZMQ$Socket);
  public static int poll(org.zeromq.ZMQ$PollItem[], long);
  public static int poll(org.zeromq.ZMQ$PollItem[], int, long);
  public static int getMajorVersion();
  public static int getMinorVersion();
  public static int getPatchVersion();
  public static int getFullVersion();
  public static int makeVersion(int, int, int);
  public static java.lang.String getVersionString();
}
Compiled from "ZMQ.java"
public class org.zeromq.ZMQ$Context {
  protected org.zeromq.ZMQ$Context(int);
  public void term();
  public org.zeromq.ZMQ$Socket socket(int);
  public org.zeromq.ZMQ$Poller poller();
  public org.zeromq.ZMQ$Poller poller(int);
  static zmq.Ctx access$000(org.zeromq.ZMQ$Context);
}
Compiled from "ZMQ.java"
public final class org.zeromq.ZMQ$Error extends java.lang.Enum<org.zeromq.ZMQ$Error> {
  public static final org.zeromq.ZMQ$Error ENOTSUP;
  public static final org.zeromq.ZMQ$Error EPROTONOSUPPORT;
  public static final org.zeromq.ZMQ$Error ENOBUFS;
  public static final org.zeromq.ZMQ$Error ENETDOWN;
  public static final org.zeromq.ZMQ$Error EADDRINUSE;
  public static final org.zeromq.ZMQ$Error EADDRNOTAVAIL;
  public static final org.zeromq.ZMQ$Error ECONNREFUSED;
  public static final org.zeromq.ZMQ$Error EINPROGRESS;
  public static final org.zeromq.ZMQ$Error EMTHREAD;
  public static final org.zeromq.ZMQ$Error EFSM;
  public static final org.zeromq.ZMQ$Error ENOCOMPATPROTO;
  public static final org.zeromq.ZMQ$Error ETERM;
  public static org.zeromq.ZMQ$Error[] values();
  public static org.zeromq.ZMQ$Error valueOf(java.lang.String);
  public long getCode();
  public static org.zeromq.ZMQ$Error findByCode(int);
  static {};
}
Compiled from "ZMQ.java"
public class org.zeromq.ZMQ$PollItem {
  public org.zeromq.ZMQ$PollItem(org.zeromq.ZMQ$Socket, int);
  public org.zeromq.ZMQ$PollItem(java.nio.channels.SelectableChannel, int);
  protected final zmq.PollItem base();
  public final java.nio.channels.SelectableChannel getRawSocket();
  public final org.zeromq.ZMQ$Socket getSocket();
  public final boolean isReadable();
  public final boolean isWritable();
  public final boolean isError();
  public final int readyOps();
  public boolean equals(java.lang.Object);
  static zmq.PollItem access$200(org.zeromq.ZMQ$PollItem);
}
Compiled from "ZMQ.java"
public class org.zeromq.ZMQ$Poller {
  public static final int POLLIN;
  public static final int POLLOUT;
  public static final int POLLERR;
  public org.zeromq.ZMQ$Poller(int);
  protected org.zeromq.ZMQ$Poller(org.zeromq.ZMQ$Context, int);
  protected org.zeromq.ZMQ$Poller(org.zeromq.ZMQ$Context);
  public int register(org.zeromq.ZMQ$Socket);
  public int register(org.zeromq.ZMQ$Socket, int);
  public int register(java.nio.channels.SelectableChannel, int);
  public int register(org.zeromq.ZMQ$PollItem);
  public void unregister(org.zeromq.ZMQ$Socket);
  public void unregister(java.nio.channels.SelectableChannel);
  public org.zeromq.ZMQ$PollItem getItem(int);
  public org.zeromq.ZMQ$Socket getSocket(int);
  public long getTimeout();
  public void setTimeout(long);
  public int getSize();
  public int getNext();
  public int poll();
  public int poll(long);
  public boolean pollin(int);
  public boolean pollout(int);
  public boolean pollerr(int);
}
Compiled from "ZMQ.java"
public class org.zeromq.ZMQ$Socket {
  protected org.zeromq.ZMQ$Socket(org.zeromq.ZMQ$Context, int);
  protected org.zeromq.ZMQ$Socket(zmq.SocketBase);
  protected zmq.SocketBase base();
  public final void close();
  public final int getType();
  public final long getLinger();
  public final void setLinger(long);
  public final long getReconnectIVL();
  public final void setReconnectIVL(long);
  public final long getBacklog();
  public final void setBacklog(long);
  public final long getReconnectIVLMax();
  public final void setReconnectIVLMax(long);
  public final long getMaxMsgSize();
  public final void setMaxMsgSize(long);
  public final long getSndHWM();
  public final void setSndHWM(long);
  public final long getRcvHWM();
  public final void setRcvHWM(long);
  public final long getHWM();
  public final void setHWM(long);
  public final long getSwap();
  public final void setSwap(long);
  public final long getAffinity();
  public final void setAffinity(long);
  public final byte[] getIdentity();
  public final void setIdentity(byte[]);
  public final long getRate();
  public final void setRate(long);
  public final long getRecoveryInterval();
  public final void setRecoveryInterval(long);
  public final boolean hasMulticastLoop();
  public final void setMulticastLoop(boolean);
  public final long getMulticastHops();
  public final void setMulticastHops(long);
  public final int getReceiveTimeOut();
  public final void setReceiveTimeOut(int);
  public final int getSendTimeOut();
  public final void setSendTimeOut(int);
  public final long getSendBufferSize();
  public final void setSendBufferSize(long);
  public final long getReceiveBufferSize();
  public final void setReceiveBufferSize(long);
  public final boolean hasReceiveMore();
  public final java.nio.channels.SelectableChannel getFD();
  public final int getEvents();
  public final void subscribe(byte[]);
  public final void unsubscribe(byte[]);
  public final void setEncoder(java.lang.Class<? extends zmq.EncoderBase>);
  public final void setDecoder(java.lang.Class<? extends zmq.DecoderBase>);
  public final void setRouterMandatory(boolean);
  public final void setXpubVerbose(boolean);
  public final boolean getIPv4Only();
  public void setIPv4Only(boolean);
  public final int bind(java.lang.String);
  public int bindToRandomPort(java.lang.String);
  public int bindToRandomPort(java.lang.String, int, int);
  public final boolean connect(java.lang.String);
  public final boolean disconnect(java.lang.String);
  public final boolean send(java.lang.String);
  public final boolean sendMore(java.lang.String);
  public final boolean send(java.lang.String, int);
  public final boolean send(byte[]);
  public final boolean sendMore(byte[]);
  public final boolean send(byte[], int);
  public final byte[] recv();
  public final byte[] recv(int);
  public final int recv(byte[], int, int, int);
  public final java.lang.String recvStr();
  public final java.lang.String recvStr(int);
  public boolean monitor(java.lang.String, int);
  static zmq.SocketBase access$100(org.zeromq.ZMQ$Socket);
}
Compiled from "ZMQException.java"
public class org.zeromq.ZMQException extends java.lang.RuntimeException {
  public org.zeromq.ZMQException(int);
  public int getErrorCode();
  public java.lang.String toString();
}
Compiled from "ZMQException.java"
public class org.zeromq.ZMQException$IOException extends java.lang.RuntimeException {
  public org.zeromq.ZMQException$IOException(java.io.IOException);
}
Compiled from "ZMQQueue.java"
public class org.zeromq.ZMQQueue implements java.lang.Runnable {
  public org.zeromq.ZMQQueue(org.zeromq.ZMQ$Context, org.zeromq.ZMQ$Socket, org.zeromq.ZMQ$Socket);
  public void run();
}
Compiled from "ZMsg.java"
public class org.zeromq.ZMsg implements java.lang.Iterable<org.zeromq.ZFrame>, java5.util.Deque<org.zeromq.ZFrame> {
  public org.zeromq.ZMsg();
  public void destroy();
  public long contentSize();
  public void addString(java.lang.String);
  public org.zeromq.ZMsg duplicate();
  public void wrap(org.zeromq.ZFrame);
  public org.zeromq.ZFrame unwrap();
  public boolean send(org.zeromq.ZMQ$Socket);
  public boolean send(org.zeromq.ZMQ$Socket, boolean);
  public static org.zeromq.ZMsg recvMsg(org.zeromq.ZMQ$Socket);
  public static org.zeromq.ZMsg recvMsg(org.zeromq.ZMQ$Socket, int);
  public static boolean save(org.zeromq.ZMsg, java.io.DataOutputStream);
  public static org.zeromq.ZMsg load(java.io.DataInputStream);
  public static org.zeromq.ZMsg newStringMsg(java.lang.String...);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void dump(java.lang.Appendable);
  public void dump();
  public void addFirst(java.lang.String);
  public void addFirst(byte[]);
  public void addLast(java.lang.String);
  public void addLast(byte[]);
  public void push(java.lang.String);
  public void push(byte[]);
  public boolean add(java.lang.String);
  public boolean add(byte[]);
  public java.util.Iterator<org.zeromq.ZFrame> iterator();
  public boolean addAll(java.util.Collection<? extends org.zeromq.ZFrame>);
  public void clear();
  public boolean containsAll(java.util.Collection<?>);
  public boolean isEmpty();
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public boolean add(org.zeromq.ZFrame);
  public void addFirst(org.zeromq.ZFrame);
  public void addLast(org.zeromq.ZFrame);
  public boolean contains(java.lang.Object);
  public java.util.Iterator<org.zeromq.ZFrame> descendingIterator();
  public org.zeromq.ZFrame element();
  public org.zeromq.ZFrame getFirst();
  public org.zeromq.ZFrame getLast();
  public boolean offer(org.zeromq.ZFrame);
  public boolean offerFirst(org.zeromq.ZFrame);
  public boolean offerLast(org.zeromq.ZFrame);
  public org.zeromq.ZFrame peek();
  public org.zeromq.ZFrame peekFirst();
  public org.zeromq.ZFrame peekLast();
  public org.zeromq.ZFrame poll();
  public org.zeromq.ZFrame pollFirst();
  public org.zeromq.ZFrame pollLast();
  public org.zeromq.ZFrame pop();
  public java.lang.String popString();
  public void push(org.zeromq.ZFrame);
  public org.zeromq.ZFrame remove();
  public boolean remove(java.lang.Object);
  public org.zeromq.ZFrame removeFirst();
  public boolean removeFirstOccurrence(java.lang.Object);
  public org.zeromq.ZFrame removeLast();
  public boolean removeLastOccurrence(java.lang.Object);
  public int size();
  public int prepend(org.zeromq.ZFrame);
  public java.lang.Object pop();
  public void push(java.lang.Object);
  public java.lang.Object peek();
  public java.lang.Object element();
  public java.lang.Object poll();
  public java.lang.Object remove();
  public boolean offer(java.lang.Object);
  public boolean add(java.lang.Object);
  public java.lang.Object peekLast();
  public java.lang.Object peekFirst();
  public java.lang.Object getLast();
  public java.lang.Object getFirst();
  public java.lang.Object pollLast();
  public java.lang.Object pollFirst();
  public java.lang.Object removeLast();
  public java.lang.Object removeFirst();
  public boolean offerLast(java.lang.Object);
  public boolean offerFirst(java.lang.Object);
  public void addLast(java.lang.Object);
  public void addFirst(java.lang.Object);
}
Compiled from "ZThread.java"
public class org.zeromq.ZThread {
  public org.zeromq.ZThread();
  public static void start(org.zeromq.ZThread$IDetachedRunnable, java.lang.Object...);
  public static org.zeromq.ZMQ$Socket fork(org.zeromq.ZContext, org.zeromq.ZThread$IAttachedRunnable, java.lang.Object...);
}
Compiled from "ZThread.java"
public interface org.zeromq.ZThread$IAttachedRunnable {
  public abstract void run(java.lang.Object[], org.zeromq.ZContext, org.zeromq.ZMQ$Socket);
}
Compiled from "ZThread.java"
public interface org.zeromq.ZThread$IDetachedRunnable {
  public abstract void run(java.lang.Object[]);
}
Compiled from "ZThread.java"
class org.zeromq.ZThread$ShimThread extends java.lang.Thread {
  static final boolean $assertionsDisabled;
  protected org.zeromq.ZThread$ShimThread(org.zeromq.ZContext, org.zeromq.ZThread$IAttachedRunnable, java.lang.Object[], org.zeromq.ZMQ$Socket);
  public org.zeromq.ZThread$ShimThread(org.zeromq.ZThread$IDetachedRunnable, java.lang.Object[]);
  public void run();
  static {};
}
Compiled from "Address.java"
public class zmq.Address {
  public zmq.Address(java.lang.String, java.lang.String);
  public zmq.Address(java.net.SocketAddress);
  public java.lang.String toString();
  public java.lang.String protocol();
  public java.lang.String address();
  public zmq.Address$IZAddress resolved();
  public zmq.Address$IZAddress resolved(zmq.Address$IZAddress);
}
Compiled from "Address.java"
public interface zmq.Address$IZAddress {
  public abstract java.lang.String toString();
  public abstract void resolve(java.lang.String, boolean);
  public abstract java.net.SocketAddress address();
}
Compiled from "Blob.java"
public class zmq.Blob {
  public zmq.Blob(byte[]);
  public zmq.Blob(int);
  public zmq.Blob(java.nio.ByteBuffer);
  public zmq.Blob put(int, byte);
  public zmq.Blob put(int, byte[]);
  public int size();
  public byte[] data();
  public boolean equals(java.lang.Object);
  public int hashCode();
}
Compiled from "Clock.java"
public class zmq.Clock {
  public static final long now_us();
  public static final long now_ms();
  public static final long rdtsc();
}
Compiled from "Command.java"
public class zmq.Command {
  java.lang.Object arg;
  public zmq.Command();
  public zmq.Command(zmq.ZObject, zmq.Command$Type);
  public zmq.Command(zmq.ZObject, zmq.Command$Type, java.lang.Object);
  public zmq.ZObject destination();
  public zmq.Command$Type type();
  public java.lang.String toString();
}
Compiled from "Command.java"
public final class zmq.Command$Type extends java.lang.Enum<zmq.Command$Type> {
  public static final zmq.Command$Type stop;
  public static final zmq.Command$Type plug;
  public static final zmq.Command$Type own;
  public static final zmq.Command$Type attach;
  public static final zmq.Command$Type bind;
  public static final zmq.Command$Type activate_read;
  public static final zmq.Command$Type activate_write;
  public static final zmq.Command$Type hiccup;
  public static final zmq.Command$Type pipe_term;
  public static final zmq.Command$Type pipe_term_ack;
  public static final zmq.Command$Type term_req;
  public static final zmq.Command$Type term;
  public static final zmq.Command$Type term_ack;
  public static final zmq.Command$Type reap;
  public static final zmq.Command$Type reaped;
  public static final zmq.Command$Type done;
  public static zmq.Command$Type[] values();
  public static zmq.Command$Type valueOf(java.lang.String);
  static {};
}
Compiled from "Config.java"
public final class zmq.Config extends java.lang.Enum<zmq.Config> {
  public static final zmq.Config message_pipe_granularity;
  public static final zmq.Config command_pipe_granularity;
  public static final zmq.Config inbound_poll_rate;
  public static final zmq.Config in_batch_size;
  public static final zmq.Config out_batch_size;
  public static final zmq.Config max_wm_delta;
  public static final zmq.Config max_io_events;
  public static final zmq.Config max_command_delay;
  public static final zmq.Config clock_precision;
  public static final zmq.Config pgm_max_tpdu;
  public static final zmq.Config signaler_port;
  public static zmq.Config[] values();
  public static zmq.Config valueOf(java.lang.String);
  public int getValue();
  static {};
}
Compiled from "Ctx.java"
public class zmq.Ctx {
  public static final int term_tid;
  public static final int reaper_tid;
  static final boolean $assertionsDisabled;
  public zmq.Ctx();
  protected void destroy();
  public boolean check_tag();
  public void terminate();
  public void set(int, int);
  public int get(int);
  public zmq.SocketBase create_socket(int);
  public void destroy_socket(zmq.SocketBase);
  public zmq.ZObject get_reaper();
  public void send_command(int, zmq.Command);
  public zmq.IOThread choose_io_thread(long);
  public boolean register_endpoint(java.lang.String, zmq.Ctx$Endpoint);
  public void unregister_endpoints(zmq.SocketBase);
  public zmq.Ctx$Endpoint find_endpoint(java.lang.String);
  static {};
}
Compiled from "Ctx.java"
public class zmq.Ctx$Endpoint {
  zmq.SocketBase socket;
  zmq.Options options;
  public zmq.Ctx$Endpoint(zmq.SocketBase, zmq.Options);
}
Compiled from "Dealer.java"
public class zmq.Dealer extends zmq.SocketBase {
  static final boolean $assertionsDisabled;
  public zmq.Dealer(zmq.Ctx, int, int);
  protected void xattach_pipe(zmq.Pipe, boolean);
  protected boolean xsend(zmq.Msg, int);
  protected zmq.Msg xrecv(int);
  protected boolean xhas_in();
  protected boolean xhas_out();
  protected void xread_activated(zmq.Pipe);
  protected void xwrite_activated(zmq.Pipe);
  protected void xterminated(zmq.Pipe);
  static {};
}
Compiled from "Dealer.java"
public class zmq.Dealer$DealerSession extends zmq.SessionBase {
  public zmq.Dealer$DealerSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "Decoder.java"
public class zmq.Decoder extends zmq.DecoderBase {
  public zmq.Decoder(int, long);
  public void set_msg_sink(zmq.IMsgSink);
  protected boolean next();
}
Compiled from "DecoderBase.java"
public abstract class zmq.DecoderBase implements zmq.IDecoder {
  protected int to_read;
  boolean zero_copy;
  public zmq.DecoderBase(int);
  public java.nio.ByteBuffer get_buffer();
  public int process_buffer(java.nio.ByteBuffer, int);
  protected void next_step(zmq.Msg, int);
  protected void next_step(byte[], int, int);
  protected int state();
  protected void state(int);
  protected void decoding_error();
  public boolean stalled();
  protected abstract boolean next();
}
Compiled from "Dist.java"
public class zmq.Dist {
  public zmq.Dist();
  public void attach(zmq.Pipe);
  public void match(zmq.Pipe);
  public void unmatch();
  public void terminated(zmq.Pipe);
  public void activated(zmq.Pipe);
  public boolean send_to_all(zmq.Msg, int);
  public boolean send_to_matching(zmq.Msg, int);
  public boolean has_out();
}
Compiled from "Encoder.java"
public class zmq.Encoder extends zmq.EncoderBase {
  public zmq.Encoder(int);
  public void set_msg_source(zmq.IMsgSource);
  protected boolean next();
}
Compiled from "EncoderBase.java"
public abstract class zmq.EncoderBase implements zmq.IEncoder {
  protected zmq.EncoderBase(int);
  public zmq.Transfer get_data(java.nio.ByteBuffer);
  public boolean has_data();
  protected int state();
  protected void state(int);
  protected void encoding_error();
  public final boolean is_error();
  protected abstract boolean next();
  protected void next_step(zmq.Msg, int, boolean);
  protected void next_step(byte[], int, int, boolean);
  protected void next_step(java.nio.channels.FileChannel, long, long, int, boolean);
}
Compiled from "FQ.java"
public class zmq.FQ {
  static final boolean $assertionsDisabled;
  public zmq.FQ();
  public void attach(zmq.Pipe);
  public void terminated(zmq.Pipe);
  public void activated(zmq.Pipe);
  public zmq.Msg recv();
  public zmq.Msg recvpipe(zmq.Pipe[]);
  public boolean has_in();
  static {};
}
Compiled from "IDecoder.java"
public interface zmq.IDecoder {
  public abstract void set_msg_sink(zmq.IMsgSink);
  public abstract java.nio.ByteBuffer get_buffer();
  public abstract int process_buffer(java.nio.ByteBuffer, int);
  public abstract boolean stalled();
}
Compiled from "IEncoder.java"
public interface zmq.IEncoder {
  public abstract void set_msg_source(zmq.IMsgSource);
  public abstract zmq.Transfer get_data(java.nio.ByteBuffer);
  public abstract boolean has_data();
}
Compiled from "IEngine.java"
public interface zmq.IEngine {
  public abstract void plug(zmq.IOThread, zmq.SessionBase);
  public abstract void terminate();
  public abstract void activate_in();
  public abstract void activate_out();
}
Compiled from "IMsgSink.java"
public interface zmq.IMsgSink {
  public abstract boolean push_msg(zmq.Msg);
}
Compiled from "IMsgSource.java"
public interface zmq.IMsgSource {
  public abstract zmq.Msg pull_msg();
}
Compiled from "IOObject.java"
public class zmq.IOObject implements zmq.IPollEvents {
  static final boolean $assertionsDisabled;
  public zmq.IOObject(zmq.IOThread);
  public void plug(zmq.IOThread);
  public void unplug();
  public final void add_fd(java.nio.channels.SelectableChannel);
  public final void rm_fd(java.nio.channels.SelectableChannel);
  public final void set_pollin(java.nio.channels.SelectableChannel);
  public final void set_pollout(java.nio.channels.SelectableChannel);
  public final void set_pollconnect(java.nio.channels.SelectableChannel);
  public final void set_pollaccept(java.nio.channels.SelectableChannel);
  public final void reset_pollin(java.nio.channels.SelectableChannel);
  public final void reset_pollout(java.nio.channels.SelectableChannel);
  public final void in_event();
  public final void out_event();
  public final void connect_event();
  public final void accept_event();
  public final void timer_event(int);
  public final void add_timer(long, int);
  public final void set_handler(zmq.IPollEvents);
  public void cancel_timer(int);
  static {};
}
Compiled from "IOThread.java"
public class zmq.IOThread extends zmq.ZObject implements zmq.IPollEvents {
  final java.lang.String name;
  static final boolean $assertionsDisabled;
  public zmq.IOThread(zmq.Ctx, int);
  public void start();
  public void destroy();
  public void stop();
  public zmq.Mailbox get_mailbox();
  public int get_load();
  public void in_event();
  public void out_event();
  public void connect_event();
  public void accept_event();
  public void timer_event(int);
  public zmq.Poller get_poller();
  protected void process_stop();
  static {};
}
Compiled from "IPollEvents.java"
public interface zmq.IPollEvents {
  public abstract void in_event();
  public abstract void out_event();
  public abstract void connect_event();
  public abstract void accept_event();
  public abstract void timer_event(int);
}
Compiled from "IpcAddress.java"
public class zmq.IpcAddress implements zmq.Address$IZAddress {
  public zmq.IpcAddress();
  public java.lang.String toString();
  public void resolve(java.lang.String, boolean);
  public java.net.SocketAddress address();
}
Compiled from "IpcConnecter.java"
public class zmq.IpcConnecter extends zmq.TcpConnecter {
  public zmq.IpcConnecter(zmq.IOThread, zmq.SessionBase, zmq.Options, zmq.Address, boolean);
}
Compiled from "IpcListener.java"
public class zmq.IpcListener extends zmq.TcpListener {
  public zmq.IpcListener(zmq.IOThread, zmq.SocketBase, zmq.Options);
  public java.lang.String get_address();
  public boolean set_address(java.lang.String);
}
Compiled from "LB.java"
public class zmq.LB {
  static final boolean $assertionsDisabled;
  public zmq.LB();
  public void attach(zmq.Pipe);
  public void terminated(zmq.Pipe);
  public void activated(zmq.Pipe);
  public boolean send(zmq.Msg, int);
  public boolean has_out();
  static {};
}
Compiled from "Mailbox.java"
public class zmq.Mailbox {
  static final boolean $assertionsDisabled;
  public zmq.Mailbox(java.lang.String);
  public java.nio.channels.SelectableChannel get_fd();
  public void send(zmq.Command);
  public zmq.Command recv(long);
  public void close();
  public java.lang.String toString();
  static {};
}
Compiled from "Msg.java"
public class zmq.Msg {
  public static final int more;
  public static final int identity;
  public static final int shared;
  public zmq.Msg();
  public zmq.Msg(boolean);
  public zmq.Msg(int);
  public zmq.Msg(int, boolean);
  public zmq.Msg(zmq.Msg);
  public zmq.Msg(byte[]);
  public zmq.Msg(java.lang.String);
  public zmq.Msg(byte[], boolean);
  public zmq.Msg(java.nio.ByteBuffer);
  public final boolean is_identity();
  public final boolean is_delimiter();
  public final boolean check();
  public final int flags();
  public final boolean has_more();
  public final byte type();
  public final void set_flags(int);
  public final void init_delimiter();
  public final byte[] data();
  public final java.nio.ByteBuffer buf();
  public final int size();
  public final void close();
  public java.lang.String toString();
  public final void reset_flags(int);
  public final void put(byte[], int);
  public final void put(byte[], int, int);
  public final boolean is_vsm();
  public final void put(byte);
  public final void put(byte, int);
  public final void put(java.lang.String, int);
  public final void put(zmq.Msg, int);
}
Compiled from "Mtrie.java"
public class zmq.Mtrie {
  static final boolean $assertionsDisabled;
  public zmq.Mtrie();
  public boolean add(byte[], zmq.Pipe);
  public boolean add(byte[], int, zmq.Pipe);
  public boolean rm(zmq.Pipe, zmq.Mtrie$IMtrieHandler, java.lang.Object);
  public boolean rm(byte[], int, zmq.Pipe);
  public void match(byte[], int, zmq.Mtrie$IMtrieHandler, java.lang.Object);
  static {};
}
Compiled from "Mtrie.java"
public interface zmq.Mtrie$IMtrieHandler {
  public abstract void invoke(zmq.Pipe, byte[], java.lang.Object);
}
Compiled from "MultiMap.java"
public class zmq.MultiMap<K extends java.lang.Comparable<? super K>, V> implements java.util.Map<K, V> {
  public zmq.MultiMap();
  public void clear();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public V get(java.lang.Object);
  public boolean isEmpty();
  public java.util.Set<K> keySet();
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public int size();
  public java.util.Collection<V> values();
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  static java.util.TreeMap access$000(zmq.MultiMap);
  static java.util.HashMap access$100(zmq.MultiMap);
}
Compiled from "MultiMap.java"
public class zmq.MultiMap$MultiMapEntry implements java.util.Map$Entry<K, V> {
  final zmq.MultiMap this$0;
  public zmq.MultiMap$MultiMapEntry(K, V);
  public K getKey();
  public V getValue();
  public V setValue(V);
  public java.lang.Object getKey();
}
Compiled from "MultiMap.java"
public class zmq.MultiMap$MultiMapEntrySet implements java.util.Set<java.util.Map$Entry<K, V>>, java.util.Iterator<java.util.Map$Entry<K, V>> {
  final zmq.MultiMap this$0;
  public zmq.MultiMap$MultiMapEntrySet(zmq.MultiMap<K, V>);
  public boolean add(java.util.Map$Entry<K, V>);
  public boolean addAll(java.util.Collection<? extends java.util.Map$Entry<K, V>>);
  public void clear();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean isEmpty();
  public java.util.Iterator<java.util.Map$Entry<K, V>> iterator();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public int size();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public boolean hasNext();
  public java.util.Map$Entry<K, V> next();
  public void remove();
  public boolean add(java.lang.Object);
  public java.lang.Object next();
}
Compiled from "Options.java"
public class zmq.Options {
  int sndhwm;
  int rcvhwm;
  long affinity;
  byte identity_size;
  byte[] identity;
  java.lang.String last_endpoint;
  int rate;
  int recovery_ivl;
  int multicast_hops;
  int sndbuf;
  int rcvbuf;
  int type;
  int linger;
  int reconnect_ivl;
  int reconnect_ivl_max;
  int backlog;
  long maxmsgsize;
  int rcvtimeo;
  int sndtimeo;
  int ipv4only;
  int delay_attach_on_connect;
  boolean delay_on_close;
  boolean delay_on_disconnect;
  boolean filter;
  boolean recv_identity;
  int tcp_keepalive;
  int tcp_keepalive_cnt;
  int tcp_keepalive_idle;
  int tcp_keepalive_intvl;
  final java.util.List<zmq.TcpAddress$TcpAddressMask> tcp_accept_filters;
  int socket_id;
  java.lang.Class<? extends zmq.DecoderBase> decoder;
  java.lang.Class<? extends zmq.EncoderBase> encoder;
  public zmq.Options();
  public boolean setsockopt(int, java.lang.Object);
  public java.lang.Object getsockopt(int);
}
Compiled from "Own.java"
public abstract class zmq.Own extends zmq.ZObject {
  protected final zmq.Options options;
  static final boolean $assertionsDisabled;
  public zmq.Own(zmq.Ctx, int);
  public zmq.Own(zmq.IOThread, zmq.Options);
  public abstract void destroy();
  protected void process_destroy();
  public void inc_seqnum();
  protected void process_seqnum();
  protected void launch_child(zmq.Own);
  protected void term_child(zmq.Own);
  protected void process_term_req(zmq.Own);
  protected void process_own(zmq.Own);
  protected void terminate();
  protected boolean is_terminating();
  protected void process_term(int);
  public void register_term_acks(int);
  public void unregister_term_ack();
  protected void process_term_ack();
  static {};
}
Compiled from "Pair.java"
public class zmq.Pair extends zmq.SocketBase {
  static final boolean $assertionsDisabled;
  zmq.Pair(zmq.Ctx, int, int);
  protected void xattach_pipe(zmq.Pipe, boolean);
  protected void xterminated(zmq.Pipe);
  protected void xread_activated(zmq.Pipe);
  protected void xwrite_activated(zmq.Pipe);
  protected boolean xsend(zmq.Msg, int);
  protected zmq.Msg xrecv(int);
  protected boolean xhas_in();
  protected boolean xhas_out();
  static {};
}
Compiled from "Pair.java"
public class zmq.Pair$PairSession extends zmq.SessionBase {
  public zmq.Pair$PairSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "Pipe.java"
public class zmq.Pipe extends zmq.ZObject {
  static final boolean $assertionsDisabled;
  public static void pipepair(zmq.ZObject[], zmq.Pipe[], int[], boolean[]);
  public void set_event_sink(zmq.Pipe$IPipeEvents);
  public void set_identity(zmq.Blob);
  public zmq.Blob get_identity();
  public boolean check_read();
  public zmq.Msg read();
  public boolean check_write();
  public boolean write(zmq.Msg);
  public void rollback();
  public void flush();
  protected void process_activate_read();
  protected void process_activate_write(long);
  protected void process_hiccup(java.lang.Object);
  protected void process_pipe_term();
  protected void process_pipe_term_ack();
  public void terminate(boolean);
  public void hiccup();
  public java.lang.String toString();
  static {};
}
Compiled from "Pipe.java"
public interface zmq.Pipe$IPipeEvents {
  public abstract void read_activated(zmq.Pipe);
  public abstract void write_activated(zmq.Pipe);
  public abstract void hiccuped(zmq.Pipe);
  public abstract void terminated(zmq.Pipe);
}
Compiled from "Pipe.java"
final class zmq.Pipe$State extends java.lang.Enum<zmq.Pipe$State> {
  public static final zmq.Pipe$State active;
  public static final zmq.Pipe$State delimited;
  public static final zmq.Pipe$State pending;
  public static final zmq.Pipe$State terminating;
  public static final zmq.Pipe$State terminated;
  public static final zmq.Pipe$State double_terminated;
  public static zmq.Pipe$State[] values();
  public static zmq.Pipe$State valueOf(java.lang.String);
  static {};
}
Compiled from "PollItem.java"
public class zmq.PollItem {
  public zmq.PollItem(zmq.SocketBase);
  public zmq.PollItem(zmq.SocketBase, int);
  public zmq.PollItem(java.nio.channels.SelectableChannel, int);
  public final boolean isReadable();
  public final boolean isWritable();
  public final boolean isError();
  public final zmq.SocketBase getSocket();
  public final java.nio.channels.SelectableChannel getRawSocket();
  protected final java.nio.channels.SelectableChannel getChannel();
  public final int interestOps();
  public final int interestOps(int);
  public final int readyOps(java.nio.channels.SelectionKey, int);
  public final int readyOps();
}
Compiled from "Poller.java"
public class zmq.Poller extends zmq.PollerBase implements java.lang.Runnable {
  public zmq.Poller();
  public zmq.Poller(java.lang.String);
  public void destroy();
  public final void add_fd(java.nio.channels.SelectableChannel, zmq.IPollEvents);
  public final void rm_fd(java.nio.channels.SelectableChannel);
  public final void set_pollin(java.nio.channels.SelectableChannel);
  public final void reset_pollin(java.nio.channels.SelectableChannel);
  public final void set_pollout(java.nio.channels.SelectableChannel);
  public final void reset_pollout(java.nio.channels.SelectableChannel);
  public final void set_pollconnect(java.nio.channels.SelectableChannel);
  public final void set_pollaccept(java.nio.channels.SelectableChannel);
  public void start();
  public void stop();
  public void run();
}
Compiled from "Poller.java"
class zmq.Poller$PollSet {
  protected zmq.IPollEvents handler;
  protected java.nio.channels.SelectionKey key;
  protected int ops;
  protected boolean cancelled;
  protected zmq.Poller$PollSet(zmq.IPollEvents);
}
Compiled from "PollerBase.java"
public abstract class zmq.PollerBase {
  static final boolean $assertionsDisabled;
  protected zmq.PollerBase();
  public final int get_load();
  protected void adjust_load(int);
  public void add_timer(long, zmq.IPollEvents, int);
  public void cancel_timer(zmq.IPollEvents, int);
  protected long execute_timers();
  static {};
}
Compiled from "PollerBase.java"
final class zmq.PollerBase$TimerInfo {
  zmq.IPollEvents sink;
  int id;
  final zmq.PollerBase this$0;
  public zmq.PollerBase$TimerInfo(zmq.PollerBase, zmq.IPollEvents, int);
}
Compiled from "Proxy.java"
public class zmq.Proxy {
  public zmq.Proxy();
  public static boolean proxy(zmq.SocketBase, zmq.SocketBase, zmq.SocketBase);
}
Compiled from "Pub.java"
public class zmq.Pub extends zmq.XPub {
  zmq.Pub(zmq.Ctx, int, int);
  protected zmq.Msg xrecv(int);
  protected boolean xhas_in();
}
Compiled from "Pub.java"
public class zmq.Pub$PubSession extends zmq.XPub$XPubSession {
  public zmq.Pub$PubSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "Pull.java"
public class zmq.Pull extends zmq.SocketBase {
  static final boolean $assertionsDisabled;
  public zmq.Pull(zmq.Ctx, int, int);
  protected void xattach_pipe(zmq.Pipe, boolean);
  protected void xread_activated(zmq.Pipe);
  protected void xterminated(zmq.Pipe);
  public zmq.Msg xrecv(int);
  protected boolean xhas_in();
  static {};
}
Compiled from "Pull.java"
public class zmq.Pull$PullSession extends zmq.SessionBase {
  public zmq.Pull$PullSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "Push.java"
public class zmq.Push extends zmq.SocketBase {
  static final boolean $assertionsDisabled;
  public zmq.Push(zmq.Ctx, int, int);
  protected void xattach_pipe(zmq.Pipe, boolean);
  protected void xwrite_activated(zmq.Pipe);
  protected void xterminated(zmq.Pipe);
  public boolean xsend(zmq.Msg, int);
  protected boolean xhas_out();
  static {};
}
Compiled from "Push.java"
public class zmq.Push$PushSession extends zmq.SessionBase {
  public zmq.Push$PushSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "Reaper.java"
public class zmq.Reaper extends zmq.ZObject implements zmq.IPollEvents {
  public zmq.Reaper(zmq.Ctx, int);
  public void destroy();
  public zmq.Mailbox get_mailbox();
  public void start();
  public void stop();
  public void in_event();
  public void out_event();
  public void connect_event();
  public void accept_event();
  public void timer_event(int);
  protected void process_stop();
  protected void process_reap(zmq.SocketBase);
  protected void process_reaped();
}
Compiled from "Rep.java"
public class zmq.Rep extends zmq.Router {
  static final boolean $assertionsDisabled;
  public zmq.Rep(zmq.Ctx, int, int);
  protected boolean xsend(zmq.Msg, int);
  protected zmq.Msg xrecv(int);
  protected boolean xhas_in();
  protected boolean xhas_out();
  static {};
}
Compiled from "Rep.java"
public class zmq.Rep$RepSession extends zmq.Router$RouterSession {
  public zmq.Rep$RepSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "Req.java"
public class zmq.Req extends zmq.Dealer {
  static final boolean $assertionsDisabled;
  public zmq.Req(zmq.Ctx, int, int);
  public boolean xsend(zmq.Msg, int);
  protected zmq.Msg xrecv(int);
  public boolean xhas_in();
  public boolean xhas_out();
  static {};
}
Compiled from "Req.java"
class zmq.Req$1 {
  static final int[] $SwitchMap$zmq$Req$ReqSession$State;
  static {};
}
Compiled from "Req.java"
public class zmq.Req$ReqSession extends zmq.Dealer$DealerSession {
  zmq.Req$ReqSession$State state;
  public zmq.Req$ReqSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
  public boolean push_msg(zmq.Msg);
  public void reset();
}
Compiled from "Req.java"
final class zmq.Req$ReqSession$State extends java.lang.Enum<zmq.Req$ReqSession$State> {
  public static final zmq.Req$ReqSession$State identity;
  public static final zmq.Req$ReqSession$State bottom;
  public static final zmq.Req$ReqSession$State body;
  public static zmq.Req$ReqSession$State[] values();
  public static zmq.Req$ReqSession$State valueOf(java.lang.String);
  static {};
}
Compiled from "Router.java"
public class zmq.Router extends zmq.SocketBase {
  static final boolean $assertionsDisabled;
  public zmq.Router(zmq.Ctx, int, int);
  public void xattach_pipe(zmq.Pipe, boolean);
  public boolean xsetsockopt(int, java.lang.Object);
  public void xterminated(zmq.Pipe);
  public void xread_activated(zmq.Pipe);
  public void xwrite_activated(zmq.Pipe);
  protected boolean xsend(zmq.Msg, int);
  protected zmq.Msg xrecv(int);
  protected void rollback();
  protected boolean xhas_in();
  protected boolean xhas_out();
  static {};
}
Compiled from "Router.java"
class zmq.Router$Outpipe {
  final zmq.Router this$0;
  public zmq.Router$Outpipe(zmq.Router, zmq.Pipe, boolean);
  static zmq.Pipe access$000(zmq.Router$Outpipe);
  static boolean access$100(zmq.Router$Outpipe);
  static boolean access$102(zmq.Router$Outpipe, boolean);
}
Compiled from "Router.java"
public class zmq.Router$RouterSession extends zmq.SessionBase {
  public zmq.Router$RouterSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "SessionBase.java"
public class zmq.SessionBase extends zmq.Own implements zmq.Pipe$IPipeEvents,zmq.IPollEvents,zmq.IMsgSink,zmq.IMsgSource {
  static final boolean $assertionsDisabled;
  public static zmq.SessionBase create(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
  public zmq.SessionBase(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
  public void destroy();
  public void attach_pipe(zmq.Pipe);
  public zmq.Msg pull_msg();
  public boolean push_msg(zmq.Msg);
  protected void reset();
  public void flush();
  public void terminated(zmq.Pipe);
  public void read_activated(zmq.Pipe);
  public void write_activated(zmq.Pipe);
  public void hiccuped(zmq.Pipe);
  public zmq.SocketBase get_soket();
  protected void process_plug();
  protected void process_attach(zmq.IEngine);
  public void detach();
  protected void process_term(int);
  public void timer_event(int);
  public java.lang.String toString();
  public void in_event();
  public void out_event();
  public void connect_event();
  public void accept_event();
  static {};
}
Compiled from "Signaler.java"
public class zmq.Signaler {
  static final boolean $assertionsDisabled;
  public zmq.Signaler();
  public void close();
  public java.nio.channels.SelectableChannel get_fd();
  public void send();
  public boolean wait_event(long);
  public void recv();
  static {};
}
Compiled from "SocketBase.java"
public abstract class zmq.SocketBase extends zmq.Own implements zmq.IPollEvents,zmq.Pipe$IPipeEvents {
  static final boolean $assertionsDisabled;
  protected zmq.SocketBase(zmq.Ctx, int, int);
  protected abstract void xattach_pipe(zmq.Pipe, boolean);
  protected abstract void xterminated(zmq.Pipe);
  public boolean check_tag();
  public static zmq.SocketBase create(int, zmq.Ctx, int, int);
  public void destroy();
  public zmq.Mailbox get_mailbox();
  public void stop();
  public boolean setsockopt(int, java.lang.Object);
  public int getsockopt(int);
  public java.lang.Object getsockoptx(int);
  public boolean bind(java.lang.String);
  public boolean connect(java.lang.String);
  public boolean term_endpoint(java.lang.String);
  public boolean send(zmq.Msg, int);
  public zmq.Msg recv(int);
  public void close();
  public boolean has_in();
  public boolean has_out();
  public void start_reaping(zmq.Poller);
  protected void process_stop();
  protected void process_bind(zmq.Pipe);
  protected void process_term(int);
  protected void process_destroy();
  protected boolean xsetsockopt(int, java.lang.Object);
  protected boolean xhas_out();
  protected boolean xsend(zmq.Msg, int);
  protected boolean xhas_in();
  protected zmq.Msg xrecv(int);
  protected void xread_activated(zmq.Pipe);
  protected void xwrite_activated(zmq.Pipe);
  protected void xhiccuped(zmq.Pipe);
  public void in_event();
  public void out_event();
  public void connect_event();
  public void accept_event();
  public void timer_event(int);
  public void read_activated(zmq.Pipe);
  public void write_activated(zmq.Pipe);
  public void hiccuped(zmq.Pipe);
  public void terminated(zmq.Pipe);
  public boolean monitor(java.lang.String, int);
  public void event_connected(java.lang.String, java.nio.channels.SelectableChannel);
  public void event_connect_delayed(java.lang.String, int);
  public void event_connect_retried(java.lang.String, int);
  public void event_listening(java.lang.String, java.nio.channels.SelectableChannel);
  public void event_bind_failed(java.lang.String, int);
  public void event_accepted(java.lang.String, java.nio.channels.SelectableChannel);
  public void event_accept_failed(java.lang.String, int);
  public void event_closed(java.lang.String, java.nio.channels.SelectableChannel);
  public void event_close_failed(java.lang.String, int);
  public void event_disconnected(java.lang.String, java.nio.channels.SelectableChannel);
  protected void monitor_event(zmq.ZMQ$Event);
  protected void stop_monitor();
  public java.lang.String toString();
  public java.nio.channels.SelectableChannel get_fd();
  public java.lang.String typeString();
  static {};
}
Compiled from "StreamEngine.java"
public class zmq.StreamEngine implements zmq.IEngine,zmq.IPollEvents,zmq.IMsgSink {
  static final boolean $assertionsDisabled;
  public zmq.StreamEngine(java.nio.channels.SocketChannel, zmq.Options, java.lang.String);
  public void destroy();
  public void plug(zmq.IOThread, zmq.SessionBase);
  public void terminate();
  public void in_event();
  public void out_event();
  public void connect_event();
  public void accept_event();
  public void timer_event(int);
  public void activate_out();
  public void activate_in();
  public boolean push_msg(zmq.Msg);
  static {};
}
Compiled from "Sub.java"
public class zmq.Sub extends zmq.XSub {
  public zmq.Sub(zmq.Ctx, int, int);
  public boolean xsetsockopt(int, java.lang.Object);
  protected boolean xsend(zmq.Msg, int);
  protected boolean xhas_out();
}
Compiled from "Sub.java"
public class zmq.Sub$SubSession extends zmq.XSub$XSubSession {
  public zmq.Sub$SubSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "TcpAddress.java"
public class zmq.TcpAddress implements zmq.Address$IZAddress {
  protected java.net.InetSocketAddress address;
  public zmq.TcpAddress(java.lang.String);
  public zmq.TcpAddress();
  public java.lang.String toString();
  public void resolve(java.lang.String, boolean);
  public java.net.SocketAddress address();
}
Compiled from "TcpAddress.java"
public class zmq.TcpAddress$TcpAddressMask extends zmq.TcpAddress {
  public zmq.TcpAddress$TcpAddressMask();
  public boolean match_address(java.net.SocketAddress);
}
Compiled from "TcpConnecter.java"
public class zmq.TcpConnecter extends zmq.Own implements zmq.IPollEvents {
  static final boolean $assertionsDisabled;
  public zmq.TcpConnecter(zmq.IOThread, zmq.SessionBase, zmq.Options, zmq.Address, boolean);
  public void destroy();
  protected void process_plug();
  public void process_term(int);
  public void in_event();
  public void out_event();
  public void accept_event();
  public void connect_event();
  public void timer_event(int);
  static {};
}
Compiled from "TcpListener.java"
public class zmq.TcpListener extends zmq.Own implements zmq.IPollEvents {
  static final boolean $assertionsDisabled;
  public zmq.TcpListener(zmq.IOThread, zmq.SocketBase, zmq.Options);
  public void destroy();
  protected void process_plug();
  protected void process_term(int);
  public void accept_event();
  public java.lang.String get_address();
  public boolean set_address(java.lang.String);
  public void in_event();
  public void out_event();
  public void connect_event();
  public void timer_event(int);
  static {};
}
Compiled from "Transfer.java"
public interface zmq.Transfer {
  public abstract int transferTo(java.nio.channels.WritableByteChannel) throws java.io.IOException;
  public abstract int remaining();
}
Compiled from "Transfer.java"
public class zmq.Transfer$ByteBufferTransfer implements zmq.Transfer {
  public zmq.Transfer$ByteBufferTransfer(java.nio.ByteBuffer);
  public final int transferTo(java.nio.channels.WritableByteChannel) throws java.io.IOException;
  public final int remaining();
}
Compiled from "Transfer.java"
public class zmq.Transfer$FileChannelTransfer implements zmq.Transfer {
  public zmq.Transfer$FileChannelTransfer(java.nio.ByteBuffer, java.nio.channels.FileChannel, long, long);
  public final int transferTo(java.nio.channels.WritableByteChannel) throws java.io.IOException;
  public final int remaining();
}
Compiled from "Trie.java"
public class zmq.Trie {
  zmq.Trie[] next;
  static final boolean $assertionsDisabled;
  public zmq.Trie();
  public boolean add(byte[]);
  public boolean add(byte[], int);
  public boolean rm(byte[], int);
  public boolean check(byte[]);
  public void apply(zmq.Trie$ITrieHandler, java.lang.Object);
  static {};
}
Compiled from "Trie.java"
public interface zmq.Trie$ITrieHandler {
  public abstract void added(byte[], int, java.lang.Object);
}
Compiled from "Utils.java"
public class zmq.Utils {
  public zmq.Utils();
  public static int generate_random();
  public static void tune_tcp_socket(java.nio.channels.SocketChannel) throws java.net.SocketException;
  public static void tune_tcp_socket(java.net.Socket) throws java.net.SocketException;
  public static void tune_tcp_keepalives(java.nio.channels.SocketChannel, int, int, int, int) throws java.net.SocketException;
  public static void tune_tcp_keepalives(java.net.Socket, int, int, int, int) throws java.net.SocketException;
  public static void unblock_socket(java.nio.channels.SelectableChannel) throws java.io.IOException;
  public static <T> T[] realloc(java.lang.Class<T>, T[], int, boolean);
  public static <T> void swap(java.util.List<T>, int, int);
  public static byte[] bytes(java.nio.ByteBuffer);
  public static byte[] realloc(byte[], int);
  public static boolean delete(java.io.File);
  static {};
}
Compiled from "V1Decoder.java"
public class zmq.V1Decoder extends zmq.DecoderBase {
  public zmq.V1Decoder(int, long, zmq.IMsgSink);
  public void set_msg_sink(zmq.IMsgSink);
  protected boolean next();
}
Compiled from "V1Encoder.java"
public class zmq.V1Encoder extends zmq.EncoderBase {
  public zmq.V1Encoder(int, zmq.IMsgSource);
  public void set_msg_source(zmq.IMsgSource);
  protected boolean next();
}
Compiled from "V1Protocol.java"
public class zmq.V1Protocol {
  public static final int VERSION;
  public static final int MORE_FLAG;
  public static final int LARGE_FLAG;
  public zmq.V1Protocol();
}
Compiled from "ValueReference.java"
public class zmq.ValueReference<V> {
  public zmq.ValueReference(V);
  public zmq.ValueReference();
  public final V get();
  public final void set(V);
}
Compiled from "XPub.java"
public class zmq.XPub extends zmq.SocketBase {
  boolean verbose;
  static final boolean $assertionsDisabled;
  public zmq.XPub(zmq.Ctx, int, int);
  protected void xattach_pipe(zmq.Pipe, boolean);
  protected void xread_activated(zmq.Pipe);
  protected void xwrite_activated(zmq.Pipe);
  public boolean xsetsockopt(int, java.lang.Object);
  protected void xterminated(zmq.Pipe);
  protected boolean xsend(zmq.Msg, int);
  protected boolean xhas_out();
  protected zmq.Msg xrecv(int);
  protected boolean xhas_in();
  static zmq.Dist access$000(zmq.XPub);
  static java5.util.Deque access$100(zmq.XPub);
  static {};
}
Compiled from "XPub.java"
final class zmq.XPub$1 implements zmq.Mtrie$IMtrieHandler {
  zmq.XPub$1();
  public void invoke(zmq.Pipe, byte[], java.lang.Object);
}
Compiled from "XPub.java"
final class zmq.XPub$2 implements zmq.Mtrie$IMtrieHandler {
  zmq.XPub$2();
  public void invoke(zmq.Pipe, byte[], java.lang.Object);
}
Compiled from "XPub.java"
public class zmq.XPub$XPubSession extends zmq.SessionBase {
  public zmq.XPub$XPubSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "XSub.java"
public class zmq.XSub extends zmq.SocketBase {
  static final boolean $assertionsDisabled;
  public zmq.XSub(zmq.Ctx, int, int);
  protected void xattach_pipe(zmq.Pipe, boolean);
  protected void xread_activated(zmq.Pipe);
  protected void xwrite_activated(zmq.Pipe);
  protected void xterminated(zmq.Pipe);
  protected void xhiccuped(zmq.Pipe);
  protected boolean xsend(zmq.Msg, int);
  protected boolean xhas_out();
  protected zmq.Msg xrecv(int);
  protected boolean xhas_in();
  static {};
}
Compiled from "XSub.java"
final class zmq.XSub$1 implements zmq.Trie$ITrieHandler {
  zmq.XSub$1();
  public void added(byte[], int, java.lang.Object);
}
Compiled from "XSub.java"
public class zmq.XSub$XSubSession extends zmq.SessionBase {
  public zmq.XSub$XSubSession(zmq.IOThread, boolean, zmq.SocketBase, zmq.Options, zmq.Address);
}
Compiled from "YPipe.java"
public class zmq.YPipe<T> {
  static final boolean $assertionsDisabled;
  public zmq.YPipe(java.lang.Class<T>, int);
  public final void write(T, boolean);
  public T unwrite();
  public final boolean flush();
  public final boolean check_read();
  public final T read();
  public final T probe();
  static {};
}
Compiled from "YQueue.java"
public class zmq.YQueue<T> {
  public zmq.YQueue(java.lang.Class<T>, int);
  public final int front_pos();
  public final T front();
  public final int back_pos();
  public final T back();
  public final T pop();
  public final void push(T);
  public final void unpush();
}
Compiled from "YQueue.java"
class zmq.YQueue$Chunk {
  final T[] values;
  final int[] pos;
  zmq.YQueue<T>.Chunk prev;
  zmq.YQueue<T>.Chunk next;
  static final boolean $assertionsDisabled;
  final zmq.YQueue this$0;
  protected zmq.YQueue$Chunk(java.lang.Class<T>, int, int);
  static {};
}
Compiled from "ZError.java"
public class zmq.ZError {
  public static final int EINTR;
  public static final int EACCESS;
  public static final int EFAULT;
  public static final int EINVAL;
  public static final int EAGAIN;
  public static final int EINPROGRESS;
  public static final int EPROTONOSUPPORT;
  public static final int ENOTSUP;
  public static final int EADDRINUSE;
  public static final int EADDRNOTAVAIL;
  public static final int ENETDOWN;
  public static final int ENOBUFS;
  public static final int EISCONN;
  public static final int ENOTCONN;
  public static final int ECONNREFUSED;
  public static final int EHOSTUNREACH;
  public static final int EFSM;
  public static final int ENOCOMPATPROTO;
  public static final int ETERM;
  public static final int EMTHREAD;
  public static final int EIOEXC;
  public static final int ESOCKET;
  public static final int EMFILE;
  public zmq.ZError();
  public static int errno();
  public static void errno(int);
  public static java.lang.Throwable exc();
  public static void exc(java.io.IOException);
  public static boolean is(int);
  public static void clear();
  public static java.lang.String toString(int);
  static {};
}
Compiled from "ZError.java"
final class zmq.ZError$1 extends java.lang.ThreadLocal<java.lang.Integer> {
  zmq.ZError$1();
  protected synchronized java.lang.Integer initialValue();
  protected java.lang.Object initialValue();
}
Compiled from "ZError.java"
public class zmq.ZError$IOException extends java.lang.RuntimeException {
  public zmq.ZError$IOException(java.io.IOException);
}
Compiled from "ZError.java"
public class zmq.ZError$InstantiationException extends java.lang.RuntimeException {
  public zmq.ZError$InstantiationException(java.lang.Throwable);
}
Compiled from "ZMQ.java"
public class zmq.ZMQ {
  public static final int ZMQ_VERSION_MAJOR;
  public static final int ZMQ_VERSION_MINOR;
  public static final int ZMQ_VERSION_PATCH;
  public static final int ZMQ_IO_THREADS;
  public static final int ZMQ_MAX_SOCKETS;
  public static final int ZMQ_IO_THREADS_DFLT;
  public static final int ZMQ_MAX_SOCKETS_DFLT;
  public static final int ZMQ_PAIR;
  public static final int ZMQ_PUB;
  public static final int ZMQ_SUB;
  public static final int ZMQ_REQ;
  public static final int ZMQ_REP;
  public static final int ZMQ_DEALER;
  public static final int ZMQ_ROUTER;
  public static final int ZMQ_PULL;
  public static final int ZMQ_PUSH;
  public static final int ZMQ_XPUB;
  public static final int ZMQ_XSUB;
  public static final int ZMQ_XREQ;
  public static final int ZMQ_XREP;
  public static final int ZMQ_AFFINITY;
  public static final int ZMQ_IDENTITY;
  public static final int ZMQ_SUBSCRIBE;
  public static final int ZMQ_UNSUBSCRIBE;
  public static final int ZMQ_RATE;
  public static final int ZMQ_RECOVERY_IVL;
  public static final int ZMQ_SNDBUF;
  public static final int ZMQ_RCVBUF;
  public static final int ZMQ_RCVMORE;
  public static final int ZMQ_FD;
  public static final int ZMQ_EVENTS;
  public static final int ZMQ_TYPE;
  public static final int ZMQ_LINGER;
  public static final int ZMQ_RECONNECT_IVL;
  public static final int ZMQ_BACKLOG;
  public static final int ZMQ_RECONNECT_IVL_MAX;
  public static final int ZMQ_MAXMSGSIZE;
  public static final int ZMQ_SNDHWM;
  public static final int ZMQ_RCVHWM;
  public static final int ZMQ_MULTICAST_HOPS;
  public static final int ZMQ_RCVTIMEO;
  public static final int ZMQ_SNDTIMEO;
  public static final int ZMQ_IPV4ONLY;
  public static final int ZMQ_LAST_ENDPOINT;
  public static final int ZMQ_ROUTER_MANDATORY;
  public static final int ZMQ_TCP_KEEPALIVE;
  public static final int ZMQ_TCP_KEEPALIVE_CNT;
  public static final int ZMQ_TCP_KEEPALIVE_IDLE;
  public static final int ZMQ_TCP_KEEPALIVE_INTVL;
  public static final int ZMQ_TCP_ACCEPT_FILTER;
  public static final int ZMQ_DELAY_ATTACH_ON_CONNECT;
  public static final int ZMQ_XPUB_VERBOSE;
  public static final int ZMQ_ENCODER;
  public static final int ZMQ_DECODER;
  public static final int ZMQ_MORE;
  public static final int ZMQ_DONTWAIT;
  public static final int ZMQ_SNDMORE;
  public static final int ZMQ_NOBLOCK;
  public static final int ZMQ_FAIL_UNROUTABLE;
  public static final int ZMQ_ROUTER_BEHAVIOR;
  public static final int ZMQ_EVENT_CONNECTED;
  public static final int ZMQ_EVENT_CONNECT_DELAYED;
  public static final int ZMQ_EVENT_CONNECT_RETRIED;
  public static final int ZMQ_EVENT_CONNECT_FAILED;
  public static final int ZMQ_EVENT_LISTENING;
  public static final int ZMQ_EVENT_BIND_FAILED;
  public static final int ZMQ_EVENT_ACCEPTED;
  public static final int ZMQ_EVENT_ACCEPT_FAILED;
  public static final int ZMQ_EVENT_CLOSED;
  public static final int ZMQ_EVENT_CLOSE_FAILED;
  public static final int ZMQ_EVENT_DISCONNECTED;
  public static final int ZMQ_EVENT_ALL;
  public static final int ZMQ_POLLIN;
  public static final int ZMQ_POLLOUT;
  public static final int ZMQ_POLLERR;
  public static final int ZMQ_STREAMER;
  public static final int ZMQ_FORWARDER;
  public static final int ZMQ_QUEUE;
  public zmq.ZMQ();
  public static zmq.Ctx zmq_ctx_new();
  public static void zmq_ctx_set(zmq.Ctx, int, int);
  public static int zmq_ctx_get(zmq.Ctx, int);
  public static zmq.Ctx zmq_init(int);
  public static void zmq_term(zmq.Ctx);
  public static zmq.SocketBase zmq_socket(zmq.Ctx, int);
  public static void zmq_close(zmq.SocketBase);
  public static void zmq_setsockopt(zmq.SocketBase, int, java.lang.Object);
  public static java.lang.Object zmq_getsockoptx(zmq.SocketBase, int);
  public static int zmq_getsockopt(zmq.SocketBase, int);
  public static boolean zmq_socket_monitor(zmq.SocketBase, java.lang.String, int);
  public static boolean zmq_bind(zmq.SocketBase, java.lang.String);
  public static boolean zmq_connect(zmq.SocketBase, java.lang.String);
  public static boolean zmq_unbind(zmq.SocketBase, java.lang.String);
  public static boolean zmq_disconnect(zmq.SocketBase, java.lang.String);
  public static int zmq_send(zmq.SocketBase, java.lang.String, int);
  public static int zmq_send(zmq.SocketBase, zmq.Msg, int);
  public static int zmq_send(zmq.SocketBase, byte[], int, int);
  public int zmq_sendiov(zmq.SocketBase, byte[][], int, int);
  public static zmq.Msg zmq_recv(zmq.SocketBase, int);
  public int zmq_recviov(zmq.SocketBase, byte[][], int, int);
  public static zmq.Msg s_recvmsg(zmq.SocketBase, int);
  public static zmq.Msg zmq_msg_init();
  public static zmq.Msg zmq_msg_init_size(int);
  public static int zmq_msg_size(zmq.Msg);
  public static zmq.Msg zmq_recvmsg(zmq.SocketBase, int);
  public static int zmq_sendmsg(zmq.SocketBase, zmq.Msg, int);
  public static int zmq_msg_get(zmq.Msg);
  public static int zmq_msg_get(zmq.Msg, int);
  public static void zmq_sleep(int);
  public static boolean zmq_proxy(zmq.SocketBase, zmq.SocketBase, zmq.SocketBase);
  public static boolean zmq_device(int, zmq.SocketBase, zmq.SocketBase);
  public static int zmq_poll(zmq.PollItem[], long);
  public static int zmq_poll(zmq.PollItem[], int, long);
  public static int zmq_poll(java.nio.channels.Selector, zmq.PollItem[], long);
  public static int zmq_poll(java.nio.channels.Selector, zmq.PollItem[], int, long);
  public static long zmq_stopwatch_start();
  public static long zmq_stopwatch_stop(long);
  public static int ZMQ_MAKE_VERSION(int, int, int);
  public static java.lang.String zmq_strerror(int);
  static java.lang.ThreadLocal access$000();
  static {};
}
Compiled from "ZMQ.java"
public class zmq.ZMQ$Event {
  public final int event;
  public final java.lang.String addr;
  public zmq.ZMQ$Event(int, java.lang.String, java.lang.Object);
  public boolean write(zmq.SocketBase);
  public static zmq.ZMQ$Event read(zmq.SocketBase);
}
Compiled from "ZMQ.java"
class zmq.ZMQ$PollSelector {
  static final boolean $assertionsDisabled;
  public static java.nio.channels.Selector open() throws java.io.IOException;
  public java.nio.channels.Selector get();
  public void finalize();
  static {};
}
Compiled from "ZObject.java"
public abstract class zmq.ZObject {
  protected zmq.ZObject(zmq.Ctx, int);
  protected zmq.ZObject(zmq.ZObject);
  protected int get_tid();
  protected zmq.Ctx get_ctx();
  protected void process_command(zmq.Command);
  protected boolean register_endpoint(java.lang.String, zmq.Ctx$Endpoint);
  protected void unregister_endpoints(zmq.SocketBase);
  protected zmq.Ctx$Endpoint find_endpoint(java.lang.String);
  protected void destroy_socket(zmq.SocketBase);
  protected zmq.IOThread choose_io_thread(long);
  protected void send_stop();
  protected void send_plug(zmq.Own);
  protected void send_plug(zmq.Own, boolean);
  protected void send_own(zmq.Own, zmq.Own);
  protected void send_attach(zmq.SessionBase, zmq.IEngine);
  protected void send_attach(zmq.SessionBase, zmq.IEngine, boolean);
  protected void send_bind(zmq.Own, zmq.Pipe);
  protected void send_bind(zmq.Own, zmq.Pipe, boolean);
  protected void send_activate_read(zmq.Pipe);
  protected void send_activate_write(zmq.Pipe, long);
  protected void send_hiccup(zmq.Pipe, java.lang.Object);
  protected void send_pipe_term(zmq.Pipe);
  protected void send_pipe_term_ack(zmq.Pipe);
  protected void send_term_req(zmq.Own, zmq.Own);
  protected void send_term(zmq.Own, int);
  protected void send_term_ack(zmq.Own);
  protected void send_reap(zmq.SocketBase);
  protected void send_reaped();
  protected void send_done();
  protected void process_stop();
  protected void process_plug();
  protected void process_own(zmq.Own);
  protected void process_attach(zmq.IEngine);
  protected void process_bind(zmq.Pipe);
  protected void process_activate_read();
  protected void process_activate_write(long);
  protected void process_hiccup(java.lang.Object);
  protected void process_pipe_term();
  protected void process_pipe_term_ack();
  protected void process_term_req(zmq.Own);
  protected void process_term(int);
  protected void process_term_ack();
  protected void process_reap(zmq.SocketBase);
  protected void process_reaped();
  protected void process_seqnum();
}
Compiled from "ZObject.java"
class zmq.ZObject$1 {
  static final int[] $SwitchMap$zmq$Command$Type;
  static {};
}
