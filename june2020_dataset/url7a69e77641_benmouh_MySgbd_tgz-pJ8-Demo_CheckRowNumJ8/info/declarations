Compiled from "CheckRowNum.java"
public class Demo.CheckRowNum {
  public Demo.CheckRowNum();
  public java.lang.String fixSqlWithRowNum(java.lang.String) throws java.lang.Exception;
  public static void main(java.lang.String[]);
}
Compiled from "CustomFct.java"
public class Demo.CustomFct {
  public Demo.CustomFct();
  public static void main(java.lang.String[]);
}
Compiled from "InsertTest.java"
public class Demo.InsertTest {
  public Demo.InsertTest();
  public static void main(java.lang.String[]);
}
Compiled from "LoginDialog.java"
class Demo.LoginDemo extends javax.swing.JFrame {
  javax.swing.JButton SUBMIT;
  javax.swing.JLabel label1;
  javax.swing.JLabel label2;
  javax.swing.JPanel LoginPanel;
  final javax.swing.JTextField text1;
  final javax.swing.JTextField text2;
  Demo.LoginDemo();
}
Compiled from "LoginDialog.java"
class Demo.LoginDemo$1 implements java.awt.event.ActionListener {
  final Demo.LoginDemo this$0;
  Demo.LoginDemo$1(Demo.LoginDemo);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "LoginPanel.java"
public class Demo.LoginPanel extends javax.swing.JComponent {
  public Demo.LoginPanel();
  public void paintComponent(java.awt.Graphics);
}
Compiled from "MDemo.java"
public class Demo.MDemo {
  public Demo.MDemo();
  public static void main(java.lang.String[]);
  static void queryDB(org.sgbd.Mysgbd.MQuery) throws java.lang.Exception;
  static void DisplayTuple(org.sgbd.Mysgbd.data.MTuple, java.util.Vector) throws java.lang.Exception;
  static void insertDB(org.sgbd.Mysgbd.MInsert) throws java.lang.Exception;
}
Compiled from "MergeQueries.java"
public class Demo.MergeQueries {
  public Demo.MergeQueries();
  public static void main(java.lang.String[]);
}
Compiled from "Mtest.java"
public class Demo.Mtest {
  public Demo.Mtest();
  public static void main(java.lang.String[]);
}
Compiled from "NextPage.java"
class Demo.NextPage extends javax.swing.JFrame {
  Demo.NextPage(java.lang.String);
}
Compiled from "PreparedDemo.java"
public class Demo.PreparedDemo {
  public Demo.PreparedDemo();
  public static void main(java.lang.String[]);
  static void handleQuery(org.sgbd.Mysgbd.MQuery) throws java.lang.Exception;
  static void handleInsert(org.sgbd.Mysgbd.MInsert) throws java.lang.Exception;
  static void handleUpdate(org.sgbd.Mysgbd.MUpdate) throws java.lang.Exception;
  static void handleDelete(org.sgbd.Mysgbd.MDelete) throws java.lang.Exception;
  static void handleWhere(org.sgbd.Mysgbd.MExp, java.util.Hashtable) throws java.lang.Exception;
  static boolean isPreparedColumn(org.sgbd.Mysgbd.MExp);
}
Compiled from "StringDemo.java"
public class Demo.StringDemo {
  public Demo.StringDemo();
  public static void main(java.lang.String[]);
}
Compiled from "TestOp.java"
public class Demo.TestOp {
  public Demo.TestOp();
  public static void main(java.lang.String[]);
}
Compiled from "TextAreaOutputStream.java"
public class Demo.TextAreaOutputStream extends java.io.OutputStream {
  public Demo.TextAreaOutputStream(javax.swing.JTextArea, java.lang.String);
  public void flush();
  public void close();
  public void write(int) throws java.io.IOException;
  static javax.swing.JTextArea access$000(Demo.TextAreaOutputStream);
}
Compiled from "TextAreaOutputStream.java"
class Demo.TextAreaOutputStream$1 implements java.lang.Runnable {
  final java.lang.String val$text;
  final Demo.TextAreaOutputStream this$0;
  Demo.TextAreaOutputStream$1(Demo.TextAreaOutputStream, java.lang.String);
  public void run();
}
Compiled from "WhereClause.java"
public class Demo.WhereClause {
  public Demo.WhereClause();
  public static void main(java.lang.String[]);
}
Compiled from "MAliasedName.java"
public class org.sgbd.Mysgbd.MAliasedName implements java.io.Serializable {
  java.lang.String strform_;
  java.lang.String schema_;
  java.lang.String table_;
  java.lang.String column_;
  java.lang.String alias_;
  public static int FORM_TABLE;
  public static int FORM_COLUMN;
  int form_;
  public org.sgbd.Mysgbd.MAliasedName();
  public org.sgbd.Mysgbd.MAliasedName(java.lang.String, int);
  public java.lang.String toString();
  public java.lang.String getSchema();
  public java.lang.String getTable();
  public java.lang.String getColumn();
  public boolean isWildcard();
  public java.lang.String getAlias();
  public void setAlias(java.lang.String);
  static {};
}
Compiled from "MConstant.java"
public class org.sgbd.Mysgbd.MConstant implements org.sgbd.Mysgbd.MExp {
  public static final int UNKNOWN;
  public static final int COLUMNNAME;
  public static final int NULL;
  public static final int NUMBER;
  public static final int STRING;
  int type_;
  java.lang.String val_;
  public org.sgbd.Mysgbd.MConstant(java.lang.String, int);
  public java.lang.String getValue();
  public int getType();
  public java.lang.String toString();
}
Compiled from "MDelete.java"
public class org.sgbd.Mysgbd.MDelete implements org.sgbd.Mysgbd.MStatement {
  java.lang.String table_;
  org.sgbd.Mysgbd.MExp where_;
  public org.sgbd.Mysgbd.MDelete(java.lang.String);
  public void addWhere(org.sgbd.Mysgbd.MExp);
  public java.lang.String getTable();
  public org.sgbd.Mysgbd.MExp getWhere();
  public java.lang.String toString();
}
Compiled from "MExp.java"
public interface org.sgbd.Mysgbd.MExp extends java.io.Serializable {
}
Compiled from "MExpression.java"
public class org.sgbd.Mysgbd.MExpression implements org.sgbd.Mysgbd.MExp {
  java.lang.String op_;
  java.util.Vector operands_;
  public org.sgbd.Mysgbd.MExpression(java.lang.String);
  public org.sgbd.Mysgbd.MExpression(java.lang.String, org.sgbd.Mysgbd.MExp);
  public org.sgbd.Mysgbd.MExpression(java.lang.String, org.sgbd.Mysgbd.MExp, org.sgbd.Mysgbd.MExp);
  public java.lang.String getOperator();
  public void setOperands(java.util.Vector);
  public java.util.Vector getOperands();
  public void addOperand(org.sgbd.Mysgbd.MExp);
  public org.sgbd.Mysgbd.MExp getOperand(int);
  public int nbOperands();
  public java.lang.String toReversePolish();
  public java.lang.String toString();
}
Compiled from "MFromItem.java"
public class org.sgbd.Mysgbd.MFromItem extends org.sgbd.Mysgbd.MAliasedName {
  public org.sgbd.Mysgbd.MFromItem();
  public org.sgbd.Mysgbd.MFromItem(java.lang.String);
}
Compiled from "MGroupBy.java"
public class org.sgbd.Mysgbd.MGroupBy implements java.io.Serializable {
  java.util.Vector groupby_;
  org.sgbd.Mysgbd.MExp having_;
  public org.sgbd.Mysgbd.MGroupBy(java.util.Vector);
  public void setHaving(org.sgbd.Mysgbd.MExp);
  public java.util.Vector getGroupBy();
  public org.sgbd.Mysgbd.MExp getHaving();
  public java.lang.String toString();
}
Compiled from "MInsert.java"
public class org.sgbd.Mysgbd.MInsert implements org.sgbd.Mysgbd.MStatement {
  java.lang.String table_;
  java.util.Vector columns_;
  org.sgbd.Mysgbd.MExp valueSpec_;
  public org.sgbd.Mysgbd.MInsert(java.lang.String);
  public java.lang.String getTable();
  public java.util.Vector getColumns();
  public void addColumns(java.util.Vector);
  public void addValueSpec(org.sgbd.Mysgbd.MExp);
  public java.util.Vector getValues();
  public org.sgbd.Mysgbd.MQuery getQuery();
  public java.lang.String toString();
}
Compiled from "MLockTable.java"
public class org.sgbd.Mysgbd.MLockTable implements org.sgbd.Mysgbd.MStatement {
  public boolean nowait_;
  java.lang.String lockMode_;
  java.util.Vector tables_;
  public org.sgbd.Mysgbd.MLockTable();
  public void addTables(java.util.Vector);
  public java.util.Vector getTables();
  public void setLockMode(java.lang.String);
  public java.lang.String getLockMode();
  public boolean isNowait();
}
Compiled from "MOrderBy.java"
public class org.sgbd.Mysgbd.MOrderBy implements java.io.Serializable {
  org.sgbd.Mysgbd.MExp exp_;
  boolean asc_;
  public org.sgbd.Mysgbd.MOrderBy(org.sgbd.Mysgbd.MExp);
  public void setAscOrder(boolean);
  public boolean getAscOrder();
  public org.sgbd.Mysgbd.MExp getExpression();
  public java.lang.String toString();
}
Compiled from "MQuery.java"
public class org.sgbd.Mysgbd.MQuery implements org.sgbd.Mysgbd.MStatement,org.sgbd.Mysgbd.MExp {
  java.util.Vector select_;
  public boolean distinct_;
  java.util.Vector from_;
  org.sgbd.Mysgbd.MExp where_;
  org.sgbd.Mysgbd.MGroupBy groupby_;
  org.sgbd.Mysgbd.MExpression setclause_;
  java.util.Vector orderby_;
  public boolean forupdate_;
  public org.sgbd.Mysgbd.MQuery();
  public void addSelect(java.util.Vector);
  public void addFrom(java.util.Vector);
  public void addWhere(org.sgbd.Mysgbd.MExp);
  public void addGroupBy(org.sgbd.Mysgbd.MGroupBy);
  public void addSet(org.sgbd.Mysgbd.MExpression);
  public void addOrderBy(java.util.Vector);
  public java.util.Vector getSelect();
  public java.util.Vector getFrom();
  public org.sgbd.Mysgbd.MExp getWhere();
  public org.sgbd.Mysgbd.MGroupBy getGroupBy();
  public org.sgbd.Mysgbd.MExpression getSet();
  public java.util.Vector getOrderBy();
  public boolean isDistinct();
  public boolean isForUpdate();
  public java.lang.String toString();
}
Compiled from "MSelectItem.java"
public class org.sgbd.Mysgbd.MSelectItem extends org.sgbd.Mysgbd.MAliasedName {
  org.sgbd.Mysgbd.MExp expression_;
  java.lang.String aggregate_;
  public org.sgbd.Mysgbd.MSelectItem();
  public org.sgbd.Mysgbd.MSelectItem(java.lang.String);
  public org.sgbd.Mysgbd.MExp getExpression();
  public void setExpression(org.sgbd.Mysgbd.MExp);
  public boolean isExpression();
  public void setAggregate(java.lang.String);
  public java.lang.String getAggregate();
}
Compiled from "MStatement.java"
public interface org.sgbd.Mysgbd.MStatement extends java.io.Serializable {
}
Compiled from "MTransactStmt.java"
public class org.sgbd.Mysgbd.MTransactStmt implements org.sgbd.Mysgbd.MStatement {
  java.lang.String statement_;
  java.lang.String comment_;
  public boolean readOnly_;
  public org.sgbd.Mysgbd.MTransactStmt(java.lang.String);
  public void setComment(java.lang.String);
  public java.lang.String getComment();
  public boolean isReadOnly();
}
Compiled from "MUpdate.java"
public class org.sgbd.Mysgbd.MUpdate implements org.sgbd.Mysgbd.MStatement {
  java.lang.String table_;
  java.lang.String alias_;
  java.util.Hashtable set_;
  org.sgbd.Mysgbd.MExp where_;
  java.util.Vector columns_;
  public org.sgbd.Mysgbd.MUpdate(java.lang.String);
  public java.lang.String getTable();
  public void setAlias(java.lang.String);
  public java.lang.String getAlias();
  public void addSet(java.util.Hashtable);
  public java.util.Hashtable getSet();
  public void addColumnUpdate(java.lang.String, org.sgbd.Mysgbd.MExp);
  public org.sgbd.Mysgbd.MExp getColumnUpdate(java.lang.String);
  public org.sgbd.Mysgbd.MExp getColumnUpdate(int);
  public java.lang.String getColumnUpdateName(int);
  public int getColumnUpdateCount();
  public void addWhere(org.sgbd.Mysgbd.MExp);
  public org.sgbd.Mysgbd.MExp getWhere();
  public java.lang.String toString();
}
Compiled from "MUtils.java"
public class org.sgbd.Mysgbd.MUtils {
  public static final int VARIABLE_PLIST;
  public org.sgbd.Mysgbd.MUtils();
  public static void addCustomFunction(java.lang.String, int);
  public static int isCustomFunction(java.lang.String);
  public static boolean isAggregate(java.lang.String);
  public static java.lang.String getAggregateCall(java.lang.String);
  static {};
}
Compiled from "MqlParser.java"
public class org.sgbd.Mysgbd.MqlParser {
  org.sgbd.Mysgbd.parser.MysgbdParser _parser;
  public static void main(java.lang.String[]) throws org.sgbd.Mysgbd.parser.ParseException;
  public org.sgbd.Mysgbd.MqlParser(java.io.InputStream);
  public org.sgbd.Mysgbd.MqlParser();
  public void initParser(java.io.InputStream);
  public void addCustomFunction(java.lang.String, int);
  public org.sgbd.Mysgbd.MStatement readStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public java.util.Vector readStatements() throws org.sgbd.Mysgbd.parser.ParseException;
  public org.sgbd.Mysgbd.MExp readExpression() throws org.sgbd.Mysgbd.parser.ParseException;
}
Compiled from "MEval.java"
public class org.sgbd.Mysgbd.data.MEval {
  public org.sgbd.Mysgbd.data.MEval();
  public boolean eval(org.sgbd.Mysgbd.data.MTuple, org.sgbd.Mysgbd.MExp) throws java.sql.SQLException;
  double evalCmp(org.sgbd.Mysgbd.data.MTuple, java.util.Vector) throws java.sql.SQLException;
  double evalNumericExp(org.sgbd.Mysgbd.data.MTuple, org.sgbd.Mysgbd.MExpression) throws java.sql.SQLException;
  public java.lang.Object evalExpValue(org.sgbd.Mysgbd.data.MTuple, org.sgbd.Mysgbd.MExp) throws java.sql.SQLException;
}
Compiled from "MTuple.java"
public class org.sgbd.Mysgbd.data.MTuple {
  public org.sgbd.Mysgbd.data.MTuple();
  public org.sgbd.Mysgbd.data.MTuple(java.lang.String);
  public void setRow(java.lang.String);
  public void setRow(java.util.Vector);
  public void setAtt(java.lang.String, java.lang.Object);
  public java.lang.String getAttName(int);
  public int getAttIndex(java.lang.String);
  public java.lang.Object getAttValue(int);
  public java.lang.Object getAttValue(java.lang.String);
  public boolean isAttribute(java.lang.String);
  public int getNumAtt();
  public java.lang.String toString();
}
Compiled from "Test.java"
public class org.sgbd.Mysgbd.data.Test {
  public org.sgbd.Mysgbd.data.Test();
  public static void main(java.lang.String[]);
}
Compiled from "MysgbdParser.java"
public class org.sgbd.Mysgbd.parser.MysgbdParser implements org.sgbd.Mysgbd.parser.MysgbdParserConstants {
  public static org.sgbd.Mysgbd.parser.MysgbdParserTokenManager token_source;
  static org.sgbd.Mysgbd.parser.SimpleCharStream jj_input_stream;
  public static org.sgbd.Mysgbd.parser.Token token;
  public static org.sgbd.Mysgbd.parser.Token jj_nt;
  public static void main(java.lang.String[]) throws org.sgbd.Mysgbd.parser.ParseException;
  public static final void BasicDataTypeDeclaration() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.util.Vector SQLStatements() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MStatement SQLStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MTransactStmt CommitStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MLockTable LockTableStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MTransactStmt RollbackStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MTransactStmt SetTransactionStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.lang.String LockMode() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MUpdate UpdateStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final void ColumnValues(org.sgbd.Mysgbd.MUpdate) throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp UpdatedValue() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MInsert InsertStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MDelete DeleteStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MQuery QueryStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.lang.String TableColumn() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.lang.String OracleObjectName() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.lang.String Relop() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.lang.String TableReference() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final void NumOrID() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MQuery SelectStatement() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MQuery SelectWithoutOrder() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.util.Vector SelectList() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MSelectItem SelectItem() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.lang.String SelectAlias() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.lang.String SelectStar() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.util.Vector FromClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MFromItem FromItem() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp WhereClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final void ConnectClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MGroupBy GroupByClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExpression SetClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.util.Vector OrderByClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final void ForUpdateClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLAndExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLUnaryLogicalExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExpression ExistsClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLRelationalExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.util.Vector SQLExpressionList() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExpression SQLRelationalOperatorExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLSimpleExpressionOrPreparedCol() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp PreparedCol() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExpression SQLInClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExpression SQLBetweenClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExpression SQLLikeClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExpression IsNullClause() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLSimpleExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLMultiplicativeExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLExpotentExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLUnaryExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExp SQLPrimaryExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.lang.String AggregateFunc() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MExpression FunctionCall() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final java.lang.String OuterJoinExpression() throws org.sgbd.Mysgbd.parser.ParseException;
  public static final org.sgbd.Mysgbd.MQuery SubQuery() throws org.sgbd.Mysgbd.parser.ParseException;
  public org.sgbd.Mysgbd.parser.MysgbdParser(java.io.InputStream);
  public org.sgbd.Mysgbd.parser.MysgbdParser(java.io.InputStream, java.lang.String);
  public static void ReInit(java.io.InputStream);
  public static void ReInit(java.io.InputStream, java.lang.String);
  public org.sgbd.Mysgbd.parser.MysgbdParser(java.io.Reader);
  public static void ReInit(java.io.Reader);
  public org.sgbd.Mysgbd.parser.MysgbdParser(org.sgbd.Mysgbd.parser.MysgbdParserTokenManager);
  public void ReInit(org.sgbd.Mysgbd.parser.MysgbdParserTokenManager);
  public static final org.sgbd.Mysgbd.parser.Token getNextToken();
  public static final org.sgbd.Mysgbd.parser.Token getToken(int);
  public static org.sgbd.Mysgbd.parser.ParseException generateParseException();
  public static final void enable_tracing();
  public static final void disable_tracing();
  static {};
}
Compiled from "MysgbdParser.java"
class org.sgbd.Mysgbd.parser.MysgbdParser$1 {
}
Compiled from "MysgbdParser.java"
final class org.sgbd.Mysgbd.parser.MysgbdParser$JJCalls {
  int gen;
  org.sgbd.Mysgbd.parser.Token first;
  int arg;
  org.sgbd.Mysgbd.parser.MysgbdParser$JJCalls next;
  org.sgbd.Mysgbd.parser.MysgbdParser$JJCalls();
}
Compiled from "MysgbdParser.java"
final class org.sgbd.Mysgbd.parser.MysgbdParser$LookaheadSuccess extends java.lang.Error {
  org.sgbd.Mysgbd.parser.MysgbdParser$LookaheadSuccess(org.sgbd.Mysgbd.parser.MysgbdParser$1);
}
Compiled from "MysgbdParserConstants.java"
public interface org.sgbd.Mysgbd.parser.MysgbdParserConstants {
  public static final int EOF;
  public static final int K_ALL;
  public static final int K_AND;
  public static final int K_ANY;
  public static final int K_AS;
  public static final int K_ASC;
  public static final int K_AVG;
  public static final int K_BETWEEN;
  public static final int K_BINARY_INTEGER;
  public static final int K_BOOLEAN;
  public static final int K_BY;
  public static final int K_CHAR;
  public static final int K_COMMENT;
  public static final int K_COMMIT;
  public static final int K_CONNECT;
  public static final int K_COUNT;
  public static final int K_DATE;
  public static final int K_DELETE;
  public static final int K_DESC;
  public static final int K_DISTINCT;
  public static final int K_EXCLUSIVE;
  public static final int K_EXISTS;
  public static final int K_EXIT;
  public static final int K_FLOAT;
  public static final int K_FOR;
  public static final int K_FROM;
  public static final int K_GROUP;
  public static final int K_HAVING;
  public static final int K_IN;
  public static final int K_INSERT;
  public static final int K_INTEGER;
  public static final int K_INTERSECT;
  public static final int K_INTO;
  public static final int K_IS;
  public static final int K_LIKE;
  public static final int K_LOCK;
  public static final int K_MAX;
  public static final int K_MIN;
  public static final int K_MINUS;
  public static final int K_MODE;
  public static final int K_NATURAL;
  public static final int K_NOT;
  public static final int K_NOWAIT;
  public static final int K_NULL;
  public static final int K_NUMBER;
  public static final int K_OF;
  public static final int K_ONLY;
  public static final int K_OR;
  public static final int K_ORDER;
  public static final int K_PRIOR;
  public static final int K_QUIT;
  public static final int K_READ;
  public static final int K_REAL;
  public static final int K_ROLLBACK;
  public static final int K_ROW;
  public static final int K_SELECT;
  public static final int K_SET;
  public static final int K_SHARE;
  public static final int K_SMALLINT;
  public static final int K_START;
  public static final int K_SUM;
  public static final int K_TABLE;
  public static final int K_TRANSACTION;
  public static final int K_UNION;
  public static final int K_UPDATE;
  public static final int K_VALUES;
  public static final int K_VARCHAR2;
  public static final int K_VARCHAR;
  public static final int K_WHERE;
  public static final int K_WITH;
  public static final int K_WORK;
  public static final int K_WRITE;
  public static final int S_NUMBER;
  public static final int FLOAT;
  public static final int INTEGER;
  public static final int DIGIT;
  public static final int LINE_COMMENT;
  public static final int MULTI_LINE_COMMENT;
  public static final int S_IDENTIFIER;
  public static final int LETTER;
  public static final int SPECIAL_CHARS;
  public static final int S_BIND;
  public static final int S_CHAR_LITERAL;
  public static final int S_QUOTED_IDENTIFIER;
  public static final int DEFAULT;
  public static final java.lang.String[] tokenImage;
  static {};
}
Compiled from "MysgbdParserTokenManager.java"
public class org.sgbd.Mysgbd.parser.MysgbdParserTokenManager implements org.sgbd.Mysgbd.parser.MysgbdParserConstants {
  public static java.io.PrintStream debugStream;
  static final long[] jjbitVec0;
  static final int[] jjnextStates;
  public static final java.lang.String[] jjstrLiteralImages;
  public static final java.lang.String[] lexStateNames;
  static final long[] jjtoToken;
  static final long[] jjtoSkip;
  static final long[] jjtoSpecial;
  protected static org.sgbd.Mysgbd.parser.SimpleCharStream input_stream;
  protected static char curChar;
  static int curLexState;
  static int defaultLexState;
  static int jjnewStateCnt;
  static int jjround;
  static int jjmatchedPos;
  static int jjmatchedKind;
  public static void setDebugStream(java.io.PrintStream);
  public org.sgbd.Mysgbd.parser.MysgbdParserTokenManager(org.sgbd.Mysgbd.parser.SimpleCharStream);
  public org.sgbd.Mysgbd.parser.MysgbdParserTokenManager(org.sgbd.Mysgbd.parser.SimpleCharStream, int);
  public static void ReInit(org.sgbd.Mysgbd.parser.SimpleCharStream);
  public static void ReInit(org.sgbd.Mysgbd.parser.SimpleCharStream, int);
  public static void SwitchTo(int);
  protected static org.sgbd.Mysgbd.parser.Token jjFillToken();
  public static org.sgbd.Mysgbd.parser.Token getNextToken();
  static {};
}
Compiled from "ParseException.java"
public class org.sgbd.Mysgbd.parser.ParseException extends java.lang.Exception {
  public org.sgbd.Mysgbd.parser.Token currentToken;
  public int[][] expectedTokenSequences;
  public java.lang.String[] tokenImage;
  protected java.lang.String eol;
  public org.sgbd.Mysgbd.parser.ParseException(org.sgbd.Mysgbd.parser.Token, int[][], java.lang.String[]);
  public org.sgbd.Mysgbd.parser.ParseException();
  public org.sgbd.Mysgbd.parser.ParseException(java.lang.String);
  static java.lang.String add_escapes(java.lang.String);
}
Compiled from "SimpleCharStream.java"
public class org.sgbd.Mysgbd.parser.SimpleCharStream {
  public static final boolean staticFlag;
  static int bufsize;
  static int available;
  static int tokenBegin;
  public static int bufpos;
  protected static int[] bufline;
  protected static int[] bufcolumn;
  protected static int column;
  protected static int line;
  protected static boolean prevCharIsCR;
  protected static boolean prevCharIsLF;
  protected static java.io.Reader inputStream;
  protected static char[] buffer;
  protected static int maxNextCharInd;
  protected static int inBuf;
  protected static int tabSize;
  protected static void setTabSize(int);
  protected static int getTabSize(int);
  protected static void ExpandBuff(boolean);
  protected static void FillBuff() throws java.io.IOException;
  public static char BeginToken() throws java.io.IOException;
  protected static void UpdateLineColumn(char);
  public static char readChar() throws java.io.IOException;
  public static int getColumn();
  public static int getLine();
  public static int getEndColumn();
  public static int getEndLine();
  public static int getBeginColumn();
  public static int getBeginLine();
  public static void backup(int);
  public org.sgbd.Mysgbd.parser.SimpleCharStream(java.io.Reader, int, int, int);
  public org.sgbd.Mysgbd.parser.SimpleCharStream(java.io.Reader, int, int);
  public org.sgbd.Mysgbd.parser.SimpleCharStream(java.io.Reader);
  public void ReInit(java.io.Reader, int, int, int);
  public void ReInit(java.io.Reader, int, int);
  public void ReInit(java.io.Reader);
  public org.sgbd.Mysgbd.parser.SimpleCharStream(java.io.InputStream, java.lang.String, int, int, int) throws java.io.UnsupportedEncodingException;
  public org.sgbd.Mysgbd.parser.SimpleCharStream(java.io.InputStream, int, int, int);
  public org.sgbd.Mysgbd.parser.SimpleCharStream(java.io.InputStream, java.lang.String, int, int) throws java.io.UnsupportedEncodingException;
  public org.sgbd.Mysgbd.parser.SimpleCharStream(java.io.InputStream, int, int);
  public org.sgbd.Mysgbd.parser.SimpleCharStream(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException;
  public org.sgbd.Mysgbd.parser.SimpleCharStream(java.io.InputStream);
  public void ReInit(java.io.InputStream, java.lang.String, int, int, int) throws java.io.UnsupportedEncodingException;
  public void ReInit(java.io.InputStream, int, int, int);
  public void ReInit(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException;
  public void ReInit(java.io.InputStream);
  public void ReInit(java.io.InputStream, java.lang.String, int, int) throws java.io.UnsupportedEncodingException;
  public void ReInit(java.io.InputStream, int, int);
  public static java.lang.String GetImage();
  public static char[] GetSuffix(int);
  public static void Done();
  public static void adjustBeginLineColumn(int, int);
  static {};
}
Compiled from "Token.java"
public class org.sgbd.Mysgbd.parser.Token implements java.io.Serializable {
  public int kind;
  public int beginLine;
  public int beginColumn;
  public int endLine;
  public int endColumn;
  public java.lang.String image;
  public org.sgbd.Mysgbd.parser.Token next;
  public org.sgbd.Mysgbd.parser.Token specialToken;
  public java.lang.Object getValue();
  public org.sgbd.Mysgbd.parser.Token();
  public org.sgbd.Mysgbd.parser.Token(int);
  public org.sgbd.Mysgbd.parser.Token(int, java.lang.String);
  public java.lang.String toString();
  public static org.sgbd.Mysgbd.parser.Token newToken(int, java.lang.String);
  public static org.sgbd.Mysgbd.parser.Token newToken(int);
}
Compiled from "TokenMgrError.java"
public class org.sgbd.Mysgbd.parser.TokenMgrError extends java.lang.Error {
  static final int LEXICAL_ERROR;
  static final int STATIC_LEXER_ERROR;
  static final int INVALID_LEXICAL_STATE;
  static final int LOOP_DETECTED;
  int errorCode;
  protected static final java.lang.String addEscapes(java.lang.String);
  protected static java.lang.String LexicalError(boolean, int, int, int, java.lang.String, char);
  public java.lang.String getMessage();
  public org.sgbd.Mysgbd.parser.TokenMgrError();
  public org.sgbd.Mysgbd.parser.TokenMgrError(java.lang.String, int);
  public org.sgbd.Mysgbd.parser.TokenMgrError(boolean, int, int, int, java.lang.String, char, int);
}
