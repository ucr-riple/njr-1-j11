/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import java.io.File;

import utilities.FIO;
import bbms.GlobalFuncs;
import unit.FitnessTypeEnum;

/**
 *
 * @author Brian
 */
public class DialogLoadScen extends javax.swing.JDialog {
    
    private boolean overwriteDataFiles = true;

    /**
     * Creates new form DialogNewPop
     */
    public DialogLoadScen(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        Generate_Button = new javax.swing.JButton();
        LinkProb_Field = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        NumHidden_Field = new javax.swing.JTextField();
        VisibilityField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        NumSensors_Field = new javax.swing.JTextField();
        NumScouts_Field = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        LoadPopFile = new javax.swing.JTextField();
        Load_Button = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        DetailedOutputFileField = new javax.swing.JTextField();
        SummaryOutputFileField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        PercentRunField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        RunPerOrgField = new javax.swing.JTextField();
        Warning_Label = new javax.swing.JLabel();
        OverwriteCheckbox = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        MaxEpochsField = new javax.swing.JTextField();
        PauseEpochCheckbox = new javax.swing.JCheckBox();
        PauseIterCheckbox = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        PrefixOutputField = new javax.swing.JTextField();
        RandCOACheckbox = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        DeathPenaltyField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        FitTypeField = new javax.swing.JTextField();
        ForceTreePlacement = new javax.swing.JCheckBox();
        NetworkThreshold = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        MutateNetwork = new javax.swing.JTextField();
        ShareTeamFit = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Load Scenario");

        Generate_Button.setText("Generate");
        Generate_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Generate_ButtonMouseClicked(evt);
            }
        });

        LinkProb_Field.setColumns(3);
        LinkProb_Field.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        LinkProb_Field.setText("0.1");

        jLabel5.setText("Link Prob");

        jLabel1.setText("# Hidden Nodes");

        NumHidden_Field.setColumns(3);
        NumHidden_Field.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        NumHidden_Field.setText("5");

        VisibilityField.setColumns(1);
        VisibilityField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        VisibilityField.setText("5");

        jLabel2.setText("Visibility");

        jLabel3.setText("# Sensors");

        NumSensors_Field.setColumns(1);
        NumSensors_Field.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        NumSensors_Field.setText("1");

        NumScouts_Field.setColumns(3);
        NumScouts_Field.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        NumScouts_Field.setText("50");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Num Scouts");

        Load_Button.setText("Load");
        Load_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Load_ButtonMouseClicked(evt);
            }
        });

        jLabel6.setText("Load Pop from File");

        DetailedOutputFileField.setText("resultDetails.txt");

        SummaryOutputFileField.setText("resultSummary.txt");

        jLabel7.setText("Detailed Output");

        jLabel8.setText("Summary Output");

        jLabel10.setText("Percent per Run");

        PercentRunField.setText("0.1");

        jLabel11.setText("Runs per Organism");

        RunPerOrgField.setText("10");

        Warning_Label.setText(" ");

        OverwriteCheckbox.setSelected(true);
        OverwriteCheckbox.setText("Overwrite Files");
        OverwriteCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OverwriteCheckboxItemStateChanged(evt);
            }
        });

        jLabel12.setText("Stop After Epochs");

        MaxEpochsField.setText("50");

        PauseEpochCheckbox.setText("Pause at Epoch");
        PauseEpochCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PauseEpochCheckboxItemStateChanged(evt);
            }
        });

        PauseIterCheckbox.setText("Pause at Iter");
        PauseIterCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PauseIterCheckboxItemStateChanged(evt);
            }
        });

        jLabel13.setText("Subdir");

        PrefixOutputField.setText(GlobalFuncs.dirPrefix);

        RandCOACheckbox.setSelected(true);
        RandCOACheckbox.setText("Rand COA in Epoch");
        RandCOACheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RandCOACheckboxItemStateChanged(evt);
            }
        });

        jLabel14.setText("Death Penalty");

        DeathPenaltyField.setText("1.0");

        jLabel15.setText("Fit Type");

        FitTypeField.setText("1");

        ForceTreePlacement.setSelected(true);
        ForceTreePlacement.setText("Force Scout Concealment");
        ForceTreePlacement.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ForceTreePlacementItemStateChanged(evt);
            }
        });

        NetworkThreshold.setColumns(1);
        NetworkThreshold.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        NetworkThreshold.setText("0.75");

        jLabel16.setText("Net Thres");

        jLabel17.setText("Mutate Prob");

        MutateNetwork.setColumns(1);
        MutateNetwork.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        MutateNetwork.setText("0.025");

        ShareTeamFit.setSelected(true);
        ShareTeamFit.setText("Share Team Fitness");
        ShareTeamFit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ShareTeamFitItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ShareTeamFit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ForceTreePlacement))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(NumScouts_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LinkProb_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel2))
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(NumSensors_Field)
                                            .addComponent(VisibilityField)
                                            .addComponent(NumHidden_Field))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(0, 0, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(PauseIterCheckbox)
                                                .addComponent(PauseEpochCheckbox)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel16)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(NetworkThreshold))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Generate_Button)
                                            .addGap(20, 20, 20)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MutateNetwork, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LoadPopFile, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(Load_Button))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel14)
                                        .addComponent(jLabel6))
                                    .addGap(6, 6, 6)
                                    .addComponent(DeathPenaltyField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(FitTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addComponent(RandCOACheckbox)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel15))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PercentRunField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RunPerOrgField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(DetailedOutputFileField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                        .addComponent(SummaryOutputFileField))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(Warning_Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(MaxEpochsField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(OverwriteCheckbox, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PrefixOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumScouts_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MutateNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel17)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumSensors_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(DetailedOutputFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(NetworkThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(VisibilityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(Generate_Button))
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumHidden_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(SummaryOutputFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PauseIterCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LinkProb_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(PauseEpochCheckbox)
                    .addComponent(jLabel13)
                    .addComponent(PrefixOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RandCOACheckbox)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(DeathPenaltyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(FitTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(OverwriteCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(PercentRunField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(RunPerOrgField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoadPopFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Load_Button)
                    .addComponent(Warning_Label)
                    .addComponent(jLabel12)
                    .addComponent(MaxEpochsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ForceTreePlacement)
                    .addComponent(ShareTeamFit))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private boolean ValidateGlobalInputs() {
    	double ppr = Double.parseDouble(PercentRunField.getText());
    	int runsPerOrg = Integer.parseInt(RunPerOrgField.getText());
        int maxE = Integer.parseInt(MaxEpochsField.getText());
        double deathP = Double.parseDouble(DeathPenaltyField.getText());
        int fitTyeNum = Integer.parseInt(FitTypeField.getText());
        int visibility = Integer.parseInt(VisibilityField.getText());
        double maxThresh = Double.parseDouble(NetworkThreshold.getText());
        double mutProb = Double.parseDouble(MutateNetwork.getText());
        int numbSensors = Integer.parseInt(NumSensors_Field.getText());
    	
        if (mutProb < 0 || mutProb > 1) {
            Warning_Label.setText("ERROR!  Mutate probability is wrong.");
            return false;
        }
        
        if (maxThresh < 0 || maxThresh > 1) {
            Warning_Label.setText("ERROR!  Maximum threshould out of bounds.");
            return false;
        }
        
    	if (ppr < 0.0 || ppr > 1.0) {
            Warning_Label.setText("ERROR: Percent per run out of bounds.");
            return false;
    	}
    	
    	if (runsPerOrg <= 0) {
            Warning_Label.setText("ERROR: Runs per org out of bounds.");
            return false;
    	}
        
        if (maxE <= 0) {
            Warning_Label.setText("ERROR: Max epochs out of bounds.");
            return false;
        }
        
        if (deathP < 0) {
            Warning_Label.setText("ERROR: Death penalty is a multiplier >= 0");
            return false;
        }
        
        if (fitTyeNum < 1 || fitTyeNum > 2) {
            Warning_Label.setText("ERROR: Fit type out of range.");
            return false;
        }
        
        if (visibility < 1) {
            Warning_Label.setText("ERROR: Visibility < 1");
            return false;
        }
    	
    	GlobalFuncs.percentPerRun = ppr;
    	GlobalFuncs.maxRunsPerOrg = runsPerOrg;
        GlobalFuncs.maxEpochs = maxE;
        GlobalFuncs.outputPrefix = PrefixOutputField.getText();
        GlobalFuncs.deathPenalty = deathP;
        GlobalFuncs.networkResultThreshold = maxThresh;
        GlobalFuncs.mutateProbability = mutProb;
        
        FIO.newDirectory("src/saves/" + GlobalFuncs.outputPrefix);
            	
    	File dOut = FIO.newFile("src/saves/" + GlobalFuncs.outputPrefix + "/" + DetailedOutputFileField.getText());
    	File sOut = FIO.newFile("src/saves/" + GlobalFuncs.outputPrefix + "/" + SummaryOutputFileField.getText());
        File iterOut = FIO.newFile("src/saves/" + GlobalFuncs.outputPrefix + "/" + "detailedIterations.txt");
    	
    	GlobalFuncs.detailedOutput = dOut.toPath();
    	GlobalFuncs.summaryOutput = sOut.toPath();
        GlobalFuncs.fullIterOutput = iterOut.toPath();
        
        if (overwriteDataFiles) {
            FIO.overwriteFile(GlobalFuncs.detailedOutput, "");
            FIO.overwriteFile(GlobalFuncs.summaryOutput, unit.JNEATIntegration.PrintSummaryKey());
            FIO.overwriteFile(GlobalFuncs.fullIterOutput, unit.JNEATIntegration.PrintDetailedIterKey());
            GUI_NB.GCO("Output files overwritten");
        }
        
        GlobalFuncs.newEpoch = true;
        clock.ClockControl.SetTimeScale((byte)11);
        
        if (fitTyeNum == 1) GlobalFuncs.defaultFitType = FitnessTypeEnum.SIMPLE_GREEDY;
        else if (fitTyeNum == 2) {
            GlobalFuncs.defaultFitType = FitnessTypeEnum.SHARED_SPOTTING;
            GlobalFuncs.calcShared = true;
        }
        
        switch(numbSensors) {
                case 1: 
                    GlobalFuncs.defaultOrgType = unit.OrganismTypeEnum.SIMPLE_SINGLE;
                    this.numSensors = numbSensors;
                    break;
                case 2:
                    GlobalFuncs.defaultOrgType = unit.OrganismTypeEnum.SIMPLE_DUAL;
                    this.numSensors = numbSensors;
                    break;
                case 7:
                    GlobalFuncs.defaultOrgType = unit.OrganismTypeEnum.SIX_DIRECTIONAL;
                    this.numSensors = numbSensors;
                    break;
                case 88:
                    GlobalFuncs.defaultOrgType = unit.OrganismTypeEnum.BASE_MAXHEX;
                    this.numSensors = 4;
                    break;
                case 99:
                    GlobalFuncs.defaultOrgType = unit.OrganismTypeEnum.BASE_RANDOM;
                    this.numSensors = 5;
                    break;                    
            }
        GlobalFuncs.visibility = visibility;
        GUI_NB.GCO("World visibility set to: " + visibility);
        
        StringBuffer buf = new StringBuffer("");
        buf.append("Vis: " + visibility + ", ");        
        buf.append("Network: " + GlobalFuncs.defaultOrgType.toString() + ", ");
        buf.append("Fitness: " + GlobalFuncs.defaultFitType.toString() + ", ");
        buf.append("Death: " + GlobalFuncs.deathPenalty + ", ");
        buf.append("Mutation: " + GlobalFuncs.mutateProbability + ", ");
        buf.append("Net Thresh: " + GlobalFuncs.networkResultThreshold + ", ");
        buf.append("Force conceal: " + GlobalFuncs.forceTreePlacement + ", ");
        buf.append("Share Fit: " + GlobalFuncs.shareTeamFit);
        
                       
        FIO.appendFile(GlobalFuncs.summaryOutput, buf.toString());
    	
    	return true;
    }
    
    private int numSensors = 0;
    
    private void Generate_ButtonMouseClicked(java.awt.event.MouseEvent evt) {                                             
        int popSize = Integer.parseInt(NumScouts_Field.getText());
        //int numSensors = Integer.parseInt(NumSensors_Field.getText());
        
        int numHidden = Integer.parseInt(NumHidden_Field.getText());
        double probLink = Double.parseDouble(LinkProb_Field.getText());

        if (popSize < 0) Warning_Label.setText("ERROR: Pop Size < 1");
        //else if (numSensors < 1) Warning_Label.setText("ERROR: Num Sensors < 1");

        else if (numHidden < 0) Warning_Label.setText("ERROR: Num Hidden < 1");
        else if (probLink < 0 || probLink > 1) Warning_Label.setText("ERROR: Prob Link not valid percent");
        else if (ValidateGlobalInputs()){
            
            
            
            
            
            bbms.GlobalFuncs.currentPop = new jneat.Population(Math.max(1, popSize), numSensors, 1, numHidden, false, probLink);

            
            GUI_NB.GCO("New population added.");            
            GUI_NB.GCO("Running scenario iteration setup.");        
            int subPopSize = GlobalFuncs.currentPop.PopulationSlice(GlobalFuncs.percentPerRun);
            if (popSize == 0) unit.JNEATIntegration.ScenIterationSetup(popSize);    // Key for editing a scenario
            else unit.JNEATIntegration.ScenIterationSetup(subPopSize);
            dispose();
        }    
    }                                            

    private void Load_ButtonMouseClicked(java.awt.event.MouseEvent evt) {                                         
        bbms.GlobalFuncs.tempStr = LoadPopFile.getText();
        if (ValidateGlobalInputs()) {
        	unit.JNEATIntegration.ScenIterationFromFile();
            dispose();
        }        
    }                                        

    private void OverwriteCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {                                                   
        if (evt.getStateChange() == 1) overwriteDataFiles = true;
        else overwriteDataFiles = false;
    }                                                  

    private void PauseEpochCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {                                                    
        if (evt.getStateChange() == 1) GlobalFuncs.pauseNewEpoch = true;
        else GlobalFuncs.pauseNewEpoch = false;
    }                                                   

    private void PauseIterCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {                                                   
        if (evt.getStateChange() == 1) GlobalFuncs.pauseNewIter = true;
        else GlobalFuncs.pauseNewIter = false;
    }                                                  

    private void RandCOACheckboxItemStateChanged(java.awt.event.ItemEvent evt) {                                                 
        if (evt.getStateChange() == 1) GlobalFuncs.randCOAEpoch = true;
        else GlobalFuncs.randCOAEpoch = false;
    }                                                

    private void ForceTreePlacementItemStateChanged(java.awt.event.ItemEvent evt) {                                                    
        if (evt.getStateChange() == 1) GlobalFuncs.forceTreePlacement = true;
        else GlobalFuncs.forceTreePlacement = false;
    }                                                   

    private void ShareTeamFitItemStateChanged(java.awt.event.ItemEvent evt) {                                              
        if (evt.getStateChange() == 1) GlobalFuncs.shareTeamFit = true;
        else GlobalFuncs.shareTeamFit = false;
    }                                             

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogLoadScen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogLoadScen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogLoadScen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogLoadScen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogLoadScen dialog = new DialogLoadScen(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField DeathPenaltyField;
    private javax.swing.JTextField DetailedOutputFileField;
    private javax.swing.JTextField FitTypeField;
    private javax.swing.JCheckBox ForceTreePlacement;
    private javax.swing.JButton Generate_Button;
    private javax.swing.JTextField LinkProb_Field;
    private javax.swing.JTextField LoadPopFile;
    private javax.swing.JButton Load_Button;
    private javax.swing.JTextField MaxEpochsField;
    private javax.swing.JTextField MutateNetwork;
    private javax.swing.JTextField NetworkThreshold;
    private javax.swing.JTextField NumHidden_Field;
    private javax.swing.JTextField NumScouts_Field;
    private javax.swing.JTextField NumSensors_Field;
    private javax.swing.JCheckBox OverwriteCheckbox;
    private javax.swing.JCheckBox PauseEpochCheckbox;
    private javax.swing.JCheckBox PauseIterCheckbox;
    private javax.swing.JTextField PercentRunField;
    private javax.swing.JTextField PrefixOutputField;
    private javax.swing.JCheckBox RandCOACheckbox;
    private javax.swing.JTextField RunPerOrgField;
    private javax.swing.JCheckBox ShareTeamFit;
    private javax.swing.JTextField SummaryOutputFileField;
    private javax.swing.JTextField VisibilityField;
    private javax.swing.JLabel Warning_Label;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration                   
}
