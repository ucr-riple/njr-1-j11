package peg;

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 21 14:28:49 BRT 2014
//----------------------------------------------------

import java.io.FileInputStream;
import java_cup.runtime.*;
import Estruturas.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 21 14:28:49 BRT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\011\005" +
    "\000\002\011\007\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\007\005\000\002\007\005\000\002" +
    "\006\003\000\002\006\003\000\002\005\004\000\002\005" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\005\000\002\004\005\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\024\004\011\005\012\006\020\010\010\015" +
    "\013\016\021\017\005\021\022\022\017\001\002\000\004" +
    "\002\057\001\002\000\024\004\011\005\012\006\020\010" +
    "\010\015\013\016\021\017\005\021\022\022\026\001\002" +
    "\000\042\002\000\004\011\005\012\006\020\007\000\010" +
    "\010\011\000\012\030\013\027\014\ufff5\015\013\016\021" +
    "\017\005\020\031\021\022\022\026\001\002\000\012\002" +
    "\uffff\007\uffff\011\uffff\014\ufff4\001\002\000\024\004\011" +
    "\005\012\006\020\010\010\015\013\016\021\017\005\021" +
    "\022\022\017\001\002\000\044\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\001\002\000\044\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\024" +
    "\uffe5\001\002\000\044\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7" +
    "\001\002\000\010\002\ufffe\007\ufffe\011\ufffe\001\002\000" +
    "\012\002\ufffd\007\ufffd\011\ufffd\024\050\001\002\000\004" +
    "\014\043\001\002\000\044\002\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\034\001\002\000\024\004\011\005\012\006\020\010\010" +
    "\015\013\016\021\017\005\021\022\022\017\001\002\000" +
    "\024\004\011\005\012\006\020\010\010\015\013\016\021" +
    "\017\005\021\022\022\026\001\002\000\004\004\024\001" +
    "\002\000\044\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\001\002" +
    "\000\044\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed\001\002\000" +
    "\044\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\030\013\027\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\031\021\uffec\022\uffec\024\uffec\001\002\000\044" +
    "\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\024\uffe8\001\002\000\044\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\024\uffef\001\002\000\044\002\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\024\ufff0\001\002\000\044\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\024\uffee\001\002\000\004\007\033\001\002" +
    "\000\044\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\001\002\000" +
    "\024\004\011\005\012\006\020\010\010\015\013\016\021" +
    "\017\005\021\022\022\026\001\002\000\044\002\ufff8\004" +
    "\011\005\012\006\020\007\ufff8\010\010\011\ufff8\012\030" +
    "\013\027\014\ufff5\015\013\016\021\017\005\020\031\021" +
    "\022\022\026\024\ufff8\001\002\000\014\002\ufff9\007\ufff9" +
    "\011\ufff9\014\ufff4\024\ufff9\001\002\000\012\002\ufffa\007" +
    "\ufffa\011\ufffa\024\ufffa\001\002\000\012\002\ufffc\007\ufffc" +
    "\011\ufffc\024\ufffc\001\002\000\044\002\ufff3\004\011\005" +
    "\012\006\020\007\ufff3\010\010\011\ufff3\012\030\013\027" +
    "\014\ufff3\015\013\016\021\017\005\020\031\021\022\022" +
    "\026\024\ufff3\001\002\000\014\002\ufff2\007\ufff2\011\ufff2" +
    "\014\ufff2\024\ufff2\001\002\000\024\004\011\005\012\006" +
    "\020\010\010\015\013\016\021\017\005\021\022\022\026" +
    "\001\002\000\044\002\ufff5\004\011\005\012\006\020\007" +
    "\ufff5\010\010\011\ufff5\012\030\013\027\014\ufff5\015\013" +
    "\016\021\017\005\020\031\021\022\022\026\024\ufff5\001" +
    "\002\000\014\002\ufff4\007\ufff4\011\ufff4\014\ufff4\024\ufff4" +
    "\001\002\000\012\002\ufff6\007\ufff6\011\ufff6\024\ufff6\001" +
    "\002\000\014\002\ufff7\007\ufff7\011\ufff7\014\043\024\ufff7" +
    "\001\002\000\004\022\051\001\002\000\004\023\052\001" +
    "\002\000\024\004\011\005\012\006\020\010\010\015\013" +
    "\016\021\017\005\021\022\022\026\001\002\000\012\002" +
    "\ufffb\007\ufffb\011\ufffb\024\ufffb\001\002\000\004\011\055" +
    "\001\002\000\044\002\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea\001" +
    "\002\000\044\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\030\013\027\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\031\021\uffeb\022\uffeb\024\uffeb\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\020\002\003\003\022\004\005\005\006\006" +
    "\015\007\013\011\014\001\001\000\002\001\001\000\006" +
    "\003\022\004\055\001\001\000\010\003\022\004\040\005" +
    "\041\001\001\000\002\001\001\000\020\002\053\003\022" +
    "\004\005\005\006\006\015\007\013\011\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\031\003\022\004\005\005\006\006\015" +
    "\007\013\011\014\001\001\000\006\003\022\004\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\022\004\034\005\035\006\015\007" +
    "\036\010\037\001\001\000\010\003\022\004\040\005\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\022\004\040\005\041\001\001\000\002" +
    "\001\001\000\014\003\022\004\043\005\044\006\046\007" +
    "\045\001\001\000\010\003\022\004\040\005\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\022\004\034" +
    "\005\035\006\015\007\036\010\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static Padrao padraoFinal;

    public static void main(String argv[]) throws Exception{       
       if (argv.length == 0) {
           AnalizadorLexico scanner = new AnalizadorLexico(System.in);
           parser parser;
           parser = new parser(scanner);
           parser.parse();
       }
        else {
            for (int i = 0; i < argv.length; i++) {
                AnalizadorLexico scanner = null;
                try {
                        scanner = new AnalizadorLexico( new java.io.FileReader(argv[i]) );
                        parser parser;
                        parser = new parser(scanner);
                        parser.parse();
                    }
                catch (java.io.FileNotFoundException e) {System.out.println("File not found : \""+argv[i]+"\"");}
                catch (java.io.IOException e) {System.out.println("IO error scanning file \""+argv[i]+"\""); System.out.println(e);}
                catch (Exception e) {System.out.println("Unexpected exception:");e.printStackTrace();}
            }
        }
    }

    public void syntax_error(Symbol s){
        if(s.left != -1){
            System.out.println("Erro Sintatico na linha "+ s.left);
            System.exit(0);
        }        
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("Erro "+s.left);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    /*int erro = 0;

    public void ImprimeValor(String valor){
        System.out.println(valor);
    }

    public enum Erro {
        FALTA_CHAVE, FALTA_PARENTESE, FALTA_VIRGULA;
    }

    public void ocorreuErro(Erro erro, int linha, int coluna){
        switch(erro){
            case FALTA_CHAVE:
            System.out.println("Erro chave aberta e n��o fechada na linha "+ linha + " coluna " + coluna);
            break;

            case FALTA_PARENTESE:
            System.out.println("Erro sintatico na linha " + linha + " coluna "+ coluna+" - par��ntese experado");
            break;

            case FALTA_VIRGULA:
            System.out.println("Erro Sintatico: Falta \";\" na linha "+ linha);
            break;
        }

        System.exit(0);
    }*/

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // padraoSimples ::= CONJUNTO 
            {
              Padrao RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String conjunto = ((String)c).substring(1, ((String)c).length()-1); RESULT = new Conjunto(conjunto);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoSimples",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // padraoSimples ::= SEQUENCIA 
            {
              Padrao RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String sequencia = ((String)s).substring(1, ((String)s).length()-1); if(sequencia.length()==1){RESULT = new Conjunto(sequencia);}else{ RESULT = new Sequencia(sequencia);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoSimples",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // padraoSimples ::= QUALQUER 
            {
              Padrao RESULT =null;
		RESULT = new Ponto(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoSimples",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // padraoSimples ::= ID 
            {
              Padrao RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Chamada((String)id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoSimples",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // padraoComposto ::= ACHA padrao FCHA 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Captura(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoComposto",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // padraoComposto ::= APAR padrao FPAR 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoComposto",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // padraoComposto ::= AND padraoComposto 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new E(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoComposto",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // padraoComposto ::= NOT padraoComposto 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				   				if(p.getTipo() == TipoPadrao.E){
				   					RESULT = new Nao(p.e().getPadrao());
				   				}else if(p.getTipo() == TipoPadrao.NAO){
				   					RESULT = new E(p.nao().getPadrao());
				   				}else{
				   					RESULT = new Nao(p);
				   				}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoComposto",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // padraoComposto ::= ATE SEQUENCIA 
            {
              Padrao RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String sequencia = ((String)s).substring(1, ((String)s).length()-1); RESULT = new Ate(new Conjunto(sequencia));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoComposto",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // padraoComposto ::= padraoComposto OPCIONAL 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Opcional(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoComposto",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // padraoComposto ::= padraoComposto MAIS 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Repeticao(p, TipoRepeticao.UMA_OU_MAIS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoComposto",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // padraoComposto ::= padraoComposto ASTERISCO 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		   		   
		   		   boolean isSpan = p.getTipo() == TipoPadrao.CONCATENACAO &&
		   		   					p.concatenacao().get(0).getTipo() == TipoPadrao.PONTO &&
		   		   					p.concatenacao().get(1).getTipo() == TipoPadrao.NAO &&
		   		   					((Nao)p.concatenacao().get(1)).getPadrao().getTipo() == TipoPadrao.CONJUNTO;
		   		   
		   		   if(isSpan){
		   		   		RESULT = new Ate(((Nao)p.concatenacao().get(1)).getPadrao());
		   		   }else{
		   		   		RESULT = new Repeticao(p, TipoRepeticao.ZERO_OU_MAIS);
		   		   }
		   		   
		   		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoComposto",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // padraoComposto ::= padraoSimples 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padraoComposto",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // concatenacao ::= padraoComposto concatenacao 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao c = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((Concatenacao)c).addPadrao(p); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concatenacao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // concatenacao ::= padraoComposto padraoComposto 
            {
              Padrao RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Padrao p1 = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao p2 = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Concatenacao c = new Concatenacao(p2);
													  c.addPadrao(p1);
													  RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concatenacao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // escolha ::= concatenacao 
            {
              Padrao RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao c = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolha",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // escolha ::= padraoComposto 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolha",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // escolhaOrdenada ::= escolha BARRA escolhaOrdenada 
            {
              Padrao RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Padrao e = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao eo = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((EscolhaOrdenada)eo).addPadrao(e); RESULT = eo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolhaOrdenada",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // escolhaOrdenada ::= escolha BARRA escolha 
            {
              Padrao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Padrao e1 = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao e2 = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		EscolhaOrdenada eo = new EscolhaOrdenada(e2);
												  eo.addPadrao(e1);
												  RESULT = eo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escolhaOrdenada",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // qualquerPadrao ::= padraoComposto 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualquerPadrao",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // qualquerPadrao ::= concatenacao 
            {
              Padrao RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao c = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualquerPadrao",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // qualquerPadrao ::= escolhaOrdenada 
            {
              Padrao RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao eo = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = eo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualquerPadrao",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // gramatica ::= gramatica LINHA ID ATRIBUICAO qualquerPadrao 
            {
              Padrao RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Padrao g = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Gramatica sub = new Gramatica((String)id); sub.setPadrao(p); ((Gramatica)g).addSubgramatica(sub); RESULT = g;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gramatica",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // gramatica ::= ID ATRIBUICAO qualquerPadrao 
            {
              Padrao RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Gramatica((String)id); ((Gramatica)RESULT).setPadrao(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gramatica",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // padrao ::= gramatica 
            {
              Padrao RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao g = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.padraoFinal = g; RESULT = g;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padrao",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // padrao ::= escolhaOrdenada 
            {
              Padrao RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao eo = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.padraoFinal = eo; RESULT = eo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padrao",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // padrao ::= concatenacao 
            {
              Padrao RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao c = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.padraoFinal = c; RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padrao",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // padrao ::= padraoComposto 
            {
              Padrao RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Padrao p = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.padraoFinal = p; RESULT = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("padrao",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= padrao EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Padrao start_val = (Padrao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

