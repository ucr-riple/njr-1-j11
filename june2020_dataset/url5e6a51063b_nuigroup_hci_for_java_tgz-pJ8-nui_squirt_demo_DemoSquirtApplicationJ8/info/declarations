Compiled from "WiiMoteTest.java"
public class WiiMoteTest extends processing.core.PApplet {
  public WiiMoteTest();
  public static void main(java.lang.String[]);
  public void setup();
  public void draw();
  static motej.event.CoreButtonEvent access$002(WiiMoteTest, motej.event.CoreButtonEvent);
  static motejx.extensions.nunchuk.Nunchuk access$102(WiiMoteTest, motejx.extensions.nunchuk.Nunchuk);
  static motejx.extensions.nunchuk.Nunchuk access$100(WiiMoteTest);
}
Compiled from "WiiMoteTest.java"
class WiiMoteTest$1 implements motej.event.CoreButtonListener {
  final WiiMoteTest this$0;
  WiiMoteTest$1(WiiMoteTest);
  public void buttonPressed(motej.event.CoreButtonEvent);
}
Compiled from "WiiMoteTest.java"
class WiiMoteTest$2 implements motej.event.ExtensionListener {
  final WiiMoteTest this$0;
  WiiMoteTest$2(WiiMoteTest);
  public void extensionConnected(motej.event.ExtensionEvent);
  public void extensionDisconnected(motej.event.ExtensionEvent);
}
Compiled from "WiiMoteTest.java"
class WiiMoteTest$Particle {
  final WiiMoteTest this$0;
  public WiiMoteTest$Particle(WiiMoteTest, processing.core.PVector, int);
  public void run();
  public void update();
  public void render();
  public boolean dead();
  public void displayVector(processing.core.PVector, float, float, float);
}
Compiled from "WiiMoteTest.java"
class WiiMoteTest$ParticleSystem {
  final WiiMoteTest this$0;
  public WiiMoteTest$ParticleSystem(WiiMoteTest, int, processing.core.PVector);
  public void run();
  public void addParticle();
  public void addParticle(float, float);
  public void addParticle(WiiMoteTest$Particle);
  public boolean dead();
}
Compiled from "Actionable.java"
public interface nui.squirt.Actionable extends nui.squirt.Component {
  public abstract void addActionListener(nui.squirt.listener.ActionListener);
  public abstract void removerActionListener(nui.squirt.listener.ActionListener);
  public abstract void fireAction(nui.squirt.event.ActionEvent);
  public abstract java.lang.String getAction();
  public abstract void setAction(java.lang.String);
}
Compiled from "Component.java"
public interface nui.squirt.Component extends nui.squirt.ControlPointListener {
  public abstract void update();
  public abstract void preRender(processing.core.PApplet);
  public abstract void render(processing.core.PApplet);
  public abstract void postRender(processing.core.PApplet);
  public abstract java.awt.geom.AffineTransform getTransformMatrix();
  public abstract java.awt.geom.AffineTransform getAbsoluteTransformMatrix();
  public abstract processing.core.PVector transformToLocalSpace(processing.core.PVector);
  public abstract void setParent(nui.squirt.Container);
  public abstract nui.squirt.Container getParent();
}
Compiled from "Container.java"
public interface nui.squirt.Container extends nui.squirt.Component {
  public abstract void add(nui.squirt.Component);
  public abstract void add(nui.squirt.Component, java.lang.Object);
  public abstract void remove(nui.squirt.Component);
  public abstract java.util.List<nui.squirt.Component> getComponents();
}
Compiled from "ControlPoint.java"
public interface nui.squirt.ControlPoint {
  public abstract boolean isDead();
  public abstract void kill();
  public abstract float getX();
  public abstract float getY();
  public abstract float getPreviousX();
  public abstract float getPreviousY();
  public abstract void addControlPointListener(nui.squirt.ControlPointListener);
  public abstract void removeControlPointListener(nui.squirt.ControlPointListener);
  public abstract void fireControlPointCreatedEvent();
  public abstract void fireControlPointDiedEvent();
  public abstract void fireControlPointUpdatedEvent();
}
Compiled from "ControlPointListener.java"
public interface nui.squirt.ControlPointListener {
  public abstract void controlPointCreated(nui.squirt.ControlPoint);
  public abstract void controlPointDied(nui.squirt.ControlPoint);
  public abstract void controlPointUpdated(nui.squirt.ControlPoint);
  public abstract boolean canAcceptMoreControlPoints();
  public abstract boolean isUnderPoint(nui.squirt.ControlPoint);
  public abstract boolean offer(nui.squirt.ControlPoint);
}
Compiled from "Keyboard.java"
public interface nui.squirt.Keyboard extends nui.squirt.Component {
  public abstract void addKeyListener(nui.squirt.listener.KeyListener);
  public abstract void removeKeyListener(nui.squirt.listener.KeyListener);
  public abstract void fireKeyPressed(nui.squirt.event.KeyEvent);
  public abstract void fireKeyReleased(nui.squirt.event.KeyEvent);
  public abstract void fireKeyTyped(nui.squirt.event.KeyEvent);
}
Compiled from "NUIController.java"
public class nui.squirt.NUIController extends nui.squirt.component.AbstractContainer implements TUIO.TuioListener,nui.squirt.Keyboard {
  public nui.squirt.NUIController();
  public nui.squirt.NUIController(float, float);
  public static nui.squirt.NUIController getInstance();
  public float getTextAscent();
  public float getTextDescent();
  public processing.core.PFont getFont();
  public void start();
  public void update();
  public boolean hasPhysicsWorld();
  public org.jbox2d.dynamics.World getWorld();
  public void createPhysicsWorld();
  public void preRender(processing.core.PApplet);
  public void render(processing.core.PApplet);
  public boolean canAcceptMoreControlPoints();
  public boolean isUnderPoint(nui.squirt.ControlPoint);
  public boolean offer(nui.squirt.ControlPoint);
  public void addTuioCursor(TUIO.TuioCursor);
  public void removeTuioCursor(TUIO.TuioCursor);
  public void updateTuioCursor(TUIO.TuioCursor);
  public void addTuioObject(TUIO.TuioObject);
  public void removeTuioObject(TUIO.TuioObject);
  public void updateTuioObject(TUIO.TuioObject);
  public void refresh(TUIO.TuioTime);
  public void addMouseControlPoint(processing.core.PVector);
  public void removeMouseControlPoint();
  public void updateMouseControlPoint(processing.core.PVector);
  public void controlPointCreated(nui.squirt.ControlPoint);
  public void controlPointDied(nui.squirt.ControlPoint);
  public void controlPointUpdated(nui.squirt.ControlPoint);
  public void addKeyListener(nui.squirt.listener.KeyListener);
  public void removeKeyListener(nui.squirt.listener.KeyListener);
  public void fireKeyPressed(nui.squirt.event.KeyEvent);
  public void fireKeyReleased(nui.squirt.event.KeyEvent);
  public void fireKeyTyped(nui.squirt.event.KeyEvent);
  static float access$002(nui.squirt.NUIController, float);
  static float access$102(nui.squirt.NUIController, float);
  static processing.core.PFont access$202(nui.squirt.NUIController, processing.core.PFont);
  static float access$302(nui.squirt.NUIController, float);
  static float access$402(nui.squirt.NUIController, float);
}
Compiled from "NUIController.java"
public class nui.squirt.NUIController$SquirtPApplet extends processing.core.PApplet {
  public nui.squirt.NUIController$SquirtPApplet();
  public void setup();
  public void draw();
  public void mousePressed();
  public void mouseReleased();
  public void mouseDragged();
  public void keyPressed();
  public void keyReleased();
  public void keyTyped();
}
Compiled from "TextInput.java"
public interface nui.squirt.TextInput extends nui.squirt.Component {
  public abstract void addTextListener(nui.squirt.listener.TextListener);
  public abstract void removeTextListener(nui.squirt.listener.TextListener);
  public abstract void fireTextChanged(nui.squirt.event.TextEvent);
  public abstract java.lang.String getText();
  public abstract void setText(java.lang.String);
}
Compiled from "Valuable.java"
public interface nui.squirt.Valuable extends nui.squirt.Component {
  public abstract void addValueListener(nui.squirt.listener.ValueListener);
  public abstract void removeValueListener(nui.squirt.listener.ValueListener);
  public abstract void fireValueChanged(nui.squirt.event.ValueEvent);
  public abstract float getValue();
  public abstract void setValue(float);
  public abstract float getMaxValue();
  public abstract void setMaxValue(float);
  public abstract float getMinValue();
  public abstract void setMinValue(float);
  public abstract float getValueRange();
  public abstract float getCenterValue();
}
Compiled from "AbstractActionable.java"
public abstract class nui.squirt.component.AbstractActionable extends nui.squirt.component.AbstractComponent implements nui.squirt.Actionable {
  public nui.squirt.component.AbstractActionable(float, float);
  public void addActionListener(nui.squirt.listener.ActionListener);
  public void fireAction(nui.squirt.event.ActionEvent);
  public java.lang.String getAction();
  public void setAction(java.lang.String);
}
Compiled from "AbstractComponent.java"
public abstract class nui.squirt.component.AbstractComponent implements nui.squirt.Component {
  public nui.squirt.component.AbstractComponent();
  public nui.squirt.component.AbstractComponent(float, float);
  public void preRender(processing.core.PApplet);
  public void postRender(processing.core.PApplet);
  public java.awt.geom.AffineTransform getTransformMatrix();
  public java.awt.geom.AffineTransform getAbsoluteTransformMatrix();
  public processing.core.PVector transformToLocalSpace(processing.core.PVector);
  public nui.squirt.Container getParent();
  public void setParent(nui.squirt.Container);
}
Compiled from "AbstractContainer.java"
public abstract class nui.squirt.component.AbstractContainer extends nui.squirt.component.AbstractComponent implements nui.squirt.Container {
  public nui.squirt.component.AbstractContainer(float, float);
  public void add(nui.squirt.Component);
  public void add(nui.squirt.Component, java.lang.Object);
  public void remove(nui.squirt.Component);
  public java.util.List<nui.squirt.Component> getComponents();
}
Compiled from "AbstractValuable.java"
public abstract class nui.squirt.component.AbstractValuable extends nui.squirt.component.AbstractComponent implements nui.squirt.Valuable {
  public nui.squirt.component.AbstractValuable(float, float);
  public void addValueListener(nui.squirt.listener.ValueListener);
  public void fireValueChanged(nui.squirt.event.ValueEvent);
  public float getMinValue();
  public void setMinValue(float);
  public float getMaxValue();
  public void setMaxValue(float);
  public float getValue();
  public void setValue(float);
  public float getValueRange();
  public float getCenterValue();
}
Compiled from "Button.java"
public class nui.squirt.component.Button extends nui.squirt.component.Rectangle implements nui.squirt.Actionable {
  public nui.squirt.component.Button(float, float, java.lang.String);
  public nui.squirt.component.Label getLabel();
  public void setText(java.lang.String);
  public boolean isPressed();
  public void press();
  public void release();
  public void addActionListener(nui.squirt.listener.ActionListener);
  public void removerActionListener(nui.squirt.listener.ActionListener);
  public void fireAction(nui.squirt.event.ActionEvent);
  public java.lang.String getAction();
  public void setAction(java.lang.String);
  public void update();
  public void render(processing.core.PApplet);
  public boolean canAcceptMoreControlPoints();
  public void controlPointCreated(nui.squirt.ControlPoint);
  public void controlPointUpdated(nui.squirt.ControlPoint);
  public void controlPointDied(nui.squirt.ControlPoint);
  static {};
}
Compiled from "Circle.java"
public class nui.squirt.component.Circle extends nui.squirt.component.AbstractComponent {
  public nui.squirt.component.Circle(float, float, float);
  public float getRadius();
  public void setRadius(float);
  public java.awt.Color getFillColor();
  public void setFillColor(java.awt.Color);
  public java.awt.Color getStrokeColor();
  public void setStrokeColor(java.awt.Color);
  public float getStrokeWeight();
  public void setStrokeWeight(float);
  public void update();
  public void preRender(processing.core.PApplet);
  public void render(processing.core.PApplet);
  public boolean isUnderPoint(nui.squirt.ControlPoint);
  public boolean canAcceptMoreControlPoints();
  public boolean offer(nui.squirt.ControlPoint);
  public void controlPointCreated(nui.squirt.ControlPoint);
  public void controlPointDied(nui.squirt.ControlPoint);
  public void controlPointUpdated(nui.squirt.ControlPoint);
}
Compiled from "Frame.java"
public class nui.squirt.component.Frame extends nui.squirt.component.Rectangle implements nui.squirt.Container {
  public nui.squirt.component.Frame(float, float, float, float);
  public nui.squirt.component.Frame(float, float);
  public void render(processing.core.PApplet);
  public void add(nui.squirt.Component);
  public void add(nui.squirt.Component, java.lang.Object);
  public java.util.List<nui.squirt.Component> getComponents();
  public void remove(nui.squirt.Component);
  public boolean canAcceptMoreControlPoints();
  public boolean isUnderPoint(nui.squirt.ControlPoint);
  public boolean offer(nui.squirt.ControlPoint);
  public void controlPointCreated(nui.squirt.ControlPoint);
  public void controlPointDied(nui.squirt.ControlPoint);
  public void controlPointUpdated(nui.squirt.ControlPoint);
}
Compiled from "Image.java"
public class nui.squirt.component.Image extends nui.squirt.component.Rectangle {
  public nui.squirt.component.Image(float, float, java.lang.String);
  public nui.squirt.component.Image(float, float, float, float, java.lang.String);
  public java.lang.String getImagePath();
  public void setImagePath(java.lang.String);
  public void update();
  public void preRender(processing.core.PApplet);
  public void render(processing.core.PApplet);
  static {};
}
Compiled from "Knob.java"
public class nui.squirt.component.Knob extends nui.squirt.component.Circle implements nui.squirt.Valuable {
  public nui.squirt.component.Knob(float, float, float);
  public nui.squirt.component.Knob(float, float, float, float, float);
  public nui.squirt.component.Knob(float, float, float, float, float, float);
  public nui.squirt.component.Knob(float, float, float, float, float, float, float);
  public nui.squirt.component.Knob(float, float, float, float, float, float, float, float);
  public void addValueListener(nui.squirt.listener.ValueListener);
  public void removeValueListener(nui.squirt.listener.ValueListener);
  public void fireValueChanged(nui.squirt.event.ValueEvent);
  public float getMinValue();
  public void setMinValue(float);
  public float getMaxValue();
  public void setMaxValue(float);
  public float getValue();
  public void setValue(float);
  public float getCenterValue();
  public float getValueRange();
  public float getMinAngle();
  public void setMinAngle(float);
  public float getMaxAngle();
  public void setMaxAngle(float);
  public float getAngleRange();
  public float getRotation();
  public void setRotation(float);
  public void update();
  public void render(processing.core.PApplet);
  public boolean canAcceptMoreControlPoints();
  public void controlPointUpdated(nui.squirt.ControlPoint);
  static {};
}
Compiled from "Label.java"
public class nui.squirt.component.Label extends nui.squirt.component.Rectangle {
  protected java.lang.String text;
  public nui.squirt.component.Label(float, float, java.lang.String);
  public java.lang.String getText();
  public void setText(java.lang.String);
  public void preRender(processing.core.PApplet);
  public void render(processing.core.PApplet);
}
Compiled from "PhysicsCircle.java"
public class nui.squirt.component.PhysicsCircle extends nui.squirt.component.PhysicsComponent {
  public nui.squirt.component.PhysicsCircle(float, float, float, org.jbox2d.dynamics.World);
  public float getRadius();
  public java.awt.Color getFillColor();
  public void setFillColor(java.awt.Color);
  public java.awt.Color getStrokeColor();
  public void setStrokeColor(java.awt.Color);
  public float getStrokeWeight();
  public void update();
  public void preRender(processing.core.PApplet);
  public void render(processing.core.PApplet);
  public boolean isUnderPoint(nui.squirt.ControlPoint);
  public boolean offer(nui.squirt.ControlPoint);
}
Compiled from "PhysicsComponent.java"
public abstract class nui.squirt.component.PhysicsComponent extends nui.squirt.component.AbstractComponent {
  public nui.squirt.component.PhysicsComponent(float, float, org.jbox2d.dynamics.World);
  public org.jbox2d.dynamics.World getWorld();
  public org.jbox2d.dynamics.Body getBody();
  public void render(processing.core.PApplet);
  public boolean canAcceptMoreControlPoints();
  public void controlPointCreated(nui.squirt.ControlPoint);
  public void controlPointDied(nui.squirt.ControlPoint);
  public void controlPointUpdated(nui.squirt.ControlPoint);
  public java.awt.geom.AffineTransform getTransformMatrix();
}
Compiled from "PhysicsRectangle.java"
public class nui.squirt.component.PhysicsRectangle extends nui.squirt.component.PhysicsComponent {
  public nui.squirt.component.PhysicsRectangle(float, float, float, float, org.jbox2d.dynamics.World);
  public float getWidth();
  public float getHeight();
  public java.awt.Color getFillColor();
  public void setFillColor(java.awt.Color);
  public java.awt.Color getStrokeColor();
  public void setStrokeColor(java.awt.Color);
  public float getStrokeWeight();
  public void setStrokeWeight(float);
  public void update();
  public void preRender(processing.core.PApplet);
  public void render(processing.core.PApplet);
  public boolean isUnderPoint(nui.squirt.ControlPoint);
  public boolean offer(nui.squirt.ControlPoint);
}
Compiled from "Rectangle.java"
public class nui.squirt.component.Rectangle extends nui.squirt.component.AbstractComponent {
  protected java.util.Collection<nui.squirt.ControlPoint> controlPoints;
  public nui.squirt.component.Rectangle(float, float, float, float);
  public float getWidth();
  public void setWidth(float);
  public float getHeight();
  public void setHeight(float);
  public java.awt.Color getFillColor();
  public void setFillColor(java.awt.Color);
  public java.awt.Color getStrokeColor();
  public void setStrokeColor(java.awt.Color);
  public float getStrokeWeight();
  public void setStrokeWeight(float);
  public void update();
  public void preRender(processing.core.PApplet);
  public void render(processing.core.PApplet);
  public boolean canAcceptMoreControlPoints();
  public boolean isUnderPoint(nui.squirt.ControlPoint);
  public boolean offer(nui.squirt.ControlPoint);
  public void controlPointCreated(nui.squirt.ControlPoint);
  public void controlPointDied(nui.squirt.ControlPoint);
  public void controlPointUpdated(nui.squirt.ControlPoint);
}
Compiled from "Slider.java"
public class nui.squirt.component.Slider extends nui.squirt.component.Rectangle implements nui.squirt.Valuable {
  public nui.squirt.component.Slider(float, float, float);
  public nui.squirt.component.Slider(float, float, float, float, float);
  public nui.squirt.component.Slider(float, float, float, float, float, float);
  public void addValueListener(nui.squirt.listener.ValueListener);
  public void removeValueListener(nui.squirt.listener.ValueListener);
  public void fireValueChanged(nui.squirt.event.ValueEvent);
  public float getLength();
  public void setLength(float);
  public float getMinValue();
  public void setMinValue(float);
  public float getMaxValue();
  public void setMaxValue(float);
  public float getValue();
  public void setValue(float);
  public float getCenterValue();
  public float getValueRange();
  public void render(processing.core.PApplet);
  public boolean canAcceptMoreControlPoints();
  public void controlPointCreated(nui.squirt.ControlPoint);
  public void controlPointDied(nui.squirt.ControlPoint);
  public void controlPointUpdated(nui.squirt.ControlPoint);
}
Compiled from "TextField.java"
public class nui.squirt.component.TextField extends nui.squirt.component.Rectangle implements nui.squirt.TextInput,nui.squirt.listener.KeyListener {
  public nui.squirt.component.TextField(float, float, float);
  public nui.squirt.component.TextField(float, float, float, java.lang.String);
  public java.lang.String getText();
  public void setText(java.lang.String);
  public int getCaretIndex();
  public void setCaretIndex(int);
  public int getSecondaryCaretIndex();
  public void setSecondaryCaretIndex(int);
  public java.awt.Color getFillColor();
  public java.awt.Color getStrokeColor();
  public float getStrokeWeight();
  public void preRender(processing.core.PApplet);
  public void render(processing.core.PApplet);
  public void keyPressed(nui.squirt.event.KeyEvent);
  public void keyReleased(nui.squirt.event.KeyEvent);
  public void keyTyped(nui.squirt.event.KeyEvent);
  public void addTextListener(nui.squirt.listener.TextListener);
  public void removeTextListener(nui.squirt.listener.TextListener);
  public void fireTextChanged(nui.squirt.event.TextEvent);
  public void addKeyboard(nui.squirt.Keyboard);
  public void removeKeyboard(nui.squirt.Keyboard);
  public boolean canAcceptMoreControlPoints();
  public boolean offer(nui.squirt.ControlPoint);
  public void controlPointCreated(nui.squirt.ControlPoint);
  public void controlPointDied(nui.squirt.ControlPoint);
  public void controlPointUpdated(nui.squirt.ControlPoint);
  static {};
}
Compiled from "AbstractControlPoint.java"
public abstract class nui.squirt.controlpoint.AbstractControlPoint implements nui.squirt.ControlPoint {
  public boolean dead;
  public nui.squirt.controlpoint.AbstractControlPoint();
  public boolean isDead();
  public void kill();
  public void addControlPointListener(nui.squirt.ControlPointListener);
  public void removeControlPointListener(nui.squirt.ControlPointListener);
  protected java.util.Collection<nui.squirt.ControlPointListener> getControlPointListeners();
  public void fireControlPointCreatedEvent();
  public void fireControlPointDiedEvent();
  public void fireControlPointUpdatedEvent();
}
Compiled from "MouseControlPoint.java"
public class nui.squirt.controlpoint.MouseControlPoint extends nui.squirt.controlpoint.AbstractControlPoint {
  java.util.Vector<processing.core.PVector> path;
  public nui.squirt.controlpoint.MouseControlPoint(processing.core.PVector);
  public float getPreviousX();
  public float getPreviousY();
  public float getX();
  public float getY();
  public void addToPath(processing.core.PVector);
}
Compiled from "TUIOControlPoint.java"
public class nui.squirt.controlpoint.TUIOControlPoint extends nui.squirt.controlpoint.AbstractControlPoint implements TUIO.TuioListener {
  public nui.squirt.controlpoint.TUIOControlPoint(TUIO.TuioCursor, float, float);
  public TUIO.TuioCursor getCursor();
  public float getX();
  public float getY();
  public float getPreviousX();
  public float getPreviousY();
  public void addTuioCursor(TUIO.TuioCursor);
  public void removeTuioCursor(TUIO.TuioCursor);
  public void updateTuioCursor(TUIO.TuioCursor);
  public void refresh(TUIO.TuioTime);
  public void addTuioObject(TUIO.TuioObject);
  public void removeTuioObject(TUIO.TuioObject);
  public void updateTuioObject(TUIO.TuioObject);
}
Compiled from "DemoSquirtApplication.java"
public class nui.squirt.demo.DemoSquirtApplication {
  public nui.squirt.demo.DemoSquirtApplication();
  public static void main(java.lang.String[]);
}
Compiled from "DemoSquirtApplication.java"
final class nui.squirt.demo.DemoSquirtApplication$1 implements nui.squirt.listener.ActionListener {
  nui.squirt.demo.DemoSquirtApplication$1();
  public void actionPerformed(nui.squirt.event.ActionEvent);
}
Compiled from "DemoSquirtApplication.java"
public class nui.squirt.demo.DemoSquirtApplication$SlidingSlider extends nui.squirt.component.Slider {
  public nui.squirt.demo.DemoSquirtApplication$SlidingSlider(float, float, float, float, float);
  public void update();
}
Compiled from "DemoSquirtApplication.java"
class nui.squirt.demo.DemoSquirtApplication$SpinningRectangle extends nui.squirt.component.Rectangle {
  public nui.squirt.demo.DemoSquirtApplication$SpinningRectangle(float, float, float, float);
  public void update();
}
Compiled from "DemoSquirtApplication.java"
class nui.squirt.demo.DemoSquirtApplication$SpinningScalingImage extends nui.squirt.component.Image {
  public nui.squirt.demo.DemoSquirtApplication$SpinningScalingImage(float, float, float, float, java.lang.String);
  public nui.squirt.demo.DemoSquirtApplication$SpinningScalingImage(float, float, java.lang.String);
  public void update();
}
Compiled from "DemoSquirtApplication.java"
public class nui.squirt.demo.DemoSquirtApplication$ValueLabel extends nui.squirt.component.Label implements nui.squirt.listener.ValueListener {
  public nui.squirt.demo.DemoSquirtApplication$ValueLabel(float, float, java.lang.String);
  public void valueChanged(nui.squirt.event.ValueEvent);
  public void setText(java.lang.String);
}
Compiled from "ActionEvent.java"
public class nui.squirt.event.ActionEvent extends nui.squirt.event.Event {
  public nui.squirt.event.ActionEvent(nui.squirt.Actionable);
  public java.lang.String getAction();
}
Compiled from "Event.java"
public class nui.squirt.event.Event {
  public nui.squirt.event.Event(nui.squirt.Component);
  public nui.squirt.Component getSource();
}
Compiled from "KeyEvent.java"
public class nui.squirt.event.KeyEvent extends nui.squirt.event.Event {
  public static final int UP;
  public static final int DOWN;
  public static final int LEFT;
  public static final int RIGHT;
  public static final int SHIFT;
  public static final int ALT;
  public static final int CONTROL;
  public static final char BACKSPACE;
  public static final char DELETE;
  public static final char TAB;
  public static final char ENTER;
  public static final char RETURN;
  public static final char ESC;
  public nui.squirt.event.KeyEvent(nui.squirt.Keyboard);
  public boolean isCoded();
  public void setCoded(boolean);
  public char getKey();
  public void setKey(char);
  public int getKeyCode();
  public void setKeyCode(int);
}
Compiled from "TextEvent.java"
public class nui.squirt.event.TextEvent extends nui.squirt.event.Event {
  public nui.squirt.event.TextEvent(nui.squirt.TextInput);
  public java.lang.String getOldText();
  public void setOldText(java.lang.String);
  public java.lang.String getNewText();
  public void setNewText(java.lang.String);
}
Compiled from "ValueEvent.java"
public class nui.squirt.event.ValueEvent extends nui.squirt.event.Event {
  public nui.squirt.event.ValueEvent(nui.squirt.Valuable);
  public float getOldValue();
  public void setOldValue(float);
  public float getNewValue();
  public void setNewValue(float);
}
Compiled from "ActionListener.java"
public interface nui.squirt.listener.ActionListener {
  public abstract void actionPerformed(nui.squirt.event.ActionEvent);
}
Compiled from "KeyListener.java"
public interface nui.squirt.listener.KeyListener {
  public abstract void keyPressed(nui.squirt.event.KeyEvent);
  public abstract void keyReleased(nui.squirt.event.KeyEvent);
  public abstract void keyTyped(nui.squirt.event.KeyEvent);
  public abstract void addKeyboard(nui.squirt.Keyboard);
  public abstract void removeKeyboard(nui.squirt.Keyboard);
}
Compiled from "TextListener.java"
public interface nui.squirt.listener.TextListener {
  public abstract void textChanged(nui.squirt.event.TextEvent);
}
Compiled from "ValueListener.java"
public interface nui.squirt.listener.ValueListener {
  public abstract void valueChanged(nui.squirt.event.ValueEvent);
}
