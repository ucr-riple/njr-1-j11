Compiled from "GSTester.java"
public class Deprecated.GSTester {
  public Deprecated.GSTester();
  public static void main(java.lang.String[]);
}
Compiled from "GeneratedSignal.java"
public class Deprecated.GeneratedSignal {
  public Deprecated.GeneratedSignal(java.lang.String, double);
  public java.lang.String getType();
  public double getPrice();
}
Compiled from "MomentumStrategy.java"
public class Deprecated.MomentumStrategy {
  double threshold;
  double[] newTradingList;
  public Deprecated.MomentumStrategy();
  public java.util.LinkedList<java.lang.Double> runStrategy(java.util.LinkedList<java.lang.Double>);
  public int getNumberOfBuy();
  public int getNumberOfSell();
  public double evaluteTheStrategy();
}
Compiled from "Strategy.java"
public class Deprecated.Strategy {
  public Deprecated.Strategy();
  public double getReturn(Deprecated.Trade, Deprecated.Trade);
  public double getAverage();
  public int getSignal();
}
Compiled from "StrategyTest.java"
public class Deprecated.StrategyTest {
  public Deprecated.StrategyTest();
  public void test();
}
Compiled from "Trade.java"
public class Deprecated.Trade {
  public Deprecated.Trade(java.lang.String, java.sql.Date, java.lang.String, double, double, double, double, double, long, long, long, java.lang.String, double, java.sql.Date, java.lang.String, java.lang.String);
  public java.lang.String getInstrument();
  public void setInstrument(java.lang.String);
  public java.sql.Date getDate();
  public void setDate(java.sql.Date);
  public java.lang.String getRecordType();
  public void setRecordType(java.lang.String);
  public double getPrice();
  public void setPrice(double);
  public double getVolume();
  public void setVolume(double);
  public double getUndisclosedVolume();
  public void setUndisclosedVolume(double);
  public double getOldVolume();
  public void setOldVolume(double);
  public double getValue();
  public void setValue(double);
  public long getTransId();
  public void setTransId(long);
  public long getBidId();
  public void setBidId(long);
  public long getAskId();
  public void setAskId(long);
  public java.lang.String getBidAsk();
  public void setBidAsk(java.lang.String);
  public double getOldPrice();
  public void setOldPrice(double);
  public java.sql.Date getEntryTime();
  public void setEntryTime(java.sql.Date);
  public java.lang.String getBuyerBrokerId();
  public void setBuyerBrokerId(java.lang.String);
  public java.lang.String getSellerBrokerId();
  public void setSellerBrokerId(java.lang.String);
}
Compiled from "TradeObject.java"
public class Deprecated.TradeObject {
  public Deprecated.TradeObject(int, int, java.lang.Double, int);
  public int getSellID();
  public int getBuyID();
  public int getQuantity();
  public java.lang.Double getPrice();
}
Compiled from "evaluator.java"
public class Deprecated.evaluator {
  public Deprecated.evaluator(int[], int[]);
  public Deprecated.resultObject start(java.util.LinkedList<Deprecated.TradeObject>);
}
Compiled from "newMomentum.java"
public class Deprecated.newMomentum {
  public Deprecated.newMomentum();
  public double getAverage();
  public void addTrade(double);
  public Deprecated.signalObject generateOrderSignal(Deprecated.orderObject, Deprecated.orderObject);
  public void getreceiptNumber(int);
  public boolean isShareQuantityZero();
  public Deprecated.signalObject finishShare(Deprecated.orderObject, Deprecated.orderObject);
  public double[] gettenArray();
  public java.util.LinkedList<java.lang.Integer> getSellReceipt();
  public java.util.LinkedList<java.lang.Integer> getBuyReceipt();
}
Compiled from "orderObject.java"
public class Deprecated.orderObject {
  public Deprecated.orderObject(int, double);
  public int getQauntity();
  public double getPrice();
}
Compiled from "resultObject.java"
public class Deprecated.resultObject {
  public Deprecated.resultObject(int, int, int, int, double);
  public int getNST();
  public int getNBT();
  public int getNSB();
  public int getNSS();
  public double getNBenefit();
}
Compiled from "reverseMomentum.java"
public class Deprecated.reverseMomentum {
  public double getAverage();
  public Deprecated.reverseMomentum();
  public void addTrade(double);
  public Deprecated.signalObject generateOrderSignal(Deprecated.orderObject, Deprecated.orderObject);
  public void getreceiptNumber(int);
  public boolean isShareQuantityZero();
  public Deprecated.signalObject finishShare(Deprecated.orderObject, Deprecated.orderObject);
  public double[] gettenArray();
  public java.util.LinkedList<java.lang.Integer> getSellReceipt();
  public java.util.LinkedList<java.lang.Integer> getBuyReceipt();
}
Compiled from "signalObject.java"
public class Deprecated.signalObject {
  public Deprecated.signalObject(int, double, java.lang.String);
  public int getQuantity();
  public double getPrice();
  public java.lang.String getType();
}
Compiled from "CoupleReciept.java"
public class Selecting_Algothrim.CoupleReciept {
  java.sql.Time time;
  double credit;
  double debit;
  java.util.LinkedList<java.lang.Long> buyList;
  java.util.LinkedList<java.lang.Long> sellList;
  public Selecting_Algothrim.CoupleReciept();
  public void setBuyList(java.util.LinkedList<java.lang.Long>);
  public void setSellList(java.util.LinkedList<java.lang.Long>);
  public void addToCredit(double);
  public void addToDebit(double);
  public void addToTime(java.sql.Time);
  public java.util.LinkedList<java.lang.Long> getBuyList();
  public java.util.LinkedList<java.lang.Long> geSellList();
  public java.sql.Time getTime();
  public double getCredit();
  public double getDebit();
}
Compiled from "EvaluatorLec.java"
public class Selecting_Algothrim.EvaluatorLec {
  public Selecting_Algothrim.EvaluatorLec(Selecting_Algothrim.lecMS, java.util.LinkedList<Trading_Engine.ResultData>);
  public java.util.LinkedList<Selecting_Algothrim.resultObjectL> run();
  public java.util.LinkedList<Selecting_Algothrim.CoupleReciept> getCR();
}
Compiled from "GeneratedSignal.java"
public class Selecting_Algothrim.GeneratedSignal {
  public Selecting_Algothrim.GeneratedSignal(java.lang.String, double);
  public java.lang.String getType();
  public double getPrice();
}
Compiled from "ResultGenerator.java"
public class Selecting_Algothrim.ResultGenerator {
  public Selecting_Algothrim.ResultGenerator(Selecting_Algothrim.EvaluatorLec);
  public java.util.LinkedList<Selecting_Algothrim.resultObjectL> getResultList();
}
Compiled from "SengTester25.java"
public class Selecting_Algothrim.SengTester25 {
  public Selecting_Algothrim.SengTester25();
}
Compiled from "TradeObject.java"
public class Selecting_Algothrim.TradeObject {
  public Selecting_Algothrim.TradeObject(int, int, java.lang.Double, int, int);
  public int getSellID();
  public int getBuyID();
  public int getQuantity();
  public java.lang.Double getPrice();
  public int getTime();
}
Compiled from "lecMS.java"
public interface Selecting_Algothrim.lecMS {
  public abstract void setThreShold(double);
  public abstract void setAmountToTrade(int);
  public abstract void addTrade(double);
  public abstract java.util.LinkedList<Selecting_Algothrim.signalObject> generateSignalList(Trading_Engine.MyBidList, Trading_Engine.MyAskList);
  public abstract void getReceiptList(java.util.LinkedList<java.lang.Long>);
  public abstract java.util.LinkedList<Selecting_Algothrim.CoupleReciept> getAllReciept();
  public abstract int getReceiptLength();
  public abstract void getSTrade(java.util.LinkedList<Trading_Engine.ResultData>);
  public abstract java.util.LinkedList<Selecting_Algothrim.resultObjectL> getResultListFromStrategy();
}
Compiled from "lecMSMomentum.java"
public class Selecting_Algothrim.lecMSMomentum implements Selecting_Algothrim.lecMS {
  long tempTime;
  long tempTime2;
  java.sql.Time tempAverageTime;
  double outComePercentage;
  double tempDebit;
  double tempCredit;
  int tempNumberOfTrades;
  java.util.LinkedList<Selecting_Algothrim.resultObjectL> listOfResultsFromTrade;
  public Selecting_Algothrim.lecMSMomentum();
  public void setThreShold(double);
  public void setAmountToTrade(int);
  public void addTrade(double);
  public java.util.LinkedList<Selecting_Algothrim.signalObject> generateSignalList(java.util.LinkedList<Selecting_Algothrim.orderObject>, java.util.LinkedList<Selecting_Algothrim.orderObject>);
  public void getReceiptList(java.util.LinkedList<java.lang.Long>);
  public java.util.LinkedList<Selecting_Algothrim.CoupleReciept> getAllReciept();
  public void getSTrade(java.util.LinkedList<Trading_Engine.ResultData>);
  public java.util.LinkedList<Selecting_Algothrim.resultObjectL> getResultListFromStrategy();
  public java.util.LinkedList<Selecting_Algothrim.signalObject> generateSignalList(Trading_Engine.MyBidList, Trading_Engine.MyAskList);
  public int getReceiptLength();
}
Compiled from "lecMSReverse.java"
public class Selecting_Algothrim.lecMSReverse implements Selecting_Algothrim.lecMS {
  long tempTime;
  long tempTime2;
  java.sql.Time tempAverageTime;
  double outComePercentage;
  double tempDebit;
  double tempCredit;
  int tempNumberOfTrades;
  java.util.LinkedList<Selecting_Algothrim.resultObjectL> listOfResultsFromTrade;
  public Selecting_Algothrim.lecMSReverse();
  public void setThreShold(double);
  public void setAmountToTrade(int);
  public void addTrade(double);
  public java.util.LinkedList<Selecting_Algothrim.signalObject> generateSignalList(java.util.LinkedList<Selecting_Algothrim.orderObject>, java.util.LinkedList<Selecting_Algothrim.orderObject>);
  public void getReceiptList(java.util.LinkedList<java.lang.Long>);
  public java.util.LinkedList<Selecting_Algothrim.CoupleReciept> getAllReciept();
  public void getSTrade(java.util.LinkedList<Trading_Engine.ResultData>);
  public java.util.LinkedList<Selecting_Algothrim.resultObjectL> getResultListFromStrategy();
  public java.util.LinkedList<Selecting_Algothrim.signalObject> generateSignalList(Trading_Engine.MyBidList, Trading_Engine.MyAskList);
  public int getReceiptLength();
}
Compiled from "orderObject.java"
public class Selecting_Algothrim.orderObject {
  public Selecting_Algothrim.orderObject(int, int, int);
  public int getId();
  public int getQauntity();
  public int getPrice();
}
Compiled from "resultObjectL.java"
public class Selecting_Algothrim.resultObjectL {
  public Selecting_Algothrim.resultObjectL(java.sql.Time, double);
  public java.sql.Time getTime();
  public double getPercentage();
}
Compiled from "signalObject.java"
public class Selecting_Algothrim.signalObject {
  public Selecting_Algothrim.signalObject(int, double, java.lang.String);
  public int getQuantity();
  public double getPrice();
  public java.lang.String getType();
}
Compiled from "AllTestSuite.java"
public class Test.AllTestSuite {
  public Test.AllTestSuite();
}
Compiled from "MyListTest.java"
public class Test.MyListTest {
  public Test.MyListTest();
  public void testMyBidListSimple();
  public void testMyBidListSameValue();
  public void testMyAskListSimple();
  public void testMyAskListSameValue();
}
Compiled from "MyStrategyTest.java"
public class Test.MyStrategyTest {
  public Test.MyStrategyTest();
  public void testStrategy();
}
Compiled from "TestMain.java"
public class Test.TestMain {
  public Test.TestMain();
  public void testAddTrade();
  public void testSignal();
  public void testShareQuantity();
  public void testReceipt();
  public void reTestAddTrade();
  public void reTestShareQuantity();
  public void reTestReceipt();
  public void testOrderbookTable();
  public void testChooseStrategyDialog();
}
Compiled from "TestStrategyAndEval.java"
public class Test.TestStrategyAndEval {
  public Test.TestStrategyAndEval();
  public void testSV();
}
Compiled from "myDatabaseTest.java"
public class Test.myDatabaseTest {
  public Test.myDatabaseTest();
  public static void setup();
  public void testInsertSmallData();
  public void testInsertLargeData();
  public static void close();
}
Compiled from "myTradeTest.java"
public class Test.myTradeTest {
  public Test.myTradeTest();
  public void test();
}
Compiled from "GraphData.java"
public class Trading_Engine.GraphData {
  public Trading_Engine.GraphData(double, java.sql.Time);
  public double getPrice();
  public java.sql.Time getTime();
}
Compiled from "Main.java"
public class Trading_Engine.Main {
  public Trading_Engine.Main();
  public static void main(java.lang.String[]);
}
Compiled from "MyAskList.java"
public class Trading_Engine.MyAskList {
  public Trading_Engine.MyAskList();
  public void add(long, double, int, java.sql.Time);
  public int getLength();
  public Trading_Engine.OneData get(int);
  public void printAll();
  public void update(long, double, int, java.sql.Time);
  public void deleteOne(long);
  public void deleteAtIndex(int);
  public void updateFirst(int);
  public int getError();
}
Compiled from "MyBidList.java"
public class Trading_Engine.MyBidList {
  public Trading_Engine.MyBidList();
  public void add(long, double, int, java.sql.Time);
  public int getLength();
  public Trading_Engine.OneData get(int);
  public void printAll();
  public void update(long, double, int, java.sql.Time);
  public void deleteOne(long);
  public void deleteAtIndex(int);
  public void updateFirst(int);
  public int getError();
}
Compiled from "OneData.java"
public class Trading_Engine.OneData {
  public Trading_Engine.OneData(long, double, int, java.sql.Time);
  public double getPrice();
  public java.sql.Time getTime();
  public void updateValue(long, double, int, java.sql.Time);
  public int getVol();
  public long getID();
  public void updateVol(int);
}
Compiled from "ResultData.java"
public class Trading_Engine.ResultData {
  public Trading_Engine.ResultData(long, long, double, int, java.sql.Time);
  public double getPrice();
  public java.sql.Time getTime();
  public int getVol();
  public long getAskID();
  public long getBuyID();
}
Compiled from "myDatabase.java"
public class Trading_Engine.myDatabase {
  public Trading_Engine.myDatabase();
  public static void insertAllDatabase(java.sql.Connection, java.io.BufferedReader, java.lang.String, java.lang.String, java.util.LinkedList<java.lang.String>);
  public java.util.LinkedList<java.lang.String> insertAll(java.io.File, java.lang.String);
  public void deleteAllTables();
  public static void insertQuery(java.sql.PreparedStatement, java.lang.String[]);
  public java.lang.String getRowCount();
  public Trading_Engine.myTrade getTrade(java.lang.String);
  public void closeDatabase();
  public static java.sql.ResultSet getResultSet(java.lang.String);
  public void initTwoList();
  public void closeTwoList();
  public void insertBidList(long, double, int);
  public void insertAskList(long, double, int);
  public void updateBidList(long, double, int);
  public void updateAskList(long, double, int);
  public void deleteOneFromList(long, java.lang.String);
  public void printTwoList();
}
Compiled from "myTrade.java"
public class Trading_Engine.myTrade {
  public Trading_Engine.myTrade();
  public void addPice(java.lang.Double);
  public int getLength();
  public java.util.LinkedList<java.lang.Double> getAllPrice();
}
Compiled from "ChooseStrategy.java"
public class gui.ChooseStrategy extends javax.swing.JDialog implements java.awt.event.ActionListener {
  public boolean run;
  public gui.ChooseStrategy(javax.swing.JFrame);
  public double getThreshold();
  public int getStockAmount();
  public java.lang.String getStrategy();
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinalOrderbookTable.java"
public class gui.FinalOrderbookTable extends javax.swing.table.AbstractTableModel {
  public gui.FinalOrderbookTable();
  public boolean isCellEditable(int, int);
  public int getColumnCount();
  public int getRowCount();
  public java.lang.String getColumnName(int);
  public java.lang.Object getValueAt(int, int);
  public void setValueAt(java.lang.Object, int, int);
  public void setData(java.util.LinkedList<java.lang.Object[]>);
  public void addElement(java.lang.Object[]);
}
Compiled from "LineGraph.java"
public class gui.LineGraph extends javax.swing.JPanel {
  public gui.LineGraph(java.lang.String);
  public void finishGraph(boolean);
  public static void addToDataset(double, double);
  public org.jfree.data.xy.XYDataset getDataset();
  public static void addToDataset2(double, double);
  public static void addToDataset3(double, double);
  public static void addSeries(org.jfree.data.xy.XYSeries, org.jfree.data.xy.XYSeries, org.jfree.data.xy.XYSeries);
}
Compiled from "Mainmenu.java"
public class gui.Mainmenu extends javax.swing.JFrame {
  public static java.io.File csv;
  public static javax.swing.JTextArea console;
  public javax.swing.JComboBox choosestrat;
  public static Trading_Engine.myDatabase myDB;
  public gui.Mainmenu(Trading_Engine.myDatabase, org.junit.runner.Result);
  static gui.ResultDisplay access$002(gui.Mainmenu, gui.ResultDisplay);
  static gui.ResultDisplay access$000(gui.Mainmenu);
  static {};
}
Compiled from "Mainmenu.java"
class gui.Mainmenu$1 implements java.awt.event.ActionListener {
  final javax.swing.JFrame val$frame;
  final gui.Mainmenu this$0;
  gui.Mainmenu$1(gui.Mainmenu, javax.swing.JFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Mainmenu.java"
class gui.Mainmenu$2 implements java.awt.event.ActionListener {
  final gui.Mainmenu this$0;
  gui.Mainmenu$2(gui.Mainmenu);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Mainmenu.java"
class gui.Mainmenu$3 implements java.awt.event.ActionListener {
  final gui.Mainmenu this$0;
  gui.Mainmenu$3(gui.Mainmenu);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Mainmenu.java"
class gui.Mainmenu$4 extends java.awt.event.WindowAdapter {
  final gui.Mainmenu this$0;
  gui.Mainmenu$4(gui.Mainmenu);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "Mainmenu.java"
class gui.Mainmenu$helpDialog extends javax.swing.JDialog {
  final gui.Mainmenu this$0;
  public gui.Mainmenu$helpDialog(gui.Mainmenu, javax.swing.JFrame);
}
Compiled from "Mainmenu.java"
class gui.Mainmenu$helpDialog$1 implements java.awt.event.ActionListener {
  final gui.Mainmenu val$this$0;
  final gui.Mainmenu$helpDialog this$1;
  gui.Mainmenu$helpDialog$1(gui.Mainmenu$helpDialog, gui.Mainmenu);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ResultDisplay.java"
public class gui.ResultDisplay extends javax.swing.JFrame {
  public static Trading_Engine.myDatabase myDB;
  public static double Threshold;
  public static int stockAmount;
  public static java.lang.String Strategy;
  public javax.swing.JLabel stockName;
  public javax.swing.JLabel stockDate;
  public javax.swing.JLabel stockTime;
  public javax.swing.JLabel LinesRead;
  public javax.swing.JLabel enterLines;
  public javax.swing.JLabel askLines;
  public javax.swing.JLabel bidLines;
  public javax.swing.JLabel tradeLines;
  public javax.swing.JLabel amendLines;
  public javax.swing.JLabel deleteLines;
  public gui.ResultDisplay(java.lang.String, Trading_Engine.myDatabase, java.util.LinkedList<java.lang.String>);
  protected void runReversionStrategy();
  protected void runMomentumStrategy();
  public void insertBidList(Trading_Engine.MyBidList, Trading_Engine.MyAskList, java.util.LinkedList<Trading_Engine.ResultData>, double, int, long, java.sql.Time);
  public void insertAskList(Trading_Engine.MyBidList, Trading_Engine.MyAskList, java.util.LinkedList<Trading_Engine.ResultData>, double, int, long, java.sql.Time);
  static gui.StrategySelected access$002(gui.ResultDisplay, gui.StrategySelected);
  static java.util.LinkedList access$100(gui.ResultDisplay);
  static java.util.LinkedList access$200(gui.ResultDisplay);
  static java.util.LinkedList access$300(gui.ResultDisplay);
  static java.util.LinkedList access$400(gui.ResultDisplay);
  static java.util.LinkedList access$500(gui.ResultDisplay);
  static java.util.LinkedList access$600(gui.ResultDisplay);
  static gui.StrategySelected access$000(gui.ResultDisplay);
}
Compiled from "ResultDisplay.java"
class gui.ResultDisplay$1 implements java.awt.event.ActionListener {
  final gui.ResultDisplay this$0;
  gui.ResultDisplay$1(gui.ResultDisplay);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ResultDisplay.java"
class gui.ResultDisplay$2 implements java.awt.event.ActionListener {
  final javax.swing.JFrame val$display;
  final gui.ResultDisplay this$0;
  gui.ResultDisplay$2(gui.ResultDisplay, javax.swing.JFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StrategySelected.java"
public class gui.StrategySelected extends javax.swing.JFrame {
  public javax.swing.JLabel Strategy;
  public javax.swing.JLabel Threshold;
  public javax.swing.JLabel LinesRead;
  public javax.swing.JLabel MatchedLines;
  public javax.swing.JLabel StrategyMatched;
  public javax.swing.JLabel UpdatedLines;
  public javax.swing.JLabel DeletedLines;
  public javax.swing.JLabel BidList;
  public javax.swing.JLabel AskList;
  public javax.swing.JLabel StrategyBuy;
  public javax.swing.JLabel StrategySell;
  public javax.swing.JLabel StrategyEndResult;
  public gui.StrategySelected(java.util.LinkedList<java.lang.String>, java.util.LinkedList<Trading_Engine.ResultData>, java.util.LinkedList<Trading_Engine.GraphData>, java.util.LinkedList<Trading_Engine.GraphData>, java.util.LinkedList<Trading_Engine.GraphData>, java.util.LinkedList<Trading_Engine.GraphData>);
}
Compiled from "StrategySelected.java"
class gui.StrategySelected$1 implements java.awt.event.ActionListener {
  final gui.StrategySelected this$0;
  gui.StrategySelected$1(gui.StrategySelected);
  public void actionPerformed(java.awt.event.ActionEvent);
}
