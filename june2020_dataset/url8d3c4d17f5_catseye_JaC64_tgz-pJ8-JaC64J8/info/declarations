Compiled from "C64Applet.java"
public class C64Applet extends java.applet.Applet implements java.lang.Runnable,com.dreamfabric.jac64.PatchListener {
  public C64Applet();
  public void init();
  public void toggleFullscreen();
  public void fullscreen(boolean);
  public void start();
  public void stop();
  public void destroy();
  public boolean isStarted();
  public void run();
  public void setColorSet(int);
  public void poke(int, int);
  public int peek(int);
  public void pause();
  public void unpause();
  public void loadPGM(java.lang.String);
  public void insertDisk(java.lang.String);
  public void enterText(java.lang.String);
  public void loadPGM(java.lang.String, java.lang.String);
  public void loadGame(java.lang.String, java.lang.String);
  public void loadGame(int);
  public void setStick(int);
  public void setSoundOn(boolean);
  public void setScanRate(int);
  public void reset();
  public void setEffect(int);
  public void saveFile(java.lang.String, java.lang.String, java.lang.String);
  public boolean readFile(java.lang.String, int);
  public void setSIDEmulation(int);
  public void enableAutoStore(int);
  public void setAutoStore(int, java.lang.String);
  public void protect(int, int);
  public void monitorRead(int);
  public void monitorWrite(int);
  public void addAutoStoreRule(int, java.lang.String);
  public void addAutoStoreStore(int, int, int, java.lang.String);
  static java.lang.String access$002(C64Applet, java.lang.String);
  static java.lang.String access$102(C64Applet, java.lang.String);
  static java.lang.String access$100(C64Applet);
  static java.lang.String access$202(C64Applet, java.lang.String);
  static java.lang.String access$200(C64Applet);
  static int access$302(C64Applet, int);
  static int access$400(C64Applet, java.lang.String, int);
  static int access$502(C64Applet, int);
  static int access$602(C64Applet, int);
  static com.dreamfabric.jac64.C64Screen access$700(C64Applet);
  static void access$800(C64Applet);
  static int access$600(C64Applet);
  static int access$500(C64Applet);
  static void access$900(C64Applet);
  static java.lang.String access$000(C64Applet);
  static java.util.Vector access$1000(C64Applet);
  static int access$300(C64Applet);
  static boolean access$1102(C64Applet, boolean);
  static {};
}
Compiled from "C64Applet.java"
class C64Applet$1 implements java.lang.Runnable {
  final C64Applet this$0;
  C64Applet$1(C64Applet);
  public void run();
}
Compiled from "C64Test.java"
public class C64Test implements java.awt.event.ActionListener,java.lang.Runnable {
  public static final java.awt.RenderingHints AALIAS;
  public C64Test(java.lang.String);
  public void init();
  public void run();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void toggleFullScreen();
  public static void main(java.lang.String[]);
  static java.awt.Image access$000(C64Test);
  static javax.swing.JButton access$100(C64Test);
  static boolean access$200(C64Test);
  static com.dreamfabric.jac64.C64Screen access$300(C64Test);
  static int[] access$400(C64Test);
  static javax.swing.JFrame access$500(C64Test);
  static java.lang.String access$600(C64Test, int, int);
  static javax.swing.JLabel[] access$700(C64Test);
  static javax.swing.JTextArea access$800(C64Test);
  static javax.swing.JTextField access$900(C64Test);
  static com.dreamfabric.c64utils.Assembler access$1000(C64Test);
  static {};
}
Compiled from "C64Test.java"
class C64Test$1 extends javax.swing.JPanel {
  final C64Test this$0;
  C64Test$1(C64Test);
  public void paint(java.awt.Graphics);
}
Compiled from "C64Test.java"
class C64Test$2 extends java.awt.event.MouseAdapter {
  final C64Test this$0;
  C64Test$2(C64Test);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "C64Test.java"
class C64Test$3 extends java.awt.event.WindowAdapter {
  final C64Test this$0;
  C64Test$3(C64Test);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "C64Test.java"
class C64Test$4 implements java.lang.Runnable {
  final C64Test this$0;
  C64Test$4(C64Test);
  public void run();
}
Compiled from "C64Test.java"
class C64Test$5 implements java.awt.event.ActionListener {
  final C64Test this$0;
  C64Test$5(C64Test);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JaC64.java"
public class JaC64 implements java.awt.event.ActionListener,java.awt.KeyEventDispatcher {
  public JaC64();
  public boolean dispatchKeyEvent(java.awt.event.KeyEvent);
  public void actionPerformed(java.awt.event.ActionEvent);
  public void toggleFullScreen();
  public static void main(java.lang.String[]);
  static com.dreamfabric.jac64.DirEntry[] access$000(JaC64);
  static javax.swing.JTable access$100(JaC64);
  static com.dreamfabric.jac64.C64Reader access$200(JaC64);
  static javax.swing.JDialog access$300(JaC64);
  static {};
}
Compiled from "JaC64.java"
class JaC64$1 extends javax.swing.table.AbstractTableModel {
  public final java.lang.String[] NAMES;
  final JaC64 this$0;
  JaC64$1(JaC64);
  public int getColumnCount();
  public int getRowCount();
  public java.lang.Object getValueAt(int, int);
  public java.lang.String getColumnName(int);
}
Compiled from "JaC64.java"
class JaC64$2 implements java.awt.event.ActionListener {
  final JaC64 this$0;
  JaC64$2(JaC64);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JaC64.java"
class JaC64$3 implements java.awt.event.ActionListener {
  final JaC64 this$0;
  JaC64$3(JaC64);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Assembler.java"
public class com.dreamfabric.c64utils.Assembler {
  public static final int DEBUG_LEVEL;
  public static final int CODE;
  public static final int COMMENT;
  public static final int REF_WORD;
  public static final int REF_BYTE;
  public static final int REF_BYTE_LO;
  public static final int REF_BYTE_HI;
  public static final int REF_RELATIVE;
  public static final int[] REF_SIZE;
  protected java.lang.String workingDir;
  public com.dreamfabric.c64utils.Assembler();
  public void setMemory(int[]);
  public void setWorkingDir(java.lang.String);
  public int[] assemble(java.lang.String, int);
  public java.io.InputStream openBinary(java.lang.String);
  public static int parseInt(java.lang.String);
  public int getLabelAddress(java.lang.String);
  public void setByteValue(java.lang.String, int);
  public void setWordValue(java.lang.String, int);
  static {};
}
Compiled from "AutoStore.java"
public class com.dreamfabric.c64utils.AutoStore {
  public static final int CMP_EQUAL;
  public static final int CMP_NOT_EQUAL;
  public static final int CMP_GREATER;
  public static final int CMP_LESS;
  public static final int R_ADDRESS;
  public static final int R_CMP;
  public static final int R_VAL;
  public com.dreamfabric.c64utils.AutoStore(java.lang.String);
  public java.lang.String checkRules(int[]);
  public void addRule(int, int, int);
  public void addRule(java.lang.String);
  public void addStore(int, int, java.lang.String);
}
Compiled from "C64Script.java"
public class com.dreamfabric.c64utils.C64Script {
  int pos;
  public com.dreamfabric.c64utils.C64Script();
  public void test();
  public void test2(java.lang.String);
  public void enterText(java.lang.String);
  public void interpretCall(java.lang.String, java.lang.Object);
  public static void main(java.lang.String[]);
}
Compiled from "Debugger.java"
public class com.dreamfabric.c64utils.Debugger implements com.dreamfabric.jac64.IMonitor,com.dreamfabric.jac64.M6510Ops {
  java.lang.String prefix;
  public long lastCycles;
  public com.dreamfabric.c64utils.Debugger();
  public void init(com.dreamfabric.jac64.MOS6510Core);
  public boolean isEnabled();
  public void setPrefix(java.lang.String);
  public void info(java.lang.Object);
  public void warning(java.lang.Object);
  public void error(java.lang.Object);
  public void disAssemble(int[], int, int, int, int, byte, int, int);
  public void getFunction(int[], int, java.lang.StringBuffer);
  public void setEnabled(boolean);
  public void setLevel(int);
  public int getLevel();
}
Compiled from "IPPacket.java"
public class com.dreamfabric.c64utils.IPPacket {
  byte[] data;
  byte[] header;
  public com.dreamfabric.c64utils.IPPacket();
  public com.dreamfabric.c64utils.IPPacket(byte[], byte[]);
  public void readIPPacket(java.io.InputStream) throws java.io.IOException;
  public int getVersion();
  public int getHeaderLengthBytes();
  public int getServiceType();
  public int getTotalLength();
  public int getID();
  public int getFlags();
  public int getFragment0();
  public int getTTL();
  public int getProtocol();
  public int getChecksum();
  public long getSourceIP();
  public long getDestinationIP();
  int get16(int);
  long get32(int);
  int getData8(int);
  int getData16(int);
  long getData32(int);
  public static java.lang.String getIPStr(long);
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "TCPPacket.java"
public class com.dreamfabric.c64utils.TCPPacket extends com.dreamfabric.c64utils.IPPacket {
  public com.dreamfabric.c64utils.TCPPacket();
  public com.dreamfabric.c64utils.TCPPacket(com.dreamfabric.c64utils.IPPacket);
  public int getSourcePort();
  public int getDestinationPort();
  public long getSequenceNumber();
  public long getAckNumber();
  public int getTCPHeaderLengthBytes();
  public int getFlags();
  public int getWindow();
  public int getChecksum();
  public int getUrgentPointer();
}
Compiled from "DCheckBox.java"
public class com.dreamfabric.gui.DCheckBox extends javax.swing.JComponent {
  public com.dreamfabric.gui.DCheckBox();
  public void setSelected(boolean);
  public boolean isSelected();
  public void paint(java.awt.Graphics);
  void drawCheckBox(java.awt.Graphics2D);
  public void addChangeListener(javax.swing.event.ChangeListener);
  public void removeChangeListener(javax.swing.event.ChangeListener);
  protected void fireChangeEvent();
  static boolean access$002(com.dreamfabric.gui.DCheckBox, boolean);
  static boolean access$000(com.dreamfabric.gui.DCheckBox);
  static {};
}
Compiled from "DCheckBox.java"
class com.dreamfabric.gui.DCheckBox$1 implements java.awt.event.FocusListener {
  final com.dreamfabric.gui.DCheckBox this$0;
  com.dreamfabric.gui.DCheckBox$1(com.dreamfabric.gui.DCheckBox);
  public void focusGained(java.awt.event.FocusEvent);
  public void focusLost(java.awt.event.FocusEvent);
}
Compiled from "DCheckBox.java"
class com.dreamfabric.gui.DCheckBox$2 implements java.awt.event.KeyListener {
  final com.dreamfabric.gui.DCheckBox this$0;
  com.dreamfabric.gui.DCheckBox$2(com.dreamfabric.gui.DCheckBox);
  public void keyTyped(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyPressed(java.awt.event.KeyEvent);
}
Compiled from "DCheckBox.java"
class com.dreamfabric.gui.DCheckBox$3 extends java.awt.event.MouseAdapter {
  final com.dreamfabric.gui.DCheckBox this$0;
  com.dreamfabric.gui.DCheckBox$3(com.dreamfabric.gui.DCheckBox);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "DKnob2.java"
public class com.dreamfabric.gui.DKnob2 extends javax.swing.JComponent {
  public static final java.awt.Color DARK;
  public static final java.awt.Color DARK_T;
  public static final java.awt.Color DARK_L;
  public static final java.awt.Color LIGHT_D;
  public static final java.awt.Color LIGHT;
  public static final java.awt.Color LIGHT_T;
  public static final int SIMPLE;
  public static final int ROUND;
  public com.dreamfabric.gui.DKnob2(java.lang.String);
  public com.dreamfabric.gui.DKnob2(java.lang.String, java.lang.String);
  public void setDragType(int);
  public int getDragType();
  public float getValue();
  public int getIntValue();
  public void setIntValue(int);
  public void setValue(float);
  public void addChangeListener(javax.swing.event.ChangeListener);
  public void removeChangeListener(javax.swing.event.ChangeListener);
  public java.awt.Dimension getMinimumSize();
  protected void fireChangeEvent();
  public void paint(java.awt.Graphics);
  public void setInterval(int, int);
  public void setInterval(int, int, int);
  public void setDivisor(int);
  public static void main(java.lang.String[]);
  static int access$002(com.dreamfabric.gui.DKnob2, int);
  static float access$102(com.dreamfabric.gui.DKnob2, float);
  static float access$200(com.dreamfabric.gui.DKnob2);
  static int access$300(com.dreamfabric.gui.DKnob2);
  static double access$402(com.dreamfabric.gui.DKnob2, double);
  static java.awt.geom.Arc2D access$500(com.dreamfabric.gui.DKnob2);
  static float access$600(com.dreamfabric.gui.DKnob2);
  static void access$700(com.dreamfabric.gui.DKnob2);
  static void access$800(com.dreamfabric.gui.DKnob2);
  static int access$900(com.dreamfabric.gui.DKnob2);
  static float access$1000(com.dreamfabric.gui.DKnob2);
  static int access$000(com.dreamfabric.gui.DKnob2);
  static float access$100(com.dreamfabric.gui.DKnob2);
  static double access$400(com.dreamfabric.gui.DKnob2);
  static {};
}
Compiled from "DKnob2.java"
class com.dreamfabric.gui.DKnob2$1 extends java.awt.event.MouseAdapter {
  final com.dreamfabric.gui.DKnob2 this$0;
  com.dreamfabric.gui.DKnob2$1(com.dreamfabric.gui.DKnob2);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "DKnob2.java"
class com.dreamfabric.gui.DKnob2$2 extends java.awt.event.MouseMotionAdapter {
  final com.dreamfabric.gui.DKnob2 this$0;
  com.dreamfabric.gui.DKnob2$2(com.dreamfabric.gui.DKnob2);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
}
Compiled from "DKnob2.java"
class com.dreamfabric.gui.DKnob2$3 implements java.awt.event.KeyListener {
  final com.dreamfabric.gui.DKnob2 this$0;
  com.dreamfabric.gui.DKnob2$3(com.dreamfabric.gui.DKnob2);
  public void keyTyped(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyPressed(java.awt.event.KeyEvent);
}
Compiled from "DKnob2.java"
class com.dreamfabric.gui.DKnob2$4 implements java.awt.event.FocusListener {
  final com.dreamfabric.gui.DKnob2 this$0;
  com.dreamfabric.gui.DKnob2$4(com.dreamfabric.gui.DKnob2);
  public void focusGained(java.awt.event.FocusEvent);
  public void focusLost(java.awt.event.FocusEvent);
}
Compiled from "AudioDriver.java"
public abstract class com.dreamfabric.jac64.AudioDriver {
  public com.dreamfabric.jac64.AudioDriver();
  public abstract void init(int, int);
  public abstract void write(byte[]);
  public abstract long getMicros();
  public abstract boolean hasSound();
  public abstract int available();
  public abstract int getMasterVolume();
  public abstract void setMasterVolume(int);
  public abstract void shutdown();
  public abstract void setSoundOn(boolean);
  public abstract void setFullSpeed(boolean);
  public abstract boolean fullSpeed();
}
Compiled from "AudioDriverSE.java"
public class com.dreamfabric.jac64.AudioDriverSE extends com.dreamfabric.jac64.AudioDriver {
  public com.dreamfabric.jac64.AudioDriverSE();
  public int available();
  public int getMasterVolume();
  public long getMicros();
  public boolean hasSound();
  public void init(int, int);
  public void setMasterVolume(int);
  public void shutdown();
  public void write(byte[]);
  public void setSoundOn(boolean);
  public void setFullSpeed(boolean);
  public boolean fullSpeed();
}
Compiled from "C1541.java"
public class com.dreamfabric.jac64.C1541 extends java.util.Observable {
  public static final int IO_OFFSET;
  public static final boolean DEBUG;
  public static final int SERIAL_ATN;
  public static final int SERIAL_CLK_OUT;
  public static final int SERIAL_DATA_OUT;
  public static final int SERIAL_CLK_IN;
  public static final int SERIAL_DATA_IN;
  public static final int TALK;
  public static final int LISTEN;
  public static final int DATA;
  public static final int OPEN;
  public static final int CLOSE;
  int rbState;
  int rbByte;
  int rbCtr;
  int eoiCtr;
  int wByte;
  int wBitPos;
  int wBytePos;
  int wState;
  long wCyclesWait;
  byte[] bytesToWrite;
  boolean wEOI;
  public com.dreamfabric.jac64.C1541(int[]);
  public void reset();
  public com.dreamfabric.jac64.C64Reader getReader();
  public void tick(long);
  public void tick(long, boolean);
  public void dataLo();
  public void dataHi();
  public void handleDisk(int, long);
  public static void printSerial(int);
}
Compiled from "C1541Chips.java"
public class com.dreamfabric.jac64.C1541Chips extends com.dreamfabric.jac64.ExtChip implements com.dreamfabric.jac64.DiskListener {
  public static final int GCR_SECTOR_SIZE;
  public static final boolean DEBUG;
  public static final boolean DEBUG_IRQ;
  public static final boolean DEBUG_WRITE;
  public static final boolean DEBUG_GCR;
  public static final boolean DEBUG_IEC;
  public static final java.lang.Object LED_MOTOR;
  public static final java.lang.Object HEAD_MOVED;
  public static final java.lang.Object SECTOR_UPDATE;
  public static final int[] GCR;
  public static final int[] GCR_REV;
  int via2PerControl;
  public boolean ledOn;
  public boolean motorOn;
  public int currentTrack;
  public int currentSector;
  public int headOutBeyond;
  boolean byteReadyOverflow;
  boolean diskModeWrite;
  com.dreamfabric.jac64.C64Screen cia2;
  int iecLines;
  long nextAutoforward;
  long lastCycles;
  long nextCheck;
  boolean lastSync;
  public com.dreamfabric.jac64.C1541Chips(com.dreamfabric.jac64.C1541Emu);
  public void initIEC2(com.dreamfabric.jac64.C64Screen);
  public void setReader(com.dreamfabric.jac64.C64Reader);
  public final int performRead(int, long);
  public final void performWrite(int, int, long);
  public void updateIECLines();
  void autoForward(long);
  public final void clock(long);
  public void diskChanged();
  public void atnChanged(boolean);
  public void reset();
  public static int makeGCR(int[], int, int, int, int, int);
  public static long convertFromGCR(long, long, long, long, long);
  public static void main(java.lang.String[]);
  public void stop();
  public void log(java.lang.String);
  static {};
}
Compiled from "C1541Emu.java"
public class com.dreamfabric.jac64.C1541Emu extends com.dreamfabric.jac64.MOS6510Core {
  public static final boolean DEBUG;
  public static final boolean IODEBUG;
  public static final int C1541ROM;
  public static final int RESET_VECTOR;
  public com.dreamfabric.jac64.C1541Chips chips;
  boolean byteReady;
  public com.dreamfabric.jac64.C1541Emu(com.dreamfabric.jac64.IMonitor, java.lang.String);
  public java.lang.String getName();
  public void setReader(com.dreamfabric.jac64.C64Reader);
  protected final int fetchByte(int);
  protected final void writeByte(int, int);
  public void reset();
  void triggerByteReady();
  public void tick(long);
  public void patchROM(com.dreamfabric.jac64.PatchListener);
  public void loadDebug(java.lang.String);
  protected void readROM(java.lang.String, int, int);
  protected void installROMS();
}
Compiled from "C64Canvas.java"
public class com.dreamfabric.jac64.C64Canvas extends javax.swing.JPanel implements java.awt.event.KeyListener,java.awt.event.FocusListener {
  boolean integerScale;
  com.dreamfabric.jac64.C64Screen scr;
  com.dreamfabric.jac64.Keyboard keyboard;
  boolean autoScale;
  int w;
  int h;
  public com.dreamfabric.jac64.C64Canvas(com.dreamfabric.jac64.C64Screen, boolean, com.dreamfabric.jac64.Keyboard);
  public void setAutoscale(boolean);
  public void setIntegerScaling(boolean);
  public void update(java.awt.Graphics);
  public void paint(java.awt.Graphics);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyTyped(java.awt.event.KeyEvent);
  public void focusGained(java.awt.event.FocusEvent);
  public void focusLost(java.awt.event.FocusEvent);
  public boolean isFocusable();
}
Compiled from "C64Reader.java"
public class com.dreamfabric.jac64.C64Reader {
  public static final int NONE;
  public static final int TAPE;
  public static final int DISK;
  public com.dreamfabric.jac64.C64Reader();
  public void setCPU(com.dreamfabric.jac64.CPU);
  public void setDiskListener(com.dreamfabric.jac64.DiskListener);
  public int getLoadedType();
  public java.util.ArrayList getDirNames();
  public com.dreamfabric.jac64.DirEntry getDirEntry(java.lang.String);
  public boolean readDisk(java.io.InputStream);
  public byte[] getSector(int);
  public static int getSectorCount(int);
  public byte[] getSector(int, int);
  public void writeDisk(java.io.OutputStream) throws java.io.IOException;
  public void setSector(int, int, byte[]);
  public java.lang.String readFile(java.lang.String);
  public java.lang.String readFile(java.lang.String, int);
  public java.lang.String readFile(java.lang.String, int, java.io.OutputStream);
  public java.lang.String readDiskFile(com.dreamfabric.jac64.DirEntry, java.lang.String, int, java.io.OutputStream);
  public java.lang.String saveFile();
  public boolean readDiskFromFile(java.lang.String);
  public boolean readPGM(java.net.URL, int);
  public boolean readPGM(java.lang.String, int);
  public boolean readDiskFromURL(java.net.URL);
  public boolean readTapeFromFile(java.lang.String);
  public boolean readTapeFromURL(java.net.URL);
  public boolean readSIDFromFile(java.lang.String);
  public static void main(java.lang.String[]);
}
Compiled from "C64Screen.java"
public class com.dreamfabric.jac64.C64Screen extends com.dreamfabric.jac64.ExtChip implements com.dreamfabric.jac64.Observer,java.awt.event.MouseListener,java.awt.event.MouseMotionListener {
  public static final java.lang.String version;
  public static final int SERIAL_ATN;
  public static final int SERIAL_CLK_OUT;
  public static final int SERIAL_DATA_OUT;
  public static final int SERIAL_CLK_IN;
  public static final int SERIAL_DATA_IN;
  public static final int RESID_6581;
  public static final int RESID_8580;
  public static final int JACSID;
  public static final boolean IRQDEBUG;
  public static final boolean SPRITEDEBUG;
  public static final boolean IODEBUG;
  public static final boolean VIC_MEM_DEBUG;
  public static final boolean BAD_LINE_DEBUG;
  public static final boolean STATE_DEBUG;
  public static final boolean DEBUG_IEC;
  public static final boolean DEBUG_CYCLES;
  public static final int IO_UPDATE;
  public static final int CYCLES_PER_LINE;
  public static final int IO_OFFSET;
  public static final boolean SOUND_AVAIABLE;
  public static final java.awt.Color TRANSPARENT_BLACK;
  public static final java.awt.Color DARKER_0;
  public static final java.awt.Color LIGHTER_0;
  public static final java.awt.Color DARKER_N;
  public static final java.awt.Color LIGHTER_N;
  public static final java.awt.Color LED_ON;
  public static final java.awt.Color LED_OFF;
  public static final java.awt.Color LED_BORDER;
  public static final int LABEL_COUNT;
  com.dreamfabric.jac64.ExtChip sidChip;
  com.dreamfabric.jac64.CIA[] cia;
  com.dreamfabric.jac64.C1541Chips c1541Chips;
  com.dreamfabric.jac64.TFE_CS8900 tfe;
  int iecLines;
  int cia2PRA;
  int cia2DDRA;
  java.applet.AudioClip trackSound;
  java.applet.AudioClip motorSound;
  boolean emulateDisk;
  public int vicBank;
  public int charSet;
  public int videoMatrix;
  public int videoMode;
  int irqMask;
  int irqFlags;
  int control1;
  int control2;
  int sprXMSB;
  int sprEN;
  int sprYEX;
  int sprXEX;
  int sprPri;
  int sprMul;
  int sprCol;
  int sprBgCol;
  int sprMC0;
  int sprMC1;
  int vicMem;
  int vicMemDDRA;
  int vicMemDATA;
  public int vbeam;
  public int raster;
  int bCol;
  int[] bgCol;
  int vc;
  int vcBase;
  int rc;
  int vmli;
  int vPos;
  int mpos;
  int displayWidth;
  int displayHeight;
  int offsetX;
  int offsetY;
  boolean gfxVisible;
  boolean paintBorder;
  boolean paintSideBorder;
  int borderColor;
  int bgColor;
  int[] multiColor;
  int[] collissionMask;
  com.dreamfabric.jac64.C64Screen$Sprite[] sprites;
  public java.awt.Image screen;
  int[] mem;
  int rnd;
  java.lang.String message;
  java.lang.String tmsg;
  int frame;
  boolean displayEnabled;
  boolean irqTriggered;
  long lastLine;
  long firstLine;
  long lastIRQ;
  int potx;
  int poty;
  boolean button1;
  boolean button2;
  public static final int IMG_TOTWIDTH;
  public static final int IMG_TOTHEIGHT;
  public java.awt.Image crtImage;
  long repaint;
  public com.dreamfabric.jac64.C64Screen(com.dreamfabric.jac64.IMonitor, boolean);
  public void setAutoscale(boolean);
  public void setColorSet(int);
  public com.dreamfabric.jac64.CIA[] getCIAs();
  public void setSID(int);
  public void setScanRate(double);
  public int getScanRate();
  public int getActualScanRate();
  public void setIntegerScaling(boolean);
  public javax.swing.JPanel getScreen();
  public com.dreamfabric.jac64.AudioDriver getAudioDriver();
  public boolean ready();
  public void setDisplayFactor(double);
  public void setDisplayOffset(int, int);
  public void dumpGfxStat();
  public void setSoundOn(boolean);
  public void setStick(boolean);
  public void registerHotKey(int, int, java.lang.String, java.lang.Object);
  public void setKeyboardEmulation(boolean);
  public void init(com.dreamfabric.jac64.CPU);
  public void update(java.lang.Object, java.lang.Object);
  void restoreKey(boolean);
  public int performRead(int, long);
  public void performWrite(int, int, long);
  public final void clock(long);
  public void stop();
  public void reset();
  public void paint(java.awt.Graphics);
  public void updateDisk(java.lang.Object, java.lang.Object);
  public void motorSound(boolean);
  public void setSounds(java.applet.AudioClip, java.applet.AudioClip);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  static int[] access$100(com.dreamfabric.jac64.C64Screen);
  static int access$200(com.dreamfabric.jac64.C64Screen);
  static {};
}
Compiled from "C64Screen.java"
class com.dreamfabric.jac64.C64Screen$1 {
}
Compiled from "C64Screen.java"
class com.dreamfabric.jac64.C64Screen$Sprite {
  boolean painting;
  boolean dma;
  int nextByte;
  int pointer;
  int x;
  int y;
  int spriteNo;
  int spriteReg;
  boolean enabled;
  boolean expFlipFlop;
  boolean multicolor;
  boolean expandX;
  boolean expandY;
  boolean priority;
  boolean lineFinished;
  int pixelsLeft;
  int currentPixel;
  int col;
  int[] color;
  final com.dreamfabric.jac64.C64Screen this$0;
  int getPixel();
  void reset();
  void readSpriteData();
  com.dreamfabric.jac64.C64Screen$Sprite(com.dreamfabric.jac64.C64Screen, com.dreamfabric.jac64.C64Screen$1);
}
Compiled from "CIA.java"
public class com.dreamfabric.jac64.CIA {
  public static final boolean TIMER_DEBUG;
  public static final boolean WRITE_DEBUG;
  public static final int PRA;
  public static final int PRB;
  public static final int DDRA;
  public static final int DDRB;
  public static final int TIMALO;
  public static final int TIMAHI;
  public static final int TIMBLO;
  public static final int TIMBHI;
  public static final int TODTEN;
  public static final int TODSEC;
  public static final int TODMIN;
  public static final int TODHRS;
  public static final int SDR;
  public static final int ICR;
  public static final int CRA;
  public static final int CRB;
  com.dreamfabric.jac64.CIA$CIATimer timerA;
  com.dreamfabric.jac64.CIA$CIATimer timerB;
  int pra;
  int prb;
  int ddra;
  int ddrb;
  int tod10sec;
  int todsec;
  int todmin;
  int todhour;
  int sdr;
  int ciaicrRead;
  int ciaie;
  public static final int TIMER_B_DIV_MASK;
  public static final int TIMER_B_DIV_VAL;
  public long nextCIAUpdate;
  public int serialFake;
  public com.dreamfabric.jac64.TimeEvent todEvent;
  public com.dreamfabric.jac64.CIA(com.dreamfabric.jac64.MOS6510Core, int, com.dreamfabric.jac64.ExtChip);
  public void reset();
  public java.lang.String ciaID();
  public int performRead(int, long);
  public void performWrite(int, int, long);
  public void printStatus();
  static com.dreamfabric.jac64.MOS6510Core access$000(com.dreamfabric.jac64.CIA);
  static void access$300(com.dreamfabric.jac64.CIA);
}
Compiled from "CIA.java"
class com.dreamfabric.jac64.CIA$1 extends com.dreamfabric.jac64.TimeEvent {
  final com.dreamfabric.jac64.CIA this$0;
  com.dreamfabric.jac64.CIA$1(com.dreamfabric.jac64.CIA, long);
  public void execute(long);
}
Compiled from "CIA.java"
class com.dreamfabric.jac64.CIA$CIATimer {
  com.dreamfabric.jac64.CIA$CIATimer otherTimer;
  int state;
  int latch;
  int timer;
  long nextUpdate;
  long nextZero;
  long lastLatch;
  boolean interruptNext;
  boolean underflow;
  boolean flipflop;
  boolean countCycles;
  boolean countUnderflow;
  com.dreamfabric.jac64.TimeEvent updateEvent;
  int writeCR;
  int cr;
  java.lang.String id;
  int iflag;
  boolean updateOther;
  final com.dreamfabric.jac64.CIA this$0;
  com.dreamfabric.jac64.CIA$CIATimer(com.dreamfabric.jac64.CIA, java.lang.String, int, boolean, com.dreamfabric.jac64.CIA$CIATimer);
  void writeCR(long, int);
  public void doUpdate(long);
  public void update(long);
  void delayedWrite(long);
  static void access$100(com.dreamfabric.jac64.CIA$CIATimer);
  static int access$200(com.dreamfabric.jac64.CIA$CIATimer, long);
}
Compiled from "CIA.java"
class com.dreamfabric.jac64.CIA$CIATimer$1 extends com.dreamfabric.jac64.TimeEvent {
  final com.dreamfabric.jac64.CIA$CIATimer this$1;
  com.dreamfabric.jac64.CIA$CIATimer$1(com.dreamfabric.jac64.CIA$CIATimer, long);
  public void execute(long);
}
Compiled from "CPU.java"
public class com.dreamfabric.jac64.CPU extends com.dreamfabric.jac64.MOS6510Core {
  public static final boolean DEBUG_EVENT;
  public static final int IO_OFFSET;
  public static final int BASIC_ROM2;
  public static final int KERNAL_ROM2;
  public static final int CHAR_ROM2;
  public static final boolean EMULATE_1541;
  public static final int CH_PROTECT;
  public static final int CH_MONITOR_WRITE;
  public static final int CH_MONITOR_READ;
  public boolean basicROM;
  public boolean kernalROM;
  public boolean charROM;
  public boolean ioON;
  public boolean running;
  public boolean pause;
  public static final boolean DEBUG;
  public com.dreamfabric.jac64.CPU(com.dreamfabric.jac64.IMonitor, java.lang.String, com.dreamfabric.jac64.Loader);
  public com.dreamfabric.jac64.C1541Emu getDrive();
  protected final int fetchByte(int);
  protected final void writeByte(int, int);
  public void poke(int, int);
  public void patchROM(com.dreamfabric.jac64.PatchListener);
  public void runBasic();
  public void enterText(java.lang.String);
  protected void installROMS();
  public void run(int);
  public void unknownInstruction(int, int);
  public void start();
  public synchronized void setPause(boolean);
  public synchronized void stop();
  public void reset();
  public void setPC(int);
  public java.lang.String getName();
  public void loop();
  public void setAutoStore(int, com.dreamfabric.c64utils.AutoStore);
  public com.dreamfabric.c64utils.AutoStore getAutoStore(int);
  public void setCheatEnabled(int);
  public void protect(int, int);
  public void monitorRead(int);
  public void monitorWrite(int);
  public void cheatLoop();
}
Compiled from "DefaultIMon.java"
public class com.dreamfabric.jac64.DefaultIMon implements com.dreamfabric.jac64.IMonitor {
  int level;
  java.lang.String prefix;
  public com.dreamfabric.jac64.DefaultIMon();
  public void init(com.dreamfabric.jac64.MOS6510Core);
  public void setEnabled(boolean);
  public boolean isEnabled();
  public void info(java.lang.Object);
  public void setLevel(int);
  public int getLevel();
  public void warning(java.lang.Object);
  public void error(java.lang.Object);
  public void disAssemble(int[], int, int, int, int, byte, int, int);
}
Compiled from "DirEntry.java"
public class com.dreamfabric.jac64.DirEntry {
  public java.lang.String name;
  public int trk;
  public int sec;
  public int size;
  public int type;
  public com.dreamfabric.jac64.DirEntry(java.lang.String, int, int, int, int);
  public java.lang.String getTypeString();
  public java.lang.String toString();
}
Compiled from "DiskChannel.java"
public class com.dreamfabric.jac64.DiskChannel {
  java.lang.String filename;
  byte[] data;
  boolean open;
  int pos;
  int chID;
  public com.dreamfabric.jac64.DiskChannel(int);
  public void setFilename(java.lang.String);
  public void setData(byte[]);
  public byte[] getData();
  public int readChar();
  public void open();
  public void close();
}
Compiled from "DiskListener.java"
public interface com.dreamfabric.jac64.DiskListener {
  public abstract void diskChanged();
  public abstract void atnChanged(boolean);
}
Compiled from "EventQueue.java"
public class com.dreamfabric.jac64.EventQueue {
  public long nextTime;
  public com.dreamfabric.jac64.EventQueue();
  public void addEvent(com.dreamfabric.jac64.TimeEvent, long);
  public void addEvent(com.dreamfabric.jac64.TimeEvent);
  public boolean removeEvent(com.dreamfabric.jac64.TimeEvent);
  public com.dreamfabric.jac64.TimeEvent popFirst();
  public void print();
  public void empty();
}
Compiled from "ExtChip.java"
public abstract class com.dreamfabric.jac64.ExtChip {
  public static final boolean DEBUG_INTERRUPS;
  public static final int VIC_IRQ;
  public static final int CIA_TIMER_IRQ;
  public static final int KEYBOARD_NMI;
  public static final int CIA_TIMER_NMI;
  com.dreamfabric.jac64.MOS6510Core cpu;
  public com.dreamfabric.jac64.ExtChip();
  public void init(com.dreamfabric.jac64.MOS6510Core);
  public void deleteInterruptManagers();
  public int getNMIFlags();
  public int getIRQFlags();
  public boolean setIRQ(int);
  public void clearIRQ(int);
  public boolean setNMI(int);
  public void clearNMI(int);
  public void resetInterrupts();
  public abstract void reset();
  public abstract void stop();
  public abstract int performRead(int, long);
  public abstract void performWrite(int, int, long);
  public abstract void clock(long);
  public void setObserver(com.dreamfabric.jac64.Observer);
  public void update(java.lang.Object, java.lang.Object);
  static {};
}
Compiled from "ExtChip.java"
class com.dreamfabric.jac64.ExtChip$InterruptManager {
  int nmiFlags;
  int irqFlags;
  int oldIrqFlags;
  int oldNmiFlags;
  com.dreamfabric.jac64.MOS6510Core cpu;
  com.dreamfabric.jac64.ExtChip$InterruptManager(com.dreamfabric.jac64.MOS6510Core);
  public boolean setIRQ(int);
  public void clearIRQ(int);
  public boolean setNMI(int);
  public void clearNMI(int);
  static void access$000(com.dreamfabric.jac64.ExtChip$InterruptManager);
}
Compiled from "Hex.java"
public class com.dreamfabric.jac64.Hex {
  public com.dreamfabric.jac64.Hex();
  public static final java.lang.String hex2(int);
}
Compiled from "IMonitor.java"
public interface com.dreamfabric.jac64.IMonitor {
  public abstract void init(com.dreamfabric.jac64.MOS6510Core);
  public abstract void setEnabled(boolean);
  public abstract boolean isEnabled();
  public abstract void info(java.lang.Object);
  public abstract void warning(java.lang.Object);
  public abstract void error(java.lang.Object);
  public abstract int getLevel();
  public abstract void setLevel(int);
  public abstract void disAssemble(int[], int, int, int, int, byte, int, int);
}
Compiled from "Keyboard.java"
public class com.dreamfabric.jac64.Keyboard {
  public static final int IO_OFFSET;
  public static final int AUTO_SHIFT;
  public static final int AUTO_CTRL;
  public static final int AUTO_COMMODORE;
  public static final int MIN_AUTO;
  public static final int STICK_UPDOWN;
  public static final int STICK_LEFTRIGHT;
  public static final int STICK_UP;
  public static final int STICK_DOWN;
  public static final int STICK_LEFT;
  public static final int STICK_RIGHT;
  public static final int STICK_FIRE;
  public static final char[][] KEYMAPS;
  boolean extendedKeyboardEmulation;
  boolean stickExits;
  int joystick1;
  int bval;
  boolean lastUp;
  boolean lastLeft;
  int stick;
  int[] keyrow;
  int[] keycol;
  int[][] keytable;
  int keyShift;
  int[][] keytableDef;
  public static final int USER_UP;
  public static final int USER_DOWN;
  public static final int USER_LEFT;
  public static final int USER_RIGHT;
  public static final int USER_FIRE;
  public com.dreamfabric.jac64.Keyboard(com.dreamfabric.jac64.C64Screen, com.dreamfabric.jac64.CIA, int[]);
  public void registerHotKey(int, int, java.lang.String, java.lang.Object);
  public void setStick(boolean);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  int readDC00(int);
  void setButtonval(int);
  int readDC01(int);
  public void reset();
  static {};
}
Compiled from "Loader.java"
public abstract class com.dreamfabric.jac64.Loader {
  public com.dreamfabric.jac64.Loader();
  public abstract java.io.InputStream getResourceStream(java.lang.String);
  public java.lang.String getResourceString(java.lang.String);
}
Compiled from "M6510Ops.java"
public interface com.dreamfabric.jac64.M6510Ops {
  public static final int BRK;
  public static final int ORA_INDX;
  public static final int ORA_Z;
  public static final int ASL_Z;
  public static final int PHP;
  public static final int ORA_I;
  public static final int ASL_ACC;
  public static final int ORA;
  public static final int ASL;
  public static final int BPL;
  public static final int ORA_INDY;
  public static final int ORA_ZX;
  public static final int ASL_ZX;
  public static final int CLC;
  public static final int ORA_Y;
  public static final int ORA_X;
  public static final int ASL_X;
  public static final int JSR;
  public static final int AND_INDX;
  public static final int BIT_Z;
  public static final int AND_Z;
  public static final int ROL_Z;
  public static final int PLP;
  public static final int AND_I;
  public static final int ROL_ACC;
  public static final int BIT;
  public static final int AND;
  public static final int ROL;
  public static final int BMI;
  public static final int AND_INDY;
  public static final int AND_ZX;
  public static final int ROL_ZX;
  public static final int SEC;
  public static final int AND_Y;
  public static final int AND_X;
  public static final int ROL_X;
  public static final int RTI;
  public static final int EOR_INDX;
  public static final int EOR_Z;
  public static final int LSR_Z;
  public static final int PHA;
  public static final int EOR_I;
  public static final int LSR_ACC;
  public static final int JMP;
  public static final int EOR;
  public static final int LSR;
  public static final int BVC;
  public static final int EOR_INDY;
  public static final int EOR_ZX;
  public static final int LSR_ZX;
  public static final int CLI;
  public static final int EOR_Y;
  public static final int EOR_X;
  public static final int LSR_X;
  public static final int RTS;
  public static final int ADC_INDX;
  public static final int ADC_Z;
  public static final int ROR_Z;
  public static final int PLA;
  public static final int ADC_I;
  public static final int ROR_ACC;
  public static final int JMP_IND;
  public static final int ADC;
  public static final int ROR;
  public static final int BVS;
  public static final int ADC_INDY;
  public static final int ADC_ZX;
  public static final int ROR_ZX;
  public static final int SEI;
  public static final int ADC_Y;
  public static final int ADC_X;
  public static final int ROR_X;
  public static final int STA_INDX;
  public static final int STY_Z;
  public static final int STA_Z;
  public static final int STX_Z;
  public static final int DEY;
  public static final int TXA;
  public static final int STY;
  public static final int STA;
  public static final int STX;
  public static final int BCC;
  public static final int STA_INDY;
  public static final int STY_ZX;
  public static final int STA_ZX;
  public static final int STX_ZY;
  public static final int TYA;
  public static final int STA_Y;
  public static final int TXS;
  public static final int STA_X;
  public static final int LDY_I;
  public static final int LDA_INDX;
  public static final int LDX_I;
  public static final int LDY_Z;
  public static final int LDA_Z;
  public static final int LDX_Z;
  public static final int TAY;
  public static final int LDA_I;
  public static final int TAX;
  public static final int LDY;
  public static final int LDA;
  public static final int LDX;
  public static final int BCS;
  public static final int LDA_INDY;
  public static final int LDY_ZX;
  public static final int LDA_ZX;
  public static final int LDX_ZY;
  public static final int CLV;
  public static final int LDA_Y;
  public static final int TSX;
  public static final int LDY_X;
  public static final int LDA_X;
  public static final int LDX_Y;
  public static final int CPY_I;
  public static final int CMP_INDX;
  public static final int CPY_Z;
  public static final int CMP_Z;
  public static final int DEC_Z;
  public static final int INY;
  public static final int CMP_I;
  public static final int DEX;
  public static final int CPY;
  public static final int CMP;
  public static final int DEC;
  public static final int BNE;
  public static final int CMP_INDY;
  public static final int CMP_ZX;
  public static final int DEC_ZX;
  public static final int CLD;
  public static final int CMP_Y;
  public static final int CMP_X;
  public static final int DEC_X;
  public static final int CPX_I;
  public static final int SBC_INDX;
  public static final int CPX_Z;
  public static final int SBC_Z;
  public static final int INC_Z;
  public static final int INX;
  public static final int SBC_I;
  public static final int NOP;
  public static final int SBC_I_01;
  public static final int CPX;
  public static final int SBC;
  public static final int INC;
  public static final int BEQ;
  public static final int SBC_INDY;
  public static final int SBC_ZX;
  public static final int INC_ZX;
  public static final int SED;
  public static final int SBC_Y;
  public static final int SBC_X;
  public static final int INC_X;
  public static final int SLO_INDX;
  public static final int RLA_INDX;
  public static final int SRE_INDX;
  public static final int RRA_INDX;
  public static final int SAX_INDX;
  public static final int LAX_INDX;
  public static final int DCP_INDX;
  public static final int ISB_INDX;
  public static final int SLO_Z;
  public static final int RLA_Z;
  public static final int SRE_Z;
  public static final int RRA_Z;
  public static final int SAX_Z;
  public static final int LAX_Z;
  public static final int DCP_Z;
  public static final int ISB_Z;
  public static final int SLO_ZX;
  public static final int RLA_ZX;
  public static final int SRE_ZX;
  public static final int RRA_ZX;
  public static final int SAX_ZY;
  public static final int LAX_ZY;
  public static final int DCP_ZX;
  public static final int ISB_ZX;
  public static final int SLO;
  public static final int RLA;
  public static final int SRE;
  public static final int RRA;
  public static final int SAX;
  public static final int LAX;
  public static final int DCP;
  public static final int ISB;
  public static final int SLO_INDY;
  public static final int RLA_INDY;
  public static final int SRE_INDY;
  public static final int RRA_INDY;
  public static final int SHA_INDY;
  public static final int LAX_INDY;
  public static final int DCP_INDY;
  public static final int ISB_INDY;
  public static final int SLO_Y;
  public static final int RLA_Y;
  public static final int SRE_Y;
  public static final int RRA_Y;
  public static final int SHS_Y;
  public static final int LAS_Y;
  public static final int DCP_Y;
  public static final int ISB_Y;
  public static final int ANC_I;
  public static final int ANC_I_01;
  public static final int ASR_I;
  public static final int ARR_I;
  public static final int ANE_I;
  public static final int LXA_I;
  public static final int SBX_I;
  public static final int SAY_X;
  public static final int XAS_Y;
  public static final int SLO_X;
  public static final int RLA_X;
  public static final int SRE_X;
  public static final int RRA_X;
  public static final int SHA_Y;
  public static final int LAX_Y;
  public static final int DCP_X;
  public static final int ISB_X;
  public static final int HALT_00;
  public static final int HALT_01;
  public static final int HALT_02;
  public static final int HALT_03;
  public static final int HALT_04;
  public static final int HALT_05;
  public static final int HALT_06;
  public static final int HALT_07;
  public static final int HALT_08;
  public static final int HALT_09;
  public static final int HALT_10;
  public static final int HALT_11;
  public static final int HALT_12;
  public static final int HALT_13;
  public static final int HALT_14;
  public static final int LOAD_FILE;
  public static final int SLEEP;
}
Compiled from "MOS6510Core.java"
public abstract class com.dreamfabric.jac64.MOS6510Core extends com.dreamfabric.jac64.MOS6510Ops {
  protected int[] memory;
  protected boolean debug;
  public static final int NMI_DELAY;
  public static final int IRQ_DELAY;
  public static final int NMI_INT;
  public static final int IRQ_INT;
  protected com.dreamfabric.jac64.PatchListener list;
  protected com.dreamfabric.jac64.ExtChip chips;
  protected com.dreamfabric.jac64.IMonitor monitor;
  public java.lang.String codebase;
  public boolean checkInterrupt;
  public boolean NMILow;
  public boolean NMILastLow;
  public int lastInterrupt;
  public boolean busAvailable;
  public long baLowUntil;
  boolean sign;
  boolean zero;
  boolean overflow;
  boolean carry;
  boolean decimal;
  boolean brk;
  boolean resetFlag;
  protected int acc;
  protected int x;
  protected int y;
  protected int s;
  protected long nmiCycleStart;
  protected long irqCycleStart;
  protected com.dreamfabric.jac64.EventQueue scheduler;
  protected int jumpTo;
  public long cycles;
  protected long lastMillis;
  protected long nr_ins;
  protected long nr_irq;
  protected long start;
  protected int pc;
  protected int interruptInExec;
  protected boolean disableInterupt;
  protected int rindex;
  protected int lastReadOP;
  public com.dreamfabric.jac64.MOS6510Core(com.dreamfabric.jac64.IMonitor, java.lang.String);
  public abstract java.lang.String getName();
  public int[] getMemory();
  public void jump(int);
  public long getCycles();
  public void setIRQLow(boolean);
  public void setNMILow(boolean);
  public int getSP();
  protected final int getStatusByte();
  protected abstract int fetchByte(int);
  protected abstract void writeByte(int, int);
  public void emulateOp();
  public void unknownInstruction(int, int);
  public void init(com.dreamfabric.jac64.ExtChip);
  protected abstract void installROMS();
  protected abstract void patchROM(com.dreamfabric.jac64.PatchListener);
  public void hardReset();
  public void reset();
  public void setDebug(int, java.lang.String);
  public java.lang.String getDebug(int);
  protected void loadROM(java.io.InputStream, int, int);
  void log(java.lang.String);
  public boolean getIRQLow();
}
Compiled from "MOS6510Ops.java"
public class com.dreamfabric.jac64.MOS6510Ops {
  public static final int BRK;
  public static final int ORA;
  public static final int TRP;
  public static final int SLO;
  public static final int NOP;
  public static final int ASL;
  public static final int PHP;
  public static final int ANC;
  public static final int BPL;
  public static final int CLC;
  public static final int JSR;
  public static final int AND;
  public static final int RLA;
  public static final int BIT;
  public static final int ROL;
  public static final int PLP;
  public static final int BMI;
  public static final int SEC;
  public static final int RTI;
  public static final int EOR;
  public static final int SRE;
  public static final int LSR;
  public static final int PHA;
  public static final int ASR;
  public static final int JMP;
  public static final int BVC;
  public static final int CLI;
  public static final int RTS;
  public static final int ADC;
  public static final int RRA;
  public static final int ROR;
  public static final int PLA;
  public static final int ARR;
  public static final int BVS;
  public static final int SEI;
  public static final int SAX;
  public static final int STA;
  public static final int STY;
  public static final int STX;
  public static final int DEY;
  public static final int TXA;
  public static final int ANE;
  public static final int BCC;
  public static final int SHA;
  public static final int TYA;
  public static final int TXS;
  public static final int SHS;
  public static final int SHY;
  public static final int SHX;
  public static final int LDY;
  public static final int LDA;
  public static final int LDX;
  public static final int LAX;
  public static final int TAX;
  public static final int LXA;
  public static final int TAY;
  public static final int BCS;
  public static final int CLV;
  public static final int TSX;
  public static final int LAS;
  public static final int CPY;
  public static final int CMP;
  public static final int DCP;
  public static final int DEC;
  public static final int INY;
  public static final int DEX;
  public static final int SBX;
  public static final int BNE;
  public static final int CLD;
  public static final int CPX;
  public static final int SBC;
  public static final int ISB;
  public static final int INC;
  public static final int INX;
  public static final int BEQ;
  public static final int SED;
  public static final int LOAD_FILE;
  public static final int SLEEP;
  public static final int OP_LOAD_FILE;
  public static final int OP_SLEEP;
  public static final int ADDRESSING_MASK;
  public static final int ADDRESSING_SHIFT;
  public static final int OP_MASK;
  public static final int IMMEDIATE;
  public static final int ZERO;
  public static final int ABSOLUTE;
  public static final int ZERO_X;
  public static final int ZERO_Y;
  public static final int ABSOLUTE_X;
  public static final int ABSOLUTE_Y;
  public static final int RELATIVE;
  public static final int INDIRECT_X;
  public static final int INDIRECT_Y;
  public static final int ACCUMULATOR;
  public static final int INDIRECT;
  public static final int MODE_MASK;
  public static final int MODE_SHIFT;
  public static final int READ;
  public static final int WRITE;
  public static final int RMW;
  public static final java.lang.String[] INS_STR;
  public static final java.lang.String[] ADR_STR_PRE;
  public static final java.lang.String[] ADR_STR_POST;
  public static final int[] ADR_LEN;
  public static final int[] INSTRUCTION_SET;
  public static final int[] READ_INS;
  public static final int[] WRITE_INS;
  public static final int[] RMW_INS;
  public com.dreamfabric.jac64.MOS6510Ops();
  public static void init();
  public static int lookup(java.lang.String);
  public static int lookup(int, int);
  public static java.lang.String modeString(int);
  public static java.lang.String toString(int);
  public static java.lang.String toString(int, boolean);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "MoogFilter.java"
public class com.dreamfabric.jac64.MoogFilter {
  public com.dreamfabric.jac64.MoogFilter(int);
  public void printStatus();
  public void setFilterParams(int, double);
  public void performFilter(int[], int);
}
Compiled from "Observer.java"
public interface com.dreamfabric.jac64.Observer {
  public abstract void update(java.lang.Object, java.lang.Object);
}
Compiled from "PatchListener.java"
public interface com.dreamfabric.jac64.PatchListener {
  public abstract boolean readFile(java.lang.String, int);
}
Compiled from "RESIDChip.java"
public class com.dreamfabric.jac64.RESIDChip extends com.dreamfabric.jac64.ExtChip {
  static final int SAMPLE_RATE;
  static final int DL_BUFFER_SIZE;
  int BUFFER_SIZE;
  byte[] buffer;
  resid.SID sid;
  int CPUFrq;
  int clocksPerSample;
  int clocksPerSampleRest;
  long nextSample;
  long lastCycles;
  com.dreamfabric.jac64.TimeEvent sampleEvent;
  public com.dreamfabric.jac64.RESIDChip(com.dreamfabric.jac64.MOS6510Core, com.dreamfabric.jac64.AudioDriver);
  public void clock(long);
  public int performRead(int, long);
  public void performWrite(int, int, long);
  public void reset();
  public void stop();
  public void setChipVersion(int);
  static int access$000(com.dreamfabric.jac64.RESIDChip);
  static int access$002(com.dreamfabric.jac64.RESIDChip, int);
  static int access$108(com.dreamfabric.jac64.RESIDChip);
  static int access$100(com.dreamfabric.jac64.RESIDChip);
  static void access$200(com.dreamfabric.jac64.RESIDChip);
  static boolean access$300(com.dreamfabric.jac64.RESIDChip);
}
Compiled from "RESIDChip.java"
class com.dreamfabric.jac64.RESIDChip$1 extends com.dreamfabric.jac64.TimeEvent {
  final com.dreamfabric.jac64.RESIDChip this$0;
  com.dreamfabric.jac64.RESIDChip$1(com.dreamfabric.jac64.RESIDChip, long, java.lang.String);
  public void execute(long);
}
Compiled from "RS6581Waves.java"
public class com.dreamfabric.jac64.RS6581Waves {
  public static int[] wave6581_PS_;
  public static int[] wave6581_P_T;
  public static int[] wave6581_PST;
  public static int[] wave6581__ST;
  public com.dreamfabric.jac64.RS6581Waves();
  public static void initWaves();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SELoader.java"
public class com.dreamfabric.jac64.SELoader extends com.dreamfabric.jac64.Loader {
  java.lang.String codebase;
  public com.dreamfabric.jac64.SELoader();
  public com.dreamfabric.jac64.SELoader(java.lang.String);
  public java.io.InputStream getResourceStream(java.lang.String);
}
Compiled from "SIDChip.java"
public class com.dreamfabric.jac64.SIDChip extends com.dreamfabric.jac64.ExtChip {
  public static final boolean SOUND_AVAIABLE;
  public static final int IO_OFFSET;
  com.dreamfabric.jac64.SIDVoice6581[] sid;
  com.dreamfabric.jac64.SIDMixer mixer;
  public com.dreamfabric.jac64.SIDChip(com.dreamfabric.jac64.MOS6510Core, com.dreamfabric.jac64.AudioDriver);
  public void clock(long);
  public int performRead(int, long);
  public void performWrite(int, int, long);
  public void reset();
  public void stop();
  static int access$000(com.dreamfabric.jac64.SIDChip);
  static boolean access$100(com.dreamfabric.jac64.SIDChip);
}
Compiled from "SIDChip.java"
class com.dreamfabric.jac64.SIDChip$1 extends com.dreamfabric.jac64.TimeEvent {
  final com.dreamfabric.jac64.SIDChip this$0;
  com.dreamfabric.jac64.SIDChip$1(com.dreamfabric.jac64.SIDChip, long, java.lang.String);
  public void execute(long);
}
Compiled from "SIDMixer.java"
public class com.dreamfabric.jac64.SIDMixer {
  public static int BYTES_PER_SAMPLE;
  public static final boolean NO_SOUND;
  public static final boolean DEBUG;
  public static int DL_BUFFER_SIZE;
  public static final int SYNCH_BUFFER;
  public static final int EFX_NONE;
  public static final int EFX_FLANGER_1;
  public static final int EFX_FLANGER_2;
  public static final int EFX_FLANGER_3;
  public static final int EFX_PHASER_1;
  public static final int EFX_PHASER_2;
  public static final int EFX_CHORUS_1;
  public static final int EFX_CHORUS_2;
  public static final int EFX_ECHO_1;
  public static final int EFX_ECHO_2;
  public static final int EFX_REV_SMALL;
  public static final int EFX_REV_MED;
  public static final int EFX_REV_LARGE;
  public static final int EFX_FSWEEP;
  public static final int EFX_FSWEEP_RES;
  public boolean fullSpeed;
  byte[] buffer;
  byte[] syncBuffer;
  int[] intBuffer;
  int[] noFltBuffer;
  boolean effects;
  public static final int LFO_WAVELEN;
  int[] echo;
  int echoSize;
  int echoPos;
  int echoLFODiff;
  int echoLFODiffMax;
  int echoLFODepth;
  int echoFeedback;
  int echoLFOSpeed;
  int echoLFOPos;
  int echoDW;
  int maxefx;
  int minefx;
  int sidVol;
  int[] sidVolArr;
  long lastCycles;
  int filterVal;
  public int cutoff;
  public int resonance;
  int filterOn;
  int masterVolume;
  boolean lpOn;
  boolean hpOn;
  boolean bpOn;
  long vlp;
  long vhp;
  long vbp;
  long w0;
  long div1024Q;
  long exVlp;
  long exVhp;
  long exVo;
  long exw0lp;
  long exw0hp;
  int irq;
  int[] sine10Hz;
  public static final int SLEEP_SYNC;
  public com.dreamfabric.jac64.SIDMixer();
  public com.dreamfabric.jac64.SIDMixer(com.dreamfabric.jac64.SIDVoice6581[], com.dreamfabric.jac64.SIDVoice, com.dreamfabric.jac64.AudioDriver);
  public void init(com.dreamfabric.jac64.SIDVoice6581[], com.dreamfabric.jac64.SIDVoice, com.dreamfabric.jac64.AudioDriver);
  public void setListener(com.dreamfabric.jac64.SIDMixerListener);
  public void setEchoTime(int);
  public int getEchoTime();
  public int getEFXCount();
  public java.lang.String getEFXName(int);
  public void setEchoFeedback(int);
  public int getEchoFeedback();
  public void setEchoLFOSpeed(int);
  public int getEchoLFOSpeed();
  public void setEchoDW(int);
  public int getEchoDW();
  public void setEchoLFODepth(int);
  public int getEchoLFODepth();
  public boolean getEffectsOn();
  public void setEFX(int);
  public void setEffectsOn(boolean);
  public boolean isEffectsOn();
  public void setFilterCutoffLO(int);
  public void setFilterCutoffHI(int);
  public void setFilterResonance(int);
  public void setFilterCtrl(int);
  public void setFilterOn(int);
  public void setMoogFilterOn(boolean);
  public boolean isMoogFilterOn();
  public void setMoogResonance(int);
  public int getMoogResonance();
  public void setMoogCutoff(int);
  public int getMoogCutoff();
  public void setMoogSpeed(int);
  public int getMoogSpeed();
  public void setMoogDepth(int);
  public int getMoogDepth();
  public void setVolume(int);
  public void setVolume(int, long);
  public void stop();
  public void reset();
  public void printStatus();
  public void setFullSpeed(boolean);
  public boolean fullSpeed();
  public int[] getBuffer();
  public boolean updateSound(long);
  public int getMicrosPerGen();
  public boolean soundOn();
  public void setSoundOn(boolean);
  static {};
}
Compiled from "SIDMixerListener.java"
public interface com.dreamfabric.jac64.SIDMixerListener {
  public abstract void updateValues();
}
Compiled from "SIDVoice.java"
public class com.dreamfabric.jac64.SIDVoice {
  public int[] intBuffer;
  public com.dreamfabric.jac64.SIDVoice();
  public int[] generateSound(long);
}
Compiled from "SIDVoice6581.java"
public class com.dreamfabric.jac64.SIDVoice6581 extends com.dreamfabric.jac64.SIDVoice {
  public static final int UPDATE_CYCLES;
  public static final int PER_SEC;
  public static final boolean DEBUG;
  public static final int SAMPLE_RATE;
  public static final double FRQCONV;
  public static final int TRIANGLE;
  public static final int SAW;
  public static final int PULSE;
  public static final int NOISE;
  public static final int NONE;
  public static final java.lang.String[] WAVE;
  public static final java.lang.String[] ADSR_PHASES;
  static final int waveLen;
  public static final int GENLEN;
  public static final int GENS_PER_IRQ;
  public static final int SAMPLE_BITS;
  public static final int MAXGENLEN;
  public static final double SAMPLES_PER_MICRO;
  public static final int CYCLES_PER_SAMPLE;
  public static final int VOLUME_SIZE;
  public static final int DELAY_LEN;
  byte[] buffer;
  int delPos;
  int diffMin;
  int diffDt;
  int[] delay;
  int generated;
  int smp;
  int pwid;
  long nextSample;
  long next_nextSample;
  int noiseData;
  long noise_reg;
  boolean debugGen;
  boolean sync;
  boolean ring;
  boolean testBit;
  int testZero;
  long[] attackTime;
  public static final int ADSR_BITS;
  public static final int ADSR_RATE_BITS;
  long ATTACK_MAX;
  long RELEASE_FINISH_LEVEL;
  int ATTACK_FUZZ;
  long[] attackDelta;
  long[] decayExp;
  long adsrLevel22;
  long adsrSusLevel22;
  long decayFactor;
  long releaseFactor;
  long currentDecayFactor;
  long currentAttackRate;
  int adsrPhase;
  int adsrBug;
  int ad;
  int sr;
  public static int frqFac;
  public double adsrLevel;
  long lastAttackTime;
  boolean soundOn;
  public static final int FRQ_BITS;
  public static final long WAVELEN;
  public static final long WAVELEN_HALF;
  public long frq;
  public double trueFrq;
  public int wave;
  public long next_frq;
  public com.dreamfabric.jac64.SIDVoice6581 next;
  public int lastSample;
  public int adsrVol;
  long nanos;
  long total;
  int[] pwidArr;
  public com.dreamfabric.jac64.SIDVoice6581(int[], int);
  public void init();
  public void setControl(int, long);
  public void soundOn(long);
  public void soundOff(long);
  public void setAD(int, long);
  public void setSR(int, long);
  public void reset();
  public void printStatus();
  public int[] generateSound(long);
  public void updatePulseWidth(long);
  public void updateSound(long);
  public int lastSample();
  static {};
}
Compiled from "TFE_CS8900.java"
public class com.dreamfabric.jac64.TFE_CS8900 {
  public static final int RXTXREG;
  public static final int TXCMD;
  public static final int TXLEN;
  public static final int PPDATA;
  public static final int PACKET_PP;
  public com.dreamfabric.jac64.TFE_CS8900(int);
  public int performRead(int, long);
  public void performWrite(int, int, long);
}
Compiled from "TimeEvent.java"
public abstract class com.dreamfabric.jac64.TimeEvent {
  com.dreamfabric.jac64.TimeEvent nextEvent;
  com.dreamfabric.jac64.TimeEvent prevEvent;
  boolean scheduled;
  java.lang.String name;
  protected long time;
  public com.dreamfabric.jac64.TimeEvent(long);
  public com.dreamfabric.jac64.TimeEvent(long, java.lang.String);
  public final long getTime();
  public abstract void execute(long);
  public java.lang.String getShort();
}
Compiled from "VICConstants.java"
public class com.dreamfabric.jac64.VICConstants {
  public static final byte VS_INIT;
  public static final byte VS_SPRITE3;
  public static final byte VS_SPRITE4;
  public static final byte VS_SPRITE5;
  public static final byte VS_SPRITE6;
  public static final byte VS_SPRITE7;
  public static final byte VS_NODISPLAY;
  public static final byte VS_FETCHBADC12;
  public static final byte VS_VCRC;
  public static final byte VS_SPRITE_DMAOFF;
  public static final byte VS_40CHARSC17;
  public static final byte VS_DRAWC18_54;
  public static final byte VS_38CHARSENDC56;
  public static final byte VS_40CHARSENDC57;
  public static final byte VS_SPRITE0_RC;
  public static final byte VS_SPRITE1;
  public static final byte VS_SPRITE2;
  public static final byte VS_FINISH;
  public static final int SCAN_RATE;
  public static final int BA_SP0;
  public static final int BA_SP1;
  public static final int BA_SP2;
  public static final int BA_SP3;
  public static final int BA_SP4;
  public static final int BA_SP5;
  public static final int BA_SP6;
  public static final int BA_SP7;
  public static final int BA_BADLINE;
  public static final int[][] COLOR_SETS;
  public com.dreamfabric.jac64.VICConstants();
  static {};
}
Compiled from "EnvelopeGenerator.java"
public class resid.EnvelopeGenerator {
  protected int rate_counter;
  protected int rate_period;
  protected int exponential_counter;
  protected int exponential_counter_period;
  protected int envelope_counter;
  protected boolean hold_zero;
  protected int attack;
  protected int decay;
  protected int sustain;
  protected int release;
  protected int gate;
  protected resid.EnvelopeGenerator$State state;
  protected static int[] rate_counter_period;
  protected static int[] sustain_level;
  public void clock();
  public void clock(int);
  public int output();
  public resid.EnvelopeGenerator();
  public void reset();
  public void writeCONTROL_REG(int);
  public void writeATTACK_DECAY(int);
  public void writeSUSTAIN_RELEASE(int);
  public int readENV();
  static {};
}
Compiled from "EnvelopeGenerator.java"
public final class resid.EnvelopeGenerator$State extends java.lang.Enum<resid.EnvelopeGenerator$State> {
  public static final resid.EnvelopeGenerator$State ATTACK;
  public static final resid.EnvelopeGenerator$State DECAY_SUSTAIN;
  public static final resid.EnvelopeGenerator$State RELEASE;
  public static resid.EnvelopeGenerator$State[] values();
  public static resid.EnvelopeGenerator$State valueOf(java.lang.String);
  static {};
}
Compiled from "ExternalFilter.java"
public class resid.ExternalFilter {
  protected boolean enabled;
  protected int mixer_DC;
  protected int Vlp;
  protected int Vhp;
  protected int Vo;
  protected int w0lp;
  protected int w0hp;
  public void clock(int);
  public void clock(int, int);
  public int output();
  public resid.ExternalFilter();
  public void enable_filter(boolean);
  public void set_sampling_parameter(double);
  public void set_chip_model(resid.ISIDDefs$chip_model);
  public void reset();
}
Compiled from "Filter.java"
public class resid.Filter {
  public static final boolean SPLINE_BRUTE_FORCE;
  protected boolean enabled;
  protected int fc;
  protected int res;
  protected int filt;
  protected int voice3off;
  protected int hp_bp_lp;
  protected int vol;
  protected int mixer_DC;
  protected int Vhp;
  protected int Vbp;
  protected int Vlp;
  protected int Vnf;
  int DLthreshold;
  int DLsteepness;
  int DHthreshold;
  int DHsteepness;
  int DLlp;
  int DLbp;
  int DLhp;
  int DHlp;
  int DHbp;
  int DHhp;
  protected int w0;
  protected int w0_ceil_1;
  protected int w0_ceil_dt;
  protected int _1024_div_Q;
  protected int[] f0_6581;
  protected int[] f0_8580;
  protected int[] f0;
  protected static int[][] f0_points_6581;
  protected static int[][] f0_points_8580;
  protected int[][] f0_points;
  protected int f0_count;
  public void clock(int, int, int, int);
  public void clock(int, int, int, int, int);
  public int output();
  public resid.Filter();
  public void enable_filter(boolean);
  public void set_chip_model(resid.ISIDDefs$chip_model);
  void set_distortion_properties(int, int, int, int, int, int, int, int, int, int);
  public void reset();
  public void writeFC_LO(int);
  public void writeFC_HI(int);
  public void writeRES_FILT(int);
  public void writeMODE_VOL(int);
  protected void set_w0();
  protected void set_Q();
  public void fc_default(resid.SID$FCPoints);
  public resid.PointPlotter fc_plotter();
  protected void cubic_coefficients(double, double, double, double, double, double, resid.Filter$Coefficients);
  protected void interpolate_brute_force(double, double, double, double, double, double, resid.PointPlotter, double);
  protected void interpolate_forward_difference(double, double, double, double, double, double, resid.PointPlotter, double);
  protected double x(int[][], int);
  protected double y(int[][], int);
  public void interpolate(int[][], int, int, resid.PointPlotter, double);
  static {};
}
Compiled from "Filter.java"
public class resid.Filter$Coefficients {
  public double a;
  public double b;
  public double c;
  public double d;
  final resid.Filter this$0;
  public resid.Filter$Coefficients(resid.Filter);
}
Compiled from "ISIDDefs.java"
public interface resid.ISIDDefs {
  public static final java.lang.String resid_version_string;
}
Compiled from "ISIDDefs.java"
public final class resid.ISIDDefs$chip_model extends java.lang.Enum<resid.ISIDDefs$chip_model> {
  public static final resid.ISIDDefs$chip_model MOS6581;
  public static final resid.ISIDDefs$chip_model MOS8580;
  public static resid.ISIDDefs$chip_model[] values();
  public static resid.ISIDDefs$chip_model valueOf(java.lang.String);
  static {};
}
Compiled from "ISIDDefs.java"
public final class resid.ISIDDefs$sampling_method extends java.lang.Enum<resid.ISIDDefs$sampling_method> {
  public static final resid.ISIDDefs$sampling_method SAMPLE_FAST;
  public static final resid.ISIDDefs$sampling_method SAMPLE_INTERPOLATE;
  public static final resid.ISIDDefs$sampling_method SAMPLE_RESAMPLE_INTERPOLATE;
  public static final resid.ISIDDefs$sampling_method SAMPLE_RESAMPLE_FAST;
  public static resid.ISIDDefs$sampling_method[] values();
  public static resid.ISIDDefs$sampling_method valueOf(java.lang.String);
  static {};
}
Compiled from "IWave6581.java"
public interface resid.IWave6581 {
  public static final int[] wave6581__ST;
  public static final int[] wave6581_P_T;
  public static final int[] wave6581_PS_;
  public static final int[] wave6581_PST;
  static {};
}
Compiled from "IWave8580.java"
public interface resid.IWave8580 {
  public static final int[] wave8580__ST;
  public static final int[] wave8580_P_T;
  public static final int[] wave8580_PS_;
  public static final int[] wave8580_PST;
  static {};
}
Compiled from "PointPlotter.java"
public class resid.PointPlotter {
  protected int[] f;
  public resid.PointPlotter(int[]);
  void plot(double, double);
}
Compiled from "Potentiometer.java"
public class resid.Potentiometer {
  public resid.Potentiometer();
  public int readPOT();
}
Compiled from "SID.java"
public class resid.SID {
  public static boolean ANTTI_LANKILA_PATCH;
  protected resid.Voice[] voice;
  public resid.Filter filter;
  protected resid.ExternalFilter extfilt;
  protected resid.Potentiometer potx;
  protected resid.Potentiometer poty;
  protected int bus_value;
  protected int bus_value_ttl;
  protected double clock_frequency;
  protected int ext_in;
  protected static final int FIR_N;
  protected static final int FIR_RES_INTERPOLATE;
  protected static final int FIR_RES_FAST;
  protected static final int FIR_SHIFT;
  protected static final int RINGSIZE;
  protected static final int FIXP_SHIFT;
  protected static final int FIXP_MASK;
  protected resid.ISIDDefs$sampling_method sampling;
  protected int cycles_per_sample;
  protected int sample_offset;
  protected int sample_index;
  protected short sample_prev;
  protected int fir_N;
  protected int fir_RES;
  protected short[] sample;
  protected short[] fir;
  public resid.SID();
  public void set_chip_model(resid.ISIDDefs$chip_model);
  public void set_distortion_properties(int, int, int, int, int, int, int, int, int, int);
  public void reset();
  public void input(int);
  public int output();
  public int output(int);
  public int read(int);
  public void write(int, int);
  public void mute(int, boolean);
  public resid.SID$State read_state();
  public void write_state(resid.SID$State);
  public void enable_filter(boolean);
  public void enable_external_filter(boolean);
  protected double I0(double);
  public boolean set_sampling_parameters(double, resid.ISIDDefs$sampling_method, double, double, double);
  public void adjust_sampling_frequency(double);
  public void fc_default(resid.SID$FCPoints);
  public resid.PointPlotter fc_plotter();
  public void clock();
  public void clock(int);
  public int clock(resid.SID$CycleCount, short[], int, int);
  protected int clock_fast(resid.SID$CycleCount, short[], int, int);
  protected int clock_interpolate(resid.SID$CycleCount, short[], int, int);
  protected int clock_resample_interpolate(resid.SID$CycleCount, short[], int, int);
  protected int clock_resample_fast(resid.SID$CycleCount, short[], int, int);
  static {};
}
Compiled from "SID.java"
class resid.SID$1 {
  static final int[] $SwitchMap$resid$ISIDDefs$sampling_method;
  static {};
}
Compiled from "SID.java"
public class resid.SID$CycleCount {
  public int delta_t;
  final resid.SID this$0;
  public resid.SID$CycleCount(resid.SID, int);
}
Compiled from "SID.java"
public class resid.SID$FCPoints {
  public int[][] points;
  public int count;
  final resid.SID this$0;
  public resid.SID$FCPoints(resid.SID);
}
Compiled from "SID.java"
public class resid.SID$State {
  public char[] sid_register;
  public int bus_value;
  public int bus_value_ttl;
  public int[] accumulator;
  public int[] shift_register;
  public int[] rate_counter;
  public int[] rate_counter_period;
  public int[] exponential_counter;
  public int[] exponential_counter_period;
  int[] envelope_counter;
  public resid.EnvelopeGenerator$State[] envelope_state;
  public boolean[] hold_zero;
  final resid.SID this$0;
  public resid.SID$State(resid.SID);
}
Compiled from "Util.java"
public class resid.Util {
  public resid.Util();
  public static int[] unpack(int[]);
}
Compiled from "Voice.java"
public class resid.Voice {
  protected resid.WaveformGenerator wave;
  protected resid.EnvelopeGenerator envelope;
  protected boolean muted;
  protected int wave_zero;
  protected int voice_DC;
  public int output();
  public resid.Voice();
  public void set_chip_model(resid.ISIDDefs$chip_model);
  public void set_sync_source(resid.Voice);
  public void writeCONTROL_REG(int);
  public void reset();
  public void mute(boolean);
}
Compiled from "WaveformGenerator.java"
public class resid.WaveformGenerator implements resid.IWave6581,resid.IWave8580 {
  protected resid.WaveformGenerator sync_source;
  protected resid.WaveformGenerator sync_dest;
  protected boolean msb_rising;
  protected int accumulator;
  protected int shift_register;
  protected int freq;
  protected int pw;
  protected int waveform;
  protected int test;
  protected int ring_mod;
  protected int sync;
  int[] wave__ST;
  int[] wave_P_T;
  int[] wave_PS_;
  int[] wave_PST;
  public resid.WaveformGenerator();
  public void set_sync_source(resid.WaveformGenerator);
  public void set_chip_model(resid.ISIDDefs$chip_model);
  public void writeFREQ_LO(int);
  public void writeFREQ_HI(int);
  public void writePW_LO(int);
  public void writePW_HI(int);
  public void writeCONTROL_REG(int);
  public int readOSC();
  public void reset();
  public void clock();
  public void clock(int);
  public void synchronize();
  protected int output____();
  protected int output___T();
  protected int output__S_();
  protected int output_P__();
  protected int outputN___();
  protected int output__ST();
  protected int output_P_T();
  protected int output_PS_();
  protected int output_PST();
  protected int outputN__T();
  protected int outputN_S_();
  protected int outputN_ST();
  protected int outputNP__();
  protected int outputNP_T();
  protected int outputNPS_();
  protected int outputNPST();
  public int output();
}
