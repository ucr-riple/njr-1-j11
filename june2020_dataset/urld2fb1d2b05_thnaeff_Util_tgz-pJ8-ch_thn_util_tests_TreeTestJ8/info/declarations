Compiled from "ColorUtil.java"
public class ch.thn.util.ColorUtil {
  public ch.thn.util.ColorUtil();
  public static java.lang.String colorToHex(java.awt.Color);
}
Compiled from "NumberUtil.java"
public class ch.thn.util.NumberUtil {
  public ch.thn.util.NumberUtil();
  public static boolean isOdd(int);
  public static boolean isEven(int);
  public static double roundDecimals(double, int);
  public static float roundDecimals(float, int);
  public static java.text.DecimalFormat createDecimalFormat(int, int, boolean, boolean, boolean, boolean, boolean);
  public static java.lang.String formatNumber(java.lang.Number, int, int, boolean, boolean, boolean, boolean, boolean);
  public static java.lang.String formatNumber(java.lang.Number, boolean, boolean, boolean, boolean);
  public static java.lang.String formatNumber(java.lang.Number, int, int, boolean, boolean);
  public static java.lang.String formatNumber(java.lang.Number, boolean);
  public static java.lang.Number add(java.lang.Number, java.lang.Number);
  public static java.lang.Number subtract(java.lang.Number, java.lang.Number);
  public static java.lang.Number multiply(java.lang.Number, java.lang.Number);
  public static java.lang.Number divide(java.lang.Number, java.lang.Number);
  public static java.lang.Number remainder(java.lang.Number, java.lang.Number);
  public static boolean gt(java.lang.Number, java.lang.Number);
  public static boolean lt(java.lang.Number, java.lang.Number);
  public static java.lang.Number generateRandomNumber(java.lang.Number, java.lang.Number);
  public static java.util.ArrayList<java.lang.Number> generateRandomNumbers(int, java.lang.Number, java.lang.Number);
  public static java.lang.Number castTo(java.lang.Class<?>, java.lang.Number);
  static {};
}
Compiled from "NumberUtilError.java"
public class ch.thn.util.NumberUtilError extends java.lang.Error {
  public ch.thn.util.NumberUtilError(java.lang.String);
}
Compiled from "ReflectionUtil.java"
public class ch.thn.util.ReflectionUtil {
  public static final java.util.Map<java.lang.String, java.lang.Class<?>[]> primitiveMapper;
  public static final java.util.Map<java.lang.Class<?>, java.lang.Object[]> primitiveTypeMapper;
  public static final java.util.Map<java.lang.Class<?>, java.lang.Object[]> primitiveClassMapper;
  public ch.thn.util.ReflectionUtil();
  public static ch.thn.util.ReflectionUtil$MethodProperties parseMethodProperties(java.lang.String);
  public static ch.thn.util.ReflectionUtil$MethodProperties parseMethodProperties(java.lang.String, java.lang.String[]);
  public static java.lang.Class<?> getClassForName(java.lang.String, java.lang.String[]);
  public static java.lang.Class<?> getClassObjectForPrimitive(java.lang.String);
  public static boolean isPrimitiveType(java.lang.String);
  public static boolean isModifier(java.lang.String);
  public static boolean isInstanceOrEqualOf(java.lang.Object, java.lang.Class<?>);
  public static java.util.List<java.lang.Class<?>> getAllSuperclasses(java.lang.Class<?>);
  public static java.util.List<java.lang.Class<?>> getAllInterfaces(java.lang.Class<?>);
  public static java.lang.String getShortString(java.lang.reflect.Method);
  public static java.lang.String getFieldName(java.lang.Object, java.lang.Object);
  static {};
}
Compiled from "ReflectionUtil.java"
public class ch.thn.util.ReflectionUtil$MethodProperties {
  public ch.thn.util.ReflectionUtil$MethodProperties(java.lang.String);
  protected void setReturnType(java.lang.Class<?>);
  public boolean hasReturnType();
  public java.lang.Class<?> getReturnType();
  protected void addParameterType(java.lang.Class<?>);
  public java.lang.String getMethodName();
  public java.util.LinkedList<java.lang.Class<?>> getParameterTypes();
  public java.lang.Class<?>[] getParameterTypesArray();
  public java.lang.String getParameterTypesString();
  public int getNumberOfParameterTypes();
  protected void addInvalidType(java.lang.String);
  public boolean hasInvalidTypes();
  public java.util.LinkedList<java.lang.String> getInvalidTypes();
  public java.lang.String getMethodString();
  public java.lang.String toString();
}
Compiled from "ReflectionUtilError.java"
public class ch.thn.util.ReflectionUtilError extends java.lang.Error {
  public ch.thn.util.ReflectionUtilError(java.lang.String);
}
Compiled from "StringUtil.java"
public class ch.thn.util.StringUtil {
  public static java.lang.String specialChars;
  public ch.thn.util.StringUtil();
  public static boolean equals(java.lang.String, java.lang.String);
  public static java.lang.String clipStringRight(java.lang.String, int);
  public static java.lang.String clipStringLeft(java.lang.String, int);
  public static java.lang.String clipStringCenter(java.lang.String, int);
  public static java.lang.String clipStringCenterLeft(java.lang.String, int, int, int);
  public static java.lang.String clipStringCenterRight(java.lang.String, int, int, int);
  public static java.lang.String clipStringCenter(java.lang.String, int, int, int, int, int, int);
  public static java.lang.String clipStringCenter(java.lang.String, java.awt.FontMetrics, int);
  public static java.lang.String clipStringCenterLeft(java.lang.String, java.awt.FontMetrics, int, int, int);
  public static java.lang.String clipStringCenterRight(java.lang.String, java.awt.FontMetrics, int, int, int);
  public static java.lang.String clipStringRight(java.lang.String, java.awt.FontMetrics, int);
  public static java.lang.String clipStringLeft(java.lang.String, java.awt.FontMetrics, int);
  public static int getTextWidth(java.lang.String, java.awt.Font, java.awt.font.FontRenderContext);
  public static int getTextHeight(java.lang.String, java.awt.Font, java.awt.font.FontRenderContext);
  public static boolean contains(java.lang.String, java.lang.String);
  public static boolean contains(java.util.regex.Pattern, java.lang.String);
  public static boolean contains(java.lang.String, java.lang.String, int);
  public static boolean contains(java.util.regex.Pattern, java.lang.String, int);
  public static boolean matches(java.lang.String, java.lang.String);
  public static boolean matches(java.util.regex.Pattern, java.lang.String);
  public static int matchesCount(java.lang.String, java.lang.String);
  public static int matchesCount(java.util.regex.Pattern, java.lang.String);
  public static java.lang.String removeAll(java.lang.String, java.lang.String);
  public static java.lang.String removeAll(java.util.regex.Pattern, java.lang.String);
  public static java.lang.String replaceAll(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String replaceAll(java.util.regex.Pattern, java.lang.String, java.lang.String);
  public static java.lang.String replaceAll(java.lang.String, java.lang.String, java.lang.String, boolean);
  public static java.lang.String replaceAll(java.util.regex.Pattern, java.lang.String, java.lang.String, boolean);
  public static java.util.LinkedList<java.lang.String> getMatching(java.lang.String, java.lang.String);
  public static java.util.LinkedList<java.lang.String> getMatching(java.util.regex.Pattern, java.lang.String);
  public static java.lang.String getMatchingFirst(java.lang.String, java.lang.String);
  public static java.lang.String getMatchingFirst(java.util.regex.Pattern, java.lang.String);
  public static java.util.LinkedList<java.lang.String> extractRanges(java.lang.String);
  public static java.lang.String buildRangeString(java.lang.String);
  public static java.lang.String buildRangesString(java.lang.String);
  public static java.util.HashMap<java.lang.String, java.lang.String> buildStringRanges(java.lang.String);
  public static java.lang.String replaceStringRanges(java.lang.String);
  public static java.lang.String randomString(int, boolean);
  public static java.lang.String randomString(int, boolean, boolean, boolean, boolean, boolean, boolean, boolean);
  public static java.lang.String randomString(java.lang.String, int, boolean);
  public static java.lang.String leadingTrailing(java.lang.String, java.lang.String, int, int);
  public static java.lang.String stringString(java.lang.String, int);
  public static void replaceAll(java.lang.StringBuilder, java.lang.String, java.lang.String);
  public static void replaceAll(java.lang.StringBuilder, java.lang.String, java.lang.String, boolean);
  public static java.lang.String getStackTrace(java.lang.Throwable);
  static {};
}
Compiled from "StringUtilError.java"
public class ch.thn.util.StringUtilError extends java.lang.Error {
  public ch.thn.util.StringUtilError(java.lang.String);
}
Compiled from "TimeDateUtil.java"
public class ch.thn.util.TimeDateUtil {
  public ch.thn.util.TimeDateUtil();
  public static java.lang.String getDateTimeFromMillis(long);
  public static java.lang.String getDateTimeFromMillis(long, java.text.DateFormat);
  public static java.lang.String getTimeFromMillis(long, java.lang.String, boolean, boolean, boolean, boolean, boolean);
  public static java.lang.String getTimeFromMillis(long, boolean, boolean, boolean);
  public static java.lang.String getDateFromMillis(long, java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean);
  public static java.lang.String getDateFromMillis(long, boolean, boolean);
  public static java.lang.String millisToTime(long, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean);
  public static java.lang.String millisToTime(long);
  static {};
}
Compiled from "MultiKeyHashMap.java"
public class ch.thn.util.collections.MultiKeyHashMap<K, V> extends java.util.LinkedHashMap<K, V> {
  public ch.thn.util.collections.MultiKeyHashMap();
  public ch.thn.util.collections.MultiKeyHashMap(int);
  public ch.thn.util.collections.MultiKeyHashMap(java.util.Map<? extends K, ? extends V>);
  public ch.thn.util.collections.MultiKeyHashMap(int, float);
  public void addKeyMapping(K, K);
  public K getMappedTo(K);
  public K getMapping(K);
  public java.util.HashSet<K> getReverseMapping(K);
  public void copyMapping(ch.thn.util.collections.MultiKeyHashMap);
  public V get(java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public java.lang.String toString();
}
Compiled from "MultiKeyHashMapMappingError.java"
public class ch.thn.util.collections.MultiKeyHashMapMappingError extends java.lang.Error {
  public ch.thn.util.collections.MultiKeyHashMapMappingError(java.lang.String);
}
Compiled from "MultiValueHashMap.java"
public class ch.thn.util.collections.MultiValueHashMap<K, V> extends java.util.AbstractMap<K, V> {
  protected java.util.Map<K, java.util.LinkedList<V>> map;
  protected int size;
  public ch.thn.util.collections.MultiValueHashMap();
  public ch.thn.util.collections.MultiValueHashMap(int);
  public ch.thn.util.collections.MultiValueHashMap(java.util.Map<? extends K, ? extends V>);
  public ch.thn.util.collections.MultiValueHashMap(int, float);
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V get(java.lang.Object);
  public java.util.LinkedList<V> getAll(java.lang.Object);
  public V remove(java.lang.Object);
  public boolean removeAll(java.lang.Object);
  public void clear();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean isEmpty();
  public java.util.Set<K> keySet();
  public int size();
  public int keyCount();
  public java.util.Collection<V> values();
  public int getKeyCount();
  public int getValueCount(K);
  protected void checkIndexBounds(int, java.util.List<?>);
  public java.lang.String toString();
}
Compiled from "MultiValueLinkedHashMap.java"
public class ch.thn.util.collections.MultiValueLinkedHashMap<K, V> extends ch.thn.util.collections.MultiValueHashMap<K, V> {
  protected java.util.LinkedList<K> keys;
  protected java.util.LinkedList<V> values;
  public ch.thn.util.collections.MultiValueLinkedHashMap();
  public ch.thn.util.collections.MultiValueLinkedHashMap(int);
  public ch.thn.util.collections.MultiValueLinkedHashMap(java.util.Map<? extends K, ? extends V>);
  public ch.thn.util.collections.MultiValueLinkedHashMap(int, float);
  public void sortByKey(java.util.Comparator<K>);
  public void sortByValue(java.util.Comparator<V>);
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public java.util.LinkedList<V> getAll(java.lang.Object);
  public V remove(java.lang.Object);
  public boolean removeAll(java.lang.Object);
  public void clear();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public java.util.Collection<V> values();
  public java.util.Set<K> keySet();
  public java.lang.String toString();
  protected void verifyIntegrity();
}
Compiled from "MultiValueLinkedIndexHashMap.java"
public class ch.thn.util.collections.MultiValueLinkedIndexHashMap<K, V> extends ch.thn.util.collections.MultiValueLinkedHashMap<K, V> {
  public ch.thn.util.collections.MultiValueLinkedIndexHashMap();
  public ch.thn.util.collections.MultiValueLinkedIndexHashMap(int);
  public ch.thn.util.collections.MultiValueLinkedIndexHashMap(java.util.Map<? extends K, ? extends V>);
  public ch.thn.util.collections.MultiValueLinkedIndexHashMap(int, float);
  public void sortByValue(java.util.Comparator<V>);
  public V put(K, V, int);
  public V get(int);
  public V get(K, int);
  public K getKey(int);
  public V remove(int);
  public V remove(K, int);
  public int positionOf(K, V);
  public int indexOf(V);
  public int lastIndexOf(V);
  protected int positionToIndex(K, int);
  protected int indexToPosition(int);
  protected int getPreviousKeyIndex(K, int);
}
Compiled from "FileUtil.java"
public class ch.thn.util.file.FileUtil {
  public ch.thn.util.file.FileUtil();
  public static java.lang.String getPathSeparator();
  public static java.io.File[] getFileSystemRoots();
  public static boolean hasFileSystemRoot(java.lang.String);
  public static java.lang.String addPathSeparator(java.lang.String);
  public static java.lang.String getWorkingDirectory();
  public static java.lang.String getParentPath(java.lang.String);
  public static java.io.File getParentFile(java.io.File);
  public static java.io.File getNextExistingParentDirectory(java.io.File);
  public static java.lang.String getNextExistingParentDirectory(java.lang.String);
  public static boolean isParentOf(java.io.File, java.io.File);
  public static boolean isParentOf(java.lang.String, java.lang.String);
  public static boolean isChildOf(java.io.File, java.io.File);
  public static boolean isChildOf(java.lang.String, java.lang.String);
  public static void writeStringToFile(java.lang.String, java.lang.StringBuilder);
}
Compiled from "FileUtilError.java"
public class ch.thn.util.file.FileUtilError extends java.lang.Error {
  public ch.thn.util.file.FileUtilError(java.lang.String);
  public ch.thn.util.file.FileUtilError(java.lang.String, java.lang.Throwable);
}
Compiled from "PathWatcher.java"
public class ch.thn.util.file.PathWatcher extends ch.thn.util.thread.ControlledRunnable {
  public ch.thn.util.file.PathWatcher();
  public ch.thn.util.file.PathWatcher(long);
  public ch.thn.util.file.PathWatcher(long, java.io.FilenameFilter);
  public java.util.Collection<java.nio.file.Path> getWatchedPaths();
  public void addPathWatcherListener(ch.thn.util.file.PathWatcher$PathWatcherListener);
  public void removePathWatcherListener(ch.thn.util.file.PathWatcher$PathWatcherListener);
  public void firePathWatcherListener(java.nio.file.WatchEvent$Kind<?>, java.nio.file.Path, java.nio.file.Path, boolean);
  public void fireNewPathWatched(java.nio.file.Path);
  public void clearAllRegisteredPaths();
  public boolean registerPath(java.nio.file.Path, boolean, boolean);
  public boolean registerPath(java.lang.String, boolean, boolean);
  public boolean registerPath(java.lang.String);
  public boolean registerPath(java.nio.file.Path);
  static <T> java.nio.file.WatchEvent<T> cast(java.nio.file.WatchEvent<?>);
  public void run();
  public void stop();
  public void stop(boolean);
  static boolean access$000(ch.thn.util.file.PathWatcher, java.nio.file.Path, boolean);
  static org.slf4j.Logger access$100();
  static {};
}
Compiled from "PathWatcher.java"
class ch.thn.util.file.PathWatcher$1 extends java.nio.file.SimpleFileVisitor<java.nio.file.Path> {
  final ch.thn.util.file.PathWatcher this$0;
  ch.thn.util.file.PathWatcher$1(ch.thn.util.file.PathWatcher);
  public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes);
  public java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;
}
Compiled from "PathWatcher.java"
public class ch.thn.util.file.PathWatcher$PathWatcherError extends java.lang.Error {
  final ch.thn.util.file.PathWatcher this$0;
  public ch.thn.util.file.PathWatcher$PathWatcherError(ch.thn.util.file.PathWatcher, java.lang.String, java.lang.Throwable);
}
Compiled from "PathWatcher.java"
public interface ch.thn.util.file.PathWatcher$PathWatcherListener {
  public abstract void newPathWatched(java.nio.file.Path);
  public abstract void pathChanged(java.nio.file.Path, java.nio.file.Path, boolean);
  public abstract void directoryCreated(java.nio.file.Path, java.nio.file.Path);
  public abstract void directoryDeleted(java.nio.file.Path, java.nio.file.Path);
  public abstract void directoryModified(java.nio.file.Path, java.nio.file.Path);
}
Compiled from "PathWatcher.java"
public class ch.thn.util.file.PathWatcher$WK implements java.nio.file.WatchKey {
  final ch.thn.util.file.PathWatcher this$0;
  public ch.thn.util.file.PathWatcher$WK(ch.thn.util.file.PathWatcher);
  public void cancel();
  public boolean isValid();
  public java.util.List<java.nio.file.WatchEvent<?>> pollEvents();
  public boolean reset();
  public java.nio.file.Watchable watchable();
}
Compiled from "PollingWatchService.java"
public class ch.thn.util.file.PollingWatchService extends ch.thn.util.thread.ControlledRunnable implements java.nio.file.WatchService {
  protected ch.thn.util.file.PollingWatchService(long);
  protected ch.thn.util.file.PollingWatchService(long, java.io.FilenameFilter);
  public void run();
  public void close() throws java.io.IOException;
  public java.nio.file.WatchKey poll();
  public java.nio.file.WatchKey poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public java.nio.file.WatchKey take() throws java.lang.InterruptedException;
  public ch.thn.util.file.PollingWatchService$PollingWatchKey register(java.nio.file.Path);
}
Compiled from "PollingWatchService.java"
public class ch.thn.util.file.PollingWatchService$PollingWatchEvent implements java.nio.file.WatchEvent<java.nio.file.Path> {
  final ch.thn.util.file.PollingWatchService this$0;
  public ch.thn.util.file.PollingWatchService$PollingWatchEvent(java.nio.file.Path, java.nio.file.WatchEvent$Kind<java.nio.file.Path>);
  public java.nio.file.Path context();
  public int count();
  public java.nio.file.WatchEvent$Kind<java.nio.file.Path> kind();
  public java.lang.Object context();
}
Compiled from "PollingWatchService.java"
public class ch.thn.util.file.PollingWatchService$PollingWatchKey implements java.nio.file.WatchKey {
  final ch.thn.util.file.PollingWatchService this$0;
  public ch.thn.util.file.PollingWatchService$PollingWatchKey(ch.thn.util.file.PollingWatchService);
  public synchronized void addWatchEvent(ch.thn.util.file.PollingWatchService$PollingWatchEvent);
  public synchronized void cancel();
  public boolean isValid();
  public synchronized java.util.List<java.nio.file.WatchEvent<?>> pollEvents();
  public synchronized boolean reset();
  public java.nio.file.Watchable watchable();
}
Compiled from "SingleInstanceLock.java"
public class ch.thn.util.file.SingleInstanceLock {
  public ch.thn.util.file.SingleInstanceLock();
  public static void setApplicationId(java.lang.String);
  public static void setLockFileDirectory(java.lang.String);
  public static java.io.File getLockFile();
  public static boolean lock() throws ch.thn.util.file.SingleInstanceLock$SingleInstanceLockError;
  public static void release(boolean);
  static {};
}
Compiled from "SingleInstanceLock.java"
class ch.thn.util.file.SingleInstanceLock$SingleInstanceLockError extends java.lang.Error {
  public ch.thn.util.file.SingleInstanceLock$SingleInstanceLockError(java.lang.String);
  public ch.thn.util.file.SingleInstanceLock$SingleInstanceLockError(java.lang.String, java.lang.Throwable);
}
Compiled from "SingleInstanceLock.java"
class ch.thn.util.file.SingleInstanceLock$SingleInstanceLockShutdownHook extends java.lang.Thread {
  public ch.thn.util.file.SingleInstanceLock$SingleInstanceLockShutdownHook();
  public void run();
}
Compiled from "HtmlUtil.java"
public class ch.thn.util.html.HtmlUtil {
  public ch.thn.util.html.HtmlUtil();
  public static java.lang.String textHtml(java.lang.String);
  public static java.lang.String textBold(java.lang.String);
  public static java.lang.String textItalic(java.lang.String);
  public static java.lang.String textUnderline(java.lang.String);
}
Compiled from "ObjectTree.java"
public class ch.thn.util.object.ObjectTree<V> extends ch.thn.util.tree.ListTreeNode<V> {
  public ch.thn.util.object.ObjectTree(java.lang.Object);
  public void registerProcessor(ch.thn.util.object.ObjectTreeProcessor<?>);
  public void buildTree();
  public void buildTree(int);
  protected V newObject(java.lang.Object);
}
Compiled from "ObjectTreeProcessor.java"
public abstract class ch.thn.util.object.ObjectTreeProcessor<C> {
  public ch.thn.util.object.ObjectTreeProcessor(java.lang.Class<C>);
  public java.lang.Class<C> getInternalClass();
  public abstract java.util.List<?> getInternalObjects(C);
  protected java.util.List<java.lang.Object> createSingleItemList(java.lang.Object);
}
Compiled from "ObjectTreeTest.java"
public class ch.thn.util.tests.ObjectTreeTest {
  public ch.thn.util.tests.ObjectTreeTest();
  public static void main(java.lang.String[]);
}
Compiled from "ObjectTreeTest.java"
public class ch.thn.util.tests.ObjectTreeTest$RecorderObject {
  public ch.thn.util.tests.ObjectTreeTest$RecorderObject(java.lang.Object);
  public java.lang.Object getObject();
  public java.lang.String toString();
  static java.lang.Object access$000(ch.thn.util.tests.ObjectTreeTest$RecorderObject);
}
Compiled from "ObjectTreeTest.java"
class ch.thn.util.tests.ObjectTreeTest$TestObject {
  protected java.lang.Object obj1;
  protected java.lang.Object obj2;
  public ch.thn.util.tests.ObjectTreeTest$TestObject();
}
Compiled from "ObjectTreeTest.java"
class ch.thn.util.tests.ObjectTreeTest$TestObjectProcessor extends ch.thn.util.object.ObjectTreeProcessor<ch.thn.util.tests.ObjectTreeTest$TestObject> {
  public ch.thn.util.tests.ObjectTreeTest$TestObjectProcessor();
  public java.util.List<?> getInternalObjects(ch.thn.util.tests.ObjectTreeTest$TestObject);
  public java.util.List getInternalObjects(java.lang.Object);
}
Compiled from "ObjectTreeTest.java"
public class ch.thn.util.tests.ObjectTreeTest$TestObjectTree extends ch.thn.util.object.ObjectTree<ch.thn.util.tests.ObjectTreeTest$RecorderObject> {
  public ch.thn.util.tests.ObjectTreeTest$TestObjectTree(java.lang.Object);
  protected ch.thn.util.tests.ObjectTreeTest$RecorderObject newObject(java.lang.Object);
  protected java.lang.Object newObject(java.lang.Object);
}
Compiled from "PathWatcherTest.java"
public class ch.thn.util.tests.PathWatcherTest {
  public ch.thn.util.tests.PathWatcherTest();
  public static void main(java.lang.String[]);
}
Compiled from "PathWatcherTest.java"
public class ch.thn.util.tests.PathWatcherTest$PathWatcherEventListener implements ch.thn.util.file.PathWatcher$PathWatcherListener {
  public ch.thn.util.tests.PathWatcherTest$PathWatcherEventListener();
  public void newPathWatched(java.nio.file.Path);
  public void pathChanged(java.nio.file.Path, java.nio.file.Path, boolean);
  public void directoryCreated(java.nio.file.Path, java.nio.file.Path);
  public void directoryDeleted(java.nio.file.Path, java.nio.file.Path);
  public void directoryModified(java.nio.file.Path, java.nio.file.Path);
}
Compiled from "SingleInstanceLockTest.java"
public class ch.thn.util.tests.SingleInstanceLockTest {
  public ch.thn.util.tests.SingleInstanceLockTest();
  public static void main(java.lang.String[]);
}
Compiled from "TestKeyComparator.java"
public class ch.thn.util.tests.TestKeyComparator implements java.util.Comparator<java.lang.String> {
  public ch.thn.util.tests.TestKeyComparator();
  public int compare(java.lang.String, java.lang.String);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "TestValueComparator.java"
public class ch.thn.util.tests.TestValueComparator implements java.util.Comparator<java.lang.String> {
  public ch.thn.util.tests.TestValueComparator();
  public int compare(java.lang.String, java.lang.String);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "TreeTest.java"
public class ch.thn.util.tests.TreeTest {
  public ch.thn.util.tests.TreeTest();
  public static void main(java.lang.String[]);
}
Compiled from "TreeTest.java"
final class ch.thn.util.tests.TreeTest$1 implements java.util.Comparator<java.lang.Integer> {
  ch.thn.util.tests.TreeTest$1();
  public int compare(java.lang.Integer, java.lang.Integer);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "TreeTest.java"
class ch.thn.util.tests.TreeTest$TestTreeNodeListener implements ch.thn.util.tree.TreeNodeListener<ch.thn.util.tree.ListTreeNode<java.lang.String>> {
  public void nodeRemoved(ch.thn.util.tree.TreeNodeEvent<ch.thn.util.tree.ListTreeNode<java.lang.String>>);
  public void nodeAdded(ch.thn.util.tree.TreeNodeEvent<ch.thn.util.tree.ListTreeNode<java.lang.String>>);
  public void nodeReplaced(ch.thn.util.tree.TreeNodeEvent<ch.thn.util.tree.ListTreeNode<java.lang.String>>);
  public void nodeValueChanged(ch.thn.util.tree.TreeNodeEvent<ch.thn.util.tree.ListTreeNode<java.lang.String>>);
  ch.thn.util.tests.TreeTest$TestTreeNodeListener(ch.thn.util.tests.TreeTest$1);
}
Compiled from "UtilTest.java"
public class ch.thn.util.tests.UtilTest {
  public ch.thn.util.tests.UtilTest();
  public static void main(java.lang.String[]);
}
Compiled from "ControlledRunnable.java"
public abstract class ch.thn.util.thread.ControlledRunnable implements java.lang.Runnable {
  protected ch.thn.util.thread.ControlledRunnable(boolean, boolean);
  public void addControlledRunnableListener(ch.thn.util.thread.ControlledRunnable$ControlledRunnableListener);
  public void removeControlledRunnableListener(ch.thn.util.thread.ControlledRunnable$ControlledRunnableListener);
  public boolean isRunning();
  public void pause(long);
  public void pause(long, boolean);
  public void pause(boolean);
  public void pause(boolean, boolean);
  protected boolean isPauseRequested();
  protected void runPause(boolean);
  public boolean isPaused();
  public boolean willPause();
  protected void controlledWait(long);
  protected void controlledWait();
  public void stop();
  public void stop(boolean);
  protected boolean isStopRequested();
  public boolean willStop();
  public boolean isStopped();
  protected void runStart();
  protected void runEnd();
  public void reset();
  protected void runReset();
  protected boolean isResetRequested();
  public boolean willReset();
}
Compiled from "ControlledRunnable.java"
public class ch.thn.util.thread.ControlledRunnable$ControlledRunnableError extends java.lang.Error {
  public ch.thn.util.thread.ControlledRunnable$ControlledRunnableError(java.lang.String);
}
Compiled from "ControlledRunnable.java"
public class ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent extends java.util.EventObject {
  public ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent(java.lang.Object, ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE);
  public ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE getStateType();
}
Compiled from "ControlledRunnable.java"
public final class ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE extends java.lang.Enum<ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE> {
  public static final ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE RUNNING;
  public static final ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE PAUSED;
  public static final ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE RESET;
  public static final ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE WAIT;
  public static ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE[] values();
  public static ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent$STATETYPE valueOf(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "ControlledRunnable.java"
public interface ch.thn.util.thread.ControlledRunnable$ControlledRunnableListener {
  public abstract void runnableStateChanged(ch.thn.util.thread.ControlledRunnable$ControlledRunnableEvent);
}
Compiled from "RepeatingRunnable.java"
public abstract class ch.thn.util.thread.RepeatingRunnable extends ch.thn.util.thread.ControlledRunnable {
  protected ch.thn.util.thread.RepeatingRunnable();
  public void go(int, boolean);
  public void go(int);
  public void go();
  public abstract boolean execute();
  public void run();
}
Compiled from "KeyListTreeNode.java"
public class ch.thn.util.tree.KeyListTreeNode<K, V> extends ch.thn.util.tree.core.AbstractGenericKeyListTreeNode<K, V, ch.thn.util.tree.KeyListTreeNode<K, V>> {
  public ch.thn.util.tree.KeyListTreeNode(K, V);
  public ch.thn.util.tree.KeyListTreeNode<K, V> nodeFactory(K, V);
  public ch.thn.util.tree.KeyListTreeNode<K, V> nodeFactory(V);
  public ch.thn.util.tree.KeyListTreeNode<K, V> nodeFactory(ch.thn.util.tree.KeyListTreeNode<K, V>);
  protected ch.thn.util.tree.KeyListTreeNode<K, V> internalGetThis();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericMapTreeNode nodeFactory(java.lang.Object, java.lang.Object);
  protected ch.thn.util.tree.core.AbstractGenericMapTreeNode internalGetThis();
  public ch.thn.util.tree.core.MapTreeNodeInterface nodeFactory(java.lang.Object, java.lang.Object);
  protected ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalGetThis();
}
Compiled from "KeySetTreeNode.java"
public class ch.thn.util.tree.KeySetTreeNode<K, V> extends ch.thn.util.tree.core.AbstractGenericKeySetTreeNode<K, V, ch.thn.util.tree.KeySetTreeNode<K, V>> {
  public ch.thn.util.tree.KeySetTreeNode(java.util.Comparator<? super K>, java.util.Comparator<? super ch.thn.util.tree.KeySetTreeNode<K, V>>, K, V);
  public ch.thn.util.tree.KeySetTreeNode(K, V);
  public ch.thn.util.tree.KeySetTreeNode<K, V> nodeFactory(K, V);
  public ch.thn.util.tree.KeySetTreeNode<K, V> nodeFactory(V);
  public ch.thn.util.tree.KeySetTreeNode<K, V> nodeFactory(ch.thn.util.tree.KeySetTreeNode<K, V>);
  protected ch.thn.util.tree.KeySetTreeNode<K, V> internalGetThis();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericMapTreeNode nodeFactory(java.lang.Object, java.lang.Object);
  protected ch.thn.util.tree.core.AbstractGenericMapTreeNode internalGetThis();
  public ch.thn.util.tree.core.MapTreeNodeInterface nodeFactory(java.lang.Object, java.lang.Object);
  protected ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalGetThis();
}
Compiled from "ListTreeIterator.java"
public class ch.thn.util.tree.ListTreeIterator<N extends ch.thn.util.tree.core.ListTreeNodeInterface<?, N>> extends ch.thn.util.tree.core.AbstractGenericTreeIterator<N, java.util.ListIterator<N>> implements java.util.ListIterator<N> {
  public ch.thn.util.tree.ListTreeIterator(N);
  public ch.thn.util.tree.ListTreeIterator(N, boolean);
  protected java.util.ListIterator<N> getIterator(java.util.Collection<N>);
  protected java.util.ListIterator<N> positionIterator(java.util.Collection<N>, N);
  public boolean hasPrevious();
  public N previous();
  public N next();
  public int previousIndex();
  public int nextIndex();
  public void add(N);
  public void set(N);
  public N peekPrevious();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface next();
  protected java.util.Iterator positionIterator(java.util.Collection, ch.thn.util.tree.core.CollectionTreeNodeInterface);
  protected java.util.Iterator getIterator(java.util.Collection);
  public java.lang.Object next();
  public void add(java.lang.Object);
  public void set(java.lang.Object);
  public java.lang.Object previous();
}
Compiled from "ListTreeNode.java"
public class ch.thn.util.tree.ListTreeNode<V> extends ch.thn.util.tree.core.AbstractGenericListTreeNode<V, ch.thn.util.tree.ListTreeNode<V>> {
  public ch.thn.util.tree.ListTreeNode(V);
  public ch.thn.util.tree.ListTreeNode<V> nodeFactory(V);
  public ch.thn.util.tree.ListTreeNode<V> nodeFactory(ch.thn.util.tree.ListTreeNode<V>);
  protected ch.thn.util.tree.ListTreeNode<V> internalGetThis();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(java.lang.Object);
  protected ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalGetThis();
}
Compiled from "SetTreeNode.java"
public class ch.thn.util.tree.SetTreeNode<V> extends ch.thn.util.tree.core.AbstractGenericSetTreeNode<V, ch.thn.util.tree.SetTreeNode<V>> {
  public ch.thn.util.tree.SetTreeNode(java.util.Comparator<? super ch.thn.util.tree.SetTreeNode<V>>, V);
  public ch.thn.util.tree.SetTreeNode(V);
  public ch.thn.util.tree.SetTreeNode<V> nodeFactory(V);
  public ch.thn.util.tree.SetTreeNode<V> nodeFactory(ch.thn.util.tree.SetTreeNode<V>);
  public ch.thn.util.tree.SetTreeNode<V> internalGetThis();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalGetThis();
}
Compiled from "TreeIterator.java"
public class ch.thn.util.tree.TreeIterator<N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> extends ch.thn.util.tree.core.AbstractGenericTreeIterator<N, java.util.Iterator<N>> {
  public ch.thn.util.tree.TreeIterator(N);
  protected java.util.Iterator<N> getIterator(java.util.Collection<N>);
  protected java.util.Iterator<N> positionIterator(java.util.Collection<N>, N);
}
Compiled from "TreeNodeEvent.java"
public class ch.thn.util.tree.TreeNodeEvent<N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> extends java.util.EventObject {
  public ch.thn.util.tree.TreeNodeEvent(N, N);
  public ch.thn.util.tree.TreeNodeEvent(N, N, N, int);
  public ch.thn.util.tree.TreeNodeEvent(N, N, N, N, int);
  public N getNode();
  public N getOldNode();
  public N getParentNodeOfRemoved();
  public int getNodeIndexOfRemoved();
}
Compiled from "TreeNodeListener.java"
public interface ch.thn.util.tree.TreeNodeListener<N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> extends java.util.EventListener {
  public abstract void nodeRemoved(ch.thn.util.tree.TreeNodeEvent<N>);
  public abstract void nodeAdded(ch.thn.util.tree.TreeNodeEvent<N>);
  public abstract void nodeReplaced(ch.thn.util.tree.TreeNodeEvent<N>);
  public abstract void nodeValueChanged(ch.thn.util.tree.TreeNodeEvent<N>);
}
Compiled from "TreeUtil.java"
public class ch.thn.util.tree.TreeUtil {
  public ch.thn.util.tree.TreeUtil();
  public static <N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> N copyTree(N);
  public static <N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> int highestNodeLevel(N);
  public static <N extends ch.thn.util.tree.core.ListTreeNodeInterface<?, N>> N getLastLeafNode(N);
  public static <N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> N getLastLeafNode(N);
}
Compiled from "AbstractGenericCollectionTreeNode.java"
public abstract class ch.thn.util.tree.core.AbstractGenericCollectionTreeNode<V, N extends ch.thn.util.tree.core.AbstractGenericCollectionTreeNode<V, N, C>, C extends java.util.Collection<N>> implements ch.thn.util.tree.core.CollectionTreeNodeInterface<V, N>, java.lang.Iterable<N> {
  public ch.thn.util.tree.core.AbstractGenericCollectionTreeNode(C, V);
  protected abstract N internalGetThis();
  protected C internalGetChildren();
  protected void internalSetChildrenCollection(C);
  protected void internalSetParentNode(N);
  public void addTreeNodeListener(ch.thn.util.tree.TreeNodeListener<N>);
  public void removeTreeNodeListener(ch.thn.util.tree.TreeNodeListener<N>);
  protected int getFormerNodeIndex();
  protected void fireNodeRemoved(N);
  protected void fireNodeAdded(N);
  protected void fireNodeValueChanged(N);
  public N addChildNode(N);
  protected N internalAddChildNode(N, boolean);
  public N addChildNodeCopy(N);
  public boolean addChildNodes(java.util.Collection<N>);
  public void removeChildNodes();
  protected void internalRemoveChildNodes(boolean);
  protected void preserveNodeInfo();
  protected N getFormerParentNode();
  public int getChildNodesCount();
  public N getParentNode();
  public N getHeadNode();
  public V getNodeValue();
  public void setNodeValue(V);
  public N addChildNode(V);
  public boolean removeNode();
  public boolean removeChildNode(N);
  protected boolean internalRemoveChildNode(N, boolean);
  public N replaceNode(V);
  public N replaceNode(N);
  protected void switchChildNodes(N, N);
  public N getRootNode();
  public boolean isRootNode();
  public boolean isLeafNode();
  public int getNodeDepth();
  public ch.thn.util.tree.TreeIterator<N> iterator();
  public ch.thn.util.tree.TreeIterator<N> iterator(boolean);
  public java.lang.String toString();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface getRootNode();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface replaceNode(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface replaceNode(java.lang.Object);
  public boolean removeChildNode(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface addChildNode(java.lang.Object);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface getHeadNode();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface getParentNode();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface addChildNodeCopy(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface addChildNode(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public java.util.Iterator iterator();
}
Compiled from "AbstractGenericKeyListTreeNode.java"
public abstract class ch.thn.util.tree.core.AbstractGenericKeyListTreeNode<K, V, N extends ch.thn.util.tree.core.AbstractGenericKeyListTreeNode<K, V, N>> extends ch.thn.util.tree.core.AbstractGenericMapTreeNode<K, V, N, java.util.List<N>> implements ch.thn.util.tree.core.ListTreeNodeInterface<V, N> {
  public ch.thn.util.tree.core.AbstractGenericKeyListTreeNode(K, V);
  public N addChildNodeAt(int, N);
  public java.util.List<N> getChildNodes();
  public N getChildNode(K, int);
  public N addChildNodeCopyAt(int, N);
  public boolean addChildNodesAt(int, java.util.Collection<N>);
  public N addChildNodeAt(int, V);
  public N getChildNode(int);
  public N getFirstChildNode();
  public N getLastChildNode();
  public N getFirstSibling();
  public N getLastSibling();
  public N getNextSibling();
  public N getPreviousSibling();
  public N removeChildNode(int);
  public boolean removeChildNode(N);
  public boolean removeNode();
  public void removeChildNodes();
  protected void preserveNodeInfo();
  protected int getFormerNodeIndex();
  public int getNodeIndex();
  public int getChildNodeIndex(N);
  public boolean isFirstNode();
  public boolean isLastNode();
  public ch.thn.util.tree.ListTreeIterator<N> listIterator();
  public ch.thn.util.tree.ListTreeIterator<N> listIterator(boolean);
  public java.util.Collection getChildNodes();
  public boolean removeChildNode(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public boolean removeChildNode(ch.thn.util.tree.core.AbstractGenericCollectionTreeNode);
  public int getChildNodeIndex(ch.thn.util.tree.core.ListTreeNodeInterface);
  public ch.thn.util.tree.core.ListTreeNodeInterface removeChildNode(int);
  public ch.thn.util.tree.core.ListTreeNodeInterface getPreviousSibling();
  public ch.thn.util.tree.core.ListTreeNodeInterface getNextSibling();
  public ch.thn.util.tree.core.ListTreeNodeInterface getLastSibling();
  public ch.thn.util.tree.core.ListTreeNodeInterface getFirstSibling();
  public ch.thn.util.tree.core.ListTreeNodeInterface getLastChildNode();
  public ch.thn.util.tree.core.ListTreeNodeInterface getFirstChildNode();
  public ch.thn.util.tree.core.ListTreeNodeInterface getChildNode(int);
  public ch.thn.util.tree.core.ListTreeNodeInterface addChildNodeAt(int, java.lang.Object);
  public ch.thn.util.tree.core.ListTreeNodeInterface addChildNodeCopyAt(int, ch.thn.util.tree.core.ListTreeNodeInterface);
  public ch.thn.util.tree.core.ListTreeNodeInterface addChildNodeAt(int, ch.thn.util.tree.core.ListTreeNodeInterface);
}
Compiled from "AbstractGenericKeySetTreeNode.java"
public abstract class ch.thn.util.tree.core.AbstractGenericKeySetTreeNode<K, V, N extends ch.thn.util.tree.core.AbstractGenericKeySetTreeNode<K, V, N>> extends ch.thn.util.tree.core.AbstractGenericMapTreeNode<K, V, N, java.util.Collection<N>> implements ch.thn.util.tree.core.SetTreeNodeInterface<V, N> {
  public ch.thn.util.tree.core.AbstractGenericKeySetTreeNode(K, V);
  public ch.thn.util.tree.core.AbstractGenericKeySetTreeNode(java.util.Comparator<? super K>, java.util.Comparator<? super N>, K, V);
  public java.util.Comparator<? super K> getKeyComparator();
  public java.util.Comparator<? super N> getValueComparator();
}
Compiled from "AbstractGenericKeySetTreeNode.java"
class ch.thn.util.tree.core.AbstractGenericKeySetTreeNode$1 implements java.util.Comparator<K> {
  final ch.thn.util.tree.core.AbstractGenericKeySetTreeNode this$0;
  ch.thn.util.tree.core.AbstractGenericKeySetTreeNode$1(ch.thn.util.tree.core.AbstractGenericKeySetTreeNode);
  public int compare(K, K);
}
Compiled from "AbstractGenericKeySetTreeNode.java"
class ch.thn.util.tree.core.AbstractGenericKeySetTreeNode$2 implements java.util.Comparator<N> {
  final ch.thn.util.tree.core.AbstractGenericKeySetTreeNode this$0;
  ch.thn.util.tree.core.AbstractGenericKeySetTreeNode$2(ch.thn.util.tree.core.AbstractGenericKeySetTreeNode);
  public int compare(N, N);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "AbstractGenericListTreeNode.java"
public abstract class ch.thn.util.tree.core.AbstractGenericListTreeNode<V, N extends ch.thn.util.tree.core.AbstractGenericListTreeNode<V, N>> extends ch.thn.util.tree.core.AbstractGenericCollectionTreeNode<V, N, java.util.List<N>> implements ch.thn.util.tree.core.ListTreeNodeInterface<V, N> {
  public ch.thn.util.tree.core.AbstractGenericListTreeNode(V);
  public java.util.List<N> getChildNodes();
  public N addChildNodeAt(int, N);
  public N addChildNodeCopyAt(int, N);
  public boolean addChildNodesAt(int, java.util.Collection<N>);
  public N addChildNodeAt(int, V);
  public N getChildNode(int);
  public N getFirstChildNode();
  public N getLastChildNode();
  public N getFirstSibling();
  public N getLastSibling();
  public N getNextSibling();
  public N getPreviousSibling();
  public N removeChildNode(int);
  public boolean removeChildNode(N);
  public boolean removeNode();
  public void removeChildNodes();
  protected void preserveNodeInfo();
  protected int getFormerNodeIndex();
  public int getNodeIndex();
  public int getChildNodeIndex(N);
  public boolean isFirstNode();
  public boolean isLastNode();
  public ch.thn.util.tree.ListTreeIterator<N> listIterator();
  public ch.thn.util.tree.ListTreeIterator<N> listIterator(boolean);
  public boolean removeChildNode(ch.thn.util.tree.core.AbstractGenericCollectionTreeNode);
  public boolean removeChildNode(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public java.util.Collection getChildNodes();
  public int getChildNodeIndex(ch.thn.util.tree.core.ListTreeNodeInterface);
  public ch.thn.util.tree.core.ListTreeNodeInterface removeChildNode(int);
  public ch.thn.util.tree.core.ListTreeNodeInterface getPreviousSibling();
  public ch.thn.util.tree.core.ListTreeNodeInterface getNextSibling();
  public ch.thn.util.tree.core.ListTreeNodeInterface getLastSibling();
  public ch.thn.util.tree.core.ListTreeNodeInterface getFirstSibling();
  public ch.thn.util.tree.core.ListTreeNodeInterface getLastChildNode();
  public ch.thn.util.tree.core.ListTreeNodeInterface getFirstChildNode();
  public ch.thn.util.tree.core.ListTreeNodeInterface getChildNode(int);
  public ch.thn.util.tree.core.ListTreeNodeInterface addChildNodeAt(int, java.lang.Object);
  public ch.thn.util.tree.core.ListTreeNodeInterface addChildNodeCopyAt(int, ch.thn.util.tree.core.ListTreeNodeInterface);
  public ch.thn.util.tree.core.ListTreeNodeInterface addChildNodeAt(int, ch.thn.util.tree.core.ListTreeNodeInterface);
}
Compiled from "AbstractGenericMapTreeNode.java"
public abstract class ch.thn.util.tree.core.AbstractGenericMapTreeNode<K, V, N extends ch.thn.util.tree.core.AbstractGenericMapTreeNode<K, V, N, C>, C extends java.util.Collection<N>> extends ch.thn.util.tree.core.AbstractGenericCollectionTreeNode<V, N, C> implements ch.thn.util.tree.core.MapTreeNodeInterface<K, V, N> {
  public ch.thn.util.tree.core.AbstractGenericMapTreeNode(com.google.common.collect.LinkedListMultimap<K, N>, K, V);
  protected abstract N internalGetThis();
  protected void internalSetChildrenMap(com.google.common.collect.Multimap<K, N>);
  protected void internalSetNodeKey(K);
  protected com.google.common.collect.Multimap<K, N> internalGetMap();
  protected C internalGetChildren(K);
  public abstract N nodeFactory(K, V);
  public K getNodeKey();
  public java.util.Collection<N> getChildNodes(K);
  public java.util.Collection<N> getChildNodes();
  public N addChildNode(N);
  protected N internalAddChildNode(N, boolean);
  public N addChildNode(V);
  public N addChildNode(K, V);
  public N addChildNodeCopy(N);
  public boolean addChildNodes(java.util.Collection<N>);
  public boolean addChildNodes(com.google.common.collect.Multimap<K, N>);
  public java.util.Collection<N> removeChildNodes(K);
  public boolean removeChildNode(K, N);
  public N replaceNode(K, V);
  public int getChildNodesCount(K);
  public java.util.Set<K> getChildNodeKeys();
  public boolean hasChildNodes(K);
  public java.lang.String toString();
  public ch.thn.util.tree.core.AbstractGenericCollectionTreeNode addChildNode(java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericCollectionTreeNode addChildNodeCopy(ch.thn.util.tree.core.AbstractGenericCollectionTreeNode);
  protected ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalAddChildNode(ch.thn.util.tree.core.AbstractGenericCollectionTreeNode, boolean);
  public ch.thn.util.tree.core.AbstractGenericCollectionTreeNode addChildNode(ch.thn.util.tree.core.AbstractGenericCollectionTreeNode);
  protected ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalGetThis();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface addChildNode(java.lang.Object);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface addChildNodeCopy(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface addChildNode(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public boolean removeChildNode(java.lang.Object, ch.thn.util.tree.core.MapTreeNodeInterface);
  public ch.thn.util.tree.core.MapTreeNodeInterface addChildNode(java.lang.Object, java.lang.Object);
  public ch.thn.util.tree.core.MapTreeNodeInterface nodeFactory(java.lang.Object, java.lang.Object);
}
Compiled from "AbstractGenericSetTreeNode.java"
public abstract class ch.thn.util.tree.core.AbstractGenericSetTreeNode<V, N extends ch.thn.util.tree.core.AbstractGenericSetTreeNode<V, N>> extends ch.thn.util.tree.core.AbstractGenericCollectionTreeNode<V, N, com.google.common.collect.SortedMultiset<N>> implements ch.thn.util.tree.core.SetTreeNodeInterface<V, N> {
  public ch.thn.util.tree.core.AbstractGenericSetTreeNode(V);
  public ch.thn.util.tree.core.AbstractGenericSetTreeNode(java.util.Comparator<? super N>, V);
  public java.util.Comparator<? super N> getComparator();
  public com.google.common.collect.SortedMultiset<N> getChildNodes();
  public java.util.Collection getChildNodes();
}
Compiled from "AbstractGenericSetTreeNode.java"
class ch.thn.util.tree.core.AbstractGenericSetTreeNode$1 implements java.util.Comparator<N> {
  final ch.thn.util.tree.core.AbstractGenericSetTreeNode this$0;
  ch.thn.util.tree.core.AbstractGenericSetTreeNode$1(ch.thn.util.tree.core.AbstractGenericSetTreeNode);
  public int compare(N, N);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "AbstractGenericTreeIterator.java"
public abstract class ch.thn.util.tree.core.AbstractGenericTreeIterator<N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>, I extends java.util.Iterator<N>> implements java.util.Iterator<N> {
  protected N startNode;
  protected N lastReturned;
  protected java.util.LinkedList<I> iterators;
  protected boolean subtreeOnly;
  public ch.thn.util.tree.core.AbstractGenericTreeIterator(N);
  public ch.thn.util.tree.core.AbstractGenericTreeIterator(N, boolean);
  protected abstract I getIterator(java.util.Collection<N>);
  protected abstract I positionIterator(java.util.Collection<N>, N);
  public boolean hasNext();
  public N next();
  public N peekNext();
  public void remove();
  protected java.util.LinkedList<I> initBranchIterators(N, N);
  public java.lang.Object next();
}
Compiled from "CollectionTreeNodeInterface.java"
public interface ch.thn.util.tree.core.CollectionTreeNodeInterface<V, N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<V, N>> extends java.lang.Iterable<N> {
  public abstract N nodeFactory(V);
  public abstract N nodeFactory(N);
  public abstract void addTreeNodeListener(ch.thn.util.tree.TreeNodeListener<N>);
  public abstract void removeTreeNodeListener(ch.thn.util.tree.TreeNodeListener<N>);
  public abstract java.util.Collection<N> getChildNodes();
  public abstract N addChildNode(N);
  public abstract N addChildNodeCopy(N);
  public abstract boolean addChildNodes(java.util.Collection<N>);
  public abstract void removeChildNodes();
  public abstract int getChildNodesCount();
  public abstract N getParentNode();
  public abstract N getHeadNode();
  public abstract V getNodeValue();
  public abstract void setNodeValue(V);
  public abstract N addChildNode(V);
  public abstract boolean removeNode();
  public abstract boolean removeChildNode(N);
  public abstract N replaceNode(V);
  public abstract N replaceNode(N);
  public abstract N getRootNode();
  public abstract boolean isRootNode();
  public abstract boolean isLeafNode();
  public abstract int getNodeDepth();
  public abstract ch.thn.util.tree.TreeIterator<N> iterator();
  public abstract ch.thn.util.tree.TreeIterator<N> iterator(boolean);
  public java.util.Iterator iterator();
}
Compiled from "ListTreeNodeInterface.java"
public interface ch.thn.util.tree.core.ListTreeNodeInterface<V, N extends ch.thn.util.tree.core.ListTreeNodeInterface<V, N>> extends ch.thn.util.tree.core.CollectionTreeNodeInterface<V, N> {
  public abstract java.util.List<N> getChildNodes();
  public abstract N addChildNodeAt(int, N);
  public abstract N addChildNodeCopyAt(int, N);
  public abstract boolean addChildNodesAt(int, java.util.Collection<N>);
  public abstract N addChildNodeAt(int, V);
  public abstract N getChildNode(int);
  public abstract N getFirstChildNode();
  public abstract N getLastChildNode();
  public abstract N getFirstSibling();
  public abstract N getLastSibling();
  public abstract N getNextSibling();
  public abstract N getPreviousSibling();
  public abstract N removeChildNode(int);
  public abstract int getNodeIndex();
  public abstract int getChildNodeIndex(N);
  public abstract boolean isFirstNode();
  public abstract boolean isLastNode();
  public abstract ch.thn.util.tree.ListTreeIterator<N> listIterator();
  public abstract ch.thn.util.tree.ListTreeIterator<N> listIterator(boolean);
  public java.util.Collection getChildNodes();
}
Compiled from "MapTreeNodeInterface.java"
public interface ch.thn.util.tree.core.MapTreeNodeInterface<K, V, N extends ch.thn.util.tree.core.MapTreeNodeInterface<K, V, N>> extends ch.thn.util.tree.core.CollectionTreeNodeInterface<V, N>, java.lang.Iterable<N> {
  public abstract N nodeFactory(K, V);
  public abstract K getNodeKey();
  public abstract java.util.Collection<N> getChildNodes(K);
  public abstract N addChildNode(K, V);
  public abstract boolean addChildNodes(com.google.common.collect.Multimap<K, N>);
  public abstract java.util.Collection<N> removeChildNodes(K);
  public abstract boolean removeChildNode(K, N);
  public abstract int getChildNodesCount(K);
  public abstract java.util.Set<K> getChildNodeKeys();
  public abstract boolean hasChildNodes(K);
}
Compiled from "SetTreeNodeInterface.java"
public interface ch.thn.util.tree.core.SetTreeNodeInterface<V, N extends ch.thn.util.tree.core.SetTreeNodeInterface<V, N>> extends ch.thn.util.tree.core.CollectionTreeNodeInterface<V, N> {
}
Compiled from "TreeNodeError.java"
public class ch.thn.util.tree.core.TreeNodeError extends java.lang.Error {
  public ch.thn.util.tree.core.TreeNodeError(java.lang.String);
}
Compiled from "OnOffKeyListTreeNode.java"
public class ch.thn.util.tree.onoff.OnOffKeyListTreeNode<K, V> extends ch.thn.util.tree.onoff.core.AbstractGenericOnOffKeyListTreeNode<K, V, ch.thn.util.tree.onoff.OnOffKeyListTreeNode<K, V>> {
  public ch.thn.util.tree.onoff.OnOffKeyListTreeNode(K, V);
  public ch.thn.util.tree.onoff.OnOffKeyListTreeNode<K, V> nodeFactory(V);
  public ch.thn.util.tree.onoff.OnOffKeyListTreeNode<K, V> nodeFactory(ch.thn.util.tree.onoff.OnOffKeyListTreeNode<K, V>);
  public ch.thn.util.tree.onoff.OnOffKeyListTreeNode<K, V> nodeFactory(K, V);
  public ch.thn.util.tree.onoff.OnOffKeyListTreeNode<K, V> internalGetThis();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericMapTreeNode nodeFactory(java.lang.Object, java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericMapTreeNode internalGetThis();
  public ch.thn.util.tree.core.MapTreeNodeInterface nodeFactory(java.lang.Object, java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalGetThis();
}
Compiled from "OnOffKeySetTreeNode.java"
public class ch.thn.util.tree.onoff.OnOffKeySetTreeNode<K, V> extends ch.thn.util.tree.onoff.core.AbstractGenericOnOffKeySetTreeNode<K, V, ch.thn.util.tree.onoff.OnOffKeySetTreeNode<K, V>> {
  public ch.thn.util.tree.onoff.OnOffKeySetTreeNode(java.util.Comparator<? super K>, java.util.Comparator<? super ch.thn.util.tree.onoff.OnOffKeySetTreeNode<K, V>>, K, V);
  public ch.thn.util.tree.onoff.OnOffKeySetTreeNode(K, V);
  public ch.thn.util.tree.onoff.OnOffKeySetTreeNode<K, V> nodeFactory(V);
  public ch.thn.util.tree.onoff.OnOffKeySetTreeNode<K, V> nodeFactory(ch.thn.util.tree.onoff.OnOffKeySetTreeNode<K, V>);
  public ch.thn.util.tree.onoff.OnOffKeySetTreeNode<K, V> nodeFactory(K, V);
  public ch.thn.util.tree.onoff.OnOffKeySetTreeNode<K, V> internalGetThis();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericMapTreeNode nodeFactory(java.lang.Object, java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericMapTreeNode internalGetThis();
  public ch.thn.util.tree.core.MapTreeNodeInterface nodeFactory(java.lang.Object, java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalGetThis();
}
Compiled from "OnOffListTreeNode.java"
public class ch.thn.util.tree.onoff.OnOffListTreeNode<V> extends ch.thn.util.tree.onoff.core.AbstractGenericOnOffListTreeNode<V, ch.thn.util.tree.onoff.OnOffListTreeNode<V>> {
  public ch.thn.util.tree.onoff.OnOffListTreeNode(V);
  public ch.thn.util.tree.onoff.OnOffListTreeNode<V> nodeFactory(V);
  public ch.thn.util.tree.onoff.OnOffListTreeNode<V> nodeFactory(ch.thn.util.tree.onoff.OnOffListTreeNode<V>);
  public ch.thn.util.tree.onoff.OnOffListTreeNode<V> internalGetThis();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalGetThis();
}
Compiled from "OnOffSetTreeNode.java"
public class ch.thn.util.tree.onoff.OnOffSetTreeNode<V> extends ch.thn.util.tree.onoff.core.AbstractGenericOnOffSetTreeNode<V, ch.thn.util.tree.onoff.OnOffSetTreeNode<V>> {
  public ch.thn.util.tree.onoff.OnOffSetTreeNode(java.util.Comparator<? super ch.thn.util.tree.onoff.OnOffSetTreeNode<V>>, V);
  public ch.thn.util.tree.onoff.OnOffSetTreeNode(V);
  public ch.thn.util.tree.onoff.OnOffSetTreeNode<V> nodeFactory(V);
  public ch.thn.util.tree.onoff.OnOffSetTreeNode<V> nodeFactory(ch.thn.util.tree.onoff.OnOffSetTreeNode<V>);
  public ch.thn.util.tree.onoff.OnOffSetTreeNode<V> internalGetThis();
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(ch.thn.util.tree.core.CollectionTreeNodeInterface);
  public ch.thn.util.tree.core.CollectionTreeNodeInterface nodeFactory(java.lang.Object);
  public ch.thn.util.tree.core.AbstractGenericCollectionTreeNode internalGetThis();
}
Compiled from "OnOffTreeUtil.java"
public class ch.thn.util.tree.onoff.OnOffTreeUtil {
  public ch.thn.util.tree.onoff.OnOffTreeUtil();
  public static <N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N> & ch.thn.util.tree.onoff.core.OnOffTreeNodeInterface<N>> java.util.LinkedList<N> convertToSimpleTree(N, boolean, boolean);
  public static <N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N> & ch.thn.util.tree.onoff.core.OnOffTreeNodeInterface<N>> java.util.LinkedList<N> convertToSimpleTree(N, boolean, boolean, ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
}
Compiled from "AbstractGenericOnOffKeyListTreeNode.java"
public abstract class ch.thn.util.tree.onoff.core.AbstractGenericOnOffKeyListTreeNode<K, V, N extends ch.thn.util.tree.onoff.core.AbstractGenericOnOffKeyListTreeNode<K, V, N>> extends ch.thn.util.tree.core.AbstractGenericKeyListTreeNode<K, V, N> implements ch.thn.util.tree.onoff.core.OnOffTreeNodeInterface<N> {
  public ch.thn.util.tree.onoff.core.AbstractGenericOnOffKeyListTreeNode(K, V);
  public N forceNodeVisible(boolean);
  public boolean forceNodeVisible(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N ignoreNode(boolean);
  public boolean isNodeIgnored(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideNode(boolean);
  public boolean isNodeHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideChildNodes(boolean);
  public boolean isChildNodesHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public java.lang.Object hideChildNodes(boolean);
  public java.lang.Object hideNode(boolean);
  public java.lang.Object ignoreNode(boolean);
  public java.lang.Object forceNodeVisible(boolean);
}
Compiled from "AbstractGenericOnOffKeySetTreeNode.java"
public abstract class ch.thn.util.tree.onoff.core.AbstractGenericOnOffKeySetTreeNode<K, V, N extends ch.thn.util.tree.onoff.core.AbstractGenericOnOffKeySetTreeNode<K, V, N>> extends ch.thn.util.tree.core.AbstractGenericKeySetTreeNode<K, V, N> implements ch.thn.util.tree.onoff.core.OnOffTreeNodeInterface<N> {
  public ch.thn.util.tree.onoff.core.AbstractGenericOnOffKeySetTreeNode(java.util.Comparator<? super K>, java.util.Comparator<? super N>, K, V);
  public ch.thn.util.tree.onoff.core.AbstractGenericOnOffKeySetTreeNode(K, V);
  public N forceNodeVisible(boolean);
  public boolean forceNodeVisible(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N ignoreNode(boolean);
  public boolean isNodeIgnored(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideNode(boolean);
  public boolean isNodeHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideChildNodes(boolean);
  public boolean isChildNodesHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public java.lang.Object hideChildNodes(boolean);
  public java.lang.Object hideNode(boolean);
  public java.lang.Object ignoreNode(boolean);
  public java.lang.Object forceNodeVisible(boolean);
}
Compiled from "AbstractGenericOnOffListTreeNode.java"
public abstract class ch.thn.util.tree.onoff.core.AbstractGenericOnOffListTreeNode<V, N extends ch.thn.util.tree.onoff.core.AbstractGenericOnOffListTreeNode<V, N>> extends ch.thn.util.tree.core.AbstractGenericListTreeNode<V, N> implements ch.thn.util.tree.onoff.core.OnOffTreeNodeInterface<N> {
  public ch.thn.util.tree.onoff.core.AbstractGenericOnOffListTreeNode(V);
  public N forceNodeVisible(boolean);
  public boolean forceNodeVisible(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N ignoreNode(boolean);
  public boolean isNodeIgnored(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideNode(boolean);
  public boolean isNodeHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideChildNodes(boolean);
  public boolean isChildNodesHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public java.lang.Object hideChildNodes(boolean);
  public java.lang.Object hideNode(boolean);
  public java.lang.Object ignoreNode(boolean);
  public java.lang.Object forceNodeVisible(boolean);
}
Compiled from "AbstractGenericOnOffSetTreeNode.java"
public abstract class ch.thn.util.tree.onoff.core.AbstractGenericOnOffSetTreeNode<V, N extends ch.thn.util.tree.onoff.core.AbstractGenericOnOffSetTreeNode<V, N>> extends ch.thn.util.tree.core.AbstractGenericSetTreeNode<V, N> implements ch.thn.util.tree.onoff.core.OnOffTreeNodeInterface<N> {
  public ch.thn.util.tree.onoff.core.AbstractGenericOnOffSetTreeNode(java.util.Comparator<? super N>, V);
  public ch.thn.util.tree.onoff.core.AbstractGenericOnOffSetTreeNode(V);
  public N forceNodeVisible(boolean);
  public boolean forceNodeVisible(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N ignoreNode(boolean);
  public boolean isNodeIgnored(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideNode(boolean);
  public boolean isNodeHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideChildNodes(boolean);
  public boolean isChildNodesHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public java.lang.Object hideChildNodes(boolean);
  public java.lang.Object hideNode(boolean);
  public java.lang.Object ignoreNode(boolean);
  public java.lang.Object forceNodeVisible(boolean);
}
Compiled from "OnOffTreeNodeBase.java"
public class ch.thn.util.tree.onoff.core.OnOffTreeNodeBase<N> implements ch.thn.util.tree.onoff.core.OnOffTreeNodeInterface<N> {
  public ch.thn.util.tree.onoff.core.OnOffTreeNodeBase(N);
  public N forceNodeVisible(boolean);
  public boolean forceNodeVisible(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N ignoreNode(boolean);
  public boolean isNodeIgnored(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideNode(boolean);
  public boolean isNodeHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public N hideChildNodes(boolean);
  public boolean isChildNodesHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
}
Compiled from "OnOffTreeNodeInterface.java"
public interface ch.thn.util.tree.onoff.core.OnOffTreeNodeInterface<N> {
  public abstract N forceNodeVisible(boolean);
  public abstract boolean forceNodeVisible(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public abstract N ignoreNode(boolean);
  public abstract boolean isNodeIgnored(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public abstract N hideNode(boolean);
  public abstract boolean isNodeHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
  public abstract N hideChildNodes(boolean);
  public abstract boolean isChildNodesHidden(ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier);
}
Compiled from "OnOffTreeNodeModifier.java"
public interface ch.thn.util.tree.onoff.core.OnOffTreeNodeModifier {
}
Compiled from "TreeNodeCSVPrinter.java"
public class ch.thn.util.tree.printer.TreeNodeCSVPrinter<N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> extends ch.thn.util.tree.printer.generic.CSVTreePrinter<N> {
  public static java.lang.String VALUE_SPLIT;
  public static java.lang.String CSV_SEPARATOR;
  public ch.thn.util.tree.printer.TreeNodeCSVPrinter(boolean);
  protected java.util.Collection<java.lang.String> getNodeValues(N);
  protected java.util.Collection<N> getChildren(N);
  protected java.lang.StringBuilder createPrintableForm(java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<java.lang.String>>);
  protected java.util.Collection getChildren(java.lang.Object);
  protected java.util.Collection getNodeValues(java.lang.Object);
  protected java.lang.Object createPrintableForm(java.util.List);
  static {};
}
Compiled from "TreeNodeDebugPrinter.java"
public class ch.thn.util.tree.printer.TreeNodeDebugPrinter<N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> extends ch.thn.util.tree.printer.generic.PlainTextTreePrinter<N> {
  public static java.lang.String VALUE_SPLIT;
  public ch.thn.util.tree.printer.TreeNodeDebugPrinter();
  protected java.util.Collection<java.lang.String> getNodeValues(N);
  protected java.util.Collection<N> getChildren(N);
  protected java.lang.StringBuilder createPrintableForm(java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<java.lang.String>>);
  protected java.util.Collection getChildren(java.lang.Object);
  protected java.util.Collection getNodeValues(java.lang.Object);
  protected java.lang.Object createPrintableForm(java.util.List);
  static {};
}
Compiled from "TreeNodeHTMLPrinter.java"
public class ch.thn.util.tree.printer.TreeNodeHTMLPrinter<N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> extends ch.thn.util.tree.printer.generic.HTMLTreePrinter<N> {
  public static java.lang.String VALUE_SPLIT;
  public ch.thn.util.tree.printer.TreeNodeHTMLPrinter();
  public ch.thn.util.tree.printer.TreeNodeHTMLPrinter(boolean, boolean);
  protected java.util.Collection<java.lang.String> getNodeValues(N);
  protected java.util.Collection<N> getChildren(N);
  protected java.util.Collection getChildren(java.lang.Object);
  protected java.util.Collection getNodeValues(java.lang.Object);
  static {};
}
Compiled from "TreeNodePlainTextPrinter.java"
public class ch.thn.util.tree.printer.TreeNodePlainTextPrinter<N extends ch.thn.util.tree.core.CollectionTreeNodeInterface<?, N>> extends ch.thn.util.tree.printer.generic.PlainTextTreePrinter<N> {
  public static java.lang.String VALUE_SPLIT;
  public ch.thn.util.tree.printer.TreeNodePlainTextPrinter();
  protected java.util.Collection<java.lang.String> getNodeValues(N);
  protected java.util.Collection<N> getChildren(N);
  protected java.lang.StringBuilder createPrintableForm(java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<java.lang.String>>);
  protected java.util.Collection getChildren(java.lang.Object);
  protected java.util.Collection getNodeValues(java.lang.Object);
  protected java.lang.Object createPrintableForm(java.util.List);
  static {};
}
Compiled from "TreePrinterUtil.java"
public class ch.thn.util.tree.printer.TreePrinterUtil {
  public static final java.lang.String RIGHT_ALIGN_CONNECTOR;
  public static final java.lang.String RIGHT_ALIGN_SPACE;
  public ch.thn.util.tree.printer.TreePrinterUtil();
  public static int getMaxPrefixCount(java.util.List<? extends ch.thn.util.tree.printer.generic.TreePrinterLine<?>>);
  public static int getMaxValueCount(java.util.List<? extends ch.thn.util.tree.printer.generic.TreePrinterLine<?>>);
  public static int getMaxDepth(java.util.List<? extends ch.thn.util.tree.printer.generic.TreePrinterLine<?>>);
  public static void matchLabeledColumns(ch.thn.util.tree.printer.generic.TreePrinterLine<?>, java.lang.Object, java.lang.Object);
  public static void alignValuesRight(java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<java.lang.String>>);
}
Compiled from "CSVTreePrinter.java"
public abstract class ch.thn.util.tree.printer.generic.CSVTreePrinter<N> extends ch.thn.util.tree.printer.generic.PlainTextTreePrinter<N> {
  public ch.thn.util.tree.printer.generic.CSVTreePrinter(boolean);
  protected java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<java.lang.String>> postProcessOutput(java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<java.lang.String>>);
  protected abstract java.lang.StringBuilder createPrintableForm(java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<java.lang.String>>);
  protected java.lang.Object createPrintableForm(java.util.List);
}
Compiled from "GenericTreePrinter.java"
public abstract class ch.thn.util.tree.printer.generic.GenericTreePrinter<N, V, O, R> {
  public ch.thn.util.tree.printer.generic.GenericTreePrinter();
  public O print(N);
  protected abstract java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<V>> createPrinterLines(N, R, int, int, int, int);
  protected java.util.List<java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<V>>> printChildren(N, R, int);
  protected java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<V>> postProcessOutput(java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<V>>);
  protected abstract O createPrintableForm(java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<V>>);
  protected abstract java.util.Collection<V> getNodeValues(N);
  protected abstract java.util.Collection<N> getChildren(N);
}
Compiled from "HTMLTreePrinter.java"
public abstract class ch.thn.util.tree.printer.generic.HTMLTreePrinter<N> extends ch.thn.util.tree.printer.generic.PlainTextTreePrinter<N> {
  public static final java.lang.String CLASS_LINE;
  public static final java.lang.String CLASS_VALUE;
  public ch.thn.util.tree.printer.generic.HTMLTreePrinter();
  public ch.thn.util.tree.printer.generic.HTMLTreePrinter(boolean, boolean);
  protected java.lang.StringBuilder createPrintableForm(java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<java.lang.String>>);
  protected void appendHeaderData(java.lang.StringBuilder);
  public void appendSimpleHeader(java.lang.StringBuilder, java.lang.String, java.lang.String...);
  public void appendSimpleFooter(java.lang.StringBuilder);
  protected java.lang.Object createPrintableForm(java.util.List);
}
Compiled from "PlainTextTreePrinter.java"
public abstract class ch.thn.util.tree.printer.generic.PlainTextTreePrinter<N> extends ch.thn.util.tree.printer.generic.GenericTreePrinter<N, java.lang.String, java.lang.StringBuilder, java.util.List<java.lang.String>> {
  public static java.lang.String LINE_SEPARATOR;
  protected java.lang.String HEAD;
  protected java.lang.String LEFT_SPACE;
  protected java.lang.String FIRST_CHILD;
  protected java.lang.String LAST_NODE;
  protected java.lang.String THROUGH;
  protected java.lang.String AFTEREND;
  protected java.lang.String ADDITIONALLINE_THROUGH;
  protected java.lang.String ADDITIONALLINE_AFTEREND;
  protected java.lang.String ADDITIONALLINE_CONNECTFIRST;
  protected java.lang.String ADDITIONALLINE_CONNECTFIRSTNOCHILD;
  public ch.thn.util.tree.printer.generic.PlainTextTreePrinter();
  protected java.util.List<ch.thn.util.tree.printer.generic.TreePrinterLine<java.lang.String>> createPrinterLines(N, java.util.List<java.lang.String>, int, int, int, int);
  protected java.util.List createPrinterLines(java.lang.Object, java.lang.Object, int, int, int, int);
  static {};
}
Compiled from "TreePrinterLine.java"
public class ch.thn.util.tree.printer.generic.TreePrinterLine<V> extends java.util.ArrayList<V> {
  public static final java.lang.String LABEL_FIRST_VALUE;
  public static final java.lang.String LABEL_LAST_VALUE;
  public static final java.lang.String LABEL_FIRST_PREFIX;
  public static final java.lang.String LABEL_LAST_PREFIX;
  public ch.thn.util.tree.printer.generic.TreePrinterLine(int, int, int, int, int, int);
  public int getSiblingIndex();
  public int getSiblingCount();
  public int getNodeValueIndex();
  public int getNodeValueCount();
  public int getChildrenCount();
  public int getDepth();
  public boolean addWithLabel(V, java.lang.Object);
  public void addWithLabel(int, V, java.lang.Object);
  public void add(int, V);
  public boolean add(V);
  public V getWithLabel(java.lang.Object);
  public int getColumnIndex(java.lang.Object);
  public void setColumnLabel(java.lang.Object, int);
}
Compiled from "ImageAlphaGradient.java"
public class ch.thn.util.valuerange.ImageAlphaGradient extends ch.thn.util.valuerange.ValueRange {
  public static final int FADE_OUT;
  public static final int FADE_IN;
  public static final int ALPHA_MAX;
  public static final int ALPHA_MIN;
  public ch.thn.util.valuerange.ImageAlphaGradient(int, int, int, int);
  public ch.thn.util.valuerange.ImageAlphaGradient(int, int);
  public ch.thn.util.valuerange.ImageAlphaGradient(float, float, int, int, int);
}
Compiled from "ValueRange.java"
public class ch.thn.util.valuerange.ValueRange {
  public static final int TYPE_LINEAR;
  public ch.thn.util.valuerange.ValueRange(java.lang.Number, java.lang.Number, int);
  public ch.thn.util.valuerange.ValueRange(java.lang.Number, java.lang.Number, int, int, int);
  public java.util.ArrayList<java.lang.Number> getValues();
  public java.lang.Number getStepSize();
  public void reset();
  public java.lang.Number getNext();
  public boolean hasNext();
  public int getNumberOfValues();
  public java.lang.String toString();
}
Compiled from "ValueRangeError.java"
public class ch.thn.util.valuerange.ValueRangeError extends java.lang.Error {
  public ch.thn.util.valuerange.ValueRangeError(java.lang.String);
}
