Compiled from "Decoder.java"
public class decoding.Decoder {
  public decoding.Decoder();
  public java.lang.String getKBestPaths(java.util.List<semiring.Derivation>, hypergraph.HypergraphProto$Hypergraph);
  protected void getPath(semiring.Derivation, java.util.List<java.lang.Integer>, java.util.List<decoding.Decoder$Result>, hypergraph.HypergraphProto$Hypergraph);
  protected java.lang.String getDebugString(java.util.List<decoding.Decoder$Result>);
}
Compiled from "Decoder.java"
public class decoding.Decoder$Result {
  hypergraph.HypergraphProto$Vertex vertex;
  java.lang.Double score;
  final decoding.Decoder this$0;
  decoding.Decoder$Result(decoding.Decoder, hypergraph.HypergraphProto$Vertex, java.lang.Double);
  protected hypergraph.HypergraphProto$Vertex getVertex();
  protected void setVertex(hypergraph.HypergraphProto$Vertex);
  protected java.lang.Double getScore();
  protected void setScore(java.lang.Double);
}
Compiled from "DiverseDecoder.java"
public class decoding.DiverseDecoder extends decoding.Decoder {
  public decoding.DiverseDecoder();
  public java.lang.String getKBestPaths(java.util.List<semiring.Derivation>, hypergraph.HypergraphProto$Hypergraph);
}
Compiled from "KBestViterbi.java"
public class decoding.KBestViterbi {
  public decoding.KBestViterbi(semiring.Semiring<java.util.List<semiring.Derivation>>);
  public java.util.Map<java.lang.Integer, java.util.List<semiring.Derivation>> initialize(hypergraph.HypergraphProto$Hypergraph);
  public java.util.Map<java.lang.Integer, java.util.List<semiring.Derivation>> run(hypergraph.HypergraphProto$Hypergraph);
}
Compiled from "KBestViterbiTest.java"
public class decoding.KBestViterbiTest extends hypergraph.BaseTest {
  public decoding.KBestViterbiTest();
  public void testInitialize();
  public void testRun();
}
Compiled from "OneBestViterbi.java"
public class decoding.OneBestViterbi {
  semiring.Semiring<semiring.Derivation> semiring;
  public decoding.OneBestViterbi();
  java.util.Map<java.lang.Integer, semiring.Derivation> initialize(hypergraph.HypergraphProto$Hypergraph);
  public semiring.Derivation run(hypergraph.HypergraphProto$Hypergraph);
}
Compiled from "OneBestViterbiTest.java"
public class decoding.OneBestViterbiTest extends hypergraph.BaseTest {
  public decoding.OneBestViterbiTest();
  public void testRun();
}
Compiled from "TaggingDecoder.java"
public class decoding.TaggingDecoder extends decoding.Decoder {
  public decoding.TaggingDecoder();
  public java.util.List<java.util.List<java.lang.String>> getKBestTagSequences(java.util.List<semiring.Derivation>, hypergraph.HypergraphProto$Hypergraph);
  protected java.util.List<java.lang.String> getTagSequence(java.util.List<decoding.Decoder$Result>);
}
Compiled from "Viterbi3.java"
public class decoding.Viterbi3 {
  public decoding.Viterbi3(int);
  java.util.Map<java.lang.Integer, java.util.List<semiring.Derivation>> initialize(hypergraph.HypergraphProto$Hypergraph);
  public java.util.Map<java.lang.Integer, java.util.List<semiring.Derivation>> run(hypergraph.HypergraphProto$Hypergraph);
  void queueNextBestCandidates(java.util.List<java.util.List<semiring.Derivation>>, utility.PositionVector, java.util.Map<semiring.Derivation, utility.PositionVector>, utility.MaxPriorityQ, hypergraph.HypergraphProto$Hyperedge);
}
Compiled from "Viterbi3Test.java"
public class decoding.Viterbi3Test extends hypergraph.BaseTest {
  public decoding.Viterbi3Test();
  public void testInitialize();
  public void testRun();
}
Compiled from "BaseTest.java"
public class hypergraph.BaseTest {
  protected hypergraph.HypergraphProto$Hypergraph h;
  public hypergraph.BaseTest();
  public void testBuildLattice();
  public void testEdgeWeights();
  public void testEdgeWeights_LastColumn();
}
Compiled from "HypergraphProto.java"
public final class hypergraph.HypergraphProto {
  public static void registerAllExtensions(com.google.protobuf.ExtensionRegistry);
  public static com.google.protobuf.Descriptors$FileDescriptor getDescriptor();
  static com.google.protobuf.Descriptors$Descriptor access$000();
  static com.google.protobuf.GeneratedMessage$FieldAccessorTable access$100();
  static com.google.protobuf.Descriptors$Descriptor access$1200();
  static com.google.protobuf.GeneratedMessage$FieldAccessorTable access$1300();
  static com.google.protobuf.Descriptors$Descriptor access$2400();
  static com.google.protobuf.GeneratedMessage$FieldAccessorTable access$2500();
  static com.google.protobuf.Descriptors$FileDescriptor access$3502(com.google.protobuf.Descriptors$FileDescriptor);
  static com.google.protobuf.Descriptors$Descriptor access$002(com.google.protobuf.Descriptors$Descriptor);
  static com.google.protobuf.GeneratedMessage$FieldAccessorTable access$102(com.google.protobuf.GeneratedMessage$FieldAccessorTable);
  static com.google.protobuf.Descriptors$Descriptor access$1202(com.google.protobuf.Descriptors$Descriptor);
  static com.google.protobuf.GeneratedMessage$FieldAccessorTable access$1302(com.google.protobuf.GeneratedMessage$FieldAccessorTable);
  static com.google.protobuf.Descriptors$Descriptor access$2402(com.google.protobuf.Descriptors$Descriptor);
  static com.google.protobuf.GeneratedMessage$FieldAccessorTable access$2502(com.google.protobuf.GeneratedMessage$FieldAccessorTable);
  static {};
}
Compiled from "HypergraphProto.java"
final class hypergraph.HypergraphProto$1 implements com.google.protobuf.Descriptors$FileDescriptor$InternalDescriptorAssigner {
  hypergraph.HypergraphProto$1();
  public com.google.protobuf.ExtensionRegistry assignDescriptors(com.google.protobuf.Descriptors$FileDescriptor);
}
Compiled from "HypergraphProto.java"
public final class hypergraph.HypergraphProto$Hyperedge extends com.google.protobuf.GeneratedMessage implements hypergraph.HypergraphProto$HyperedgeOrBuilder {
  public static final int ID_FIELD_NUMBER;
  public static final int WEIGHT_FIELD_NUMBER;
  public static final int CHILDRENIDS_FIELD_NUMBER;
  public static final int PARENTID_FIELD_NUMBER;
  public static hypergraph.HypergraphProto$Hyperedge getDefaultInstance();
  public hypergraph.HypergraphProto$Hyperedge getDefaultInstanceForType();
  public static final com.google.protobuf.Descriptors$Descriptor getDescriptor();
  protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable();
  public boolean hasId();
  public int getId();
  public boolean hasWeight();
  public double getWeight();
  public java.util.List<java.lang.Integer> getChildrenIdsList();
  public int getChildrenIdsCount();
  public int getChildrenIds(int);
  public boolean hasParentId();
  public int getParentId();
  public final boolean isInitialized();
  public void writeTo(com.google.protobuf.CodedOutputStream) throws java.io.IOException;
  public int getSerializedSize();
  protected java.lang.Object writeReplace() throws java.io.ObjectStreamException;
  public static hypergraph.HypergraphProto$Hyperedge parseFrom(com.google.protobuf.ByteString) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Hyperedge parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Hyperedge parseFrom(byte[]) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Hyperedge parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Hyperedge parseFrom(java.io.InputStream) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hyperedge parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hyperedge parseDelimitedFrom(java.io.InputStream) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hyperedge parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hyperedge parseFrom(com.google.protobuf.CodedInputStream) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hyperedge parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hyperedge$Builder newBuilder();
  public hypergraph.HypergraphProto$Hyperedge$Builder newBuilderForType();
  public static hypergraph.HypergraphProto$Hyperedge$Builder newBuilder(hypergraph.HypergraphProto$Hyperedge);
  public hypergraph.HypergraphProto$Hyperedge$Builder toBuilder();
  protected hypergraph.HypergraphProto$Hyperedge$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent);
  protected com.google.protobuf.Message$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent);
  public com.google.protobuf.Message$Builder toBuilder();
  public com.google.protobuf.Message$Builder newBuilderForType();
  public com.google.protobuf.MessageLite$Builder toBuilder();
  public com.google.protobuf.MessageLite$Builder newBuilderForType();
  public com.google.protobuf.MessageLite getDefaultInstanceForType();
  public com.google.protobuf.Message getDefaultInstanceForType();
  static boolean access$1700();
  hypergraph.HypergraphProto$Hyperedge(hypergraph.HypergraphProto$Hyperedge$Builder, hypergraph.HypergraphProto$1);
  static int access$1902(hypergraph.HypergraphProto$Hyperedge, int);
  static double access$2002(hypergraph.HypergraphProto$Hyperedge, double);
  static java.util.List access$2102(hypergraph.HypergraphProto$Hyperedge, java.util.List);
  static int access$2202(hypergraph.HypergraphProto$Hyperedge, int);
  static int access$2302(hypergraph.HypergraphProto$Hyperedge, int);
  static java.util.List access$2100(hypergraph.HypergraphProto$Hyperedge);
  static {};
}
Compiled from "HypergraphProto.java"
public final class hypergraph.HypergraphProto$Hyperedge$Builder extends com.google.protobuf.GeneratedMessage$Builder<hypergraph.HypergraphProto$Hyperedge$Builder> implements hypergraph.HypergraphProto$HyperedgeOrBuilder {
  public static final com.google.protobuf.Descriptors$Descriptor getDescriptor();
  protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable();
  public hypergraph.HypergraphProto$Hyperedge$Builder clear();
  public hypergraph.HypergraphProto$Hyperedge$Builder clone();
  public com.google.protobuf.Descriptors$Descriptor getDescriptorForType();
  public hypergraph.HypergraphProto$Hyperedge getDefaultInstanceForType();
  public hypergraph.HypergraphProto$Hyperedge build();
  public hypergraph.HypergraphProto$Hyperedge buildPartial();
  public hypergraph.HypergraphProto$Hyperedge$Builder mergeFrom(com.google.protobuf.Message);
  public hypergraph.HypergraphProto$Hyperedge$Builder mergeFrom(hypergraph.HypergraphProto$Hyperedge);
  public final boolean isInitialized();
  public hypergraph.HypergraphProto$Hyperedge$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public boolean hasId();
  public int getId();
  public hypergraph.HypergraphProto$Hyperedge$Builder setId(int);
  public hypergraph.HypergraphProto$Hyperedge$Builder clearId();
  public boolean hasWeight();
  public double getWeight();
  public hypergraph.HypergraphProto$Hyperedge$Builder setWeight(double);
  public hypergraph.HypergraphProto$Hyperedge$Builder clearWeight();
  public java.util.List<java.lang.Integer> getChildrenIdsList();
  public int getChildrenIdsCount();
  public int getChildrenIds(int);
  public hypergraph.HypergraphProto$Hyperedge$Builder setChildrenIds(int, int);
  public hypergraph.HypergraphProto$Hyperedge$Builder addChildrenIds(int);
  public hypergraph.HypergraphProto$Hyperedge$Builder addAllChildrenIds(java.lang.Iterable<? extends java.lang.Integer>);
  public hypergraph.HypergraphProto$Hyperedge$Builder clearChildrenIds();
  public boolean hasParentId();
  public int getParentId();
  public hypergraph.HypergraphProto$Hyperedge$Builder setParentId(int);
  public hypergraph.HypergraphProto$Hyperedge$Builder clearParentId();
  public com.google.protobuf.GeneratedMessage$Builder clear();
  public com.google.protobuf.GeneratedMessage$Builder clone();
  public com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message);
  public com.google.protobuf.AbstractMessage$Builder clear();
  public com.google.protobuf.AbstractMessage$Builder clone();
  public com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.Message$Builder clone();
  public com.google.protobuf.Message buildPartial();
  public com.google.protobuf.Message build();
  public com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message);
  public com.google.protobuf.Message$Builder clear();
  public com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.MessageLite$Builder clone();
  public com.google.protobuf.MessageLite buildPartial();
  public com.google.protobuf.MessageLite build();
  public com.google.protobuf.MessageLite$Builder clear();
  public com.google.protobuf.MessageLite getDefaultInstanceForType();
  public com.google.protobuf.Message getDefaultInstanceForType();
  public com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.AbstractMessageLite$Builder clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static hypergraph.HypergraphProto$Hyperedge access$1400(hypergraph.HypergraphProto$Hyperedge$Builder) throws com.google.protobuf.InvalidProtocolBufferException;
  static hypergraph.HypergraphProto$Hyperedge$Builder access$1500();
  hypergraph.HypergraphProto$Hyperedge$Builder(com.google.protobuf.GeneratedMessage$BuilderParent, hypergraph.HypergraphProto$1);
}
Compiled from "HypergraphProto.java"
public interface hypergraph.HypergraphProto$HyperedgeOrBuilder extends com.google.protobuf.MessageOrBuilder {
  public abstract boolean hasId();
  public abstract int getId();
  public abstract boolean hasWeight();
  public abstract double getWeight();
  public abstract java.util.List<java.lang.Integer> getChildrenIdsList();
  public abstract int getChildrenIdsCount();
  public abstract int getChildrenIds(int);
  public abstract boolean hasParentId();
  public abstract int getParentId();
}
Compiled from "HypergraphProto.java"
public final class hypergraph.HypergraphProto$Hypergraph extends com.google.protobuf.GeneratedMessage implements hypergraph.HypergraphProto$HypergraphOrBuilder {
  public static final int VERTICES_FIELD_NUMBER;
  public static final int EDGES_FIELD_NUMBER;
  public static hypergraph.HypergraphProto$Hypergraph getDefaultInstance();
  public hypergraph.HypergraphProto$Hypergraph getDefaultInstanceForType();
  public static final com.google.protobuf.Descriptors$Descriptor getDescriptor();
  protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable();
  public java.util.List<hypergraph.HypergraphProto$Vertex> getVerticesList();
  public java.util.List<? extends hypergraph.HypergraphProto$VertexOrBuilder> getVerticesOrBuilderList();
  public int getVerticesCount();
  public hypergraph.HypergraphProto$Vertex getVertices(int);
  public hypergraph.HypergraphProto$VertexOrBuilder getVerticesOrBuilder(int);
  public java.util.List<hypergraph.HypergraphProto$Hyperedge> getEdgesList();
  public java.util.List<? extends hypergraph.HypergraphProto$HyperedgeOrBuilder> getEdgesOrBuilderList();
  public int getEdgesCount();
  public hypergraph.HypergraphProto$Hyperedge getEdges(int);
  public hypergraph.HypergraphProto$HyperedgeOrBuilder getEdgesOrBuilder(int);
  public final boolean isInitialized();
  public void writeTo(com.google.protobuf.CodedOutputStream) throws java.io.IOException;
  public int getSerializedSize();
  protected java.lang.Object writeReplace() throws java.io.ObjectStreamException;
  public static hypergraph.HypergraphProto$Hypergraph parseFrom(com.google.protobuf.ByteString) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Hypergraph parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Hypergraph parseFrom(byte[]) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Hypergraph parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Hypergraph parseFrom(java.io.InputStream) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hypergraph parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hypergraph parseDelimitedFrom(java.io.InputStream) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hypergraph parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hypergraph parseFrom(com.google.protobuf.CodedInputStream) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hypergraph parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Hypergraph$Builder newBuilder();
  public hypergraph.HypergraphProto$Hypergraph$Builder newBuilderForType();
  public static hypergraph.HypergraphProto$Hypergraph$Builder newBuilder(hypergraph.HypergraphProto$Hypergraph);
  public hypergraph.HypergraphProto$Hypergraph$Builder toBuilder();
  protected hypergraph.HypergraphProto$Hypergraph$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent);
  protected com.google.protobuf.Message$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent);
  public com.google.protobuf.Message$Builder toBuilder();
  public com.google.protobuf.Message$Builder newBuilderForType();
  public com.google.protobuf.MessageLite$Builder toBuilder();
  public com.google.protobuf.MessageLite$Builder newBuilderForType();
  public com.google.protobuf.MessageLite getDefaultInstanceForType();
  public com.google.protobuf.Message getDefaultInstanceForType();
  static boolean access$2900();
  hypergraph.HypergraphProto$Hypergraph(hypergraph.HypergraphProto$Hypergraph$Builder, hypergraph.HypergraphProto$1);
  static java.util.List access$3102(hypergraph.HypergraphProto$Hypergraph, java.util.List);
  static java.util.List access$3202(hypergraph.HypergraphProto$Hypergraph, java.util.List);
  static java.util.List access$3100(hypergraph.HypergraphProto$Hypergraph);
  static boolean access$3300();
  static java.util.List access$3200(hypergraph.HypergraphProto$Hypergraph);
  static boolean access$3400();
  static {};
}
Compiled from "HypergraphProto.java"
public final class hypergraph.HypergraphProto$Hypergraph$Builder extends com.google.protobuf.GeneratedMessage$Builder<hypergraph.HypergraphProto$Hypergraph$Builder> implements hypergraph.HypergraphProto$HypergraphOrBuilder {
  public static final com.google.protobuf.Descriptors$Descriptor getDescriptor();
  protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable();
  public hypergraph.HypergraphProto$Hypergraph$Builder clear();
  public hypergraph.HypergraphProto$Hypergraph$Builder clone();
  public com.google.protobuf.Descriptors$Descriptor getDescriptorForType();
  public hypergraph.HypergraphProto$Hypergraph getDefaultInstanceForType();
  public hypergraph.HypergraphProto$Hypergraph build();
  public hypergraph.HypergraphProto$Hypergraph buildPartial();
  public hypergraph.HypergraphProto$Hypergraph$Builder mergeFrom(com.google.protobuf.Message);
  public hypergraph.HypergraphProto$Hypergraph$Builder mergeFrom(hypergraph.HypergraphProto$Hypergraph);
  public final boolean isInitialized();
  public hypergraph.HypergraphProto$Hypergraph$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public java.util.List<hypergraph.HypergraphProto$Vertex> getVerticesList();
  public int getVerticesCount();
  public hypergraph.HypergraphProto$Vertex getVertices(int);
  public hypergraph.HypergraphProto$Hypergraph$Builder setVertices(int, hypergraph.HypergraphProto$Vertex);
  public hypergraph.HypergraphProto$Hypergraph$Builder setVertices(int, hypergraph.HypergraphProto$Vertex$Builder);
  public hypergraph.HypergraphProto$Hypergraph$Builder addVertices(hypergraph.HypergraphProto$Vertex);
  public hypergraph.HypergraphProto$Hypergraph$Builder addVertices(int, hypergraph.HypergraphProto$Vertex);
  public hypergraph.HypergraphProto$Hypergraph$Builder addVertices(hypergraph.HypergraphProto$Vertex$Builder);
  public hypergraph.HypergraphProto$Hypergraph$Builder addVertices(int, hypergraph.HypergraphProto$Vertex$Builder);
  public hypergraph.HypergraphProto$Hypergraph$Builder addAllVertices(java.lang.Iterable<? extends hypergraph.HypergraphProto$Vertex>);
  public hypergraph.HypergraphProto$Hypergraph$Builder clearVertices();
  public hypergraph.HypergraphProto$Hypergraph$Builder removeVertices(int);
  public hypergraph.HypergraphProto$Vertex$Builder getVerticesBuilder(int);
  public hypergraph.HypergraphProto$VertexOrBuilder getVerticesOrBuilder(int);
  public java.util.List<? extends hypergraph.HypergraphProto$VertexOrBuilder> getVerticesOrBuilderList();
  public hypergraph.HypergraphProto$Vertex$Builder addVerticesBuilder();
  public hypergraph.HypergraphProto$Vertex$Builder addVerticesBuilder(int);
  public java.util.List<hypergraph.HypergraphProto$Vertex$Builder> getVerticesBuilderList();
  public java.util.List<hypergraph.HypergraphProto$Hyperedge> getEdgesList();
  public int getEdgesCount();
  public hypergraph.HypergraphProto$Hyperedge getEdges(int);
  public hypergraph.HypergraphProto$Hypergraph$Builder setEdges(int, hypergraph.HypergraphProto$Hyperedge);
  public hypergraph.HypergraphProto$Hypergraph$Builder setEdges(int, hypergraph.HypergraphProto$Hyperedge$Builder);
  public hypergraph.HypergraphProto$Hypergraph$Builder addEdges(hypergraph.HypergraphProto$Hyperedge);
  public hypergraph.HypergraphProto$Hypergraph$Builder addEdges(int, hypergraph.HypergraphProto$Hyperedge);
  public hypergraph.HypergraphProto$Hypergraph$Builder addEdges(hypergraph.HypergraphProto$Hyperedge$Builder);
  public hypergraph.HypergraphProto$Hypergraph$Builder addEdges(int, hypergraph.HypergraphProto$Hyperedge$Builder);
  public hypergraph.HypergraphProto$Hypergraph$Builder addAllEdges(java.lang.Iterable<? extends hypergraph.HypergraphProto$Hyperedge>);
  public hypergraph.HypergraphProto$Hypergraph$Builder clearEdges();
  public hypergraph.HypergraphProto$Hypergraph$Builder removeEdges(int);
  public hypergraph.HypergraphProto$Hyperedge$Builder getEdgesBuilder(int);
  public hypergraph.HypergraphProto$HyperedgeOrBuilder getEdgesOrBuilder(int);
  public java.util.List<? extends hypergraph.HypergraphProto$HyperedgeOrBuilder> getEdgesOrBuilderList();
  public hypergraph.HypergraphProto$Hyperedge$Builder addEdgesBuilder();
  public hypergraph.HypergraphProto$Hyperedge$Builder addEdgesBuilder(int);
  public java.util.List<hypergraph.HypergraphProto$Hyperedge$Builder> getEdgesBuilderList();
  public com.google.protobuf.GeneratedMessage$Builder clear();
  public com.google.protobuf.GeneratedMessage$Builder clone();
  public com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message);
  public com.google.protobuf.AbstractMessage$Builder clear();
  public com.google.protobuf.AbstractMessage$Builder clone();
  public com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.Message$Builder clone();
  public com.google.protobuf.Message buildPartial();
  public com.google.protobuf.Message build();
  public com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message);
  public com.google.protobuf.Message$Builder clear();
  public com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.MessageLite$Builder clone();
  public com.google.protobuf.MessageLite buildPartial();
  public com.google.protobuf.MessageLite build();
  public com.google.protobuf.MessageLite$Builder clear();
  public com.google.protobuf.MessageLite getDefaultInstanceForType();
  public com.google.protobuf.Message getDefaultInstanceForType();
  public com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.AbstractMessageLite$Builder clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static hypergraph.HypergraphProto$Hypergraph access$2600(hypergraph.HypergraphProto$Hypergraph$Builder) throws com.google.protobuf.InvalidProtocolBufferException;
  static hypergraph.HypergraphProto$Hypergraph$Builder access$2700();
  hypergraph.HypergraphProto$Hypergraph$Builder(com.google.protobuf.GeneratedMessage$BuilderParent, hypergraph.HypergraphProto$1);
}
Compiled from "HypergraphProto.java"
public interface hypergraph.HypergraphProto$HypergraphOrBuilder extends com.google.protobuf.MessageOrBuilder {
  public abstract java.util.List<hypergraph.HypergraphProto$Vertex> getVerticesList();
  public abstract hypergraph.HypergraphProto$Vertex getVertices(int);
  public abstract int getVerticesCount();
  public abstract java.util.List<? extends hypergraph.HypergraphProto$VertexOrBuilder> getVerticesOrBuilderList();
  public abstract hypergraph.HypergraphProto$VertexOrBuilder getVerticesOrBuilder(int);
  public abstract java.util.List<hypergraph.HypergraphProto$Hyperedge> getEdgesList();
  public abstract hypergraph.HypergraphProto$Hyperedge getEdges(int);
  public abstract int getEdgesCount();
  public abstract java.util.List<? extends hypergraph.HypergraphProto$HyperedgeOrBuilder> getEdgesOrBuilderList();
  public abstract hypergraph.HypergraphProto$HyperedgeOrBuilder getEdgesOrBuilder(int);
}
Compiled from "HypergraphProto.java"
public final class hypergraph.HypergraphProto$Vertex extends com.google.protobuf.GeneratedMessage implements hypergraph.HypergraphProto$VertexOrBuilder {
  public static final int ID_FIELD_NUMBER;
  public static final int NAME_FIELD_NUMBER;
  public static final int INEDGE_FIELD_NUMBER;
  public static final int OUTEDGE_FIELD_NUMBER;
  public static hypergraph.HypergraphProto$Vertex getDefaultInstance();
  public hypergraph.HypergraphProto$Vertex getDefaultInstanceForType();
  public static final com.google.protobuf.Descriptors$Descriptor getDescriptor();
  protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable();
  public boolean hasId();
  public int getId();
  public boolean hasName();
  public java.lang.String getName();
  public java.util.List<java.lang.Integer> getInEdgeList();
  public int getInEdgeCount();
  public int getInEdge(int);
  public java.util.List<java.lang.Integer> getOutEdgeList();
  public int getOutEdgeCount();
  public int getOutEdge(int);
  public final boolean isInitialized();
  public void writeTo(com.google.protobuf.CodedOutputStream) throws java.io.IOException;
  public int getSerializedSize();
  protected java.lang.Object writeReplace() throws java.io.ObjectStreamException;
  public static hypergraph.HypergraphProto$Vertex parseFrom(com.google.protobuf.ByteString) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Vertex parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Vertex parseFrom(byte[]) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Vertex parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException;
  public static hypergraph.HypergraphProto$Vertex parseFrom(java.io.InputStream) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Vertex parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Vertex parseDelimitedFrom(java.io.InputStream) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Vertex parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Vertex parseFrom(com.google.protobuf.CodedInputStream) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Vertex parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public static hypergraph.HypergraphProto$Vertex$Builder newBuilder();
  public hypergraph.HypergraphProto$Vertex$Builder newBuilderForType();
  public static hypergraph.HypergraphProto$Vertex$Builder newBuilder(hypergraph.HypergraphProto$Vertex);
  public hypergraph.HypergraphProto$Vertex$Builder toBuilder();
  protected hypergraph.HypergraphProto$Vertex$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent);
  protected com.google.protobuf.Message$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent);
  public com.google.protobuf.Message$Builder toBuilder();
  public com.google.protobuf.Message$Builder newBuilderForType();
  public com.google.protobuf.MessageLite$Builder toBuilder();
  public com.google.protobuf.MessageLite$Builder newBuilderForType();
  public com.google.protobuf.MessageLite getDefaultInstanceForType();
  public com.google.protobuf.Message getDefaultInstanceForType();
  static boolean access$500();
  hypergraph.HypergraphProto$Vertex(hypergraph.HypergraphProto$Vertex$Builder, hypergraph.HypergraphProto$1);
  static int access$702(hypergraph.HypergraphProto$Vertex, int);
  static java.lang.Object access$802(hypergraph.HypergraphProto$Vertex, java.lang.Object);
  static java.util.List access$902(hypergraph.HypergraphProto$Vertex, java.util.List);
  static java.util.List access$1002(hypergraph.HypergraphProto$Vertex, java.util.List);
  static int access$1102(hypergraph.HypergraphProto$Vertex, int);
  static java.util.List access$900(hypergraph.HypergraphProto$Vertex);
  static java.util.List access$1000(hypergraph.HypergraphProto$Vertex);
  static {};
}
Compiled from "HypergraphProto.java"
public final class hypergraph.HypergraphProto$Vertex$Builder extends com.google.protobuf.GeneratedMessage$Builder<hypergraph.HypergraphProto$Vertex$Builder> implements hypergraph.HypergraphProto$VertexOrBuilder {
  public static final com.google.protobuf.Descriptors$Descriptor getDescriptor();
  protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable();
  public hypergraph.HypergraphProto$Vertex$Builder clear();
  public hypergraph.HypergraphProto$Vertex$Builder clone();
  public com.google.protobuf.Descriptors$Descriptor getDescriptorForType();
  public hypergraph.HypergraphProto$Vertex getDefaultInstanceForType();
  public hypergraph.HypergraphProto$Vertex build();
  public hypergraph.HypergraphProto$Vertex buildPartial();
  public hypergraph.HypergraphProto$Vertex$Builder mergeFrom(com.google.protobuf.Message);
  public hypergraph.HypergraphProto$Vertex$Builder mergeFrom(hypergraph.HypergraphProto$Vertex);
  public final boolean isInitialized();
  public hypergraph.HypergraphProto$Vertex$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public boolean hasId();
  public int getId();
  public hypergraph.HypergraphProto$Vertex$Builder setId(int);
  public hypergraph.HypergraphProto$Vertex$Builder clearId();
  public boolean hasName();
  public java.lang.String getName();
  public hypergraph.HypergraphProto$Vertex$Builder setName(java.lang.String);
  public hypergraph.HypergraphProto$Vertex$Builder clearName();
  void setName(com.google.protobuf.ByteString);
  public java.util.List<java.lang.Integer> getInEdgeList();
  public int getInEdgeCount();
  public int getInEdge(int);
  public hypergraph.HypergraphProto$Vertex$Builder setInEdge(int, int);
  public hypergraph.HypergraphProto$Vertex$Builder addInEdge(int);
  public hypergraph.HypergraphProto$Vertex$Builder addAllInEdge(java.lang.Iterable<? extends java.lang.Integer>);
  public hypergraph.HypergraphProto$Vertex$Builder clearInEdge();
  public java.util.List<java.lang.Integer> getOutEdgeList();
  public int getOutEdgeCount();
  public int getOutEdge(int);
  public hypergraph.HypergraphProto$Vertex$Builder setOutEdge(int, int);
  public hypergraph.HypergraphProto$Vertex$Builder addOutEdge(int);
  public hypergraph.HypergraphProto$Vertex$Builder addAllOutEdge(java.lang.Iterable<? extends java.lang.Integer>);
  public hypergraph.HypergraphProto$Vertex$Builder clearOutEdge();
  public com.google.protobuf.GeneratedMessage$Builder clear();
  public com.google.protobuf.GeneratedMessage$Builder clone();
  public com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message);
  public com.google.protobuf.AbstractMessage$Builder clear();
  public com.google.protobuf.AbstractMessage$Builder clone();
  public com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.Message$Builder clone();
  public com.google.protobuf.Message buildPartial();
  public com.google.protobuf.Message build();
  public com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message);
  public com.google.protobuf.Message$Builder clear();
  public com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.MessageLite$Builder clone();
  public com.google.protobuf.MessageLite buildPartial();
  public com.google.protobuf.MessageLite build();
  public com.google.protobuf.MessageLite$Builder clear();
  public com.google.protobuf.MessageLite getDefaultInstanceForType();
  public com.google.protobuf.Message getDefaultInstanceForType();
  public com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;
  public com.google.protobuf.AbstractMessageLite$Builder clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static hypergraph.HypergraphProto$Vertex access$200(hypergraph.HypergraphProto$Vertex$Builder) throws com.google.protobuf.InvalidProtocolBufferException;
  static hypergraph.HypergraphProto$Vertex$Builder access$300();
  hypergraph.HypergraphProto$Vertex$Builder(com.google.protobuf.GeneratedMessage$BuilderParent, hypergraph.HypergraphProto$1);
}
Compiled from "HypergraphProto.java"
public interface hypergraph.HypergraphProto$VertexOrBuilder extends com.google.protobuf.MessageOrBuilder {
  public abstract boolean hasId();
  public abstract int getId();
  public abstract boolean hasName();
  public abstract java.lang.String getName();
  public abstract java.util.List<java.lang.Integer> getInEdgeList();
  public abstract int getInEdgeCount();
  public abstract int getInEdge(int);
  public abstract java.util.List<java.lang.Integer> getOutEdgeList();
  public abstract int getOutEdgeCount();
  public abstract int getOutEdge(int);
}
Compiled from "HypergraphUtils.java"
public class hypergraph.HypergraphUtils {
  public hypergraph.HypergraphUtils();
  static java.util.Map<java.lang.Integer, java.util.List<hypergraph.HypergraphProto$Hyperedge>> generateOutgoingMap(hypergraph.HypergraphProto$Hypergraph);
  public static java.util.Map<java.lang.Integer, java.util.List<hypergraph.HypergraphProto$Hyperedge>> generateIncomingMap(hypergraph.HypergraphProto$Hypergraph);
  public static java.util.List<java.lang.Integer> getTerminals(hypergraph.HypergraphProto$Hypergraph);
  public static java.util.List<java.lang.Integer> toposort(hypergraph.HypergraphProto$Hypergraph);
  public static java.lang.String renderResult(java.util.List<hypergraph.HypergraphProto$Hyperedge>, hypergraph.HypergraphProto$Hypergraph);
  public static void renderHypergraph(hypergraph.HypergraphProto$Hypergraph);
  public static java.util.Map<java.lang.Integer, hypergraph.HypergraphProto$Vertex> getVerticesMap(hypergraph.HypergraphProto$Hypergraph);
  public static java.util.Map<java.lang.Integer, hypergraph.HypergraphProto$Hyperedge> getEdgesMap(hypergraph.HypergraphProto$Hypergraph);
}
Compiled from "History.java"
public class learning.History {
  public learning.History(java.lang.String, java.lang.String, java.util.List<java.lang.String>, int);
  public java.lang.String getLastButOneTag();
  public java.lang.String getLastTag();
  public java.util.List<java.lang.String> getTokens();
  public int getPosition();
}
Compiled from "InputReader.java"
public class learning.InputReader {
  public learning.InputReader();
  public static java.util.Map<java.lang.String, java.lang.Double> readWeights(java.io.File);
  public static java.util.List<learning.LearningExample> readExample(java.io.File, java.util.Map<java.lang.String, java.lang.Double>);
}
Compiled from "LearningExample.java"
public class learning.LearningExample {
  public learning.LearningExample(java.util.List<java.lang.String>, java.util.List<java.lang.String>);
  public java.util.List<java.lang.String> getTokens();
  public java.util.List<java.lang.String> getTagSequence();
}
Compiled from "Perceptron.java"
public class learning.Perceptron {
  learning.Perceptron(int);
  java.util.Map<java.lang.String, java.lang.Double> run(java.util.List<learning.LearningExample>, java.util.Map<java.lang.String, java.lang.Double>);
  public static void main(java.lang.String[]);
}
Compiled from "PerceptronUtils.java"
public class learning.PerceptronUtils {
  public learning.PerceptronUtils();
  static java.util.Map<java.lang.String, java.lang.Double> getFeatureVector(java.util.List<java.lang.String>, java.util.List<java.lang.String>);
  static java.util.List<java.lang.String> getLocalFeatures(learning.History, java.lang.String);
  static java.util.Map<java.lang.String, java.lang.Double> mapAddition(java.util.Map<java.lang.String, java.lang.Double>, java.util.Map<java.lang.String, java.lang.Double>);
  static java.util.Map<java.lang.String, java.lang.Double> mapSubtraction(java.util.Map<java.lang.String, java.lang.Double>, java.util.Map<java.lang.String, java.lang.Double>);
}
Compiled from "Derivation.java"
public class semiring.Derivation implements java.lang.Comparable<semiring.Derivation> {
  public semiring.Derivation(hypergraph.HypergraphProto$Hyperedge, java.lang.Double, java.util.List<semiring.Derivation>);
  public hypergraph.HypergraphProto$Hyperedge getE();
  public void setE(hypergraph.HypergraphProto$Hyperedge);
  public java.lang.Double getScore();
  public void setScore(java.lang.Double);
  public java.util.List<semiring.Derivation> getSubDerivations();
  public void setSubDerivations(java.util.List<semiring.Derivation>);
  public int compareTo(semiring.Derivation);
  public int compareTo(java.lang.Object);
}
Compiled from "KBestSemiring.java"
public class semiring.KBestSemiring implements semiring.Semiring<java.util.List<semiring.Derivation>> {
  public semiring.KBestSemiring(int);
  public java.util.List<semiring.Derivation> multiply(java.util.List<java.util.List<semiring.Derivation>>);
  void getPermutations(utility.PositionVector, java.util.Map<java.lang.String, semiring.Derivation>, java.util.List<java.util.List<semiring.Derivation>>);
  boolean checkForValidDerivationPosition(java.util.List<java.util.List<semiring.Derivation>>, utility.PositionVector, java.util.Map<java.lang.String, semiring.Derivation>);
  java.lang.String getPositionString(utility.PositionVector);
  public java.util.List<semiring.Derivation> add(java.util.List<semiring.Derivation>, java.util.List<semiring.Derivation>);
  public java.lang.Object multiply(java.util.List);
  public java.lang.Object add(java.lang.Object, java.lang.Object);
}
Compiled from "KBestSemiringSmart.java"
public class semiring.KBestSemiringSmart extends semiring.KBestSemiring {
  public semiring.KBestSemiringSmart(int);
  public java.util.List<semiring.Derivation> multiply(java.util.List<java.util.List<semiring.Derivation>>);
  public java.lang.Object multiply(java.util.List);
}
Compiled from "KBestSemiringSmartTest.java"
public class semiring.KBestSemiringSmartTest {
  java.util.List<java.util.List<semiring.Derivation>> derivationsSet;
  semiring.KBestSemiringSmart kbest;
  public semiring.KBestSemiringSmartTest();
  public void testMultiply();
  public void testMultiply_WhenOnlyOneSubDerivation();
  public void testMultiply_WhenKIsMoreThanNumCandidates();
}
Compiled from "KBestSemiringTest.java"
public class semiring.KBestSemiringTest {
  java.util.List<semiring.Derivation> d1;
  java.util.List<semiring.Derivation> d2;
  java.util.List<semiring.Derivation> d3;
  public semiring.KBestSemiringTest();
  public void testAdd();
  public void testMultiply();
}
Compiled from "OneBestSemiring.java"
public class semiring.OneBestSemiring implements semiring.Semiring<semiring.Derivation> {
  public semiring.OneBestSemiring();
  public semiring.Derivation multiply(java.util.List<semiring.Derivation>);
  public semiring.Derivation add(semiring.Derivation, semiring.Derivation);
  public java.lang.Object multiply(java.util.List);
  public java.lang.Object add(java.lang.Object, java.lang.Object);
}
Compiled from "Semiring.java"
public interface semiring.Semiring<T> {
  public abstract T add(T, T);
  public abstract T multiply(java.util.List<T>);
}
Compiled from "SemiringUtils.java"
public class semiring.SemiringUtils {
  public semiring.SemiringUtils();
  public static semiring.Derivation getCandidateDerivation(java.util.List<java.util.List<semiring.Derivation>>, utility.PositionVector, hypergraph.HypergraphProto$Hyperedge);
}
Compiled from "HypGeneratorUtils.java"
public class tagging_hypergraph.HypGeneratorUtils {
  public tagging_hypergraph.HypGeneratorUtils();
  static java.util.List<java.lang.Integer> getConsecutiveIntegers(int, int);
}
Compiled from "TaggingHypergraphGenerator.java"
public class tagging_hypergraph.TaggingHypergraphGenerator {
  static final java.util.List<java.lang.String> tags;
  static final int numTags;
  public tagging_hypergraph.TaggingHypergraphGenerator();
  static void fillAllMaps(java.util.List<java.lang.String>);
  static void addWeightsToHypergraph(java.util.Map<java.lang.String, java.lang.Double>);
  public static hypergraph.HypergraphProto$Hypergraph buildTaggingHypergraph(java.util.List<java.lang.String>, java.util.Map<java.lang.String, java.lang.Double>);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "TaggingHypergraphGeneratorTest.java"
public class tagging_hypergraph.TaggingHypergraphGeneratorTest {
  public tagging_hypergraph.TaggingHypergraphGeneratorTest();
  public void testBuildTaggingHypergraph_testVertices();
  public void testBuildTaggingHypergraph_testEdges();
}
Compiled from "TaggingHypergraphTest.java"
public class tagging_hypergraph.TaggingHypergraphTest extends junit.framework.TestCase {
  public tagging_hypergraph.TaggingHypergraphTest();
}
Compiled from "MaxPriorityQ.java"
public class utility.MaxPriorityQ {
  public utility.MaxPriorityQ();
  public int size();
  public void insert(semiring.Derivation);
  public boolean contains(semiring.Derivation);
  public semiring.Derivation extractMax();
}
Compiled from "MaxPriorityQTest.java"
public class utility.MaxPriorityQTest {
  public utility.MaxPriorityQTest();
  public void testExtractMax();
  public void testcontains();
}
Compiled from "PositionVector.java"
public class utility.PositionVector {
  public utility.PositionVector(int, int);
  public utility.PositionVector(java.util.List<java.lang.Integer>);
  public int get(int);
  public java.util.List<java.lang.Integer> getEle();
  public utility.PositionVector add(utility.PositionVector);
  public int size();
}
