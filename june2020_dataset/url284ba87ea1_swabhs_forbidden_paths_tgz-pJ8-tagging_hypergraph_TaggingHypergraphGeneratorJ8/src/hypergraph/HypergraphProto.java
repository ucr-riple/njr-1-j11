// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hypergraph.proto

package hypergraph;

public final class HypergraphProto {
  private HypergraphProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface VertexOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 id = 1;
    boolean hasId();
    int getId();
    
    // required string name = 2;
    boolean hasName();
    String getName();
    
    // repeated int32 inEdge = 3;
    java.util.List<java.lang.Integer> getInEdgeList();
    int getInEdgeCount();
    int getInEdge(int index);
    
    // repeated int32 outEdge = 4;
    java.util.List<java.lang.Integer> getOutEdgeList();
    int getOutEdgeCount();
    int getOutEdge(int index);
  }
  public static final class Vertex extends
      com.google.protobuf.GeneratedMessage
      implements VertexOrBuilder {
    // Use Vertex.newBuilder() to construct.
    private Vertex(Builder builder) {
      super(builder);
    }
    private Vertex(boolean noInit) {}
    
    private static final Vertex defaultInstance;
    public static Vertex getDefaultInstance() {
      return defaultInstance;
    }
    
    public Vertex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return hypergraph.HypergraphProto.internal_static_shortestPath_Vertex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return hypergraph.HypergraphProto.internal_static_shortestPath_Vertex_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getId() {
      return id_;
    }
    
    // required string name = 2;
    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          name_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // repeated int32 inEdge = 3;
    public static final int INEDGE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> inEdge_;
    public java.util.List<java.lang.Integer>
        getInEdgeList() {
      return inEdge_;
    }
    public int getInEdgeCount() {
      return inEdge_.size();
    }
    public int getInEdge(int index) {
      return inEdge_.get(index);
    }
    
    // repeated int32 outEdge = 4;
    public static final int OUTEDGE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> outEdge_;
    public java.util.List<java.lang.Integer>
        getOutEdgeList() {
      return outEdge_;
    }
    public int getOutEdgeCount() {
      return outEdge_.size();
    }
    public int getOutEdge(int index) {
      return outEdge_.get(index);
    }
    
    private void initFields() {
      id_ = 0;
      name_ = "";
      inEdge_ = java.util.Collections.emptyList();;
      outEdge_ = java.util.Collections.emptyList();;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      for (int i = 0; i < inEdge_.size(); i++) {
        output.writeInt32(3, inEdge_.get(i));
      }
      for (int i = 0; i < outEdge_.size(); i++) {
        output.writeInt32(4, outEdge_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < inEdge_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(inEdge_.get(i));
        }
        size += dataSize;
        size += 1 * getInEdgeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outEdge_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outEdge_.get(i));
        }
        size += dataSize;
        size += 1 * getOutEdgeList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static HypergraphProto.Vertex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static HypergraphProto.Vertex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static HypergraphProto.Vertex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static HypergraphProto.Vertex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static HypergraphProto.Vertex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static HypergraphProto.Vertex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static HypergraphProto.Vertex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static HypergraphProto.Vertex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static HypergraphProto.Vertex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static HypergraphProto.Vertex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(HypergraphProto.Vertex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements HypergraphProto.VertexOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return HypergraphProto.internal_static_shortestPath_Vertex_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return HypergraphProto.internal_static_shortestPath_Vertex_fieldAccessorTable;
      }
      
      // Construct using HypergraphProto.Vertex.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        inEdge_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000004);
        outEdge_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return HypergraphProto.Vertex.getDescriptor();
      }
      
      public HypergraphProto.Vertex getDefaultInstanceForType() {
        return HypergraphProto.Vertex.getDefaultInstance();
      }
      
      public HypergraphProto.Vertex build() {
        HypergraphProto.Vertex result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private HypergraphProto.Vertex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        HypergraphProto.Vertex result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public HypergraphProto.Vertex buildPartial() {
        HypergraphProto.Vertex result = new HypergraphProto.Vertex(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          inEdge_ = java.util.Collections.unmodifiableList(inEdge_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.inEdge_ = inEdge_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          outEdge_ = java.util.Collections.unmodifiableList(outEdge_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.outEdge_ = outEdge_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof HypergraphProto.Vertex) {
          return mergeFrom((HypergraphProto.Vertex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(HypergraphProto.Vertex other) {
        if (other == HypergraphProto.Vertex.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (!other.inEdge_.isEmpty()) {
          if (inEdge_.isEmpty()) {
            inEdge_ = other.inEdge_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureInEdgeIsMutable();
            inEdge_.addAll(other.inEdge_);
          }
          onChanged();
        }
        if (!other.outEdge_.isEmpty()) {
          if (outEdge_.isEmpty()) {
            outEdge_ = other.outEdge_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureOutEdgeIsMutable();
            outEdge_.addAll(other.outEdge_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasName()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              name_ = input.readBytes();
              break;
            }
            case 24: {
              ensureInEdgeIsMutable();
              inEdge_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addInEdge(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              ensureOutEdgeIsMutable();
              outEdge_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addOutEdge(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 id = 1;
      private int id_ ;
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getId() {
        return id_;
      }
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }
      
      // required string name = 2;
      private java.lang.Object name_ = "";
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      void setName(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
      }
      
      // repeated int32 inEdge = 3;
      private java.util.List<java.lang.Integer> inEdge_ = java.util.Collections.emptyList();;
      private void ensureInEdgeIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          inEdge_ = new java.util.ArrayList<java.lang.Integer>(inEdge_);
          bitField0_ |= 0x00000004;
         }
      }
      public java.util.List<java.lang.Integer>
          getInEdgeList() {
        return java.util.Collections.unmodifiableList(inEdge_);
      }
      public int getInEdgeCount() {
        return inEdge_.size();
      }
      public int getInEdge(int index) {
        return inEdge_.get(index);
      }
      public Builder setInEdge(
          int index, int value) {
        ensureInEdgeIsMutable();
        inEdge_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addInEdge(int value) {
        ensureInEdgeIsMutable();
        inEdge_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllInEdge(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInEdgeIsMutable();
        super.addAll(values, inEdge_);
        onChanged();
        return this;
      }
      public Builder clearInEdge() {
        inEdge_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      
      // repeated int32 outEdge = 4;
      private java.util.List<java.lang.Integer> outEdge_ = java.util.Collections.emptyList();;
      private void ensureOutEdgeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          outEdge_ = new java.util.ArrayList<java.lang.Integer>(outEdge_);
          bitField0_ |= 0x00000008;
         }
      }
      public java.util.List<java.lang.Integer>
          getOutEdgeList() {
        return java.util.Collections.unmodifiableList(outEdge_);
      }
      public int getOutEdgeCount() {
        return outEdge_.size();
      }
      public int getOutEdge(int index) {
        return outEdge_.get(index);
      }
      public Builder setOutEdge(
          int index, int value) {
        ensureOutEdgeIsMutable();
        outEdge_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addOutEdge(int value) {
        ensureOutEdgeIsMutable();
        outEdge_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllOutEdge(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutEdgeIsMutable();
        super.addAll(values, outEdge_);
        onChanged();
        return this;
      }
      public Builder clearOutEdge() {
        outEdge_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Vertex)
    }
    
    static {
      defaultInstance = new Vertex(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Vertex)
  }
  
  public interface HyperedgeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 id = 1;
    boolean hasId();
    int getId();
    
    // required double weight = 2;
    boolean hasWeight();
    double getWeight();
    
    // repeated int32 childrenIds = 3;
    java.util.List<java.lang.Integer> getChildrenIdsList();
    int getChildrenIdsCount();
    int getChildrenIds(int index);
    
    // optional int32 parentId = 4;
    boolean hasParentId();
    int getParentId();
  }
  public static final class Hyperedge extends
      com.google.protobuf.GeneratedMessage
      implements HyperedgeOrBuilder {
    // Use Hyperedge.newBuilder() to construct.
    private Hyperedge(Builder builder) {
      super(builder);
    }
    private Hyperedge(boolean noInit) {}
    
    private static final Hyperedge defaultInstance;
    public static Hyperedge getDefaultInstance() {
      return defaultInstance;
    }
    
    public Hyperedge getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return hypergraph.HypergraphProto.internal_static_shortestPath_Hyperedge_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return hypergraph.HypergraphProto.internal_static_shortestPath_Hyperedge_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getId() {
      return id_;
    }
    
    // required double weight = 2;
    public static final int WEIGHT_FIELD_NUMBER = 2;
    private double weight_;
    public boolean hasWeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public double getWeight() {
      return weight_;
    }
    
    // repeated int32 childrenIds = 3;
    public static final int CHILDRENIDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> childrenIds_;
    public java.util.List<java.lang.Integer>
        getChildrenIdsList() {
      return childrenIds_;
    }
    public int getChildrenIdsCount() {
      return childrenIds_.size();
    }
    public int getChildrenIds(int index) {
      return childrenIds_.get(index);
    }
    
    // optional int32 parentId = 4;
    public static final int PARENTID_FIELD_NUMBER = 4;
    private int parentId_;
    public boolean hasParentId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getParentId() {
      return parentId_;
    }
    
    private void initFields() {
      id_ = 0;
      weight_ = 0D;
      childrenIds_ = java.util.Collections.emptyList();;
      parentId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, weight_);
      }
      for (int i = 0; i < childrenIds_.size(); i++) {
        output.writeInt32(3, childrenIds_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, parentId_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, weight_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < childrenIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(childrenIds_.get(i));
        }
        size += dataSize;
        size += 1 * getChildrenIdsList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, parentId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static HypergraphProto.Hyperedge parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static HypergraphProto.Hyperedge parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static HypergraphProto.Hyperedge parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static HypergraphProto.Hyperedge parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static HypergraphProto.Hyperedge parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static HypergraphProto.Hyperedge parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static HypergraphProto.Hyperedge parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static HypergraphProto.Hyperedge parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static HypergraphProto.Hyperedge parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static HypergraphProto.Hyperedge parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(HypergraphProto.Hyperedge prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements HypergraphProto.HyperedgeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return HypergraphProto.internal_static_shortestPath_Hyperedge_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return HypergraphProto.internal_static_shortestPath_Hyperedge_fieldAccessorTable;
      }
      
      // Construct using HypergraphProto.Hyperedge.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        weight_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        childrenIds_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000004);
        parentId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return HypergraphProto.Hyperedge.getDescriptor();
      }
      
      public HypergraphProto.Hyperedge getDefaultInstanceForType() {
        return HypergraphProto.Hyperedge.getDefaultInstance();
      }
      
      public HypergraphProto.Hyperedge build() {
        HypergraphProto.Hyperedge result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private HypergraphProto.Hyperedge buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        HypergraphProto.Hyperedge result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public HypergraphProto.Hyperedge buildPartial() {
        HypergraphProto.Hyperedge result = new HypergraphProto.Hyperedge(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.weight_ = weight_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          childrenIds_ = java.util.Collections.unmodifiableList(childrenIds_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.childrenIds_ = childrenIds_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.parentId_ = parentId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof HypergraphProto.Hyperedge) {
          return mergeFrom((HypergraphProto.Hyperedge)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(HypergraphProto.Hyperedge other) {
        if (other == HypergraphProto.Hyperedge.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasWeight()) {
          setWeight(other.getWeight());
        }
        if (!other.childrenIds_.isEmpty()) {
          if (childrenIds_.isEmpty()) {
            childrenIds_ = other.childrenIds_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChildrenIdsIsMutable();
            childrenIds_.addAll(other.childrenIds_);
          }
          onChanged();
        }
        if (other.hasParentId()) {
          setParentId(other.getParentId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasWeight()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              weight_ = input.readDouble();
              break;
            }
            case 24: {
              ensureChildrenIdsIsMutable();
              childrenIds_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addChildrenIds(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              parentId_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 id = 1;
      private int id_ ;
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getId() {
        return id_;
      }
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }
      
      // required double weight = 2;
      private double weight_ ;
      public boolean hasWeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public double getWeight() {
        return weight_;
      }
      public Builder setWeight(double value) {
        bitField0_ |= 0x00000002;
        weight_ = value;
        onChanged();
        return this;
      }
      public Builder clearWeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        weight_ = 0D;
        onChanged();
        return this;
      }
      
      // repeated int32 childrenIds = 3;
      private java.util.List<java.lang.Integer> childrenIds_ = java.util.Collections.emptyList();;
      private void ensureChildrenIdsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          childrenIds_ = new java.util.ArrayList<java.lang.Integer>(childrenIds_);
          bitField0_ |= 0x00000004;
         }
      }
      public java.util.List<java.lang.Integer>
          getChildrenIdsList() {
        return java.util.Collections.unmodifiableList(childrenIds_);
      }
      public int getChildrenIdsCount() {
        return childrenIds_.size();
      }
      public int getChildrenIds(int index) {
        return childrenIds_.get(index);
      }
      public Builder setChildrenIds(
          int index, int value) {
        ensureChildrenIdsIsMutable();
        childrenIds_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addChildrenIds(int value) {
        ensureChildrenIdsIsMutable();
        childrenIds_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllChildrenIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChildrenIdsIsMutable();
        super.addAll(values, childrenIds_);
        onChanged();
        return this;
      }
      public Builder clearChildrenIds() {
        childrenIds_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      
      // optional int32 parentId = 4;
      private int parentId_ ;
      public boolean hasParentId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getParentId() {
        return parentId_;
      }
      public Builder setParentId(int value) {
        bitField0_ |= 0x00000008;
        parentId_ = value;
        onChanged();
        return this;
      }
      public Builder clearParentId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        parentId_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Hyperedge)
    }
    
    static {
      defaultInstance = new Hyperedge(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Hyperedge)
  }
  
  public interface HypergraphOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .Vertex vertices = 1;
    java.util.List<HypergraphProto.Vertex> 
        getVerticesList();
    HypergraphProto.Vertex getVertices(int index);
    int getVerticesCount();
    java.util.List<? extends HypergraphProto.VertexOrBuilder> 
        getVerticesOrBuilderList();
    HypergraphProto.VertexOrBuilder getVerticesOrBuilder(
        int index);
    
    // repeated .Hyperedge edges = 2;
    java.util.List<HypergraphProto.Hyperedge> 
        getEdgesList();
    HypergraphProto.Hyperedge getEdges(int index);
    int getEdgesCount();
    java.util.List<? extends HypergraphProto.HyperedgeOrBuilder> 
        getEdgesOrBuilderList();
    HypergraphProto.HyperedgeOrBuilder getEdgesOrBuilder(
        int index);
  }
  public static final class Hypergraph extends
      com.google.protobuf.GeneratedMessage
      implements HypergraphOrBuilder {
    // Use Hypergraph.newBuilder() to construct.
    private Hypergraph(Builder builder) {
      super(builder);
    }
    private Hypergraph(boolean noInit) {}
    
    private static final Hypergraph defaultInstance;
    public static Hypergraph getDefaultInstance() {
      return defaultInstance;
    }
    
    public Hypergraph getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return hypergraph.HypergraphProto.internal_static_shortestPath_Hypergraph_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return hypergraph.HypergraphProto.internal_static_shortestPath_Hypergraph_fieldAccessorTable;
    }
    
    // repeated .Vertex vertices = 1;
    public static final int VERTICES_FIELD_NUMBER = 1;
    private java.util.List<HypergraphProto.Vertex> vertices_;
    public java.util.List<HypergraphProto.Vertex> getVerticesList() {
      return vertices_;
    }
    public java.util.List<? extends HypergraphProto.VertexOrBuilder> 
        getVerticesOrBuilderList() {
      return vertices_;
    }
    public int getVerticesCount() {
      return vertices_.size();
    }
    public HypergraphProto.Vertex getVertices(int index) {
      return vertices_.get(index);
    }
    public HypergraphProto.VertexOrBuilder getVerticesOrBuilder(
        int index) {
      return vertices_.get(index);
    }
    
    // repeated .Hyperedge edges = 2;
    public static final int EDGES_FIELD_NUMBER = 2;
    private java.util.List<HypergraphProto.Hyperedge> edges_;
    public java.util.List<HypergraphProto.Hyperedge> getEdgesList() {
      return edges_;
    }
    public java.util.List<? extends HypergraphProto.HyperedgeOrBuilder> 
        getEdgesOrBuilderList() {
      return edges_;
    }
    public int getEdgesCount() {
      return edges_.size();
    }
    public HypergraphProto.Hyperedge getEdges(int index) {
      return edges_.get(index);
    }
    public HypergraphProto.HyperedgeOrBuilder getEdgesOrBuilder(
        int index) {
      return edges_.get(index);
    }
    
    private void initFields() {
      vertices_ = java.util.Collections.emptyList();
      edges_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      for (int i = 0; i < getVerticesCount(); i++) {
        if (!getVertices(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getEdgesCount(); i++) {
        if (!getEdges(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < vertices_.size(); i++) {
        output.writeMessage(1, vertices_.get(i));
      }
      for (int i = 0; i < edges_.size(); i++) {
        output.writeMessage(2, edges_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < vertices_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, vertices_.get(i));
      }
      for (int i = 0; i < edges_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, edges_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static HypergraphProto.Hypergraph parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static HypergraphProto.Hypergraph parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static HypergraphProto.Hypergraph parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static HypergraphProto.Hypergraph parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static HypergraphProto.Hypergraph parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static HypergraphProto.Hypergraph parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static HypergraphProto.Hypergraph parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static HypergraphProto.Hypergraph parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static HypergraphProto.Hypergraph parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static HypergraphProto.Hypergraph parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(HypergraphProto.Hypergraph prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements HypergraphProto.HypergraphOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return HypergraphProto.internal_static_shortestPath_Hypergraph_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return HypergraphProto.internal_static_shortestPath_Hypergraph_fieldAccessorTable;
      }
      
      // Construct using HypergraphProto.Hypergraph.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getVerticesFieldBuilder();
          getEdgesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (verticesBuilder_ == null) {
          vertices_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          verticesBuilder_.clear();
        }
        if (edgesBuilder_ == null) {
          edges_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          edgesBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return HypergraphProto.Hypergraph.getDescriptor();
      }
      
      public HypergraphProto.Hypergraph getDefaultInstanceForType() {
        return HypergraphProto.Hypergraph.getDefaultInstance();
      }
      
      public HypergraphProto.Hypergraph build() {
        HypergraphProto.Hypergraph result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private HypergraphProto.Hypergraph buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        HypergraphProto.Hypergraph result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public HypergraphProto.Hypergraph buildPartial() {
        HypergraphProto.Hypergraph result = new HypergraphProto.Hypergraph(this);
        int from_bitField0_ = bitField0_;
        if (verticesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            vertices_ = java.util.Collections.unmodifiableList(vertices_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.vertices_ = vertices_;
        } else {
          result.vertices_ = verticesBuilder_.build();
        }
        if (edgesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            edges_ = java.util.Collections.unmodifiableList(edges_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.edges_ = edges_;
        } else {
          result.edges_ = edgesBuilder_.build();
        }
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof HypergraphProto.Hypergraph) {
          return mergeFrom((HypergraphProto.Hypergraph)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(HypergraphProto.Hypergraph other) {
        if (other == HypergraphProto.Hypergraph.getDefaultInstance()) return this;
        if (verticesBuilder_ == null) {
          if (!other.vertices_.isEmpty()) {
            if (vertices_.isEmpty()) {
              vertices_ = other.vertices_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureVerticesIsMutable();
              vertices_.addAll(other.vertices_);
            }
            onChanged();
          }
        } else {
          if (!other.vertices_.isEmpty()) {
            if (verticesBuilder_.isEmpty()) {
              verticesBuilder_.dispose();
              verticesBuilder_ = null;
              vertices_ = other.vertices_;
              bitField0_ = (bitField0_ & ~0x00000001);
              verticesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getVerticesFieldBuilder() : null;
            } else {
              verticesBuilder_.addAllMessages(other.vertices_);
            }
          }
        }
        if (edgesBuilder_ == null) {
          if (!other.edges_.isEmpty()) {
            if (edges_.isEmpty()) {
              edges_ = other.edges_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEdgesIsMutable();
              edges_.addAll(other.edges_);
            }
            onChanged();
          }
        } else {
          if (!other.edges_.isEmpty()) {
            if (edgesBuilder_.isEmpty()) {
              edgesBuilder_.dispose();
              edgesBuilder_ = null;
              edges_ = other.edges_;
              bitField0_ = (bitField0_ & ~0x00000002);
              edgesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEdgesFieldBuilder() : null;
            } else {
              edgesBuilder_.addAllMessages(other.edges_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        for (int i = 0; i < getVerticesCount(); i++) {
          if (!getVertices(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getEdgesCount(); i++) {
          if (!getEdges(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              HypergraphProto.Vertex.Builder subBuilder = HypergraphProto.Vertex.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addVertices(subBuilder.buildPartial());
              break;
            }
            case 18: {
              HypergraphProto.Hyperedge.Builder subBuilder = HypergraphProto.Hyperedge.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addEdges(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .Vertex vertices = 1;
      private java.util.List<HypergraphProto.Vertex> vertices_ =
        java.util.Collections.emptyList();
      private void ensureVerticesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          vertices_ = new java.util.ArrayList<HypergraphProto.Vertex>(vertices_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          HypergraphProto.Vertex, HypergraphProto.Vertex.Builder, HypergraphProto.VertexOrBuilder> verticesBuilder_;
      
      public java.util.List<HypergraphProto.Vertex> getVerticesList() {
        if (verticesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(vertices_);
        } else {
          return verticesBuilder_.getMessageList();
        }
      }
      public int getVerticesCount() {
        if (verticesBuilder_ == null) {
          return vertices_.size();
        } else {
          return verticesBuilder_.getCount();
        }
      }
      public HypergraphProto.Vertex getVertices(int index) {
        if (verticesBuilder_ == null) {
          return vertices_.get(index);
        } else {
          return verticesBuilder_.getMessage(index);
        }
      }
      public Builder setVertices(
          int index, HypergraphProto.Vertex value) {
        if (verticesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVerticesIsMutable();
          vertices_.set(index, value);
          onChanged();
        } else {
          verticesBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setVertices(
          int index, HypergraphProto.Vertex.Builder builderForValue) {
        if (verticesBuilder_ == null) {
          ensureVerticesIsMutable();
          vertices_.set(index, builderForValue.build());
          onChanged();
        } else {
          verticesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addVertices(HypergraphProto.Vertex value) {
        if (verticesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVerticesIsMutable();
          vertices_.add(value);
          onChanged();
        } else {
          verticesBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addVertices(
          int index, HypergraphProto.Vertex value) {
        if (verticesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVerticesIsMutable();
          vertices_.add(index, value);
          onChanged();
        } else {
          verticesBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addVertices(
          HypergraphProto.Vertex.Builder builderForValue) {
        if (verticesBuilder_ == null) {
          ensureVerticesIsMutable();
          vertices_.add(builderForValue.build());
          onChanged();
        } else {
          verticesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addVertices(
          int index, HypergraphProto.Vertex.Builder builderForValue) {
        if (verticesBuilder_ == null) {
          ensureVerticesIsMutable();
          vertices_.add(index, builderForValue.build());
          onChanged();
        } else {
          verticesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllVertices(
          java.lang.Iterable<? extends HypergraphProto.Vertex> values) {
        if (verticesBuilder_ == null) {
          ensureVerticesIsMutable();
          super.addAll(values, vertices_);
          onChanged();
        } else {
          verticesBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearVertices() {
        if (verticesBuilder_ == null) {
          vertices_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          verticesBuilder_.clear();
        }
        return this;
      }
      public Builder removeVertices(int index) {
        if (verticesBuilder_ == null) {
          ensureVerticesIsMutable();
          vertices_.remove(index);
          onChanged();
        } else {
          verticesBuilder_.remove(index);
        }
        return this;
      }
      public HypergraphProto.Vertex.Builder getVerticesBuilder(
          int index) {
        return getVerticesFieldBuilder().getBuilder(index);
      }
      public HypergraphProto.VertexOrBuilder getVerticesOrBuilder(
          int index) {
        if (verticesBuilder_ == null) {
          return vertices_.get(index);  } else {
          return verticesBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends HypergraphProto.VertexOrBuilder> 
           getVerticesOrBuilderList() {
        if (verticesBuilder_ != null) {
          return verticesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(vertices_);
        }
      }
      public HypergraphProto.Vertex.Builder addVerticesBuilder() {
        return getVerticesFieldBuilder().addBuilder(
            HypergraphProto.Vertex.getDefaultInstance());
      }
      public HypergraphProto.Vertex.Builder addVerticesBuilder(
          int index) {
        return getVerticesFieldBuilder().addBuilder(
            index, HypergraphProto.Vertex.getDefaultInstance());
      }
      public java.util.List<HypergraphProto.Vertex.Builder> 
           getVerticesBuilderList() {
        return getVerticesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          HypergraphProto.Vertex, HypergraphProto.Vertex.Builder, HypergraphProto.VertexOrBuilder> 
          getVerticesFieldBuilder() {
        if (verticesBuilder_ == null) {
          verticesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              HypergraphProto.Vertex, HypergraphProto.Vertex.Builder, HypergraphProto.VertexOrBuilder>(
                  vertices_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          vertices_ = null;
        }
        return verticesBuilder_;
      }
      
      // repeated .Hyperedge edges = 2;
      private java.util.List<HypergraphProto.Hyperedge> edges_ =
        java.util.Collections.emptyList();
      private void ensureEdgesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          edges_ = new java.util.ArrayList<HypergraphProto.Hyperedge>(edges_);
          bitField0_ |= 0x00000002;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          HypergraphProto.Hyperedge, HypergraphProto.Hyperedge.Builder, HypergraphProto.HyperedgeOrBuilder> edgesBuilder_;
      
      public java.util.List<HypergraphProto.Hyperedge> getEdgesList() {
        if (edgesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(edges_);
        } else {
          return edgesBuilder_.getMessageList();
        }
      }
      public int getEdgesCount() {
        if (edgesBuilder_ == null) {
          return edges_.size();
        } else {
          return edgesBuilder_.getCount();
        }
      }
      public HypergraphProto.Hyperedge getEdges(int index) {
        if (edgesBuilder_ == null) {
          return edges_.get(index);
        } else {
          return edgesBuilder_.getMessage(index);
        }
      }
      public Builder setEdges(
          int index, HypergraphProto.Hyperedge value) {
        if (edgesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEdgesIsMutable();
          edges_.set(index, value);
          onChanged();
        } else {
          edgesBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setEdges(
          int index, HypergraphProto.Hyperedge.Builder builderForValue) {
        if (edgesBuilder_ == null) {
          ensureEdgesIsMutable();
          edges_.set(index, builderForValue.build());
          onChanged();
        } else {
          edgesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addEdges(HypergraphProto.Hyperedge value) {
        if (edgesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEdgesIsMutable();
          edges_.add(value);
          onChanged();
        } else {
          edgesBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addEdges(
          int index, HypergraphProto.Hyperedge value) {
        if (edgesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEdgesIsMutable();
          edges_.add(index, value);
          onChanged();
        } else {
          edgesBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addEdges(
          HypergraphProto.Hyperedge.Builder builderForValue) {
        if (edgesBuilder_ == null) {
          ensureEdgesIsMutable();
          edges_.add(builderForValue.build());
          onChanged();
        } else {
          edgesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addEdges(
          int index, HypergraphProto.Hyperedge.Builder builderForValue) {
        if (edgesBuilder_ == null) {
          ensureEdgesIsMutable();
          edges_.add(index, builderForValue.build());
          onChanged();
        } else {
          edgesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllEdges(
          java.lang.Iterable<? extends HypergraphProto.Hyperedge> values) {
        if (edgesBuilder_ == null) {
          ensureEdgesIsMutable();
          super.addAll(values, edges_);
          onChanged();
        } else {
          edgesBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearEdges() {
        if (edgesBuilder_ == null) {
          edges_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          edgesBuilder_.clear();
        }
        return this;
      }
      public Builder removeEdges(int index) {
        if (edgesBuilder_ == null) {
          ensureEdgesIsMutable();
          edges_.remove(index);
          onChanged();
        } else {
          edgesBuilder_.remove(index);
        }
        return this;
      }
      public HypergraphProto.Hyperedge.Builder getEdgesBuilder(
          int index) {
        return getEdgesFieldBuilder().getBuilder(index);
      }
      public HypergraphProto.HyperedgeOrBuilder getEdgesOrBuilder(
          int index) {
        if (edgesBuilder_ == null) {
          return edges_.get(index);  } else {
          return edgesBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends HypergraphProto.HyperedgeOrBuilder> 
           getEdgesOrBuilderList() {
        if (edgesBuilder_ != null) {
          return edgesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(edges_);
        }
      }
      public HypergraphProto.Hyperedge.Builder addEdgesBuilder() {
        return getEdgesFieldBuilder().addBuilder(
            HypergraphProto.Hyperedge.getDefaultInstance());
      }
      public HypergraphProto.Hyperedge.Builder addEdgesBuilder(
          int index) {
        return getEdgesFieldBuilder().addBuilder(
            index, HypergraphProto.Hyperedge.getDefaultInstance());
      }
      public java.util.List<HypergraphProto.Hyperedge.Builder> 
           getEdgesBuilderList() {
        return getEdgesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          HypergraphProto.Hyperedge, HypergraphProto.Hyperedge.Builder, HypergraphProto.HyperedgeOrBuilder> 
          getEdgesFieldBuilder() {
        if (edgesBuilder_ == null) {
          edgesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              HypergraphProto.Hyperedge, HypergraphProto.Hyperedge.Builder, HypergraphProto.HyperedgeOrBuilder>(
                  edges_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          edges_ = null;
        }
        return edgesBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:Hypergraph)
    }
    
    static {
      defaultInstance = new Hypergraph(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Hypergraph)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_shortestPath_Vertex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_shortestPath_Vertex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_shortestPath_Hyperedge_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_shortestPath_Hyperedge_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_shortestPath_Hypergraph_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_shortestPath_Hypergraph_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020hypergraph.proto\022\014shortestPath\"C\n\006Vert" +
      "ex\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\016\n\006inEdge\030\003" +
      " \003(\005\022\017\n\007outEdge\030\004 \003(\005\"N\n\tHyperedge\022\n\n\002id" +
      "\030\001 \002(\005\022\016\n\006weight\030\002 \002(\001\022\023\n\013childrenIds\030\003 " +
      "\003(\005\022\020\n\010parentId\030\004 \001(\005\"\\\n\nHypergraph\022&\n\010v" +
      "ertices\030\001 \003(\0132\024.Vertex\022&\n\005e" +
      "dges\030\002 \003(\0132\027.HyperedgeB\021B\017H" +
      "ypergraphProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_shortestPath_Vertex_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_shortestPath_Vertex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_shortestPath_Vertex_descriptor,
              new java.lang.String[] { "Id", "Name", "InEdge", "OutEdge", },
              HypergraphProto.Vertex.class,
              HypergraphProto.Vertex.Builder.class);
          internal_static_shortestPath_Hyperedge_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_shortestPath_Hyperedge_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_shortestPath_Hyperedge_descriptor,
              new java.lang.String[] { "Id", "Weight", "ChildrenIds", "ParentId", },
              HypergraphProto.Hyperedge.class,
              HypergraphProto.Hyperedge.Builder.class);
          internal_static_shortestPath_Hypergraph_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_shortestPath_Hypergraph_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_shortestPath_Hypergraph_descriptor,
              new java.lang.String[] { "Vertices", "Edges", },
              HypergraphProto.Hypergraph.class,
              HypergraphProto.Hypergraph.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
