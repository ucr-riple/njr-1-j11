Compiled from "GUIHelper.java"
public class lib.GUIHelper {
  public lib.GUIHelper();
  public static void errorMessage(java.awt.Component, java.lang.String);
  public static void setIconOnFrame(javax.swing.JFrame, java.lang.String);
  public static void setGridLines(javax.swing.JTable);
}
Compiled from "CDL.java"
public class lib.json.CDL {
  public lib.json.CDL();
  public static lib.json.JSONArray rowToJSONArray(lib.json.JSONTokener) throws lib.json.JSONException;
  public static lib.json.JSONObject rowToJSONObject(lib.json.JSONArray, lib.json.JSONTokener) throws lib.json.JSONException;
  public static lib.json.JSONArray toJSONArray(java.lang.String) throws lib.json.JSONException;
  public static lib.json.JSONArray toJSONArray(lib.json.JSONTokener) throws lib.json.JSONException;
  public static lib.json.JSONArray toJSONArray(lib.json.JSONArray, java.lang.String) throws lib.json.JSONException;
  public static lib.json.JSONArray toJSONArray(lib.json.JSONArray, lib.json.JSONTokener) throws lib.json.JSONException;
  public static java.lang.String rowToString(lib.json.JSONArray);
  public static java.lang.String toString(lib.json.JSONArray) throws lib.json.JSONException;
  public static java.lang.String toString(lib.json.JSONArray, lib.json.JSONArray) throws lib.json.JSONException;
}
Compiled from "Cookie.java"
public class lib.json.Cookie {
  public lib.json.Cookie();
  public static java.lang.String escape(java.lang.String);
  public static lib.json.JSONObject toJSONObject(java.lang.String) throws lib.json.JSONException;
  public static java.lang.String toString(lib.json.JSONObject) throws lib.json.JSONException;
  public static java.lang.String unescape(java.lang.String);
}
Compiled from "CookieList.java"
public class lib.json.CookieList {
  public lib.json.CookieList();
  public static lib.json.JSONObject toJSONObject(java.lang.String) throws lib.json.JSONException;
  public static java.lang.String toString(lib.json.JSONObject) throws lib.json.JSONException;
}
Compiled from "HTTP.java"
public class lib.json.HTTP {
  public static final java.lang.String CRLF;
  public lib.json.HTTP();
  public static lib.json.JSONObject toJSONObject(java.lang.String) throws lib.json.JSONException;
  public static java.lang.String toString(lib.json.JSONObject) throws lib.json.JSONException;
}
Compiled from "HTTPTokener.java"
public class lib.json.HTTPTokener extends lib.json.JSONTokener {
  public lib.json.HTTPTokener(java.lang.String);
  public java.lang.String nextToken() throws lib.json.JSONException;
}
Compiled from "JSONArray.java"
public class lib.json.JSONArray {
  public lib.json.JSONArray();
  public lib.json.JSONArray(lib.json.JSONTokener) throws lib.json.JSONException;
  public lib.json.JSONArray(java.lang.String) throws lib.json.JSONException;
  public lib.json.JSONArray(java.util.Collection);
  public lib.json.JSONArray(java.lang.Object) throws lib.json.JSONException;
  public java.lang.Object get(int) throws lib.json.JSONException;
  public boolean getBoolean(int) throws lib.json.JSONException;
  public double getDouble(int) throws lib.json.JSONException;
  public int getInt(int) throws lib.json.JSONException;
  public lib.json.JSONArray getJSONArray(int) throws lib.json.JSONException;
  public lib.json.JSONObject getJSONObject(int) throws lib.json.JSONException;
  public long getLong(int) throws lib.json.JSONException;
  public java.lang.String getString(int) throws lib.json.JSONException;
  public boolean isNull(int);
  public java.lang.String join(java.lang.String) throws lib.json.JSONException;
  public int length();
  public java.lang.Object opt(int);
  public boolean optBoolean(int);
  public boolean optBoolean(int, boolean);
  public double optDouble(int);
  public double optDouble(int, double);
  public int optInt(int);
  public int optInt(int, int);
  public lib.json.JSONArray optJSONArray(int);
  public lib.json.JSONObject optJSONObject(int);
  public long optLong(int);
  public long optLong(int, long);
  public java.lang.String optString(int);
  public java.lang.String optString(int, java.lang.String);
  public lib.json.JSONArray put(boolean);
  public lib.json.JSONArray put(java.util.Collection);
  public lib.json.JSONArray put(double) throws lib.json.JSONException;
  public lib.json.JSONArray put(int);
  public lib.json.JSONArray put(long);
  public lib.json.JSONArray put(java.util.Map);
  public lib.json.JSONArray put(java.lang.Object);
  public lib.json.JSONArray put(int, boolean) throws lib.json.JSONException;
  public lib.json.JSONArray put(int, java.util.Collection) throws lib.json.JSONException;
  public lib.json.JSONArray put(int, double) throws lib.json.JSONException;
  public lib.json.JSONArray put(int, int) throws lib.json.JSONException;
  public lib.json.JSONArray put(int, long) throws lib.json.JSONException;
  public lib.json.JSONArray put(int, java.util.Map) throws lib.json.JSONException;
  public lib.json.JSONArray put(int, java.lang.Object) throws lib.json.JSONException;
  public java.lang.Object remove(int);
  public lib.json.JSONObject toJSONObject(lib.json.JSONArray) throws lib.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws lib.json.JSONException;
  java.lang.String toString(int, int) throws lib.json.JSONException;
  public java.io.Writer write(java.io.Writer) throws lib.json.JSONException;
}
Compiled from "JSONException.java"
public class lib.json.JSONException extends java.lang.Exception {
  public lib.json.JSONException(java.lang.String);
  public lib.json.JSONException(java.lang.Throwable);
  public java.lang.Throwable getCause();
}
Compiled from "JSONML.java"
public class lib.json.JSONML {
  public lib.json.JSONML();
  public static lib.json.JSONArray toJSONArray(java.lang.String) throws lib.json.JSONException;
  public static lib.json.JSONArray toJSONArray(lib.json.XMLTokener) throws lib.json.JSONException;
  public static lib.json.JSONObject toJSONObject(lib.json.XMLTokener) throws lib.json.JSONException;
  public static lib.json.JSONObject toJSONObject(java.lang.String) throws lib.json.JSONException;
  public static java.lang.String toString(lib.json.JSONArray) throws lib.json.JSONException;
  public static java.lang.String toString(lib.json.JSONObject) throws lib.json.JSONException;
}
Compiled from "JSONObject.java"
public class lib.json.JSONObject {
  public static final java.lang.Object NULL;
  public lib.json.JSONObject();
  public lib.json.JSONObject(lib.json.JSONObject, java.lang.String[]);
  public lib.json.JSONObject(lib.json.JSONTokener) throws lib.json.JSONException;
  public lib.json.JSONObject(java.util.Map);
  public lib.json.JSONObject(java.lang.Object);
  public lib.json.JSONObject(java.lang.Object, java.lang.String[]);
  public lib.json.JSONObject(java.lang.String) throws lib.json.JSONException;
  public lib.json.JSONObject accumulate(java.lang.String, java.lang.Object) throws lib.json.JSONException;
  public lib.json.JSONObject append(java.lang.String, java.lang.Object) throws lib.json.JSONException;
  public static java.lang.String doubleToString(double);
  public java.lang.Object get(java.lang.String) throws lib.json.JSONException;
  public boolean getBoolean(java.lang.String) throws lib.json.JSONException;
  public double getDouble(java.lang.String) throws lib.json.JSONException;
  public int getInt(java.lang.String) throws lib.json.JSONException;
  public lib.json.JSONArray getJSONArray(java.lang.String) throws lib.json.JSONException;
  public lib.json.JSONObject getJSONObject(java.lang.String) throws lib.json.JSONException;
  public long getLong(java.lang.String) throws lib.json.JSONException;
  public static java.lang.String[] getNames(lib.json.JSONObject);
  public static java.lang.String[] getNames(java.lang.Object);
  public java.lang.String getString(java.lang.String) throws lib.json.JSONException;
  public boolean has(java.lang.String);
  public lib.json.JSONObject increment(java.lang.String) throws lib.json.JSONException;
  public boolean isNull(java.lang.String);
  public java.util.Iterator keys();
  public int length();
  public lib.json.JSONArray names();
  public static java.lang.String numberToString(java.lang.Number) throws lib.json.JSONException;
  public java.lang.Object opt(java.lang.String);
  public boolean optBoolean(java.lang.String);
  public boolean optBoolean(java.lang.String, boolean);
  public double optDouble(java.lang.String);
  public double optDouble(java.lang.String, double);
  public int optInt(java.lang.String);
  public int optInt(java.lang.String, int);
  public lib.json.JSONArray optJSONArray(java.lang.String);
  public lib.json.JSONObject optJSONObject(java.lang.String);
  public long optLong(java.lang.String);
  public long optLong(java.lang.String, long);
  public java.lang.String optString(java.lang.String);
  public java.lang.String optString(java.lang.String, java.lang.String);
  public lib.json.JSONObject put(java.lang.String, boolean) throws lib.json.JSONException;
  public lib.json.JSONObject put(java.lang.String, java.util.Collection) throws lib.json.JSONException;
  public lib.json.JSONObject put(java.lang.String, double) throws lib.json.JSONException;
  public lib.json.JSONObject put(java.lang.String, int) throws lib.json.JSONException;
  public lib.json.JSONObject put(java.lang.String, long) throws lib.json.JSONException;
  public lib.json.JSONObject put(java.lang.String, java.util.Map) throws lib.json.JSONException;
  public lib.json.JSONObject put(java.lang.String, java.lang.Object) throws lib.json.JSONException;
  public lib.json.JSONObject putOnce(java.lang.String, java.lang.Object) throws lib.json.JSONException;
  public lib.json.JSONObject putOpt(java.lang.String, java.lang.Object) throws lib.json.JSONException;
  public static java.lang.String quote(java.lang.String);
  public java.lang.Object remove(java.lang.String);
  public java.util.Iterator sortedKeys();
  public static java.lang.Object stringToValue(java.lang.String);
  static void testValidity(java.lang.Object) throws lib.json.JSONException;
  public lib.json.JSONArray toJSONArray(lib.json.JSONArray) throws lib.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws lib.json.JSONException;
  java.lang.String toString(int, int) throws lib.json.JSONException;
  static java.lang.String valueToString(java.lang.Object) throws lib.json.JSONException;
  static java.lang.String valueToString(java.lang.Object, int, int) throws lib.json.JSONException;
  static java.lang.Object wrap(java.lang.Object);
  public java.io.Writer write(java.io.Writer) throws lib.json.JSONException;
  static {};
}
Compiled from "JSONObject.java"
class lib.json.JSONObject$1 {
}
Compiled from "JSONObject.java"
final class lib.json.JSONObject$Null {
  protected final java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  lib.json.JSONObject$Null(lib.json.JSONObject$1);
}
Compiled from "JSONString.java"
public interface lib.json.JSONString {
  public abstract java.lang.String toJSONString();
}
Compiled from "JSONStringer.java"
public class lib.json.JSONStringer extends lib.json.JSONWriter {
  public lib.json.JSONStringer();
  public java.lang.String toString();
}
Compiled from "JSONTokener.java"
public class lib.json.JSONTokener {
  public lib.json.JSONTokener(java.io.Reader);
  public lib.json.JSONTokener(java.lang.String);
  public void back() throws lib.json.JSONException;
  public static int dehexchar(char);
  public boolean end();
  public boolean more() throws lib.json.JSONException;
  public char next() throws lib.json.JSONException;
  public char next(char) throws lib.json.JSONException;
  public java.lang.String next(int) throws lib.json.JSONException;
  public char nextClean() throws lib.json.JSONException;
  public java.lang.String nextString(char) throws lib.json.JSONException;
  public java.lang.String nextTo(char) throws lib.json.JSONException;
  public java.lang.String nextTo(java.lang.String) throws lib.json.JSONException;
  public java.lang.Object nextValue() throws lib.json.JSONException;
  public char skipTo(char) throws lib.json.JSONException;
  public lib.json.JSONException syntaxError(java.lang.String);
  public java.lang.String toString();
}
Compiled from "JSONWriter.java"
public class lib.json.JSONWriter {
  protected char mode;
  protected java.io.Writer writer;
  public lib.json.JSONWriter(java.io.Writer);
  public lib.json.JSONWriter array() throws lib.json.JSONException;
  public lib.json.JSONWriter endArray() throws lib.json.JSONException;
  public lib.json.JSONWriter endObject() throws lib.json.JSONException;
  public lib.json.JSONWriter key(java.lang.String) throws lib.json.JSONException;
  public lib.json.JSONWriter object() throws lib.json.JSONException;
  public lib.json.JSONWriter value(boolean) throws lib.json.JSONException;
  public lib.json.JSONWriter value(double) throws lib.json.JSONException;
  public lib.json.JSONWriter value(long) throws lib.json.JSONException;
  public lib.json.JSONWriter value(java.lang.Object) throws lib.json.JSONException;
}
Compiled from "Test.java"
public class lib.json.Test {
  public lib.json.Test();
  public static void main(java.lang.String[]);
}
Compiled from "Test.java"
class lib.json.Test$1Obj implements lib.json.JSONString {
  public java.lang.String aString;
  public double aNumber;
  public boolean aBoolean;
  public lib.json.Test$1Obj(java.lang.String, double, boolean);
  public double getNumber();
  public java.lang.String getString();
  public boolean isBoolean();
  public java.lang.String getBENT();
  public java.lang.String getX();
  public java.lang.String toJSONString();
  public java.lang.String toString();
}
Compiled from "XML.java"
public class lib.json.XML {
  public static final java.lang.Character AMP;
  public static final java.lang.Character APOS;
  public static final java.lang.Character BANG;
  public static final java.lang.Character EQ;
  public static final java.lang.Character GT;
  public static final java.lang.Character LT;
  public static final java.lang.Character QUEST;
  public static final java.lang.Character QUOT;
  public static final java.lang.Character SLASH;
  public lib.json.XML();
  public static java.lang.String escape(java.lang.String);
  public static void noSpace(java.lang.String) throws lib.json.JSONException;
  public static lib.json.JSONObject toJSONObject(java.lang.String) throws lib.json.JSONException;
  public static java.lang.String toString(java.lang.Object) throws lib.json.JSONException;
  public static java.lang.String toString(java.lang.Object, java.lang.String) throws lib.json.JSONException;
  static {};
}
Compiled from "XMLTokener.java"
public class lib.json.XMLTokener extends lib.json.JSONTokener {
  public static final java.util.HashMap entity;
  public lib.json.XMLTokener(java.lang.String);
  public java.lang.String nextCDATA() throws lib.json.JSONException;
  public java.lang.Object nextContent() throws lib.json.JSONException;
  public java.lang.Object nextEntity(char) throws lib.json.JSONException;
  public java.lang.Object nextMeta() throws lib.json.JSONException;
  public java.lang.Object nextToken() throws lib.json.JSONException;
  public boolean skipPast(java.lang.String) throws lib.json.JSONException;
  static {};
}
Compiled from "NextGen.java"
public class nextgen.NextGen {
  public nextgen.NextGen();
  public static void main(java.lang.String[]);
}
Compiled from "NextGen.java"
final class nextgen.NextGen$1 implements java.lang.Runnable {
  nextgen.NextGen$1();
  public void run();
}
Compiled from "NextGenControl.java"
public class nextgen.control.NextGenControl {
  public nextgen.control.NextGenControl();
}
Compiled from "DAO.java"
public class nextgen.dao.DAO {
  public nextgen.dao.DAO();
  public nextgen.model.Project getProject(java.lang.String) throws java.lang.Exception;
  public void saveProject(nextgen.model.Project, java.lang.String) throws java.lang.Exception;
  public static void main(java.lang.String[]);
}
Compiled from "FileManager.java"
public class nextgen.dao.FileManager {
  public nextgen.dao.FileManager();
  public lib.json.JSONObject loadData(java.lang.String) throws java.lang.Exception;
  public void saveData(lib.json.JSONObject, java.lang.String) throws java.lang.Exception;
  public static boolean generateFolder(java.lang.String);
  public static boolean checkFolder(java.lang.String);
  public static void generateFile(java.lang.String, java.lang.String);
  public static void copyDir(java.lang.String, java.lang.String);
}
Compiled from "NextGenFactory.java"
public class nextgen.dao.NextGenFactory {
  public nextgen.dao.NextGenFactory();
}
Compiled from "AngularClient.java"
public class nextgen.generator.AngularClient extends nextgen.generator.Generator {
  public nextgen.generator.AngularClient();
  public void generate(nextgen.model.Project, java.lang.String) throws java.lang.Exception;
  public static java.lang.String capitalize(java.lang.String);
}
Compiled from "Generator.java"
public abstract class nextgen.generator.Generator {
  public nextgen.generator.Generator();
  public abstract void generate(nextgen.model.Project, java.lang.String) throws java.lang.Exception;
}
Compiled from "JavaScriptClient.java"
public class nextgen.generator.JavaScriptClient extends nextgen.generator.Generator {
  public nextgen.generator.JavaScriptClient();
  public void generate(nextgen.model.Project, java.lang.String) throws java.lang.Exception;
  public java.lang.String createDictionary();
  public java.lang.String createModel();
  public java.lang.String createCall();
}
Compiled from "PHPObjectOriented.java"
public class nextgen.generator.PHPObjectOriented extends nextgen.generator.Generator {
  public nextgen.generator.PHPObjectOriented();
  public void generate(nextgen.model.Project, java.lang.String) throws java.lang.Exception;
  public boolean createPackages() throws java.lang.Exception;
  public void createDao();
  public void createHelpers();
  public void createModel();
  public void createServices();
  public static java.lang.String capitalize(java.lang.String);
}
Compiled from "MysqlImporter.java"
public class nextgen.importer.MysqlImporter {
  public nextgen.importer.MysqlImporter();
  public static void importer(nextgen.model.Project, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String) throws java.sql.SQLException;
  public static java.lang.String capitalize(java.lang.String);
}
Compiled from "Attribute.java"
public class nextgen.model.Attribute {
  public nextgen.model.Attribute(int, java.lang.String, nextgen.model.Entity, nextgen.model.enums.Cardinality, boolean, java.lang.String, java.lang.String, boolean, java.lang.String);
  public java.lang.Object[] getRow();
  public java.lang.String toString();
  public java.util.HashMap<java.lang.String, java.lang.Object> toHashMap();
  public java.lang.String getName();
  public void setName(java.lang.String);
  public nextgen.model.Entity getEntity();
  public void setEntity(nextgen.model.Entity);
  public nextgen.model.enums.Cardinality getCardinality();
  public void setCardinality(nextgen.model.enums.Cardinality);
  public boolean isRequired();
  public void setRequired(boolean);
  public java.lang.String getComment();
  public void setComment(java.lang.String);
  public java.lang.String getDefaultValue();
  public void setDefaultValue(java.lang.String);
  public int getId();
  public void setId(int);
  public boolean isAutoincrement();
  public void setAutoincrement(boolean);
  public java.lang.String getCommonTable();
  public void setCommonTable(java.lang.String);
}
Compiled from "Element.java"
public class nextgen.model.Element extends nextgen.model.Entity {
  public nextgen.model.Element(java.lang.String, java.lang.String, java.lang.String, nextgen.model.Package, nextgen.model.Element, java.util.ArrayList<nextgen.model.Attribute>, java.util.ArrayList<nextgen.model.Key>);
  public nextgen.model.Element(java.lang.String, java.lang.String, java.lang.String);
  public java.util.HashMap<java.lang.String, java.lang.Object> toHashMap();
  public nextgen.model.Element getParent();
  public void setParent(nextgen.model.Element);
  public java.util.ArrayList<nextgen.model.Attribute> getAttributes();
  public void setAttributes(java.util.ArrayList<nextgen.model.Attribute>);
  public java.util.ArrayList<nextgen.model.Key> getKeys();
  public void setKeys(java.util.ArrayList<nextgen.model.Key>);
  public java.lang.String getTableName();
  public void setTableName(java.lang.String);
  public nextgen.model.Package getPackage1();
  public void setPackage1(nextgen.model.Package);
}
Compiled from "Entity.java"
public class nextgen.model.Entity {
  public nextgen.model.Entity(java.lang.String, java.lang.String);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public java.lang.String getDescription();
  public void setDescription(java.lang.String);
  public java.lang.String toString();
  public java.util.HashMap<java.lang.String, java.lang.Object> toHashMap();
}
Compiled from "Key.java"
public class nextgen.model.Key {
  public nextgen.model.Key(java.lang.String, nextgen.model.enums.KeyType);
  public nextgen.model.Key(java.lang.String, nextgen.model.enums.KeyType, java.util.ArrayList<nextgen.model.Attribute>);
  public java.lang.String toString();
  public java.util.HashMap<java.lang.String, java.lang.Object> toHashMap();
  public java.lang.String getName();
  public void setName(java.lang.String);
  public nextgen.model.enums.KeyType getType();
  public void setType(nextgen.model.enums.KeyType);
  public java.util.ArrayList<nextgen.model.Attribute> getAttributes();
  public void setAttributes(java.util.ArrayList<nextgen.model.Attribute>);
}
Compiled from "Package.java"
public class nextgen.model.Package extends nextgen.model.Entity {
  public nextgen.model.Package(java.lang.String, java.lang.String);
  public java.util.HashMap<java.lang.String, java.lang.Object> toHashMap();
}
Compiled from "Project.java"
public class nextgen.model.Project extends nextgen.model.Entity {
  public nextgen.model.Project(java.lang.String, java.lang.String);
  public nextgen.model.Project(java.lang.String, java.lang.String, java.util.ArrayList<nextgen.model.Element>);
  public java.util.HashMap<java.lang.String, java.lang.Object> toHashMap();
  public java.util.ArrayList<nextgen.model.Element> getElements();
  public void setElements(java.util.ArrayList<nextgen.model.Element>);
}
Compiled from "Cardinality.java"
public final class nextgen.model.enums.Cardinality extends java.lang.Enum<nextgen.model.enums.Cardinality> {
  public static final nextgen.model.enums.Cardinality Single;
  public static final nextgen.model.enums.Cardinality Multiple;
  public static nextgen.model.enums.Cardinality[] values();
  public static nextgen.model.enums.Cardinality valueOf(java.lang.String);
  static {};
}
Compiled from "KeyType.java"
public final class nextgen.model.enums.KeyType extends java.lang.Enum<nextgen.model.enums.KeyType> {
  public static final nextgen.model.enums.KeyType Primary;
  public static final nextgen.model.enums.KeyType Unique;
  public static nextgen.model.enums.KeyType[] values();
  public static nextgen.model.enums.KeyType valueOf(java.lang.String);
  static {};
}
Compiled from "DImportMysql.java"
public class nextgen.view.DImportMysql extends javax.swing.JDialog {
  public nextgen.view.DImportMysql(nextgen.view.FProject);
  static void access$000(nextgen.view.DImportMysql, java.awt.event.ActionEvent);
}
Compiled from "DImportMysql.java"
class nextgen.view.DImportMysql$1 implements java.awt.event.ActionListener {
  final nextgen.view.DImportMysql this$0;
  nextgen.view.DImportMysql$1(nextgen.view.DImportMysql);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DKey.java"
public class nextgen.view.DKey extends javax.swing.JDialog {
  public nextgen.view.DKey(nextgen.view.FProject, nextgen.view.PElement, nextgen.model.Key);
  static void access$000(nextgen.view.DKey, java.awt.event.ActionEvent);
  static nextgen.model.Key access$100(nextgen.view.DKey);
}
Compiled from "DKey.java"
class nextgen.view.DKey$1 implements java.awt.event.ActionListener {
  final nextgen.view.DKey this$0;
  nextgen.view.DKey$1(nextgen.view.DKey);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DKey.java"
class nextgen.view.DKey$ActionCbListener implements java.awt.event.ActionListener {
  final nextgen.view.DKey this$0;
  public nextgen.view.DKey$ActionCbListener(nextgen.view.DKey, nextgen.model.Attribute);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DPackages.java"
public class nextgen.view.DPackages extends javax.swing.JDialog {
  public nextgen.view.DPackages(nextgen.view.FProject);
  static void access$000(nextgen.view.DPackages, java.awt.event.ActionEvent);
  static void access$100(nextgen.view.DPackages, java.awt.event.ActionEvent);
}
Compiled from "DPackages.java"
class nextgen.view.DPackages$1 implements java.awt.event.ActionListener {
  final nextgen.view.DPackages this$0;
  nextgen.view.DPackages$1(nextgen.view.DPackages);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DPackages.java"
class nextgen.view.DPackages$2 implements java.awt.event.ActionListener {
  final nextgen.view.DPackages this$0;
  nextgen.view.DPackages$2(nextgen.view.DPackages);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
public final class nextgen.view.FProject extends javax.swing.JFrame {
  public nextgen.view.FProject();
  public void refreshElementList();
  public void updatePackages();
  public java.util.HashMap<java.lang.String, nextgen.model.Package> getPackages();
  public nextgen.model.Project getProject();
  static void access$000(nextgen.view.FProject, javax.swing.event.ListSelectionEvent);
  static void access$100(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$200(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$300(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$400(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$500(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$600(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$700(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$800(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$900(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$1000(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$1100(nextgen.view.FProject, java.awt.event.ActionEvent);
  static void access$1200(nextgen.view.FProject, java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$1 implements javax.swing.event.ListSelectionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$1(nextgen.view.FProject);
  public void valueChanged(javax.swing.event.ListSelectionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$10 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$10(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$11 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$11(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$12 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$12(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$13 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$13(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$14 extends javax.swing.filechooser.FileFilter {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$14(nextgen.view.FProject);
  public boolean accept(java.io.File);
  public java.lang.String getDescription();
}
Compiled from "FProject.java"
class nextgen.view.FProject$15 extends javax.swing.filechooser.FileFilter {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$15(nextgen.view.FProject);
  public boolean accept(java.io.File);
  public java.lang.String getDescription();
}
Compiled from "FProject.java"
class nextgen.view.FProject$2 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$2(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$3 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$3(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$4 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$4(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$5 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$5(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$6 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$6(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$7 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$7(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$8 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$8(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FProject.java"
class nextgen.view.FProject$9 implements java.awt.event.ActionListener {
  final nextgen.view.FProject this$0;
  nextgen.view.FProject$9(nextgen.view.FProject);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "NextGenHelper.java"
public class nextgen.view.NextGenHelper {
  public static nextgen.model.Entity[] primitives;
  public nextgen.view.NextGenHelper();
  public static void adjustColumns(javax.swing.JTable);
  static {};
}
Compiled from "PElement.java"
public final class nextgen.view.PElement extends javax.swing.JPanel {
  public static javax.swing.JComboBox<nextgen.model.Entity> cbEntities;
  public static javax.swing.JComboBox<nextgen.model.enums.Cardinality> cbCardinality;
  public nextgen.view.PElement(nextgen.view.FProject, nextgen.model.Element);
  public void refreshPackages();
  public nextgen.model.Element getElement();
  void refreshKeys();
  static void access$000(nextgen.view.PElement, java.awt.event.ActionEvent);
  static void access$100(nextgen.view.PElement, java.awt.event.ActionEvent);
  static void access$200(nextgen.view.PElement, java.awt.event.ActionEvent);
  static void access$300(nextgen.view.PElement, java.awt.event.ActionEvent);
  static void access$400(nextgen.view.PElement, java.awt.event.ActionEvent);
  static void access$500(nextgen.view.PElement, java.awt.event.ActionEvent);
  static javax.swing.JTextField access$600(nextgen.view.PElement);
  static javax.swing.JTextField access$700(nextgen.view.PElement);
  static javax.swing.table.DefaultTableModel access$800(nextgen.view.PElement);
}
Compiled from "PElement.java"
class nextgen.view.PElement$1 implements java.awt.event.ActionListener {
  final nextgen.view.PElement this$0;
  nextgen.view.PElement$1(nextgen.view.PElement);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PElement.java"
class nextgen.view.PElement$2 implements java.awt.event.ActionListener {
  final nextgen.view.PElement this$0;
  nextgen.view.PElement$2(nextgen.view.PElement);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PElement.java"
class nextgen.view.PElement$3 implements java.awt.event.ActionListener {
  final nextgen.view.PElement this$0;
  nextgen.view.PElement$3(nextgen.view.PElement);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PElement.java"
class nextgen.view.PElement$4 implements java.awt.event.ActionListener {
  final nextgen.view.PElement this$0;
  nextgen.view.PElement$4(nextgen.view.PElement);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PElement.java"
class nextgen.view.PElement$5 implements java.awt.event.ActionListener {
  final nextgen.view.PElement this$0;
  nextgen.view.PElement$5(nextgen.view.PElement);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PElement.java"
class nextgen.view.PElement$6 implements java.awt.event.ActionListener {
  final nextgen.view.PElement this$0;
  nextgen.view.PElement$6(nextgen.view.PElement);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PElement.java"
class nextgen.view.PElement$7 implements javax.swing.event.DocumentListener {
  final nextgen.view.PElement this$0;
  nextgen.view.PElement$7(nextgen.view.PElement);
  public void insertUpdate(javax.swing.event.DocumentEvent);
  public void removeUpdate(javax.swing.event.DocumentEvent);
  public void changedUpdate(javax.swing.event.DocumentEvent);
}
Compiled from "PElement.java"
class nextgen.view.PElement$8 extends javax.swing.table.DefaultTableModel {
  final nextgen.view.PElement this$0;
  nextgen.view.PElement$8(nextgen.view.PElement, java.lang.Object[][], java.lang.Object[]);
  public java.lang.Class getColumnClass(int);
}
Compiled from "PElement.java"
class nextgen.view.PElement$9 implements javax.swing.event.TableModelListener {
  final nextgen.view.PElement this$0;
  nextgen.view.PElement$9(nextgen.view.PElement);
  public void tableChanged(javax.swing.event.TableModelEvent);
}
