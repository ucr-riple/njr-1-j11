Compiled from "Crypt.java"
public class Crypt {
  static char[] IP;
  static char[] FP;
  static char[] PC1_C;
  static char[] PC1_D;
  static char[] shifts;
  static char[] PC2_C;
  static char[] PC2_D;
  static char[] C;
  static char[] D;
  static char[][] KS;
  static char[] E;
  static char[] e2;
  static char[][] S;
  static char[] P;
  static char[] preS;
  public Crypt();
  void encrypt(char[]);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "Crypt2.java"
public class Crypt2 {
  public static java.lang.String crypt(java.lang.String, java.lang.String);
  static {};
}
Compiled from "Driver.java"
public class Driver {
  public Driver();
  public static void main(java.lang.String[]);
}
Compiled from "ErrorFrame.java"
public class ErrorFrame extends javax.swing.JDialog {
  public static void spawnError();
  public static void spawnError(java.lang.String);
  public ErrorFrame(java.lang.String);
}
Compiled from "ErrorFrame.java"
class ErrorFrame$1 implements java.awt.event.ActionListener {
  final ErrorFrame this$0;
  ErrorFrame$1(ErrorFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GUI.java"
public class GUI {
  public GUI();
  public static void addTrip(java.lang.String, java.lang.String);
  static javax.swing.JLabel access$000(GUI);
  static javax.swing.JTextPane access$100(GUI);
  static javax.swing.JComboBox access$200(GUI);
  static GUI$StopAction access$300(GUI);
  static void access$400(GUI);
  static GUI$RunAction access$500(GUI);
  static void access$600(GUI);
  static javax.swing.JFrame access$700(GUI);
  static GUI access$900();
  static javax.swing.table.DefaultTableModel access$1000(GUI);
}
Compiled from "GUI.java"
class GUI$1 implements java.lang.Runnable {
  final GUI this$0;
  GUI$1(GUI);
  public void run();
}
Compiled from "GUI.java"
class GUI$2 extends java.awt.event.WindowAdapter {
  final javax.swing.JFrame val$frame;
  final GUI this$0;
  GUI$2(GUI, javax.swing.JFrame);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "GUI.java"
class GUI$3 implements java.awt.event.ActionListener {
  final GUI this$0;
  GUI$3(GUI);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GUI.java"
class GUI$4 implements java.awt.event.ActionListener {
  final GUI this$0;
  GUI$4(GUI);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GUI.java"
class GUI$5 implements java.awt.event.ActionListener {
  final GUI this$0;
  GUI$5(GUI);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GUI.java"
class GUI$6 implements javax.swing.event.HyperlinkListener {
  final GUI this$0;
  GUI$6(GUI);
  public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent);
}
Compiled from "GUI.java"
class GUI$7 implements java.awt.event.ActionListener {
  final javax.swing.text.StyledDocument val$doc;
  final javax.swing.text.Style val$style;
  final GUI this$0;
  GUI$7(GUI, javax.swing.text.StyledDocument, javax.swing.text.Style);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GUI.java"
class GUI$CloseAction extends javax.swing.AbstractAction {
  final GUI this$0;
  public void actionPerformed(java.awt.event.ActionEvent);
  GUI$CloseAction(GUI, GUI$1);
}
Compiled from "GUI.java"
class GUI$RunAction extends javax.swing.AbstractAction {
  final GUI this$0;
  public void actionPerformed(java.awt.event.ActionEvent);
  GUI$RunAction(GUI, GUI$1);
}
Compiled from "GUI.java"
class GUI$StopAction extends javax.swing.AbstractAction {
  final GUI this$0;
  public void actionPerformed(java.awt.event.ActionEvent);
  GUI$StopAction(GUI, GUI$1);
}
Compiled from "Hash.java"
public class Hash {
  public Hash();
  public static java.lang.String getTripCode(java.lang.String);
  static {};
}
Compiled from "HashBenchmark.java"
public class HashBenchmark {
  public HashBenchmark();
  public static void main(java.lang.String[]);
}
Compiled from "HashBenchmark.java"
final class HashBenchmark$1 implements java.lang.Runnable {
  HashBenchmark$1();
  public void run();
}
Compiled from "HashDispatcher.java"
public class HashDispatcher {
  public static void dispatch(dk.brics.automaton.RunAutomaton, int);
  public static void killAll();
  public static synchronized long getKtps();
  static void access$000();
  static {};
}
Compiled from "HashDispatcher.java"
class HashDispatcher$HashThread extends java.lang.Thread {
  public HashDispatcher$HashThread(dk.brics.automaton.RunAutomaton, java.lang.String);
  public void run();
}
Compiled from "JCrypt.java"
public class JCrypt {
  public static final java.lang.String crypt(java.lang.String, java.lang.String);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "MWCRand.java"
public class MWCRand {
  public MWCRand();
  public static void init(int);
  public static void init(int, int, int);
  public static int rand();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "Util.java"
public class Util {
  public static java.awt.Color BG_COLOR;
  public Util();
  public static boolean isPossible4chanAutomaton(dk.brics.automaton.Automaton);
  public static boolean isValidRegExp(java.lang.String);
  public static void writeTextToFile(java.lang.String, java.lang.String);
  public static java.util.Iterator<java.lang.String> readLinesFromString(java.lang.String);
  public static java.util.Iterator<java.lang.String> readLinesFromFile(java.lang.String);
  static {};
}
Compiled from "Util.java"
final class Util$1 implements java.util.Iterator<java.lang.String> {
  final java.util.LinkedList val$list;
  Util$1(java.util.LinkedList);
  public java.lang.String next();
  public boolean hasNext();
  public void remove();
  public java.lang.Object next();
}
Compiled from "Util.java"
final class Util$2 implements java.util.Iterator<java.lang.String> {
  final java.lang.String val$first;
  final java.io.BufferedReader val$buf;
  Util$2(java.lang.String, java.io.BufferedReader);
  public boolean hasNext();
  public java.lang.String next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "Automaton.java"
public class dk.brics.automaton.Automaton implements java.io.Serializable,java.lang.Cloneable {
  static final long serialVersionUID;
  public static final int MINIMIZE_HUFFMAN;
  public static final int MINIMIZE_BRZOZOWSKI;
  public static final int MINIMIZE_HOPCROFT;
  static int minimization;
  dk.brics.automaton.State initial;
  boolean deterministic;
  transient java.lang.Object info;
  int hash_code;
  java.lang.String singleton;
  static boolean minimize_always;
  static boolean allow_mutation;
  static java.lang.Boolean is_debug;
  public dk.brics.automaton.Automaton();
  boolean isDebug();
  public static void setMinimization(int);
  public static void setMinimizeAlways(boolean);
  public static boolean setAllowMutate(boolean);
  static boolean getAllowMutate();
  void checkMinimizeAlways();
  boolean isSingleton();
  public java.lang.String getSingleton();
  public void setInitialState(dk.brics.automaton.State);
  public dk.brics.automaton.State getInitialState();
  public boolean isDeterministic();
  public void setDeterministic(boolean);
  public void setInfo(java.lang.Object);
  public java.lang.Object getInfo();
  public java.util.Set<dk.brics.automaton.State> getStates();
  public java.util.Set<dk.brics.automaton.State> getAcceptStates();
  static void setStateNumbers(java.util.Set<dk.brics.automaton.State>);
  void totalize();
  public void restoreInvariant();
  public void reduce();
  char[] getStartPoints();
  public java.util.Set<dk.brics.automaton.State> getLiveStates();
  public void removeDeadTransitions();
  static dk.brics.automaton.Transition[][] getSortedTransitions(java.util.Set<dk.brics.automaton.State>);
  public void expandSingleton();
  public int getNumberOfStates();
  public int getNumberOfTransitions();
  public boolean equals(java.lang.Object);
  public int hashCode();
  void recomputeHashCode();
  void clearHashCode();
  public java.lang.String toString();
  public java.lang.String toDot();
  dk.brics.automaton.Automaton cloneExpanded();
  dk.brics.automaton.Automaton cloneExpandedIfRequired();
  public dk.brics.automaton.Automaton clone();
  dk.brics.automaton.Automaton cloneIfRequired();
  public static dk.brics.automaton.Automaton load(java.net.URL) throws java.io.IOException, java.io.OptionalDataException, java.lang.ClassCastException, java.lang.ClassNotFoundException, java.io.InvalidClassException;
  public static dk.brics.automaton.Automaton load(java.io.InputStream) throws java.io.IOException, java.io.OptionalDataException, java.lang.ClassCastException, java.lang.ClassNotFoundException, java.io.InvalidClassException;
  public void store(java.io.OutputStream) throws java.io.IOException;
  public static dk.brics.automaton.Automaton makeEmpty();
  public static dk.brics.automaton.Automaton makeEmptyString();
  public static dk.brics.automaton.Automaton makeAnyString();
  public static dk.brics.automaton.Automaton makeAnyChar();
  public static dk.brics.automaton.Automaton makeChar(char);
  public static dk.brics.automaton.Automaton makeCharRange(char, char);
  public static dk.brics.automaton.Automaton makeCharSet(java.lang.String);
  public static dk.brics.automaton.Automaton makeInterval(int, int, int) throws java.lang.IllegalArgumentException;
  public static dk.brics.automaton.Automaton makeString(java.lang.String);
  public static dk.brics.automaton.Automaton makeStringUnion(java.lang.CharSequence...);
  public static dk.brics.automaton.Automaton makeMaxInteger(java.lang.String);
  public static dk.brics.automaton.Automaton makeMinInteger(java.lang.String);
  public static dk.brics.automaton.Automaton makeTotalDigits(int);
  public static dk.brics.automaton.Automaton makeFractionDigits(int);
  public static dk.brics.automaton.Automaton makeIntegerValue(java.lang.String);
  public static dk.brics.automaton.Automaton makeDecimalValue(java.lang.String);
  public static dk.brics.automaton.Automaton makeStringMatcher(java.lang.String);
  public dk.brics.automaton.Automaton concatenate(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton concatenate(java.util.List<dk.brics.automaton.Automaton>);
  public dk.brics.automaton.Automaton optional();
  public dk.brics.automaton.Automaton repeat();
  public dk.brics.automaton.Automaton repeat(int);
  public dk.brics.automaton.Automaton repeat(int, int);
  public dk.brics.automaton.Automaton complement();
  public dk.brics.automaton.Automaton minus(dk.brics.automaton.Automaton);
  public dk.brics.automaton.Automaton intersection(dk.brics.automaton.Automaton);
  public boolean subsetOf(dk.brics.automaton.Automaton);
  public dk.brics.automaton.Automaton union(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton union(java.util.Collection<dk.brics.automaton.Automaton>);
  public void determinize();
  public void addEpsilons(java.util.Collection<dk.brics.automaton.StatePair>);
  public boolean isEmptyString();
  public boolean isEmpty();
  public boolean isTotal();
  public java.lang.String getShortestExample(boolean);
  public boolean run(java.lang.String);
  public void minimize();
  public static dk.brics.automaton.Automaton minimize(dk.brics.automaton.Automaton);
  public dk.brics.automaton.Automaton overlap(dk.brics.automaton.Automaton);
  public dk.brics.automaton.Automaton singleChars();
  public dk.brics.automaton.Automaton trim(java.lang.String, char);
  public dk.brics.automaton.Automaton compress(java.lang.String, char);
  public dk.brics.automaton.Automaton subst(java.util.Map<java.lang.Character, java.util.Set<java.lang.Character>>);
  public dk.brics.automaton.Automaton subst(char, java.lang.String);
  public dk.brics.automaton.Automaton homomorph(char[], char[]);
  public dk.brics.automaton.Automaton projectChars(java.util.Set<java.lang.Character>);
  public boolean isFinite();
  public java.util.Set<java.lang.String> getStrings(int);
  public java.util.Set<java.lang.String> getFiniteStrings();
  public java.util.Set<java.lang.String> getFiniteStrings(int);
  public java.lang.String getCommonPrefix();
  public void prefixClose();
  public static dk.brics.automaton.Automaton hexCases(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton replaceWhitespace(dk.brics.automaton.Automaton);
  public static java.lang.String shuffleSubsetOf(java.util.Collection<dk.brics.automaton.Automaton>, dk.brics.automaton.Automaton, java.lang.Character, java.lang.Character);
  public dk.brics.automaton.Automaton shuffle(dk.brics.automaton.Automaton);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static {};
}
Compiled from "AutomatonMatcher.java"
public class dk.brics.automaton.AutomatonMatcher implements java.util.regex.MatchResult {
  dk.brics.automaton.AutomatonMatcher(java.lang.CharSequence, dk.brics.automaton.RunAutomaton);
  public boolean find();
  public int end() throws java.lang.IllegalStateException;
  public int end(int) throws java.lang.IndexOutOfBoundsException, java.lang.IllegalStateException;
  public java.lang.String group() throws java.lang.IllegalStateException;
  public java.lang.String group(int) throws java.lang.IndexOutOfBoundsException, java.lang.IllegalStateException;
  public int groupCount();
  public int start() throws java.lang.IllegalStateException;
  public int start(int) throws java.lang.IndexOutOfBoundsException, java.lang.IllegalStateException;
  public java.util.regex.MatchResult toMatchResult();
}
Compiled from "AutomatonProvider.java"
public interface dk.brics.automaton.AutomatonProvider {
  public abstract dk.brics.automaton.Automaton getAutomaton(java.lang.String) throws java.io.IOException;
}
Compiled from "BasicAutomata.java"
public final class dk.brics.automaton.BasicAutomata {
  public static dk.brics.automaton.Automaton makeEmpty();
  public static dk.brics.automaton.Automaton makeEmptyString();
  public static dk.brics.automaton.Automaton makeAnyString();
  public static dk.brics.automaton.Automaton makeAnyChar();
  public static dk.brics.automaton.Automaton makeChar(char);
  public static dk.brics.automaton.Automaton makeCharRange(char, char);
  public static dk.brics.automaton.Automaton makeCharSet(java.lang.String);
  public static dk.brics.automaton.Automaton makeInterval(int, int, int) throws java.lang.IllegalArgumentException;
  public static dk.brics.automaton.Automaton makeString(java.lang.String);
  public static dk.brics.automaton.Automaton makeStringUnion(java.lang.CharSequence...);
  public static dk.brics.automaton.Automaton makeMaxInteger(java.lang.String);
  public static dk.brics.automaton.Automaton makeMinInteger(java.lang.String);
  public static dk.brics.automaton.Automaton makeTotalDigits(int);
  public static dk.brics.automaton.Automaton makeFractionDigits(int);
  public static dk.brics.automaton.Automaton makeIntegerValue(java.lang.String);
  public static dk.brics.automaton.Automaton makeDecimalValue(java.lang.String);
  public static dk.brics.automaton.Automaton makeStringMatcher(java.lang.String);
}
Compiled from "BasicOperations.java"
public final class dk.brics.automaton.BasicOperations {
  public static dk.brics.automaton.Automaton concatenate(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton concatenate(java.util.List<dk.brics.automaton.Automaton>);
  public static dk.brics.automaton.Automaton optional(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton repeat(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton repeat(dk.brics.automaton.Automaton, int);
  public static dk.brics.automaton.Automaton repeat(dk.brics.automaton.Automaton, int, int);
  public static dk.brics.automaton.Automaton complement(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton minus(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton intersection(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton);
  public static boolean subsetOf(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton union(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton union(java.util.Collection<dk.brics.automaton.Automaton>);
  public static void determinize(dk.brics.automaton.Automaton);
  static void determinize(dk.brics.automaton.Automaton, java.util.Set<dk.brics.automaton.State>);
  public static void addEpsilons(dk.brics.automaton.Automaton, java.util.Collection<dk.brics.automaton.StatePair>);
  public static boolean isEmptyString(dk.brics.automaton.Automaton);
  public static boolean isEmpty(dk.brics.automaton.Automaton);
  public static boolean isTotal(dk.brics.automaton.Automaton);
  public static java.lang.String getShortestExample(dk.brics.automaton.Automaton, boolean);
  static java.lang.String getShortestExample(dk.brics.automaton.State, boolean);
  public static boolean run(dk.brics.automaton.Automaton, java.lang.String);
}
Compiled from "Datatypes.java"
public final class dk.brics.automaton.Datatypes {
  public static void main(java.lang.String[]);
  public static dk.brics.automaton.Automaton get(java.lang.String);
  public static boolean isUnicodeBlockName(java.lang.String);
  public static boolean isUnicodeCategoryName(java.lang.String);
  public static boolean isXMLName(java.lang.String);
  public static boolean exists(java.lang.String);
  static dk.brics.automaton.Automaton getWhitespaceAutomaton();
  static {};
}
Compiled from "DatatypesAutomatonProvider.java"
public class dk.brics.automaton.DatatypesAutomatonProvider implements dk.brics.automaton.AutomatonProvider {
  public dk.brics.automaton.DatatypesAutomatonProvider();
  public dk.brics.automaton.DatatypesAutomatonProvider(boolean, boolean, boolean);
  public dk.brics.automaton.Automaton getAutomaton(java.lang.String);
}
Compiled from "MinimizationOperations.java"
public final class dk.brics.automaton.MinimizationOperations {
  public static void minimize(dk.brics.automaton.Automaton);
  public static void minimizeHuffman(dk.brics.automaton.Automaton);
  public static void minimizeBrzozowski(dk.brics.automaton.Automaton);
  public static void minimizeHopcroft(dk.brics.automaton.Automaton);
}
Compiled from "MinimizationOperations.java"
class dk.brics.automaton.MinimizationOperations$IntPair {
  int n1;
  int n2;
  dk.brics.automaton.MinimizationOperations$IntPair(int, int);
}
Compiled from "MinimizationOperations.java"
class dk.brics.automaton.MinimizationOperations$StateList {
  int size;
  dk.brics.automaton.MinimizationOperations$StateListNode first;
  dk.brics.automaton.MinimizationOperations$StateListNode last;
  dk.brics.automaton.MinimizationOperations$StateList();
  dk.brics.automaton.MinimizationOperations$StateListNode add(dk.brics.automaton.State);
}
Compiled from "MinimizationOperations.java"
class dk.brics.automaton.MinimizationOperations$StateListNode {
  dk.brics.automaton.State q;
  dk.brics.automaton.MinimizationOperations$StateListNode next;
  dk.brics.automaton.MinimizationOperations$StateListNode prev;
  dk.brics.automaton.MinimizationOperations$StateList sl;
  dk.brics.automaton.MinimizationOperations$StateListNode(dk.brics.automaton.State, dk.brics.automaton.MinimizationOperations$StateList);
  void remove();
}
Compiled from "RegExp.java"
public class dk.brics.automaton.RegExp {
  public static final int INTERSECTION;
  public static final int COMPLEMENT;
  public static final int EMPTY;
  public static final int ANYSTRING;
  public static final int AUTOMATON;
  public static final int INTERVAL;
  public static final int ALL;
  public static final int NONE;
  dk.brics.automaton.RegExp$Kind kind;
  dk.brics.automaton.RegExp exp1;
  dk.brics.automaton.RegExp exp2;
  java.lang.String s;
  char c;
  int min;
  int max;
  int digits;
  char from;
  char to;
  java.lang.String b;
  int flags;
  int pos;
  dk.brics.automaton.RegExp();
  public dk.brics.automaton.RegExp(java.lang.String) throws java.lang.IllegalArgumentException;
  public dk.brics.automaton.RegExp(java.lang.String, int) throws java.lang.IllegalArgumentException;
  public dk.brics.automaton.Automaton toAutomaton();
  public dk.brics.automaton.Automaton toAutomaton(boolean);
  public dk.brics.automaton.Automaton toAutomaton(dk.brics.automaton.AutomatonProvider) throws java.lang.IllegalArgumentException;
  public dk.brics.automaton.Automaton toAutomaton(dk.brics.automaton.AutomatonProvider, boolean) throws java.lang.IllegalArgumentException;
  public dk.brics.automaton.Automaton toAutomaton(java.util.Map<java.lang.String, dk.brics.automaton.Automaton>) throws java.lang.IllegalArgumentException;
  public dk.brics.automaton.Automaton toAutomaton(java.util.Map<java.lang.String, dk.brics.automaton.Automaton>, boolean) throws java.lang.IllegalArgumentException;
  public boolean setAllowMutate(boolean);
  public java.lang.String toString();
  java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder);
  public java.util.Set<java.lang.String> getIdentifiers();
  void getIdentifiers(java.util.Set<java.lang.String>);
  static dk.brics.automaton.RegExp makeUnion(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp);
  static dk.brics.automaton.RegExp makeConcatenation(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp);
  static dk.brics.automaton.RegExp makeIntersection(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp);
  static dk.brics.automaton.RegExp makeOptional(dk.brics.automaton.RegExp);
  static dk.brics.automaton.RegExp makeRepeat(dk.brics.automaton.RegExp);
  static dk.brics.automaton.RegExp makeRepeat(dk.brics.automaton.RegExp, int);
  static dk.brics.automaton.RegExp makeRepeat(dk.brics.automaton.RegExp, int, int);
  static dk.brics.automaton.RegExp makeComplement(dk.brics.automaton.RegExp);
  static dk.brics.automaton.RegExp makeChar(char);
  static dk.brics.automaton.RegExp makeCharRange(char, char);
  static dk.brics.automaton.RegExp makeAnyChar();
  static dk.brics.automaton.RegExp makeEmpty();
  static dk.brics.automaton.RegExp makeString(java.lang.String);
  static dk.brics.automaton.RegExp makeAnyString();
  static dk.brics.automaton.RegExp makeAutomaton(java.lang.String);
  static dk.brics.automaton.RegExp makeInterval(int, int, int);
  final dk.brics.automaton.RegExp parseUnionExp() throws java.lang.IllegalArgumentException;
  final dk.brics.automaton.RegExp parseInterExp() throws java.lang.IllegalArgumentException;
  final dk.brics.automaton.RegExp parseConcatExp() throws java.lang.IllegalArgumentException;
  final dk.brics.automaton.RegExp parseRepeatExp() throws java.lang.IllegalArgumentException;
  final dk.brics.automaton.RegExp parseComplExp() throws java.lang.IllegalArgumentException;
  final dk.brics.automaton.RegExp parseCharClassExp() throws java.lang.IllegalArgumentException;
  final dk.brics.automaton.RegExp parseCharClasses() throws java.lang.IllegalArgumentException;
  final dk.brics.automaton.RegExp parseCharClass() throws java.lang.IllegalArgumentException;
  final dk.brics.automaton.RegExp parseSimpleExp() throws java.lang.IllegalArgumentException;
  final char parseCharExp() throws java.lang.IllegalArgumentException;
  static {};
}
Compiled from "RegExp.java"
class dk.brics.automaton.RegExp$1 {
  static final int[] $SwitchMap$dk$brics$automaton$RegExp$Kind;
  static {};
}
Compiled from "RegExp.java"
final class dk.brics.automaton.RegExp$Kind extends java.lang.Enum<dk.brics.automaton.RegExp$Kind> {
  public static final dk.brics.automaton.RegExp$Kind REGEXP_UNION;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_CONCATENATION;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_INTERSECTION;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_OPTIONAL;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_REPEAT;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_REPEAT_MIN;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_REPEAT_MINMAX;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_COMPLEMENT;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_CHAR;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_CHAR_RANGE;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_ANYCHAR;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_EMPTY;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_STRING;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_ANYSTRING;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_AUTOMATON;
  public static final dk.brics.automaton.RegExp$Kind REGEXP_INTERVAL;
  public static dk.brics.automaton.RegExp$Kind[] values();
  public static dk.brics.automaton.RegExp$Kind valueOf(java.lang.String);
  static {};
}
Compiled from "RunAutomaton.java"
public class dk.brics.automaton.RunAutomaton implements java.io.Serializable {
  static final long serialVersionUID;
  int size;
  boolean[] accept;
  int initial;
  int[] transitions;
  char[] points;
  int[] classmap;
  final void setAlphabet();
  public java.lang.String toString();
  public int getSize();
  public boolean isAccept(int);
  public int getInitialState();
  public char[] getCharIntervals();
  int getCharClass(char);
  public dk.brics.automaton.RunAutomaton(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.RunAutomaton load(java.net.URL) throws java.io.IOException, java.io.OptionalDataException, java.lang.ClassCastException, java.lang.ClassNotFoundException, java.io.InvalidClassException;
  public static dk.brics.automaton.RunAutomaton load(java.io.InputStream) throws java.io.IOException, java.io.OptionalDataException, java.lang.ClassCastException, java.lang.ClassNotFoundException, java.io.InvalidClassException;
  public void store(java.io.OutputStream) throws java.io.IOException;
  public dk.brics.automaton.RunAutomaton(dk.brics.automaton.Automaton, boolean);
  public int step(int, char);
  public boolean run(java.lang.String);
  public int run(java.lang.String, int);
  public dk.brics.automaton.AutomatonMatcher newMatcher(java.lang.CharSequence);
  public dk.brics.automaton.AutomatonMatcher newMatcher(java.lang.CharSequence, int, int);
}
Compiled from "ShuffleOperations.java"
public final class dk.brics.automaton.ShuffleOperations {
  public static dk.brics.automaton.Automaton shuffle(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton);
  public static java.lang.String shuffleSubsetOf(java.util.Collection<dk.brics.automaton.Automaton>, dk.brics.automaton.Automaton, java.lang.Character, java.lang.Character);
}
Compiled from "ShuffleOperations.java"
class dk.brics.automaton.ShuffleOperations$ShuffleConfiguration {
  dk.brics.automaton.ShuffleOperations$ShuffleConfiguration prev;
  dk.brics.automaton.State[] ca_states;
  dk.brics.automaton.State a_state;
  char min;
  int hash;
  boolean shuffle_suspended;
  boolean surrogate;
  int suspended1;
  dk.brics.automaton.ShuffleOperations$ShuffleConfiguration(java.util.Collection<dk.brics.automaton.Automaton>, dk.brics.automaton.Automaton);
  dk.brics.automaton.ShuffleOperations$ShuffleConfiguration(dk.brics.automaton.ShuffleOperations$ShuffleConfiguration, int, dk.brics.automaton.State, char);
  dk.brics.automaton.ShuffleOperations$ShuffleConfiguration(dk.brics.automaton.ShuffleOperations$ShuffleConfiguration, int, dk.brics.automaton.State, dk.brics.automaton.State, char);
  public boolean equals(java.lang.Object);
  public int hashCode();
}
Compiled from "SpecialOperations.java"
public final class dk.brics.automaton.SpecialOperations {
  public static java.util.Set<dk.brics.automaton.State> reverse(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton overlap(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton singleChars(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton trim(dk.brics.automaton.Automaton, java.lang.String, char);
  public static dk.brics.automaton.Automaton compress(dk.brics.automaton.Automaton, java.lang.String, char);
  public static dk.brics.automaton.Automaton subst(dk.brics.automaton.Automaton, java.util.Map<java.lang.Character, java.util.Set<java.lang.Character>>);
  static int findIndex(char, char[]);
  public static dk.brics.automaton.Automaton subst(dk.brics.automaton.Automaton, char, java.lang.String);
  public static dk.brics.automaton.Automaton homomorph(dk.brics.automaton.Automaton, char[], char[]);
  public static dk.brics.automaton.Automaton projectChars(dk.brics.automaton.Automaton, java.util.Set<java.lang.Character>);
  public static boolean isFinite(dk.brics.automaton.Automaton);
  public static java.util.Set<java.lang.String> getStrings(dk.brics.automaton.Automaton, int);
  public static java.util.Set<java.lang.String> getFiniteStrings(dk.brics.automaton.Automaton);
  public static java.util.Set<java.lang.String> getFiniteStrings(dk.brics.automaton.Automaton, int);
  public static java.lang.String getCommonPrefix(dk.brics.automaton.Automaton);
  public static void prefixClose(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton hexCases(dk.brics.automaton.Automaton);
  public static dk.brics.automaton.Automaton replaceWhitespace(dk.brics.automaton.Automaton);
}
Compiled from "State.java"
public class dk.brics.automaton.State implements java.io.Serializable, java.lang.Comparable<dk.brics.automaton.State> {
  static final long serialVersionUID;
  boolean accept;
  java.util.Set<dk.brics.automaton.Transition> transitions;
  int number;
  int id;
  static int next_id;
  public dk.brics.automaton.State();
  final void resetTransitions();
  public java.util.Set<dk.brics.automaton.Transition> getTransitions();
  public void addTransition(dk.brics.automaton.Transition);
  public void setAccept(boolean);
  public boolean isAccept();
  public dk.brics.automaton.State step(char);
  public void step(char, java.util.Collection<dk.brics.automaton.State>);
  void addEpsilon(dk.brics.automaton.State);
  dk.brics.automaton.Transition[] getSortedTransitionArray(boolean);
  public java.util.List<dk.brics.automaton.Transition> getSortedTransitions(boolean);
  public java.lang.String toString();
  public int compareTo(dk.brics.automaton.State);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(java.lang.Object);
}
Compiled from "StatePair.java"
public class dk.brics.automaton.StatePair {
  dk.brics.automaton.State s;
  dk.brics.automaton.State s1;
  dk.brics.automaton.State s2;
  dk.brics.automaton.StatePair(dk.brics.automaton.State, dk.brics.automaton.State, dk.brics.automaton.State);
  public dk.brics.automaton.StatePair(dk.brics.automaton.State, dk.brics.automaton.State);
  public dk.brics.automaton.State getFirstState();
  public dk.brics.automaton.State getSecondState();
  public boolean equals(java.lang.Object);
  public int hashCode();
}
Compiled from "StringUnionOperations.java"
public final class dk.brics.automaton.StringUnionOperations {
  public static final java.util.Comparator<java.lang.CharSequence> LEXICOGRAPHIC_ORDER;
  static final boolean $assertionsDisabled;
  public dk.brics.automaton.StringUnionOperations();
  public void add(java.lang.CharSequence);
  public dk.brics.automaton.StringUnionOperations$State complete();
  public static dk.brics.automaton.State build(java.lang.CharSequence[]);
  static {};
}
Compiled from "StringUnionOperations.java"
final class dk.brics.automaton.StringUnionOperations$1 implements java.util.Comparator<java.lang.CharSequence> {
  dk.brics.automaton.StringUnionOperations$1();
  public int compare(java.lang.CharSequence, java.lang.CharSequence);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "StringUnionOperations.java"
final class dk.brics.automaton.StringUnionOperations$State {
  char[] labels;
  dk.brics.automaton.StringUnionOperations$State[] states;
  boolean is_final;
  static final boolean $assertionsDisabled;
  dk.brics.automaton.StringUnionOperations$State();
  public dk.brics.automaton.StringUnionOperations$State getState(char);
  public char[] getTransitionLabels();
  public dk.brics.automaton.StringUnionOperations$State[] getStates();
  public boolean equals(java.lang.Object);
  public boolean hasChildren();
  public boolean isFinal();
  public int hashCode();
  dk.brics.automaton.StringUnionOperations$State newState(char);
  dk.brics.automaton.StringUnionOperations$State lastChild();
  dk.brics.automaton.StringUnionOperations$State lastChild(char);
  void replaceLastChild(dk.brics.automaton.StringUnionOperations$State);
  public static dk.brics.automaton.StringUnionOperations$State[] copyOf(dk.brics.automaton.StringUnionOperations$State[], int);
  static {};
}
Compiled from "Transition.java"
public class dk.brics.automaton.Transition implements java.io.Serializable,java.lang.Cloneable {
  static final long serialVersionUID;
  char min;
  char max;
  dk.brics.automaton.State to;
  public dk.brics.automaton.Transition(char, dk.brics.automaton.State);
  public dk.brics.automaton.Transition(char, char, dk.brics.automaton.State);
  public char getMin();
  public char getMax();
  public dk.brics.automaton.State getDest();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public dk.brics.automaton.Transition clone();
  static void appendCharString(char, java.lang.StringBuilder);
  public java.lang.String toString();
  void appendDot(java.lang.StringBuilder);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "TransitionComparator.java"
class dk.brics.automaton.TransitionComparator implements java.util.Comparator<dk.brics.automaton.Transition>, java.io.Serializable {
  static final long serialVersionUID;
  boolean to_first;
  dk.brics.automaton.TransitionComparator(boolean);
  public int compare(dk.brics.automaton.Transition, dk.brics.automaton.Transition);
  public int compare(java.lang.Object, java.lang.Object);
}
