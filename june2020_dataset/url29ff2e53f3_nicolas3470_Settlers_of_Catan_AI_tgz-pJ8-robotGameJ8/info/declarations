Compiled from "robotGame.java"
public class robotGame {
  protected static soc.server.genericServer.StringConnection prCli;
  protected static java.lang.String lastMessage_N;
  protected static java.lang.String lastMessage_L;
  protected static java.lang.Exception ex_L;
  public robotGame();
  public static void main(java.lang.String[]) throws java.net.ConnectException, java.lang.IllegalArgumentException;
  public static synchronized boolean putLocal(java.lang.String);
  static {};
}
Compiled from "robotGame.java"
public class robotGame$SOCPlayerLocalStringReader implements java.lang.Runnable {
  soc.server.genericServer.LocalStringConnection locl;
  protected robotGame$SOCPlayerLocalStringReader(soc.server.genericServer.LocalStringConnection);
  public void run();
}
Compiled from "AWTClickTester.java"
public class soc.client.AWTClickTester extends java.awt.Canvas implements java.awt.event.MouseListener {
  int lastX;
  int lastY;
  int wid;
  int ht;
  java.awt.Dimension sz;
  public soc.client.AWTClickTester();
  public void update(java.awt.Graphics);
  public java.awt.Dimension getPreferredSize();
  public java.awt.Dimension getMinimumSize();
  public void setLastClick(int, int);
  public void paint(java.awt.Graphics);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  protected void report(java.lang.String, java.awt.event.MouseEvent);
  public void printButtonsMods();
  public static void main(java.lang.String[]);
}
Compiled from "AWTToolTip.java"
public class soc.client.AWTToolTip extends java.awt.Canvas implements java.awt.event.MouseListener,java.awt.event.MouseMotionListener,java.awt.event.ComponentListener {
  public int closeAfterMoveX;
  public int closeAfterMoveY;
  protected java.awt.Font tfont;
  protected java.awt.Component parentComp;
  protected java.awt.Container mainParentComp;
  protected java.lang.Object l_mainParentComp;
  protected java.awt.LayoutManager mainParentLayout;
  protected int parentX;
  protected int parentY;
  public static int OFFSET_X;
  public static int OFFSET_Y;
  static java.awt.Color bgcol;
  static java.awt.Color fgcol;
  public soc.client.AWTToolTip(java.lang.String, java.awt.Component);
  public java.lang.String getTip();
  public void setTip(java.lang.String) throws java.lang.IllegalArgumentException;
  protected void showAtMouse(int, int);
  public void update(java.awt.Graphics);
  public void paint(java.awt.Graphics);
  protected void removeFromParent();
  protected void addToParent(int, int);
  public static java.awt.Container getParentContainer(java.awt.Component);
  public void destroy();
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void componentHidden(java.awt.event.ComponentEvent);
  public void componentMoved(java.awt.event.ComponentEvent);
  public void componentResized(java.awt.event.ComponentEvent);
  public void componentShown(java.awt.event.ComponentEvent);
  static {};
}
Compiled from "AskDialog.java"
public abstract class soc.client.AskDialog extends java.awt.Dialog implements java.awt.event.ActionListener,java.awt.event.WindowListener,java.awt.event.KeyListener,java.awt.event.MouseListener {
  protected final soc.client.SOCPlayerClient pcli;
  protected soc.client.SOCPlayerInterface pi;
  protected java.awt.Component msg;
  protected final java.awt.Button choice1But;
  protected final java.awt.Button choice2But;
  protected java.awt.Button choice3But;
  protected final int choiceDefault;
  protected int wantW;
  protected int wantH;
  protected int padW;
  protected int padH;
  protected boolean didReqFocus;
  public soc.client.AskDialog(soc.client.SOCPlayerClient, soc.client.SOCPlayerInterface, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws java.lang.IllegalArgumentException;
  protected soc.client.AskDialog(soc.client.SOCPlayerClient, java.awt.Frame, java.lang.String, java.lang.String, java.lang.String, boolean) throws java.lang.IllegalArgumentException;
  public soc.client.AskDialog(soc.client.SOCPlayerClient, java.awt.Frame, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws java.lang.IllegalArgumentException;
  public soc.client.AskDialog(soc.client.SOCPlayerClient, soc.client.SOCPlayerInterface, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int) throws java.lang.IllegalArgumentException;
  public soc.client.AskDialog(soc.client.SOCPlayerClient, java.awt.Frame, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int) throws java.lang.IllegalArgumentException;
  protected void checkSizeAndFocus();
  public static void styleAsDefault(java.awt.Button);
  public void actionPerformed(java.awt.event.ActionEvent);
  public abstract void button1Chosen();
  public abstract void button2Chosen();
  public void button3Chosen();
  public abstract void windowCloseChosen();
  public void windowClosing(java.awt.event.WindowEvent);
  public void windowOpened(java.awt.event.WindowEvent);
  public void windowActivated(java.awt.event.WindowEvent);
  public void windowClosed(java.awt.event.WindowEvent);
  public void windowDeactivated(java.awt.event.WindowEvent);
  public void windowDeiconified(java.awt.event.WindowEvent);
  public void windowIconified(java.awt.event.WindowEvent);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyTyped(java.awt.event.KeyEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public static java.awt.Frame getParentFrame(java.awt.Component) throws java.lang.IllegalStateException;
  public static java.lang.String firstLine(java.lang.String);
}
Compiled from "ChannelFrame.java"
public class soc.client.ChannelFrame extends java.awt.Frame {
  public soc.client.SnippingTextArea ta;
  public java.awt.TextField tf;
  public java.awt.List lst;
  public java.awt.Canvas cnvs;
  public int ncols;
  public int npix;
  soc.client.SOCPlayerClient cc;
  java.lang.String cname;
  java.util.Vector history;
  int historyCounter;
  boolean down;
  public soc.client.ChannelFrame(java.lang.String, soc.client.SOCPlayerClient);
  public void print(java.lang.String);
  public void over(java.lang.String);
  public void began();
  public void addMember(java.lang.String);
  public void deleteMember(java.lang.String);
  public void doLayout();
}
Compiled from "ChannelFrame.java"
class soc.client.ChannelFrame$1 {
}
Compiled from "ChannelFrame.java"
class soc.client.ChannelFrame$DividerMouseListener extends java.awt.event.MouseAdapter {
  final soc.client.ChannelFrame this$0;
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  soc.client.ChannelFrame$DividerMouseListener(soc.client.ChannelFrame, soc.client.ChannelFrame$1);
}
Compiled from "ChannelFrame.java"
class soc.client.ChannelFrame$InputActionListener implements java.awt.event.ActionListener {
  final soc.client.ChannelFrame this$0;
  public void actionPerformed(java.awt.event.ActionEvent);
  soc.client.ChannelFrame$InputActionListener(soc.client.ChannelFrame, soc.client.ChannelFrame$1);
}
Compiled from "ChannelFrame.java"
class soc.client.ChannelFrame$InputKeyListener extends java.awt.event.KeyAdapter {
  final soc.client.ChannelFrame this$0;
  public void keyPressed(java.awt.event.KeyEvent);
  soc.client.ChannelFrame$InputKeyListener(soc.client.ChannelFrame, soc.client.ChannelFrame$1);
}
Compiled from "ChannelFrame.java"
class soc.client.ChannelFrame$MyWindowListener extends java.awt.event.WindowAdapter {
  final soc.client.ChannelFrame this$0;
  public void windowClosing(java.awt.event.WindowEvent);
  public void windowOpened(java.awt.event.WindowEvent);
  soc.client.ChannelFrame$MyWindowListener(soc.client.ChannelFrame, soc.client.ChannelFrame$1);
}
Compiled from "ColorSquare.java"
public class soc.client.ColorSquare extends java.awt.Canvas implements java.awt.event.MouseListener {
  public static final java.awt.Color CLAY;
  public static final java.awt.Color ORE;
  public static final java.awt.Color SHEEP;
  public static final java.awt.Color WHEAT;
  public static final java.awt.Color WOOD;
  public static final java.awt.Color GREY;
  public static final java.awt.Color DESERT;
  public static final java.awt.Color WATER;
  public static final java.awt.Color[] RESOURCE_COLORS;
  public static final int NUMBER;
  public static final int YES_NO;
  public static final int CHECKBOX;
  public static final int BOUNDED_INC;
  public static final int BOUNDED_DEC;
  public static final int TEXT;
  public static final int WIDTH;
  public static final int HEIGHT;
  public static java.awt.Color WARN_LEVEL_COLOR;
  public static java.awt.Color WARN_LEVEL_COLOR_BG_FROMGREY;
  int intValue;
  boolean boolValue;
  boolean valueVis;
  int kind;
  int upperBound;
  int lowerBound;
  boolean interactive;
  protected soc.client.ColorSquareListener sqListener;
  protected soc.client.AWTToolTip ttip;
  protected boolean warn_bg_grey;
  protected java.lang.String ttip_text;
  protected java.lang.String ttip_text_warnLow;
  protected java.lang.String ttip_text_warnHigh;
  protected java.lang.String ttip_text_zero;
  protected boolean hasWarnLow;
  protected boolean hasWarnHigh;
  protected boolean isWarnLow;
  protected boolean isWarnHigh;
  protected int warnLowBound;
  protected int warnHighBound;
  protected int squareW;
  protected int squareH;
  protected java.awt.Dimension squareSize;
  public soc.client.ColorSquare();
  public soc.client.ColorSquare(java.awt.Color);
  public soc.client.ColorSquare(java.awt.Color, int);
  public soc.client.ColorSquare(java.awt.Color, java.lang.String);
  public soc.client.ColorSquare(int, boolean, java.awt.Color);
  public soc.client.ColorSquare(int, boolean, java.awt.Color, int, int);
  public void setBackground(java.awt.Color);
  public void setColor(java.awt.Color);
  public void setSize(int, int);
  public java.lang.String getTooltipText();
  public void setTooltipText(java.lang.String);
  public void setLowWarningLevel(int) throws java.lang.IllegalArgumentException;
  public void clearLowWarningLevel();
  public void setTooltipLowWarningLevel(java.lang.String, int) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException;
  public void setHighWarningLevel(int) throws java.lang.IllegalArgumentException;
  public void clearHighWarningLevel();
  public void setTooltipHighWarningLevel(java.lang.String, int) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException;
  public void setTooltipZeroText(java.lang.String) throws java.lang.IllegalStateException;
  public void setVisible(boolean);
  public java.awt.Dimension getPreferredSize();
  public java.awt.Dimension getMinimumSize();
  public void setBounds(int, int, int, int);
  public void paint(java.awt.Graphics);
  public void addValue(int);
  public void subtractValue(int);
  public void setIntValue(int);
  public int getIntValue();
  public void setBoolValue(boolean);
  public boolean getBoolValue();
  public soc.client.ColorSquareListener getSquareListener();
  public void setSquareListener(soc.client.ColorSquareListener);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  static {};
}
Compiled from "ColorSquareLarger.java"
public class soc.client.ColorSquareLarger extends soc.client.ColorSquare {
  public static final int WIDTH_L;
  public static final int HEIGHT_L;
  public soc.client.ColorSquareLarger(int, boolean, java.awt.Color);
  public soc.client.ColorSquareLarger(int, boolean, java.awt.Color, int, int);
}
Compiled from "ColorSquareListener.java"
public interface soc.client.ColorSquareListener {
  public abstract void squareChanged(soc.client.ColorSquare, int, int);
}
Compiled from "FaceChooserFrame.java"
public class soc.client.FaceChooserFrame extends java.awt.Frame implements java.awt.event.ActionListener,java.awt.event.WindowListener,java.awt.event.KeyListener {
  protected soc.client.SOCFaceButton fb;
  protected soc.client.SOCPlayerClient pcli;
  protected soc.client.SOCPlayerInterface pi;
  protected int pNumber;
  protected int faceWidthPx;
  protected soc.client.FaceChooserFrame$FaceChooserList fcl;
  protected java.awt.Button changeFaceBut;
  protected java.awt.Button cancelBut;
  protected java.awt.Label promptLbl;
  public soc.client.FaceChooserFrame(soc.client.SOCFaceButton, soc.client.SOCPlayerClient, soc.client.SOCPlayerInterface, int, int, int) throws java.lang.IllegalArgumentException;
  public void selectFace(int, boolean);
  public java.awt.Color getPlayerColor();
  public boolean isStillAvailable();
  public void dispose();
  protected void checkSizeAndFocus(boolean);
  public void actionPerformed(java.awt.event.ActionEvent);
  public void changeButtonChosen();
  public void cancelButtonChosen();
  public void moveCursor(int, int, java.awt.event.KeyEvent);
  public void windowClosing(java.awt.event.WindowEvent);
  public void windowOpened(java.awt.event.WindowEvent);
  public void windowActivated(java.awt.event.WindowEvent);
  public void windowClosed(java.awt.event.WindowEvent);
  public void windowDeactivated(java.awt.event.WindowEvent);
  public void windowDeiconified(java.awt.event.WindowEvent);
  public void windowIconified(java.awt.event.WindowEvent);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyTyped(java.awt.event.KeyEvent);
}
Compiled from "FaceChooserFrame.java"
public class soc.client.FaceChooserFrame$FaceChooserList extends java.awt.Container implements java.awt.event.AdjustmentListener {
  protected static int rowFacesWidth;
  protected static int faceRowsHeight;
  protected soc.client.FaceChooserFrame fcf;
  protected int wantW;
  protected int wantH;
  protected java.awt.Dimension wantSize;
  protected int padW;
  protected int padH;
  protected int scrollW;
  protected soc.client.FaceChooserFrame$FaceChooserList(soc.client.FaceChooserFrame, int);
  public void selectFace(int);
  public void scrollToRow(int);
  public void moveCursor(int, int, java.awt.event.KeyEvent) throws java.lang.IllegalArgumentException;
  public void adjustmentValueChanged(java.awt.event.AdjustmentEvent);
  protected boolean checkInsetsPadding(java.awt.Insets);
  public void doLayout();
  public java.awt.Dimension getMinimumSize();
  public java.awt.Dimension getPreferredSize();
  static int access$000(soc.client.FaceChooserFrame$FaceChooserList);
  static int access$100(soc.client.FaceChooserFrame$FaceChooserList);
  static {};
}
Compiled from "FaceChooserFrame.java"
class soc.client.FaceChooserFrame$FaceChooserList$FaceChooserRow extends java.awt.Container {
  final soc.client.FaceChooserFrame$FaceChooserList this$0;
  public soc.client.FaceChooserFrame$FaceChooserList$FaceChooserRow(soc.client.FaceChooserFrame$FaceChooserList, int) throws java.lang.IllegalArgumentException;
  public void setFaceHilightBorder(int, boolean);
  public void setVisible(boolean);
}
Compiled from "NewGameOptionsFrame.java"
public class soc.client.NewGameOptionsFrame extends java.awt.Frame implements java.awt.event.ActionListener,java.awt.event.KeyListener,java.awt.event.ItemListener,java.awt.event.TextListener,java.awt.event.MouseListener {
  public static final int INTFIELD_POPUP_MAXRANGE;
  public soc.client.NewGameOptionsFrame(soc.client.SOCPlayerClient, java.lang.String, java.util.Hashtable, boolean, boolean);
  public static soc.client.NewGameOptionsFrame createAndShow(soc.client.SOCPlayerClient, java.lang.String, java.util.Hashtable, boolean, boolean);
  public void show();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void dispose();
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyTyped(java.awt.event.KeyEvent);
  public void textValueChanged(java.awt.event.TextEvent);
  public void itemStateChanged(java.awt.event.ItemEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  static void access$000(soc.client.NewGameOptionsFrame);
  static void access$100(soc.client.NewGameOptionsFrame, boolean);
  static soc.client.SOCPlayerClient access$200(soc.client.NewGameOptionsFrame);
  static {};
}
Compiled from "NewGameOptionsFrame.java"
class soc.client.NewGameOptionsFrame$1 extends java.awt.event.WindowAdapter {
  final soc.client.NewGameOptionsFrame this$0;
  soc.client.NewGameOptionsFrame$1(soc.client.NewGameOptionsFrame);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "NewGameOptionsFrame.java"
public class soc.client.NewGameOptionsFrame$IntTextField extends java.awt.TextField implements java.awt.event.KeyListener {
  final soc.client.NewGameOptionsFrame this$0;
  soc.client.NewGameOptionsFrame$IntTextField(soc.client.NewGameOptionsFrame, int, int);
  public int getIntValue();
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyTyped(java.awt.event.KeyEvent);
}
Compiled from "NewGameOptionsFrame.java"
class soc.client.NewGameOptionsFrame$VersionConfirmDialog extends soc.client.AskDialog {
  final soc.client.NewGameOptionsFrame this$0;
  public soc.client.NewGameOptionsFrame$VersionConfirmDialog(soc.client.NewGameOptionsFrame, soc.client.NewGameOptionsFrame, int);
  public void button1Chosen();
  public void button2Chosen();
  public void windowCloseChosen();
}
Compiled from "NotifyDialog.java"
class soc.client.NotifyDialog extends soc.client.AskDialog {
  public static void createAndShow(soc.client.SOCPlayerClient, java.awt.Frame, java.lang.String, java.lang.String, boolean) throws java.lang.IllegalArgumentException;
  protected soc.client.NotifyDialog(soc.client.SOCPlayerClient, java.awt.Frame, java.lang.String, java.lang.String, boolean);
  public void button1Chosen();
  public void button2Chosen();
  public void windowCloseChosen();
}
Compiled from "SOCAccountClient.java"
public class soc.client.SOCAccountClient extends java.applet.Applet implements java.lang.Runnable,java.awt.event.ActionListener {
  protected java.awt.TextField nick;
  protected java.awt.TextField pass;
  protected java.awt.TextField pass2;
  protected java.awt.TextField email;
  protected java.awt.TextField status;
  protected java.awt.Button submit;
  protected java.awt.Label messageLabel;
  protected java.applet.AppletContext ac;
  protected boolean submitLock;
  protected java.awt.CardLayout cardLayout;
  protected java.lang.String host;
  protected int port;
  protected java.net.Socket s;
  protected java.io.DataInputStream in;
  protected java.io.DataOutputStream out;
  protected java.lang.Thread reader;
  protected java.lang.Exception ex;
  protected boolean connected;
  protected java.lang.String nickname;
  protected java.lang.String password;
  protected java.lang.String password2;
  protected java.lang.String emailAddress;
  public soc.client.SOCAccountClient();
  public soc.client.SOCAccountClient(java.lang.String, int);
  protected void initVisualElements();
  public int getHexParameter(java.lang.String);
  public synchronized void init();
  public synchronized void connect();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void run();
  public synchronized boolean put(java.lang.String);
  public void treat(soc.message.SOCMessage);
  protected void handleCHANNELS(soc.message.SOCChannels);
  protected void handleREJECTCONNECTION(soc.message.SOCRejectConnection);
  protected void handleSTATUSMESSAGE(soc.message.SOCStatusMessage);
  protected synchronized void disconnect();
  public java.lang.String getAppletInfo();
  public void destroy();
  public static void usage();
  public static void main(java.lang.String[]);
}
Compiled from "SOCAccountClient.java"
class soc.client.SOCAccountClient$1 {
}
Compiled from "SOCAccountClient.java"
class soc.client.SOCAccountClient$MyWindowAdapter extends java.awt.event.WindowAdapter {
  final soc.client.SOCAccountClient this$0;
  public void windowClosing(java.awt.event.WindowEvent);
  public void windowOpened(java.awt.event.WindowEvent);
  soc.client.SOCAccountClient$MyWindowAdapter(soc.client.SOCAccountClient, soc.client.SOCAccountClient$1);
}
Compiled from "SOCBoardPanel.java"
public class soc.client.SOCBoardPanel extends java.awt.Canvas implements java.awt.event.MouseListener,java.awt.event.MouseMotionListener {
  public static final int PANELX;
  public static final int PANELY;
  public static final int NONE;
  public static final int PLACE_ROAD;
  public static final int PLACE_SETTLEMENT;
  public static final int PLACE_CITY;
  public static final int PLACE_ROBBER;
  public static final int PLACE_INIT_SETTLEMENT;
  public static final int PLACE_INIT_ROAD;
  public static final int CONSIDER_LM_SETTLEMENT;
  public static final int CONSIDER_LM_ROAD;
  public static final int CONSIDER_LM_CITY;
  public static final int CONSIDER_LT_SETTLEMENT;
  public static final int CONSIDER_LT_ROAD;
  public static final int CONSIDER_LT_CITY;
  public static final int TURN_STARTING;
  public static final int GAME_FORMING;
  public static final int GAME_OVER;
  public static final int HOVER_OFFSET_X_FOR_INIT_PLACE;
  public static final int HOVER_OFFSET_X_FOR_ROBBER;
  protected static int BUILD_REQUEST_MAX_DELAY_SEC;
  protected static int POPUP_MENU_IGNORE_MS;
  protected boolean is6player;
  protected boolean isRotated;
  protected boolean isScaledOrRotated;
  protected int scaledPanelX;
  protected int scaledPanelY;
  protected final int panelMinBW;
  protected final int panelMinBH;
  protected boolean isScaled;
  protected long scaledAt;
  protected boolean scaledMissedImage;
  protected soc.client.SOCBoardPanel$BoardPanelSendBuildTask buildReqTimerTask;
  protected java.awt.Color[] robberGhostFill;
  protected java.awt.Color[] robberGhostOutline;
  public soc.client.SOCBoardPanel(soc.client.SOCPlayerInterface);
  public java.awt.Dimension getPreferredSize();
  public java.awt.Dimension getMinimumSize();
  public void setSize(int, int) throws java.lang.IllegalArgumentException;
  public void setSize(java.awt.Dimension) throws java.lang.IllegalArgumentException;
  public void setBounds(int, int, int, int) throws java.lang.IllegalArgumentException;
  public void flushBoardLayoutAndRepaint();
  public int[] scaleCopyToActualX(int[]);
  public int[] scaleCopyToActualY(int[]);
  public int[] rotateScaleCopyYToActualX(int[], int, boolean);
  public void paint(java.awt.Graphics);
  public void update(java.awt.Graphics);
  public void scaleToActualX(int[]);
  public void scaleToActualY(int[]);
  public int scaleToActualX(int);
  public int scaleToActualY(int);
  public int scaleFromActualX(int);
  public int scaleFromActualY(int);
  public boolean isScaled();
  public boolean isRotated();
  public void updateMode();
  protected void updateHoverTipToMode();
  protected void clearModeAndHilight(int);
  public void setPlayer();
  public void setOtherPlayer(soc.game.SOCPlayer);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  protected void doBoardMenuPopup(int, int);
  public boolean popupExpectingBuildRequest();
  public void popupSetBuildRequest(int, int);
  public void popupClearBuildRequest();
  public void popupFireBuildingRequest();
  public void setSuperimposedText(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException;
  public void setSuperimposedTopText(java.lang.String);
  public void setMode(int);
  public int getMode();
  public static final java.awt.Color hexColor(int);
  static int access$100(soc.client.SOCBoardPanel);
  static void access$200(soc.client.SOCBoardPanel, java.awt.Graphics, int, int, boolean);
  static void access$300(soc.client.SOCBoardPanel, java.awt.Graphics, int, int, boolean);
  static void access$400(soc.client.SOCBoardPanel, java.awt.Graphics, int, int, boolean);
  static int access$500(soc.client.SOCBoardPanel);
  static soc.game.SOCPlayer access$600(soc.client.SOCBoardPanel);
  static soc.client.SOCPlayerInterface access$700(soc.client.SOCBoardPanel);
  static int access$800(soc.client.SOCBoardPanel, int, int);
  static soc.game.SOCBoard access$900(soc.client.SOCBoardPanel);
  static int access$1000(soc.client.SOCBoardPanel, int, int);
  static int access$1100(soc.client.SOCBoardPanel, int, int);
  static soc.game.SOCGame access$1200(soc.client.SOCBoardPanel);
  static soc.client.SOCBoardPanel$BoardToolTip access$1300(soc.client.SOCBoardPanel);
  static int access$1502(soc.client.SOCBoardPanel, int);
  static {};
}
Compiled from "SOCBoardPanel.java"
public class soc.client.SOCBoardPanel$BoardPanelSendBuildTask extends java.util.TimerTask {
  protected int buildLoc;
  protected int pieceType;
  protected boolean wasSentAlready;
  final soc.client.SOCBoardPanel this$0;
  protected soc.client.SOCBoardPanel$BoardPanelSendBuildTask(soc.client.SOCBoardPanel, int, int);
  public int getBuildLoc();
  public int getPieceType();
  public void run();
  public synchronized void doNotSend();
  public synchronized boolean wasItSentAlready();
  public void sendOnceFromClientIfCurrentPlayer();
}
Compiled from "SOCBoardPanel.java"
class soc.client.SOCBoardPanel$BoardPopupMenu extends java.awt.PopupMenu implements java.awt.event.ActionListener {
  soc.client.SOCBoardPanel bp;
  java.awt.MenuItem buildRoadItem;
  java.awt.MenuItem buildSettleItem;
  java.awt.MenuItem upgradeCityItem;
  java.awt.MenuItem cancelBuildItem;
  soc.client.SOCHandPanel$ResourceTradePopupMenu portTradeSubmenu;
  protected boolean isInitialPlacement;
  final soc.client.SOCBoardPanel this$0;
  public soc.client.SOCBoardPanel$BoardPopupMenu(soc.client.SOCBoardPanel, soc.client.SOCBoardPanel);
  public void showCancelBuild(int, int, int, int);
  public void showBuild(int, int, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
  void tryBuild(int);
  void tryCancel();
}
Compiled from "SOCBoardPanel.java"
public class soc.client.SOCBoardPanel$BoardToolTip {
  int hoverRoadID;
  int hoverSettlementID;
  int hoverCityID;
  boolean hoverIsPort;
  final soc.client.SOCBoardPanel this$0;
  soc.client.SOCBoardPanel$BoardToolTip(soc.client.SOCBoardPanel, soc.client.SOCBoardPanel);
  public java.lang.String getHoverText();
  public boolean isVisible();
  public void positionToMouse(int, int);
  public void setOffsetX(int);
  public void setHoverText(java.lang.String);
  public void hideHoverAndPieces();
  public void paint(java.awt.Graphics);
  public java.lang.String portDescAtNode(int);
  public java.lang.String portDescForType(int);
  static void access$000(soc.client.SOCBoardPanel$BoardToolTip, int, int);
  static int access$1400(soc.client.SOCBoardPanel$BoardToolTip);
}
Compiled from "SOCBoardPanel.java"
public class soc.client.SOCBoardPanel$DelayedRepaint extends java.lang.Thread {
  public soc.client.SOCBoardPanel$DelayedRepaint(soc.client.SOCBoardPanel);
  public void run();
  static {};
}
Compiled from "SOCBoardPanel.java"
class soc.client.SOCBoardPanel$ResourceTradeAllMenu extends soc.client.SOCHandPanel$ResourceTradePopupMenu {
  public soc.client.SOCBoardPanel$ResourceTradeAllMenu(soc.client.SOCBoardPanel, soc.client.SOCHandPanel) throws java.lang.IllegalStateException;
  public void show(int, int);
  public void setEnabledIfCanTrade(boolean);
  public void destroy();
}
Compiled from "SOCBuildingPanel.java"
public class soc.client.SOCBuildingPanel extends java.awt.Panel implements java.awt.event.ActionListener {
  static final java.lang.String ROAD;
  static final java.lang.String STLMT;
  static final java.lang.String CITY;
  static final java.lang.String CARD;
  java.awt.Label title;
  java.awt.Button roadBut;
  java.awt.Button settlementBut;
  java.awt.Button cityBut;
  java.awt.Button cardBut;
  java.awt.Button optsBut;
  java.awt.Label roadT;
  java.awt.Label roadC;
  soc.client.ColorSquare roadWood;
  soc.client.ColorSquare roadClay;
  java.awt.Label settlementT;
  java.awt.Label settlementC;
  soc.client.ColorSquare settlementWood;
  soc.client.ColorSquare settlementClay;
  soc.client.ColorSquare settlementWheat;
  soc.client.ColorSquare settlementSheep;
  java.awt.Label cityT;
  java.awt.Label cityC;
  soc.client.ColorSquare cityWheat;
  soc.client.ColorSquare cityOre;
  java.awt.Label cardT;
  java.awt.Label cardC;
  java.awt.Label cardCountLab;
  soc.client.ColorSquare cardWheat;
  soc.client.ColorSquare cardSheep;
  soc.client.ColorSquare cardOre;
  soc.client.ColorSquare cardCount;
  soc.client.SOCPlayerInterface pi;
  public static final int MINHEIGHT;
  soc.game.SOCPlayer player;
  public soc.client.SOCBuildingPanel(soc.client.SOCPlayerInterface);
  public void doLayout();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void clickBuildingButton(soc.game.SOCGame, soc.client.SOCPlayerClient, java.lang.String, boolean);
  public void updateButtonStatus();
  public void updateDevCardCount();
  public void setPlayer() throws java.lang.IllegalStateException;
}
Compiled from "SOCChoosePlayerDialog.java"
class soc.client.SOCChoosePlayerDialog extends java.awt.Dialog implements java.awt.event.ActionListener {
  java.awt.Button[] buttons;
  int[] players;
  java.awt.Label[] player_res_lbl;
  int number;
  java.awt.Label msg;
  soc.client.SOCPlayerInterface pi;
  protected int wantW;
  protected int wantH;
  boolean didSetLocation;
  public soc.client.SOCChoosePlayerDialog(soc.client.SOCPlayerInterface, int, int[]);
  public void setVisible(boolean);
  public void doLayout();
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SOCConnectOrPracticePanel.java"
public class soc.client.SOCConnectOrPracticePanel extends java.awt.Panel implements java.awt.event.ActionListener,java.awt.event.KeyListener {
  public soc.client.SOCConnectOrPracticePanel(soc.client.SOCPlayerClient);
  public static boolean checkCanLaunchServer();
  public void startedLocalServer();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyTyped(java.awt.event.KeyEvent);
  static {};
}
Compiled from "SOCDiscardDialog.java"
class soc.client.SOCDiscardDialog extends java.awt.Dialog implements java.awt.event.ActionListener,java.awt.event.MouseListener {
  java.awt.Button discardBut;
  soc.client.ColorSquare[] keep;
  soc.client.ColorSquare[] disc;
  java.awt.Label msg;
  java.awt.Label youHave;
  java.awt.Label discThese;
  soc.client.SOCPlayerInterface playerInterface;
  int numDiscards;
  int numChosen;
  protected int wantW;
  protected int wantH;
  boolean didSetLocation;
  public soc.client.SOCDiscardDialog(soc.client.SOCPlayerInterface, int);
  public void setVisible(boolean);
  public void doLayout();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
}
Compiled from "SOCDiscoveryDialog.java"
class soc.client.SOCDiscoveryDialog extends java.awt.Dialog implements java.awt.event.ActionListener,soc.client.ColorSquareListener {
  public soc.client.SOCDiscoveryDialog(soc.client.SOCPlayerInterface);
  public void setVisible(boolean);
  public void doLayout();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void squareChanged(soc.client.ColorSquare, int, int);
}
Compiled from "SOCDisplaylessPlayerClient.java"
public class soc.client.SOCDisplaylessPlayerClient implements java.lang.Runnable {
  protected static java.lang.String STATSPREFEX;
  protected java.lang.String doc;
  protected java.lang.String lastMessage;
  protected java.lang.String host;
  protected int port;
  protected java.lang.String strSocketName;
  protected java.net.Socket s;
  protected java.io.DataInputStream in;
  protected java.io.DataOutputStream out;
  protected soc.server.genericServer.LocalStringConnection sLocal;
  protected int sVersion;
  protected int sLocalVersion;
  protected java.lang.Thread reader;
  protected java.lang.Exception ex;
  protected boolean connected;
  protected boolean rejected;
  protected java.lang.String nickname;
  protected java.lang.String password;
  protected boolean gotPassword;
  protected java.util.Hashtable channels;
  protected java.util.Hashtable games;
  public soc.client.SOCDisplaylessPlayerClient();
  public soc.client.SOCDisplaylessPlayerClient(java.lang.String, int, boolean);
  public soc.client.SOCDisplaylessPlayerClient(java.lang.String, boolean);
  public java.lang.String getNickname();
  public void run();
  public void resend();
  public synchronized boolean put(java.lang.String);
  public void treat(soc.message.SOCMessage);
  protected void handleSTATUSMESSAGE(soc.message.SOCStatusMessage);
  protected void handleJOINAUTH(soc.message.SOCJoinAuth);
  protected void handleJOIN(soc.message.SOCJoin);
  protected void handleMEMBERS(soc.message.SOCMembers);
  protected void handleNEWCHANNEL(soc.message.SOCNewChannel);
  protected void handleCHANNELS(soc.message.SOCChannels);
  protected void handleBCASTTEXTMSG(soc.message.SOCBCastTextMsg);
  protected void handleTEXTMSG(soc.message.SOCTextMsg);
  protected void handleLEAVE(soc.message.SOCLeave);
  protected void handleDELETECHANNEL(soc.message.SOCDeleteChannel);
  protected void handleGAMES(soc.message.SOCGames);
  protected void handleJOINGAMEAUTH(soc.message.SOCJoinGameAuth);
  protected void handleJOINGAME(soc.message.SOCJoinGame);
  protected void handleLEAVEGAME(soc.message.SOCLeaveGame);
  protected void handleNEWGAME(soc.message.SOCNewGame);
  protected void handleDELETEGAME(soc.message.SOCDeleteGame);
  protected void handleGAMEMEMBERS(soc.message.SOCGameMembers);
  protected void handleGAMESTATS(soc.message.SOCGameStats);
  protected void handleGAMETEXTMSG(soc.message.SOCGameTextMsg);
  protected void handleSITDOWN(soc.message.SOCSitDown);
  protected void handleBOARDLAYOUT(soc.message.SOCBoardLayout);
  protected void handleBOARDLAYOUT2(soc.message.SOCBoardLayout2);
  protected void handleSTARTGAME(soc.message.SOCStartGame);
  protected void handleGAMESTATE(soc.message.SOCGameState);
  protected void handleSETTURN(soc.message.SOCSetTurn);
  protected void handleFIRSTPLAYER(soc.message.SOCFirstPlayer);
  protected void handleTURN(soc.message.SOCTurn);
  protected void handlePLAYERELEMENT(soc.message.SOCPlayerElement);
  public static void handlePLAYERELEMENT_numPieces(soc.message.SOCPlayerElement, soc.game.SOCPlayer, int);
  public static void handlePLAYERELEMENT_numKnights(soc.message.SOCPlayerElement, soc.game.SOCPlayer, soc.game.SOCGame);
  public static void handlePLAYERELEMENT_numRsrc(soc.message.SOCPlayerElement, soc.game.SOCPlayer, int);
  protected void handleRESOURCECOUNT(soc.message.SOCResourceCount);
  protected void handleDICERESULT(soc.message.SOCDiceResult);
  protected void handlePUTPIECE(soc.message.SOCPutPiece);
  protected void handleCANCELBUILDREQUEST(soc.message.SOCCancelBuildRequest);
  protected void handleMOVEROBBER(soc.message.SOCMoveRobber);
  protected void handleDISCARDREQUEST(soc.message.SOCDiscardRequest);
  protected void handleCHOOSEPLAYERREQUEST(soc.message.SOCChoosePlayerRequest);
  protected void handleMAKEOFFER(soc.message.SOCMakeOffer);
  protected void handleCLEAROFFER(soc.message.SOCClearOffer);
  protected void handleREJECTOFFER(soc.message.SOCRejectOffer);
  protected void handleCLEARTRADEMSG(soc.message.SOCClearTradeMsg);
  protected void handleDEVCARDCOUNT(soc.message.SOCDevCardCount);
  protected void handleDEVCARD(soc.message.SOCDevCard);
  protected void handleSETPLAYEDDEVCARD(soc.message.SOCSetPlayedDevCard);
  protected void handlePOTENTIALSETTLEMENTS(soc.message.SOCPotentialSettlements);
  protected void handleCHANGEFACE(soc.message.SOCChangeFace);
  protected void handleREJECTCONNECTION(soc.message.SOCRejectConnection);
  protected void handleLONGESTROAD(soc.message.SOCLongestRoad);
  protected void handleLARGESTARMY(soc.message.SOCLargestArmy);
  protected void handleSETSEATLOCK(soc.message.SOCSetSeatLock);
  protected void handleRESETBOARDAUTH(soc.message.SOCResetBoardAuth);
  public void chSend(java.lang.String, java.lang.String);
  public void leaveChannel(java.lang.String);
  protected void disconnect();
  public void buyDevCard(soc.game.SOCGame);
  public void buildRequest(soc.game.SOCGame, int);
  public void cancelBuildRequest(soc.game.SOCGame, int);
  public void putPiece(soc.game.SOCGame, soc.game.SOCPlayingPiece);
  public void moveRobber(soc.game.SOCGame, soc.game.SOCPlayer, int);
  public void sendText(soc.game.SOCGame, java.lang.String);
  public void leaveGame(soc.game.SOCGame);
  public void sitDown(soc.game.SOCGame, int);
  public void startGame(soc.game.SOCGame);
  public void rollDice(soc.game.SOCGame);
  public void endTurn(soc.game.SOCGame);
  public void discard(soc.game.SOCGame, soc.game.SOCResourceSet);
  public void choosePlayer(soc.game.SOCGame, int);
  public void rejectOffer(soc.game.SOCGame);
  public void acceptOffer(soc.game.SOCGame, int);
  public void clearOffer(soc.game.SOCGame);
  public void bankTrade(soc.game.SOCGame, soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public void offerTrade(soc.game.SOCGame, soc.game.SOCTradeOffer);
  public void playDevCard(soc.game.SOCGame, int);
  public void discoveryPick(soc.game.SOCGame, soc.game.SOCResourceSet);
  public void monopolyPick(soc.game.SOCGame, int);
  public void changeFace(soc.game.SOCGame, int);
  public void lockSeat(soc.game.SOCGame, int);
  public void unlockSeat(soc.game.SOCGame, int);
  public void destroy();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SOCFaceButton.java"
public class soc.client.SOCFaceButton extends java.awt.Canvas {
  public static final int DEFAULT_FACE;
  public static final int NUM_FACES;
  public static final int NUM_ROBOT_FACES;
  public static final int FACE_WIDTH_PX;
  public static final int FACE_BORDER_WIDTH_PX;
  public static final int FACE_WIDTH_BORDERED_PX;
  protected static int POPUP_MENU_IGNORE_MS;
  protected java.awt.Dimension ourSize;
  public soc.client.SOCFaceButton(soc.client.SOCPlayerInterface, int) throws java.lang.IllegalArgumentException;
  public soc.client.SOCFaceButton(soc.client.SOCPlayerInterface, soc.client.FaceChooserFrame, int);
  protected soc.client.SOCFaceButton(soc.client.SOCPlayerInterface, int, java.awt.Color, int) throws java.lang.IllegalArgumentException;
  public int getFace();
  public void setFace(int);
  public void setDefaultFace();
  public void addFacePopupMenu() throws java.lang.IllegalStateException;
  public void removeFacePopupMenu();
  public void clearFacePopupPreviousChooser();
  public void setHilightBorder(boolean) throws java.lang.IllegalStateException;
  public java.awt.Dimension getPreferedSize();
  public java.awt.Dimension getMinimumSize();
  public java.awt.Dimension getSize();
  public void paint(java.awt.Graphics);
  public void update(java.awt.Graphics);
  static long access$102(soc.client.SOCFaceButton, long);
  static soc.client.SOCFaceButton$FaceButtonPopupMenu access$200(soc.client.SOCFaceButton);
  static long access$100(soc.client.SOCFaceButton);
  static soc.client.FaceChooserFrame access$300(soc.client.SOCFaceButton);
  static int access$400(soc.client.SOCFaceButton);
  static boolean access$500(soc.client.SOCFaceButton);
  static soc.game.SOCGame access$600(soc.client.SOCFaceButton);
  static int access$410(soc.client.SOCFaceButton);
  static int access$402(soc.client.SOCFaceButton, int);
  static int access$408(soc.client.SOCFaceButton);
  static soc.client.SOCPlayerInterface access$800(soc.client.SOCFaceButton);
  static int access$900(soc.client.SOCFaceButton);
  static {};
}
Compiled from "SOCFaceButton.java"
class soc.client.SOCFaceButton$1 {
}
Compiled from "SOCFaceButton.java"
public class soc.client.SOCFaceButton$FaceButtonPopupMenu extends java.awt.PopupMenu implements java.awt.event.ActionListener {
  soc.client.SOCFaceButton fb;
  java.awt.MenuItem changeFaceItem;
  soc.client.FaceChooserFrame fsf;
  public soc.client.SOCFaceButton$FaceButtonPopupMenu(soc.client.SOCFaceButton);
  public void show(int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
  public void clearPreviousChooser();
  static void access$700(soc.client.SOCFaceButton$FaceButtonPopupMenu);
}
Compiled from "SOCFaceButton.java"
class soc.client.SOCFaceButton$MyMouseAdapter extends java.awt.event.MouseAdapter {
  final soc.client.SOCFaceButton this$0;
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  soc.client.SOCFaceButton$MyMouseAdapter(soc.client.SOCFaceButton, soc.client.SOCFaceButton$1);
}
Compiled from "SOCHandPanel.java"
public class soc.client.SOCHandPanel extends java.awt.Panel implements java.awt.event.ActionListener {
  public static final int WIDTH_MIN;
  public static final int ROADS;
  public static final int SETTLEMENTS;
  public static final int CITIES;
  public static final int NUMRESOURCES;
  public static final int NUMDEVCARDS;
  public static final int NUMKNIGHTS;
  public static final int VICTORYPOINTS;
  public static final int LONGESTROAD;
  public static final int LARGESTARMY;
  public static final int CLAY;
  public static final int ORE;
  public static final int SHEEP;
  public static final int WHEAT;
  public static final int WOOD;
  public static final int ASK_SPECIAL_BUILD;
  public static int AUTOROLL_TIME;
  protected static final int[] zero;
  protected static final java.lang.String SITLOCKED;
  protected static final java.lang.String SIT;
  protected static final java.lang.String START;
  protected static final java.lang.String ROBOT;
  protected static final java.lang.String TAKEOVER;
  protected static final java.lang.String LOCKSEAT;
  protected static final java.lang.String UNLOCKSEAT;
  protected static final java.lang.String ROLL;
  protected static final java.lang.String QUIT;
  protected static final java.lang.String DONE;
  protected static final java.lang.String DONE_RESTART;
  protected static final java.lang.String CLEAR;
  protected static final java.lang.String SEND;
  protected static final java.lang.String BANK;
  protected static final java.lang.String CARD;
  protected static final java.lang.String GIVE;
  protected static final java.lang.String GET;
  protected static final java.lang.String AUTOROLL_COUNTDOWN;
  protected static final java.lang.String ROLL_OR_PLAY_CARD;
  protected static final java.lang.String OFFERBUTTIP_ENA;
  protected static final java.lang.String OFFERBUTTIP_DIS;
  protected static final java.lang.String TRADEMSG_DISCARD;
  protected static final java.lang.String WINNER_SUFFIX;
  protected static final java.awt.Color COLOR_FOREGROUND;
  protected java.awt.Color pnameActiveBG;
  protected java.awt.Button sitBut;
  protected java.awt.Button robotBut;
  protected java.awt.Button startBut;
  protected java.awt.Button takeOverBut;
  protected java.awt.Button sittingRobotLockBut;
  protected boolean sitButIsLock;
  protected soc.client.SOCFaceButton faceImg;
  protected java.awt.Label pname;
  protected java.awt.Label vpLab;
  protected soc.client.ColorSquare vpSq;
  protected java.awt.Label larmyLab;
  protected java.awt.Label lroadLab;
  protected soc.client.ColorSquare claySq;
  protected soc.client.ColorSquare oreSq;
  protected soc.client.ColorSquare sheepSq;
  protected soc.client.ColorSquare wheatSq;
  protected soc.client.ColorSquare woodSq;
  protected java.awt.Label clayLab;
  protected java.awt.Label oreLab;
  protected java.awt.Label sheepLab;
  protected java.awt.Label wheatLab;
  protected java.awt.Label woodLab;
  protected int[] resourceTradeCost;
  protected soc.client.SOCHandPanel$ResourceTradeTypeMenu[] resourceTradeMenu;
  protected soc.client.ColorSquare settlementSq;
  protected soc.client.ColorSquare citySq;
  protected soc.client.ColorSquare roadSq;
  protected java.awt.Label settlementLab;
  protected java.awt.Label cityLab;
  protected java.awt.Label roadLab;
  protected soc.client.ColorSquare resourceSq;
  protected java.awt.Label resourceLab;
  protected soc.client.ColorSquare developmentSq;
  protected java.awt.Label developmentLab;
  protected soc.client.ColorSquare knightsSq;
  protected java.awt.Label knightsLab;
  protected java.awt.List cardList;
  protected java.awt.Button playCardBut;
  protected soc.client.SquaresPanel sqPanel;
  protected boolean playerTradingDisabled;
  protected java.awt.Label giveLab;
  protected java.awt.Label getLab;
  protected java.awt.Button offerBut;
  protected soc.client.AWTToolTip offerButTip;
  protected java.awt.Button clearOfferBut;
  protected java.awt.Button bankBut;
  protected soc.client.ColorSquare[] playerSend;
  protected java.awt.Label rollPromptCountdownLab;
  protected boolean rollPromptInUse;
  protected java.util.TimerTask autoRollTimerTask;
  protected java.awt.Button rollBut;
  protected java.awt.Button doneBut;
  protected boolean doneButIsRestart;
  protected java.awt.Button quitBut;
  protected soc.client.SOCPlayerInterface playerInterface;
  protected soc.client.SOCPlayerClient client;
  protected soc.game.SOCGame game;
  protected soc.game.SOCPlayer player;
  protected boolean playerIsClient;
  protected boolean playerIsCurrent;
  protected boolean inPlay;
  protected int[] playerSendMap;
  protected soc.client.TradeOfferPanel offer;
  protected boolean offerIsResetMessage;
  protected boolean offerIsDiscardMessage;
  protected boolean offerIsMessageWasTrade;
  protected boolean interactive;
  public soc.client.SOCHandPanel(soc.client.SOCPlayerInterface, soc.game.SOCPlayer, boolean);
  public soc.client.SOCHandPanel(soc.client.SOCPlayerInterface, soc.game.SOCPlayer);
  protected void creation(soc.client.SOCPlayerInterface, soc.game.SOCPlayer, boolean);
  public soc.client.SOCPlayerInterface getPlayerInterface();
  public soc.game.SOCPlayer getPlayer();
  public soc.client.SOCPlayerClient getClient();
  public soc.game.SOCGame getGame();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void clickPlayCardButton();
  public void clickRollButton();
  public void addSittingRobotLockBut();
  public void addTakeOverBut();
  public void addSitButton(boolean);
  public void addRobotButton();
  public void changeFace(int);
  public void removePlayer();
  public void destroy();
  public void addPlayer(java.lang.String);
  protected void autoRollSetupTimer();
  public void updateAtTurn();
  public void updateAtPlay1();
  public void updateButtonsAtAdd();
  protected void pnameCalcColors();
  public void sqPanelZerosChange(boolean);
  public void offerCounterOfferVisibleChanged(boolean);
  public void autoRollOrPromptPlayer();
  public void updateDevCards();
  public void removeSittingRobotLockBut();
  public void removeTakeOverBut();
  public void removeSitBut();
  public void removeSitLockoutBut();
  public void renameSitButLock();
  public void removeRobotBut();
  public void removeStartBut();
  public void updateCurrentOffer();
  public void rejectOfferShowNonClient();
  public void rejectOfferAtClient();
  public void clearTradeMsg();
  public void clearOffer(boolean);
  public void resetBoardSetMessage(java.lang.String) throws java.lang.IllegalStateException;
  public boolean setDiscardMsg();
  public void clearDiscardMsg();
  public void updateTakeOverButton();
  public void updateRollButton();
  public void updateSeatLockButton();
  protected void setLArmy(boolean);
  protected void setLRoad(boolean);
  public void updateValue(int);
  public void updateResourcesVP();
  public void updateResourceTradeCosts(boolean);
  public boolean isClientPlayer();
  public boolean isClientAndCurrentPlayer();
  public boolean isClientAndCurrentlyCanRoll();
  protected void setRollPrompt(java.lang.String, boolean);
  public soc.client.ColorSquare getBlankStandIn();
  public void setBounds(int, int, int, int);
  public void doLayout();
  static {};
}
Compiled from "SOCHandPanel.java"
public class soc.client.SOCHandPanel$HandPanelAutoRollTask extends java.util.TimerTask {
  int timeRemain;
  final soc.client.SOCHandPanel this$0;
  protected soc.client.SOCHandPanel$HandPanelAutoRollTask(soc.client.SOCHandPanel);
  public void run();
}
Compiled from "SOCHandPanel.java"
public class soc.client.SOCHandPanel$ResourceTradeMenuItem extends java.awt.MenuItem {
  public soc.client.SOCHandPanel$ResourceTradeMenuItem(int, int, int, boolean);
  public void setCost(int);
  public void setEnabled(boolean);
  public int getTradeFrom();
  public int getTradeTo();
  public void createBankTradeRequest(soc.client.SOCHandPanel);
}
Compiled from "SOCHandPanel.java"
abstract class soc.client.SOCHandPanel$ResourceTradePopupMenu extends java.awt.PopupMenu {
  protected soc.client.SOCHandPanel hpan;
  protected soc.client.SOCHandPanel$ResourceTradePopupMenu(soc.client.SOCHandPanel, java.lang.String);
  public abstract void show(int, int);
  public abstract void setEnabledIfCanTrade(boolean);
  public abstract void destroy();
}
Compiled from "SOCHandPanel.java"
class soc.client.SOCHandPanel$ResourceTradeTypeMenu extends soc.client.SOCHandPanel$ResourceTradePopupMenu implements java.awt.event.MouseListener,java.awt.event.ActionListener {
  boolean isForThree1;
  public soc.client.SOCHandPanel$ResourceTradeTypeMenu(soc.client.SOCHandPanel, int, soc.client.ColorSquare, int);
  public soc.client.SOCHandPanel$ResourceTradeTypeMenu(soc.client.SOCHandPanel, int, boolean) throws java.lang.IllegalStateException;
  public void show(int, int);
  public void setEnabledIfCanTrade(boolean);
  public void updateCost(int);
  public int getResourceType();
  public int getResourceCost();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void destroy();
}
Compiled from "SOCMonopolyDialog.java"
class soc.client.SOCMonopolyDialog extends java.awt.Dialog implements java.awt.event.ActionListener {
  java.awt.Button[] rsrcBut;
  java.awt.Label msg;
  soc.client.SOCPlayerInterface pi;
  public soc.client.SOCMonopolyDialog(soc.client.SOCPlayerInterface);
  public void setVisible(boolean);
  public void doLayout();
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SOCPlayerClient.java"
public class soc.client.SOCPlayerClient extends java.applet.Applet implements java.lang.Runnable,java.awt.event.ActionListener,java.awt.event.TextListener,java.awt.event.ItemListener {
  protected static final java.lang.String MAIN_PANEL;
  protected static final java.lang.String MESSAGE_PANEL;
  protected static final java.lang.String CONNECT_OR_PRACTICE_PANEL;
  protected static final java.lang.String GAMENAME_PREFIX_CANNOT_JOIN;
  public static final int SOC_PORT_DEFAULT;
  protected static final java.lang.String STATSPREFEX;
  public static final boolean isJavaOnOSX;
  protected java.awt.TextField nick;
  protected java.awt.TextField pass;
  protected java.awt.TextField status;
  protected java.awt.TextField channel;
  protected java.awt.List chlist;
  protected java.awt.List gmlist;
  protected java.awt.Button ng;
  protected java.awt.Button jc;
  protected java.awt.Button jg;
  protected java.awt.Button pg;
  protected java.awt.Button so;
  protected java.awt.Label messageLabel;
  protected java.awt.Label messageLabel_top;
  protected java.awt.Label versionOrlocalTCPPortLabel;
  protected java.awt.Button pgm;
  protected java.applet.AppletContext ac;
  protected java.lang.String lastMessage_N;
  protected java.lang.String lastMessage_L;
  protected java.awt.CardLayout cardLayout;
  protected java.lang.String host;
  protected int port;
  protected java.net.Socket s;
  protected java.io.DataInputStream in;
  protected java.io.DataOutputStream out;
  protected java.lang.Thread reader;
  protected java.lang.Exception ex;
  protected java.lang.Exception ex_L;
  protected boolean connected;
  protected int sVersion;
  protected soc.client.SOCPlayerClient$GameOptionServerSet tcpServGameOpts;
  protected soc.client.SOCPlayerClient$GameOptionServerSet practiceServGameOpts;
  protected soc.client.SOCPlayerClient$GameOptionsTimeoutTask gameOptsTask;
  protected soc.client.SOCPlayerClient$GameOptionDefaultsTimeoutTask gameOptsDefsTask;
  protected java.util.Timer eventTimer;
  protected boolean hasJoinedServer;
  protected boolean hasConnectOrPractice;
  protected soc.client.SOCConnectOrPracticePanel connectOrPracticePane;
  public soc.client.NewGameOptionsFrame newGameOptsFrame;
  public static java.lang.String DEFAULT_PLAYER_NAME;
  public static java.lang.String DEFAULT_PRACTICE_GAMENAME;
  public static java.lang.String NET_UNAVAIL_CAN_PRACTICE_MSG;
  public static java.lang.String NEED_NICKNAME_BEFORE_JOIN;
  public static java.lang.String NEED_NICKNAME_BEFORE_JOIN_2;
  public static java.lang.String STATUS_CANNOT_JOIN_THIS_GAME;
  protected java.lang.String nickname;
  protected java.lang.String password;
  protected boolean gotPassword;
  protected int lastFaceChange;
  protected java.util.Hashtable channels;
  protected java.util.Hashtable games;
  protected soc.util.SOCGameList serverGames;
  protected java.util.Hashtable gamesUnjoinableOverride;
  protected java.util.Hashtable playerInterfaces;
  protected java.util.Vector ignoreList;
  protected soc.server.SOCServer practiceServer;
  protected soc.server.genericServer.StringConnection prCli;
  protected int numPracticeGames;
  protected soc.server.SOCServer localTCPServer;
  public soc.client.SOCPlayerClient();
  public soc.client.SOCPlayerClient(boolean);
  public soc.client.SOCPlayerClient(java.lang.String, int);
  public soc.client.SOCPlayerClient(java.lang.String, int, boolean);
  protected void initVisualElements();
  public int getHexParameter(java.lang.String);
  public void start();
  public synchronized void init();
  public void connect(java.lang.String, int, java.lang.String, java.lang.String);
  public synchronized void connect();
  public java.lang.String getNickname();
  public void textValueChanged(java.awt.event.TextEvent);
  public void itemStateChanged(java.awt.event.ItemEvent);
  public void actionPerformed(java.awt.event.ActionEvent);
  public void clickPracticeButton();
  public boolean readValidNicknameAndPassword();
  protected java.lang.String getValidNickname(boolean);
  protected java.lang.String getPassword();
  public java.util.Timer getEventTimer();
  protected void gameWithOptionsBeginSetup(boolean);
  public void askStartGameWithOptions(java.lang.String, boolean, java.util.Hashtable);
  protected soc.client.SOCPlayerInterface findAnyActiveGame(boolean);
  protected boolean anyHostedActiveGames();
  public void run();
  public void resendNet();
  public void resendLocal();
  public synchronized boolean putNet(java.lang.String);
  public synchronized boolean putLocal(java.lang.String);
  public synchronized boolean put(java.lang.String, boolean);
  public void treat(soc.message.SOCMessage, boolean);
  protected void handleSTATUSMESSAGE(soc.message.SOCStatusMessage, boolean);
  protected void handleJOINAUTH(soc.message.SOCJoinAuth);
  protected void handleJOIN(soc.message.SOCJoin);
  protected void handleMEMBERS(soc.message.SOCMembers);
  protected void handleNEWCHANNEL(soc.message.SOCNewChannel);
  protected void handleCHANNELS(soc.message.SOCChannels, boolean);
  protected void handleBCASTTEXTMSG(soc.message.SOCBCastTextMsg);
  protected void handleTEXTMSG(soc.message.SOCTextMsg);
  protected void handleLEAVE(soc.message.SOCLeave);
  protected void handleDELETECHANNEL(soc.message.SOCDeleteChannel);
  protected void handleGAMES(soc.message.SOCGames, boolean);
  protected void handleJOINGAMEAUTH(soc.message.SOCJoinGameAuth, boolean);
  protected void handleJOINGAME(soc.message.SOCJoinGame);
  protected void handleLEAVEGAME(soc.message.SOCLeaveGame);
  protected void handleNEWGAME(soc.message.SOCNewGame, boolean);
  protected void handleDELETEGAME(soc.message.SOCDeleteGame, boolean);
  protected void handleGAMEMEMBERS(soc.message.SOCGameMembers);
  protected void handleGAMESTATS(soc.message.SOCGameStats);
  protected void handleGAMETEXTMSG(soc.message.SOCGameTextMsg);
  protected void handleSITDOWN(soc.message.SOCSitDown);
  protected void handleBOARDLAYOUT(soc.message.SOCBoardLayout);
  protected void handleBOARDLAYOUT2(soc.message.SOCBoardLayout2);
  protected void handleSTARTGAME(soc.message.SOCStartGame);
  protected void handleGAMESTATE(soc.message.SOCGameState);
  protected void handleSETTURN(soc.message.SOCSetTurn);
  protected void handleFIRSTPLAYER(soc.message.SOCFirstPlayer);
  protected void handleTURN(soc.message.SOCTurn);
  protected void handlePLAYERELEMENT(soc.message.SOCPlayerElement);
  protected void handleRESOURCECOUNT(soc.message.SOCResourceCount);
  protected void handleDICERESULT(soc.message.SOCDiceResult);
  protected void handlePUTPIECE(soc.message.SOCPutPiece);
  protected void handleCANCELBUILDREQUEST(soc.message.SOCCancelBuildRequest);
  protected void handleMOVEROBBER(soc.message.SOCMoveRobber);
  protected void handleDISCARDREQUEST(soc.message.SOCDiscardRequest);
  protected void handleCHOOSEPLAYERREQUEST(soc.message.SOCChoosePlayerRequest);
  protected void handleMAKEOFFER(soc.message.SOCMakeOffer);
  protected void handleCLEAROFFER(soc.message.SOCClearOffer);
  protected void handleREJECTOFFER(soc.message.SOCRejectOffer);
  protected void handleCLEARTRADEMSG(soc.message.SOCClearTradeMsg);
  protected void handleDEVCARDCOUNT(soc.message.SOCDevCardCount);
  protected void handleDEVCARD(soc.message.SOCDevCard);
  protected void handleSETPLAYEDDEVCARD(soc.message.SOCSetPlayedDevCard);
  protected void handlePOTENTIALSETTLEMENTS(soc.message.SOCPotentialSettlements);
  protected void handleCHANGEFACE(soc.message.SOCChangeFace);
  protected void handleREJECTCONNECTION(soc.message.SOCRejectConnection);
  protected void handleLONGESTROAD(soc.message.SOCLongestRoad);
  protected void handleLARGESTARMY(soc.message.SOCLargestArmy);
  protected void handleSETSEATLOCK(soc.message.SOCSetSeatLock);
  protected void handleROLLDICEPROMPT(soc.message.SOCRollDicePrompt);
  protected void handleRESETBOARDAUTH(soc.message.SOCResetBoardAuth);
  protected void handleRESETBOARDVOTEREQUEST(soc.message.SOCResetBoardVoteRequest);
  protected void handleRESETBOARDVOTE(soc.message.SOCResetBoardVote);
  protected void handleRESETBOARDREJECT(soc.message.SOCResetBoardReject);
  public void addToGameList(java.lang.String, java.lang.String, boolean);
  public void addToGameList(boolean, java.lang.String, java.lang.String, boolean);
  public void addToList(java.lang.String, java.awt.List);
  public void updateGameStats(java.lang.String, int[], boolean[]);
  public void updateGameEndStats(java.lang.String, int[]);
  public boolean deleteFromGameList(java.lang.String, boolean);
  public void deleteFromList(java.lang.String, java.awt.List);
  public void chSend(java.lang.String, java.lang.String);
  public void leaveChannel(java.lang.String);
  protected synchronized void disconnect();
  public void buyDevCard(soc.game.SOCGame);
  public void buildRequest(soc.game.SOCGame, int);
  public void cancelBuildRequest(soc.game.SOCGame, int);
  public void putPiece(soc.game.SOCGame, soc.game.SOCPlayingPiece);
  public void moveRobber(soc.game.SOCGame, soc.game.SOCPlayer, int);
  public void sendText(soc.game.SOCGame, java.lang.String);
  public void leaveGame(soc.game.SOCGame);
  public void sitDown(soc.game.SOCGame, int);
  public void startGame(soc.game.SOCGame);
  public void rollDice(soc.game.SOCGame);
  public void endTurn(soc.game.SOCGame);
  public void discard(soc.game.SOCGame, soc.game.SOCResourceSet);
  public void choosePlayer(soc.game.SOCGame, int);
  public void rejectOffer(soc.game.SOCGame);
  public void acceptOffer(soc.game.SOCGame, int);
  public void clearOffer(soc.game.SOCGame);
  public void bankTrade(soc.game.SOCGame, soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public void offerTrade(soc.game.SOCGame, soc.game.SOCTradeOffer);
  public void playDevCard(soc.game.SOCGame, int);
  public void discoveryPick(soc.game.SOCGame, soc.game.SOCResourceSet);
  public void monopolyPick(soc.game.SOCGame, int);
  public void changeFace(soc.game.SOCGame, int);
  public void lockSeat(soc.game.SOCGame, int);
  public void unlockSeat(soc.game.SOCGame, int);
  public void resetBoardRequest(soc.game.SOCGame);
  public void resetBoardVote(soc.game.SOCGame, int, boolean);
  public boolean doLocalCommand(java.lang.String, java.lang.String);
  public boolean doLocalCommand(soc.game.SOCGame, java.lang.String);
  protected boolean onIgnoreList(java.lang.String);
  protected void addToIgnoreList(java.lang.String);
  protected void removeFromIgnoreList(java.lang.String);
  protected void printIgnoreList(soc.client.ChannelFrame);
  protected void printIgnoreList(soc.client.SOCPlayerInterface);
  public void considerMove(soc.game.SOCGame, java.lang.String, soc.game.SOCPlayingPiece);
  public void considerTarget(soc.game.SOCGame, java.lang.String, soc.game.SOCPlayingPiece);
  public void startPracticeGame();
  public void startPracticeGame(java.lang.String, java.util.Hashtable, boolean);
  public void startLocalTCPServer(int) throws java.lang.IllegalArgumentException;
  public int getServerVersion(soc.game.SOCGame);
  public java.lang.String getAppletInfo();
  public void destroy();
  public boolean putLeaveAll();
  public static void usage();
  public static void main(java.lang.String[]);
  static void access$000(soc.client.SOCPlayerClient, soc.message.SOCGameOptionInfo, boolean);
  static {};
}
Compiled from "SOCPlayerClient.java"
class soc.client.SOCPlayerClient$GameOptionDefaultsTimeoutTask extends java.util.TimerTask {
  public soc.client.SOCPlayerClient pcli;
  public soc.client.SOCPlayerClient$GameOptionServerSet srvOpts;
  public boolean forPracticeServer;
  public soc.client.SOCPlayerClient$GameOptionDefaultsTimeoutTask(soc.client.SOCPlayerClient, soc.client.SOCPlayerClient$GameOptionServerSet, boolean);
  public void run();
}
Compiled from "SOCPlayerClient.java"
public class soc.client.SOCPlayerClient$GameOptionServerSet {
  public boolean allOptionsReceived;
  public boolean newGameWaitingForOpts;
  public java.lang.String gameInfoWaitingForOpts;
  public java.util.Hashtable optionSet;
  public boolean askedDefaultsAlready;
  public boolean defaultsReceived;
  public long askedDefaultsTime;
  public soc.client.SOCPlayerClient$GameOptionServerSet();
  public void noMoreOptions(boolean);
  public java.util.Vector receiveDefaults(java.util.Hashtable);
  public boolean receiveInfo(soc.message.SOCGameOptionInfo);
}
Compiled from "SOCPlayerClient.java"
class soc.client.SOCPlayerClient$GameOptionsTimeoutTask extends java.util.TimerTask {
  public soc.client.SOCPlayerClient pcli;
  public soc.client.SOCPlayerClient$GameOptionServerSet srvOpts;
  public soc.client.SOCPlayerClient$GameOptionsTimeoutTask(soc.client.SOCPlayerClient, soc.client.SOCPlayerClient$GameOptionServerSet);
  public void run();
}
Compiled from "SOCPlayerClient.java"
class soc.client.SOCPlayerClient$MyWindowAdapter extends java.awt.event.WindowAdapter {
  public soc.client.SOCPlayerClient$MyWindowAdapter(soc.client.SOCPlayerClient);
  public void windowClosing(java.awt.event.WindowEvent);
  public void windowOpened(java.awt.event.WindowEvent);
}
Compiled from "SOCPlayerClient.java"
public class soc.client.SOCPlayerClient$SOCPlayerLocalStringReader implements java.lang.Runnable {
  soc.server.genericServer.LocalStringConnection locl;
  final soc.client.SOCPlayerClient this$0;
  protected soc.client.SOCPlayerClient$SOCPlayerLocalStringReader(soc.client.SOCPlayerClient, soc.server.genericServer.LocalStringConnection);
  public void run();
}
Compiled from "SOCPlayerInterface.java"
public class soc.client.SOCPlayerInterface extends java.awt.Frame implements java.awt.event.ActionListener,java.awt.event.MouseListener {
  protected soc.client.SOCBoardPanel boardPanel;
  protected boolean boardIsScaled;
  protected java.awt.TextField textInput;
  protected boolean textInputIsInitial;
  protected boolean textInputHasSent;
  protected int textInputGreyCountdown;
  protected static int textInputGreyCountFrom;
  public static final java.lang.String TEXTINPUT_INITIAL_PROMPT_MSG;
  public static final java.lang.String TITLEBAR_GAME;
  public static final java.lang.String TITLEBAR_GAME_OVER;
  protected soc.client.SOCPlayerInterface$SOCPITextfieldListener textInputListener;
  protected soc.client.SnippingTextArea textDisplay;
  protected soc.client.SnippingTextArea chatDisplay;
  protected soc.client.SOCBuildingPanel buildingPanel;
  protected soc.client.SOCHandPanel[] hands;
  protected soc.client.SOCHandPanel clientHand;
  protected java.awt.Color[] playerColors;
  protected java.awt.Color[] playerColorsGhost;
  protected soc.client.SOCPlayerClient client;
  protected soc.game.SOCGame game;
  protected boolean gameIsStarting;
  protected soc.client.SOCHandPanel boardResetRequester;
  protected soc.client.SOCPlayerInterface$ResetBoardVoteDialog boardResetVoteDia;
  protected int ncols;
  protected int npix;
  protected int textDisplayRollExpected;
  protected soc.client.SOCDiscardDialog discardDialog;
  protected soc.client.SOCChoosePlayerDialog choosePlayerDialog;
  protected soc.client.SOCDiscoveryDialog discoveryDialog;
  protected soc.client.SOCMonopolyDialog monopolyDialog;
  public soc.client.SOCPlayerInterface(java.lang.String, soc.client.SOCPlayerClient, soc.game.SOCGame);
  protected void initInterfaceElements(boolean);
  public void update(java.awt.Graphics);
  public soc.client.SOCPlayerClient getClient();
  public soc.game.SOCGame getGame();
  public java.awt.Color getPlayerColor(int);
  public java.awt.Color getPlayerColor(int, boolean);
  public soc.client.SOCHandPanel getPlayerHandPanel(int);
  public soc.client.SOCBoardPanel getBoardPanel();
  public java.util.Timer getEventTimer();
  public void updateDevCardCount();
  public void updateLongestLargest(boolean, soc.game.SOCPlayer, soc.game.SOCPlayer);
  public soc.client.SOCBuildingPanel getBuildingPanel();
  public soc.client.SOCHandPanel getClientHand();
  public void setClientHand(soc.client.SOCHandPanel);
  public boolean clientIsCurrentPlayer();
  public int getClientPlayerNumber();
  public void setTextDisplayRollExpected(int);
  public void actionPerformed(java.awt.event.ActionEvent);
  public void leaveGame();
  public void resetBoardRequest();
  public void resetBoardVoted(int, boolean);
  public void resetBoardRejected();
  public void resetBoardAskVote(int);
  public void print(java.lang.String);
  public void chatPrint(java.lang.String);
  public void over(java.lang.String);
  public void began();
  public void addPlayer(java.lang.String, int);
  public void removePlayer(int);
  public void startGame();
  public void updateAtOver(int[]);
  public void updateAtTurn(int);
  protected void textInputSetToInitialPrompt(boolean) throws java.lang.IllegalStateException;
  public void showDiscardDialog(int);
  public void choosePlayer(int, int[]);
  public void showDiscoveryDialog();
  public void showMonopolyDialog();
  public void updateAtPlay1();
  public void updateAtGameState();
  public void resetBoard(soc.game.SOCGame, int, int);
  public void changeFace(int, int);
  public void chatPrintDebug(java.lang.String);
  public void chatPrintStackTrace(java.lang.Throwable);
  public static java.awt.Color makeGhostColor(java.awt.Color);
  public void doLayout();
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  static void access$100(soc.client.SOCPlayerInterface);
  static int access$200(soc.client.SOCPlayerInterface);
  static java.lang.Object access$300(soc.client.SOCPlayerInterface);
  static boolean access$402(soc.client.SOCPlayerInterface, boolean);
  static soc.client.SOCPlayerInterface$SOCPIDiscardMsgTask access$502(soc.client.SOCPlayerInterface, soc.client.SOCPlayerInterface$SOCPIDiscardMsgTask);
  static boolean access$600(soc.client.SOCPlayerInterface);
  static boolean access$700(soc.client.SOCPlayerInterface);
  static boolean access$800(soc.client.SOCPlayerInterface);
  static boolean access$900(soc.client.SOCPlayerInterface);
  static boolean access$1000(soc.client.SOCPlayerInterface);
  static boolean access$1100(soc.client.SOCPlayerInterface);
  static boolean access$1200(soc.client.SOCPlayerInterface);
  static boolean access$1300(soc.client.SOCPlayerInterface);
  static boolean access$1302(soc.client.SOCPlayerInterface, boolean);
  static boolean access$1402(soc.client.SOCPlayerInterface, boolean);
  static {};
}
Compiled from "SOCPlayerInterface.java"
class soc.client.SOCPlayerInterface$1 {
}
Compiled from "SOCPlayerInterface.java"
class soc.client.SOCPlayerInterface$MyWindowAdapter extends java.awt.event.WindowAdapter {
  public soc.client.SOCPlayerInterface$MyWindowAdapter(soc.client.SOCPlayerInterface);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "SOCPlayerInterface.java"
public class soc.client.SOCPlayerInterface$ResetBoardVoteDialog extends soc.client.AskDialog implements java.lang.Runnable {
  protected soc.client.SOCPlayerInterface$ResetBoardVoteDialog(soc.client.SOCPlayerClient, soc.client.SOCPlayerInterface, java.lang.String, boolean);
  public void button1Chosen();
  public void button2Chosen();
  public void windowCloseChosen();
  public void showInNewThread();
  public void disposeQuietly();
  public void run();
}
Compiled from "SOCPlayerInterface.java"
class soc.client.SOCPlayerInterface$SOCPIDiscardMsgTask extends java.util.TimerTask {
  public soc.client.SOCPlayerInterface$SOCPIDiscardMsgTask(soc.client.SOCPlayerInterface);
  public void run();
}
Compiled from "SOCPlayerInterface.java"
class soc.client.SOCPlayerInterface$SOCPITextDisplaysLargerTask extends java.util.TimerTask {
  final soc.client.SOCPlayerInterface this$0;
  public void run();
  soc.client.SOCPlayerInterface$SOCPITextDisplaysLargerTask(soc.client.SOCPlayerInterface, soc.client.SOCPlayerInterface$1);
}
Compiled from "SOCPlayerInterface.java"
class soc.client.SOCPlayerInterface$SOCPITextfieldListener extends java.awt.event.KeyAdapter implements java.awt.event.TextListener,java.awt.event.FocusListener {
  public soc.client.SOCPlayerInterface$SOCPITextfieldListener(soc.client.SOCPlayerInterface);
  public void keyPressed(java.awt.event.KeyEvent);
  public void textValueChanged(java.awt.event.TextEvent);
  public void focusLost(java.awt.event.FocusEvent);
  public void focusGained(java.awt.event.FocusEvent);
}
Compiled from "SOCPracticeAskDialog.java"
class soc.client.SOCPracticeAskDialog extends soc.client.AskDialog {
  public soc.client.SOCPracticeAskDialog(soc.client.SOCPlayerClient, soc.client.SOCPlayerInterface);
  public void button1Chosen();
  public void button2Chosen();
  public void windowCloseChosen();
}
Compiled from "SOCQuitAllConfirmDialog.java"
class soc.client.SOCQuitAllConfirmDialog extends soc.client.AskDialog {
  protected boolean hostedServerActive;
  public static void createAndShow(soc.client.SOCPlayerClient, java.awt.Frame) throws java.lang.IllegalArgumentException;
  protected soc.client.SOCQuitAllConfirmDialog(soc.client.SOCPlayerClient, java.awt.Frame, boolean);
  public void button1Chosen();
  public void button2Chosen();
  public void windowCloseChosen();
}
Compiled from "SOCQuitConfirmDialog.java"
class soc.client.SOCQuitConfirmDialog extends soc.client.AskDialog {
  public static void createAndShow(soc.client.SOCPlayerClient, soc.client.SOCPlayerInterface) throws java.lang.IllegalArgumentException;
  protected soc.client.SOCQuitConfirmDialog(soc.client.SOCPlayerClient, soc.client.SOCPlayerInterface, boolean);
  public void button1Chosen();
  public void button2Chosen();
  public void button3Chosen();
  public void windowCloseChosen();
}
Compiled from "ShadowedBox.java"
public class soc.client.ShadowedBox extends java.awt.Canvas {
  public static final int SHADOW_SIZE;
  int height;
  int width;
  java.awt.Color interior;
  public soc.client.ShadowedBox(java.awt.Color, java.awt.Color);
  public void setInterior(java.awt.Color);
  public java.awt.Color getInterior();
  public java.awt.Dimension getPreferredSize();
  public java.awt.Dimension getMinimumSize();
  public void paint(java.awt.Graphics);
}
Compiled from "SnippingTextArea.java"
public class soc.client.SnippingTextArea extends java.awt.TextArea {
  static final boolean isJava142;
  static final boolean isJavaOnOSX105;
  int maximumLines;
  int lines;
  public soc.client.SnippingTextArea(int, int, int);
  public soc.client.SnippingTextArea(java.lang.String, int);
  public soc.client.SnippingTextArea(java.lang.String, int, int, int, int);
  public int getMaximumLines();
  public void setMaximumLines(int);
  public int lines();
  public synchronized void setText(java.lang.String);
  public synchronized void replaceRange(java.lang.String, int, int);
  public synchronized void insert(java.lang.String, int);
  public synchronized void append(java.lang.String);
  protected int countNewLines(java.lang.String);
  public void snipText();
  static {};
}
Compiled from "SpeechBalloon.java"
public class soc.client.SpeechBalloon extends java.awt.Canvas {
  public static final int SHADOW_SIZE;
  int height;
  int width;
  public soc.client.SpeechBalloon(java.awt.Color);
  public java.awt.Dimension getPreferredSize();
  public java.awt.Dimension getMinimumSize();
  public boolean getBalloonPoint();
  public void setBalloonPoint(boolean);
  public void paint(java.awt.Graphics);
  static {};
}
Compiled from "SquaresPanel.java"
public class soc.client.SquaresPanel extends java.awt.Panel implements java.awt.event.MouseListener,soc.client.ColorSquareListener {
  public static final int HEIGHT;
  boolean interactive;
  boolean notAllZero;
  soc.client.SOCHandPanel parentHand;
  public static final int shiftKeysMask;
  public soc.client.SquaresPanel(boolean);
  public soc.client.SquaresPanel(boolean, soc.client.SOCHandPanel);
  public void doLayout();
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void setValues(int[], int[]);
  public void getValues(int[], int[]);
  public boolean containsNonZero();
  public void squareChanged(soc.client.ColorSquare, int, int);
}
Compiled from "TradeOfferPanel.java"
public class soc.client.TradeOfferPanel extends java.awt.Panel {
  public static final java.lang.String OFFER_MODE;
  public static final java.lang.String MESSAGE_MODE;
  public static final int OFFER_HEIGHT;
  public static final int OFFER_BUTTONS_HEIGHT;
  public static final int OFFER_COUNTER_HEIGHT;
  protected static final int[] zero;
  static final java.lang.String OFFER;
  static final java.lang.String ACCEPT;
  static final java.lang.String REJECT;
  static final java.lang.String SEND;
  static final java.lang.String CLEAR;
  static final java.lang.String CANCEL;
  static final java.awt.Color insideBGColor;
  int from;
  soc.client.SOCHandPanel hp;
  soc.client.SOCPlayerInterface pi;
  java.lang.String mode;
  java.awt.CardLayout cardLayout;
  soc.client.TradeOfferPanel$MessagePanel messagePanel;
  soc.client.TradeOfferPanel$OfferPanel offerPanel;
  public soc.client.TradeOfferPanel(soc.client.SOCHandPanel, int);
  public void setMessage(java.lang.String);
  public void setOffer(soc.game.SOCTradeOffer);
  public void clearOffer();
  public boolean isCounterOfferMode();
  public java.lang.String getMode();
  public boolean doesCounterHideBalloonPoint();
  public void setCounterHidesBalloonPoint(boolean);
  public void setBounds(int, int, int, int);
  static boolean access$000(soc.client.TradeOfferPanel);
  static boolean access$100(soc.client.TradeOfferPanel);
  static {};
}
Compiled from "TradeOfferPanel.java"
class soc.client.TradeOfferPanel$MessagePanel extends java.awt.Panel {
  soc.client.SpeechBalloon balloon;
  java.awt.Label msg;
  int msgHeight;
  final soc.client.TradeOfferPanel this$0;
  public soc.client.TradeOfferPanel$MessagePanel(soc.client.TradeOfferPanel);
  public void update(java.lang.String);
  public void doLayout();
}
Compiled from "TradeOfferPanel.java"
class soc.client.TradeOfferPanel$OfferPanel extends java.awt.Panel implements java.awt.event.ActionListener {
  soc.client.SpeechBalloon balloon;
  java.awt.Label toWhom1;
  java.awt.Label toWhom2;
  java.awt.Label giveLab;
  java.awt.Label getLab;
  soc.client.SquaresPanel squares;
  java.awt.Button offerBut;
  java.awt.Button acceptBut;
  java.awt.Button rejectBut;
  soc.client.ShadowedBox offerBox;
  java.awt.Label counterOfferToWhom;
  boolean counterOffer_playerInit;
  soc.client.SquaresPanel offerSquares;
  java.awt.Label giveLab2;
  java.awt.Label getLab2;
  java.awt.Button sendBut;
  java.awt.Button clearBut;
  java.awt.Button cancelBut;
  boolean offered;
  soc.game.SOCResourceSet give;
  soc.game.SOCResourceSet get;
  int[] giveInt;
  int[] getInt;
  boolean counterOfferMode;
  final soc.client.TradeOfferPanel this$0;
  public soc.client.TradeOfferPanel$OfferPanel(soc.client.TradeOfferPanel);
  public void update(soc.game.SOCTradeOffer);
  public void doLayout();
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "D.java"
public class soc.debug.D {
  public static final boolean ebugOn;
  public soc.debug.D();
  public static final void ebug_enable();
  public static final void ebug_disable();
  public static final boolean ebugIsEnabled();
  public static final void ebugPrintln(java.lang.String);
  public static final void ebugPrintln();
  public static final void ebugPrint(java.lang.String);
  public static final void debug(java.lang.String);
  public static final void ebugPrintStackTrace(java.lang.Throwable, java.lang.String);
  static {};
}
Compiled from "D.java"
public class soc.disableDebug.D {
  public static final boolean ebugOn;
  public soc.disableDebug.D();
  public static final void ebug_enable();
  public static final void ebug_disable();
  public static final boolean ebugIsEnabled();
  public static final void ebugPrintln(java.lang.String);
  public static final void ebugPrintln();
  public static final void ebugPrintStackTrace(java.lang.Throwable, java.lang.String);
  public static final void ebugPrint(java.lang.String);
  public static final void debug(java.lang.String);
}
Compiled from "SOCBoard.java"
public class soc.game.SOCBoard implements java.io.Serializable,java.lang.Cloneable {
  public static final int DESERT_HEX;
  public static final int CLAY_HEX;
  public static final int ORE_HEX;
  public static final int SHEEP_HEX;
  public static final int WHEAT_HEX;
  public static final int WOOD_HEX;
  public static final int MAX_LAND_HEX;
  public static final int WATER_HEX;
  public static final int MISC_PORT_HEX;
  public static final int CLAY_PORT_HEX;
  public static final int ORE_PORT_HEX;
  public static final int SHEEP_PORT_HEX;
  public static final int WHEAT_PORT_HEX;
  public static final int WOOD_PORT_HEX;
  public static final int MISC_PORT;
  public static final int CLAY_PORT;
  public static final int ORE_PORT;
  public static final int SHEEP_PORT;
  public static final int WHEAT_PORT;
  public static final int WOOD_PORT;
  public static final int MAX_ROBBER_HEX;
  public static final int FACING_NE;
  public static final int FACING_E;
  public static final int FACING_SE;
  public static final int FACING_SW;
  public static final int FACING_W;
  public static final int FACING_NW;
  public static final int BOARD_ENCODING_ORIGINAL;
  public static final int BOARD_ENCODING_6PLAYER;
  public static final int MAX_BOARD_ENCODING;
  public static final int MAXHEX;
  public static final int MINHEX;
  public static final int MAXEDGE;
  public static final int MAXEDGE_V2;
  public static final int MINEDGE;
  public static final int MINEDGE_V2;
  public static final int MAXNODE;
  public static final int MINNODE;
  public static final int MAXNODEPLUSONE;
  public static final int MINNODE_V2;
  public static final int[] HEXCOORDS_LAND_V1;
  public static final int[] HEXCOORDS_LAND_V2;
  protected java.util.Hashtable nodesOnBoard;
  public soc.game.SOCBoard(java.util.Hashtable, int) throws java.lang.IllegalArgumentException;
  public soc.game.SOCBoard(soc.game.SOCBoard);
  public void makeNewBoard(java.util.Hashtable);
  public int[] getHexLayout();
  public int[] getHexLandCoords();
  public int[] getNumberLayout();
  public int[] getPortsLayout();
  public int[] getPortsFacing();
  public int[] getPortsEdges();
  public int getRobberHex();
  public void setBoardEncodingFormat(int) throws java.lang.IllegalArgumentException;
  public void setHexLayout(int[]);
  public void setPortsLayout(int[]);
  public int getPortTypeFromHexType(int);
  public void setNumberLayout(int[]);
  public void setRobberHex(int);
  public java.util.Vector getPortCoordinates(int);
  public int getPortFacing(int);
  public int getPortTypeFromNodeCoord(int);
  public int getNumberOnHexFromCoord(int);
  public int getNumberOnHexFromNumber(int);
  public int getHexNumFromCoord(int);
  public int getHexTypeFromCoord(int);
  public int getHexTypeFromNumber(int);
  public void putPiece(soc.game.SOCPlayingPiece);
  public void removePiece(soc.game.SOCPlayingPiece);
  public java.util.Vector getPieces();
  public java.util.Vector getRoads();
  public java.util.Vector getSettlements();
  public java.util.Vector getCities();
  public int getBoardWidth();
  public int getBoardHeight();
  public int getBoardEncodingFormat();
  public int getMinNode();
  public java.util.Vector getAdjacentNodesToEdge(int);
  public static int[] getAdjacentNodesToEdge_arr(int);
  public java.util.Vector getAdjacentEdgesToEdge(int);
  public static java.util.Vector getAdjacentHexesToNode(int);
  public java.util.Vector getAdjacentEdgesToNode(int);
  public int[] getAdjacentEdgesToNode_arr(int);
  public java.util.Vector getAdjacentNodesToNode(int);
  public int[] getAdjacentNodesToNode_arr(int);
  public java.util.Vector getAdjacentHexesToHex(int, boolean);
  public int getAdjacentNodeToHex(int, int) throws java.lang.IllegalArgumentException;
  public int getAdjacentHexToEdge(int, int) throws java.lang.IllegalArgumentException;
  public soc.game.SOCPlayingPiece settlementAtNode(int);
  public soc.game.SOCPlayingPiece roadAtEdge(int);
  public boolean isNodeOnBoard(int);
  public java.lang.String nodeCoordToString(int);
  public java.lang.String edgeCoordToString(int);
  public soc.game.SOCBoard copy() throws java.lang.CloneNotSupportedException;
  static {};
}
Compiled from "SOCCity.java"
public class soc.game.SOCCity extends soc.game.SOCPlayingPiece {
  public soc.game.SOCCity(soc.game.SOCPlayer, int, soc.game.SOCBoard) throws java.lang.IllegalArgumentException;
  public java.util.Vector getAdjacentHexes();
}
Compiled from "SOCDevCardConstants.java"
public interface soc.game.SOCDevCardConstants {
  public static final int MIN;
  public static final int KNIGHT;
  public static final int ROADS;
  public static final int DISC;
  public static final int MONO;
  public static final int CAP;
  public static final int LIB;
  public static final int UNIV;
  public static final int TEMP;
  public static final int TOW;
  public static final int MAX_KNOWN;
  public static final int UNKNOWN;
  public static final int MAXPLUSONE;
}
Compiled from "SOCDevCardSet.java"
public class soc.game.SOCDevCardSet implements java.io.Serializable,java.lang.Cloneable {
  public static final int OLD;
  public static final int NEW;
  public soc.game.SOCDevCardSet();
  public soc.game.SOCDevCardSet(soc.game.SOCDevCardSet);
  public void clear();
  public int getAmount(int, int);
  public int[] getTotalTypes();
  public int getTotal();
  public void setAmount(int, int, int);
  public void add(int, int, int);
  public void subtract(int, int, int);
  public int getNumVPCards();
  public int getNumUnplayed();
  public void newToOld();
}
Compiled from "SOCForceEndTurnResult.java"
public class soc.game.SOCForceEndTurnResult {
  public static final int FORCE_ENDTURN_MIN;
  public static final int FORCE_ENDTURN_NONE;
  public static final int FORCE_ENDTURN_SKIP_START_ADV;
  public static final int FORCE_ENDTURN_SKIP_START_ADVBACK;
  public static final int FORCE_ENDTURN_SKIP_START_TURN;
  public static final int FORCE_ENDTURN_RSRC_RET_UNPLACE;
  public static final int FORCE_ENDTURN_UNPLACE_ROBBER;
  public static final int FORCE_ENDTURN_RSRC_DISCARD;
  public static final int FORCE_ENDTURN_RSRC_DISCARD_WAIT;
  public static final int FORCE_ENDTURN_LOST_CHOICE;
  public static final int FORCE_ENDTURN_MAX;
  public soc.game.SOCForceEndTurnResult(int);
  public soc.game.SOCForceEndTurnResult(int, boolean, boolean);
  public soc.game.SOCForceEndTurnResult(int, int);
  public soc.game.SOCForceEndTurnResult(int, soc.game.SOCResourceSet);
  public soc.game.SOCForceEndTurnResult(int, soc.game.SOCResourceSet, boolean);
  public int getResult();
  public soc.game.SOCResourceSet getResourcesGainedLost();
  public boolean isLoss();
  public boolean didUpdateFP();
  public boolean didUpdateLP();
  public int getDevCardType();
}
Compiled from "SOCGame.java"
public class soc.game.SOCGame implements java.io.Serializable,java.lang.Cloneable {
  public static final int NEW;
  public static final int READY;
  public static final int SETOPTIONS_EXCL;
  public static final int SETOPTIONS_INCL;
  public static final int READY_RESET_WAIT_ROBOT_DISMISS;
  public static final int START1A;
  public static final int START1B;
  public static final int START2A;
  public static final int START2B;
  public static final int PLAY;
  public static final int PLAY1;
  public static final int PLACING_ROAD;
  public static final int PLACING_SETTLEMENT;
  public static final int PLACING_CITY;
  public static final int PLACING_ROBBER;
  public static final int PLACING_FREE_ROAD1;
  public static final int PLACING_FREE_ROAD2;
  public static final int WAITING_FOR_DISCARDS;
  public static final int WAITING_FOR_CHOICE;
  public static final int WAITING_FOR_DISCOVERY;
  public static final int WAITING_FOR_MONOPOLY;
  public static final int SPECIAL_BUILDING;
  public static final int OVER;
  public static final int RESET_OLD;
  public static final int VACANT;
  public static final int OCCUPIED;
  public static final boolean LOCKED;
  public static final boolean UNLOCKED;
  public static final int VOTE_NONE;
  public static final int VOTE_YES;
  public static final int VOTE_NO;
  public static final int MAXPLAYERS;
  public static final int MAXPLAYERS_STANDARD;
  public static final int MINPLAYERS;
  public static final int VP_WINNER;
  public static final soc.game.SOCResourceSet EMPTY_RESOURCES;
  public static final soc.game.SOCResourceSet SETTLEMENT_SET;
  public static final soc.game.SOCResourceSet ROAD_SET;
  public static final soc.game.SOCResourceSet CITY_SET;
  public static final soc.game.SOCResourceSet CARD_SET;
  boolean inUse;
  public boolean isLocal;
  public boolean hasOldClients;
  public int clientVersionLowest;
  public int clientVersionHighest;
  public transient soc.util.SOCGameBoardReset boardResetOngoingInfo;
  public final int maxPlayers;
  java.util.Stack oldPlayerWithLongestRoad;
  boolean allOriginalPlayers;
  java.util.Date startTime;
  long expiration;
  public soc.game.SOCGame(soc.game.SOCGame);
  public soc.game.SOCGame(java.lang.String);
  public soc.game.SOCGame(java.lang.String, java.util.Hashtable) throws java.lang.IllegalArgumentException;
  public soc.game.SOCGame(java.lang.String, boolean) throws java.lang.IllegalArgumentException;
  public soc.game.SOCGame(java.lang.String, boolean, java.util.Hashtable) throws java.lang.IllegalArgumentException;
  public synchronized void takeMonitor();
  public synchronized void releaseMonitor();
  public boolean allOriginalPlayers();
  public java.util.Date getStartTime();
  public long getExpiration();
  public void setExpiration(long);
  public void addPlayer(java.lang.String, int) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException;
  public void removePlayer(java.lang.String) throws java.lang.IllegalArgumentException;
  public boolean isSeatVacant(int);
  public int getAvailableSeatCount();
  public void lockSeat(int);
  public void unlockSeat(int);
  public boolean isSeatLocked(int);
  public soc.game.SOCPlayer getPlayer(int);
  public soc.game.SOCPlayer getPlayer(java.lang.String);
  public java.lang.String getName();
  public java.util.Hashtable getGameOptions();
  public boolean isGameOptionDefined(java.lang.String);
  public boolean isGameOptionSet(java.lang.String);
  public static boolean isGameOptionSet(java.util.Hashtable, java.lang.String);
  public int getGameOptionIntValue(java.lang.String);
  public static int getGameOptionIntValue(java.util.Hashtable, java.lang.String);
  public java.lang.String getGameOptionStringValue(java.lang.String);
  public static java.lang.String getGameOptionStringValue(java.util.Hashtable, java.lang.String);
  public int getClientVersionMinRequired();
  public boolean isBoardReset();
  public soc.game.SOCBoard getBoard();
  protected void setBoard(soc.game.SOCBoard);
  public soc.game.SOCPlayer[] getPlayers();
  protected void setPlayer(int, soc.game.SOCPlayer);
  public int getCurrentPlayerNumber();
  public void setCurrentPlayerNumber(int);
  public int getRoundCount();
  public int getCurrentDice();
  public void setCurrentDice(int);
  public int getGameState();
  public void setGameState(int);
  public int getResetOldGameState() throws java.lang.IllegalStateException;
  public boolean isForcingEndTurn();
  public int getNumDevCards();
  public void setNumDevCards(int);
  public soc.game.SOCPlayer getPlayerWithLargestArmy();
  public void setPlayerWithLargestArmy(soc.game.SOCPlayer);
  public soc.game.SOCPlayer getPlayerWithLongestRoad();
  public void setPlayerWithLongestRoad(soc.game.SOCPlayer);
  public soc.game.SOCPlayer getPlayerWithWin();
  public java.lang.String gameOverMessageToPlayer(soc.game.SOCPlayer) throws java.lang.IllegalStateException;
  protected boolean advanceTurnBackwards();
  protected boolean advanceTurn();
  public void putPiece(soc.game.SOCPlayingPiece);
  public void putPiece2(soc.game.SOCPlayingPiece);
  public void putTempPiece(soc.game.SOCPlayingPiece);
  protected void undoPutPieceCommon(soc.game.SOCPlayingPiece);
  public void undoPutTempPiece(soc.game.SOCPlayingPiece);
  public void undoPutInitSettlement(soc.game.SOCPlayingPiece);
  public void startGame();
  public void setFirstPlayer(int);
  public int getFirstPlayer();
  public boolean canEndTurn(int);
  public void endTurn();
  public void updateAtTurn();
  public soc.game.SOCForceEndTurnResult forceEndTurn() throws java.lang.IllegalStateException;
  public static void discardPickRandom(soc.game.SOCResourceSet, int, soc.game.SOCResourceSet, java.util.Random);
  public soc.game.SOCResourceSet playerDiscardRandom(int) throws java.lang.IllegalStateException;
  public boolean canRollDice(int);
  public soc.util.IntPair rollDice();
  public soc.game.SOCResourceSet getResourcesGainedFromRoll(soc.game.SOCPlayer, int);
  public boolean canDiscard(int, soc.game.SOCResourceSet);
  public void discard(int, soc.game.SOCResourceSet);
  public boolean canMoveRobber(int, int);
  public soc.game.SOCMoveRobberResult moveRobber(int, int);
  public boolean canChoosePlayer(int);
  public java.util.Vector getPlayersOnHex(int);
  public java.util.Vector getPossibleVictims();
  public int stealFromPlayer(int);
  public boolean canMakeTrade(int, int);
  public void makeTrade(int, int);
  public boolean canMakeBankTrade(soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public void makeBankTrade(soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public boolean couldBuildRoad(int);
  public boolean couldBuildSettlement(int);
  public boolean couldBuildCity(int);
  public boolean couldBuyDevCard(int);
  public void buyRoad(int);
  public void buySettlement(int);
  public void buyCity(int);
  public void cancelBuildRoad(int);
  public void cancelBuildSettlement(int);
  public void cancelBuildCity(int);
  public int buyDevCard();
  public void buyDevCard2(int);
  public boolean canPlayKnight(int);
  public boolean canPlayRoadBuilding(int);
  public boolean canPlayDiscovery(int);
  public boolean canPlayMonopoly(int);
  public void playKnight();
  public void playRoadBuilding();
  public void playDiscovery();
  public void playMonopoly();
  public boolean canDoDiscoveryAction(soc.game.SOCResourceSet);
  public boolean canDoMonopolyAction();
  public void doDiscoveryAction(soc.game.SOCResourceSet);
  public int[] doMonopolyAction(int);
  public void updateLargestArmy();
  public void saveLargestArmyState();
  public void restoreLargestArmyState();
  public void updateLongestRoad(int);
  public void checkForWinner();
  public int winningPlayer();
  public void destroyGame();
  public soc.game.SOCGame resetAsCopy();
  public void resetVoteBegin(int) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public int getResetVoteRequester();
  public boolean getResetVoteActive();
  public boolean resetVoteRegister(int, boolean) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public int getResetPlayerVote(int);
  public void resetVoteClear();
  public boolean getResetVoteResult() throws java.lang.IllegalStateException;
  public boolean canBuyOrAskSpecialBuild(int);
  public boolean isSpecialBuilding();
  public boolean canAskSpecialBuild(int, boolean) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException;
  public void askSpecialBuild(int, boolean) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException;
  static {};
}
Compiled from "SOCGameOption.java"
public class soc.game.SOCGameOption implements java.lang.Cloneable,java.lang.Comparable {
  public static final int OTYPE_MIN;
  public static final int OTYPE_UNKNOWN;
  public static final int OTYPE_BOOL;
  public static final int OTYPE_INT;
  public static final int OTYPE_INTBOOL;
  public static final int OTYPE_ENUM;
  public static final int OTYPE_ENUMBOOL;
  public static final int OTYPE_STR;
  public static final int OTYPE_STRHIDE;
  public static final int OTYPE_MAX;
  public final int optType;
  public final java.lang.String optKey;
  public final int minVersion;
  public final int lastModVersion;
  public final boolean dropIfUnused;
  public final boolean defaultBoolValue;
  public final int defaultIntValue;
  public final int minIntValue;
  public final int maxIntValue;
  public final java.lang.String optDesc;
  public final java.lang.String[] enumVals;
  public static java.util.Hashtable initAllOptions();
  public soc.game.SOCGameOption(java.lang.String) throws java.lang.IllegalArgumentException;
  public soc.game.SOCGameOption(java.lang.String, int, int, boolean, boolean, java.lang.String) throws java.lang.IllegalArgumentException;
  public soc.game.SOCGameOption(java.lang.String, int, int, int, int, int, java.lang.String) throws java.lang.IllegalArgumentException;
  public soc.game.SOCGameOption(java.lang.String, int, int, boolean, int, int, int, boolean, java.lang.String) throws java.lang.IllegalArgumentException;
  public soc.game.SOCGameOption(java.lang.String, int, int, int, java.lang.String[], java.lang.String) throws java.lang.IllegalArgumentException;
  public soc.game.SOCGameOption(java.lang.String, int, int, boolean, int, java.lang.String[], boolean, java.lang.String) throws java.lang.IllegalArgumentException;
  public soc.game.SOCGameOption(java.lang.String, int, int, int, boolean, boolean, java.lang.String) throws java.lang.IllegalArgumentException;
  protected soc.game.SOCGameOption(int, java.lang.String, int, int, boolean, int, int, int, boolean, java.lang.String[], java.lang.String) throws java.lang.IllegalArgumentException;
  protected soc.game.SOCGameOption(soc.game.SOCGameOption, java.lang.String[]) throws java.lang.NullPointerException;
  protected soc.game.SOCGameOption(soc.game.SOCGameOption, int);
  public boolean getBoolValue();
  public void setBoolValue(boolean);
  public int getIntValue();
  public void setIntValue(int);
  public java.lang.String getStringValue();
  public void setStringValue(java.lang.String) throws java.lang.IllegalArgumentException;
  public int getMinVersion();
  public static final int getMaxEnumValueForVersion(java.lang.String, int);
  public static final int getMaxIntValueForVersion(java.lang.String, int);
  public static java.util.Hashtable getAllKnownOptions();
  public static boolean addKnownOption(soc.game.SOCGameOption);
  public static void setKnownOptionCurrentValue(soc.game.SOCGameOption) throws java.lang.IllegalArgumentException;
  public static java.util.Hashtable cloneOptions(java.util.Hashtable);
  public static soc.game.SOCGameOption getOption(java.lang.String);
  public static java.util.Vector findUnknowns(java.util.Hashtable);
  public static java.lang.String packKnownOptionsToString(boolean);
  public static java.lang.String packOptionsToString(java.util.Hashtable, boolean) throws java.lang.ClassCastException;
  public void packValue(java.lang.StringBuffer);
  public static java.util.Hashtable parseOptionsToHash(java.lang.String);
  public static soc.game.SOCGameOption parseOptionNameValue(java.lang.String, boolean);
  public static int optionsMinimumVersion(java.util.Hashtable) throws java.lang.ClassCastException;
  public static java.util.Vector optionsNewerThanVersion(int, boolean, boolean, java.util.Hashtable);
  public static soc.game.SOCGameOption trimEnumForVersion(soc.game.SOCGameOption, int);
  public static boolean adjustOptionsToKnown(java.util.Hashtable, java.util.Hashtable) throws java.lang.IllegalArgumentException;
  public static java.lang.String optionTypeName(int);
  public static final boolean isAlphanumericUpcaseAscii(java.lang.String);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
  static {};
}
Compiled from "SOCGameOptionVersionException.java"
public class soc.game.SOCGameOptionVersionException extends java.lang.IllegalArgumentException {
  public final int gameOptsVersion;
  public final int cliVersion;
  public java.util.Vector problemOptionsTooNew;
  public soc.game.SOCGameOptionVersionException(int, int, java.util.Vector);
  public java.lang.String problemOptionsList();
}
Compiled from "SOCLRPathData.java"
public class soc.game.SOCLRPathData {
  public soc.game.SOCLRPathData(int, int, int, java.util.Vector);
  public int getBeginning();
  public int getEnd();
  public java.util.Vector getNodePairs();
  public int getLength();
  public java.lang.String toString();
}
Compiled from "SOCMoveRobberResult.java"
public class soc.game.SOCMoveRobberResult {
  java.util.Vector victims;
  int loot;
  public soc.game.SOCMoveRobberResult();
  public void setVictims(java.util.Vector);
  public java.util.Vector getVictims();
  public void setLoot(int);
  public int getLoot();
}
Compiled from "SOCOldLRStats.java"
public class soc.game.SOCOldLRStats {
  int[] lrLengths;
  soc.game.SOCPlayer playerWithLR;
  public soc.game.SOCOldLRStats(soc.game.SOCGame);
  public void restoreOldStats(soc.game.SOCGame);
}
Compiled from "SOCPlayer.java"
public class soc.game.SOCPlayer implements soc.game.SOCDevCardConstants,java.io.Serializable,java.lang.Cloneable {
  protected int lastSettlementCoord;
  protected int lastRoadCoord;
  double totalExpectedResources;
  static final double[] PROB;
  public soc.game.SOCPlayer(soc.game.SOCPlayer);
  public soc.game.SOCPlayer(int, soc.game.SOCGame);
  public soc.game.SOCPlayer(soc.game.SOCPlayer, soc.game.SOCGame);
  public void clearPotentialSettlements();
  public void setName(java.lang.String) throws java.lang.IllegalArgumentException;
  public java.lang.String getName();
  public int getPlayerNumber();
  public soc.game.SOCGame getGame();
  public boolean hasPlayedDevCard();
  public void setPlayedDevCard(boolean);
  public boolean hasAskedBoardReset();
  public void setAskedBoardReset(boolean);
  public boolean hasAskedSpecialBuild();
  public void setAskedSpecialBuild(boolean);
  public boolean hasSpecialBuilt();
  public void setSpecialBuilt(boolean);
  public void setNeedToDiscard(boolean);
  public boolean getNeedToDiscard();
  public void setRobotFlag(boolean, boolean);
  public boolean isRobot();
  public boolean isBuiltInRobot();
  public void setFaceId(int);
  public int getFaceId();
  public soc.game.SOCPlayerNumbers getNumbers();
  public int getNumPieces(int);
  public void setNumPieces(int, int);
  public java.util.Vector getPieces();
  public java.util.Vector getRoads();
  public java.util.Vector getSettlements();
  public java.util.Vector getCities();
  public int getLastSettlementCoord();
  public int getLastRoadCoord();
  public int getLongestRoadLength();
  public java.util.Vector getLRPaths();
  public void setLRPaths(java.util.Vector);
  public void setLongestRoadLength(int);
  public soc.game.SOCResourceSet getResources();
  public int[] getResourceRollStats();
  public void addRolledResources(soc.game.SOCResourceSet);
  public soc.game.SOCDevCardSet getDevCards();
  public boolean hasUnplayedDevCards();
  public int getNumKnights();
  public void setNumKnights(int);
  public void incrementNumKnights();
  public boolean hasLongestRoad();
  public boolean hasLargestArmy();
  public int getPublicVP();
  public int getTotalVP();
  public void forceFinalVP(int);
  public java.util.Vector getRoadNodes();
  public soc.game.SOCTradeOffer getCurrentOffer();
  public void setCurrentOffer(soc.game.SOCTradeOffer);
  public boolean isConnectedByRoad(int, int);
  public void putPiece(soc.game.SOCPlayingPiece);
  public void undoPutPiece(soc.game.SOCPlayingPiece);
  protected void undoPutPieceAuxSettlement(int);
  public void removePiece(soc.game.SOCPlayingPiece);
  public void updatePotentials(soc.game.SOCPlayingPiece);
  public void setPotentialSettlements(java.util.Vector);
  public boolean isPotentialSettlement(int);
  public boolean[] getPotentialSettlements();
  public int numPotentialSettlements();
  public void clearPotentialSettlement(int);
  public boolean isPotentialCity(int);
  public void clearPotentialCity(int);
  public boolean[] getPotentialCities();
  public boolean[] getPotentialRoads();
  public int numPotentialRoads();
  public boolean isPotentialRoad(int);
  public void clearPotentialRoad(int);
  public boolean isLegalRoad(int);
  public boolean hasPotentialRoad();
  public boolean hasPotentialSettlement();
  public boolean hasPotentialCity();
  public int calcLongestRoad2();
  public void setPortFlag(int, boolean);
  public boolean getPortFlag(int);
  public boolean[] getPortFlags();
  public soc.game.SOCPlayer copy();
  public double[] expectedNumResources();
  public void destroyPlayer();
  public java.lang.String getStats();
  static {};
}
Compiled from "SOCPlayerNumbers.java"
public class soc.game.SOCPlayerNumbers implements java.io.Serializable {
  public soc.game.SOCPlayerNumbers(soc.game.SOCPlayerNumbers);
  public soc.game.SOCPlayerNumbers(int) throws java.lang.IllegalArgumentException;
  public void clear();
  public void updateNumbers(soc.game.SOCPlayingPiece, soc.game.SOCBoard);
  public void updateNumbers(int, soc.game.SOCBoard);
  public java.util.Vector getResourcesForNumber(int);
  public java.util.Vector getNumbersForResource(int);
  public java.util.Vector getNumberResourcePairsForHex(int);
  public java.util.Vector getNumbersForResource(int, int);
  public java.util.Vector getResourcesForNumber(int, int);
  public void addNumberForResource(int, int, int);
  public void undoUpdateNumbers(soc.game.SOCPlayingPiece, soc.game.SOCBoard);
  public void undoUpdateNumbers(int, soc.game.SOCBoard);
  public void undoAddNumberForResource(int, int, int);
  public boolean hasNumber(int);
  public java.lang.String toString();
}
Compiled from "SOCPlayingPiece.java"
public abstract class soc.game.SOCPlayingPiece implements java.io.Serializable,java.lang.Cloneable {
  public static final int ROAD;
  public static final int SETTLEMENT;
  public static final int CITY;
  public static final int MIN;
  public static final int MAXPLUSONE;
  protected int pieceType;
  protected soc.game.SOCPlayer player;
  protected int coord;
  protected soc.game.SOCBoard board;
  protected soc.game.SOCPlayingPiece(int, soc.game.SOCPlayer, int, soc.game.SOCBoard) throws java.lang.IllegalArgumentException;
  public java.util.Vector getAdjacentEdges();
  public int getType();
  public soc.game.SOCPlayer getPlayer();
  public int getCoordinates();
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public static soc.game.SOCResourceSet getResourcesToBuild(int) throws java.lang.IllegalArgumentException;
}
Compiled from "SOCResourceConstants.java"
public class soc.game.SOCResourceConstants {
  public static final int CLAY;
  public static final int ORE;
  public static final int SHEEP;
  public static final int WHEAT;
  public static final int WOOD;
  public static final int UNKNOWN;
  public static final int MIN;
  public static final int MAXPLUSONE;
  public soc.game.SOCResourceConstants();
  public static java.lang.String resName(int);
  public static java.lang.String aResName(int);
}
Compiled from "SOCResourceSet.java"
public class soc.game.SOCResourceSet implements java.io.Serializable,java.lang.Cloneable {
  public static final soc.game.SOCResourceSet EMPTY_SET;
  public soc.game.SOCResourceSet(soc.game.SOCResourceSet);
  public soc.game.SOCResourceSet();
  public soc.game.SOCResourceSet(int, int, int, int, int, int);
  public soc.game.SOCResourceSet(int[]);
  public void clear();
  public int getAmount(int);
  public int getTotal();
  public void setAmount(int, int);
  public void add(int, int);
  public void subtract(int, int);
  public void times(int);
  public void add(soc.game.SOCResourceSet);
  public void subtract(soc.game.SOCResourceSet);
  public void convertToUnknown();
  public static boolean gte(soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public static boolean lte(soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public java.lang.String toString();
  public java.lang.String toShortString();
  public java.lang.String toFriendlyString();
  public boolean toFriendlyString(java.lang.StringBuffer);
  public boolean contains(soc.game.SOCResourceSet);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public soc.game.SOCResourceSet copy();
  public void setAmounts(soc.game.SOCResourceSet);
  static {};
}
Compiled from "SOCRoad.java"
public class soc.game.SOCRoad extends soc.game.SOCPlayingPiece {
  public soc.game.SOCRoad(soc.game.SOCPlayer, int, soc.game.SOCBoard) throws java.lang.IllegalArgumentException;
  public int[] getAdjacentNodes();
}
Compiled from "SOCSettlement.java"
public class soc.game.SOCSettlement extends soc.game.SOCPlayingPiece {
  public soc.game.SOCSettlement(soc.game.SOCPlayer, int, soc.game.SOCBoard) throws java.lang.IllegalArgumentException;
  public java.util.Vector getAdjacentHexes();
}
Compiled from "SOCTradeOffer.java"
public class soc.game.SOCTradeOffer implements java.io.Serializable,java.lang.Cloneable {
  java.lang.String game;
  soc.game.SOCResourceSet give;
  soc.game.SOCResourceSet get;
  int from;
  boolean[] to;
  public soc.game.SOCTradeOffer(java.lang.String, int, boolean[], soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public soc.game.SOCTradeOffer(soc.game.SOCTradeOffer);
  public java.lang.String getGame();
  public int getFrom();
  public boolean[] getTo();
  public soc.game.SOCResourceSet getGiveSet();
  public soc.game.SOCResourceSet getGetSet();
  public java.lang.String toString();
}
Compiled from "SOCAcceptOffer.java"
public class soc.message.SOCAcceptOffer extends soc.message.SOCMessage {
  public soc.message.SOCAcceptOffer(java.lang.String, int, int);
  public java.lang.String getGame();
  public int getAcceptingNumber();
  public int getOfferingNumber();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, int);
  public static soc.message.SOCAcceptOffer parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCAdminPing.java"
public class soc.message.SOCAdminPing extends soc.message.SOCMessage {
  public soc.message.SOCAdminPing(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCAdminPing parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCAdminReset.java"
public class soc.message.SOCAdminReset extends soc.message.SOCMessage {
  public soc.message.SOCAdminReset();
  public java.lang.String toCmd();
  public static soc.message.SOCAdminReset parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCBCastTextMsg.java"
public class soc.message.SOCBCastTextMsg extends soc.message.SOCMessage {
  public soc.message.SOCBCastTextMsg(java.lang.String);
  public java.lang.String getText();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCBCastTextMsg parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCBankTrade.java"
public class soc.message.SOCBankTrade extends soc.message.SOCMessage {
  public soc.message.SOCBankTrade(java.lang.String, soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public java.lang.String getGame();
  public soc.game.SOCResourceSet getGiveSet();
  public soc.game.SOCResourceSet getGetSet();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public static soc.message.SOCBankTrade parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCBoardLayout.java"
public class soc.message.SOCBoardLayout extends soc.message.SOCMessage {
  public soc.message.SOCBoardLayout(java.lang.String, int[], int[], int);
  public java.lang.String getGame();
  public int[] getHexLayout();
  public int[] getNumberLayout();
  public int getRobberHex();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int[], int[], int);
  public static soc.message.SOCBoardLayout parseDataStr(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "SOCBoardLayout2.java"
public class soc.message.SOCBoardLayout2 extends soc.message.SOCMessage {
  public static final int VERSION_FOR_BOARDLAYOUT2;
  public soc.message.SOCBoardLayout2(java.lang.String, int, java.util.Hashtable);
  public soc.message.SOCBoardLayout2(java.lang.String, int, int[], int[], int[], int);
  public java.lang.String getGame();
  public int getBoardEncodingFormat();
  public int[] getIntArrayPart(java.lang.String);
  public int getIntPart(java.lang.String);
  public java.lang.String getStringPart(java.lang.String);
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, java.util.Hashtable);
  public static java.lang.String toCmd(java.lang.String, int, int[], int[], int[], int);
  public static soc.message.SOCBoardLayout2 parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCBuildRequest.java"
public class soc.message.SOCBuildRequest extends soc.message.SOCMessage {
  public soc.message.SOCBuildRequest(java.lang.String, int);
  public java.lang.String getGame();
  public int getPieceType();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCBuildRequest parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCBuyCardRequest.java"
public class soc.message.SOCBuyCardRequest extends soc.message.SOCMessage {
  public soc.message.SOCBuyCardRequest(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCBuyCardRequest parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCCancelBuildRequest.java"
public class soc.message.SOCCancelBuildRequest extends soc.message.SOCMessage {
  public soc.message.SOCCancelBuildRequest(java.lang.String, int);
  public java.lang.String getGame();
  public int getPieceType();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCCancelBuildRequest parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCChangeFace.java"
public class soc.message.SOCChangeFace extends soc.message.SOCMessage {
  public soc.message.SOCChangeFace(java.lang.String, int, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public int getFaceId();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, int);
  public static soc.message.SOCChangeFace parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCChannels.java"
public class soc.message.SOCChannels extends soc.message.SOCMessage {
  public soc.message.SOCChannels(java.util.Vector);
  public java.util.Vector getChannels();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.util.Vector);
  public static soc.message.SOCChannels parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCChoosePlayer.java"
public class soc.message.SOCChoosePlayer extends soc.message.SOCMessage {
  public soc.message.SOCChoosePlayer(java.lang.String, int);
  public java.lang.String getGame();
  public int getChoice();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCChoosePlayer parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCChoosePlayerRequest.java"
public class soc.message.SOCChoosePlayerRequest extends soc.message.SOCMessage {
  public soc.message.SOCChoosePlayerRequest(java.lang.String, boolean[]);
  public java.lang.String getGame();
  public boolean[] getChoices();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, boolean[]);
  public static soc.message.SOCChoosePlayerRequest parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCClearOffer.java"
public class soc.message.SOCClearOffer extends soc.message.SOCMessage {
  public static final int VERSION_FOR_CLEAR_ALL;
  public soc.message.SOCClearOffer(java.lang.String, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCClearOffer parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCClearTradeMsg.java"
public class soc.message.SOCClearTradeMsg extends soc.message.SOCMessage {
  public soc.message.SOCClearTradeMsg(java.lang.String, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCClearTradeMsg parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCCreateAccount.java"
public class soc.message.SOCCreateAccount extends soc.message.SOCMessage {
  public soc.message.SOCCreateAccount(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getNickname();
  public java.lang.String getPassword();
  public java.lang.String getHost();
  public java.lang.String getEmail();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public static soc.message.SOCCreateAccount parseDataStr(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "SOCDeleteChannel.java"
public class soc.message.SOCDeleteChannel extends soc.message.SOCMessage {
  public soc.message.SOCDeleteChannel(java.lang.String);
  public java.lang.String getChannel();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCDeleteChannel parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCDeleteGame.java"
public class soc.message.SOCDeleteGame extends soc.message.SOCMessage {
  public soc.message.SOCDeleteGame(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCDeleteGame parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCDevCard.java"
public class soc.message.SOCDevCard extends soc.message.SOCMessage {
  public static final int DRAW;
  public static final int PLAY;
  public static final int ADDNEW;
  public static final int ADDOLD;
  public soc.message.SOCDevCard(java.lang.String, int, int, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public int getAction();
  public int getCardType();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, int, int);
  public static soc.message.SOCDevCard parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCDevCardCount.java"
public class soc.message.SOCDevCardCount extends soc.message.SOCMessage {
  public soc.message.SOCDevCardCount(java.lang.String, int);
  public java.lang.String getGame();
  public int getNumDevCards();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCDevCardCount parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCDiceResult.java"
public class soc.message.SOCDiceResult extends soc.message.SOCMessageTemplate1i {
  public soc.message.SOCDiceResult(java.lang.String, int);
  public int getResult();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCDiceResult parseDataStr(java.lang.String);
}
Compiled from "SOCDiscard.java"
public class soc.message.SOCDiscard extends soc.message.SOCMessage {
  public soc.message.SOCDiscard(java.lang.String, int, int, int, int, int, int);
  public soc.message.SOCDiscard(java.lang.String, int, soc.game.SOCResourceSet);
  public java.lang.String getGame();
  public soc.game.SOCResourceSet getResources();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, soc.game.SOCResourceSet);
  public static java.lang.String toCmd(java.lang.String, int, int, int, int, int, int);
  public static soc.message.SOCDiscard parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCDiscardRequest.java"
public class soc.message.SOCDiscardRequest extends soc.message.SOCMessage {
  public soc.message.SOCDiscardRequest(java.lang.String, int);
  public java.lang.String getGame();
  public int getNumberOfDiscards();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCDiscardRequest parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCDiscoveryPick.java"
public class soc.message.SOCDiscoveryPick extends soc.message.SOCMessage {
  public soc.message.SOCDiscoveryPick(java.lang.String, soc.game.SOCResourceSet);
  public java.lang.String getGame();
  public soc.game.SOCResourceSet getResources();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, soc.game.SOCResourceSet);
  public static soc.message.SOCDiscoveryPick parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCEndTurn.java"
public class soc.message.SOCEndTurn extends soc.message.SOCMessage {
  public soc.message.SOCEndTurn(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCEndTurn parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCFirstPlayer.java"
public class soc.message.SOCFirstPlayer extends soc.message.SOCMessage {
  public soc.message.SOCFirstPlayer(java.lang.String, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCFirstPlayer parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCGameMembers.java"
public class soc.message.SOCGameMembers extends soc.message.SOCMessage {
  public soc.message.SOCGameMembers(java.lang.String, java.util.Vector);
  public java.util.Vector getMembers();
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.util.Vector);
  public static soc.message.SOCGameMembers parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCGameOptionGetDefaults.java"
public class soc.message.SOCGameOptionGetDefaults extends soc.message.SOCMessage {
  public soc.message.SOCGameOptionGetDefaults(java.lang.String);
  public java.lang.String getOpts();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCGameOptionGetDefaults parseDataStr(java.lang.String);
  public int getMinimumVersion();
  public java.lang.String toString();
}
Compiled from "SOCGameOptionGetInfos.java"
public class soc.message.SOCGameOptionGetInfos extends soc.message.SOCMessage {
  public soc.message.SOCGameOptionGetInfos(java.util.Vector);
  public int getMinimumVersion();
  public java.util.Vector getOptionKeys();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.util.Enumeration);
  public static soc.message.SOCGameOptionGetInfos parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCGameOptionInfo.java"
public class soc.message.SOCGameOptionInfo extends soc.message.SOCMessageTemplateMs {
  public static final soc.message.SOCGameOptionInfo OPTINFO_NO_MORE_OPTS;
  protected static final java.lang.String EMPTYSTR;
  protected soc.game.SOCGameOption opt;
  public soc.message.SOCGameOptionInfo(soc.game.SOCGameOption);
  protected soc.message.SOCGameOptionInfo(java.lang.String[]) throws java.lang.IllegalArgumentException, java.lang.NumberFormatException;
  public int getMinimumVersion();
  public java.lang.String getOptionNameKey();
  public soc.game.SOCGameOption getOptionInfo();
  public static soc.message.SOCGameOptionInfo parseDataStr(java.lang.String[]);
  static {};
}
Compiled from "SOCGameState.java"
public class soc.message.SOCGameState extends soc.message.SOCMessage {
  public soc.message.SOCGameState(java.lang.String, int);
  public java.lang.String getGame();
  public int getState();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCGameState parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCGameStats.java"
public class soc.message.SOCGameStats extends soc.message.SOCMessage {
  public soc.message.SOCGameStats(java.lang.String, int[], boolean[]);
  public java.lang.String getGame();
  public int[] getScores();
  public boolean[] getRobotSeats();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int[], boolean[]);
  public static soc.message.SOCGameStats parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCGameTextMsg.java"
public class soc.message.SOCGameTextMsg extends soc.message.SOCMessage {
  public soc.message.SOCGameTextMsg(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getGame();
  public java.lang.String getNickname();
  public java.lang.String getText();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, java.lang.String);
  public static soc.message.SOCGameTextMsg parseDataStr(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "SOCGames.java"
public class soc.message.SOCGames extends soc.message.SOCMessage {
  public static final char MARKER_THIS_GAME_UNJOINABLE;
  public static final int VERSION_FOR_UNJOINABLE;
  public soc.message.SOCGames(java.util.Vector);
  public java.util.Vector getGames();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.util.Vector);
  public static soc.message.SOCGames parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCGamesWithOptions.java"
public class soc.message.SOCGamesWithOptions extends soc.message.SOCMessageTemplateMs {
  protected soc.message.SOCGamesWithOptions(java.lang.String[]);
  public soc.util.SOCGameList getGameList();
  public int getMinimumVersion();
  public static soc.message.SOCGamesWithOptions parseDataStr(java.lang.String[]);
  public static java.lang.String toCmd(java.util.Vector);
}
Compiled from "SOCImARobot.java"
public class soc.message.SOCImARobot extends soc.message.SOCMessage {
  public static final java.lang.String RBCLASS_BUILTIN;
  public soc.message.SOCImARobot(java.lang.String, java.lang.String);
  public java.lang.String getNickname();
  public java.lang.String getRBClass();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String);
  public static soc.message.SOCImARobot parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCJoin.java"
public class soc.message.SOCJoin extends soc.message.SOCMessage {
  public soc.message.SOCJoin(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getNickname();
  public java.lang.String getPassword();
  public java.lang.String getHost();
  public java.lang.String getChannel();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public static soc.message.SOCJoin parseDataStr(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "SOCJoinAuth.java"
public class soc.message.SOCJoinAuth extends soc.message.SOCMessage {
  public soc.message.SOCJoinAuth(java.lang.String, java.lang.String);
  public java.lang.String getNickname();
  public java.lang.String getChannel();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String);
  public static soc.message.SOCJoinAuth parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCJoinGame.java"
public class soc.message.SOCJoinGame extends soc.message.SOCMessageTemplateJoinGame {
  public soc.message.SOCJoinGame(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public static soc.message.SOCJoinGame parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCJoinGameAuth.java"
public class soc.message.SOCJoinGameAuth extends soc.message.SOCMessage {
  public soc.message.SOCJoinGameAuth(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCJoinGameAuth parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCJoinGameRequest.java"
public class soc.message.SOCJoinGameRequest extends soc.message.SOCMessage {
  public soc.message.SOCJoinGameRequest(java.lang.String, int, java.util.Hashtable);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.util.Hashtable getOptions();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, java.util.Hashtable);
  public static soc.message.SOCJoinGameRequest parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCLargestArmy.java"
public class soc.message.SOCLargestArmy extends soc.message.SOCMessage {
  public soc.message.SOCLargestArmy(java.lang.String, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCLargestArmy parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCLastSettlement.java"
public class soc.message.SOCLastSettlement extends soc.message.SOCMessage {
  public soc.message.SOCLastSettlement(java.lang.String, int, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public int getCoordinates();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, int);
  public static soc.message.SOCLastSettlement parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCLeave.java"
public class soc.message.SOCLeave extends soc.message.SOCMessage {
  public soc.message.SOCLeave(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getNickname();
  public java.lang.String getHost();
  public java.lang.String getChannel();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, java.lang.String);
  public static soc.message.SOCLeave parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCLeaveAll.java"
public class soc.message.SOCLeaveAll extends soc.message.SOCMessage {
  public soc.message.SOCLeaveAll();
  public java.lang.String toCmd();
  public static soc.message.SOCLeaveAll parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCLeaveGame.java"
public class soc.message.SOCLeaveGame extends soc.message.SOCMessage {
  public soc.message.SOCLeaveGame(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getNickname();
  public java.lang.String getHost();
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, java.lang.String);
  public static soc.message.SOCLeaveGame parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCLongestRoad.java"
public class soc.message.SOCLongestRoad extends soc.message.SOCMessage {
  public soc.message.SOCLongestRoad(java.lang.String, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCLongestRoad parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCMakeOffer.java"
public class soc.message.SOCMakeOffer extends soc.message.SOCMessage {
  public soc.message.SOCMakeOffer(java.lang.String, soc.game.SOCTradeOffer);
  public java.lang.String getGame();
  public soc.game.SOCTradeOffer getOffer();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, soc.game.SOCTradeOffer);
  public static soc.message.SOCMakeOffer parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCMembers.java"
public class soc.message.SOCMembers extends soc.message.SOCMessage {
  public soc.message.SOCMembers(java.lang.String, java.util.Vector);
  public java.util.Vector getMembers();
  public java.lang.String getChannel();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.util.Vector);
  public static soc.message.SOCMembers parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCMessage.java"
public abstract class soc.message.SOCMessage implements java.io.Serializable,java.lang.Cloneable {
  public static final int NULLMESSAGE;
  public static final int NEWCHANNEL;
  public static final int MEMBERS;
  public static final int CHANNELS;
  public static final int JOIN;
  public static final int TEXTMSG;
  public static final int LEAVE;
  public static final int DELETECHANNEL;
  public static final int LEAVEALL;
  public static final int PUTPIECE;
  public static final int GAMETEXTMSG;
  public static final int LEAVEGAME;
  public static final int SITDOWN;
  public static final int JOINGAME;
  public static final int BOARDLAYOUT;
  public static final int DELETEGAME;
  public static final int NEWGAME;
  public static final int GAMEMEMBERS;
  public static final int STARTGAME;
  public static final int GAMES;
  public static final int JOINAUTH;
  public static final int JOINGAMEAUTH;
  public static final int IMAROBOT;
  public static final int JOINGAMEREQUEST;
  public static final int PLAYERELEMENT;
  public static final int GAMESTATE;
  public static final int TURN;
  public static final int SETUPDONE;
  public static final int DICERESULT;
  public static final int DISCARDREQUEST;
  public static final int ROLLDICEREQUEST;
  public static final int ROLLDICE;
  public static final int ENDTURN;
  public static final int DISCARD;
  public static final int MOVEROBBER;
  public static final int CHOOSEPLAYER;
  public static final int CHOOSEPLAYERREQUEST;
  public static final int REJECTOFFER;
  public static final int CLEAROFFER;
  public static final int ACCEPTOFFER;
  public static final int BANKTRADE;
  public static final int MAKEOFFER;
  public static final int CLEARTRADEMSG;
  public static final int BUILDREQUEST;
  public static final int CANCELBUILDREQUEST;
  public static final int BUYCARDREQUEST;
  public static final int DEVCARD;
  public static final int DEVCARDCOUNT;
  public static final int SETPLAYEDDEVCARD;
  public static final int PLAYDEVCARDREQUEST;
  public static final int DISCOVERYPICK;
  public static final int MONOPOLYPICK;
  public static final int FIRSTPLAYER;
  public static final int SETTURN;
  public static final int ROBOTDISMISS;
  public static final int POTENTIALSETTLEMENTS;
  public static final int CHANGEFACE;
  public static final int REJECTCONNECTION;
  public static final int LASTSETTLEMENT;
  public static final int GAMESTATS;
  public static final int BCASTTEXTMSG;
  public static final int RESOURCECOUNT;
  public static final int ADMINPING;
  public static final int ADMINRESET;
  public static final int LONGESTROAD;
  public static final int LARGESTARMY;
  public static final int SETSEATLOCK;
  public static final int STATUSMESSAGE;
  public static final int CREATEACCOUNT;
  public static final int UPDATEROBOTPARAMS;
  public static final int ROLLDICEPROMPT;
  public static final int RESETBOARDREQUEST;
  public static final int RESETBOARDAUTH;
  public static final int RESETBOARDVOTEREQUEST;
  public static final int RESETBOARDVOTE;
  public static final int RESETBOARDREJECT;
  public static final int NEWGAMEWITHOPTIONSREQUEST;
  public static final int NEWGAMEWITHOPTIONS;
  public static final int GAMEOPTIONGETDEFAULTS;
  public static final int GAMEOPTIONGETINFOS;
  public static final int GAMEOPTIONINFO;
  public static final int GAMESWITHOPTIONS;
  public static final int BOARDLAYOUT2;
  public static final int PLAYERSTATS;
  public static final int PLAYERELEMENTS;
  public static final int VERSION;
  public static final int SERVERPING;
  public static final java.lang.String sep;
  public static final java.lang.String sep2;
  public static final char sep_char;
  public static final char sep2_char;
  protected int messageType;
  public soc.message.SOCMessage();
  public int getType();
  public int getMinimumVersion();
  public int getMaximumVersion();
  public abstract java.lang.String toCmd();
  public abstract java.lang.String toString();
  protected static void arrayIntoStringBuf(int[], java.lang.StringBuffer) throws java.lang.NullPointerException;
  protected static void enumIntoStringBuf(java.util.Enumeration, java.lang.StringBuffer) throws java.lang.ClassCastException, java.lang.NullPointerException;
  public java.lang.String getClassNameShort();
  public static final boolean isSingleLineAndSafe(java.lang.String);
  public static java.lang.String[] toSingleElemArray(java.lang.String);
  public static soc.message.SOCMessage toMsg(java.lang.String);
}
Compiled from "SOCMessageMulti.java"
public abstract class soc.message.SOCMessageMulti extends soc.message.SOCMessage {
  public soc.message.SOCMessageMulti();
}
Compiled from "SOCMessageTemplate0.java"
public abstract class soc.message.SOCMessageTemplate0 extends soc.message.SOCMessage {
  protected java.lang.String game;
  protected soc.message.SOCMessageTemplate0(int, java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCMessageTemplate1i.java"
public abstract class soc.message.SOCMessageTemplate1i extends soc.message.SOCMessage {
  protected java.lang.String game;
  protected int p1;
  protected soc.message.SOCMessageTemplate1i(int, java.lang.String, int);
  public java.lang.String getGame();
  public int getParam();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String, int);
  public java.lang.String toString();
}
Compiled from "SOCMessageTemplate1s.java"
public abstract class soc.message.SOCMessageTemplate1s extends soc.message.SOCMessage {
  protected java.lang.String game;
  protected java.lang.String p1;
  protected soc.message.SOCMessageTemplate1s(int, java.lang.String, java.lang.String);
  public java.lang.String getGame();
  public java.lang.String getParam();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String, java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCMessageTemplate2i.java"
public abstract class soc.message.SOCMessageTemplate2i extends soc.message.SOCMessage {
  protected java.lang.String game;
  protected int p1;
  protected int p2;
  protected soc.message.SOCMessageTemplate2i(int, java.lang.String, int, int);
  public java.lang.String getGame();
  public int getParam1();
  public int getParam2();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String, int, int);
  public java.lang.String toString();
}
Compiled from "SOCMessageTemplate2s.java"
public abstract class soc.message.SOCMessageTemplate2s extends soc.message.SOCMessage {
  protected java.lang.String game;
  protected java.lang.String p1;
  protected java.lang.String p2;
  protected soc.message.SOCMessageTemplate2s(int, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getGame();
  public java.lang.String getParam1();
  public java.lang.String getParam2();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCMessageTemplate3s.java"
public abstract class soc.message.SOCMessageTemplate3s extends soc.message.SOCMessage {
  protected java.lang.String game;
  protected java.lang.String p1;
  protected java.lang.String p2;
  protected java.lang.String p3;
  protected soc.message.SOCMessageTemplate3s(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getGame();
  public java.lang.String getParam1();
  public java.lang.String getParam2();
  public java.lang.String getParam3();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCMessageTemplateJoinGame.java"
public abstract class soc.message.SOCMessageTemplateJoinGame extends soc.message.SOCMessage {
  protected static final java.lang.String NULLPASS;
  protected java.lang.String nickname;
  protected java.lang.String password;
  protected java.lang.String game;
  protected java.lang.String host;
  public soc.message.SOCMessageTemplateJoinGame(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getNickname();
  public java.lang.String getPassword();
  public java.lang.String getHost();
  public java.lang.String getGame();
  public java.lang.String toString(java.lang.String, java.lang.String);
}
Compiled from "SOCMessageTemplateMi.java"
public abstract class soc.message.SOCMessageTemplateMi extends soc.message.SOCMessageMulti {
  protected java.lang.String game;
  protected int[] pa;
  protected soc.message.SOCMessageTemplateMi(int, java.lang.String, int[]);
  public java.lang.String getGame();
  public int[] getParams();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String, int[]);
  public java.lang.String toString();
}
Compiled from "SOCMessageTemplateMs.java"
public abstract class soc.message.SOCMessageTemplateMs extends soc.message.SOCMessageMulti {
  protected java.lang.String game;
  protected java.lang.String[] pa;
  protected soc.message.SOCMessageTemplateMs(int, java.lang.String, java.lang.String[]);
  public java.lang.String getGame();
  public java.lang.String[] getParams();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String, java.lang.String[]);
  public java.lang.String toString();
}
Compiled from "SOCMonopolyPick.java"
public class soc.message.SOCMonopolyPick extends soc.message.SOCMessage {
  public soc.message.SOCMonopolyPick(java.lang.String, int);
  public java.lang.String getGame();
  public int getResource();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCMonopolyPick parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCMoveRobber.java"
public class soc.message.SOCMoveRobber extends soc.message.SOCMessage {
  public soc.message.SOCMoveRobber(java.lang.String, int, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public int getCoordinates();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, int);
  public static soc.message.SOCMoveRobber parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCNewChannel.java"
public class soc.message.SOCNewChannel extends soc.message.SOCMessage {
  public soc.message.SOCNewChannel(java.lang.String);
  public java.lang.String getChannel();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCNewChannel parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCNewGame.java"
public class soc.message.SOCNewGame extends soc.message.SOCMessage {
  public soc.message.SOCNewGame(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCNewGame parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCNewGameWithOptions.java"
public class soc.message.SOCNewGameWithOptions extends soc.message.SOCMessageTemplate2s {
  public static final int VERSION_FOR_NEWGAMEWITHOPTIONS;
  public soc.message.SOCNewGameWithOptions(java.lang.String, java.lang.String, int);
  public soc.message.SOCNewGameWithOptions(java.lang.String, java.util.Hashtable, int);
  public java.lang.String getOptionsString();
  public int getMinVersion();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, int);
  public static java.lang.String toCmd(java.lang.String, java.util.Hashtable, int);
  public static java.lang.String toCmd(soc.game.SOCGame);
  public static soc.message.SOCNewGameWithOptions parseDataStr(java.lang.String);
  public int getMinimumVersion();
}
Compiled from "SOCNewGameWithOptionsRequest.java"
public class soc.message.SOCNewGameWithOptionsRequest extends soc.message.SOCMessageTemplateJoinGame {
  public soc.message.SOCNewGameWithOptionsRequest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Hashtable);
  public soc.message.SOCNewGameWithOptionsRequest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.util.Hashtable getOptions();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String toCmd(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Hashtable);
  public static soc.message.SOCNewGameWithOptionsRequest parseDataStr(java.lang.String);
  public int getMinimumVersion();
  public java.lang.String toString();
}
Compiled from "SOCPlayDevCardRequest.java"
public class soc.message.SOCPlayDevCardRequest extends soc.message.SOCMessage {
  public soc.message.SOCPlayDevCardRequest(java.lang.String, int);
  public java.lang.String getGame();
  public int getDevCard();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCPlayDevCardRequest parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCPlayerElement.java"
public class soc.message.SOCPlayerElement extends soc.message.SOCMessage {
  public static final int CLAY;
  public static final int ORE;
  public static final int SHEEP;
  public static final int WHEAT;
  public static final int WOOD;
  public static final int UNKNOWN;
  public static final int ROADS;
  public static final int SETTLEMENTS;
  public static final int CITIES;
  public static final int NUMKNIGHTS;
  public static final int ASK_SPECIAL_BUILD;
  public static final int SET;
  public static final int GAIN;
  public static final int LOSE;
  public soc.message.SOCPlayerElement(java.lang.String, int, int, int, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public int getAction();
  public int getElementType();
  public int getValue();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, int, int, int);
  public static soc.message.SOCPlayerElement parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCPlayerElements.java"
public class soc.message.SOCPlayerElements extends soc.message.SOCMessageTemplateMi {
  public static final int VERSION;
  public static final int[] NAMED_RESOURCES;
  public soc.message.SOCPlayerElements(java.lang.String, int, int, int[], int[]) throws java.lang.NullPointerException;
  public int getMinimumVersion();
  public int getPlayerNumber();
  public int getAction();
  public int[] getElementTypes();
  public int[] getValues();
  public static soc.message.SOCPlayerElements parseDataStr(java.lang.String[]);
  static {};
}
Compiled from "SOCPlayerStats.java"
public class soc.message.SOCPlayerStats extends soc.message.SOCMessageTemplateMi {
  public static final int STYPE_MIN;
  public static final int STYPE_RES_ROLL;
  public static final int STYPE_MAX;
  public static final int VERSION_FOR_RES_ROLL;
  public soc.message.SOCPlayerStats(soc.game.SOCPlayer, int) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
  protected soc.message.SOCPlayerStats(java.lang.String, int[]) throws java.lang.IllegalArgumentException;
  public int getMinimumVersion();
  public int getStatType();
  public static soc.message.SOCPlayerStats parseDataStr(java.lang.String[]);
}
Compiled from "SOCPotentialSettlements.java"
public class soc.message.SOCPotentialSettlements extends soc.message.SOCMessage {
  public soc.message.SOCPotentialSettlements(java.lang.String, int, java.util.Vector);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.util.Vector getPotentialSettlements();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, java.util.Vector);
  public static soc.message.SOCPotentialSettlements parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCPutPiece.java"
public class soc.message.SOCPutPiece extends soc.message.SOCMessage {
  public soc.message.SOCPutPiece(java.lang.String, int, int, int);
  public java.lang.String getGame();
  public int getPieceType();
  public int getPlayerNumber();
  public int getCoordinates();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, int, int);
  public static soc.message.SOCPutPiece parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCRejectConnection.java"
public class soc.message.SOCRejectConnection extends soc.message.SOCMessage {
  public soc.message.SOCRejectConnection(java.lang.String);
  public java.lang.String getText();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCRejectConnection parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCRejectOffer.java"
public class soc.message.SOCRejectOffer extends soc.message.SOCMessage {
  public soc.message.SOCRejectOffer(java.lang.String, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCRejectOffer parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCResetBoardAuth.java"
public class soc.message.SOCResetBoardAuth extends soc.message.SOCMessageTemplate2i {
  public soc.message.SOCResetBoardAuth(java.lang.String, int, int);
  public int getRejoinPlayerNumber();
  public int getRequestingPlayerNumber();
  public static soc.message.SOCResetBoardAuth parseDataStr(java.lang.String);
  public int getMinimumVersion();
}
Compiled from "SOCResetBoardReject.java"
public class soc.message.SOCResetBoardReject extends soc.message.SOCMessageTemplate0 {
  public soc.message.SOCResetBoardReject(java.lang.String);
  public static soc.message.SOCResetBoardReject parseDataStr(java.lang.String);
  public int getMinimumVersion();
}
Compiled from "SOCResetBoardRequest.java"
public class soc.message.SOCResetBoardRequest extends soc.message.SOCMessageTemplate0 {
  public soc.message.SOCResetBoardRequest(java.lang.String);
  public static soc.message.SOCResetBoardRequest parseDataStr(java.lang.String);
  public int getMinimumVersion();
}
Compiled from "SOCResetBoardVote.java"
public class soc.message.SOCResetBoardVote extends soc.message.SOCMessageTemplate2i {
  public soc.message.SOCResetBoardVote(java.lang.String, int, boolean);
  public int getPlayerNumber();
  public boolean getPlayerVote();
  public static java.lang.String toCmd(java.lang.String, int, boolean);
  public static soc.message.SOCResetBoardVote parseDataStr(java.lang.String);
  public int getMinimumVersion();
}
Compiled from "SOCResetBoardVoteRequest.java"
public class soc.message.SOCResetBoardVoteRequest extends soc.message.SOCMessageTemplate1i {
  public soc.message.SOCResetBoardVoteRequest(java.lang.String, int);
  public int getRequestingPlayer();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCResetBoardVoteRequest parseDataStr(java.lang.String);
  public int getMinimumVersion();
}
Compiled from "SOCResourceCount.java"
public class soc.message.SOCResourceCount extends soc.message.SOCMessage {
  public soc.message.SOCResourceCount(java.lang.String, int, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public int getCount();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, int);
  public static soc.message.SOCResourceCount parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCRobotDismiss.java"
public class soc.message.SOCRobotDismiss extends soc.message.SOCMessage {
  public soc.message.SOCRobotDismiss(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCRobotDismiss parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCRollDice.java"
public class soc.message.SOCRollDice extends soc.message.SOCMessage {
  public soc.message.SOCRollDice(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCRollDice parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCRollDicePrompt.java"
public class soc.message.SOCRollDicePrompt extends soc.message.SOCMessage {
  public soc.message.SOCRollDicePrompt(java.lang.String, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCRollDicePrompt parseDataStr(java.lang.String);
  public java.lang.String toString();
  public int getMinimumVersion();
}
Compiled from "SOCRollDiceRequest.java"
public class soc.message.SOCRollDiceRequest extends soc.message.SOCMessage {
  public soc.message.SOCRollDiceRequest(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCRollDiceRequest parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCServerPing.java"
public class soc.message.SOCServerPing extends soc.message.SOCMessage {
  int sleepTime;
  public soc.message.SOCServerPing(int);
  public int getSleepTime();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int);
  public static soc.message.SOCServerPing parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCSetPlayedDevCard.java"
public class soc.message.SOCSetPlayedDevCard extends soc.message.SOCMessage {
  public soc.message.SOCSetPlayedDevCard(java.lang.String, int, boolean);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public boolean hasPlayedDevCard();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, boolean);
  public static soc.message.SOCSetPlayedDevCard parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCSetSeatLock.java"
public class soc.message.SOCSetSeatLock extends soc.message.SOCMessage {
  public soc.message.SOCSetSeatLock(java.lang.String, int, boolean);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public boolean getLockState();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int, boolean);
  public static soc.message.SOCSetSeatLock parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCSetTurn.java"
public class soc.message.SOCSetTurn extends soc.message.SOCMessageTemplate1i {
  public soc.message.SOCSetTurn(java.lang.String, int);
  public int getPlayerNumber();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCSetTurn parseDataStr(java.lang.String);
}
Compiled from "SOCSetupDone.java"
public class soc.message.SOCSetupDone extends soc.message.SOCMessage {
  public soc.message.SOCSetupDone(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCSetupDone parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCSitDown.java"
public class soc.message.SOCSitDown extends soc.message.SOCMessage {
  public soc.message.SOCSitDown(java.lang.String, java.lang.String, int, boolean);
  public java.lang.String getGame();
  public java.lang.String getNickname();
  public int getPlayerNumber();
  public boolean isRobot();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, int, boolean);
  public static soc.message.SOCSitDown parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCStartGame.java"
public class soc.message.SOCStartGame extends soc.message.SOCMessage {
  public soc.message.SOCStartGame(java.lang.String);
  public java.lang.String getGame();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String);
  public static soc.message.SOCStartGame parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCStatusMessage.java"
public class soc.message.SOCStatusMessage extends soc.message.SOCMessage {
  public static final int SV_OK;
  public static final int SV_NOT_OK_GENERIC;
  public static final int SV_NAME_NOT_FOUND;
  public static final int SV_PW_WRONG;
  public static final int SV_NAME_IN_USE;
  public static final int SV_CANT_JOIN_GAME_VERSION;
  public static final int SV_PROBLEM_WITH_DB;
  public static final int SV_ACCT_CREATED_OK;
  public static final int SV_ACCT_NOT_CREATED_ERR;
  public static final int SV_NEWGAME_OPTION_UNKNOWN;
  public static final int SV_NEWGAME_OPTION_VALUE_TOONEW;
  public static final int SV_NEWGAME_ALREADY_EXISTS;
  public static final int SV_NEWGAME_NAME_REJECTED;
  public static final int SV_NEWGAME_NAME_TOO_LONG;
  public static final java.lang.String MSG_SV_NEWGAME_ALREADY_EXISTS;
  public static final java.lang.String MSG_SV_NEWGAME_NAME_REJECTED;
  public static final java.lang.String MSG_SV_NEWGAME_NAME_TOO_LONG;
  public soc.message.SOCStatusMessage(java.lang.String);
  public soc.message.SOCStatusMessage(int, java.lang.String);
  public java.lang.String getStatus();
  public int getStatusValue();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String);
  public static java.lang.String toCmd(int, int, java.lang.String);
  public static boolean statusValidAtVersion(int, int);
  public static soc.message.SOCStatusMessage parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCTextMsg.java"
public class soc.message.SOCTextMsg extends soc.message.SOCMessage {
  public soc.message.SOCTextMsg(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getChannel();
  public java.lang.String getNickname();
  public java.lang.String getText();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, java.lang.String, java.lang.String);
  public static soc.message.SOCTextMsg parseDataStr(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "SOCTurn.java"
public class soc.message.SOCTurn extends soc.message.SOCMessage {
  public soc.message.SOCTurn(java.lang.String, int);
  public java.lang.String getGame();
  public int getPlayerNumber();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(java.lang.String, int);
  public static soc.message.SOCTurn parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCUpdateRobotParams.java"
public class soc.message.SOCUpdateRobotParams extends soc.message.SOCMessage {
  public soc.message.SOCUpdateRobotParams(soc.util.SOCRobotParameters);
  public soc.util.SOCRobotParameters getRobotParameters();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(soc.util.SOCRobotParameters);
  public static soc.message.SOCUpdateRobotParams parseDataStr(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SOCVersion.java"
public class soc.message.SOCVersion extends soc.message.SOCMessage {
  public soc.message.SOCVersion(int, java.lang.String, java.lang.String);
  public int getVersionNumber();
  public java.lang.String getVersionString();
  public java.lang.String getBuild();
  public java.lang.String toCmd();
  public static java.lang.String toCmd(int, java.lang.String, java.lang.String);
  public static soc.message.SOCVersion parseDataStr(java.lang.String);
  public java.lang.String toString();
  public int getMinimumVersion();
}
Compiled from "SOCGameStarterRobot.java"
public class soc.ourRobot.SOCGameStarterRobot extends soc.robot.SOCRobotClient {
  public soc.ourRobot.SOCGameStarterRobot(java.lang.String, java.lang.String, java.lang.String);
  public soc.ourRobot.SOCGameStarterRobot();
  public void init();
  public void treat(soc.message.SOCMessage);
  protected void handleJOINGAME(soc.message.SOCJoinGame);
  protected void handleGAMEMEMBERS(soc.message.SOCGameMembers);
}
Compiled from "SOCOurBrain.java"
public class soc.ourRobot.SOCOurBrain extends soc.robot.SOCRobotBrain {
  static final float[] FPROB;
  static final double[] PROB;
  double[] weights;
  public soc.ourRobot.SOCOurBrain(soc.robot.SOCRobotClient, soc.util.SOCRobotParameters, soc.game.SOCGame, soc.util.CappedQueue);
  protected int considerOffer(soc.game.SOCTradeOffer);
  protected void planInitialSettlements();
  protected void planSecondSettlement();
  protected void placeFirstSettlement();
  protected void placeSecondSettlement();
  public void placeInitRoad();
  protected boolean considerOffer2(soc.game.SOCTradeOffer);
  protected void getDiscoveryResources();
  protected void getMonopolyResources();
  protected void playDevCards();
  protected void discard(int);
  protected void planBuilding();
  protected void planBuilding2();
  protected void buildOrGetResourceByTradeOrCard();
  protected void buildOrGetResourceByTradeOrCard2();
  protected void moveRobber();
  protected void chooseRobberVictim(boolean[]);
  protected java.util.Hashtable<java.lang.Float, java.lang.Integer> possibleSettlementSpots();
  protected void pickFirstSettlement();
  protected void pickSecondSettlement();
  protected void pickInitialRoad(int);
  protected double[] expectedNumResources();
  protected void tradeWithBank();
  protected soc.game.SOCTradeOffer tradeWithBank(soc.game.SOCResourceSet, soc.game.SOCGame, int);
  protected java.util.Vector<soc.ourRobot.SOCOurBrain$Move> possibleMoves(soc.game.SOCGame, int);
  protected double evaluateBoard(soc.game.SOCGame, int);
  public void performMoves(soc.game.SOCGame, soc.ourRobot.SOCOurBrain$Move, int);
  public double[] maxValue2(soc.ourRobot.SOCOurBrain$GameState, int, int);
  public int nextPlayer(int, soc.game.SOCGame);
  public double[] maxValue2WithTracking(soc.ourRobot.SOCOurBrain$GameState, int, int, soc.ourRobot.SOCOurBrain$SearchTracker);
  public static void writeFile();
  static {};
}
Compiled from "SOCOurBrain.java"
class soc.ourRobot.SOCOurBrain$GameState {
  final soc.ourRobot.SOCOurBrain this$0;
  public soc.ourRobot.SOCOurBrain$GameState(soc.ourRobot.SOCOurBrain, soc.game.SOCGame, int, int);
  static soc.game.SOCGame access$200(soc.ourRobot.SOCOurBrain$GameState);
  static int access$300(soc.ourRobot.SOCOurBrain$GameState);
}
Compiled from "SOCOurBrain.java"
class soc.ourRobot.SOCOurBrain$Move {
  final soc.ourRobot.SOCOurBrain this$0;
  public soc.ourRobot.SOCOurBrain$Move(soc.ourRobot.SOCOurBrain);
  public java.lang.String toString();
  public void addTrade(soc.game.SOCTradeOffer);
  public void addPiece(soc.game.SOCPlayingPiece);
  public void setDevCards(int);
  public java.util.Vector<soc.game.SOCTradeOffer> getTrades();
  public java.util.Vector<soc.game.SOCPlayingPiece> getPieces();
  public int devCardsToBuy();
  public int devCardToPlay();
  static java.util.Vector access$000(soc.ourRobot.SOCOurBrain$Move);
}
Compiled from "SOCOurBrain.java"
class soc.ourRobot.SOCOurBrain$Node {
  final soc.ourRobot.SOCOurBrain this$0;
  public soc.ourRobot.SOCOurBrain$Node(soc.ourRobot.SOCOurBrain, int[], soc.game.SOCTradeOffer);
  public void addChild(soc.ourRobot.SOCOurBrain$Node);
  public int[] getBuildSet();
  static java.util.Vector access$100(soc.ourRobot.SOCOurBrain$Node);
}
Compiled from "SOCOurBrain.java"
class soc.ourRobot.SOCOurBrain$SearchTracker {
  public soc.ourRobot.SOCOurBrain$SearchTracker();
  public soc.ourRobot.SOCOurBrain$SearchTracker(int);
  public void setAvgs();
  static java.util.Vector access$400(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$508(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$602(soc.ourRobot.SOCOurBrain$SearchTracker, double);
  static double access$600(soc.ourRobot.SOCOurBrain$SearchTracker);
  static long access$702(soc.ourRobot.SOCOurBrain$SearchTracker, long);
  static soc.ourRobot.SOCOurBrain$Move access$802(soc.ourRobot.SOCOurBrain$SearchTracker, soc.ourRobot.SOCOurBrain$Move);
  static double access$902(soc.ourRobot.SOCOurBrain$SearchTracker, double);
  static java.util.Vector access$1000(soc.ourRobot.SOCOurBrain$SearchTracker);
  static soc.ourRobot.SOCOurBrain$SearchTracker access$1100(java.util.Vector);
  static long access$700(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$1200(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$500(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$1300(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$1400(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$900(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$1500(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$1600(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$1700(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$1800(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$1900(soc.ourRobot.SOCOurBrain$SearchTracker);
  static double access$2000(soc.ourRobot.SOCOurBrain$SearchTracker);
}
Compiled from "BoardNodeScorePair.java"
class soc.robot.BoardNodeScorePair {
  public soc.robot.BoardNodeScorePair(int, int);
  public int getScore();
  public int getNode();
  public void setScore(int);
  public void setNode(int);
}
Compiled from "SOCBuildPossibility.java"
public class soc.robot.SOCBuildPossibility {
  soc.game.SOCPlayingPiece piece;
  boolean buyDevCard;
  int devCardType;
  int freeRoads;
  int score;
  int[] buildingSpeedup;
  int eta;
  int priority;
  soc.game.SOCPlayer player;
  soc.robot.SOCBuildPossibility parent;
  java.util.Vector children;
  public soc.robot.SOCBuildPossibility(soc.game.SOCPlayingPiece, int, int[], int, int, soc.game.SOCPlayer);
  public soc.robot.SOCBuildPossibility(soc.game.SOCPlayingPiece, int, int[], int, int, soc.game.SOCPlayer, int);
  public soc.robot.SOCBuildPossibility(int, int[], int, int, soc.game.SOCPlayer);
  public soc.robot.SOCBuildPossibility(int, int, int[], int, int, soc.game.SOCPlayer);
  public soc.game.SOCPlayingPiece getPiece();
  public boolean isBuyDevCard();
  public boolean isPlayDevCard();
  public int getDevCardType();
  public int getFreeRoads();
  public int getScore();
  public int[] getBuildingSpeedup();
  public int getETA();
  public int getPriority();
  public soc.game.SOCPlayer getPlayer();
  public java.util.Vector getChildren();
  public soc.robot.SOCBuildPossibility getParent();
  public void setParent(soc.robot.SOCBuildPossibility);
  public void addChild(soc.robot.SOCBuildPossibility);
  public java.lang.String toString();
}
Compiled from "SOCBuildingSpeedEstimate.java"
public class soc.robot.SOCBuildingSpeedEstimate {
  public static final int ROAD;
  public static final int SETTLEMENT;
  public static final int CITY;
  public static final int CARD;
  public static final int MIN;
  public static final int MAXPLUSONE;
  public static final int DEFAULT_ROLL_LIMIT;
  protected static boolean recalc;
  int[] estimatesFromNothing;
  int[] estimatesFromNow;
  int[] rollsPerResource;
  soc.game.SOCResourceSet[] resourcesForRoll;
  public soc.robot.SOCBuildingSpeedEstimate(soc.game.SOCPlayerNumbers);
  public soc.robot.SOCBuildingSpeedEstimate();
  public int[] getEstimatesFromNothingAccurate(boolean[]);
  public int[] getEstimatesFromNothingFast(boolean[]);
  public int[] getEstimatesFromNothingFast(boolean[], int);
  public int[] getEstimatesFromNowAccurate(soc.game.SOCResourceSet, boolean[]);
  public int[] getEstimatesFromNowFast(soc.game.SOCResourceSet, boolean[]);
  public void recalculateEstimates(soc.game.SOCPlayerNumbers);
  public void recalculateEstimates(soc.game.SOCPlayerNumbers, int);
  public void recalculateRollsPerResource(soc.game.SOCPlayerNumbers);
  public void recalculateRollsPerResource(soc.game.SOCPlayerNumbers, int);
  public void recalculateResourcesForRoll(soc.game.SOCPlayerNumbers);
  public void recalculateResourcesForRoll(soc.game.SOCPlayerNumbers, int);
  public int[] getRollsPerResource();
  protected soc.robot.SOCResSetBuildTimePair calculateRollsFast(soc.game.SOCResourceSet, soc.game.SOCResourceSet, int, boolean[]) throws soc.util.CutoffExceededException;
  protected soc.robot.SOCResSetBuildTimePair calculateRollsAccurate(soc.game.SOCResourceSet, soc.game.SOCResourceSet, int, boolean[]) throws soc.util.CutoffExceededException;
}
Compiled from "SOCNumberProbabilities.java"
interface soc.robot.SOCNumberProbabilities {
  public static final float[] FLOAT_VALUES;
  public static final int[] INT_VALUES;
  static {};
}
Compiled from "SOCPlayerAction.java"
public class soc.robot.SOCPlayerAction {
  public static final int PLACE_ROAD;
  public static final int PLACE_SETTLEMENT;
  public static final int PLACE_CITY;
  public static final int PLAY_KNIGHT;
  public static final int DRAW_VP;
  public static final int REMOVE_KNIGHT;
  public static final int REMOVE_VP;
  protected int actionType;
  protected soc.game.SOCPlayer player;
  protected int coord;
  public soc.robot.SOCPlayerAction(int, soc.game.SOCPlayer, int);
  public int getType();
  public soc.game.SOCPlayer getPlayer();
  public int getCoordinates();
}
Compiled from "SOCPlayerTracker.java"
public class soc.robot.SOCPlayerTracker {
  protected static final java.text.DecimalFormat df1;
  protected static int EXPAND_LEVEL;
  protected static int LR_CALC_LEVEL;
  protected soc.robot.SOCRobotBrain brain;
  protected soc.game.SOCPlayer player;
  protected java.util.TreeMap possibleSettlements;
  protected java.util.TreeMap possibleRoads;
  protected java.util.TreeMap possibleCities;
  protected int longestRoadETA;
  protected int roadsToGo;
  protected int largestArmyETA;
  protected int winGameETA;
  protected int knightsToBuy;
  protected boolean needLR;
  protected boolean needLA;
  protected soc.game.SOCSettlement pendingInitSettlement;
  boolean inUse;
  public soc.robot.SOCPlayerTracker(soc.game.SOCPlayer, soc.robot.SOCRobotBrain);
  public soc.robot.SOCPlayerTracker(soc.robot.SOCPlayerTracker);
  public static java.util.HashMap copyPlayerTrackers(java.util.HashMap);
  public synchronized void takeMonitor();
  public synchronized void releaseMonitor();
  public soc.robot.SOCRobotBrain getBrain();
  public soc.game.SOCPlayer getPlayer();
  public java.util.TreeMap getPossibleRoads();
  public java.util.TreeMap getPossibleSettlements();
  public java.util.TreeMap getPossibleCities();
  public int getLongestRoadETA();
  public int getRoadsToGo();
  public int getLargestArmyETA();
  public int getKnightsToBuy();
  public soc.game.SOCSettlement getPendingInitSettlement();
  public void setPendingInitSettlement(soc.game.SOCSettlement);
  public void addNewRoad(soc.game.SOCRoad, java.util.HashMap);
  public void cancelWrongRoad(soc.game.SOCRoad);
  public void addOurNewRoad(soc.game.SOCRoad, java.util.HashMap, int);
  public void expandRoad(soc.robot.SOCPossibleRoad, soc.game.SOCPlayer, soc.game.SOCPlayer, java.util.HashMap, int);
  public void addTheirNewRoad(soc.game.SOCRoad, boolean);
  protected void updateSettlementConflicts(soc.robot.SOCPossibleSettlement, java.util.HashMap);
  public synchronized void addNewSettlement(soc.game.SOCSettlement, java.util.HashMap);
  public void cancelWrongSettlement(soc.game.SOCSettlement);
  public synchronized void addOurNewSettlement(soc.game.SOCSettlement, java.util.HashMap);
  public void addTheirNewSettlement(soc.game.SOCSettlement, boolean);
  protected void removeDependents(soc.robot.SOCPossibleRoad);
  protected void removeFromNecessaryRoads(soc.robot.SOCPossibleRoad);
  protected void removeFromNecessaryRoads(soc.robot.SOCPossibleSettlement);
  public void cancelWrongCity(soc.game.SOCCity);
  public void addOurNewCity(soc.game.SOCCity);
  public void undoAddOurNewCity(soc.robot.SOCPossibleCity);
  public void updateThreats(java.util.HashMap);
  public void recalcLongestRoadETA();
  public void recalcLargestArmyETA();
  public void updateLRValues();
  public void updateLRPotential(soc.robot.SOCPossibleRoad, soc.game.SOCPlayer, soc.game.SOCRoad, int, int);
  public int getWinGameETA();
  public boolean needsLR();
  public boolean needsLA();
  public void recalcWinGameETA();
  public static java.util.HashMap tryPutPiece(soc.game.SOCPlayingPiece, soc.game.SOCGame, java.util.HashMap);
  public static void tryPutPieceNoCopy(soc.game.SOCPlayingPiece, soc.game.SOCGame, java.util.HashMap);
  public static void undoTryPutPiece(soc.game.SOCPlayingPiece, soc.game.SOCGame);
  public static void playerTrackersDebug(java.util.HashMap);
  public static void updateWinGameETAs(java.util.HashMap);
  static {};
}
Compiled from "SOCPossibleCard.java"
public class soc.robot.SOCPossibleCard extends soc.robot.SOCPossiblePiece {
  public soc.robot.SOCPossibleCard(soc.game.SOCPlayer, int);
  public soc.robot.SOCPossibleCard(soc.robot.SOCPossibleCard);
}
Compiled from "SOCPossibleCity.java"
public class soc.robot.SOCPossibleCity extends soc.robot.SOCPossiblePiece {
  protected int[] speedup;
  public soc.robot.SOCPossibleCity(soc.game.SOCPlayer, int);
  public soc.robot.SOCPossibleCity(soc.robot.SOCPossibleCity);
  public void updateSpeedup();
  public int[] getSpeedup();
  public int getSpeedupTotal();
}
Compiled from "SOCPossiblePiece.java"
public abstract class soc.robot.SOCPossiblePiece {
  public static final int ROAD;
  public static final int SETTLEMENT;
  public static final int CITY;
  public static final int CARD;
  public static final int MIN;
  public static final int MAXPLUSONE;
  protected int pieceType;
  protected soc.game.SOCPlayer player;
  protected int coord;
  protected int eta;
  protected boolean updated;
  protected float score;
  protected java.util.Vector biggestThreats;
  protected java.util.Vector threats;
  protected boolean threatUpdatedFlag;
  protected boolean hasBeenExpanded;
  public soc.robot.SOCPossiblePiece();
  public int getType();
  public soc.game.SOCPlayer getPlayer();
  public int getCoordinates();
  public int getETA();
  public void setETA(int);
  public boolean isETAUpdated();
  public void clearUpdateFlag();
  public void resetScore();
  public void addToScore(float);
  public void subtractFromScore(float);
  public float getScore();
  public void clearBiggestThreats();
  public void addBiggestThreat(soc.robot.SOCPossiblePiece);
  public java.util.Vector getBiggestThreats();
  public java.util.Vector getThreats();
  public void addThreat(soc.robot.SOCPossiblePiece);
  public boolean isThreatUpdated();
  public void clearThreats();
  public void threatUpdated();
  public boolean hasBeenExpanded();
  public void resetExpandedFlag();
  public void setExpandedFlag();
  public java.lang.String toString();
  public java.lang.String toFriendlyString();
}
Compiled from "SOCPossibleRoad.java"
public class soc.robot.SOCPossibleRoad extends soc.robot.SOCPossiblePiece {
  protected java.util.Vector necessaryRoads;
  protected java.util.Vector newPossibilities;
  protected int longestRoadValue;
  protected int longestRoadPotential;
  protected int numberOfNecessaryRoads;
  public soc.robot.SOCPossibleRoad(soc.game.SOCPlayer, int, java.util.Vector);
  public soc.robot.SOCPossibleRoad(soc.robot.SOCPossibleRoad);
  public java.util.Vector getNecessaryRoads();
  public int getNumberOfNecessaryRoads();
  public void setNumberOfNecessaryRoads(int);
  public java.util.Vector getNewPossibilities();
  public int getLRValue();
  public int getLRPotential();
  public void addNecessaryRoad(soc.robot.SOCPossibleRoad);
  public void addNewPossibility(soc.robot.SOCPossiblePiece);
  public void setLRValue(int);
  public void setLRPotential(int);
}
Compiled from "SOCPossibleSettlement.java"
public class soc.robot.SOCPossibleSettlement extends soc.robot.SOCPossiblePiece {
  protected java.util.Vector necessaryRoads;
  protected java.util.Vector conflicts;
  protected int[] speedup;
  protected int numberOfNecessaryRoads;
  protected java.util.Stack roadPath;
  public soc.robot.SOCPossibleSettlement(soc.game.SOCPlayer, int, java.util.Vector);
  public soc.robot.SOCPossibleSettlement(soc.robot.SOCPossibleSettlement);
  java.util.Stack getRoadPath();
  void setRoadPath(java.util.Stack);
  public java.util.Vector getNecessaryRoads();
  public int getNumberOfNecessaryRoads();
  public void setNumberOfNecessaryRoads(int);
  public void updateSpeedup();
  public java.util.Vector getConflicts();
  public void addNecessaryRoad(soc.robot.SOCPossibleRoad);
  public void addConflict(soc.robot.SOCPossibleSettlement);
  public void removeConflict(soc.robot.SOCPossibleSettlement);
  public int[] getSpeedup();
  public int getSpeedupTotal();
}
Compiled from "SOCResSetBuildTimePair.java"
public class soc.robot.SOCResSetBuildTimePair {
  soc.game.SOCResourceSet resources;
  int rolls;
  public soc.robot.SOCResSetBuildTimePair(soc.game.SOCResourceSet, int);
  public soc.game.SOCResourceSet getResources();
  public int getRolls();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "SOCResSetBuildTypePair.java"
public class soc.robot.SOCResSetBuildTypePair {
  soc.game.SOCResourceSet resources;
  int building;
  public soc.robot.SOCResSetBuildTypePair(soc.game.SOCResourceSet, int);
  public soc.game.SOCResourceSet getResources();
  public int getBuildingType();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "SOCRobotBrain.java"
public class soc.robot.SOCRobotBrain extends java.lang.Thread {
  soc.util.SOCRobotParameters robotParameters;
  protected boolean alive;
  protected boolean ourTurn;
  protected int turnTime;
  protected int curState;
  protected java.util.Random rand;
  protected soc.robot.SOCRobotClient client;
  protected soc.game.SOCGame game;
  protected soc.game.SOCPlayer ourPlayerData;
  protected soc.game.SOCPlayer dummyCancelPlayerData;
  protected soc.util.CappedQueue gameEventQ;
  protected int counter;
  protected soc.game.SOCPlayingPiece whatWeWantToBuild;
  protected java.util.Stack buildingPlan;
  protected soc.game.SOCPlayingPiece whatWeFailedToBuild;
  protected int failedBuildingAttempts;
  public static int MAX_DENIED_BUILDING_PER_TURN;
  protected soc.game.SOCResourceSet resourceChoices;
  protected int monopolyChoice;
  protected soc.robot.SOCPlayerTracker ourPlayerTracker;
  protected java.util.HashMap playerTrackers;
  protected soc.robot.SOCRobotDM decisionMaker;
  protected soc.robot.SOCRobotNegotiator negotiator;
  protected boolean expectSTART1A;
  protected boolean expectSTART1B;
  protected boolean expectSTART2A;
  protected boolean expectSTART2B;
  protected boolean expectPLAY;
  protected boolean expectPLAY1;
  protected boolean expectPLACING_ROAD;
  protected boolean expectPLACING_SETTLEMENT;
  protected boolean expectPLACING_CITY;
  protected boolean expectPLACING_ROBBER;
  protected boolean expectPLACING_FREE_ROAD1;
  protected boolean expectPLACING_FREE_ROAD2;
  protected boolean expectPUTPIECE_FROM_START1A;
  protected boolean expectPUTPIECE_FROM_START1B;
  protected boolean expectPUTPIECE_FROM_START2A;
  protected boolean expectPUTPIECE_FROM_START2B;
  protected boolean expectDICERESULT;
  protected boolean expectDISCARD;
  protected boolean expectMOVEROBBER;
  protected boolean expectWAITING_FOR_DISCOVERY;
  protected boolean expectWAITING_FOR_MONOPOLY;
  protected boolean waitingForGameState;
  protected boolean waitingForOurTurn;
  protected boolean waitingForTradeMsg;
  protected boolean waitingForDevCard;
  protected boolean moveRobberOnSeven;
  protected boolean waitingForTradeResponse;
  protected boolean doneTrading;
  protected boolean[] offerRejections;
  protected int oldGameState;
  protected int[] resourceEstimates;
  protected int firstSettlement;
  protected int secondSettlement;
  protected int lastStartingPieceCoord;
  protected int lastStartingRoadTowardsNode;
  protected soc.robot.SOCRobotPinger pinger;
  protected soc.util.DebugRecorder[] dRecorder;
  protected int currentDRecorder;
  protected soc.robot.SOCPossiblePiece lastMove;
  protected soc.robot.SOCPossiblePiece lastTarget;
  public soc.robot.SOCRobotBrain(soc.robot.SOCRobotClient, soc.util.SOCRobotParameters, soc.game.SOCGame, soc.util.CappedQueue);
  public soc.util.SOCRobotParameters getRobotParameters();
  public soc.robot.SOCRobotClient getClient();
  public java.util.HashMap getPlayerTrackers();
  public soc.robot.SOCPlayerTracker getOurPlayerTracker();
  public void addPlayerTracker(int);
  public soc.game.SOCGame getGame();
  public soc.game.SOCPlayer getOurPlayerData();
  public java.util.Stack getBuildingPlan();
  public soc.robot.SOCRobotDM getDecisionMaker();
  public void turnOnDRecorder();
  public void turnOffDRecorder();
  public soc.util.DebugRecorder getDRecorder();
  public soc.util.DebugRecorder getOldDRecorder();
  public soc.robot.SOCPossiblePiece getLastMove();
  public soc.robot.SOCPossiblePiece getLastTarget();
  public void setOurPlayerData();
  public void run();
  protected void placeIfExpectPlacing();
  protected void buildOrGetResourceByTradeOrCard();
  protected void buildRequestPlannedPiece(soc.robot.SOCPossiblePiece);
  protected void planBuilding();
  protected void handlePLAYERELEMENT_numRsrc(soc.message.SOCPlayerElement, soc.game.SOCPlayer, int, java.lang.String);
  protected void trackNewSettlement(soc.game.SOCSettlement, boolean);
  protected void trackNewRoad(soc.game.SOCRoad, boolean);
  protected void cancelWrongPiecePlacement(soc.message.SOCCancelBuildRequest);
  protected void cancelWrongPiecePlacementLocal(soc.game.SOCPlayingPiece);
  public void kill();
  public void pause(int);
  protected void planInitialSettlements();
  protected void planSecondSettlement();
  protected void placeFirstSettlement();
  protected void placeSecondSettlement();
  public void placeInitRoad();
  protected int[] estimateResourceRarity();
  protected void bestSpotForNumbers(java.util.Hashtable, int);
  protected void bestSpotForNumbers(java.util.Hashtable, soc.game.SOCPlayer, int);
  protected void bestSpot2AwayFromANodeSet(java.util.Hashtable, java.util.Vector, int);
  protected void bestSpotInANodeSet(java.util.Hashtable, java.util.Vector, int);
  protected void moveRobber();
  protected void discard(int);
  protected void chooseRobberVictim(boolean[]);
  protected int numberOfEnemyBuilds();
  protected soc.robot.BoardNodeScorePair findBestScoringNode(java.util.Hashtable);
  protected void scoreNodesForSettlements(java.util.Hashtable, int, int, int);
  protected void tradeStuff();
  protected void expandTradeTreeNode(soc.robot.SOCTradeTree, java.util.Hashtable);
  protected int scoreTradeOutcome(soc.game.SOCResourceSet);
  protected boolean tradeToTarget2(soc.game.SOCResourceSet);
  protected int considerOffer(soc.game.SOCTradeOffer);
  protected boolean makeOffer(soc.robot.SOCPossiblePiece);
  protected boolean makeCounterOffer(soc.game.SOCTradeOffer);
  protected void chooseFreeResources(soc.game.SOCResourceSet);
  protected boolean chooseMonopoly();
  static {};
}
Compiled from "SOCRobotClient.java"
public class soc.robot.SOCRobotClient extends soc.client.SOCDisplaylessPlayerClient {
  public static final java.lang.String CURRENT_PLANS;
  public static final java.lang.String CURRENT_RESOURCES;
  protected java.lang.Thread reader;
  protected soc.util.SOCRobotParameters currentRobotParameters;
  protected java.util.Hashtable robotBrains;
  protected java.util.Hashtable brainQs;
  protected java.util.Hashtable seatRequests;
  protected java.util.Hashtable gameOptions;
  protected int gamesPlayed;
  protected int gamesFinished;
  protected int gamesWon;
  protected int cleanBrainKills;
  protected long startTime;
  soc.robot.SOCRobotResetThread resetThread;
  boolean printedInitialWelcome;
  boolean useTheirRobot;
  public soc.robot.SOCRobotClient(java.lang.String, int, java.lang.String, java.lang.String, boolean);
  public soc.robot.SOCRobotClient(java.lang.String, java.lang.String, java.lang.String, boolean);
  public void init();
  public void disconnectReconnect();
  public void treat(soc.message.SOCMessage);
  protected void handleSERVERPING(soc.message.SOCServerPing);
  protected void handleADMINPING(soc.message.SOCAdminPing);
  protected void handleADMINRESET(soc.message.SOCAdminReset);
  protected void handleUPDATEROBOTPARAMS(soc.message.SOCUpdateRobotParams);
  protected void handleJOINGAMEREQUEST(soc.message.SOCJoinGameRequest);
  protected void handleSTATUSMESSAGE(soc.message.SOCStatusMessage);
  protected void handleJOINGAMEAUTH(soc.message.SOCJoinGameAuth);
  protected void handleJOINGAME(soc.message.SOCJoinGame);
  protected void handleGAMEMEMBERS(soc.message.SOCGameMembers);
  protected void handleGAMETEXTMSG(soc.message.SOCGameTextMsg);
  protected void handleSITDOWN(soc.message.SOCSitDown);
  protected void handleSTARTGAME(soc.message.SOCStartGame);
  protected void handleDELETEGAME(soc.message.SOCDeleteGame);
  protected void handleGAMESTATE(soc.message.SOCGameState);
  protected void handleSETTURN(soc.message.SOCSetTurn);
  protected void handleFIRSTPLAYER(soc.message.SOCFirstPlayer);
  protected void handleTURN(soc.message.SOCTurn);
  protected void handlePLAYERELEMENT(soc.message.SOCPlayerElement);
  protected void handleRESOURCECOUNT(soc.message.SOCResourceCount);
  protected void handleDICERESULT(soc.message.SOCDiceResult);
  protected void handlePUTPIECE(soc.message.SOCPutPiece);
  protected void handleCANCELBUILDREQUEST(soc.message.SOCCancelBuildRequest);
  protected void handleMOVEROBBER(soc.message.SOCMoveRobber);
  protected void handleDISCARDREQUEST(soc.message.SOCDiscardRequest);
  protected void handleCHOOSEPLAYERREQUEST(soc.message.SOCChoosePlayerRequest);
  protected void handleMAKEOFFER(soc.message.SOCMakeOffer);
  protected void handleCLEAROFFER(soc.message.SOCClearOffer);
  protected void handleREJECTOFFER(soc.message.SOCRejectOffer);
  protected void handleACCEPTOFFER(soc.message.SOCAcceptOffer);
  protected void handleCLEARTRADEMSG(soc.message.SOCClearTradeMsg);
  protected void handleDEVCARDCOUNT(soc.message.SOCDevCardCount);
  protected void handleDEVCARD(soc.message.SOCDevCard);
  protected void handleSETPLAYEDDEVCARD(soc.message.SOCSetPlayedDevCard);
  protected void handleROBOTDISMISS(soc.message.SOCRobotDismiss);
  protected void handlePOTENTIALSETTLEMENTS(soc.message.SOCPotentialSettlements);
  protected void handleCHANGEFACE(soc.message.SOCChangeFace);
  protected void handleLONGESTROAD(soc.message.SOCLongestRoad);
  protected void handleLARGESTARMY(soc.message.SOCLargestArmy);
  protected void handleRESETBOARDAUTH(soc.message.SOCResetBoardAuth);
  protected void sendRecordsText(soc.game.SOCGame, java.util.Vector);
  public void leaveGame(soc.game.SOCGame, java.lang.String, boolean);
  public void addCleanKill();
  public void destroy();
  public static void main(java.lang.String[]);
}
Compiled from "SOCRobotDM.java"
public class soc.robot.SOCRobotDM {
  protected static final java.text.DecimalFormat df1;
  protected int maxGameLength;
  protected int maxETA;
  protected float etaBonusFactor;
  protected float adversarialFactor;
  protected float leaderAdversarialFactor;
  protected float devCardMultiplier;
  protected float threatMultiplier;
  protected static final int LA_CHOICE;
  protected static final int LR_CHOICE;
  protected static final int CITY_CHOICE;
  protected static final int SETTLEMENT_CHOICE;
  protected static final int TWO_SETTLEMENTS;
  protected static final int TWO_CITIES;
  protected static final int ONE_OF_EACH;
  protected static final int WIN_LA;
  protected static final int WIN_LR;
  public static final int SMART_STRATEGY;
  public static final int FAST_STRATEGY;
  public static final int OUR_STRATEGY;
  protected soc.robot.SOCRobotBrain brain;
  protected java.util.HashMap playerTrackers;
  protected soc.robot.SOCPlayerTracker ourPlayerTracker;
  protected soc.game.SOCPlayer ourPlayerData;
  protected java.util.Stack buildingPlan;
  protected soc.game.SOCGame game;
  protected java.util.Vector threatenedRoads;
  protected java.util.Vector goodRoads;
  protected soc.robot.SOCPossibleRoad favoriteRoad;
  protected java.util.Vector threatenedSettlements;
  protected java.util.Vector goodSettlements;
  protected soc.robot.SOCPossibleSettlement favoriteSettlement;
  protected soc.robot.SOCPossibleCity favoriteCity;
  protected soc.robot.SOCPossibleCard possibleCard;
  public soc.robot.SOCRobotDM(soc.robot.SOCRobotBrain);
  public soc.robot.SOCRobotDM(soc.util.SOCRobotParameters, java.util.HashMap, soc.robot.SOCPlayerTracker, soc.game.SOCPlayer, java.util.Stack);
  public soc.robot.SOCPossibleSettlement getFavoriteSettlement();
  public soc.robot.SOCPossibleCity getFavoriteCity();
  public soc.robot.SOCPossibleRoad getFavoriteRoad();
  public soc.robot.SOCPossibleCard getPossibleCard();
  public void planStuff(int);
  protected void dumbFastGameStrategy(int[]);
  protected void scoreSettlementsForDumb(int, soc.robot.SOCBuildingSpeedEstimate);
  protected void smartGameStrategy(int[]);
  protected void scorePossibleSettlements(int, int);
  protected float getWinGameETABonus(soc.robot.SOCPossiblePiece);
  protected float getWinGameETABonusForRoad(soc.robot.SOCPossibleRoad, int, int, java.util.HashMap);
  protected float calcWGETABonus(java.util.HashMap, java.util.HashMap);
  public float calcWGETABonusAux(int[], java.util.HashMap, java.util.Vector);
  public soc.robot.SOCPossibleCard getDevCardScore(int, int);
  public float getETABonus(int, int, float);
  static {};
}
Compiled from "SOCRobotNegotiator.java"
public class soc.robot.SOCRobotNegotiator {
  protected static final int WIN_GAME_CUTOFF;
  public static final int REJECT_OFFER;
  public static final int ACCEPT_OFFER;
  public static final int COUNTER_OFFER;
  protected soc.robot.SOCRobotBrain brain;
  protected int strategyType;
  protected soc.game.SOCGame game;
  protected java.util.Stack buildingPlan;
  protected java.util.HashMap playerTrackers;
  protected soc.robot.SOCPlayerTracker ourPlayerTracker;
  protected soc.game.SOCPlayer ourPlayerData;
  protected soc.robot.SOCRobotDM decisionMaker;
  protected boolean[][] isSellingResource;
  protected boolean[][] wantsAnotherOffer;
  protected java.util.Vector offersMade;
  protected soc.robot.SOCPossiblePiece[] targetPieces;
  public soc.robot.SOCRobotNegotiator(soc.robot.SOCRobotBrain);
  public void resetTargetPieces();
  public void setTargetPiece(int, soc.robot.SOCPossiblePiece);
  public void resetOffersMade();
  public void addToOffersMade(soc.game.SOCTradeOffer);
  public void resetIsSelling();
  public void resetWantsAnotherOffer();
  public void markAsNotSelling(int, int);
  public void markAsSelling(int, int);
  public void markAsNotWantingAnotherOffer(int, int);
  public void markAsWantsAnotherOffer(int, int);
  public boolean wantsAnotherOffer(int, int);
  public soc.game.SOCTradeOffer makeOffer(soc.robot.SOCPossiblePiece);
  protected soc.game.SOCTradeOffer makeOfferAux(soc.game.SOCResourceSet, soc.game.SOCResourceSet, int);
  protected int getETAToTargetResources(soc.game.SOCPlayer, soc.game.SOCResourceSet, soc.game.SOCResourceSet, soc.game.SOCResourceSet, soc.robot.SOCBuildingSpeedEstimate);
  public int considerOffer2(soc.game.SOCTradeOffer, int);
  public soc.game.SOCTradeOffer makeCounterOffer(soc.game.SOCTradeOffer);
  public soc.game.SOCTradeOffer getOfferToBank(soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  public soc.game.SOCTradeOffer getOfferToBank(soc.game.SOCResourceSet);
}
Compiled from "SOCRobotPinger.java"
public class soc.robot.SOCRobotPinger extends java.lang.Thread {
  soc.util.CappedQueue messageQueue;
  soc.message.SOCGameTextMsg ping;
  boolean alive;
  java.lang.String robotNickname;
  public soc.robot.SOCRobotPinger(soc.util.CappedQueue, java.lang.String);
  public void run();
  public void stopPinger();
}
Compiled from "SOCRobotResetThread.java"
public class soc.robot.SOCRobotResetThread extends java.lang.Thread {
  soc.robot.SOCRobotClient client;
  boolean sleeping;
  boolean alive;
  public soc.robot.SOCRobotResetThread(soc.robot.SOCRobotClient);
  public void run();
  public void sleepMore();
  public void stopRobotResetThread();
}
Compiled from "SOCTradeTree.java"
public class soc.robot.SOCTradeTree {
  soc.game.SOCResourceSet resourceSet;
  soc.robot.SOCTradeTree parent;
  java.util.Vector children;
  boolean needsToBeExpanded;
  public soc.robot.SOCTradeTree(soc.game.SOCResourceSet, soc.robot.SOCTradeTree);
  public soc.robot.SOCTradeTree(soc.game.SOCResourceSet);
  public soc.game.SOCResourceSet getResourceSet();
  public soc.robot.SOCTradeTree getParent();
  public boolean needsToBeExpanded();
  public java.util.Vector getChildren();
  public void setParent(soc.robot.SOCTradeTree);
  public void setNeedsToBeExpanded(boolean);
  public void addChild(soc.robot.SOCTradeTree);
}
Compiled from "robotGame.java"
public class soc.robot.robotGame {
  protected static soc.server.genericServer.StringConnection prCli;
  protected static java.lang.String lastMessage_N;
  protected static java.lang.String lastMessage_L;
  protected static java.lang.Exception ex_L;
  public soc.robot.robotGame();
  public static void main(java.lang.String[]) throws java.net.ConnectException, java.lang.IllegalArgumentException;
  public static synchronized boolean putLocal(java.lang.String);
  static {};
}
Compiled from "robotGame.java"
public class soc.robot.robotGame$SOCPlayerLocalStringReader implements java.lang.Runnable {
  soc.server.genericServer.LocalStringConnection locl;
  protected soc.robot.robotGame$SOCPlayerLocalStringReader(soc.server.genericServer.LocalStringConnection);
  public void run();
}
Compiled from "SOCChannelList.java"
public class soc.server.SOCChannelList {
  protected java.util.Hashtable channelMutexes;
  protected java.util.Hashtable channelMembers;
  protected boolean inUse;
  public soc.server.SOCChannelList();
  public synchronized void takeMonitor();
  public synchronized void releaseMonitor();
  public boolean takeMonitorForChannel(java.lang.String);
  public boolean releaseMonitorForChannel(java.lang.String);
  public java.util.Enumeration getChannels();
  public synchronized java.util.Vector getMembers(java.lang.String);
  public synchronized boolean isMember(soc.server.genericServer.StringConnection, java.lang.String);
  public synchronized void addMember(soc.server.genericServer.StringConnection, java.lang.String);
  public synchronized void removeMember(soc.server.genericServer.StringConnection, java.lang.String);
  public synchronized void replaceMemberAllChannels(soc.server.genericServer.StringConnection, soc.server.genericServer.StringConnection);
  public boolean isChannel(java.lang.String);
  public synchronized boolean isChannelEmpty(java.lang.String);
  public synchronized void createChannel(java.lang.String);
  public synchronized void deleteChannel(java.lang.String);
}
Compiled from "SOCClientData.java"
public class soc.server.SOCClientData {
  public boolean isRobot;
  public boolean isBuiltInRobot;
  public java.lang.String robot3rdPartyBrainClass;
  public long disconnectLastPingMillis;
  public soc.server.SOCClientData();
  public void wonGame();
  public void lostGame();
  public int getWins();
  public int getLosses();
  public void copyClientPlayerStats(soc.server.SOCClientData);
  public boolean hasSentGameList();
  public void setSentGameList();
  public void setVersionTimer(soc.server.SOCServer, soc.server.genericServer.StringConnection);
  public void clearVersionTimer();
  static soc.server.SOCClientData$SOCCDCliVersionTask access$002(soc.server.SOCClientData, soc.server.SOCClientData$SOCCDCliVersionTask);
}
Compiled from "SOCClientData.java"
class soc.server.SOCClientData$SOCCDCliVersionTask extends java.util.TimerTask {
  public soc.server.SOCClientData$SOCCDCliVersionTask(soc.server.SOCServer, soc.server.SOCClientData, soc.server.genericServer.StringConnection);
  public void run();
}
Compiled from "SOCGameListAtServer.java"
public class soc.server.SOCGameListAtServer extends soc.util.SOCGameList {
  public static int GAME_EXPIRE_MINUTES;
  protected java.util.Hashtable gameMembers;
  public soc.server.SOCGameListAtServer();
  public synchronized boolean isGameEmpty(java.lang.String);
  public synchronized java.util.Vector getMembers(java.lang.String);
  public synchronized boolean isMember(soc.server.genericServer.StringConnection, java.lang.String);
  public synchronized void addMember(soc.server.genericServer.StringConnection, java.lang.String);
  public synchronized void removeMember(soc.server.genericServer.StringConnection, java.lang.String);
  public synchronized void replaceMemberAllGames(soc.server.genericServer.StringConnection, soc.server.genericServer.StringConnection) throws java.lang.IllegalArgumentException;
  public synchronized soc.game.SOCGame createGame(java.lang.String, java.util.Hashtable);
  public soc.util.SOCGameBoardReset resetBoard(java.lang.String);
  public synchronized void deleteGame(java.lang.String);
  public int playerGamesMinVersion(soc.server.genericServer.StringConnection);
  public java.util.Vector memberGames(soc.server.genericServer.StringConnection, java.lang.String);
  static {};
}
Compiled from "SOCGameTimeoutChecker.java"
public class soc.server.SOCGameTimeoutChecker extends java.lang.Thread {
  soc.server.SOCServer server;
  boolean alive;
  public soc.server.SOCGameTimeoutChecker(soc.server.SOCServer);
  public void run();
  public void stopChecking();
}
Compiled from "SOCReplaceRequest.java"
class soc.server.SOCReplaceRequest {
  public soc.server.SOCReplaceRequest(soc.server.genericServer.StringConnection, soc.server.genericServer.StringConnection, soc.message.SOCSitDown);
  public soc.server.genericServer.StringConnection getArriving();
  public soc.server.genericServer.StringConnection getLeaving();
  public soc.message.SOCSitDown getSitDownMessage();
}
Compiled from "SOCServer.java"
public class soc.server.SOCServer extends soc.server.genericServer.Server {
  public static final int SOC_PORT_DEFAULT;
  public static final java.lang.String PROP_JSETTLERS_PORT;
  public static final java.lang.String PROP_JSETTLERS_CONNECTIONS;
  public static final java.lang.String PROP_JSETTLERS_STARTROBOTS;
  public static final java.lang.String[] PROPS_LIST;
  public static final java.lang.String SERVERNAME;
  public static final int CLI_VERSION_MIN;
  public static final java.lang.String CLI_VERSION_MIN_DISPLAY;
  public static final int CLI_VERSION_ASSUMED_GUESS;
  public static final int CLI_VERSION_TIMER_FIRE_MS;
  public static int GAME_EXPIRE_WARN_MINUTES;
  public static int GAME_NAME_MAX_LENGTH;
  public static int PLAYER_NAME_MAX_LENGTH;
  public static java.lang.String PRACTICE_STRINGPORT;
  protected int maxConnections;
  protected java.util.Vector robots;
  public static soc.util.SOCRobotParameters ROBOT_PARAMS_DEFAULT;
  public static soc.util.SOCRobotParameters ROBOT_PARAMS_SMARTER;
  public static soc.util.SOCRobotParameters ROBOT_PARAMS_OURS;
  public static boolean hasSetGameOptions;
  public static final java.lang.String MSG_NICKNAME_ALREADY_IN_USE;
  public static final java.lang.String MSG_NICKNAME_ALREADY_IN_USE_WAIT_TRY_AGAIN;
  public static final java.lang.String MSG_NICKNAME_ALREADY_IN_USE_NEWER_VERSION_P1;
  public static final java.lang.String MSG_NICKNAME_ALREADY_IN_USE_NEWER_VERSION_P2;
  public static final int NICKNAME_TAKEOVER_SECONDS_SAME_PASSWORD;
  public static final int NICKNAME_TAKEOVER_SECONDS_SAME_IP;
  public static final int NICKNAME_TAKEOVER_SECONDS_DIFFERENT_IP;
  protected soc.server.SOCChannelList channelList;
  protected soc.server.SOCGameListAtServer gameList;
  protected java.util.Hashtable robotJoinRequests;
  protected java.util.Hashtable robotDismissRequests;
  protected java.util.Hashtable gameDataFiles;
  protected long startTime;
  protected int numberOfGamesStarted;
  protected int numberOfGamesFinished;
  protected int numberOfUsers;
  soc.server.SOCServerRobotPinger serverRobotPinger;
  soc.server.SOCGameTimeoutChecker gameTimeoutChecker;
  java.lang.String databaseUserName;
  java.lang.String databasePassword;
  public static final java.lang.String[] DEBUG_COMMANDS_HELP;
  public static boolean printedUsageAlready;
  public soc.server.SOCServer(int, int, java.lang.String, java.lang.String);
  public soc.server.SOCServer(int, java.util.Properties);
  public soc.server.SOCServer(java.lang.String, int, java.lang.String, java.lang.String);
  public static void printVersionText();
  public void serverUp();
  public void connectToChannel(soc.server.genericServer.StringConnection, java.lang.String);
  public boolean leaveChannel(soc.server.genericServer.StringConnection, java.lang.String, boolean);
  public boolean connectToGame(soc.server.genericServer.StringConnection, java.lang.String, java.util.Hashtable) throws soc.game.SOCGameOptionVersionException, java.lang.IllegalArgumentException;
  public boolean leaveGame(soc.server.genericServer.StringConnection, java.lang.String, boolean);
  public void setupLocalRobots(int, int);
  public void destroyGame(java.lang.String);
  public java.util.Enumeration getGameNames();
  public int getGameState(java.lang.String);
  public java.util.Hashtable getGameOptions(java.lang.String);
  public java.util.Vector leaveAllChannels(soc.server.genericServer.StringConnection);
  public java.util.Vector leaveAllGames(soc.server.genericServer.StringConnection);
  public void messageToChannel(java.lang.String, soc.message.SOCMessage);
  public void messageToChannelWithMon(java.lang.String, soc.message.SOCMessage);
  public void messageToPlayer(soc.server.genericServer.StringConnection, soc.message.SOCMessage);
  public void messageToPlayer(soc.server.genericServer.StringConnection, java.lang.String, java.lang.String);
  public void messageToGame(java.lang.String, soc.message.SOCMessage);
  public void messageToGame(java.lang.String, java.lang.String);
  public void messageToGameWithMon(java.lang.String, soc.message.SOCMessage);
  public void messageToGameExcept(java.lang.String, java.util.Vector, soc.message.SOCMessage, boolean);
  public void messageToGameExcept(java.lang.String, soc.server.genericServer.StringConnection, soc.message.SOCMessage, boolean);
  public void messageToGameUrgent(java.lang.String, java.lang.String);
  public void leaveConnection(soc.server.genericServer.StringConnection);
  public boolean newConnection1(soc.server.genericServer.StringConnection);
  protected void newConnection2(soc.server.genericServer.StringConnection);
  public void sendGameList(soc.server.genericServer.StringConnection, int);
  public boolean processFirstCommand(java.lang.String, soc.server.genericServer.StringConnection);
  public void processCommand(java.lang.String, soc.server.genericServer.StringConnection);
  public void processDebugCommand(soc.server.genericServer.StringConnection, java.lang.String, java.lang.String);
  public synchronized void stopServer();
  public synchronized void stopServer(java.lang.String);
  boolean setClientVersSendGamesOrReject(soc.server.genericServer.StringConnection, int, boolean);
  protected void reportRobbery(soc.game.SOCGame, soc.game.SOCPlayer, soc.game.SOCPlayer, int);
  protected void sendGameState(soc.game.SOCGame);
  protected boolean sendGameState(soc.game.SOCGame, boolean);
  protected void sendGameStateOVER(soc.game.SOCGame) throws java.io.IOException;
  protected void reportTrade(soc.game.SOCGame, int, int);
  protected void reportBankTrade(soc.game.SOCGame, soc.game.SOCResourceSet, soc.game.SOCResourceSet);
  protected boolean checkTurn(soc.server.genericServer.StringConnection, soc.game.SOCGame);
  protected void startGame(soc.game.SOCGame);
  protected void storeGameScores(soc.game.SOCGame);
  protected void recordGameEvent(java.lang.String, java.lang.String);
  protected void giveResources(java.lang.String, soc.game.SOCGame);
  protected void broadcastGameStats(soc.game.SOCGame);
  public void checkForExpiredGames();
  protected void giveDevCard(java.lang.String, soc.game.SOCGame);
  public static boolean parseCmdline_GameOption(java.lang.String);
  public static java.util.Properties parseCmdline_DashedArgs(java.lang.String[]);
  public static void printUsage(boolean);
  public static void printGameOptions();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SOCServer.java"
class soc.server.SOCServer$SOCPlayerLocalRobotRunner implements java.lang.Runnable {
  soc.robot.SOCRobotClient rob;
  protected soc.server.SOCServer$SOCPlayerLocalRobotRunner(soc.robot.SOCRobotClient);
  public void run();
  public static void createAndStartRobotClientThread(java.lang.String, java.lang.String, int, boolean);
}
Compiled from "SOCServerRobotPinger.java"
public class soc.server.SOCServerRobotPinger extends java.lang.Thread {
  java.util.Vector robotConnections;
  int sleepTime;
  soc.message.SOCServerPing ping;
  boolean alive;
  public soc.server.SOCServerRobotPinger(java.util.Vector);
  public void run();
  public void stopPinger();
}
Compiled from "SOCDBHelper.java"
public class soc.server.database.SOCDBHelper {
  public static final java.lang.String PROP_JSETTLERS_DB_USER;
  public static final java.lang.String PROP_JSETTLERS_DB_PASS;
  public static final java.lang.String PROP_JSETTLERS_DB_DRIVER;
  public static final java.lang.String PROP_JSETTLERS_DB_URL;
  public soc.server.database.SOCDBHelper();
  public static void initialize(java.lang.String, java.lang.String, java.util.Properties) throws java.sql.SQLException;
  public static java.lang.String getUserPassword(java.lang.String) throws java.sql.SQLException;
  public static java.lang.String getUserFromHost(java.lang.String) throws java.sql.SQLException;
  public static boolean createAccount(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long) throws java.sql.SQLException;
  public static boolean recordLogin(java.lang.String, java.lang.String, long) throws java.sql.SQLException;
  public static boolean updateLastlogin(java.lang.String, long) throws java.sql.SQLException;
  public static boolean saveGameScores(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, short, short, short, short, java.util.Date) throws java.sql.SQLException;
  public static soc.util.SOCRobotParameters retrieveRobotParams(java.lang.String) throws java.sql.SQLException;
  public static void cleanup() throws java.sql.SQLException;
  static {};
}
Compiled from "Connection.java"
public final class soc.server.genericServer.Connection extends java.lang.Thread implements java.lang.Runnable,java.io.Serializable,java.lang.Cloneable,soc.server.genericServer.StringConnection {
  static int putters;
  static java.lang.Object puttersMonitor;
  protected static final int TIMEOUT_VALUE;
  protected java.lang.Object data;
  protected java.lang.Object appData;
  java.io.DataInputStream in;
  java.io.DataOutputStream out;
  java.net.Socket s;
  soc.server.genericServer.Server sv;
  public java.lang.Thread reader;
  protected java.lang.String hst;
  protected int remoteVersion;
  protected boolean remoteVersionKnown;
  protected boolean remoteVersionTrack;
  protected boolean hideTimeoutMessage;
  protected java.lang.Exception error;
  protected java.util.Date connectTime;
  protected boolean connected;
  protected boolean inputConnected;
  public java.util.Vector outQueue;
  soc.server.genericServer.Connection(java.net.Socket, soc.server.genericServer.Server);
  public java.lang.String host();
  public boolean connect();
  public boolean isInputAvailable();
  public boolean wantsHideTimeoutMessage();
  public void setHideTimeoutMessage(boolean);
  public void run();
  public final void put(java.lang.String);
  public boolean putForReal(java.lang.String);
  public final boolean putAux(java.lang.String);
  public java.lang.Object getData();
  public java.lang.Object getAppData();
  public void setData(java.lang.Object);
  public void setAppData(java.lang.Object);
  public java.lang.Exception getError();
  public java.util.Date getConnectTime();
  public void disconnect();
  public void disconnectSoft();
  public boolean isConnected();
  public int getVersion();
  public void setVersion(int);
  public void setVersion(int, boolean);
  public boolean isVersionKnown();
  public void setVersionTracking(boolean);
  public java.lang.String toString();
  static {};
}
Compiled from "Connection.java"
class soc.server.genericServer.Connection$Putter extends java.lang.Thread {
  soc.server.genericServer.Connection con;
  final soc.server.genericServer.Connection this$0;
  public soc.server.genericServer.Connection$Putter(soc.server.genericServer.Connection, soc.server.genericServer.Connection);
  public void run();
}
Compiled from "LocalStringConnection.java"
public class soc.server.genericServer.LocalStringConnection implements soc.server.genericServer.StringConnection,java.lang.Runnable {
  protected static java.lang.Object EOF_MARKER;
  protected java.util.Vector in;
  protected java.util.Vector out;
  protected boolean in_reachedEOF;
  protected boolean out_setEOF;
  protected boolean accepted;
  protected soc.server.genericServer.Server ourServer;
  protected java.lang.Exception error;
  protected java.util.Date connectTime;
  protected int remoteVersion;
  protected boolean remoteVersionKnown;
  protected boolean remoteVersionTrack;
  protected boolean hideTimeoutMessage;
  protected java.lang.Object data;
  protected java.lang.Object appData;
  public soc.server.genericServer.LocalStringConnection();
  public soc.server.genericServer.LocalStringConnection(soc.server.genericServer.LocalStringConnection) throws java.io.EOFException;
  public java.lang.String readNext() throws java.io.EOFException, java.lang.IllegalStateException;
  public void put(java.lang.String) throws java.lang.IllegalStateException;
  public void disconnect();
  public void disconnectSoft();
  public void connect(java.lang.String) throws java.net.ConnectException, java.lang.IllegalStateException;
  public soc.server.genericServer.LocalStringConnection getPeer();
  public boolean isAccepted();
  public void setAccepted() throws java.lang.IllegalStateException;
  public void setEOF();
  public boolean isInEOF();
  public boolean isOutEOF();
  public java.lang.Object getData();
  public java.lang.Object getAppData();
  public void setData(java.lang.Object);
  public void setAppData(java.lang.Object);
  public soc.server.genericServer.Server getServer();
  public void setServer(soc.server.genericServer.Server);
  public java.lang.Exception getError();
  public java.util.Date getConnectTime();
  public java.lang.String host();
  public boolean connect();
  public boolean isConnected();
  public int getVersion();
  public void setVersion(int);
  public void setVersion(int, boolean);
  public boolean isVersionKnown();
  public void setVersionTracking(boolean);
  public boolean isInputAvailable();
  public boolean wantsHideTimeoutMessage();
  public void setHideTimeoutMessage(boolean);
  public void run();
  public java.lang.String toString();
  static {};
}
Compiled from "LocalStringServerSocket.java"
public class soc.server.genericServer.LocalStringServerSocket implements soc.server.genericServer.StringServerSocket {
  protected static java.util.Hashtable allSockets;
  public static int ACCEPT_QUEUELENGTH;
  protected java.util.Vector allConnected;
  protected java.util.Vector acceptQueue;
  boolean out_setEOF;
  public soc.server.genericServer.LocalStringServerSocket(java.lang.String);
  public static soc.server.genericServer.LocalStringConnection connectTo(java.lang.String) throws java.net.ConnectException, java.lang.IllegalArgumentException;
  public static soc.server.genericServer.LocalStringConnection connectTo(java.lang.String, soc.server.genericServer.LocalStringConnection) throws java.net.ConnectException, java.lang.IllegalArgumentException;
  protected soc.server.genericServer.LocalStringConnection queueAcceptClient(soc.server.genericServer.LocalStringConnection) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.net.ConnectException, java.io.EOFException;
  public soc.server.genericServer.StringConnection accept() throws java.net.SocketException, java.io.IOException;
  public java.util.Enumeration allClients();
  public void broadcast(java.lang.String);
  public void disconnectEOFClients();
  public java.lang.String getSocketName();
  public void setEOF();
  protected void setEOF(boolean);
  public boolean isOutEOF();
  public void close() throws java.io.IOException;
  static {};
}
Compiled from "Server.java"
public abstract class soc.server.genericServer.Server extends java.lang.Thread implements java.io.Serializable,java.lang.Cloneable {
  soc.server.genericServer.StringServerSocket ss;
  boolean up;
  protected java.lang.Exception error;
  protected int port;
  protected java.lang.String strSocketName;
  public static final int CLI_VERSION_SET_CONSIS_CHECK_MINUTES;
  public static final int CLI_VERSION_SET_CONSIS_CHECK_QUICK_COUNT;
  protected int numberOfConnections;
  protected int numberCurrentConnections;
  protected java.util.Hashtable conns;
  protected java.util.Vector unnamedConns;
  public java.util.Vector inQueue;
  public java.util.Timer utilTimer;
  public java.util.HashMap cliConnDisconPrintsPending;
  public static int CLI_DISCON_PRINT_TIMER_FIRE_MS;
  public static int CLI_CONN_PRINT_TIMER_FIRE_MS;
  public soc.server.genericServer.Server(int);
  public soc.server.genericServer.Server(java.lang.String);
  protected soc.server.genericServer.StringConnection getConnection(java.lang.Object);
  protected java.util.Enumeration getConnections();
  protected synchronized int connectionCount();
  public synchronized boolean isUp();
  public void run();
  public void treat(java.lang.String, soc.server.genericServer.StringConnection);
  public abstract void processCommand(java.lang.String, soc.server.genericServer.StringConnection);
  public boolean processFirstCommand(java.lang.String, soc.server.genericServer.StringConnection);
  protected void serverUp();
  protected void serverDown();
  protected boolean newConnection1(soc.server.genericServer.StringConnection);
  protected void newConnection2(soc.server.genericServer.StringConnection);
  protected void leaveConnection(soc.server.genericServer.StringConnection);
  public synchronized void stopServer();
  public void removeConnection(soc.server.genericServer.StringConnection);
  protected void removeConnectionCleanup(soc.server.genericServer.StringConnection);
  public void addConnection(soc.server.genericServer.StringConnection);
  public void nameConnection(soc.server.genericServer.StringConnection) throws java.lang.IllegalArgumentException;
  public void clientVersionAdd(int);
  public void clientVersionRem(int);
  public int getMinConnectedCliVersion();
  public int getMaxConnectedCliVersion();
  protected synchronized void broadcast(java.lang.String);
  protected synchronized void broadcastToVers(java.lang.String, int, int);
  static int access$000(soc.server.genericServer.Server);
  static java.util.TreeMap access$100(soc.server.genericServer.Server);
  static boolean access$200(soc.server.genericServer.Server, java.util.TreeMap, boolean);
  static void access$300(soc.server.genericServer.Server, java.util.TreeMap);
  static int access$002(soc.server.genericServer.Server, int);
  static int access$008(soc.server.genericServer.Server);
  static {};
}
Compiled from "Server.java"
class soc.server.genericServer.Server$Command {
  public java.lang.String str;
  public soc.server.genericServer.StringConnection con;
  public soc.server.genericServer.Server$Command(java.lang.String, soc.server.genericServer.StringConnection);
}
Compiled from "Server.java"
public class soc.server.genericServer.Server$ConnExcepDelayedPrintTask extends java.util.TimerTask {
  public java.lang.Throwable excep;
  public java.lang.Object connData;
  public java.lang.String connHost;
  public boolean isArriveNotDepart;
  public soc.server.genericServer.StringConnection arrivingConn;
  public long thrownAt;
  final soc.server.genericServer.Server this$0;
  public soc.server.genericServer.Server$ConnExcepDelayedPrintTask(soc.server.genericServer.Server, boolean, java.lang.Throwable, soc.server.genericServer.StringConnection) throws java.lang.IllegalArgumentException;
  public void run();
}
Compiled from "Server.java"
class soc.server.genericServer.Server$ConnVersionCounter implements java.lang.Comparable {
  public final int vers;
  public int cliCount;
  public soc.server.genericServer.Server$ConnVersionCounter(int);
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object) throws java.lang.ClassCastException;
}
Compiled from "Server.java"
class soc.server.genericServer.Server$ConnVersionSetCheckerTask extends java.util.TimerTask {
  public soc.server.genericServer.Server$ConnVersionSetCheckerTask(soc.server.genericServer.Server);
  public void run();
}
Compiled from "Server.java"
public class soc.server.genericServer.Server$NetStringServerSocket implements soc.server.genericServer.StringServerSocket {
  final soc.server.genericServer.Server this$0;
  public soc.server.genericServer.Server$NetStringServerSocket(soc.server.genericServer.Server, int, soc.server.genericServer.Server) throws java.io.IOException;
  public soc.server.genericServer.StringConnection accept() throws java.net.SocketException, java.io.IOException;
  public void close() throws java.io.IOException;
}
Compiled from "Server.java"
class soc.server.genericServer.Server$Treater extends java.lang.Thread {
  final soc.server.genericServer.Server this$0;
  public soc.server.genericServer.Server$Treater(soc.server.genericServer.Server);
  public void run();
}
Compiled from "StringConnection.java"
public interface soc.server.genericServer.StringConnection {
  public abstract java.lang.String host();
  public abstract void put(java.lang.String) throws java.lang.IllegalStateException;
  public abstract void run();
  public abstract boolean isConnected();
  public abstract boolean connect();
  public abstract void disconnect();
  public abstract void disconnectSoft();
  public abstract java.lang.Object getData();
  public abstract java.lang.Object getAppData();
  public abstract void setData(java.lang.Object);
  public abstract void setAppData(java.lang.Object);
  public abstract java.lang.Exception getError();
  public abstract java.util.Date getConnectTime();
  public abstract int getVersion();
  public abstract void setVersion(int);
  public abstract void setVersion(int, boolean);
  public abstract boolean isVersionKnown();
  public abstract void setVersionTracking(boolean);
  public abstract boolean isInputAvailable();
  public abstract boolean wantsHideTimeoutMessage();
  public abstract void setHideTimeoutMessage(boolean);
}
Compiled from "StringServerSocket.java"
public interface soc.server.genericServer.StringServerSocket {
  public abstract soc.server.genericServer.StringConnection accept() throws java.net.SocketException, java.io.IOException;
  public abstract void close() throws java.io.IOException;
}
Compiled from "CappedQueue.java"
public class soc.util.CappedQueue {
  public soc.util.CappedQueue();
  public soc.util.CappedQueue(int);
  public synchronized void put(java.lang.Object) throws soc.util.CutoffExceededException;
  public synchronized java.lang.Object get();
  public synchronized boolean empty();
}
Compiled from "CutoffExceededException.java"
public class soc.util.CutoffExceededException extends java.lang.Exception {
  public soc.util.CutoffExceededException();
  public soc.util.CutoffExceededException(java.lang.String);
}
Compiled from "DebugRecorder.java"
public class soc.util.DebugRecorder {
  public static final int NOT_RECORDING;
  public static final int RECORDING;
  public soc.util.DebugRecorder();
  public void turnOn();
  public void turnOff();
  public boolean isOn();
  public void startRecording(java.lang.Object);
  public void stopRecording();
  public void suspend();
  public void resume();
  public void record(java.lang.String);
  public java.util.Vector getRecord(java.lang.Object);
  public void putRecord(java.lang.Object, java.util.Vector);
  public void eraseAllRecords();
}
Compiled from "IntPair.java"
public class soc.util.IntPair {
  public int a;
  public int b;
  public soc.util.IntPair(int, int);
  public boolean equals(soc.util.IntPair);
  public int getA();
  public int getB();
  public void setA(int);
  public void setB(int);
  public java.lang.String toString();
}
Compiled from "MutexFlag.java"
public class soc.util.MutexFlag {
  boolean flag;
  public soc.util.MutexFlag();
  public boolean getState();
  public void setState(boolean);
}
Compiled from "NodeLenVis.java"
public class soc.util.NodeLenVis {
  public int node;
  public int len;
  public java.util.Vector vis;
  public soc.util.NodeLenVis(int, int, java.util.Vector);
  public java.lang.String toString();
}
Compiled from "Pair.java"
public class soc.util.Pair {
  public soc.util.Pair(java.lang.Object, java.lang.Object);
  public boolean equals(soc.util.Pair);
  public java.lang.Object getA();
  public java.lang.Object getB();
  public void setA(java.lang.Object);
  public void setB(java.lang.Object);
}
Compiled from "Queue.java"
public class soc.util.Queue {
  public soc.util.Queue();
  public synchronized void put(java.lang.Object);
  public synchronized java.lang.Object get();
  public synchronized boolean empty();
  public synchronized void clear();
  public synchronized int size();
}
Compiled from "SOCGameBoardReset.java"
public class soc.util.SOCGameBoardReset implements java.io.Serializable {
  public soc.game.SOCGame newGame;
  public final int oldGameState;
  public boolean hadRobots;
  public int oldRobotCount;
  public soc.server.genericServer.StringConnection[] humanConns;
  public soc.server.genericServer.StringConnection[] robotConns;
  public boolean[] wasRobot;
  public soc.util.SOCGameBoardReset(soc.game.SOCGame, java.util.Vector);
  public static int sortPlayerConnections(soc.game.SOCGame, soc.game.SOCGame, java.util.Vector, soc.server.genericServer.StringConnection[], soc.server.genericServer.StringConnection[]);
}
Compiled from "SOCGameList.java"
public class soc.util.SOCGameList {
  protected java.util.Hashtable gameInfo;
  protected java.util.Hashtable gameData;
  protected boolean inUse;
  public soc.util.SOCGameList();
  public synchronized void takeMonitor();
  public synchronized void releaseMonitor();
  public boolean takeMonitorForGame(java.lang.String);
  public boolean releaseMonitorForGame(java.lang.String);
  public java.util.Enumeration getGames();
  public java.util.Enumeration getGamesData();
  public int size();
  public soc.game.SOCGame getGameData(java.lang.String);
  public java.util.Hashtable getGameOptions(java.lang.String);
  public java.lang.String getGameOptionsString(java.lang.String);
  public java.util.Hashtable parseGameOptions(java.lang.String);
  public boolean isGame(java.lang.String);
  public boolean isUnjoinableGame(java.lang.String);
  public synchronized void addGame(java.lang.String, java.lang.String, boolean);
  protected synchronized void addGame(java.lang.String, java.util.Hashtable, java.lang.String, boolean);
  public synchronized void addGames(soc.util.SOCGameList, int);
  public synchronized void addGames(java.util.Enumeration, int);
  public synchronized void deleteGame(java.lang.String);
}
Compiled from "SOCGameList.java"
public class soc.util.SOCGameList$GameInfo {
  public soc.util.MutexFlag mutex;
  public java.util.Hashtable opts;
  public java.lang.String optsStr;
  public boolean canJoin;
  public soc.util.SOCGameList$GameInfo(boolean, java.util.Hashtable);
  public soc.util.SOCGameList$GameInfo(boolean, java.lang.String);
  public java.util.Hashtable parseOptsStr();
  public void finalize();
}
Compiled from "SOCRobotParameters.java"
public class soc.util.SOCRobotParameters {
  protected int maxGameLength;
  protected int maxETA;
  protected float etaBonusFactor;
  protected float adversarialFactor;
  protected float leaderAdversarialFactor;
  protected float devCardMultiplier;
  protected float threatMultiplier;
  protected int strategyType;
  protected int tradeFlag;
  public soc.util.SOCRobotParameters(int, int, float, float, float, float, float, int, int);
  public soc.util.SOCRobotParameters(soc.util.SOCRobotParameters);
  public soc.util.SOCRobotParameters copyIfOptionChanged(java.util.Hashtable);
  public int getMaxGameLength();
  public int getMaxETA();
  public float getETABonusFactor();
  public float getAdversarialFactor();
  public float getLeaderAdversarialFactor();
  public float getDevCardMultiplier();
  public float getThreatMultiplier();
  public int getStrategyType();
  public int getTradeFlag();
  public java.lang.String toString();
}
Compiled from "Triple.java"
public class soc.util.Triple {
  public soc.util.Triple(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object getA();
  public java.lang.Object getB();
  public java.lang.Object getC();
  public void setA(java.lang.Object);
  public void setB(java.lang.Object);
  public void setC(java.lang.Object);
}
Compiled from "Version.java"
public class soc.util.Version {
  public static java.lang.String VERSION;
  public static java.lang.String VERSNUM;
  public static java.lang.String COPYRIGHT;
  public static java.lang.String BUILDNUM;
  public static java.lang.String JRE_MIN_VERSION;
  public static java.lang.String JRE_MIN_MAJOR;
  public static java.lang.String JRE_MIN_MINOR;
  public static java.lang.String JRE_MIN_EDIT;
  public soc.util.Version();
  public static java.lang.String version(int);
  public static java.lang.String version();
  public static int versionNumber();
  public static java.lang.String copyright();
  public static java.lang.String buildnum();
  public static java.lang.String minJREVersion();
  static boolean isJREValid();
  static {};
}
