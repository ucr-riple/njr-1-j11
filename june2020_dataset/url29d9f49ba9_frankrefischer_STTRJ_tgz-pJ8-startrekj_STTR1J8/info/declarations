Compiled from "STTR1.java"
public class startrekj.STTR1 extends startrekj.hpbasic.HPBasicProgram {
  static startrekj.hpbasic.NumericVariable A;
  static startrekj.hpbasic.NumericVariable B3;
  static startrekj.hpbasic.NumericVariable B9;
  static startrekj.hpbasic.NumericVariable C1;
  static startrekj.hpbasic.NumericVariable C2;
  static startrekj.hpbasic.NumericVariable D0;
  static startrekj.hpbasic.NumericVariable E;
  static startrekj.hpbasic.NumericVariable E0;
  static startrekj.hpbasic.NumericVariable H;
  static startrekj.hpbasic.NumericVariable H8;
  static startrekj.hpbasic.NumericVariable I;
  static startrekj.hpbasic.NumericVariable J;
  static startrekj.hpbasic.NumericVariable K3;
  static startrekj.hpbasic.NumericVariable K7;
  static startrekj.hpbasic.NumericVariable K9;
  static startrekj.hpbasic.NumericVariable NN;
  static startrekj.hpbasic.NumericVariable P;
  static startrekj.hpbasic.NumericVariable P0;
  static startrekj.hpbasic.NumericVariable Q1;
  static startrekj.hpbasic.NumericVariable Q2;
  static startrekj.hpbasic.NumericVariable S;
  static startrekj.hpbasic.NumericVariable R1;
  static startrekj.hpbasic.NumericVariable R2;
  static startrekj.hpbasic.NumericVariable S1;
  static startrekj.hpbasic.NumericVariable S2;
  static startrekj.hpbasic.NumericVariable S3;
  static startrekj.hpbasic.NumericVariable S8;
  static startrekj.hpbasic.NumericVariable S9;
  static startrekj.hpbasic.NumericVariable T;
  static startrekj.hpbasic.NumericVariable T0;
  static startrekj.hpbasic.NumericVariable T1;
  static startrekj.hpbasic.NumericVariable T7;
  static startrekj.hpbasic.NumericVariable T9;
  static startrekj.hpbasic.NumericVariable W1;
  static startrekj.hpbasic.NumericVariable X;
  static startrekj.hpbasic.NumericVariable X1;
  static startrekj.hpbasic.NumericVariable X2;
  static startrekj.hpbasic.NumericVariable Y;
  static startrekj.hpbasic.NumericVariable Z1;
  static startrekj.hpbasic.NumericVariable Z2;
  static startrekj.hpbasic.NumericVariable Z3;
  static startrekj.hpbasic.StringVariable A$;
  static startrekj.hpbasic.StringVariable C$;
  static startrekj.hpbasic.StringVariable D$;
  static startrekj.hpbasic.StringVariable E$;
  static startrekj.hpbasic.StringVariable Q$;
  static startrekj.hpbasic.StringVariable R$;
  static startrekj.hpbasic.StringVariable S$;
  static startrekj.hpbasic.StringVariable Z$;
  static startrekj.hpbasic.ArrayVariable C;
  static startrekj.hpbasic.ArrayVariable D;
  static startrekj.hpbasic.ArrayVariable G;
  static startrekj.hpbasic.ArrayVariable K;
  static startrekj.hpbasic.ArrayVariable N;
  static startrekj.hpbasic.ArrayVariable Z;
  static startrekj.hpbasic.FunctionVariable FND;
  static startrekj.hpbasic.NumericExpression FND_BODY;
  public startrekj.STTR1();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "STTR1.java"
final class startrekj.STTR1$1 implements startrekj.hpbasic.NumericExpression {
  startrekj.STTR1$1();
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "Arithmetic.java"
public final class startrekj.hpbasic.Arithmetic {
  public static java.lang.Number subtract(java.lang.Number, java.lang.Number);
  public static java.lang.Number add(java.lang.Number, java.lang.Number);
  public static java.lang.Number mult(java.lang.Number, java.lang.Number);
  public static java.lang.Number div(java.lang.Number, java.lang.Number);
  public static boolean greaterThan(java.lang.Number, java.lang.Number);
  public static boolean greaterThanOrEqual(java.lang.Number, java.lang.Number);
  public static boolean lessThan(java.lang.Number, java.lang.Number);
  public static boolean lessThanOrEqual(java.lang.Number, java.lang.Number);
  public static boolean equal(java.lang.Number, java.lang.Number);
  public static boolean notEqual(java.lang.Number, java.lang.Number);
  public static boolean bothIntegers(java.lang.Number, java.lang.Number);
  public static java.lang.Number abs(java.lang.Number);
}
Compiled from "ArrayPlace.java"
public class startrekj.hpbasic.ArrayPlace implements startrekj.hpbasic.NumericExpression {
  public startrekj.hpbasic.ArrayPlace(startrekj.hpbasic.ArrayVariable, startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public void setValue(java.lang.Number);
  public java.lang.Number getValue();
  public java.lang.String toString();
  public java.lang.Number evaluate();
}
Compiled from "ArrayVariable.java"
public class startrekj.hpbasic.ArrayVariable {
  public startrekj.hpbasic.ArrayVariable(java.lang.String);
  public void setSize(int, int);
  public java.lang.String getName();
  public java.lang.Number get(startrekj.hpbasic.NumericVariable, int);
  public java.lang.Number get(int, int);
  public startrekj.hpbasic.ArrayPlace at(java.lang.Number);
  public startrekj.hpbasic.ArrayPlace at(startrekj.hpbasic.NumericExpression);
  public startrekj.hpbasic.ArrayPlace at(java.lang.Number, java.lang.Number);
  public startrekj.hpbasic.ArrayPlace at(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public startrekj.hpbasic.ArrayPlace at(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public void setValue(int, int, java.lang.Number);
  public void setAllTo(java.lang.Number);
  public java.lang.String toString();
}
Compiled from "BooleanExpression.java"
public interface startrekj.hpbasic.BooleanExpression {
  public abstract boolean evaluate();
}
Compiled from "CONST.java"
public class startrekj.hpbasic.CONST implements startrekj.hpbasic.NumericExpression {
  public startrekj.hpbasic.CONST(java.lang.Number);
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "CONST_String.java"
public class startrekj.hpbasic.CONST_String implements startrekj.hpbasic.StringExpression {
  public startrekj.hpbasic.CONST_String(java.lang.String);
  public java.lang.String evaluate();
  public java.lang.String toString();
}
Compiled from "FunctionVariable.java"
public class startrekj.hpbasic.FunctionVariable implements startrekj.hpbasic.NumericExpression {
  public startrekj.hpbasic.FunctionVariable(java.lang.String);
  public void setBody(startrekj.hpbasic.NumericExpression);
  public java.lang.Number evaluate();
  public java.lang.String getName();
}
Compiled from "HPBasicProgram.java"
public class startrekj.hpbasic.HPBasicProgram {
  public static java.lang.Integer currentLineNumber;
  public static java.lang.Integer nextLineNumber;
  public static boolean isTraceOn;
  public static java.util.Map<java.lang.String, java.lang.Integer> maxValueForLoopVariable;
  public static java.util.Map<java.lang.String, java.lang.Integer> lineNumberForLoopVariable;
  public static startrekj.hpbasic.ProgramLines lines;
  public startrekj.hpbasic.HPBasicProgram();
  protected void addLines(startrekj.hpbasic.Line...);
  protected void run();
  public java.lang.String toString();
  public static java.lang.String getFormatString(int);
  static {};
}
Compiled from "Line.java"
public class startrekj.hpbasic.Line implements java.lang.Comparable<startrekj.hpbasic.Line> {
  public startrekj.hpbasic.Line(int, startrekj.hpbasic.Statement);
  public static startrekj.hpbasic.Line line(int, startrekj.hpbasic.Statement);
  public startrekj.hpbasic.Statement getStatement();
  public int getLineNumber();
  public int compareTo(startrekj.hpbasic.Line);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "NumericExpression.java"
public interface startrekj.hpbasic.NumericExpression {
  public abstract java.lang.Number evaluate();
}
Compiled from "NumericVariable.java"
public class startrekj.hpbasic.NumericVariable implements startrekj.hpbasic.NumericExpression {
  public startrekj.hpbasic.NumericVariable(java.lang.String);
  public java.lang.String getName();
  public void incrementByOne();
  public void setValue(java.lang.Number);
  public java.lang.Number getValue();
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "ProgramLines.java"
public class startrekj.hpbasic.ProgramLines {
  public startrekj.hpbasic.ProgramLines();
  public void add(startrekj.hpbasic.Line...);
  public java.lang.String toString();
  public startrekj.hpbasic.Statement getStatementAtLineNumber(int);
  public java.lang.Integer getNextLineNumberAfter(int);
  public int getFirstLineNumber();
  public int getLastLineNumber();
}
Compiled from "Statement.java"
public interface startrekj.hpbasic.Statement {
  public abstract void execute();
}
Compiled from "StringChunk.java"
public class startrekj.hpbasic.StringChunk implements startrekj.hpbasic.StringExpression {
  public startrekj.hpbasic.StringChunk(startrekj.hpbasic.StringExpression, startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public java.lang.String evaluate();
  public java.lang.String toString();
}
Compiled from "StringExpression.java"
public interface startrekj.hpbasic.StringExpression {
  public abstract java.lang.String evaluate();
}
Compiled from "StringVariable.java"
public class startrekj.hpbasic.StringVariable implements startrekj.hpbasic.StringExpression {
  java.lang.StringBuilder value;
  public startrekj.hpbasic.StringVariable(java.lang.String);
  public java.lang.String getName();
  public void insert(int, java.lang.String);
  public java.lang.String getValue();
  public void initialize(int);
  public void setValue(java.lang.String);
  public void replace(int, int, java.lang.String);
  public java.lang.String evaluate();
  public java.lang.String toString();
  public startrekj.hpbasic.StringExpression chunk(int, int);
  public startrekj.hpbasic.StringExpression chunk(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
}
Compiled from "ABS.java"
public class startrekj.hpbasic.functions.ABS implements startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.functions.ABS ABS(startrekj.hpbasic.NumericExpression);
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "ADD.java"
public class startrekj.hpbasic.functions.ADD implements startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.functions.ADD ADD(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public static startrekj.hpbasic.functions.ADD ADD(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "DIV.java"
public class startrekj.hpbasic.functions.DIV implements startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.functions.DIV DIV(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public static startrekj.hpbasic.functions.DIV DIV(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public static startrekj.hpbasic.functions.DIV DIV(java.lang.Number, startrekj.hpbasic.NumericExpression);
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "INT.java"
public class startrekj.hpbasic.functions.INT implements startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.functions.INT INT(startrekj.hpbasic.NumericExpression);
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "MULT.java"
public class startrekj.hpbasic.functions.MULT implements startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.functions.MULT MULT(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public static startrekj.hpbasic.functions.MULT MULT(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public static startrekj.hpbasic.functions.MULT MULT(java.lang.Number, startrekj.hpbasic.NumericExpression);
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "RND.java"
public class startrekj.hpbasic.functions.RND implements startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.functions.RND RND();
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "SQR.java"
public class startrekj.hpbasic.functions.SQR implements startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.functions.SQR SQR(startrekj.hpbasic.NumericExpression);
  public java.lang.String toString();
  public java.lang.Number evaluate();
}
Compiled from "SUBTRACT.java"
public class startrekj.hpbasic.functions.SUBTRACT implements startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.functions.SUBTRACT SUBTRACT(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public static startrekj.hpbasic.functions.SUBTRACT SUBTRACT(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "TIM.java"
public class startrekj.hpbasic.functions.TIM implements startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.functions.TIM TIM(int);
  public java.lang.Number evaluate();
  public java.lang.String toString();
}
Compiled from "EQ.java"
public class startrekj.hpbasic.operators.EQ implements startrekj.hpbasic.BooleanExpression {
  public static startrekj.hpbasic.operators.EQ EQ(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public static startrekj.hpbasic.operators.EQ EQ(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public boolean evaluate();
  public java.lang.String toString();
}
Compiled from "EQ_String.java"
public class startrekj.hpbasic.operators.EQ_String implements startrekj.hpbasic.BooleanExpression {
  public static startrekj.hpbasic.operators.EQ_String EQ(startrekj.hpbasic.StringExpression, java.lang.String);
  public static startrekj.hpbasic.operators.EQ_String EQ(startrekj.hpbasic.StringExpression, startrekj.hpbasic.StringExpression);
  public boolean evaluate();
  public java.lang.String toString();
}
Compiled from "GT.java"
public class startrekj.hpbasic.operators.GT implements startrekj.hpbasic.BooleanExpression {
  public static startrekj.hpbasic.operators.GT GT(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public static startrekj.hpbasic.operators.GT GT(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public boolean evaluate();
  public java.lang.String toString();
}
Compiled from "GTE.java"
public class startrekj.hpbasic.operators.GTE implements startrekj.hpbasic.BooleanExpression {
  public static startrekj.hpbasic.operators.GTE GTE(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public static startrekj.hpbasic.operators.GTE GTE(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public boolean evaluate();
  public java.lang.String toString();
}
Compiled from "LT.java"
public class startrekj.hpbasic.operators.LT implements startrekj.hpbasic.BooleanExpression {
  public static startrekj.hpbasic.operators.LT LT(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public static startrekj.hpbasic.operators.LT LT(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public boolean evaluate();
  public java.lang.String toString();
}
Compiled from "LTE.java"
public class startrekj.hpbasic.operators.LTE implements startrekj.hpbasic.BooleanExpression {
  public static startrekj.hpbasic.operators.LTE LTE(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public static startrekj.hpbasic.operators.LTE LTE(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public boolean evaluate();
  public java.lang.String toString();
}
Compiled from "NEQ.java"
public class startrekj.hpbasic.operators.NEQ implements startrekj.hpbasic.BooleanExpression {
  public static startrekj.hpbasic.operators.NEQ NEQ(startrekj.hpbasic.NumericExpression, java.lang.Number);
  public static startrekj.hpbasic.operators.NEQ NEQ(startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public boolean evaluate();
  public java.lang.String toString();
}
Compiled from "NEQ_String.java"
public class startrekj.hpbasic.operators.NEQ_String implements startrekj.hpbasic.BooleanExpression {
  public static startrekj.hpbasic.operators.NEQ_String NEQ(startrekj.hpbasic.StringExpression, java.lang.String);
  public static startrekj.hpbasic.operators.NEQ_String NEQ(startrekj.hpbasic.StringExpression, startrekj.hpbasic.StringExpression);
  public boolean evaluate();
  public java.lang.String toString();
}
Compiled from "OR.java"
public class startrekj.hpbasic.operators.OR implements startrekj.hpbasic.BooleanExpression {
  public static startrekj.hpbasic.operators.OR OR(startrekj.hpbasic.BooleanExpression, startrekj.hpbasic.BooleanExpression);
  public boolean evaluate();
  public java.lang.String toString();
}
Compiled from "SUBSTRING.java"
public class startrekj.hpbasic.operators.SUBSTRING implements startrekj.hpbasic.StringExpression {
  public static startrekj.hpbasic.operators.SUBSTRING SUBSTRING(startrekj.hpbasic.StringExpression, java.lang.Number, java.lang.Number);
  public static startrekj.hpbasic.operators.SUBSTRING SUBSTRING(startrekj.hpbasic.StringExpression, startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public java.lang.String toString();
  public java.lang.String evaluate();
}
Compiled from "DEF.java"
public class startrekj.hpbasic.statements.DEF implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.DEF DEF(startrekj.hpbasic.FunctionVariable, startrekj.hpbasic.NumericExpression);
  public void execute();
  public java.lang.String toString();
}
Compiled from "DIM.java"
public class startrekj.hpbasic.statements.DIM implements startrekj.hpbasic.Statement {
  public startrekj.hpbasic.statements.DIM(startrekj.hpbasic.ArrayVariable, int, int);
  public static startrekj.hpbasic.statements.DIM DIM(startrekj.hpbasic.ArrayVariable, int, int);
  public static startrekj.hpbasic.statements.DIM DIM(startrekj.hpbasic.ArrayVariable, int);
  public void execute();
  public java.lang.String toString();
}
Compiled from "DIM$.java"
public class startrekj.hpbasic.statements.DIM$ implements startrekj.hpbasic.Statement {
  public startrekj.hpbasic.statements.DIM$(startrekj.hpbasic.StringVariable, int);
  public static startrekj.hpbasic.statements.DIM$ DIM(startrekj.hpbasic.StringVariable, int);
  public void execute();
  public java.lang.String toString();
}
Compiled from "EXIT.java"
public class startrekj.hpbasic.statements.EXIT implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.EXIT EXIT();
  public void execute();
  public java.lang.String toString();
}
Compiled from "ExitException.java"
public class startrekj.hpbasic.statements.ExitException extends java.lang.RuntimeException {
  public startrekj.hpbasic.statements.ExitException();
}
Compiled from "FOR.java"
public class startrekj.hpbasic.statements.FOR implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.FOR FOR(startrekj.hpbasic.NumericVariable);
  public startrekj.hpbasic.statements.FOR FROM(java.lang.Number);
  public startrekj.hpbasic.statements.FOR FROM(startrekj.hpbasic.NumericExpression);
  public startrekj.hpbasic.statements.FOR TO(java.lang.Number);
  public startrekj.hpbasic.statements.FOR TO(startrekj.hpbasic.NumericExpression);
  public java.lang.String toString();
  public void execute();
}
Compiled from "GOSUB.java"
public class startrekj.hpbasic.statements.GOSUB implements startrekj.hpbasic.Statement {
  int lineNumber;
  public static startrekj.hpbasic.statements.GOSUB GOSUB(int);
  public java.lang.String toString();
  public void execute();
}
Compiled from "GOTO.java"
public class startrekj.hpbasic.statements.GOTO implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.GOTO GOTO(int);
  public static startrekj.hpbasic.statements.GOTO GOTO(startrekj.hpbasic.NumericExpression);
  public startrekj.hpbasic.statements.GOTO OF(int...);
  public void execute();
  public java.lang.String toString();
}
Compiled from "IF.java"
public class startrekj.hpbasic.statements.IF implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.IF IF(startrekj.hpbasic.BooleanExpression);
  public startrekj.hpbasic.statements.IF THEN(int);
  public java.lang.String toString();
  public void execute();
}
Compiled from "IMAGE.java"
public class startrekj.hpbasic.statements.IMAGE implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.IMAGE IMAGE();
  public startrekj.hpbasic.statements.IMAGE STRING(java.lang.String);
  public java.lang.String getFormatString();
  public java.lang.String toString();
  public void execute();
  public java.lang.String getImageString();
  public startrekj.hpbasic.statements.IMAGE FORMAT_D();
  public startrekj.hpbasic.Statement FORMAT_3_3D_STRING(java.lang.String);
  public startrekj.hpbasic.statements.IMAGE FORMAT_3D();
  public startrekj.hpbasic.statements.IMAGE FORMAT_4D();
  public startrekj.hpbasic.statements.IMAGE FORMAT_5D();
  public startrekj.hpbasic.statements.IMAGE FORMAT_6D();
  public startrekj.hpbasic.statements.IMAGE FORMAT_6A();
  public startrekj.hpbasic.statements.IMAGE FORMAT_15X();
  public startrekj.hpbasic.statements.IMAGE FORMAT_11X();
  public startrekj.hpbasic.statements.IMAGE FORMAT_9X();
  public startrekj.hpbasic.statements.IMAGE FORMAT_8_X_3A();
  public startrekj.hpbasic.statements.IMAGE FORMAT_8_3X_3D();
  public startrekj.hpbasic.statements.IMAGE FORMAT_8X();
}
Compiled from "INPUT.java"
public class startrekj.hpbasic.statements.INPUT implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.INPUT INPUT(startrekj.hpbasic.NumericVariable);
  public java.lang.String toString();
  public void execute();
}
Compiled from "INPUT_String.java"
public class startrekj.hpbasic.statements.INPUT_String implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.INPUT_String INPUT(startrekj.hpbasic.StringVariable);
  public java.lang.String toString();
  public void execute();
}
Compiled from "MAT.java"
public class startrekj.hpbasic.statements.MAT implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.MAT MAT(startrekj.hpbasic.ArrayVariable, java.lang.Number);
  public void execute();
  public java.lang.String toString();
}
Compiled from "NEXT.java"
public class startrekj.hpbasic.statements.NEXT implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.NEXT NEXT(startrekj.hpbasic.NumericVariable);
  public java.lang.String toString();
  public void execute();
}
Compiled from "PRINT.java"
public class startrekj.hpbasic.statements.PRINT implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.PRINT PRINT(java.lang.Object...);
  public java.lang.String toString();
  public void execute();
}
Compiled from "PRINT_USING.java"
public class startrekj.hpbasic.statements.PRINT_USING implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.PRINT_USING PRINT_USING(int, java.lang.Object...);
  public java.lang.String toString();
  public void execute();
}
Compiled from "REM.java"
public class startrekj.hpbasic.statements.REM implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.REM REM();
  public static startrekj.hpbasic.statements.REM REM(java.lang.String);
  public java.lang.String toString();
  public void execute();
}
Compiled from "REPLACE.java"
public class startrekj.hpbasic.statements.REPLACE implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.REPLACE REPLACE(startrekj.hpbasic.StringVariable, startrekj.hpbasic.NumericExpression, startrekj.hpbasic.NumericExpression);
  public startrekj.hpbasic.statements.REPLACE WITH(startrekj.hpbasic.StringExpression);
  public java.lang.String toString();
  public void execute();
}
Compiled from "RETURN.java"
public class startrekj.hpbasic.statements.RETURN implements startrekj.hpbasic.Statement {
  public static java.util.Stack<java.lang.Integer> lineNumberStack;
  public static startrekj.hpbasic.statements.RETURN RETURN();
  public java.lang.String toString();
  public void execute();
  static {};
}
Compiled from "SET_ArrayPlace.java"
public class startrekj.hpbasic.statements.SET_ArrayPlace implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.SET_ArrayPlace SET(startrekj.hpbasic.ArrayPlace...);
  public startrekj.hpbasic.statements.SET_ArrayPlace TO(int);
  public startrekj.hpbasic.statements.SET_ArrayPlace TO(startrekj.hpbasic.NumericExpression);
  public void execute();
  public java.lang.String toString();
}
Compiled from "SET_NumericVariable.java"
public class startrekj.hpbasic.statements.SET_NumericVariable implements startrekj.hpbasic.Statement,startrekj.hpbasic.NumericExpression {
  public static startrekj.hpbasic.statements.SET_NumericVariable SET(startrekj.hpbasic.NumericVariable, int);
  public static startrekj.hpbasic.statements.SET_NumericVariable SET(startrekj.hpbasic.NumericVariable, startrekj.hpbasic.NumericExpression);
  public void execute();
  public java.lang.String toString();
  public java.lang.Number evaluate();
}
Compiled from "SET_StringVariable.java"
public class startrekj.hpbasic.statements.SET_StringVariable implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.SET_StringVariable SET(startrekj.hpbasic.StringVariable, java.lang.Object);
  public static startrekj.hpbasic.statements.SET_StringVariable SET(startrekj.hpbasic.StringVariable, int, java.lang.Object);
  public void execute();
  public java.lang.String toString();
}
Compiled from "TRACE.java"
public class startrekj.hpbasic.statements.TRACE implements startrekj.hpbasic.Statement {
  public static startrekj.hpbasic.statements.TRACE TRACE(boolean);
  public void execute();
}
