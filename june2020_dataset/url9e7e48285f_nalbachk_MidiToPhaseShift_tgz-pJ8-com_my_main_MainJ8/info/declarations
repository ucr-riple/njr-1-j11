Compiled from "Config.java"
public abstract class com.my.config.Config {
  protected java.util.Map<java.lang.Integer, com.my.config.NotePhaseShift> mapMidiToPhaseShift;
  protected java.util.Map<com.my.config.NotePhaseShift, com.my.config.NoteEof> mapPhaseShiftToEof;
  public com.my.config.Config();
  protected abstract void initMapMidiToPhaseShift();
  protected abstract void initMapPhaseShiftToEof();
  public com.my.config.NoteEof getNoteEof(java.lang.Integer);
  public com.my.config.NotePhaseShift getNotePhaseShift(java.lang.Integer);
  protected com.my.config.NotePhaseShift getNotePhaseShiftDefault();
  public com.my.config.NoteEof getNoteEof(com.my.config.NotePhaseShift);
  protected com.my.config.NoteEof getNoteEofDefault();
  public abstract java.lang.Integer getNoteMidi(com.my.config.NotePhaseShift);
  public java.lang.Double getBpmMultiplier();
  public void setBpmMultiplier(java.lang.Double);
  public java.lang.Integer getMidiEventsPerStateMin();
  public void setMidiEventsPerStateMin(java.lang.Integer);
  public java.lang.Integer getTuning();
  public void setTuning(java.lang.Integer);
  static {};
}
Compiled from "ConfigBassReal4.java"
public class com.my.config.ConfigBassReal4 extends com.my.config.ConfigStrings implements java.io.Serializable {
  public com.my.config.ConfigBassReal4();
  protected java.lang.Integer getStringsCount();
  protected void initMapMidiToPhaseShift();
  public java.lang.Integer getNoteMidi(com.my.config.NotePhaseShift);
  static {};
}
Compiled from "ConfigBassReal5.java"
public class com.my.config.ConfigBassReal5 extends com.my.config.ConfigStrings implements java.io.Serializable {
  public com.my.config.ConfigBassReal5();
  protected java.lang.Integer getStringsCount();
  protected void initMapMidiToPhaseShift();
  public java.lang.Integer getNoteMidi(com.my.config.NotePhaseShift);
  static {};
}
Compiled from "ConfigBassReal6.java"
public class com.my.config.ConfigBassReal6 extends com.my.config.ConfigStrings implements java.io.Serializable {
  public com.my.config.ConfigBassReal6();
  protected java.lang.Integer getStringsCount();
  protected void initMapMidiToPhaseShift();
  public java.lang.Integer getNoteMidi(com.my.config.NotePhaseShift);
  static {};
}
Compiled from "ConfigDrums.java"
public class com.my.config.ConfigDrums extends com.my.config.Config implements java.io.Serializable {
  public com.my.config.ConfigDrums();
  protected com.my.config.NotePhaseShift getNotePhaseShiftDefault();
  protected com.my.config.NoteEof getNoteEofDefault();
  protected void initMapMidiToPhaseShift();
  protected void initMapPhaseShiftToEof();
  public java.lang.Integer getNoteMidi(com.my.config.NotePhaseShift);
  static {};
}
Compiled from "ConfigFile.java"
public class com.my.config.ConfigFile {
  public com.my.config.ConfigFile();
  public static <T extends com.my.config.Config> void write(T);
  public static <T> T read(java.lang.String, java.lang.Class<? extends com.my.config.Config>);
  static {};
}
Compiled from "ConfigGuitarReal6.java"
public class com.my.config.ConfigGuitarReal6 extends com.my.config.ConfigStrings implements java.io.Serializable {
  public com.my.config.ConfigGuitarReal6();
  protected void initMapMidiToPhaseShift();
  public java.lang.Integer getNoteMidi(com.my.config.NotePhaseShift);
  static {};
}
Compiled from "ConfigStrings.java"
public abstract class com.my.config.ConfigStrings extends com.my.config.Config {
  public com.my.config.ConfigStrings();
  protected java.lang.Integer getStringsCount();
  protected java.lang.Integer getFretsCount();
  protected void initMapPhaseShiftToEof();
  static {};
}
Compiled from "NoteEof.java"
public class com.my.config.NoteEof implements java.io.Serializable, java.lang.Comparable<com.my.config.NoteEof> {
  protected java.lang.Integer lineNr;
  protected java.lang.Integer fret;
  protected java.lang.Boolean cymbal;
  protected java.lang.Boolean closed;
  protected java.lang.String comment;
  public com.my.config.NoteEof();
  public com.my.config.NoteEof(java.lang.Integer, java.lang.Integer);
  public com.my.config.NoteEof(java.lang.Integer, java.lang.Boolean);
  public java.lang.Integer getLineNr();
  public void setLineNr(java.lang.Integer);
  public java.lang.Integer getFret();
  public void setFret(java.lang.Integer);
  public java.lang.Boolean getCymbal();
  public void setCymbal(java.lang.Boolean);
  public java.lang.Boolean getClosed();
  public void setClosed(java.lang.Boolean);
  public java.lang.String getComment();
  public void setComment(java.lang.String);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(com.my.config.NoteEof);
  public int compareTo(java.lang.Object);
}
Compiled from "NotePhaseShift.java"
public class com.my.config.NotePhaseShift implements java.io.Serializable, java.lang.Comparable<com.my.config.NotePhaseShift> {
  protected java.lang.Integer lineNr;
  protected java.lang.Integer fret;
  protected java.lang.Boolean closed;
  protected java.lang.String comment;
  public com.my.config.NotePhaseShift();
  public com.my.config.NotePhaseShift(java.lang.Integer);
  public com.my.config.NotePhaseShift(java.lang.Integer, java.lang.Integer);
  public java.lang.Integer getLineNr();
  public void setLineNr(java.lang.Integer);
  public java.lang.Integer getFret();
  public void setFret(java.lang.Integer);
  public java.lang.Boolean getClosed();
  public void setClosed(java.lang.Boolean);
  public java.lang.String getComment();
  public void setComment(java.lang.String);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(com.my.config.NotePhaseShift);
  public int compareTo(java.lang.Object);
}
Compiled from "MidiConverter.java"
public class com.my.converter.MidiConverter {
  protected java.lang.String filePath;
  protected javax.sound.midi.Track metaTrack;
  protected java.lang.Boolean bpmReplaced;
  public com.my.converter.MidiConverter();
  public void convertFiles();
  protected java.util.List<java.io.File> findFilesMidi(java.io.File);
  protected void convertFile(java.io.File);
  protected void writeMidiNew(com.my.midi.MidiFile);
  protected void modifyMidi(com.my.midi.MidiFile, com.my.midi.TabFile);
  protected void writeImage(com.my.midi.MidiFile, java.lang.Integer);
  protected void modifyTrack(com.my.phaseshift.Instruments, javax.sound.midi.Track, com.my.midi.TabTrack);
  static {};
}
Compiled from "MidiConverter.java"
class com.my.converter.MidiConverter$1 implements java.io.FilenameFilter {
  final com.my.converter.MidiConverter this$0;
  com.my.converter.MidiConverter$1(com.my.converter.MidiConverter);
  public boolean accept(java.io.File, java.lang.String);
}
Compiled from "MidiConverter.java"
class com.my.converter.MidiConverter$2 {
  static final int[] $SwitchMap$com$my$phaseshift$Instruments;
  static {};
}
Compiled from "TabConverter.java"
public class com.my.converter.TabConverter {
  public com.my.converter.TabConverter();
}
Compiled from "TrackConverter.java"
public abstract class com.my.converter.TrackConverter {
  protected com.my.config.Config config;
  public static int toUnsignedByte(byte);
  public com.my.converter.TrackConverter(com.my.config.Config);
  public void convert(javax.sound.midi.Track, javax.sound.midi.Track, com.my.midi.TabTrack);
  protected void modifyTrackName(javax.sound.midi.Track);
  protected abstract java.lang.String getTrackName();
  protected abstract void modifyTrackNotes(javax.sound.midi.Track, com.my.midi.TabTrack);
  static {};
}
Compiled from "TrackConverterBassReal.java"
public class com.my.converter.TrackConverterBassReal extends com.my.converter.TrackConverterStringsReal {
  public com.my.converter.TrackConverterBassReal(com.my.config.Config);
  protected java.lang.String getTrackName();
  static {};
}
Compiled from "TrackConverterDrums.java"
public class com.my.converter.TrackConverterDrums extends com.my.converter.TrackConverter {
  public com.my.converter.TrackConverterDrums(com.my.config.Config);
  protected java.lang.String getTrackName();
  public int getData1(com.my.config.NoteEof);
  protected void modifyTrackNotes(javax.sound.midi.Track, com.my.midi.TabTrack);
  public void modifyTrackNote(javax.sound.midi.MidiEvent, com.my.config.NoteEof);
  static {};
}
Compiled from "TrackConverterGuitarReal.java"
public class com.my.converter.TrackConverterGuitarReal extends com.my.converter.TrackConverterStringsReal {
  public com.my.converter.TrackConverterGuitarReal(com.my.config.Config);
  protected java.lang.String getTrackName();
  static {};
}
Compiled from "TrackConverterMeta.java"
public class com.my.converter.TrackConverterMeta extends com.my.converter.TrackConverter {
  public com.my.converter.TrackConverterMeta(com.my.config.Config);
  protected java.lang.String getTrackName();
  protected void modifyTrackNotes(javax.sound.midi.Track, com.my.midi.TabTrack);
  public void convert(javax.sound.midi.Track);
  public void modifyTrackBpm(javax.sound.midi.Track);
  static {};
}
Compiled from "TrackConverterStringsReal.java"
public abstract class com.my.converter.TrackConverterStringsReal extends com.my.converter.TrackConverter {
  public com.my.converter.TrackConverterStringsReal(com.my.config.Config);
  protected void modifyTrackNotes(javax.sound.midi.Track, com.my.midi.TabTrack);
  public int getData1(com.my.config.NoteEof);
  public int getData2(com.my.config.NoteEof);
  protected com.my.config.NotePhaseShift getNotePhaseShiftFromTab(com.my.midi.TabPosition, com.my.config.NotePhaseShift);
  static {};
}
Compiled from "Main.java"
public class com.my.main.Main {
  public com.my.main.Main();
  public static void main(java.lang.String[]);
}
Compiled from "Note.java"
public class com.my.main.Note {
  protected java.lang.Long start;
  protected java.lang.Long duration;
  protected java.lang.Integer value;
  public com.my.main.Note(java.lang.Long, java.lang.Long, java.lang.Integer);
  public java.lang.Long getStart();
  public void setStart(java.lang.Long);
  public java.lang.Long getDuration();
  public void setDuration(java.lang.Long);
  public java.lang.Integer getValue();
  public void setValue(java.lang.Integer);
  public java.lang.String toString();
}
Compiled from "Song.java"
public class com.my.main.Song {
  protected java.lang.String artist;
  protected java.lang.String title;
  protected java.lang.Integer bpm;
  protected java.lang.Long length;
  protected com.my.phaseshift.Instruments instrument;
  protected java.util.Set<java.lang.Integer> noteValues;
  protected java.util.List<com.my.main.Note> notes;
  public com.my.main.Song();
  public com.my.main.Song(java.lang.String, java.lang.String, java.lang.Integer, java.io.File, java.lang.Integer);
  protected void parseMidi(java.io.File, java.lang.Integer) throws javax.sound.midi.InvalidMidiDataException, java.io.IOException;
  public java.lang.String getArtist();
  public void setArtist(java.lang.String);
  public java.lang.String getTitle();
  public void setTitle(java.lang.String);
  public java.lang.Integer getBpm();
  public void setBpm(java.lang.Integer);
  public java.lang.Long getLength();
  public void setLength(java.lang.Long);
  public com.my.phaseshift.Instruments getInstrument();
  public void setInstrument(com.my.phaseshift.Instruments);
  public java.util.Set<java.lang.Integer> getNoteValues();
  public void setNoteValues(java.util.Set<java.lang.Integer>);
  public java.util.List<com.my.main.Note> getNotes();
  public void setNotes(java.util.List<com.my.main.Note>);
  public java.lang.String toString();
  static {};
}
Compiled from "NotesPhaseShift.java"
public final class com.my.mapper.NotesPhaseShift extends java.lang.Enum<com.my.mapper.NotesPhaseShift> {
  public static final com.my.mapper.NotesPhaseShift DRUMS_BASS;
  public static final com.my.mapper.NotesPhaseShift DRUMS_SNARE;
  public static final com.my.mapper.NotesPhaseShift DRUMS_HIHAT;
  public static final com.my.mapper.NotesPhaseShift DRUMS_TOM_1;
  public static final com.my.mapper.NotesPhaseShift DRUMS_CC_1;
  public static final com.my.mapper.NotesPhaseShift DRUMS_TOM_2;
  public static final com.my.mapper.NotesPhaseShift DRUMS_CC_2;
  public static final com.my.mapper.NotesPhaseShift DRUMS_TOM_3;
  public static com.my.mapper.NotesPhaseShift[] values();
  public static com.my.mapper.NotesPhaseShift valueOf(java.lang.String);
  public java.lang.Integer getLineNumber();
  public java.awt.Color getColor();
  static {};
}
Compiled from "NotesPhaseShift.java"
class com.my.mapper.NotesPhaseShift$1 {
  static final int[] $SwitchMap$com$my$mapper$NotesPhaseShift;
  static {};
}
Compiled from "MidiFile.java"
public class com.my.midi.MidiFile {
  protected java.lang.String filePath;
  protected java.lang.String fileName;
  protected java.lang.String fileNameNoEnding;
  protected java.lang.String songArtist;
  protected java.lang.String songTitle;
  protected java.util.Map<java.lang.Integer, com.my.phaseshift.Instruments> instruments;
  protected javax.sound.midi.Sequence sequence;
  protected java.util.List<javax.sound.midi.Track> tracks;
  public com.my.midi.MidiFile(java.io.File) throws javax.sound.midi.InvalidMidiDataException, java.io.IOException;
  protected void readInfoFromFileName(java.lang.String);
  protected void readInstruments(java.lang.String);
  public java.lang.String getFilePath();
  public void setFilePath(java.lang.String);
  public java.lang.String getFileName();
  public void setFileName(java.lang.String);
  public java.lang.String getFileNameNoEnding();
  public void setFileNameNoEnding(java.lang.String);
  public java.lang.String getSongArtist();
  public void setSongArtist(java.lang.String);
  public java.lang.String getSongTitle();
  public void setSongTitle(java.lang.String);
  public java.util.Map<java.lang.Integer, com.my.phaseshift.Instruments> getInstruments();
  public void setInstruments(java.util.Map<java.lang.Integer, com.my.phaseshift.Instruments>);
  public javax.sound.midi.Sequence getSequence();
  public void setSequence(javax.sound.midi.Sequence);
  public java.util.List<javax.sound.midi.Track> getTracks();
  public void setTracks(java.util.List<javax.sound.midi.Track>);
  static {};
}
Compiled from "MidiLogger.java"
public class com.my.midi.MidiLogger {
  public com.my.midi.MidiLogger();
  public static void logTrack(java.lang.String, javax.sound.midi.Track);
  static {};
}
Compiled from "TabFile.java"
public class com.my.midi.TabFile {
  protected java.lang.String filePath;
  protected java.lang.String fileName;
  protected java.lang.String fileNameNoEnding;
  protected java.util.List<com.my.midi.TabTrack> tracks;
  public com.my.midi.TabFile(java.io.File);
  protected java.util.List<com.my.midi.TabTrack> readTracks(java.io.File);
  protected java.lang.String readFileContent(java.io.File);
  public java.lang.String getFilePath();
  public void setFilePath(java.lang.String);
  public java.lang.String getFileName();
  public void setFileName(java.lang.String);
  public java.lang.String getFileNameNoEnding();
  public void setFileNameNoEnding(java.lang.String);
  public java.util.List<com.my.midi.TabTrack> getTracks();
  public void setTracks(java.util.List<com.my.midi.TabTrack>);
  static {};
}
Compiled from "TabPosition.java"
public class com.my.midi.TabPosition {
  public com.my.midi.TabPosition(java.util.List<java.lang.Integer>);
  public java.util.List<com.my.config.NotePhaseShift> getNotes();
  public void setNotes(java.util.List<com.my.config.NotePhaseShift>);
  public java.lang.String toString();
}
Compiled from "TabTrack.java"
public class com.my.midi.TabTrack {
  public com.my.midi.TabTrack(java.lang.String);
  public void init();
  protected java.util.List<java.util.List<java.lang.Integer>> readNotesByTrackRow(java.lang.String);
  protected boolean isNumberOnPosition(java.util.List<java.lang.StringBuilder>, int);
  protected void replaceDummiesOnPosition(java.util.List<java.lang.StringBuilder>, int);
  protected java.util.List<java.lang.Integer> readNotes(java.lang.String);
  protected java.util.List<com.my.midi.TabPosition> convertToPositions(java.util.List<java.util.List<java.lang.Integer>>);
  public java.lang.Integer getLinesCount();
  public void setLinesCount(java.lang.Integer);
  public java.util.List<com.my.midi.TabPosition> getPositions();
  public void setPositions(java.util.List<com.my.midi.TabPosition>);
  public com.my.midi.TabPosition getPositionByIndex(int);
  static {};
}
Compiled from "Difficulties.java"
public final class com.my.phaseshift.Difficulties extends java.lang.Enum<com.my.phaseshift.Difficulties> {
  public static final com.my.phaseshift.Difficulties EASY;
  public static final com.my.phaseshift.Difficulties MIDDLE;
  public static final com.my.phaseshift.Difficulties HARD;
  public static final com.my.phaseshift.Difficulties EXPERT;
  public static final com.my.phaseshift.Difficulties EXPERT_PLUS;
  public static com.my.phaseshift.Difficulties[] values();
  public static com.my.phaseshift.Difficulties valueOf(java.lang.String);
  static {};
}
Compiled from "Instruments.java"
public final class com.my.phaseshift.Instruments extends java.lang.Enum<com.my.phaseshift.Instruments> {
  public static final com.my.phaseshift.Instruments DRUMS;
  public static final com.my.phaseshift.Instruments DRUMS_ADVANCED;
  public static final com.my.phaseshift.Instruments DRUMS_REAL;
  public static final com.my.phaseshift.Instruments GUITAR;
  public static final com.my.phaseshift.Instruments GUITAR_ADVANCED;
  public static final com.my.phaseshift.Instruments GUITAR_REAL_6;
  public static final com.my.phaseshift.Instruments BASS;
  public static final com.my.phaseshift.Instruments BASS_ADVANCED;
  public static final com.my.phaseshift.Instruments BASS_REAL_4;
  public static final com.my.phaseshift.Instruments BASS_REAL_5;
  public static final com.my.phaseshift.Instruments BASS_REAL_6;
  public static final com.my.phaseshift.Instruments KEYS;
  public static final com.my.phaseshift.Instruments KEYS_ADVANCED;
  public static final com.my.phaseshift.Instruments KEYS_REAL;
  java.lang.String trackName;
  public static com.my.phaseshift.Instruments[] values();
  public static com.my.phaseshift.Instruments valueOf(java.lang.String);
  public java.lang.String getTrackName();
  protected void setTrackName(java.lang.String);
  static {};
}
Compiled from "Highway.java"
public class com.my.print.Highway {
  protected final int lineWidth;
  protected final double scaleX;
  protected final double scaleY;
  protected com.my.main.Song song;
  public com.my.print.Highway(com.my.main.Song);
  public java.awt.image.BufferedImage generateImage();
}
Compiled from "Line.java"
public class com.my.print.Line {
  protected java.awt.Color color;
  public com.my.print.Line(java.awt.Color);
  public java.awt.Color getColor();
  public void setColor(java.awt.Color);
}
