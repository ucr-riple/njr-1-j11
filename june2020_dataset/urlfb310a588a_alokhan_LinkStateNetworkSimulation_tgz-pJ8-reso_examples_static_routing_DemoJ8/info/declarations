Compiled from "Dijkstra.java"
public class dijkstra.Dijkstra {
  public dijkstra.Dijkstra(dijkstra.Graph);
  public void calculate(dijkstra.FibonacciHeapNode);
  public java.util.LinkedList<dijkstra.FibonacciHeapNode> getPath(dijkstra.FibonacciHeapNode);
  public int getDistanceOfPath(java.util.List<dijkstra.FibonacciHeapNode>);
}
Compiled from "Edge.java"
public class dijkstra.Edge {
  public dijkstra.Edge(java.lang.String, dijkstra.FibonacciHeapNode, dijkstra.FibonacciHeapNode, int);
  public java.lang.String getId();
  public dijkstra.FibonacciHeapNode getDestination();
  public dijkstra.FibonacciHeapNode getSource();
  public int getWeight();
  public void setWeight(int);
  public java.lang.String toString();
}
Compiled from "FibonacciHeap.java"
public class dijkstra.FibonacciHeap {
  public dijkstra.FibonacciHeap();
  public boolean isEmpty();
  public void clear();
  public void decreaseKey(dijkstra.FibonacciHeapNode, double);
  public void delete(dijkstra.FibonacciHeapNode);
  public void insert(dijkstra.FibonacciHeapNode, double);
  public dijkstra.FibonacciHeapNode min();
  public dijkstra.FibonacciHeapNode removeMin();
  public int size();
  public static dijkstra.FibonacciHeap union(dijkstra.FibonacciHeap, dijkstra.FibonacciHeap);
  public java.lang.String toString();
  protected void cascadingCut(dijkstra.FibonacciHeapNode);
  protected void consolidate();
  protected void cut(dijkstra.FibonacciHeapNode, dijkstra.FibonacciHeapNode);
  protected void link(dijkstra.FibonacciHeapNode, dijkstra.FibonacciHeapNode);
  static {};
}
Compiled from "FibonacciHeapNode.java"
public class dijkstra.FibonacciHeapNode {
  reso.ip.IPAddress data;
  dijkstra.FibonacciHeapNode child;
  dijkstra.FibonacciHeapNode left;
  dijkstra.FibonacciHeapNode parent;
  dijkstra.FibonacciHeapNode right;
  boolean mark;
  double key;
  int degree;
  public dijkstra.FibonacciHeapNode(reso.ip.IPAddress);
  public final double getKey();
  public final reso.ip.IPAddress getData();
  public java.lang.String toString();
}
Compiled from "Graph.java"
public class dijkstra.Graph {
  public dijkstra.Graph(java.util.Collection<dijkstra.FibonacciHeapNode>, java.util.Collection<dijkstra.Edge>);
  public java.util.List<dijkstra.FibonacciHeapNode> getNodes();
  public java.util.List<dijkstra.Edge> getEdges();
}
Compiled from "AttrChangeTimer.java"
public class linkStateRouting.AttrChangeTimer extends reso.common.AbstractTimer {
  public linkStateRouting.AttrChangeTimer(reso.scheduler.AbstractScheduler, double, boolean, reso.common.Network);
  protected void run() throws java.lang.Exception;
}
Compiled from "Demo.java"
public class linkStateRouting.Demo {
  public static final java.lang.String TOPO_FILE;
  public linkStateRouting.Demo();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "HelloMessage.java"
public class linkStateRouting.HelloMessage implements reso.common.Message {
  public final reso.ip.IPAddress routerId;
  public final java.util.List<reso.ip.IPAddress> neighborList;
  public final int neighborNumber;
  public linkStateRouting.HelloMessage(reso.ip.IPAddress, java.util.Set<reso.ip.IPAddress>);
}
Compiled from "HelloTimer.java"
public class linkStateRouting.HelloTimer extends reso.common.AbstractTimer {
  public linkStateRouting.HelloTimer(reso.scheduler.AbstractScheduler, double, boolean);
  public linkStateRouting.HelloTimer(reso.scheduler.AbstractScheduler, double, boolean, linkStateRouting.LinkStateRoutingProtocol);
  protected void run() throws java.lang.Exception;
}
Compiled from "LSPTimer.java"
public class linkStateRouting.LSPTimer extends reso.common.AbstractTimer {
  public linkStateRouting.LSPTimer(reso.scheduler.AbstractScheduler, double, boolean);
  public linkStateRouting.LSPTimer(reso.scheduler.AbstractScheduler, double, boolean, linkStateRouting.LinkStateRoutingProtocol);
  protected void run() throws java.lang.Exception;
}
Compiled from "LinkState.java"
public class linkStateRouting.LinkState {
  public final reso.ip.IPAddress routerId;
  public final int metric;
  public final reso.ip.IPInterfaceAdapter routerInterface;
  public linkStateRouting.LinkState(reso.ip.IPAddress, int, reso.ip.IPInterfaceAdapter);
  public java.lang.String toString();
}
Compiled from "LinkStateMessage.java"
public class linkStateRouting.LinkStateMessage implements reso.common.Message {
  public reso.ip.IPAddress routerId;
  public java.util.List<linkStateRouting.LinkState> linkStates;
  public static int sequence;
  public linkStateRouting.LinkStateMessage(reso.ip.IPAddress);
  public int getSequence();
  public java.util.List<linkStateRouting.LinkState> getLinkStates();
  public linkStateRouting.LinkStateMessage();
  public void addLS(reso.ip.IPAddress, int, reso.ip.IPInterfaceAdapter);
  public void addLS(linkStateRouting.LinkState);
  public java.lang.String toString();
  static {};
}
Compiled from "LinkStateRoutingEntry.java"
public class linkStateRouting.LinkStateRoutingEntry extends reso.ip.IPRouteEntry {
  public linkStateRouting.LinkState ls;
  public linkStateRouting.LinkStateRoutingEntry(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter, linkStateRouting.LinkState);
  public java.lang.String toString();
}
Compiled from "LinkStateRoutingProtocol.java"
public class linkStateRouting.LinkStateRoutingProtocol extends reso.common.AbstractApplication implements reso.ip.IPInterfaceListener,reso.common.InterfaceAttrListener {
  public static final java.lang.String PROTOCOL_NAME;
  public static final int IP_PROTO_LS;
  public final java.util.Map<reso.ip.IPAddress, linkStateRouting.LinkStateMessage> LSDB;
  public final java.util.Map<reso.ip.IPAddress, linkStateRouting.LinkState> neighborList;
  public linkStateRouting.LinkStateRoutingProtocol(reso.ip.IPRouter, int, int);
  public void start() throws java.lang.Exception;
  public void stop();
  public void receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram) throws java.lang.Exception;
  public void attrChanged(reso.common.Interface, java.lang.String);
  public void SendHelloToAllInterfaces() throws java.lang.Exception;
  public void SendLSPToAllInterfaces() throws java.lang.Exception;
  static {};
}
Compiled from "AbstractApplication.java"
public abstract class reso.common.AbstractApplication {
  protected reso.common.Host host;
  public final java.lang.String name;
  public reso.common.AbstractApplication(reso.common.Host, java.lang.String);
  public reso.common.Host getHost();
  public abstract void start() throws java.lang.Exception;
  public abstract void stop();
}
Compiled from "AbstractHardwareInterface.java"
public abstract class reso.common.AbstractHardwareInterface<M extends reso.common.Message> extends reso.common.AbstractInterface implements reso.common.HardwareInterface<M> {
  protected final reso.common.ListenerList<reso.common.MessageListener<M>> listeners;
  public reso.common.AbstractHardwareInterface(reso.common.Node, java.lang.String);
  public boolean isConnected();
  public boolean isConnectedTo(reso.common.Link<M>);
  public reso.common.Link<M> getLink();
  public void connectTo(reso.common.Link<M>) throws java.lang.Exception;
  public void addListener(reso.common.MessageListener<M>);
  public void removeListener(reso.common.MessageListener<M>);
  protected void toListeners(M) throws java.lang.Exception;
}
Compiled from "AbstractInterface.java"
public abstract class reso.common.AbstractInterface implements reso.common.Interface {
  protected final reso.common.ListenerList<reso.common.InterfaceAttrListener> attrListeners;
  public final reso.common.Node node;
  static final boolean $assertionsDisabled;
  public reso.common.AbstractInterface(reso.common.Node, java.lang.String);
  public void setIndex(int);
  public final java.lang.String getName();
  public final java.lang.String getType();
  public int getIndex();
  public reso.common.Node getNode();
  public java.lang.String toString();
  public void up();
  public void down();
  public boolean isActive();
  protected void defineAttribute(java.lang.String, java.lang.Object, boolean);
  protected void setAttribute(java.lang.String, java.lang.Object);
  public java.lang.Object getAttribute(java.lang.String);
  public void addAttrListener(reso.common.InterfaceAttrListener);
  public void removeAttrListener(reso.common.InterfaceAttrListener);
  protected void toAttrListeners(java.lang.String);
  static {};
}
Compiled from "AbstractMessage.java"
public abstract class reso.common.AbstractMessage implements reso.common.Message {
  public reso.common.AbstractMessage();
}
Compiled from "AbstractMessageWithPayload.java"
public class reso.common.AbstractMessageWithPayload implements reso.common.MessageWithPayload {
  public reso.common.AbstractMessageWithPayload(int, reso.common.Message);
  public reso.common.Message getPayload();
  public int getProtocol();
}
Compiled from "AbstractTimer.java"
public abstract class reso.common.AbstractTimer {
  protected final reso.scheduler.AbstractScheduler scheduler;
  protected boolean running;
  public reso.common.AbstractTimer(reso.scheduler.AbstractScheduler, double, boolean);
  public void start();
  public void stop();
  protected abstract void run() throws java.lang.Exception;
  static void access$000(reso.common.AbstractTimer) throws java.lang.Exception;
}
Compiled from "AbstractTimer.java"
class reso.common.AbstractTimer$1 extends reso.scheduler.AbstractEvent {
  final reso.common.AbstractTimer this$0;
  reso.common.AbstractTimer$1(reso.common.AbstractTimer, double);
  public void run() throws java.lang.Exception;
}
Compiled from "EventMessageSend.java"
public class reso.common.EventMessageSend<M extends reso.common.Message> extends reso.scheduler.AbstractEvent {
  public final M msg;
  public final reso.common.HardwareInterface<M> src;
  public final reso.common.MessageListener<M> dst;
  public reso.common.EventMessageSend(double, M, reso.common.HardwareInterface<M>, reso.common.MessageListener<M>);
  public void run() throws java.lang.Exception;
}
Compiled from "HardwareInterface.java"
public interface reso.common.HardwareInterface<M extends reso.common.Message> extends reso.common.Interface {
  public abstract void receive(M) throws java.lang.Exception;
  public abstract void send(M) throws java.lang.Exception;
  public abstract void connectTo(reso.common.Link<M>) throws java.lang.Exception;
  public abstract boolean isConnected();
  public abstract boolean isConnectedTo(reso.common.Link<M>);
  public abstract reso.common.Link<M> getLink();
  public abstract void addListener(reso.common.MessageListener<M>);
  public abstract void removeListener(reso.common.MessageListener<M>);
}
Compiled from "Host.java"
public class reso.common.Host extends reso.common.Node {
  public reso.common.Host(java.lang.String);
  public void addApplication(reso.common.AbstractApplication) throws java.lang.Exception;
  public void addListener(reso.common.MessageListener<?>);
  public void start() throws java.lang.Exception;
  public void stop();
}
Compiled from "Interface.java"
public interface reso.common.Interface {
  public static final java.lang.String STATE;
  public abstract java.lang.String getName();
  public abstract java.lang.String getType();
  public abstract int getIndex();
  public abstract reso.common.Node getNode();
  public abstract void setIndex(int);
  public abstract void up();
  public abstract void down();
  public abstract boolean isActive();
  public abstract java.lang.Object getAttribute(java.lang.String);
  public abstract void addAttrListener(reso.common.InterfaceAttrListener);
  public abstract void removeAttrListener(reso.common.InterfaceAttrListener);
}
Compiled from "InterfaceAttrListener.java"
public interface reso.common.InterfaceAttrListener {
  public abstract void attrChanged(reso.common.Interface, java.lang.String);
}
Compiled from "Link.java"
public class reso.common.Link<M extends reso.common.Message> implements reso.common.MessageListener<M> {
  public final int SPEED_OF_LIGHT;
  public final double length;
  public reso.common.Link(reso.common.HardwareInterface<M>, reso.common.HardwareInterface<M>, double) throws java.lang.Exception;
  public boolean isConnectedTo(reso.common.HardwareInterface<M>);
  public void send(reso.common.HardwareInterface<M>, M) throws reso.scheduler.SchedulerException;
  public void receive(reso.common.HardwareInterface<M>, M) throws java.lang.Exception;
  public double getPropagationDelay();
  public reso.common.HardwareInterface<M> getHead();
  public reso.common.HardwareInterface<M> getTail();
}
Compiled from "ListenerList.java"
public class reso.common.ListenerList<T> {
  public reso.common.ListenerList();
  public void addListener(T);
  public void removeListener(T);
  public java.util.Collection<T> getListeners();
}
Compiled from "Message.java"
public interface reso.common.Message {
}
Compiled from "MessageListener.java"
public interface reso.common.MessageListener<M extends reso.common.Message> {
  public abstract void receive(reso.common.HardwareInterface<M>, M) throws java.lang.Exception;
}
Compiled from "MessageWithPayload.java"
public interface reso.common.MessageWithPayload extends reso.common.Message {
  public abstract reso.common.Message getPayload();
  public abstract int getProtocol();
}
Compiled from "Network.java"
public class reso.common.Network {
  public final reso.scheduler.AbstractScheduler scheduler;
  public reso.common.Network(reso.scheduler.AbstractScheduler);
  public void addNode(reso.common.Node) throws java.lang.Exception;
  public java.util.Collection<reso.common.Node> getNodes();
  public reso.common.Node getNodeByName(java.lang.String);
  public reso.scheduler.AbstractScheduler getScheduler();
  public static reso.ethernet.EthernetAddress generateEthernetAddress();
  static {};
}
Compiled from "Node.java"
public abstract class reso.common.Node {
  protected java.util.List<reso.common.HardwareInterface<? extends reso.common.Message>> ifaces;
  public final java.lang.String name;
  public reso.common.Node(java.lang.String);
  public void addInterface(reso.common.HardwareInterface<? extends reso.common.Message>) throws java.lang.Exception;
  public reso.common.HardwareInterface<? extends reso.common.Message> getInterfaceByName(java.lang.String);
  public java.util.Collection<reso.common.HardwareInterface<? extends reso.common.Message>> getInterfaces();
  public void setNetwork(reso.common.Network);
  public reso.common.Network getNetwork();
  public java.lang.String toString();
}
Compiled from "ProtocolTable.java"
public class reso.common.ProtocolTable {
  public reso.common.ProtocolTable();
  public int allocateProtocolNumber(java.lang.String);
  public void registerProtocolNumber(java.lang.String, int) throws java.lang.Exception;
}
Compiled from "Task.java"
public interface reso.common.Task {
  public abstract void run() throws java.lang.Exception;
}
Compiled from "EthernetAddress.java"
public class reso.ethernet.EthernetAddress {
  public static final reso.ethernet.EthernetAddress BROADCAST;
  public final byte[] addr;
  public static reso.ethernet.EthernetAddress getByAddress(int, int, int, int, int, int) throws java.lang.Exception;
  public boolean isBroadcast();
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  static {};
}
Compiled from "EthernetFrame.java"
public class reso.ethernet.EthernetFrame extends reso.common.AbstractMessage {
  public static reso.common.ProtocolTable protocols;
  public static final int PROTO_ARP;
  public static final int PROTO_IP;
  public final reso.ethernet.EthernetAddress src;
  public final reso.ethernet.EthernetAddress dst;
  public final int protocol;
  public final reso.common.Message payload;
  public reso.ethernet.EthernetFrame(reso.ethernet.EthernetAddress, reso.ethernet.EthernetAddress, int, reso.common.Message);
  public java.lang.String toString();
  public static int allocateProtocolNumber(java.lang.String);
  static {};
}
Compiled from "EthernetInterface.java"
public class reso.ethernet.EthernetInterface extends reso.common.AbstractHardwareInterface<reso.ethernet.EthernetFrame> {
  public final reso.ethernet.EthernetAddress addr;
  public reso.ethernet.EthernetInterface(reso.common.Host, reso.ethernet.EthernetAddress) throws java.lang.Exception;
  public boolean hasAddr(reso.ethernet.EthernetAddress);
  public void receive(reso.ethernet.EthernetFrame) throws java.lang.Exception;
  public void send(reso.ethernet.EthernetFrame) throws java.lang.Exception;
  public void send(reso.common.Message) throws java.lang.Exception;
  public void receive(reso.common.Message) throws java.lang.Exception;
}
Compiled from "Hub.java"
public class reso.ethernet.Hub extends reso.common.Node {
  public final java.lang.String name;
  public java.util.List<reso.ethernet.Hub$EthernetPort> ports;
  public reso.ethernet.Hub(java.lang.String, reso.scheduler.AbstractScheduler, int) throws java.lang.Exception;
}
Compiled from "Hub.java"
class reso.ethernet.Hub$EthernetPort extends reso.common.AbstractHardwareInterface<reso.ethernet.EthernetFrame> {
  final reso.ethernet.Hub this$0;
  public reso.ethernet.Hub$EthernetPort(reso.ethernet.Hub, reso.ethernet.Hub) throws java.lang.Exception;
  public void receive(reso.ethernet.EthernetFrame);
  public void send(reso.ethernet.EthernetFrame) throws java.lang.Exception;
  public void send(reso.common.Message) throws java.lang.Exception;
  public void receive(reso.common.Message) throws java.lang.Exception;
}
Compiled from "AppAlone.java"
public class reso.examples.alone.AppAlone extends reso.common.AbstractApplication {
  public reso.examples.alone.AppAlone(reso.common.Host, double);
  public void start() throws java.lang.Exception;
  public void stop();
}
Compiled from "AppAlone.java"
class reso.examples.alone.AppAlone$MyTimer extends reso.common.AbstractTimer {
  final reso.examples.alone.AppAlone this$0;
  public reso.examples.alone.AppAlone$MyTimer(reso.examples.alone.AppAlone, reso.scheduler.AbstractScheduler, double);
  protected void run() throws java.lang.Exception;
}
Compiled from "Demo.java"
public class reso.examples.alone.Demo {
  public reso.examples.alone.Demo();
  public static void main(java.lang.String[]);
}
Compiled from "DVMessage.java"
public class reso.examples.dv_routing.DVMessage implements reso.common.Message {
  public final java.util.List<reso.examples.dv_routing.DVMessage$DV> dvs;
  public reso.examples.dv_routing.DVMessage();
  public void addDV(reso.ip.IPAddress, int, reso.ip.IPInterfaceAdapter);
  public java.lang.String toString();
}
Compiled from "DVMessage.java"
public class reso.examples.dv_routing.DVMessage$DV {
  public final reso.ip.IPAddress dst;
  public final int metric;
  public final reso.ip.IPInterfaceAdapter oif;
  public reso.examples.dv_routing.DVMessage$DV(reso.ip.IPAddress, int, reso.ip.IPInterfaceAdapter);
  public java.lang.String toString();
}
Compiled from "DVRoutingEntry.java"
public class reso.examples.dv_routing.DVRoutingEntry extends reso.ip.IPRouteEntry {
  public final reso.examples.dv_routing.DVMessage$DV dv;
  public reso.examples.dv_routing.DVRoutingEntry(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter, reso.examples.dv_routing.DVMessage$DV);
  public java.lang.String toString();
}
Compiled from "DVRoutingProtocol.java"
public class reso.examples.dv_routing.DVRoutingProtocol extends reso.common.AbstractApplication implements reso.ip.IPInterfaceListener,reso.common.InterfaceAttrListener {
  public static final java.lang.String PROTOCOL_NAME;
  public static final int IP_PROTO_DV;
  public reso.examples.dv_routing.DVRoutingProtocol(reso.ip.IPRouter, boolean);
  public void start() throws java.lang.Exception;
  public void stop();
  public int addMetric(int, int);
  public void receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram) throws java.lang.Exception;
  public void attrChanged(reso.common.Interface, java.lang.String);
  static {};
}
Compiled from "Demo.java"
public class reso.examples.dv_routing.Demo {
  public static final java.lang.String TOPO_FILE;
  public reso.examples.dv_routing.Demo();
  public static void main(java.lang.String[]);
}
Compiled from "Demo.java"
public class reso.examples.load_topology.Demo {
  public static final java.lang.String TOPO_FILE;
  public reso.examples.load_topology.Demo();
  public static void main(java.lang.String[]);
}
Compiled from "AppReceiver.java"
public class reso.examples.pingpong.AppReceiver extends reso.common.AbstractApplication {
  public reso.examples.pingpong.AppReceiver(reso.ip.IPHost);
  public void start();
  public void stop();
}
Compiled from "AppSender.java"
public class reso.examples.pingpong.AppSender extends reso.common.AbstractApplication {
  public reso.examples.pingpong.AppSender(reso.ip.IPHost, reso.ip.IPAddress, int);
  public void start() throws java.lang.Exception;
  public void stop();
}
Compiled from "Demo.java"
public class reso.examples.pingpong.Demo {
  public reso.examples.pingpong.Demo();
  public static void main(java.lang.String[]);
}
Compiled from "PingPongMessage.java"
public class reso.examples.pingpong.PingPongMessage implements reso.common.Message {
  public final int num;
  public reso.examples.pingpong.PingPongMessage(int);
  public java.lang.String toString();
}
Compiled from "PingPongProtocol.java"
public class reso.examples.pingpong.PingPongProtocol implements reso.ip.IPInterfaceListener {
  public static final int IP_PROTO_PINGPONG;
  public reso.examples.pingpong.PingPongProtocol(reso.ip.IPHost);
  public void receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram) throws java.lang.Exception;
  static {};
}
Compiled from "AppSniffer.java"
public class reso.examples.static_routing.AppSniffer extends reso.common.AbstractApplication implements reso.common.MessageListener<reso.common.Message> {
  public reso.examples.static_routing.AppSniffer(reso.common.Host, java.lang.String[]);
  public void receive(reso.common.HardwareInterface<reso.common.Message>, reso.common.Message);
  public void start();
  public void stop();
}
Compiled from "Demo.java"
public class reso.examples.static_routing.Demo {
  public reso.examples.static_routing.Demo();
  public static void main(java.lang.String[]);
}
Compiled from "ARPMessage.java"
public class reso.ip.ARPMessage implements reso.common.Message {
  public final reso.ip.ARPMessage$Type type;
  public final reso.ip.IPAddress ipAddr;
  public final reso.ethernet.EthernetAddress ethAddr;
  public static reso.ip.ARPMessage request(reso.ip.IPAddress);
  public static reso.ip.ARPMessage response(reso.ip.IPAddress, reso.ethernet.EthernetAddress);
  public java.lang.String toString();
}
Compiled from "ARPMessage.java"
public final class reso.ip.ARPMessage$Type extends java.lang.Enum<reso.ip.ARPMessage$Type> {
  public static final reso.ip.ARPMessage$Type REQUEST;
  public static final reso.ip.ARPMessage$Type RESPONSE;
  public static reso.ip.ARPMessage$Type[] values();
  public static reso.ip.ARPMessage$Type valueOf(java.lang.String);
  static {};
}
Compiled from "ARPProtocol.java"
public class reso.ip.ARPProtocol {
  public reso.ip.ARPProtocol(reso.ip.IPEthernetAdapter);
  public reso.ethernet.EthernetAddress getMapping(reso.ip.IPAddress);
  public void performARPRequest(reso.ip.IPAddress, reso.ip.Datagram) throws java.lang.Exception;
  public void handleARPMessage(reso.ethernet.EthernetFrame) throws java.lang.Exception;
  static java.util.Map access$000(reso.ip.ARPProtocol);
}
Compiled from "ARPProtocol.java"
class reso.ip.ARPProtocol$1 {
  static final int[] $SwitchMap$reso$ip$ARPMessage$Type;
  static {};
}
Compiled from "ARPProtocol.java"
class reso.ip.ARPProtocol$TaskSendFrame implements reso.common.Task {
  public final reso.ip.Datagram datagram;
  public final reso.ip.IPAddress gateway;
  public final reso.ethernet.EthernetInterface iface;
  final reso.ip.ARPProtocol this$0;
  public reso.ip.ARPProtocol$TaskSendFrame(reso.ip.ARPProtocol, reso.ip.Datagram, reso.ip.IPAddress, reso.ethernet.EthernetInterface);
  public void run() throws java.lang.Exception;
}
Compiled from "AbstractIPInterfaceAdapter.java"
public abstract class reso.ip.AbstractIPInterfaceAdapter extends reso.common.AbstractInterface implements reso.ip.IPInterfaceAdapter {
  public reso.ip.AbstractIPInterfaceAdapter(reso.ip.IPLayer, java.lang.String);
  public void setMetric(int) throws java.lang.Exception;
  public int getMetric();
  public boolean hasAddress(reso.ip.IPAddress);
  public void addAddress(reso.ip.IPAddress);
  public reso.ip.IPAddress getAddress();
  public void receive(reso.ip.Datagram) throws java.lang.Exception;
  public void addListener(reso.ip.IPInterfaceListener);
  public void removeListener(reso.ip.IPInterfaceListener);
  public reso.ip.IPLayer getIPLayer();
}
Compiled from "Datagram.java"
public class reso.ip.Datagram extends reso.common.AbstractMessageWithPayload {
  public final reso.ip.IPAddress src;
  public final reso.ip.IPAddress dst;
  public reso.ip.Datagram(reso.ip.IPAddress, reso.ip.IPAddress, int, int, reso.common.Message);
  public int getTTL();
  public void decTTL();
  public java.lang.String toString();
  public static int allocateProtocolNumber(java.lang.String);
  static {};
}
Compiled from "FIB.java"
public class reso.ip.FIB {
  public reso.ip.FIB();
  public reso.ip.IPRouteEntry lookup(reso.ip.IPAddress) throws java.lang.Exception;
  public void add(reso.ip.IPRouteEntry);
  public void remove(reso.ip.IPAddress);
  public java.util.Collection<reso.ip.IPRouteEntry> getEntries();
}
Compiled from "ICMPProtocol.java"
public class reso.ip.ICMPProtocol extends reso.common.AbstractApplication implements reso.ip.IPInterfaceListener {
  public static final java.lang.String PROTO_NAME;
  public static final int PROTO_NUM;
  public reso.ip.ICMPProtocol(reso.ip.IPHost);
  public void start() throws java.lang.Exception;
  public void stop();
  public void receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram) throws java.lang.Exception;
  public void sendRequest(reso.ip.IPAddress) throws java.lang.Exception;
  static {};
}
Compiled from "ICMPProtocol.java"
public class reso.ip.ICMPProtocol$ICMPMessage implements reso.common.Message {
  public static final int TYPE_ECHO_REQUEST;
  public static final int TYPE_ECHO_REPLY;
  public final int type;
  final reso.ip.ICMPProtocol this$0;
  public reso.ip.ICMPProtocol$ICMPMessage(reso.ip.ICMPProtocol, int);
}
Compiled from "IPAddress.java"
public class reso.ip.IPAddress implements java.lang.Comparable<reso.ip.IPAddress> {
  public final byte[] addr;
  public static final reso.ip.IPAddress ANY;
  public static final reso.ip.IPAddress BROADCAST;
  public static final reso.ip.IPAddress LOCALHOST;
  public boolean isBroadcast();
  public boolean isUndefined();
  public static reso.ip.IPAddress getByAddress(int, int, int, int) throws java.lang.Exception;
  public static reso.ip.IPAddress getByAddress(java.lang.String) throws java.lang.Exception;
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int compareTo(reso.ip.IPAddress);
  public int hashCode();
  public int compareTo(java.lang.Object);
  static {};
}
Compiled from "IPEthernetAdapter.java"
public class reso.ip.IPEthernetAdapter extends reso.ip.AbstractIPInterfaceAdapter implements reso.common.MessageListener<reso.ethernet.EthernetFrame>, reso.common.InterfaceAttrListener {
  public final reso.ip.IPLayer ip;
  public final reso.ethernet.EthernetInterface iface;
  public reso.ip.IPEthernetAdapter(reso.ip.IPLayer, reso.ethernet.EthernetInterface);
  public void receive(reso.ip.Datagram) throws java.lang.Exception;
  public void send(reso.ip.Datagram, reso.ip.IPAddress) throws java.lang.Exception;
  public void receive(reso.common.HardwareInterface<reso.ethernet.EthernetFrame>, reso.ethernet.EthernetFrame) throws java.lang.Exception;
  public void attrChanged(reso.common.Interface, java.lang.String);
  public void receive(reso.common.HardwareInterface, reso.common.Message) throws java.lang.Exception;
}
Compiled from "IPHost.java"
public class reso.ip.IPHost extends reso.common.Host {
  public reso.ip.IPHost(java.lang.String);
  public reso.ip.IPLayer getIPLayer();
}
Compiled from "IPInterfaceAdapter.java"
public interface reso.ip.IPInterfaceAdapter extends reso.common.Interface {
  public static final java.lang.String ATTR_METRIC;
  public abstract java.lang.String getName();
  public abstract reso.ip.IPLayer getIPLayer();
  public abstract boolean hasAddress(reso.ip.IPAddress);
  public abstract void addAddress(reso.ip.IPAddress);
  public abstract reso.ip.IPAddress getAddress();
  public abstract void setMetric(int) throws java.lang.Exception;
  public abstract int getMetric();
  public abstract void send(reso.ip.Datagram, reso.ip.IPAddress) throws java.lang.Exception;
  public abstract void addListener(reso.ip.IPInterfaceListener);
  public abstract void removeListener(reso.ip.IPInterfaceListener);
}
Compiled from "IPInterfaceListener.java"
public interface reso.ip.IPInterfaceListener {
  public abstract void receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram) throws java.lang.Exception;
}
Compiled from "IPLayer.java"
public class reso.ip.IPLayer implements reso.ip.IPInterfaceListener {
  public final reso.common.Host host;
  public reso.ip.IPLayer(reso.common.Host);
  public void addInterface(reso.ip.IPInterfaceAdapter);
  public reso.ip.IPInterfaceAdapter getInterfaceByName(java.lang.String);
  public java.util.Collection<reso.ip.IPInterfaceAdapter> getInterfaces();
  public void enableForwarding();
  public void disableForwarding();
  public boolean isForwardingEnabled();
  public boolean hasAddress(reso.ip.IPAddress);
  public void receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram) throws java.lang.Exception;
  public void forward(reso.ip.Datagram) throws java.lang.Exception;
  public void addRawListener(reso.ip.IPInterfaceListener);
  public void addListener(int, reso.ip.IPInterfaceListener);
  public void removeListener(int, reso.ip.IPInterfaceListener);
  public void addRoute(reso.ip.IPAddress, java.lang.String) throws java.lang.Exception;
  public void addRoute(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter) throws java.lang.Exception;
  public void addRoute(reso.ip.IPAddress, reso.ip.IPAddress) throws java.lang.Exception;
  public void addRoute(reso.ip.IPRouteEntry) throws java.lang.Exception;
  public void removeRoute(reso.ip.IPAddress);
  public java.util.Collection<reso.ip.IPRouteEntry> getRoutes();
  public reso.ip.IPRouteEntry getRouteTo(reso.ip.IPAddress);
  public void send(reso.ip.IPAddress, reso.ip.IPAddress, int, reso.common.Message) throws java.lang.Exception;
}
Compiled from "IPLoopbackAdapter.java"
public class reso.ip.IPLoopbackAdapter extends reso.ip.AbstractIPInterfaceAdapter {
  public reso.ip.IPLoopbackAdapter(reso.ip.IPLayer, int) throws java.lang.Exception;
  public void send(reso.ip.Datagram, reso.ip.IPAddress) throws java.lang.Exception;
  public void receive(reso.ip.Datagram) throws java.lang.Exception;
}
Compiled from "IPRouteEntry.java"
public class reso.ip.IPRouteEntry {
  public final reso.ip.IPAddress dst;
  public final reso.ip.IPAddress gateway;
  public final reso.ip.IPInterfaceAdapter oif;
  public final java.lang.String type;
  public reso.ip.IPRouteEntry(reso.ip.IPAddress, reso.ip.IPAddress, java.lang.String);
  public reso.ip.IPRouteEntry(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter, java.lang.String);
  public reso.ip.IPRouteEntry(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter, reso.ip.IPAddress, java.lang.String);
  public java.lang.String toString();
}
Compiled from "IPRouter.java"
public class reso.ip.IPRouter extends reso.ip.IPHost {
  public reso.ip.IPRouter(java.lang.String);
}
Compiled from "AbstractEvent.java"
public abstract class reso.scheduler.AbstractEvent implements java.lang.Comparable<reso.scheduler.AbstractEvent> {
  public reso.scheduler.AbstractEvent(double);
  public final double getTime();
  public final int compareTo(reso.scheduler.AbstractEvent);
  public abstract void run() throws java.lang.Exception;
  public int compareTo(java.lang.Object);
}
Compiled from "AbstractScheduler.java"
public abstract class reso.scheduler.AbstractScheduler {
  protected double time;
  public reso.scheduler.AbstractScheduler();
  public abstract void schedule(reso.scheduler.AbstractEvent);
  public abstract boolean hasMoreEvents();
  public abstract void runNextEvent() throws java.lang.Exception;
  public void run() throws java.lang.Exception;
  public void runUntil(double) throws java.lang.Exception;
  public double getCurrentTime();
}
Compiled from "Scheduler.java"
public class reso.scheduler.Scheduler extends reso.scheduler.AbstractScheduler {
  static final boolean $assertionsDisabled;
  public reso.scheduler.Scheduler();
  public void schedule(reso.scheduler.AbstractEvent);
  public boolean hasMoreEvents();
  public void runNextEvent() throws java.lang.Exception;
  public void dumpEvents();
  static {};
}
Compiled from "SchedulerException.java"
public class reso.scheduler.SchedulerException extends java.lang.Exception {
  public reso.scheduler.SchedulerException(java.lang.String);
}
Compiled from "TestIPAddress.java"
public class reso.testing.TestIPAddress extends junit.framework.TestCase {
  public reso.testing.TestIPAddress();
  public void testGetByAddress() throws java.lang.Exception;
  public void testEquality() throws java.lang.Exception;
  public void testComparison() throws java.lang.Exception;
  public void testBroadcast() throws java.lang.Exception;
  public void testUndefined() throws java.lang.Exception;
  public void testToString() throws java.lang.Exception;
}
Compiled from "FIBDumper.java"
public class reso.utilities.FIBDumper {
  public reso.utilities.FIBDumper();
  public static void dumpForHost(reso.ip.IPHost);
  public static void dumpForHost(reso.ip.IPHost, java.util.HashSet<reso.ip.IPAddress>);
  public static void dumpForAllRouters(reso.common.Network);
  public static void dumpForAllRouters(reso.common.Network, java.util.HashSet<reso.ip.IPAddress>);
}
Compiled from "NetworkBuilder.java"
public class reso.utilities.NetworkBuilder {
  public reso.utilities.NetworkBuilder();
  public static reso.ip.IPHost createHost(reso.common.Network, java.lang.String, reso.ip.IPAddress, reso.ethernet.EthernetAddress) throws java.lang.Exception;
  public static reso.ip.IPRouter createRouter(reso.common.Network, java.lang.String, reso.ip.IPAddress[], reso.ethernet.EthernetAddress[]) throws java.lang.Exception;
  public static reso.common.Network loadTopology(java.lang.String, reso.scheduler.AbstractScheduler) throws java.lang.Exception;
}
Compiled from "NetworkBuilder.java"
class reso.utilities.NetworkBuilder$1 {
  static final int[] $SwitchMap$reso$utilities$NetworkBuilder$State;
  static {};
}
Compiled from "NetworkBuilder.java"
final class reso.utilities.NetworkBuilder$State extends java.lang.Enum<reso.utilities.NetworkBuilder$State> {
  public static final reso.utilities.NetworkBuilder$State INIT;
  public static final reso.utilities.NetworkBuilder$State ROUTER;
  public static final reso.utilities.NetworkBuilder$State LINK;
  public static reso.utilities.NetworkBuilder$State[] values();
  public static reso.utilities.NetworkBuilder$State valueOf(java.lang.String);
  static {};
}
Compiled from "NetworkGrapher.java"
public class reso.utilities.NetworkGrapher {
  public static final int EDGE_LABEL_FONT_SIZE;
  public static final double EDGE_LABEL_DISTANCE;
  public static final java.lang.String NODE_SHAPE;
  public static final int NODE_LABEL_FONT_SIZE;
  public static final double EDGE_LENGTH;
  public reso.utilities.NetworkGrapher();
  public static void toGraphviz(reso.common.Network, java.io.PrintWriter);
  public static void toGraphviz2(reso.common.Network, reso.ip.IPAddress, java.io.PrintWriter);
}
Compiled from "NetworkTracer.java"
public class reso.utilities.NetworkTracer {
  public reso.utilities.NetworkTracer();
}
