Compiled from "MyFuzzyLiteClass.java"
public class MyFuzzyLiteClass {
  public MyFuzzyLiteClass();
  public static void main(java.lang.String[]) throws java.io.IOException;
  static java.lang.String readFile(java.lang.String) throws java.io.IOException;
}
Compiled from "Console.java"
public class com.fuzzylite.Console {
  public static final java.lang.String KW_INPUT_FILE;
  public static final java.lang.String KW_INPUT_FORMAT;
  public static final java.lang.String KW_OUTPUT_FILE;
  public static final java.lang.String KW_OUTPUT_FORMAT;
  public static final java.lang.String KW_EXAMPLE;
  public static final java.lang.String KW_DATA_INPUT;
  public static final java.lang.String KW_DATA_MAXIMUM;
  public static final java.lang.String KW_DECIMALS;
  public com.fuzzylite.Console();
  public static java.lang.String usage();
  protected static java.util.Map<java.lang.String, java.lang.String> parse(java.lang.String[]);
  protected static void process(java.util.Map<java.lang.String, java.lang.String>) throws java.lang.Exception;
  protected static void process(java.lang.String, java.io.Writer, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>) throws java.lang.Exception;
  public static com.fuzzylite.Engine mamdani();
  public static com.fuzzylite.Engine takagiSugeno();
  public static void exportAllExamples(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception;
  public static void main(java.lang.String[]);
}
Compiled from "Console.java"
class com.fuzzylite.Console$Option {
  public java.lang.String key;
  public java.lang.String value;
  public java.lang.String description;
  public com.fuzzylite.Console$Option(java.lang.String, java.lang.String, java.lang.String);
}
Compiled from "Engine.java"
public class com.fuzzylite.Engine {
  protected java.lang.String name;
  protected java.util.List<com.fuzzylite.variable.InputVariable> inputVariables;
  protected java.util.List<com.fuzzylite.variable.OutputVariable> outputVariables;
  protected java.util.List<com.fuzzylite.rule.RuleBlock> ruleBlocks;
  protected java.util.List<com.fuzzylite.hedge.Hedge> hedges;
  public com.fuzzylite.Engine();
  public com.fuzzylite.Engine(java.lang.String);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public void restart();
  public void process();
  public void configure(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void configure(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int);
  public void configure(com.fuzzylite.norm.TNorm, com.fuzzylite.norm.SNorm, com.fuzzylite.norm.TNorm, com.fuzzylite.norm.SNorm, com.fuzzylite.defuzzifier.Defuzzifier);
  public boolean isReady();
  public boolean isReady(java.lang.StringBuilder);
  public java.lang.String toString();
  public com.fuzzylite.Engine$Type type();
  public void setInputValue(java.lang.String, double);
  public com.fuzzylite.variable.InputVariable getInputVariable(java.lang.String);
  public com.fuzzylite.variable.InputVariable getInputVariable(int);
  public void addInputVariable(com.fuzzylite.variable.InputVariable);
  public com.fuzzylite.variable.InputVariable removeInputVariable(com.fuzzylite.variable.InputVariable);
  public com.fuzzylite.variable.InputVariable removeInputVariable(java.lang.String);
  public com.fuzzylite.variable.InputVariable removeInputVariable(int);
  public boolean hasInputVariable(java.lang.String);
  public int numberOfInputVariables();
  public java.util.List<com.fuzzylite.variable.InputVariable> getInputVariables();
  public void setInputVariables(java.util.List<com.fuzzylite.variable.InputVariable>);
  public double getOutputValue(java.lang.String);
  public com.fuzzylite.variable.OutputVariable getOutputVariable(java.lang.String);
  public com.fuzzylite.variable.OutputVariable getOutputVariable(int);
  public void addOutputVariable(com.fuzzylite.variable.OutputVariable);
  public com.fuzzylite.variable.OutputVariable removeOutputVariable(com.fuzzylite.variable.OutputVariable);
  public com.fuzzylite.variable.OutputVariable removeOutputVariable(java.lang.String);
  public com.fuzzylite.variable.OutputVariable removeOutputVariable(int);
  public boolean hasOutputVariable(java.lang.String);
  public int numberOfOutputVariables();
  public java.util.List<com.fuzzylite.variable.OutputVariable> getOutputVariables();
  public void setOutputVariables(java.util.List<com.fuzzylite.variable.OutputVariable>);
  public com.fuzzylite.rule.RuleBlock getRuleBlock(java.lang.String);
  public com.fuzzylite.rule.RuleBlock getRuleBlock(int);
  public void addRuleBlock(com.fuzzylite.rule.RuleBlock);
  public com.fuzzylite.rule.RuleBlock removeRuleBlock(com.fuzzylite.rule.RuleBlock);
  public com.fuzzylite.rule.RuleBlock removeRuleBlock(java.lang.String);
  public com.fuzzylite.rule.RuleBlock removeRuleBlock(int);
  public boolean hasRuleBlock(java.lang.String);
  public int numberOfRuleBlocks();
  public java.util.List<com.fuzzylite.rule.RuleBlock> getRuleBlocks();
  public void setRuleBlocks(java.util.List<com.fuzzylite.rule.RuleBlock>);
  public com.fuzzylite.hedge.Hedge getHedge(java.lang.String);
  public com.fuzzylite.hedge.Hedge getHedge(int);
  public void addHedge(com.fuzzylite.hedge.Hedge);
  public com.fuzzylite.hedge.Hedge removeHedge(com.fuzzylite.hedge.Hedge);
  public com.fuzzylite.hedge.Hedge removeHedge(java.lang.String);
  public com.fuzzylite.hedge.Hedge removeHedge(int);
  public boolean hasHedge(java.lang.String);
  public int numberOfHedges();
  public java.util.List<com.fuzzylite.hedge.Hedge> getHedges();
  public void setHedges(java.util.List<com.fuzzylite.hedge.Hedge>);
}
Compiled from "Engine.java"
public final class com.fuzzylite.Engine$Type extends java.lang.Enum<com.fuzzylite.Engine$Type> {
  public static final com.fuzzylite.Engine$Type NONE;
  public static final com.fuzzylite.Engine$Type MAMDANI;
  public static final com.fuzzylite.Engine$Type LARSEN;
  public static final com.fuzzylite.Engine$Type TAKAGI_SUGENO;
  public static final com.fuzzylite.Engine$Type TSUKAMOTO;
  public static final com.fuzzylite.Engine$Type INVERSE_TSUKAMOTO;
  public static final com.fuzzylite.Engine$Type UNKNOWN;
  public static com.fuzzylite.Engine$Type[] values();
  public static com.fuzzylite.Engine$Type valueOf(java.lang.String);
  static {};
}
Compiled from "FuzzyLite.java"
public class com.fuzzylite.FuzzyLite {
  public static final java.lang.String NAME;
  public static final java.lang.String VERSION;
  public static final java.lang.String LONG_VERSION;
  public static final java.lang.String AUTHOR;
  protected static java.text.DecimalFormat DF;
  protected static int DECIMALS;
  protected static double MACHEPS;
  public com.fuzzylite.FuzzyLite();
  public static java.util.logging.Logger logger();
  public static java.text.DecimalFormat getFormatter();
  public static int getDecimals();
  public static void setDecimals(int);
  public static double getMachEps();
  public static void setMachEps(double);
  public static void setLogging(boolean);
  public static boolean isLogging();
  public static boolean debug();
  public static void setDebug(boolean);
  static {};
}
Compiled from "FuzzyLite.java"
public class com.fuzzylite.FuzzyLite$FLDecimalFormat extends java.text.DecimalFormat {
  public com.fuzzylite.FuzzyLite$FLDecimalFormat(java.lang.String);
  public com.fuzzylite.FuzzyLite$FLDecimalFormat(java.lang.String, java.math.RoundingMode);
}
Compiled from "Op.java"
public class com.fuzzylite.Op {
  public com.fuzzylite.Op();
  public static boolean isEq(double, double);
  public static boolean isEq(double, double, double);
  public static boolean isLt(double, double);
  public static boolean isLt(double, double, double);
  public static boolean isLE(double, double);
  public static boolean isLE(double, double, double);
  public static boolean isGt(double, double);
  public static boolean isGt(double, double, double);
  public static boolean isGE(double, double);
  public static boolean isGE(double, double, double);
  public static double add(double, double);
  public static double subtract(double, double);
  public static double multiply(double, double);
  public static double divide(double, double);
  public static double modulo(double, double);
  public static double logicalAnd(double, double);
  public static double logicalOr(double, double);
  public static double negate(double);
  public static double scale(double, double, double, double, double);
  public static java.util.List<java.lang.String> split(java.lang.String, java.lang.String);
  public static java.util.List<java.lang.String> split(java.lang.String, java.lang.String, boolean);
  public static double toDouble(java.lang.String) throws java.lang.NumberFormatException;
  public static boolean isNumeric(java.lang.String);
  public static boolean increment(int[], int[], int[]);
  public static boolean increment(int[], int, int[], int[]);
  public static <T extends java.lang.Number> java.lang.String str(T);
  public static <T> java.lang.String join(java.util.Collection<T>, java.lang.String);
  public static java.lang.String join(long[], java.lang.String);
  public static java.lang.String join(int[], java.lang.String);
  public static java.lang.String join(double[], java.lang.String);
  public static java.lang.String join(float[], java.lang.String);
  public static java.lang.String join(java.lang.String[], java.lang.String);
  public static <T> java.lang.String join(java.lang.String, T...);
  public static java.lang.String makeValidId(java.lang.String);
}
Compiled from "Op.java"
public class com.fuzzylite.Op$Pair<Y, Z> {
  public Y first;
  public Z second;
  public com.fuzzylite.Op$Pair();
  public com.fuzzylite.Op$Pair(Y, Z);
  public java.lang.String toString();
}
Compiled from "Bisector.java"
public class com.fuzzylite.defuzzifier.Bisector extends com.fuzzylite.defuzzifier.IntegralDefuzzifier {
  public com.fuzzylite.defuzzifier.Bisector();
  public com.fuzzylite.defuzzifier.Bisector(int);
  public double defuzzify(com.fuzzylite.term.Term, double, double);
}
Compiled from "Centroid.java"
public class com.fuzzylite.defuzzifier.Centroid extends com.fuzzylite.defuzzifier.IntegralDefuzzifier {
  public com.fuzzylite.defuzzifier.Centroid();
  public com.fuzzylite.defuzzifier.Centroid(int);
  public double defuzzify(com.fuzzylite.term.Term, double, double);
}
Compiled from "Defuzzifier.java"
public abstract class com.fuzzylite.defuzzifier.Defuzzifier {
  public com.fuzzylite.defuzzifier.Defuzzifier();
  public abstract double defuzzify(com.fuzzylite.term.Term, double, double);
}
Compiled from "IntegralDefuzzifier.java"
public abstract class com.fuzzylite.defuzzifier.IntegralDefuzzifier extends com.fuzzylite.defuzzifier.Defuzzifier {
  public static final int DEFAULT_RESOLUTION;
  protected int resolution;
  public com.fuzzylite.defuzzifier.IntegralDefuzzifier();
  public com.fuzzylite.defuzzifier.IntegralDefuzzifier(int);
  public int getResolution();
  public void setResolution(int);
}
Compiled from "LargestOfMaximum.java"
public class com.fuzzylite.defuzzifier.LargestOfMaximum extends com.fuzzylite.defuzzifier.IntegralDefuzzifier {
  public com.fuzzylite.defuzzifier.LargestOfMaximum();
  public com.fuzzylite.defuzzifier.LargestOfMaximum(int);
  public double defuzzify(com.fuzzylite.term.Term, double, double);
}
Compiled from "MeanOfMaximum.java"
public class com.fuzzylite.defuzzifier.MeanOfMaximum extends com.fuzzylite.defuzzifier.IntegralDefuzzifier {
  public com.fuzzylite.defuzzifier.MeanOfMaximum();
  public com.fuzzylite.defuzzifier.MeanOfMaximum(int);
  public double defuzzify(com.fuzzylite.term.Term, double, double);
}
Compiled from "SmallestOfMaximum.java"
public class com.fuzzylite.defuzzifier.SmallestOfMaximum extends com.fuzzylite.defuzzifier.IntegralDefuzzifier {
  public com.fuzzylite.defuzzifier.SmallestOfMaximum();
  public com.fuzzylite.defuzzifier.SmallestOfMaximum(int);
  public double defuzzify(com.fuzzylite.term.Term, double, double);
}
Compiled from "Tsukamoto.java"
public class com.fuzzylite.defuzzifier.Tsukamoto {
  public com.fuzzylite.defuzzifier.Tsukamoto();
  public static double tsukamoto(com.fuzzylite.term.Thresholded, double, double);
}
Compiled from "WeightedAverage.java"
public class com.fuzzylite.defuzzifier.WeightedAverage extends com.fuzzylite.defuzzifier.Defuzzifier {
  public com.fuzzylite.defuzzifier.WeightedAverage();
  public double defuzzify(com.fuzzylite.term.Term, double, double);
}
Compiled from "WeightedSum.java"
public class com.fuzzylite.defuzzifier.WeightedSum extends com.fuzzylite.defuzzifier.Defuzzifier {
  public com.fuzzylite.defuzzifier.WeightedSum();
  public double defuzzify(com.fuzzylite.term.Term, double, double);
}
Compiled from "DefuzzifierFactory.java"
public class com.fuzzylite.factory.DefuzzifierFactory extends com.fuzzylite.factory.Factory<com.fuzzylite.defuzzifier.Defuzzifier> {
  public com.fuzzylite.factory.DefuzzifierFactory();
}
Compiled from "Factory.java"
public class com.fuzzylite.factory.Factory<T> {
  protected java.util.Map<java.lang.String, java.lang.Class<? extends T>> map;
  public com.fuzzylite.factory.Factory();
  public void register(java.lang.Class<? extends T>);
  public void register(java.lang.String, java.lang.Class<? extends T>);
  public void deregister(java.lang.String);
  public boolean isRegistered(java.lang.String);
  public java.util.Set<java.lang.String> available();
  public T createInstance(java.lang.String);
}
Compiled from "FactoryManager.java"
public class com.fuzzylite.factory.FactoryManager {
  protected static com.fuzzylite.factory.FactoryManager instance;
  protected com.fuzzylite.factory.DefuzzifierFactory defuzzifier;
  protected com.fuzzylite.factory.HedgeFactory hedge;
  protected com.fuzzylite.factory.SNormFactory sNorm;
  protected com.fuzzylite.factory.TNormFactory tNorm;
  protected com.fuzzylite.factory.TermFactory term;
  public static synchronized com.fuzzylite.factory.FactoryManager instance();
  protected com.fuzzylite.factory.FactoryManager();
  public com.fuzzylite.factory.DefuzzifierFactory defuzzifier();
  public void setDefuzzifier(com.fuzzylite.factory.DefuzzifierFactory);
  public com.fuzzylite.factory.HedgeFactory hedge();
  public void setHedge(com.fuzzylite.factory.HedgeFactory);
  public com.fuzzylite.factory.SNormFactory snorm();
  public void setSNorm(com.fuzzylite.factory.SNormFactory);
  public com.fuzzylite.factory.TNormFactory tnorm();
  public void setTNorm(com.fuzzylite.factory.TNormFactory);
  public com.fuzzylite.factory.TermFactory term();
  public void setTerm(com.fuzzylite.factory.TermFactory);
}
Compiled from "HedgeFactory.java"
public class com.fuzzylite.factory.HedgeFactory extends com.fuzzylite.factory.Factory<com.fuzzylite.hedge.Hedge> {
  public com.fuzzylite.factory.HedgeFactory();
}
Compiled from "SNormFactory.java"
public class com.fuzzylite.factory.SNormFactory extends com.fuzzylite.factory.Factory<com.fuzzylite.norm.SNorm> {
  public com.fuzzylite.factory.SNormFactory();
}
Compiled from "TNormFactory.java"
public class com.fuzzylite.factory.TNormFactory extends com.fuzzylite.factory.Factory<com.fuzzylite.norm.TNorm> {
  public com.fuzzylite.factory.TNormFactory();
}
Compiled from "TermFactory.java"
public class com.fuzzylite.factory.TermFactory extends com.fuzzylite.factory.Factory<com.fuzzylite.term.Term> {
  public com.fuzzylite.factory.TermFactory();
  public com.fuzzylite.term.Term createInstance(java.lang.String);
  public java.lang.Object createInstance(java.lang.String);
}
Compiled from "Any.java"
public class com.fuzzylite.hedge.Any extends com.fuzzylite.hedge.Hedge {
  public com.fuzzylite.hedge.Any();
  public double hedge(double);
}
Compiled from "Extremely.java"
public class com.fuzzylite.hedge.Extremely extends com.fuzzylite.hedge.Hedge {
  public com.fuzzylite.hedge.Extremely();
  public double hedge(double);
}
Compiled from "Hedge.java"
public abstract class com.fuzzylite.hedge.Hedge {
  public com.fuzzylite.hedge.Hedge();
  public abstract double hedge(double);
  public final java.lang.String getName();
}
Compiled from "Not.java"
public class com.fuzzylite.hedge.Not extends com.fuzzylite.hedge.Hedge {
  public com.fuzzylite.hedge.Not();
  public double hedge(double);
}
Compiled from "Seldom.java"
public class com.fuzzylite.hedge.Seldom extends com.fuzzylite.hedge.Hedge {
  public com.fuzzylite.hedge.Seldom();
  public double hedge(double);
}
Compiled from "Somewhat.java"
public class com.fuzzylite.hedge.Somewhat extends com.fuzzylite.hedge.Hedge {
  public com.fuzzylite.hedge.Somewhat();
  public double hedge(double);
}
Compiled from "Very.java"
public class com.fuzzylite.hedge.Very extends com.fuzzylite.hedge.Hedge {
  public com.fuzzylite.hedge.Very();
  public double hedge(double);
}
Compiled from "CppExporter.java"
public class com.fuzzylite.imex.CppExporter extends com.fuzzylite.imex.Exporter {
  public com.fuzzylite.imex.CppExporter();
  public java.lang.String toString(com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.variable.InputVariable, com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.variable.OutputVariable, com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.rule.RuleBlock, com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.term.Term);
  public java.lang.String toString(com.fuzzylite.defuzzifier.Defuzzifier);
  public java.lang.String toString(com.fuzzylite.norm.Norm);
  public java.lang.String toString(double);
}
Compiled from "Exporter.java"
public abstract class com.fuzzylite.imex.Exporter {
  public com.fuzzylite.imex.Exporter();
  public abstract java.lang.String toString(com.fuzzylite.Engine);
}
Compiled from "FclExporter.java"
public class com.fuzzylite.imex.FclExporter extends com.fuzzylite.imex.Exporter {
  protected java.lang.String indent;
  public com.fuzzylite.imex.FclExporter();
  public com.fuzzylite.imex.FclExporter(java.lang.String);
  public java.lang.String getIndent();
  public void setIndent(java.lang.String);
  public java.lang.String toString(com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.variable.InputVariable);
  public java.lang.String toString(com.fuzzylite.variable.OutputVariable);
  public java.lang.String toString(com.fuzzylite.rule.RuleBlock);
  public java.lang.String toString(com.fuzzylite.term.Term);
  public java.lang.String toString(com.fuzzylite.defuzzifier.Defuzzifier);
  public java.lang.String toString(com.fuzzylite.norm.Norm);
}
Compiled from "FclImporter.java"
public class com.fuzzylite.imex.FclImporter extends com.fuzzylite.imex.Importer {
  public com.fuzzylite.imex.FclImporter();
  public com.fuzzylite.Engine fromString(java.lang.String);
  protected void processBlock(java.lang.String, java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected void processVar(java.lang.String, java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected void processFuzzify(java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected void processDefuzzify(java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected void processRuleBlock(java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected com.fuzzylite.norm.TNorm extractTNorm(java.lang.String);
  protected com.fuzzylite.norm.SNorm extractSNorm(java.lang.String);
  protected com.fuzzylite.term.Term extractTerm(java.lang.String);
  protected com.fuzzylite.term.Term prepareTerm(com.fuzzylite.term.Term, com.fuzzylite.Engine);
  protected com.fuzzylite.defuzzifier.Defuzzifier extractDefuzzifier(java.lang.String);
  protected com.fuzzylite.Op$Pair<java.lang.Double, java.lang.Boolean> extractDefaultValue(java.lang.String);
  protected com.fuzzylite.Op$Pair<java.lang.Double, java.lang.Double> extractRange(java.lang.String);
  protected com.fuzzylite.Op$Pair<java.lang.Boolean, java.lang.Boolean> extractLocksOutputAndRange(java.lang.String);
  protected boolean extractEnabled(java.lang.String);
}
Compiled from "FisExporter.java"
public class com.fuzzylite.imex.FisExporter extends com.fuzzylite.imex.Exporter {
  public com.fuzzylite.imex.FisExporter();
  public java.lang.String toString(com.fuzzylite.Engine);
  public java.lang.String exportSystem(com.fuzzylite.Engine);
  public java.lang.String exportInputs(com.fuzzylite.Engine);
  public java.lang.String exportOutputs(com.fuzzylite.Engine);
  public java.lang.String exportRules(com.fuzzylite.Engine);
  public java.lang.String exportRule(com.fuzzylite.rule.Rule, com.fuzzylite.Engine);
  protected java.lang.String extractType(com.fuzzylite.Engine);
  protected java.lang.String extractAccumulation(com.fuzzylite.Engine);
  protected java.lang.String extractDefuzzifier(com.fuzzylite.Engine);
  protected java.lang.String translate(java.util.List<com.fuzzylite.rule.Proposition>, java.util.List<com.fuzzylite.variable.Variable>);
  public java.lang.String toString(com.fuzzylite.term.Term);
  public java.lang.String toString(com.fuzzylite.defuzzifier.Defuzzifier);
  public java.lang.String toString(com.fuzzylite.norm.Norm);
}
Compiled from "FisImporter.java"
public class com.fuzzylite.imex.FisImporter extends com.fuzzylite.imex.Importer {
  protected static int and;
  protected static int or;
  protected static int imp;
  protected static int agg;
  protected static int defuzz;
  public com.fuzzylite.imex.FisImporter();
  public com.fuzzylite.Engine fromString(java.lang.String);
  protected void importSystem(java.lang.String, com.fuzzylite.Engine, java.lang.String[]) throws java.lang.Exception;
  protected void importInput(java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected void importOutput(java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected void importRules(java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected java.lang.String translateProposition(double, com.fuzzylite.variable.Variable);
  protected java.lang.String tnorm(java.lang.String);
  protected java.lang.String snorm(java.lang.String);
  protected java.lang.String defuzzifier(java.lang.String);
  protected com.fuzzylite.Op$Pair<java.lang.Double, java.lang.Double> extractRange(java.lang.String);
  protected com.fuzzylite.term.Term extractTerm(java.lang.String);
  protected com.fuzzylite.term.Term prepareTerm(com.fuzzylite.term.Term, com.fuzzylite.Engine);
  protected com.fuzzylite.term.Term createInstance(java.lang.String, java.lang.String, java.util.List<java.lang.String>);
  static {};
}
Compiled from "FldExporter.java"
public class com.fuzzylite.imex.FldExporter extends com.fuzzylite.imex.Exporter {
  public static final int DEFAULT_MAXIMUM;
  public static final java.lang.String DEFAULT_SEPARATOR;
  protected java.lang.String separator;
  public com.fuzzylite.imex.FldExporter();
  public com.fuzzylite.imex.FldExporter(java.lang.String);
  public java.lang.String getSeparator();
  public void setSeparator(java.lang.String);
  public java.lang.String header(com.fuzzylite.Engine);
  public java.lang.String headerInputVariables(java.util.List<com.fuzzylite.variable.InputVariable>);
  public java.lang.String headerOutputVariables(java.util.List<com.fuzzylite.variable.OutputVariable>);
  public java.lang.String toString(com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.Engine, int);
  public void toWriter(com.fuzzylite.Engine, java.io.Writer, int, java.lang.String) throws java.lang.Exception;
  public java.lang.String toString(com.fuzzylite.Engine, java.lang.String);
  public java.util.List<java.lang.Double> parse(java.lang.String);
  public void toWriter(com.fuzzylite.Engine, java.io.Writer, java.util.List<java.lang.Double>, java.lang.String) throws java.lang.Exception;
}
Compiled from "FllExporter.java"
public class com.fuzzylite.imex.FllExporter extends com.fuzzylite.imex.Exporter {
  protected java.lang.String indent;
  protected java.lang.String separator;
  public com.fuzzylite.imex.FllExporter();
  public com.fuzzylite.imex.FllExporter(java.lang.String, java.lang.String);
  public java.lang.String getIndent();
  public void setIndent(java.lang.String);
  public java.lang.String getSeparator();
  public void setSeparator(java.lang.String);
  public java.lang.String toString(com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.variable.Variable);
  public java.lang.String toString(com.fuzzylite.variable.InputVariable);
  public java.lang.String toString(com.fuzzylite.variable.OutputVariable);
  public java.lang.String toString(com.fuzzylite.rule.RuleBlock);
  public java.lang.String toString(com.fuzzylite.rule.Rule);
  public java.lang.String toString(com.fuzzylite.term.Term);
  public java.lang.String toString(com.fuzzylite.norm.Norm);
  public java.lang.String toString(com.fuzzylite.defuzzifier.Defuzzifier);
}
Compiled from "FllImporter.java"
public class com.fuzzylite.imex.FllImporter extends com.fuzzylite.imex.Importer {
  protected java.lang.String separator;
  public com.fuzzylite.imex.FllImporter();
  public com.fuzzylite.imex.FllImporter(java.lang.String);
  public java.lang.String getSeparator();
  public void setSeparator(java.lang.String);
  public com.fuzzylite.Engine fromString(java.lang.String);
  protected void process(java.lang.String, java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected void processInputVariable(java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected void processOutputVariable(java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected void processRuleBlock(java.lang.String, com.fuzzylite.Engine) throws java.lang.Exception;
  protected com.fuzzylite.term.Term parseTerm(java.lang.String, com.fuzzylite.Engine);
  protected com.fuzzylite.norm.TNorm parseTNorm(java.lang.String);
  protected com.fuzzylite.norm.SNorm parseSNorm(java.lang.String);
  protected com.fuzzylite.defuzzifier.Defuzzifier parseDefuzzifier(java.lang.String);
  protected com.fuzzylite.Op$Pair<java.lang.Double, java.lang.Double> parseRange(java.lang.String);
  protected boolean parseBoolean(java.lang.String);
  protected com.fuzzylite.Op$Pair<java.lang.String, java.lang.String> parseKeyValue(java.lang.String, char);
  protected java.lang.String clean(java.lang.String);
}
Compiled from "Importer.java"
public abstract class com.fuzzylite.imex.Importer {
  public com.fuzzylite.imex.Importer();
  public abstract com.fuzzylite.Engine fromString(java.lang.String);
}
Compiled from "JavaExporter.java"
public class com.fuzzylite.imex.JavaExporter extends com.fuzzylite.imex.Exporter {
  public com.fuzzylite.imex.JavaExporter();
  public java.lang.String toString(com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.variable.InputVariable, com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.variable.OutputVariable, com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.rule.RuleBlock, com.fuzzylite.Engine);
  public java.lang.String toString(com.fuzzylite.term.Term);
  public java.lang.String toString(com.fuzzylite.defuzzifier.Defuzzifier);
  public java.lang.String toString(com.fuzzylite.norm.Norm);
  public java.lang.String toString(double);
}
Compiled from "Norm.java"
public abstract class com.fuzzylite.norm.Norm {
  public com.fuzzylite.norm.Norm();
  public abstract double compute(double, double);
}
Compiled from "SNorm.java"
public abstract class com.fuzzylite.norm.SNorm extends com.fuzzylite.norm.Norm {
  public com.fuzzylite.norm.SNorm();
}
Compiled from "TNorm.java"
public abstract class com.fuzzylite.norm.TNorm extends com.fuzzylite.norm.Norm {
  public com.fuzzylite.norm.TNorm();
}
Compiled from "AlgebraicSum.java"
public class com.fuzzylite.norm.s.AlgebraicSum extends com.fuzzylite.norm.SNorm {
  public com.fuzzylite.norm.s.AlgebraicSum();
  public double compute(double, double);
}
Compiled from "BoundedSum.java"
public class com.fuzzylite.norm.s.BoundedSum extends com.fuzzylite.norm.SNorm {
  public com.fuzzylite.norm.s.BoundedSum();
  public double compute(double, double);
}
Compiled from "DrasticSum.java"
public class com.fuzzylite.norm.s.DrasticSum extends com.fuzzylite.norm.SNorm {
  public com.fuzzylite.norm.s.DrasticSum();
  public double compute(double, double);
}
Compiled from "EinsteinSum.java"
public class com.fuzzylite.norm.s.EinsteinSum extends com.fuzzylite.norm.SNorm {
  public com.fuzzylite.norm.s.EinsteinSum();
  public double compute(double, double);
}
Compiled from "HamacherSum.java"
public class com.fuzzylite.norm.s.HamacherSum extends com.fuzzylite.norm.SNorm {
  public com.fuzzylite.norm.s.HamacherSum();
  public double compute(double, double);
}
Compiled from "Maximum.java"
public class com.fuzzylite.norm.s.Maximum extends com.fuzzylite.norm.SNorm {
  public com.fuzzylite.norm.s.Maximum();
  public double compute(double, double);
}
Compiled from "NormalizedSum.java"
public class com.fuzzylite.norm.s.NormalizedSum extends com.fuzzylite.norm.SNorm {
  public com.fuzzylite.norm.s.NormalizedSum();
  public double compute(double, double);
}
Compiled from "AlgebraicProduct.java"
public class com.fuzzylite.norm.t.AlgebraicProduct extends com.fuzzylite.norm.TNorm {
  public com.fuzzylite.norm.t.AlgebraicProduct();
  public double compute(double, double);
}
Compiled from "BoundedDifference.java"
public class com.fuzzylite.norm.t.BoundedDifference extends com.fuzzylite.norm.TNorm {
  public com.fuzzylite.norm.t.BoundedDifference();
  public double compute(double, double);
}
Compiled from "DrasticProduct.java"
public class com.fuzzylite.norm.t.DrasticProduct extends com.fuzzylite.norm.TNorm {
  public com.fuzzylite.norm.t.DrasticProduct();
  public double compute(double, double);
}
Compiled from "EinsteinProduct.java"
public class com.fuzzylite.norm.t.EinsteinProduct extends com.fuzzylite.norm.TNorm {
  public com.fuzzylite.norm.t.EinsteinProduct();
  public double compute(double, double);
}
Compiled from "HamacherProduct.java"
public class com.fuzzylite.norm.t.HamacherProduct extends com.fuzzylite.norm.TNorm {
  public com.fuzzylite.norm.t.HamacherProduct();
  public double compute(double, double);
}
Compiled from "Minimum.java"
public class com.fuzzylite.norm.t.Minimum extends com.fuzzylite.norm.TNorm {
  public com.fuzzylite.norm.t.Minimum();
  public double compute(double, double);
}
Compiled from "Antecedent.java"
public class com.fuzzylite.rule.Antecedent {
  protected com.fuzzylite.rule.Expression root;
  public com.fuzzylite.rule.Antecedent();
  public com.fuzzylite.rule.Expression getRoot();
  public double activationDegree(com.fuzzylite.norm.TNorm, com.fuzzylite.norm.SNorm);
  public double activationDegree(com.fuzzylite.norm.TNorm, com.fuzzylite.norm.SNorm, com.fuzzylite.rule.Expression);
  public void load(java.lang.String, com.fuzzylite.Engine);
  public java.lang.String toString();
  public java.lang.String toPrefix();
  public java.lang.String toInfix();
  public java.lang.String toPostfix();
  public java.lang.String toPrefix(com.fuzzylite.rule.Expression);
  public java.lang.String toInfix(com.fuzzylite.rule.Expression);
  public java.lang.String toPostfix(com.fuzzylite.rule.Expression);
}
Compiled from "Consequent.java"
public class com.fuzzylite.rule.Consequent {
  protected java.util.List<com.fuzzylite.rule.Proposition> conclusions;
  public com.fuzzylite.rule.Consequent();
  public java.lang.String toString();
  public void modify(double, com.fuzzylite.norm.TNorm);
  public void load(java.lang.String, com.fuzzylite.Engine);
  public java.util.List<com.fuzzylite.rule.Proposition> getConclusions();
  public void setConclusions(java.util.List<com.fuzzylite.rule.Proposition>);
}
Compiled from "Expression.java"
public abstract class com.fuzzylite.rule.Expression {
  public com.fuzzylite.rule.Expression();
  public abstract java.lang.String toString();
}
Compiled from "Operator.java"
public class com.fuzzylite.rule.Operator extends com.fuzzylite.rule.Expression {
  protected java.lang.String name;
  protected com.fuzzylite.rule.Expression left;
  protected com.fuzzylite.rule.Expression right;
  public com.fuzzylite.rule.Operator();
  public com.fuzzylite.rule.Operator(java.lang.String);
  public com.fuzzylite.rule.Operator(java.lang.String, com.fuzzylite.rule.Expression, com.fuzzylite.rule.Expression);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public com.fuzzylite.rule.Expression getLeft();
  public void setLeft(com.fuzzylite.rule.Expression);
  public com.fuzzylite.rule.Expression getRight();
  public void setRight(com.fuzzylite.rule.Expression);
  public java.lang.String toString();
}
Compiled from "Proposition.java"
public class com.fuzzylite.rule.Proposition extends com.fuzzylite.rule.Expression {
  protected com.fuzzylite.variable.Variable variable;
  protected java.util.List<com.fuzzylite.hedge.Hedge> hedges;
  protected com.fuzzylite.term.Term term;
  public com.fuzzylite.rule.Proposition();
  public com.fuzzylite.rule.Proposition(com.fuzzylite.variable.Variable, com.fuzzylite.term.Term);
  public com.fuzzylite.rule.Proposition(com.fuzzylite.variable.Variable, java.util.List<com.fuzzylite.hedge.Hedge>, com.fuzzylite.term.Term);
  public com.fuzzylite.variable.Variable getVariable();
  public void setVariable(com.fuzzylite.variable.Variable);
  public java.util.List<com.fuzzylite.hedge.Hedge> getHedges();
  public void setHedges(java.util.List<com.fuzzylite.hedge.Hedge>);
  public com.fuzzylite.term.Term getTerm();
  public void setTerm(com.fuzzylite.term.Term);
  public java.lang.String toString();
}
Compiled from "Rule.java"
public class com.fuzzylite.rule.Rule {
  public static final java.lang.String FL_IF;
  public static final java.lang.String FL_IS;
  public static final java.lang.String FL_EQUALS;
  public static final java.lang.String FL_THEN;
  public static final java.lang.String FL_AND;
  public static final java.lang.String FL_OR;
  public static final java.lang.String FL_WITH;
  protected com.fuzzylite.rule.Antecedent antecedent;
  protected com.fuzzylite.rule.Consequent consequent;
  protected double weight;
  protected java.lang.String text;
  public com.fuzzylite.rule.Rule();
  public double activationDegree(com.fuzzylite.norm.TNorm, com.fuzzylite.norm.SNorm);
  public void activate(double, com.fuzzylite.norm.TNorm);
  public static com.fuzzylite.rule.Rule parse(java.lang.String, com.fuzzylite.Engine);
  public java.lang.String toString();
  public com.fuzzylite.rule.Antecedent getAntecedent();
  public void setAntecedent(com.fuzzylite.rule.Antecedent);
  public com.fuzzylite.rule.Consequent getConsequent();
  public void setConsequent(com.fuzzylite.rule.Consequent);
  public double getWeight();
  public void setWeight(double);
  public java.lang.String getText();
  protected void setText(java.lang.String);
}
Compiled from "RuleBlock.java"
public class com.fuzzylite.rule.RuleBlock {
  protected java.lang.String name;
  protected java.util.List<com.fuzzylite.rule.Rule> rules;
  protected com.fuzzylite.norm.TNorm conjunction;
  protected com.fuzzylite.norm.SNorm disjunction;
  protected com.fuzzylite.norm.TNorm activation;
  protected boolean enabled;
  public com.fuzzylite.rule.RuleBlock();
  public com.fuzzylite.rule.RuleBlock(java.lang.String);
  public com.fuzzylite.rule.RuleBlock(com.fuzzylite.norm.TNorm, com.fuzzylite.norm.SNorm, com.fuzzylite.norm.TNorm);
  public com.fuzzylite.rule.RuleBlock(java.lang.String, com.fuzzylite.norm.TNorm, com.fuzzylite.norm.SNorm, com.fuzzylite.norm.TNorm);
  public void activate();
  public java.lang.String toString();
  public java.lang.String getName();
  public void setName(java.lang.String);
  public com.fuzzylite.norm.TNorm getConjunction();
  public void setConjunction(com.fuzzylite.norm.TNorm);
  public com.fuzzylite.norm.SNorm getDisjunction();
  public void setDisjunction(com.fuzzylite.norm.SNorm);
  public com.fuzzylite.norm.TNorm getActivation();
  public void setActivation(com.fuzzylite.norm.TNorm);
  public boolean isEnabled();
  public void setEnabled(boolean);
  public com.fuzzylite.rule.Rule getRule(int);
  public void addRule(com.fuzzylite.rule.Rule);
  public com.fuzzylite.rule.Rule removeRule(com.fuzzylite.rule.Rule);
  public int numberOfRules();
  public java.util.List<com.fuzzylite.rule.Rule> getRules();
  public void setRules(java.util.List<com.fuzzylite.rule.Rule>);
}
Compiled from "Accumulated.java"
public class com.fuzzylite.term.Accumulated extends com.fuzzylite.term.Term {
  protected java.util.List<com.fuzzylite.term.Term> terms;
  protected double minimum;
  protected double maximum;
  protected com.fuzzylite.norm.SNorm accumulation;
  public com.fuzzylite.term.Accumulated();
  public com.fuzzylite.term.Accumulated(java.lang.String);
  public com.fuzzylite.term.Accumulated(java.lang.String, double, double);
  public com.fuzzylite.term.Accumulated(java.lang.String, double, double, com.fuzzylite.norm.SNorm);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public void clear();
  public java.util.List<com.fuzzylite.term.Term> getTerms();
  public void setTerms(java.util.List<com.fuzzylite.term.Term>);
  public double getMinimum();
  public void setMinimum(double);
  public double getMaximum();
  public void setMaximum(double);
  public com.fuzzylite.norm.SNorm getAccumulation();
  public void setAccumulation(com.fuzzylite.norm.SNorm);
}
Compiled from "Bell.java"
public class com.fuzzylite.term.Bell extends com.fuzzylite.term.Term {
  protected double center;
  protected double width;
  protected double slope;
  public com.fuzzylite.term.Bell();
  public com.fuzzylite.term.Bell(java.lang.String);
  public com.fuzzylite.term.Bell(java.lang.String, double, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getCenter();
  public void setCenter(double);
  public double getWidth();
  public void setWidth(double);
  public double getSlope();
  public void setSlope(double);
}
Compiled from "Constant.java"
public class com.fuzzylite.term.Constant extends com.fuzzylite.term.Term {
  protected double value;
  public com.fuzzylite.term.Constant();
  public com.fuzzylite.term.Constant(java.lang.String);
  public com.fuzzylite.term.Constant(java.lang.String, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getValue();
  public void setValue(double);
}
Compiled from "Discrete.java"
public class com.fuzzylite.term.Discrete extends com.fuzzylite.term.Term {
  public java.util.List<java.lang.Double> x;
  public java.util.List<java.lang.Double> y;
  public com.fuzzylite.term.Discrete();
  public com.fuzzylite.term.Discrete(java.lang.String);
  public com.fuzzylite.term.Discrete(java.lang.String, java.util.List<java.lang.Double>, java.util.List<java.lang.Double>);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public static com.fuzzylite.term.Discrete create(java.lang.String, double...);
  public double membership(double);
  public com.fuzzylite.term.Discrete clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "Function.java"
public class com.fuzzylite.term.Function extends com.fuzzylite.term.Term {
  protected java.lang.String formula;
  protected com.fuzzylite.Engine engine;
  protected com.fuzzylite.term.Function$Node root;
  protected java.util.Map<java.lang.String, java.lang.Double> variables;
  protected java.util.Map<java.lang.String, com.fuzzylite.term.Function$Operator> operators;
  protected java.util.Map<java.lang.String, com.fuzzylite.term.Function$BuiltInFunction> functions;
  public com.fuzzylite.term.Function();
  public com.fuzzylite.term.Function(java.lang.String);
  public com.fuzzylite.term.Function(java.lang.String, java.lang.String, com.fuzzylite.Engine);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public void load();
  public void load(java.lang.String);
  public void load(java.lang.String, com.fuzzylite.Engine);
  public double membership(double);
  public double evaluate();
  public static com.fuzzylite.term.Function create(java.lang.String, java.lang.String, com.fuzzylite.Engine);
  public static com.fuzzylite.term.Function create(java.lang.String, java.lang.String, com.fuzzylite.Engine, boolean);
  public void loadBuiltInFunctions();
  public boolean isOperator(java.lang.String);
  public boolean isBuiltInFunction(java.lang.String);
  public boolean isOperand(java.lang.String);
  public java.lang.String toPostfix(java.lang.String);
  public java.lang.String toPostfix(java.lang.String, boolean);
  public com.fuzzylite.term.Function$Node parse(java.lang.String);
  public java.lang.String getFormula();
  public void setFormula(java.lang.String);
  public com.fuzzylite.Engine getEngine();
  public void setEngine(com.fuzzylite.Engine);
  public com.fuzzylite.term.Function$Node getRoot();
  public java.util.Map<java.lang.String, java.lang.Double> getVariables();
  public java.util.Map<java.lang.String, com.fuzzylite.term.Function$Operator> getOperators();
  public java.util.Map<java.lang.String, com.fuzzylite.term.Function$BuiltInFunction> getFunctions();
  public static void test(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Function.java"
public class com.fuzzylite.term.Function$BuiltInFunction extends com.fuzzylite.term.Function$Element {
  public int associativity;
  public com.fuzzylite.term.Function$BuiltInFunction();
  public com.fuzzylite.term.Function$BuiltInFunction(java.lang.reflect.Method);
  public com.fuzzylite.term.Function$BuiltInFunction(java.lang.String, java.lang.reflect.Method);
  public com.fuzzylite.term.Function$BuiltInFunction(java.lang.String, java.lang.reflect.Method, int);
}
Compiled from "Function.java"
public abstract class com.fuzzylite.term.Function$Element {
  public java.lang.String name;
  public java.lang.reflect.Method method;
  public com.fuzzylite.term.Function$Element();
  public int getArity();
}
Compiled from "Function.java"
public class com.fuzzylite.term.Function$Node {
  public com.fuzzylite.term.Function$Operator operator;
  public com.fuzzylite.term.Function$BuiltInFunction function;
  public java.lang.String variable;
  public double value;
  public com.fuzzylite.term.Function$Node left;
  public com.fuzzylite.term.Function$Node right;
  public com.fuzzylite.term.Function$Node(com.fuzzylite.term.Function$Operator);
  public com.fuzzylite.term.Function$Node(com.fuzzylite.term.Function$BuiltInFunction);
  public com.fuzzylite.term.Function$Node(java.lang.String);
  public com.fuzzylite.term.Function$Node(double);
  public double evaluate(java.util.Map<java.lang.String, java.lang.Double>);
  public java.lang.String toString();
  public java.lang.String toPrefix();
  public java.lang.String toPrefix(com.fuzzylite.term.Function$Node);
  public java.lang.String toInfix();
  public java.lang.String toInfix(com.fuzzylite.term.Function$Node);
  public java.lang.String toPostfix();
  public java.lang.String toPostfix(com.fuzzylite.term.Function$Node);
}
Compiled from "Function.java"
public class com.fuzzylite.term.Function$Operator extends com.fuzzylite.term.Function$Element {
  public int precedence;
  public int associativity;
  public com.fuzzylite.term.Function$Operator();
  public com.fuzzylite.term.Function$Operator(java.lang.String, java.lang.reflect.Method, int);
  public com.fuzzylite.term.Function$Operator(java.lang.String, java.lang.reflect.Method, int, int);
}
Compiled from "Gaussian.java"
public class com.fuzzylite.term.Gaussian extends com.fuzzylite.term.Term {
  protected double mean;
  protected double standardDeviation;
  public com.fuzzylite.term.Gaussian();
  public com.fuzzylite.term.Gaussian(java.lang.String);
  public com.fuzzylite.term.Gaussian(java.lang.String, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getMean();
  public void setMean(double);
  public double getStandardDeviation();
  public void setStandardDeviation(double);
}
Compiled from "GaussianProduct.java"
public class com.fuzzylite.term.GaussianProduct extends com.fuzzylite.term.Term {
  protected double meanA;
  protected double standardDeviationA;
  protected double meanB;
  protected double standardDeviationB;
  public com.fuzzylite.term.GaussianProduct();
  public com.fuzzylite.term.GaussianProduct(java.lang.String);
  public com.fuzzylite.term.GaussianProduct(java.lang.String, double, double, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getMeanA();
  public void setMeanA(double);
  public double getStandardDeviationA();
  public void setStandardDeviationA(double);
  public double getMeanB();
  public void setMeanB(double);
  public double getStandardDeviationB();
  public void setStandardDeviationB(double);
}
Compiled from "Linear.java"
public class com.fuzzylite.term.Linear extends com.fuzzylite.term.Term {
  public java.util.List<java.lang.Double> coefficients;
  public java.util.List<com.fuzzylite.variable.InputVariable> inputVariables;
  public com.fuzzylite.term.Linear();
  public com.fuzzylite.term.Linear(java.lang.String);
  public com.fuzzylite.term.Linear(java.lang.String, java.util.List<java.lang.Double>, java.util.List<com.fuzzylite.variable.InputVariable>);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public static com.fuzzylite.term.Linear create(java.lang.String, java.util.List<com.fuzzylite.variable.InputVariable>, double...);
  public double membership(double);
  public java.util.List<java.lang.Double> getCoefficients();
  public java.util.List<com.fuzzylite.variable.InputVariable> getInputVariables();
  public void set(java.util.List<java.lang.Double>, java.util.List<com.fuzzylite.variable.InputVariable>);
}
Compiled from "PiShape.java"
public class com.fuzzylite.term.PiShape extends com.fuzzylite.term.Term {
  protected double bottomLeft;
  protected double topLeft;
  protected double topRight;
  protected double bottomRight;
  public com.fuzzylite.term.PiShape();
  public com.fuzzylite.term.PiShape(java.lang.String);
  public com.fuzzylite.term.PiShape(java.lang.String, double, double, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getBottomLeft();
  public void setBottomLeft(double);
  public double getTopLeft();
  public void setTopLeft(double);
  public double getTopRight();
  public void setTopRight(double);
  public double getBottomRight();
  public void setBottomRight(double);
}
Compiled from "Ramp.java"
public class com.fuzzylite.term.Ramp extends com.fuzzylite.term.Term {
  protected double start;
  protected double end;
  public com.fuzzylite.term.Ramp();
  public com.fuzzylite.term.Ramp(java.lang.String);
  public com.fuzzylite.term.Ramp(java.lang.String, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getStart();
  public void setStart(double);
  public double getEnd();
  public void setEnd(double);
}
Compiled from "Rectangle.java"
public class com.fuzzylite.term.Rectangle extends com.fuzzylite.term.Term {
  protected double start;
  protected double end;
  public com.fuzzylite.term.Rectangle();
  public com.fuzzylite.term.Rectangle(java.lang.String);
  public com.fuzzylite.term.Rectangle(java.lang.String, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getStart();
  public void setStart(double);
  public double getEnd();
  public void setEnd(double);
}
Compiled from "SShape.java"
public class com.fuzzylite.term.SShape extends com.fuzzylite.term.Term {
  protected double start;
  protected double end;
  public com.fuzzylite.term.SShape();
  public com.fuzzylite.term.SShape(java.lang.String);
  public com.fuzzylite.term.SShape(java.lang.String, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getStart();
  public void setStart(double);
  public double getEnd();
  public void setEnd(double);
}
Compiled from "Sigmoid.java"
public class com.fuzzylite.term.Sigmoid extends com.fuzzylite.term.Term {
  protected double inflection;
  protected double slope;
  public com.fuzzylite.term.Sigmoid();
  public com.fuzzylite.term.Sigmoid(java.lang.String);
  public com.fuzzylite.term.Sigmoid(java.lang.String, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getInflection();
  public void setInflection(double);
  public double getSlope();
  public void setSlope(double);
}
Compiled from "SigmoidDifference.java"
public class com.fuzzylite.term.SigmoidDifference extends com.fuzzylite.term.Term {
  protected double left;
  protected double rising;
  protected double falling;
  protected double right;
  public com.fuzzylite.term.SigmoidDifference();
  public com.fuzzylite.term.SigmoidDifference(java.lang.String);
  public com.fuzzylite.term.SigmoidDifference(java.lang.String, double, double, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getLeft();
  public void setLeft(double);
  public double getRising();
  public void setRising(double);
  public double getFalling();
  public void setFalling(double);
  public double getRight();
  public void setRight(double);
}
Compiled from "SigmoidProduct.java"
public class com.fuzzylite.term.SigmoidProduct extends com.fuzzylite.term.Term {
  protected double left;
  protected double rising;
  protected double falling;
  protected double right;
  public com.fuzzylite.term.SigmoidProduct();
  public com.fuzzylite.term.SigmoidProduct(java.lang.String);
  public com.fuzzylite.term.SigmoidProduct(java.lang.String, double, double, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getLeft();
  public void setLeft(double);
  public double getRising();
  public void setRising(double);
  public double getFalling();
  public void setFalling(double);
  public double getRight();
  public void setRight(double);
}
Compiled from "Term.java"
public abstract class com.fuzzylite.term.Term implements java.lang.Cloneable {
  protected java.lang.String name;
  public com.fuzzylite.term.Term();
  public com.fuzzylite.term.Term(java.lang.String);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public final java.lang.String toString();
  public abstract java.lang.String parameters();
  public abstract void configure(java.lang.String);
  public abstract double membership(double);
}
Compiled from "Thresholded.java"
public class com.fuzzylite.term.Thresholded extends com.fuzzylite.term.Term {
  protected com.fuzzylite.term.Term term;
  protected double threshold;
  protected com.fuzzylite.norm.TNorm activation;
  public com.fuzzylite.term.Thresholded();
  public com.fuzzylite.term.Thresholded(com.fuzzylite.term.Term, double, com.fuzzylite.norm.TNorm);
  public double membership(double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public com.fuzzylite.term.Term getTerm();
  public void setTerm(com.fuzzylite.term.Term);
  public double getThreshold();
  public void setThreshold(double);
  public com.fuzzylite.norm.TNorm getActivation();
  public void setActivation(com.fuzzylite.norm.TNorm);
}
Compiled from "Trapezoid.java"
public class com.fuzzylite.term.Trapezoid extends com.fuzzylite.term.Term {
  protected double a;
  protected double b;
  protected double c;
  protected double d;
  public com.fuzzylite.term.Trapezoid();
  public com.fuzzylite.term.Trapezoid(java.lang.String);
  public com.fuzzylite.term.Trapezoid(java.lang.String, double, double, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getA();
  public void setA(double);
  public double getB();
  public void setB(double);
  public double getC();
  public void setC(double);
  public double getD();
  public void setD(double);
}
Compiled from "Triangle.java"
public class com.fuzzylite.term.Triangle extends com.fuzzylite.term.Term {
  protected double a;
  protected double b;
  protected double c;
  public com.fuzzylite.term.Triangle();
  public com.fuzzylite.term.Triangle(java.lang.String);
  public com.fuzzylite.term.Triangle(java.lang.String, double, double);
  public com.fuzzylite.term.Triangle(java.lang.String, double, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getA();
  public void setA(double);
  public double getB();
  public void setB(double);
  public double getC();
  public void setC(double);
}
Compiled from "ZShape.java"
public class com.fuzzylite.term.ZShape extends com.fuzzylite.term.Term {
  protected double start;
  protected double end;
  public com.fuzzylite.term.ZShape();
  public com.fuzzylite.term.ZShape(java.lang.String);
  public com.fuzzylite.term.ZShape(java.lang.String, double, double);
  public java.lang.String parameters();
  public void configure(java.lang.String);
  public double membership(double);
  public double getStart();
  public void setStart(double);
  public double getEnd();
  public void setEnd(double);
}
Compiled from "InputVariable.java"
public class com.fuzzylite.variable.InputVariable extends com.fuzzylite.variable.Variable {
  protected double inputValue;
  public com.fuzzylite.variable.InputVariable();
  public com.fuzzylite.variable.InputVariable(java.lang.String);
  public com.fuzzylite.variable.InputVariable(java.lang.String, double, double);
  public double getInputValue();
  public void setInputValue(double);
  public java.lang.String toString();
}
Compiled from "OutputVariable.java"
public class com.fuzzylite.variable.OutputVariable extends com.fuzzylite.variable.Variable {
  protected com.fuzzylite.term.Accumulated fuzzyOutput;
  protected com.fuzzylite.defuzzifier.Defuzzifier defuzzifier;
  protected double defaultValue;
  protected double lastValidOutput;
  protected boolean lockOutputRange;
  protected boolean lockValidOutput;
  public com.fuzzylite.variable.OutputVariable();
  public com.fuzzylite.variable.OutputVariable(java.lang.String);
  public com.fuzzylite.variable.OutputVariable(java.lang.String, double, double);
  public double defuzzify();
  public double defuzzifyNoLocks();
  public java.lang.String toString();
  public void setMinimum(double);
  public void setMaximum(double);
  public com.fuzzylite.term.Accumulated fuzzyOutput();
  public com.fuzzylite.defuzzifier.Defuzzifier getDefuzzifier();
  public void setDefuzzifier(com.fuzzylite.defuzzifier.Defuzzifier);
  public double getDefaultValue();
  public void setDefaultValue(double);
  public double getLastValidOutput();
  public void setLastValidOutput(double);
  public boolean isLockingOutputRange();
  public void setLockOutputRange(boolean);
  public boolean isLockingValidOutput();
  public void setLockValidOutput(boolean);
}
Compiled from "Variable.java"
public class com.fuzzylite.variable.Variable {
  protected java.lang.String name;
  protected double minimum;
  protected double maximum;
  protected java.util.List<com.fuzzylite.term.Term> terms;
  protected boolean enabled;
  public com.fuzzylite.variable.Variable(java.lang.String);
  public com.fuzzylite.variable.Variable(java.lang.String, double, double);
  public java.lang.String fuzzify(double);
  public java.lang.String toString();
  public void sort(com.fuzzylite.defuzzifier.Defuzzifier);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public void setRange(double, double);
  public double range();
  public double getMinimum();
  public void setMinimum(double);
  public double getMaximum();
  public void setMaximum(double);
  public void setEnabled(boolean);
  public boolean isEnabled();
  public com.fuzzylite.term.Term getTerm(java.lang.String);
  public com.fuzzylite.term.Term getTerm(int);
  public void addTerm(com.fuzzylite.term.Term);
  public com.fuzzylite.term.Term removeTerm(com.fuzzylite.term.Term);
  public com.fuzzylite.term.Term removeTerm(java.lang.String);
  public boolean hasTerm(java.lang.String);
  public int numberOfTerms();
  public java.util.List<com.fuzzylite.term.Term> getTerms();
  public void setTerms(java.util.List<com.fuzzylite.term.Term>);
}
Compiled from "Variable.java"
class com.fuzzylite.variable.Variable$1 implements java.util.Comparator<com.fuzzylite.term.Term> {
  final com.fuzzylite.variable.Variable this$0;
  com.fuzzylite.variable.Variable$1(com.fuzzylite.variable.Variable);
  public int compare(com.fuzzylite.term.Term, com.fuzzylite.term.Term);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "Variable.java"
class com.fuzzylite.variable.Variable$2 implements java.util.Comparator<com.fuzzylite.term.Term> {
  final java.util.Map val$map;
  final com.fuzzylite.variable.Variable this$0;
  com.fuzzylite.variable.Variable$2(com.fuzzylite.variable.Variable, java.util.Map);
  public int compare(com.fuzzylite.term.Term, com.fuzzylite.term.Term);
  public int compare(java.lang.Object, java.lang.Object);
}
