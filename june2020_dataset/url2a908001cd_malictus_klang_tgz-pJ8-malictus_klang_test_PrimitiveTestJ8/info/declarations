Compiled from "KlangConstants.java"
public class malictus.klang.KlangConstants {
  public static final java.lang.String KLANG_VERSION;
  public static final int BUFFER_SIZE;
  public static final java.lang.String ERROR_BAD_VALUE_EXCEPTION;
  public static final java.lang.String ERROR_BAD_VALUE_EXCEPTION_NOVALUE;
  public static final java.lang.String ERROR_BAD_VALUE_EXCEPTION_WEIRDVALUE;
  public static final java.lang.String ERROR_NO_SUCH_FILE;
  public static final java.lang.String ERROR_NO_SUCH_CHUNK;
  public static final java.lang.String ERROR_NO_SUCH_PRIM;
  public static final java.lang.String ERROR_FILE_IS_DIRECTORY;
  public static final java.lang.String ERROR_FILE_CANT_BE_READ;
  public static final java.lang.String ERROR_FILE_IS_INCORRECT_TYPE;
  public static final java.lang.String ERROR_FILE_DOESNT_SUPPORT;
  public static final java.lang.String ERROR_CHUNK_IS_FILE;
  public static final java.lang.String ERROR_GENERAL_FILE;
  public static final java.lang.String ERROR_CHUNK_ISNT_EDITABLE;
  public static final java.lang.String ERROR_FILE_ISNT_EDITABLE;
  public static final java.lang.String ERROR_NOT_FIXED_BYTE;
  public static final java.lang.String ERROR_TITLE;
  public static final java.lang.String ERROR_IN_OUT_IDENTICAL;
  public static final java.lang.String ERROR_NOT_RIFF_RIFX;
  public static final java.lang.String ERROR_NOT_FORM;
  public static final java.lang.String ERROR_TEXT_ENCODING;
  public static final java.lang.String PRIMITIVE_DATA_CHRM_CHUNK_WHITEPOINTX;
  public static final java.lang.String PRIMITIVE_DATA_CHRM_CHUNK_WHITEPOINTY;
  public static final java.lang.String PRIMITIVE_DATA_CHRM_CHUNK_REDX;
  public static final java.lang.String PRIMITIVE_DATA_CHRM_CHUNK_REDY;
  public static final java.lang.String PRIMITIVE_DATA_CHRM_CHUNK_GREENX;
  public static final java.lang.String PRIMITIVE_DATA_CHRM_CHUNK_GREENY;
  public static final java.lang.String PRIMITIVE_DATA_CHRM_CHUNK_BLUEX;
  public static final java.lang.String PRIMITIVE_DATA_CHRM_CHUNK_BLUEY;
  public static final java.lang.String PRIMITIVE_DATA_COMM_CHUNK_NUM_CHANNELS;
  public static final java.lang.String PRIMITIVE_DATA_COMM_CHUNK_NUM_FRAMES;
  public static final java.lang.String PRIMITIVE_DATA_COMM_CHUNK_SAMPLE_SIZE;
  public static final java.lang.String PRIMITIVE_DATA_COMM_CHUNK_SAMPLE_RATE;
  public static final java.lang.String PRIMITIVE_DATA_FACT_CHUNK_NUM_SAMPS;
  public static final java.lang.String PRIMITIVE_DATA_FMT_CHUNK_BLOCK_ALIGN;
  public static final java.lang.String PRIMITIVE_DATA_FMT_CHUNK_BPS;
  public static final java.lang.String PRIMITIVE_DATA_FMT_CHUNK_CHANNEL_MASK;
  public static final java.lang.String PRIMITIVE_DATA_FMT_CHUNK_COMP_CODE;
  public static final java.lang.String PRIMITIVE_DATA_FMT_CHUNK_NUM_CHANNELS;
  public static final java.lang.String PRIMITIVE_DATA_FMT_CHUNK_SAMP_RATE;
  public static final java.lang.String PRIMITIVE_DATA_FMT_CHUNK_SIGBITS;
  public static final java.lang.String PRIMITIVE_DATA_FMT_CHUNK_SUBFORMAT;
  public static final java.lang.String PRIMITIVE_DATA_FMT_CHUNK_BPSSPB;
  public static final java.lang.String PRIMITIVE_DATA_FORM_CHUNK_NAME;
  public static final java.lang.String PRIMITIVE_DATA_GAMA_CHUNK_GAMMA;
  public static final java.lang.String PRIMITIVE_DATA_IHDR_CHUNK_BITDEPTH;
  public static final java.lang.String PRIMITIVE_DATA_IHDR_CHUNK_COLORTYPE;
  public static final java.lang.String PRIMITIVE_DATA_IHDR_CHUNK_COMPRESS;
  public static final java.lang.String PRIMITIVE_DATA_IHDR_CHUNK_FILTER;
  public static final java.lang.String PRIMITIVE_DATA_IHDR_CHUNK_HEIGHT;
  public static final java.lang.String PRIMITIVE_DATA_IHDR_CHUNK_INTERLACE;
  public static final java.lang.String PRIMITIVE_DATA_IHDR_CHUNK_WIDTH;
  public static final java.lang.String PRIMITIVE_DATA_NULLSTRING_CHUNK_VALUE;
  public static final java.lang.String PRIMITIVE_DATA_PHYS_CHUNK_PIX_X;
  public static final java.lang.String PRIMITIVE_DATA_PHYS_CHUNK_PIX_Y;
  public static final java.lang.String PRIMITIVE_DATA_PHYS_CHUNK_UNIT;
  public static final java.lang.String PRIMITIVE_DATA_PLAINSTRING_CHUNK_VALUE;
  public static final java.lang.String PRIMITIVE_DATA_RAW_VALUE_NAME;
  public static final java.lang.String PRIMITIVE_DATA_RIFF_CHUNK_NAME;
  public static final java.lang.String PRIMITIVE_DATA_SRGB_CHUNK_RENDERING_INTENT;
  public static final java.lang.String PRIMITIVE_DATA_TEXT_CHUNK_KEYWORD;
  public static final java.lang.String PRIMITIVE_DATA_TEXT_CHUNK_VALUE;
  public static final java.lang.String PRIMITIVE_DATA_ZTXT_CHUNK_COMP_METHOD;
  public static java.util.LinkedHashMap<java.lang.String, java.lang.String> VALUESTRINGS_RIFFCHUNKCODES;
  public static java.util.LinkedHashMap<java.lang.String, java.lang.String> VALUESTRINGS_RENDERINGINTENT;
  public static java.util.LinkedHashMap<java.lang.String, java.lang.String> VALUESTRINGS_ZTXTCOMPMETHOD;
  public static java.util.LinkedHashMap<java.lang.String, java.lang.String> VALUESTRINGS_WAVECOMPCODES;
  public static final int CHUNKTYPE_RIFF;
  public static final int CHUNKTYPE_IFF;
  public static final int CHUNKTYPE_PNG;
  public static final int CHUNKTYPE_PNGFILE;
  public static final int CHUNKTYPE_NOCHUNK;
  public static final int CHUNKTYPE_PLAINTEXT;
  public static final java.lang.String CHUNKNAME_AXML;
  public static final java.lang.String CHUNKNAME_CHRM;
  public static final java.lang.String CHUNKNAME_COMM;
  public static final java.lang.String CHUNKNAME_DATA;
  public static final java.lang.String CHUNKNAME_FACT;
  public static final java.lang.String CHUNKNAME_FMT;
  public static final java.lang.String CHUNKNAME_FORM;
  public static final java.lang.String CHUNKNAME_GAMA;
  public static final java.lang.String CHUNKNAME_IARL;
  public static final java.lang.String CHUNKNAME_IART;
  public static final java.lang.String CHUNKNAME_ICMS;
  public static final java.lang.String CHUNKNAME_ICMT;
  public static final java.lang.String CHUNKNAME_ICOP;
  public static final java.lang.String CHUNKNAME_ICRD;
  public static final java.lang.String CHUNKNAME_ICRP;
  public static final java.lang.String CHUNKNAME_IDAT;
  public static final java.lang.String CHUNKNAME_IDIM;
  public static final java.lang.String CHUNKNAME_IDPI;
  public static final java.lang.String CHUNKNAME_IEND;
  public static final java.lang.String CHUNKNAME_IENG;
  public static final java.lang.String CHUNKNAME_IGNR;
  public static final java.lang.String CHUNKNAME_IHDR;
  public static final java.lang.String CHUNKNAME_IKEY;
  public static final java.lang.String CHUNKNAME_ILGT;
  public static final java.lang.String CHUNKNAME_IMED;
  public static final java.lang.String CHUNKNAME_INAM;
  public static final java.lang.String CHUNKNAME_INVALIDDATA;
  public static final java.lang.String CHUNKNAME_IPLT;
  public static final java.lang.String CHUNKNAME_IPRD;
  public static final java.lang.String CHUNKNAME_ISBJ;
  public static final java.lang.String CHUNKNAME_ISFT;
  public static final java.lang.String CHUNKNAME_ISHP;
  public static final java.lang.String CHUNKNAME_ISRC;
  public static final java.lang.String CHUNKNAME_ISRF;
  public static final java.lang.String CHUNKNAME_ITCH;
  public static final java.lang.String CHUNKNAME_IXML;
  public static final java.lang.String CHUNKNAME_LIST;
  public static final java.lang.String CHUNKNAME_MKBF;
  public static final java.lang.String CHUNKNAME_MKBS;
  public static final java.lang.String CHUNKNAME_MKBT;
  public static final java.lang.String CHUNKNAME_MKTS;
  public static final java.lang.String CHUNKNAME_PHYS;
  public static final java.lang.String CHUNKNAME_PLAINTEXT;
  public static final java.lang.String CHUNKNAME_PNGFILE;
  public static final java.lang.String CHUNKNAME_PRVW;
  public static final java.lang.String CHUNKNAME_RAWDATA;
  public static final java.lang.String CHUNKNAME_RIFF;
  public static final java.lang.String CHUNKNAME_RIFX;
  public static final java.lang.String CHUNKNAME_SBIT;
  public static final java.lang.String CHUNKNAME_SRGB;
  public static final java.lang.String CHUNKNAME_TEXT;
  public static final java.lang.String CHUNKNAME_ZTXT;
  public static final java.awt.Font KLANGEDITOR_TEXTFIELD_FONT;
  public static final java.awt.Font KLANGEDITOR_BORDERTITLE_FONT;
  public static final java.lang.String KLANGEDITOR_TITLE;
  public static final java.lang.String KLANGEDITOR_ABOUT_TEXT;
  public static final java.lang.String KLANGEDITOR_MENU_QUIT;
  public static final java.lang.String KLANGEDITOR_MENU_CLOSE;
  public static final java.lang.String KLANGEDITOR_MENU_OPEN;
  public static final java.lang.String KLANGEDITOR_MENU_WEB;
  public static final java.lang.String KLANGEDITOR_MENU_DONATE;
  public static final java.lang.String KLANGEDITOR_MENU_CREDITS;
  public static final java.lang.String KLANGEDITOR_MENU_FILE;
  public static final java.lang.String KLANGEDITOR_MENU_ABOUT;
  public static final java.lang.String KLANGEDITOR_MENU_READONLY;
  public static final java.lang.String KLANGEDITOR_MENU_DEC;
  public static final java.lang.String KLANGEDITOR_MENU_HEX;
  public static final java.lang.String KLANGEDITOR_MENU_OPTIONS;
  public static final java.lang.String KLANGEDITOR_MENU_AUTOTEXT;
  public static final java.lang.String KLANGEDITOR_MENU_MANUALTEXT;
  public static final java.lang.String KLANGEDITOR_URL_PROJECT;
  public static final java.lang.String KLANGEDITOR_URL_DONATE;
  public static final java.lang.String KLANGEDITOR_ERROR_OPENING_TITLE;
  public static final java.lang.String KLANGEDITOR_ERROR_OPENING;
  public static final java.lang.String KLANGEDITOR_BASICINFO_NAME;
  public static final java.lang.String KLANGEDITOR_BASICINFO_LOCATION;
  public static final java.lang.String KLANGEDITOR_BASICINFO_SIZE;
  public static final java.lang.String KLANGEDITOR_BASICINFO_FILETYPE;
  public static final java.lang.String KLANGEDITOR_BASICINFO_PANELNAME;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_PANELNAME;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_NAME;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_DESC;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_TYPE;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_START;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_END;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_SIZE;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_DATASTART;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_DATAEND;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_DATASIZE;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_CHECKSUMLABEL;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_CHECKSUMLABELDATA;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_CHECKSUMBUTTON;
  public static final java.lang.String KLANGEDITOR_CHUNKINFO_CHECKSUMDATALABEL;
  public static final java.lang.String KLANGEDITOR_CHUNKEDIT_ADD;
  public static final java.lang.String KLANGEDITOR_CHUNKEDIT_EDITNAME;
  public static final java.lang.String KLANGEDITOR_CHUNKNAME_PROMPT;
  public static final java.lang.String KLANGEDITOR_CHUNKNAME_PROMPT_TITLE;
  public static final java.lang.String KLANGEDITOR_CONTAINER_NAME_WARN;
  public static final java.lang.String KLANGEDITOR_CONTAINER_NAME_WARN_TITLE;
  public static final java.lang.String KLANGEDITOR_CHUNKPRIM_PANELNAME;
  public static final java.lang.String KLANGEDITOR_PRIMDIALOG_TITLE;
  public static final java.lang.String KLANGEDITOR_PRIMDIALOG_PRIMNAME;
  public static final java.lang.String KLANGEDITOR_PRIMDIALOG_PRIMTYPE;
  public static final java.lang.String KLANGEDITOR_PRIMDIALOG_PRIMVAL;
  public static final java.lang.String KLANGEDITOR_PRIMDIALOG_TEXTENC;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_PANELNAME;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_CURBYTELABEL;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_LBLASCII;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_LBLHEX;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_JUMPBUTTON;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_BACK1;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_BACK16;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_FOR1;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_FOR16;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_INSERTBYTES;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_DELETEBYTES;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_EXPORTBYTES;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_PRIMVIEW1;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_PRIMEDITBUTTON;
  public static final java.lang.String KLANGEDITOR_PRIMSUB_EDIT;
  public static final java.lang.String KLANGEDITOR_PRIMSUB_JUMPTO;
  public static final java.lang.String KLANGEDITOR_TREEVIEW_PANELNAME;
  public static final java.lang.String KLANGEDITOR_DELETEBYTESDIALOG_TITLE;
  public static final java.lang.String KLANGEDITOR_BYTESDIALOG_FROM;
  public static final java.lang.String KLANGEDITOR_BYTESDIALOG_TO;
  public static final java.lang.String KLANGEDITOR_EXPORTBYTESDIALOG_FILELBL;
  public static final java.lang.String KLANGEDITOR_BROWSEPANEL_FILEBTN;
  public static final java.lang.String KLANGEDITOR_INSERTBYTESDIALOG_TITLE;
  public static final java.lang.String KLANGEDITOR_INSERTBYTESDIALOG_FILELBL;
  public static final java.lang.String KLANGEDITOR_INSERTBYTESDIALOG_RADBLANK;
  public static final java.lang.String KLANGEDITOR_INSERTBYTESDIALOG_FILEEND;
  public static final java.lang.String KLANGEDITOR_INSERTBYTESDIALOG_RADFILE;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_NUMERR;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_NUMERR2;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_NUMERR3;
  public static final java.lang.String KLANGEDITOR_RAWEDIT_COFIRMDEL;
  public static final java.lang.String KLANGEDITOR_EXPORTBYTESDIALOG_TITLE;
  public static final java.lang.String KLANG_TEXTENC_DIALOG_TITLE;
  public static final java.lang.String KLANG_TEXTENC_DIALOG_TEXT;
  public static final java.lang.String KLANG_TEXTENC_DIALOG_TEXT1;
  public static final java.lang.String KLANG_TEXTENC_DIALOG_TEXT2;
  public static final java.lang.String KLANG_TEXTENC_DIALOG_NONE;
  public static final java.lang.String KLANGEDITOR_CHUNKEDIT_EXPORT;
  public static final java.lang.String KLANGEDITOR_CHUNKEDIT_DELETE;
  public static final java.lang.String KLANGEDITOR_WARNING_FILE_EXISTS;
  public static final java.lang.String KLANGEDITOR_WARNING_FILE_EXISTS_TITLE;
  public static final java.lang.String KLANGEDITOR_ERROR_TITLE;
  public static final java.lang.String KLANGEDITOR_REALLY_DELETE;
  public static final java.lang.String KLANGEDITOR_REALLY_DELETE_TITLE;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_TITLE;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_CURCHUNKTEXT1;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_CHUNKNAMELBL;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_BEFORE;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_AFTER;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_UNDER;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_CURCHUNK;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_RADBLANK;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_RADFILE;
  public static final java.lang.String KLANGEDITOR_ADDNEWCHUNKDIALOG_FILELBL;
  public static final int KLANGEDITOR_INITIAL_WIDTH;
  public static final int KLANGEDITOR_INITIAL_HEIGHT;
  public static final int KLANGEDITOR_BASICPANEL_HEIGHT;
  public static final int KLANGEDITOR_BASICPANEL_WIDTH;
  public static final int KLANGEDITOR_CHUNKEDITPANEL_HEIGHT;
  public static final int KLANGEDITOR_CHUNKEDITPANEL_WIDTH;
  public static final int KLANGEDITOR_CHUNKTREE_PANELWIDTH;
  public static final int KLANGEDITOR_PROGRESSWINDOW_WIDTH;
  public static final int KLANGEDITOR_PROGRESSWINDOW_HEIGHT;
  public static final int KLANGEDITOR_RAWEDIT_EDITSTRIP_WIDTH;
  public static final java.lang.String KLANGEDITOR_SUPPORTED_FILE_EXTENSIONS;
  public static final java.lang.String KLANGEDITOR_SUPPORTED_FILE_EXTENSIONS_DESC;
  public static java.util.Vector<java.lang.String> KLANGEDITOR_DISPLAY_PRIMS;
  public static java.lang.String getPrimitiveDescriptionFor(java.lang.String);
  public static java.lang.String getPrimitiveDataDescriptionFor(java.lang.String);
  public static java.util.LinkedHashMap<java.lang.String, java.lang.String> getValueStringsFor(java.lang.String);
  public static java.lang.String getCurrentValueStringFor(java.lang.String, malictus.klang.primitives.Primitive);
  public static java.lang.String getChunkTypeDescriptionFor(int);
  public static java.lang.String getChunkNameDescriptionFor(java.lang.String);
  public static java.lang.String getFileTypeDescriptionFor(java.lang.String);
  static {};
}
Compiled from "KlangUtil.java"
public class malictus.klang.KlangUtil {
  public static byte[] inflate(byte[]) throws malictus.klang.primitives.BadValueException;
  public static byte[] deflate(byte[]) throws malictus.klang.primitives.BadValueException;
  public static java.util.Vector<java.lang.String> getCommonTextEncodings();
  public static java.lang.String determineEncodingFor(java.io.File, java.lang.Long, java.lang.Long);
  public static java.lang.String stringForBytes(long);
  public static long adjustForPadByte(long);
  public static void centerWindow(java.awt.Window);
  public static void deleteFromFile(java.io.File, long, long) throws java.io.IOException;
  public static void appendToFile(java.io.File, java.io.File) throws java.io.IOException;
  public static void appendToFile(byte[], java.io.File) throws java.io.IOException;
  public static void insertIntoFile(byte[], java.io.File, long) throws java.io.IOException;
  public static void insertBlankBytes(long, long, java.io.File) throws java.io.IOException;
  public static void insertIntoFile(java.io.File, java.io.File, long) throws java.io.IOException;
  public static void copyFile(java.io.File, java.io.File) throws java.io.IOException;
  public static void writeToFile(java.io.File, java.io.File, long, long) throws java.io.IOException;
  public static java.lang.String getChecksum(java.io.File, long, long) throws java.io.IOException;
  public static long getCRCFor(java.io.File, long, long) throws java.io.IOException;
  public static java.lang.String convertToHex(long);
  public static java.lang.String convertToHex(int);
}
Compiled from "CHRMChunk.java"
public class malictus.klang.chunk.CHRMChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.CHRMChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "COMMChunk.java"
public class malictus.klang.chunk.COMMChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.COMMChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "Chunk.java"
public abstract class malictus.klang.chunk.Chunk {
  protected malictus.klang.file.KlangFile parentFile;
  protected long startPosition;
  protected long endPosition;
  protected long dataStartPosition;
  protected long dataEndPosition;
  protected int chunkType;
  protected java.lang.String chunkName;
  protected malictus.klang.chunk.ContainerChunk parentChunk;
  protected java.lang.String checksum;
  protected java.lang.String datachecksum;
  protected java.util.Vector<malictus.klang.primitives.PrimitiveData> primitives;
  protected java.lang.Boolean isBigEndian;
  public malictus.klang.chunk.Chunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.lang.Boolean, java.io.RandomAccessFile) throws java.io.IOException;
  public malictus.klang.chunk.Chunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
  public malictus.klang.file.KlangFile getParentFile();
  public java.lang.Boolean getIsBigEndian();
  public malictus.klang.chunk.ContainerChunk getParentChunk();
  public long getStartPosition();
  public long getEndPosition();
  public long getDataStartPosition();
  public long getDataEndPosition();
  public int getChunkType();
  public java.lang.String getChunkTypeDescription();
  public java.lang.String getChunkName();
  public java.lang.String getChunkNameDescription();
  public java.lang.String getChecksum();
  public void calculateChecksum() throws java.io.IOException;
  public java.lang.String getDataChecksum();
  public void calculateDataChecksum() throws java.io.IOException;
  public java.util.Vector<malictus.klang.primitives.PrimitiveData> getPrimitiveData();
  public malictus.klang.primitives.PrimitiveData getPrimitiveValueNamed(java.lang.String);
  public boolean chunkCanBeDeleted();
  public boolean chunkNameCanBeAltered();
  public boolean chunkCanBeAltered();
  public void deleteChunk(java.io.RandomAccessFile) throws java.io.IOException;
  public void renameChunk(java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
  protected void chunkIsAboutToChangeSize(long, java.io.RandomAccessFile) throws java.io.IOException;
  public void chunkJustChanged(java.io.RandomAccessFile) throws java.io.IOException;
  public void reparseChunkPrimitives(java.io.RandomAccessFile) throws java.io.IOException;
  public java.lang.String toString();
  public boolean chunkIsAllData();
}
Compiled from "ChunkFactory.java"
public class malictus.klang.chunk.ChunkFactory {
  public static malictus.klang.chunk.Chunk createChunk(malictus.klang.file.KlangFile, long, int, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile, java.lang.Boolean, java.lang.Long, java.lang.String) throws java.io.IOException;
  public static malictus.klang.chunk.Chunk getChunkNamed(java.util.Vector<malictus.klang.chunk.Chunk>, java.lang.String, boolean);
  public static java.util.Vector<malictus.klang.chunk.Chunk> getChunksNamed(java.util.Vector<malictus.klang.chunk.Chunk>, java.lang.String, boolean);
}
Compiled from "ContainerChunk.java"
public abstract class malictus.klang.chunk.ContainerChunk extends malictus.klang.chunk.Chunk {
  protected java.util.Vector<malictus.klang.chunk.Chunk> chunks;
  protected boolean usesPadByte;
  public malictus.klang.chunk.ContainerChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
  public malictus.klang.chunk.ContainerChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.lang.Boolean, java.io.RandomAccessFile) throws java.io.IOException;
  public java.util.Vector<malictus.klang.chunk.Chunk> getSubChunks();
  public malictus.klang.chunk.Chunk getChunkNamed(java.lang.String, boolean);
  public java.util.Vector<malictus.klang.chunk.Chunk> getChunksNamed(java.lang.String, boolean);
  public boolean usesPadByte();
}
Compiled from "EditableContainerChunk.java"
public interface malictus.klang.chunk.EditableContainerChunk {
  public abstract void addChunkFromFile(java.io.File, java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract void addChunkFromArray(byte[], java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract void subChunkWillChangeSize(malictus.klang.chunk.Chunk, long, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract void subChunkHasChanged(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract void editSubChunkName(malictus.klang.chunk.Chunk, java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "FACTChunk.java"
public class malictus.klang.chunk.FACTChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.FACTChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.lang.Boolean, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "FMTChunk.java"
public class malictus.klang.chunk.FMTChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.FMTChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.lang.Boolean, java.io.RandomAccessFile) throws java.io.IOException;
  public void reparseChunkPrimitives(java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "FORMChunk.java"
public class malictus.klang.chunk.FORMChunk extends malictus.klang.chunk.ContainerChunk implements malictus.klang.chunk.EditableContainerChunk {
  public malictus.klang.chunk.FORMChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromFile(java.io.File, java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromArray(byte[], java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void subChunkWillChangeSize(malictus.klang.chunk.Chunk, long, java.io.RandomAccessFile) throws java.io.IOException;
  public void subChunkHasChanged(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void editSubChunkName(malictus.klang.chunk.Chunk, java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "GAMAChunk.java"
public class malictus.klang.chunk.GAMAChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.GAMAChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "IHDRChunk.java"
public class malictus.klang.chunk.IHDRChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.IHDRChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "NullStringChunk.java"
public class malictus.klang.chunk.NullStringChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.NullStringChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile, java.lang.String, boolean) throws java.io.IOException;
  public void reparseChunkPrimitives(java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "PHYSChunk.java"
public class malictus.klang.chunk.PHYSChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.PHYSChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "PNGFileChunk.java"
public class malictus.klang.chunk.PNGFileChunk extends malictus.klang.chunk.ContainerChunk implements malictus.klang.chunk.EditableContainerChunk {
  public malictus.klang.chunk.PNGFileChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromFile(java.io.File, java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromArray(byte[], java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void subChunkWillChangeSize(malictus.klang.chunk.Chunk, long, java.io.RandomAccessFile) throws java.io.IOException;
  public void subChunkHasChanged(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void editSubChunkName(malictus.klang.chunk.Chunk, java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "PlainTextChunk.java"
public class malictus.klang.chunk.PlainTextChunk extends malictus.klang.chunk.Chunk {
  java.lang.String textEncoding;
  public malictus.klang.chunk.PlainTextChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile, java.lang.String) throws java.io.IOException;
  public void setTextEncoding(java.lang.String);
  public java.lang.String getTextEncoding();
  public void reparseChunkPrimitives(java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "RIFFChunk.java"
public class malictus.klang.chunk.RIFFChunk extends malictus.klang.chunk.ContainerChunk implements malictus.klang.chunk.EditableContainerChunk {
  public malictus.klang.chunk.RIFFChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.lang.Boolean, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromFile(java.io.File, java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromArray(byte[], java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void subChunkWillChangeSize(malictus.klang.chunk.Chunk, long, java.io.RandomAccessFile) throws java.io.IOException;
  public void subChunkHasChanged(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void editSubChunkName(malictus.klang.chunk.Chunk, java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "RawChunk.java"
public class malictus.klang.chunk.RawChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.RawChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "SRGBChunk.java"
public class malictus.klang.chunk.SRGBChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.SRGBChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "TEXTChunk.java"
public class malictus.klang.chunk.TEXTChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.TEXTChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void reparseChunkPrimitives(java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "UnknownChunk.java"
public class malictus.klang.chunk.UnknownChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.UnknownChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "ZTXTChunk.java"
public class malictus.klang.chunk.ZTXTChunk extends malictus.klang.chunk.Chunk {
  public malictus.klang.chunk.ZTXTChunk(malictus.klang.file.KlangFile, long, long, long, long, int, java.lang.String, malictus.klang.chunk.ContainerChunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void reparseChunkPrimitives(java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "AIFFFile.java"
public class malictus.klang.file.AIFFFile extends malictus.klang.file.FORMFile {
  public malictus.klang.file.AIFFFile(java.io.File, java.io.RandomAccessFile) throws java.io.IOException;
  public static boolean fileIsAIFFFile(java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "AVIFile.java"
public class malictus.klang.file.AVIFile extends malictus.klang.file.RIFFFile {
  public malictus.klang.file.AVIFile(java.io.File, java.io.RandomAccessFile) throws java.io.IOException;
  public static boolean fileIsAVIFile(java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "EditableFileBase.java"
public interface malictus.klang.file.EditableFileBase {
  public abstract void reparseFile(java.io.RandomAccessFile) throws java.io.IOException;
  public abstract void deleteChunk(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract void addChunkFromFile(java.io.File, java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract void addChunkFromArray(byte[], java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract void chunkWillChangeSize(malictus.klang.chunk.Chunk, long, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract void chunkHasChanged(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract boolean canEditChunkNames();
  public abstract void editChunkName(malictus.klang.chunk.Chunk, java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
  public abstract boolean canAddTopLevelChunks();
}
Compiled from "FORMFile.java"
public class malictus.klang.file.FORMFile extends malictus.klang.file.KlangFile implements malictus.klang.file.EditableFileBase {
  public malictus.klang.file.FORMFile(java.io.File, java.io.RandomAccessFile) throws java.io.IOException;
  public static boolean fileIsFORMFile(java.io.RandomAccessFile) throws java.io.IOException;
  public void reparseFile(java.io.RandomAccessFile) throws java.io.IOException;
  public void deleteChunk(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromFile(java.io.File, java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromArray(byte[], java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void chunkWillChangeSize(malictus.klang.chunk.Chunk, long, java.io.RandomAccessFile) throws java.io.IOException;
  public void chunkHasChanged(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void editChunkName(malictus.klang.chunk.Chunk, java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
  public boolean canEditChunkNames();
  public boolean canAddTopLevelChunks();
}
Compiled from "KlangFile.java"
public abstract class malictus.klang.file.KlangFile {
  protected java.io.File theFile;
  protected java.util.Vector<malictus.klang.chunk.Chunk> chunks;
  protected java.util.Vector<malictus.klang.primitives.PrimitiveData> fileLevelData;
  protected java.lang.String checksum;
  public malictus.klang.file.KlangFile(java.io.File, java.io.RandomAccessFile) throws java.io.IOException;
  public java.io.File getFile();
  public java.util.Vector<malictus.klang.chunk.Chunk> getChunks();
  public java.lang.String getChecksum();
  public void calculateChecksum() throws java.io.IOException;
  public java.lang.String getFileType();
  public java.util.Vector<malictus.klang.primitives.PrimitiveData> getFileLevelData();
  public malictus.klang.chunk.Chunk getChunkNamed(java.lang.String, boolean);
  public java.util.Vector<malictus.klang.chunk.Chunk> getChunksNamed(java.lang.String, boolean);
  public static malictus.klang.chunk.Chunk findDeepestChunkFor(java.util.Vector<malictus.klang.chunk.Chunk>, long) throws java.io.IOException;
  public void exportChunk(malictus.klang.chunk.Chunk, java.io.File) throws java.io.IOException;
  protected void clearAllData();
}
Compiled from "KlangFileFactory.java"
public class malictus.klang.file.KlangFileFactory {
  public static malictus.klang.file.KlangFile makeNewKlangFile(java.io.File, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "PNGFile.java"
public class malictus.klang.file.PNGFile extends malictus.klang.file.KlangFile implements malictus.klang.file.EditableFileBase {
  public malictus.klang.file.PNGFile(java.io.File, java.io.RandomAccessFile) throws java.io.IOException;
  public static boolean fileIsPNGFile(java.io.RandomAccessFile) throws java.io.IOException;
  public java.lang.Long getImageHeight();
  public java.lang.Long getImageWidth();
  public void reparseFile(java.io.RandomAccessFile) throws java.io.IOException;
  public void deleteChunk(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromFile(java.io.File, java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromArray(byte[], java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void chunkWillChangeSize(malictus.klang.chunk.Chunk, long, java.io.RandomAccessFile) throws java.io.IOException;
  public void chunkHasChanged(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void editChunkName(malictus.klang.chunk.Chunk, java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
  public boolean canEditChunkNames();
  public boolean canAddTopLevelChunks();
}
Compiled from "PlainTextFile.java"
public class malictus.klang.file.PlainTextFile extends malictus.klang.file.KlangFile implements malictus.klang.file.EditableFileBase {
  public malictus.klang.file.PlainTextFile(java.io.File, java.io.RandomAccessFile, java.lang.String) throws java.io.IOException;
  public void reparseFile(java.io.RandomAccessFile) throws java.io.IOException;
  public void deleteChunk(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromFile(java.io.File, java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromArray(byte[], java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void chunkWillChangeSize(malictus.klang.chunk.Chunk, long, java.io.RandomAccessFile) throws java.io.IOException;
  public void chunkHasChanged(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void editChunkName(malictus.klang.chunk.Chunk, java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
  public boolean canEditChunkNames();
  public boolean canAddTopLevelChunks();
}
Compiled from "RIFFFile.java"
public class malictus.klang.file.RIFFFile extends malictus.klang.file.KlangFile implements malictus.klang.file.EditableFileBase {
  public malictus.klang.file.RIFFFile(java.io.File, java.io.RandomAccessFile) throws java.io.IOException;
  public static boolean fileIsRIFFFile(java.io.RandomAccessFile) throws java.io.IOException;
  public void reparseFile(java.io.RandomAccessFile) throws java.io.IOException;
  public void deleteChunk(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromFile(java.io.File, java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void addChunkFromArray(byte[], java.lang.String, int, java.io.RandomAccessFile) throws java.io.IOException;
  public void chunkWillChangeSize(malictus.klang.chunk.Chunk, long, java.io.RandomAccessFile) throws java.io.IOException;
  public void chunkHasChanged(malictus.klang.chunk.Chunk, java.io.RandomAccessFile) throws java.io.IOException;
  public void editChunkName(malictus.klang.chunk.Chunk, java.lang.String, java.io.RandomAccessFile) throws java.io.IOException;
  public boolean canEditChunkNames();
  public boolean canAddTopLevelChunks();
}
Compiled from "RawFile.java"
public class malictus.klang.file.RawFile extends malictus.klang.file.KlangFile {
  public malictus.klang.file.RawFile(java.io.File, java.io.RandomAccessFile) throws java.io.IOException;
}
Compiled from "WAVEFile.java"
public class malictus.klang.file.WAVEFile extends malictus.klang.file.RIFFFile {
  public malictus.klang.file.WAVEFile(java.io.File, java.io.RandomAccessFile) throws java.io.IOException;
  public static boolean fileIsWAVEFile(java.io.RandomAccessFile) throws java.io.IOException;
  public java.lang.Long getCompressionCode();
  public java.lang.Long getNumChannels();
  public java.lang.Long getSampRate();
}
Compiled from "ASCIIChar.java"
public class malictus.klang.primitives.ASCIIChar implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.ASCIIChar();
  public malictus.klang.primitives.ASCIIChar(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.ASCIIChar(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.String getValue();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "BadValueException.java"
public class malictus.klang.primitives.BadValueException extends java.lang.Exception {
  public malictus.klang.primitives.BadValueException(java.lang.String);
  public malictus.klang.primitives.BadValueException();
  public java.lang.String getMessage();
}
Compiled from "CompressedString.java"
public class malictus.klang.primitives.CompressedString implements malictus.klang.primitives.Primitive,malictus.klang.primitives.StringPrim {
  public malictus.klang.primitives.CompressedString(java.io.RandomAccessFile, long, java.lang.String, boolean) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public malictus.klang.primitives.CompressedString(java.lang.String, java.lang.String, boolean) throws malictus.klang.primitives.BadValueException;
  public boolean canChangeEncoding();
  public java.lang.String getTextEncoding();
  public void setTextEncoding(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.String getValue();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "FourCC.java"
public class malictus.klang.primitives.FourCC implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.FourCC();
  public malictus.klang.primitives.FourCC(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.FourCC(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.String getValue();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "GUID.java"
public class malictus.klang.primitives.GUID implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.GUID();
  public malictus.klang.primitives.GUID(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.GUID(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public boolean valueExists();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
}
Compiled from "IEEE80ByteFloat.java"
public class malictus.klang.primitives.IEEE80ByteFloat implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.IEEE80ByteFloat();
  public malictus.klang.primitives.IEEE80ByteFloat(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.IEEE80ByteFloat(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.IEEE80ByteFloat(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Integer getValue();
  public java.lang.Long getValueAsLong();
  public boolean valueExists();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
}
Compiled from "Int2ByteSignedBE.java"
public class malictus.klang.primitives.Int2ByteSignedBE implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.Int2ByteSignedBE();
  public malictus.klang.primitives.Int2ByteSignedBE(java.lang.Short);
  public malictus.klang.primitives.Int2ByteSignedBE(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int2ByteSignedBE(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int2ByteSignedBE(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Short) throws malictus.klang.primitives.BadValueException;
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Short getValue();
  public java.lang.Long getValueAsLong();
  public boolean valueExists();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
}
Compiled from "Int2ByteSignedLE.java"
public class malictus.klang.primitives.Int2ByteSignedLE implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.Int2ByteSignedLE();
  public malictus.klang.primitives.Int2ByteSignedLE(java.lang.Short);
  public malictus.klang.primitives.Int2ByteSignedLE(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int2ByteSignedLE(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int2ByteSignedLE(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Short) throws malictus.klang.primitives.BadValueException;
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Short getValue();
  public java.lang.Long getValueAsLong();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "Int2ByteUnsignedBE.java"
public class malictus.klang.primitives.Int2ByteUnsignedBE implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.Int2ByteUnsignedBE();
  public malictus.klang.primitives.Int2ByteUnsignedBE(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int2ByteUnsignedBE(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int2ByteUnsignedBE(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Integer getValue();
  public java.lang.Long getValueAsLong();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "Int2ByteUnsignedLE.java"
public class malictus.klang.primitives.Int2ByteUnsignedLE implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.Int2ByteUnsignedLE();
  public malictus.klang.primitives.Int2ByteUnsignedLE(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int2ByteUnsignedLE(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int2ByteUnsignedLE(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Integer getValue();
  public java.lang.Long getValueAsLong();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "Int4ByteSignedBE.java"
public class malictus.klang.primitives.Int4ByteSignedBE implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.Int4ByteSignedBE();
  public malictus.klang.primitives.Int4ByteSignedBE(java.lang.Integer);
  public malictus.klang.primitives.Int4ByteSignedBE(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int4ByteSignedBE(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Integer getValue();
  public java.lang.Long getValueAsLong();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "Int4ByteSignedLE.java"
public class malictus.klang.primitives.Int4ByteSignedLE implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.Int4ByteSignedLE();
  public malictus.klang.primitives.Int4ByteSignedLE(java.lang.Integer);
  public malictus.klang.primitives.Int4ByteSignedLE(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int4ByteSignedLE(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Integer getValue();
  public java.lang.Long getValueAsLong();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "Int4ByteUnsignedBE.java"
public class malictus.klang.primitives.Int4ByteUnsignedBE implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.Int4ByteUnsignedBE();
  public malictus.klang.primitives.Int4ByteUnsignedBE(java.lang.Long) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int4ByteUnsignedBE(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int4ByteUnsignedBE(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int4ByteUnsignedBE(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Long) throws malictus.klang.primitives.BadValueException;
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Long getValue();
  public java.lang.Long getValueAsLong();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "Int4ByteUnsignedLE.java"
public class malictus.klang.primitives.Int4ByteUnsignedLE implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.Int4ByteUnsignedLE();
  public malictus.klang.primitives.Int4ByteUnsignedLE(java.lang.Long) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int4ByteUnsignedLE(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int4ByteUnsignedLE(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.Int4ByteUnsignedLE(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Long) throws malictus.klang.primitives.BadValueException;
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Long getValue();
  public java.lang.Long getValueAsLong();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "IntByteSigned.java"
public class malictus.klang.primitives.IntByteSigned implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.IntByteSigned();
  public malictus.klang.primitives.IntByteSigned(java.lang.Byte);
  public malictus.klang.primitives.IntByteSigned(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.IntByteSigned(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.IntByteSigned(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Byte) throws malictus.klang.primitives.BadValueException;
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Byte getValue();
  public java.lang.Long getValueAsLong();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "IntByteUnsigned.java"
public class malictus.klang.primitives.IntByteUnsigned implements malictus.klang.primitives.Primitive,malictus.klang.primitives.PrimitiveInt,malictus.klang.primitives.PrimitiveFixedByte {
  public malictus.klang.primitives.IntByteUnsigned();
  public malictus.klang.primitives.IntByteUnsigned(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.IntByteUnsigned(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public malictus.klang.primitives.IntByteUnsigned(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public int getFixedLength();
  public void setValue(java.lang.Integer) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.Integer getValue();
  public java.lang.Long getValueAsLong();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "NullTerminatedString.java"
public class malictus.klang.primitives.NullTerminatedString implements malictus.klang.primitives.Primitive,malictus.klang.primitives.StringPrim {
  public malictus.klang.primitives.NullTerminatedString(java.io.RandomAccessFile, long, java.lang.String, boolean) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public malictus.klang.primitives.NullTerminatedString(java.lang.String, boolean);
  public malictus.klang.primitives.NullTerminatedString(java.lang.String, java.lang.String, boolean) throws malictus.klang.primitives.BadValueException;
  public boolean canChangeEncoding();
  public java.lang.String getTextEncoding();
  public void setTextEncoding(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.String getValue();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "PlainString.java"
public class malictus.klang.primitives.PlainString implements malictus.klang.primitives.Primitive,malictus.klang.primitives.StringPrim {
  public malictus.klang.primitives.PlainString(java.io.RandomAccessFile, long, java.lang.String, boolean) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public malictus.klang.primitives.PlainString(java.lang.String, java.lang.String, boolean) throws malictus.klang.primitives.BadValueException;
  public boolean canChangeEncoding();
  public java.lang.String getTextEncoding();
  public void setTextEncoding(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public java.lang.String getValue();
  public void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException, java.nio.charset.CharacterCodingException;
  public java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public java.lang.String getPrimitiveDescription();
  public boolean valueExists();
}
Compiled from "Primitive.java"
public interface malictus.klang.primitives.Primitive {
  public abstract void writeValueToFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public abstract void setValueFromFile(java.io.RandomAccessFile) throws java.io.IOException, malictus.klang.primitives.BadValueException;
  public abstract java.lang.String writeValueToString() throws malictus.klang.primitives.BadValueException;
  public abstract void setValueFromString(java.lang.String) throws malictus.klang.primitives.BadValueException;
  public abstract java.lang.String getPrimitiveDescription();
  public abstract boolean valueExists();
}
Compiled from "PrimitiveData.java"
public class malictus.klang.primitives.PrimitiveData {
  public malictus.klang.primitives.PrimitiveData(malictus.klang.primitives.Primitive, java.lang.String, java.lang.Long, java.lang.Long);
  public malictus.klang.primitives.Primitive getPrimitive();
  public java.lang.String getName();
  public java.lang.Long getStartBytePosition();
  public java.lang.Long getEndBytePosition();
  public java.lang.String getDescription();
  public java.util.LinkedHashMap<java.lang.String, java.lang.String> getValueStrings();
  public java.lang.String getCurrentValueString();
}
Compiled from "PrimitiveFixedByte.java"
public interface malictus.klang.primitives.PrimitiveFixedByte {
  public abstract int getFixedLength();
}
Compiled from "PrimitiveInt.java"
public interface malictus.klang.primitives.PrimitiveInt {
  public abstract java.lang.Long getValueAsLong();
}
Compiled from "StringPrim.java"
public interface malictus.klang.primitives.StringPrim {
  public abstract boolean canChangeEncoding();
  public abstract java.lang.String getTextEncoding();
  public abstract void setTextEncoding(java.lang.String) throws malictus.klang.primitives.BadValueException;
}
Compiled from "FileInfoTest.java"
public class malictus.klang.test.FileInfoTest {
  public malictus.klang.test.FileInfoTest();
  public static void main(java.lang.String[]);
}
Compiled from "FileReadWriteTest.java"
public class malictus.klang.test.FileReadWriteTest {
  public malictus.klang.test.FileReadWriteTest();
  public static void main(java.lang.String[]);
}
Compiled from "KlangFileFactoryTest.java"
public class malictus.klang.test.KlangFileFactoryTest {
  public static void main(java.lang.String[]);
  public malictus.klang.test.KlangFileFactoryTest();
}
Compiled from "PrimitiveTest.java"
public class malictus.klang.test.PrimitiveTest {
  public malictus.klang.test.PrimitiveTest();
  public static void main(java.lang.String[]);
}
Compiled from "KlangLabel.java"
public class malictus.klang.ui.KlangLabel extends javax.swing.JTextField {
  public malictus.klang.ui.KlangLabel(java.lang.String);
  public void setText(java.lang.String);
  public void setFont(java.awt.Font);
}
Compiled from "KlangProgressWindow.java"
public class malictus.klang.ui.KlangProgressWindow extends javax.swing.JDialog {
  public static java.lang.String currStatus;
  public static final int PROG_MAX;
  public static int progVal;
  public malictus.klang.ui.KlangProgressWindow(java.awt.Window);
  public java.lang.String getErrMsg();
  public void editChunkName(malictus.klang.chunk.Chunk, java.lang.String);
  public void exportBytes(long, long, java.io.File, java.io.File);
  public void exportChunk(malictus.klang.file.KlangFile, malictus.klang.chunk.Chunk, java.io.File);
  public void addChunk(malictus.klang.file.KlangFile, malictus.klang.chunk.Chunk, java.lang.String, int, java.io.File);
  public void deleteChunk(malictus.klang.chunk.Chunk);
  public void insertBytes(long, long, java.io.File);
  public void insertFile(long, java.io.File, java.io.File);
  public void deleteBytes(long, long, java.io.File);
  public void reparseChunk(malictus.klang.chunk.Chunk);
  public void calculateChecksumFor(malictus.klang.chunk.Chunk);
  public void calculateChecksumFor(malictus.klang.file.KlangFile);
  public void openKlangFile(java.io.File, malictus.klang.ui.klangeditor.KlangEditor, java.lang.Long);
  static boolean access$002(malictus.klang.ui.KlangProgressWindow, boolean);
  static java.lang.String access$102(malictus.klang.ui.KlangProgressWindow, java.lang.String);
  static boolean access$000(malictus.klang.ui.KlangProgressWindow);
  static java.util.Timer access$200(malictus.klang.ui.KlangProgressWindow);
  static javax.swing.JLabel access$300(malictus.klang.ui.KlangProgressWindow);
  static javax.swing.JProgressBar access$400(malictus.klang.ui.KlangProgressWindow);
  static {};
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$1 implements java.lang.Runnable {
  final malictus.klang.chunk.Chunk val$CHUNK;
  final java.lang.String val$NEWNAME;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$1(malictus.klang.ui.KlangProgressWindow, malictus.klang.chunk.Chunk, java.lang.String);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$10 implements java.lang.Runnable {
  final malictus.klang.chunk.Chunk val$CHUNK;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$10(malictus.klang.ui.KlangProgressWindow, malictus.klang.chunk.Chunk);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$11 implements java.lang.Runnable {
  final malictus.klang.file.KlangFile val$FILE;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$11(malictus.klang.ui.KlangProgressWindow, malictus.klang.file.KlangFile);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$12 implements java.lang.Runnable {
  final java.io.File val$FILE;
  final malictus.klang.ui.klangeditor.KlangEditor val$PARENT;
  final java.lang.Long val$NEWBYTE;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$12(malictus.klang.ui.KlangProgressWindow, java.io.File, malictus.klang.ui.klangeditor.KlangEditor, java.lang.Long);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$2 implements java.lang.Runnable {
  final java.io.File val$FROMFILE;
  final java.io.File val$TOFILE;
  final long val$START;
  final long val$END;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$2(malictus.klang.ui.KlangProgressWindow, java.io.File, java.io.File, long, long);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$3 implements java.lang.Runnable {
  final malictus.klang.file.KlangFile val$CURFILE;
  final malictus.klang.chunk.Chunk val$CHUNK;
  final java.io.File val$TARGET;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$3(malictus.klang.ui.KlangProgressWindow, malictus.klang.file.KlangFile, malictus.klang.chunk.Chunk, java.io.File);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$4 implements java.lang.Runnable {
  final malictus.klang.file.KlangFile val$THEFILE;
  final malictus.klang.chunk.Chunk val$PARENTCHUNK;
  final java.io.File val$FROMFILE;
  final java.lang.String val$NEWCHUNKNAME;
  final java.lang.Integer val$POSITION;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$4(malictus.klang.ui.KlangProgressWindow, malictus.klang.file.KlangFile, malictus.klang.chunk.Chunk, java.io.File, java.lang.String, java.lang.Integer);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$5 implements java.lang.Runnable {
  final malictus.klang.chunk.Chunk val$CHUNK;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$5(malictus.klang.ui.KlangProgressWindow, malictus.klang.chunk.Chunk);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$6 implements java.lang.Runnable {
  final long val$POS;
  final long val$NUMBYTES;
  final java.io.File val$TOFILE;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$6(malictus.klang.ui.KlangProgressWindow, long, long, java.io.File);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$7 implements java.lang.Runnable {
  final java.io.File val$FROMFILE;
  final java.io.File val$TOFILE;
  final long val$POS;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$7(malictus.klang.ui.KlangProgressWindow, java.io.File, java.io.File, long);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$8 implements java.lang.Runnable {
  final java.io.File val$THEFILE;
  final long val$START;
  final long val$END;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$8(malictus.klang.ui.KlangProgressWindow, java.io.File, long, long);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$9 implements java.lang.Runnable {
  final malictus.klang.chunk.Chunk val$CHUNK;
  final malictus.klang.ui.KlangProgressWindow this$0;
  malictus.klang.ui.KlangProgressWindow$9(malictus.klang.ui.KlangProgressWindow, malictus.klang.chunk.Chunk);
  public void run();
}
Compiled from "KlangProgressWindow.java"
class malictus.klang.ui.KlangProgressWindow$ProgressTask extends java.util.TimerTask {
  final malictus.klang.ui.KlangProgressWindow this$0;
  public malictus.klang.ui.KlangProgressWindow$ProgressTask(malictus.klang.ui.KlangProgressWindow, java.util.Timer);
  public void run();
}
Compiled from "KlangTextArea.java"
public class malictus.klang.ui.KlangTextArea extends javax.swing.JScrollPane {
  public malictus.klang.ui.KlangTextArea(java.lang.String);
  public javax.swing.JTextArea getTextArea();
  public void setText(java.lang.String);
  public java.lang.String getText();
}
Compiled from "KlangTextField.java"
public class malictus.klang.ui.KlangTextField extends javax.swing.JTextField {
  public malictus.klang.ui.KlangTextField(java.lang.String);
  public malictus.klang.ui.KlangTextField(java.lang.String, int);
  public malictus.klang.ui.KlangTextField();
  public void setText(java.lang.String);
}
Compiled from "KlangTextPane.java"
public class malictus.klang.ui.KlangTextPane extends javax.swing.JTextPane {
  public malictus.klang.ui.KlangTextPane(java.lang.String);
  public malictus.klang.ui.KlangTextPane(java.lang.String, int);
  public malictus.klang.ui.KlangTextPane();
  public void setText(java.lang.String);
}
Compiled from "TextEncodingDialog.java"
public class malictus.klang.ui.TextEncodingDialog extends javax.swing.JDialog {
  public static java.lang.String currentEncoding;
  javax.swing.JPanel pnlContent;
  javax.swing.JPanel pnlEncoding;
  javax.swing.JPanel pnlOK;
  javax.swing.JButton btnOK;
  malictus.klang.ui.KlangLabel lblEnc;
  javax.swing.JComboBox combEncoding;
  public malictus.klang.ui.TextEncodingDialog(java.lang.String);
  public java.lang.String getChosenEncoding();
  static {};
}
Compiled from "TextEncodingDialog.java"
class malictus.klang.ui.TextEncodingDialog$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.TextEncodingDialog this$0;
  malictus.klang.ui.TextEncodingDialog$1(malictus.klang.ui.TextEncodingDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AddNewChunkDialog.java"
public class malictus.klang.ui.klangeditor.AddNewChunkDialog extends javax.swing.JDialog {
  javax.swing.JPanel pnlContent;
  javax.swing.JPanel pnlTop;
  malictus.klang.ui.KlangLabel lblCurChunkName1;
  javax.swing.JPanel pnlChunkName;
  malictus.klang.ui.KlangLabel lblChunkName;
  malictus.klang.ui.KlangTextField txtfChunkName;
  javax.swing.JRadioButton bBefore;
  javax.swing.JRadioButton bAfter;
  javax.swing.JRadioButton bUnder;
  javax.swing.ButtonGroup grpbau;
  malictus.klang.ui.KlangLabel lblCurChunkName2;
  javax.swing.JRadioButton bUseBlank;
  javax.swing.JRadioButton bUseFile;
  javax.swing.ButtonGroup grpbf;
  javax.swing.JPanel pnlButtons;
  malictus.klang.ui.klangeditor.FileBrowseSubPanel pnlFile;
  javax.swing.JPanel pnlOKCancel;
  javax.swing.JButton btnOK;
  javax.swing.JButton btnCancel;
  public malictus.klang.ui.klangeditor.AddNewChunkDialog(malictus.klang.ui.klangeditor.KlangEditor, malictus.klang.chunk.Chunk);
  public boolean wasCanceled();
  static boolean access$002(malictus.klang.ui.klangeditor.AddNewChunkDialog, boolean);
}
Compiled from "AddNewChunkDialog.java"
class malictus.klang.ui.klangeditor.AddNewChunkDialog$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.AddNewChunkDialog this$0;
  malictus.klang.ui.klangeditor.AddNewChunkDialog$1(malictus.klang.ui.klangeditor.AddNewChunkDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AddNewChunkDialog.java"
class malictus.klang.ui.klangeditor.AddNewChunkDialog$2 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.AddNewChunkDialog this$0;
  malictus.klang.ui.klangeditor.AddNewChunkDialog$2(malictus.klang.ui.klangeditor.AddNewChunkDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AddNewChunkDialog.java"
class malictus.klang.ui.klangeditor.AddNewChunkDialog$3 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.AddNewChunkDialog this$0;
  malictus.klang.ui.klangeditor.AddNewChunkDialog$3(malictus.klang.ui.klangeditor.AddNewChunkDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AddNewChunkDialog.java"
class malictus.klang.ui.klangeditor.AddNewChunkDialog$4 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.AddNewChunkDialog this$0;
  malictus.klang.ui.klangeditor.AddNewChunkDialog$4(malictus.klang.ui.klangeditor.AddNewChunkDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "BasicInfoPanel.java"
public class malictus.klang.ui.klangeditor.BasicInfoPanel extends javax.swing.JScrollPane {
  malictus.klang.ui.klangeditor.BasicInfoPanel(malictus.klang.ui.klangeditor.KlangEditor);
  protected void updatePanel();
  static void access$000(malictus.klang.ui.klangeditor.BasicInfoPanel);
}
Compiled from "BasicInfoPanel.java"
class malictus.klang.ui.klangeditor.BasicInfoPanel$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.BasicInfoPanel this$0;
  malictus.klang.ui.klangeditor.BasicInfoPanel$1(malictus.klang.ui.klangeditor.BasicInfoPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ChunkInfoPanel.java"
public class malictus.klang.ui.klangeditor.ChunkInfoPanel extends javax.swing.JScrollPane {
  malictus.klang.ui.klangeditor.ChunkInfoPanel(malictus.klang.ui.klangeditor.KlangEditor);
  public void updatePanel();
  static void access$000(malictus.klang.ui.klangeditor.ChunkInfoPanel);
}
Compiled from "ChunkInfoPanel.java"
class malictus.klang.ui.klangeditor.ChunkInfoPanel$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.ChunkInfoPanel this$0;
  malictus.klang.ui.klangeditor.ChunkInfoPanel$1(malictus.klang.ui.klangeditor.ChunkInfoPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DeleteBytesDialog.java"
public class malictus.klang.ui.klangeditor.DeleteBytesDialog extends javax.swing.JDialog {
  javax.swing.JPanel pnlFrom;
  javax.swing.JPanel pnlTo;
  javax.swing.JPanel pnlOKCancel;
  javax.swing.JPanel pnlContent;
  javax.swing.JButton btnOK;
  javax.swing.JButton btnCancel;
  malictus.klang.ui.KlangLabel lblFrom;
  malictus.klang.ui.KlangTextField txtfFrom;
  malictus.klang.ui.KlangLabel lblTo;
  malictus.klang.ui.KlangTextField txtfTo;
  public malictus.klang.ui.klangeditor.DeleteBytesDialog(malictus.klang.ui.klangeditor.KlangEditor);
  public boolean wasCanceled();
  public long getStartPosition() throws java.lang.NumberFormatException;
  public long getEndPosition() throws java.lang.NumberFormatException;
  static boolean access$002(malictus.klang.ui.klangeditor.DeleteBytesDialog, boolean);
}
Compiled from "DeleteBytesDialog.java"
class malictus.klang.ui.klangeditor.DeleteBytesDialog$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.DeleteBytesDialog this$0;
  malictus.klang.ui.klangeditor.DeleteBytesDialog$1(malictus.klang.ui.klangeditor.DeleteBytesDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DeleteBytesDialog.java"
class malictus.klang.ui.klangeditor.DeleteBytesDialog$2 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.DeleteBytesDialog this$0;
  malictus.klang.ui.klangeditor.DeleteBytesDialog$2(malictus.klang.ui.klangeditor.DeleteBytesDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ExportBytesDialog.java"
public class malictus.klang.ui.klangeditor.ExportBytesDialog extends javax.swing.JDialog {
  javax.swing.JPanel pnlFrom;
  javax.swing.JPanel pnlTo;
  javax.swing.JPanel pnlOKCancel;
  javax.swing.JPanel pnlContent;
  malictus.klang.ui.klangeditor.FileBrowseSubPanel pnlFile;
  javax.swing.JButton btnOK;
  javax.swing.JButton btnCancel;
  malictus.klang.ui.KlangLabel lblFrom;
  malictus.klang.ui.KlangTextField txtfFrom;
  malictus.klang.ui.KlangLabel lblTo;
  malictus.klang.ui.KlangTextField txtfTo;
  public malictus.klang.ui.klangeditor.ExportBytesDialog(malictus.klang.ui.klangeditor.KlangEditor);
  public boolean wasCanceled();
  public long getStartPosition() throws java.lang.NumberFormatException;
  public long getEndPosition() throws java.lang.NumberFormatException;
  public java.io.File getSelectedFile() throws java.io.IOException;
  static boolean access$002(malictus.klang.ui.klangeditor.ExportBytesDialog, boolean);
}
Compiled from "ExportBytesDialog.java"
class malictus.klang.ui.klangeditor.ExportBytesDialog$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.ExportBytesDialog this$0;
  malictus.klang.ui.klangeditor.ExportBytesDialog$1(malictus.klang.ui.klangeditor.ExportBytesDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ExportBytesDialog.java"
class malictus.klang.ui.klangeditor.ExportBytesDialog$2 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.ExportBytesDialog this$0;
  malictus.klang.ui.klangeditor.ExportBytesDialog$2(malictus.klang.ui.klangeditor.ExportBytesDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FileBrowseSubPanel.java"
public class malictus.klang.ui.klangeditor.FileBrowseSubPanel extends javax.swing.JPanel {
  malictus.klang.ui.KlangLabel lblFile;
  malictus.klang.ui.KlangTextField txtfFile;
  javax.swing.JButton btnFile;
  static javax.swing.JFileChooser choose;
  public malictus.klang.ui.klangeditor.FileBrowseSubPanel(java.lang.String);
  public void disableInterface();
  public void enableInterface();
  public java.lang.String getSelectedFilename();
  static void access$000(malictus.klang.ui.klangeditor.FileBrowseSubPanel);
  static {};
}
Compiled from "FileBrowseSubPanel.java"
class malictus.klang.ui.klangeditor.FileBrowseSubPanel$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.FileBrowseSubPanel this$0;
  malictus.klang.ui.klangeditor.FileBrowseSubPanel$1(malictus.klang.ui.klangeditor.FileBrowseSubPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "InsertBytesDialog.java"
public class malictus.klang.ui.klangeditor.InsertBytesDialog extends javax.swing.JDialog {
  javax.swing.JPanel pnlFrom;
  javax.swing.JPanel pnlOKCancel;
  javax.swing.JPanel pnlContent;
  javax.swing.JPanel pnlButtons;
  malictus.klang.ui.klangeditor.FileBrowseSubPanel pnlFile;
  javax.swing.JButton btnOK;
  javax.swing.JButton btnCancel;
  malictus.klang.ui.KlangLabel lblFrom;
  malictus.klang.ui.KlangTextField txtfFrom;
  javax.swing.JRadioButton bUseBlank;
  malictus.klang.ui.KlangTextField txtfByteNum;
  malictus.klang.ui.KlangLabel lblUseBlankEnd;
  javax.swing.JRadioButton bUseFile;
  javax.swing.ButtonGroup grp;
  public malictus.klang.ui.klangeditor.InsertBytesDialog(malictus.klang.ui.klangeditor.KlangEditor);
  public boolean wasCanceled();
  public long getInsertPosition() throws java.lang.NumberFormatException;
  public long getNumBytes() throws java.lang.NumberFormatException;
  public java.io.File getSelectedFile() throws java.io.IOException;
  public boolean isUseFile();
  static boolean access$002(malictus.klang.ui.klangeditor.InsertBytesDialog, boolean);
}
Compiled from "InsertBytesDialog.java"
class malictus.klang.ui.klangeditor.InsertBytesDialog$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.InsertBytesDialog this$0;
  malictus.klang.ui.klangeditor.InsertBytesDialog$1(malictus.klang.ui.klangeditor.InsertBytesDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "InsertBytesDialog.java"
class malictus.klang.ui.klangeditor.InsertBytesDialog$2 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.InsertBytesDialog this$0;
  malictus.klang.ui.klangeditor.InsertBytesDialog$2(malictus.klang.ui.klangeditor.InsertBytesDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "InsertBytesDialog.java"
class malictus.klang.ui.klangeditor.InsertBytesDialog$3 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.InsertBytesDialog this$0;
  malictus.klang.ui.klangeditor.InsertBytesDialog$3(malictus.klang.ui.klangeditor.InsertBytesDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "InsertBytesDialog.java"
class malictus.klang.ui.klangeditor.InsertBytesDialog$4 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.InsertBytesDialog this$0;
  malictus.klang.ui.klangeditor.InsertBytesDialog$4(malictus.klang.ui.klangeditor.InsertBytesDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "KlangEditor.java"
public class malictus.klang.ui.klangeditor.KlangEditor extends javax.swing.JFrame {
  protected javax.swing.JPanel contentPane;
  protected malictus.klang.chunk.Chunk curChunk;
  protected long currentByte;
  public malictus.klang.ui.klangeditor.KlangEditor();
  public void setKlangFile(malictus.klang.file.KlangFile, java.lang.Long);
  protected void openFile();
  protected void closeFile();
  protected void doQuit();
  protected void setReadOnlyOption(boolean);
  protected boolean isReadOnlyMode();
  protected void setHexMode(boolean);
  protected void setTextMode(boolean);
  public static boolean isManualTextMode();
  protected boolean isHexMode();
  protected malictus.klang.file.KlangFile getCurrentFile();
  protected malictus.klang.chunk.Chunk getCurrentChunk();
  protected void doTreePanelChange();
  protected void exportCurrentChunk();
  protected void exportBytes(long, long, java.io.File);
  protected void insertFile(long, java.io.File);
  protected void insertBytes(long, long);
  protected void deleteBytes(long, long);
  protected void deleteCurrentChunk();
  protected void addNewChunk();
  protected void reparseCurrentChunk();
  protected void reparseEntireFile(long);
  protected void editCurrentChunkName();
  protected void jumpToPrim(malictus.klang.primitives.PrimitiveData);
  protected void jumpToByte(long);
  static malictus.klang.ui.klangeditor.BasicInfoPanel access$000(malictus.klang.ui.klangeditor.KlangEditor);
  static malictus.klang.ui.klangeditor.TreePanel access$100(malictus.klang.ui.klangeditor.KlangEditor);
  static malictus.klang.ui.klangeditor.ChunkInfoPanel access$200(malictus.klang.ui.klangeditor.KlangEditor);
  static malictus.klang.ui.klangeditor.PrimPanel access$300(malictus.klang.ui.klangeditor.KlangEditor);
  static malictus.klang.ui.klangeditor.RawEditPanel access$400(malictus.klang.ui.klangeditor.KlangEditor);
  static malictus.klang.file.KlangFile access$500(malictus.klang.ui.klangeditor.KlangEditor);
  static malictus.klang.ui.klangeditor.KlangEditorMenuBar access$600(malictus.klang.ui.klangeditor.KlangEditor);
  static {};
}
Compiled from "KlangEditor.java"
class malictus.klang.ui.klangeditor.KlangEditor$1 implements java.lang.Runnable {
  final java.lang.Long val$BYTETOOPEN;
  final malictus.klang.ui.klangeditor.KlangEditor this$0;
  malictus.klang.ui.klangeditor.KlangEditor$1(malictus.klang.ui.klangeditor.KlangEditor, java.lang.Long);
  public void run();
}
Compiled from "KlangEditorFileChooser.java"
public class malictus.klang.ui.klangeditor.KlangEditorFileChooser extends javax.swing.JFileChooser {
  public malictus.klang.ui.klangeditor.KlangEditorFileChooser();
}
Compiled from "KlangEditorFileFilter.java"
public class malictus.klang.ui.klangeditor.KlangEditorFileFilter extends javax.swing.filechooser.FileFilter {
  public malictus.klang.ui.klangeditor.KlangEditorFileFilter();
  public boolean accept(java.io.File);
  public java.lang.String getDescription();
}
Compiled from "KlangEditorMain.java"
public class malictus.klang.ui.klangeditor.KlangEditorMain {
  public malictus.klang.ui.klangeditor.KlangEditorMain();
  public static void main(java.lang.String[]);
}
Compiled from "KlangEditorMenuBar.java"
public class malictus.klang.ui.klangeditor.KlangEditorMenuBar extends javax.swing.JMenuBar {
  public malictus.klang.ui.klangeditor.KlangEditorMenuBar(malictus.klang.ui.klangeditor.KlangEditor);
  protected void setFileIsOpen(boolean);
  static void access$000(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  static void access$100(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  static void access$200(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  static void access$300(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  static void access$400(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  static void access$500(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  static void access$600(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
}
Compiled from "KlangEditorMenuBar.java"
class malictus.klang.ui.klangeditor.KlangEditorMenuBar$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.KlangEditorMenuBar this$0;
  malictus.klang.ui.klangeditor.KlangEditorMenuBar$1(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "KlangEditorMenuBar.java"
class malictus.klang.ui.klangeditor.KlangEditorMenuBar$2 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.KlangEditorMenuBar this$0;
  malictus.klang.ui.klangeditor.KlangEditorMenuBar$2(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "KlangEditorMenuBar.java"
class malictus.klang.ui.klangeditor.KlangEditorMenuBar$3 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.KlangEditorMenuBar this$0;
  malictus.klang.ui.klangeditor.KlangEditorMenuBar$3(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "KlangEditorMenuBar.java"
class malictus.klang.ui.klangeditor.KlangEditorMenuBar$4 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.KlangEditorMenuBar this$0;
  malictus.klang.ui.klangeditor.KlangEditorMenuBar$4(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "KlangEditorMenuBar.java"
class malictus.klang.ui.klangeditor.KlangEditorMenuBar$5 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.KlangEditorMenuBar this$0;
  malictus.klang.ui.klangeditor.KlangEditorMenuBar$5(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "KlangEditorMenuBar.java"
class malictus.klang.ui.klangeditor.KlangEditorMenuBar$6 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.KlangEditorMenuBar this$0;
  malictus.klang.ui.klangeditor.KlangEditorMenuBar$6(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "KlangEditorMenuBar.java"
class malictus.klang.ui.klangeditor.KlangEditorMenuBar$7 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.KlangEditorMenuBar this$0;
  malictus.klang.ui.klangeditor.KlangEditorMenuBar$7(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "KlangEditorMenuBar.java"
class malictus.klang.ui.klangeditor.KlangEditorMenuBar$8 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.KlangEditorMenuBar this$0;
  malictus.klang.ui.klangeditor.KlangEditorMenuBar$8(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "KlangEditorMenuBar.java"
class malictus.klang.ui.klangeditor.KlangEditorMenuBar$9 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.KlangEditorMenuBar this$0;
  malictus.klang.ui.klangeditor.KlangEditorMenuBar$9(malictus.klang.ui.klangeditor.KlangEditorMenuBar);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PrimButtonPanel.java"
public class malictus.klang.ui.klangeditor.PrimButtonPanel extends javax.swing.JPanel {
  public malictus.klang.ui.klangeditor.PrimButtonPanel(malictus.klang.ui.klangeditor.PrimPanel);
  static void access$000(malictus.klang.ui.klangeditor.PrimButtonPanel);
  static void access$100(malictus.klang.ui.klangeditor.PrimButtonPanel);
  static void access$200(malictus.klang.ui.klangeditor.PrimButtonPanel);
  static void access$300(malictus.klang.ui.klangeditor.PrimButtonPanel);
}
Compiled from "PrimButtonPanel.java"
class malictus.klang.ui.klangeditor.PrimButtonPanel$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.PrimButtonPanel this$0;
  malictus.klang.ui.klangeditor.PrimButtonPanel$1(malictus.klang.ui.klangeditor.PrimButtonPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PrimButtonPanel.java"
class malictus.klang.ui.klangeditor.PrimButtonPanel$2 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.PrimButtonPanel this$0;
  malictus.klang.ui.klangeditor.PrimButtonPanel$2(malictus.klang.ui.klangeditor.PrimButtonPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PrimButtonPanel.java"
class malictus.klang.ui.klangeditor.PrimButtonPanel$3 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.PrimButtonPanel this$0;
  malictus.klang.ui.klangeditor.PrimButtonPanel$3(malictus.klang.ui.klangeditor.PrimButtonPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PrimButtonPanel.java"
class malictus.klang.ui.klangeditor.PrimButtonPanel$4 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.PrimButtonPanel this$0;
  malictus.klang.ui.klangeditor.PrimButtonPanel$4(malictus.klang.ui.klangeditor.PrimButtonPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PrimEditDialog.java"
public class malictus.klang.ui.klangeditor.PrimEditDialog extends javax.swing.JDialog {
  javax.swing.JScrollPane scrPane;
  javax.swing.JPanel pnlContent;
  javax.swing.JPanel pnlValue;
  javax.swing.JPanel pnlEncoding;
  javax.swing.JPanel pnlOKCancel;
  javax.swing.JButton btnOK;
  javax.swing.JButton btnCancel;
  malictus.klang.ui.KlangLabel lblName;
  malictus.klang.ui.KlangLabel lblType;
  malictus.klang.ui.KlangLabel lblValue;
  malictus.klang.ui.KlangLabel lblEnc;
  malictus.klang.ui.KlangTextField txtfValue;
  malictus.klang.ui.KlangTextArea txtaValue;
  javax.swing.JComboBox combEncoding;
  javax.swing.JComboBox combValue;
  malictus.klang.primitives.PrimitiveData origPrim;
  java.util.Vector<java.lang.String> localVals;
  public malictus.klang.ui.klangeditor.PrimEditDialog(malictus.klang.primitives.PrimitiveData, malictus.klang.ui.klangeditor.KlangEditor);
  public boolean wasCanceled();
  public boolean valueChanged();
  public java.lang.String getNewEncoding();
  public java.lang.String getNewValue();
  static boolean access$002(malictus.klang.ui.klangeditor.PrimEditDialog, boolean);
}
Compiled from "PrimEditDialog.java"
class malictus.klang.ui.klangeditor.PrimEditDialog$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.PrimEditDialog this$0;
  malictus.klang.ui.klangeditor.PrimEditDialog$1(malictus.klang.ui.klangeditor.PrimEditDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PrimEditDialog.java"
class malictus.klang.ui.klangeditor.PrimEditDialog$2 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.PrimEditDialog this$0;
  malictus.klang.ui.klangeditor.PrimEditDialog$2(malictus.klang.ui.klangeditor.PrimEditDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PrimPanel.java"
public class malictus.klang.ui.klangeditor.PrimPanel extends javax.swing.JScrollPane {
  malictus.klang.ui.klangeditor.PrimPanel(malictus.klang.ui.klangeditor.KlangEditor);
  protected malictus.klang.ui.klangeditor.KlangEditor getKlangParent();
  protected void updatePanel(boolean);
  protected void editPrim(malictus.klang.primitives.PrimitiveData, int);
  protected void jumpToPrim(malictus.klang.primitives.PrimitiveData);
}
Compiled from "PrimPanel.java"
class malictus.klang.ui.klangeditor.PrimPanel$1 implements java.lang.Runnable {
  final malictus.klang.ui.klangeditor.PrimSubPanel val$X;
  final malictus.klang.ui.klangeditor.PrimPanel this$0;
  malictus.klang.ui.klangeditor.PrimPanel$1(malictus.klang.ui.klangeditor.PrimPanel, malictus.klang.ui.klangeditor.PrimSubPanel);
  public void run();
}
Compiled from "PrimSubPanel.java"
public class malictus.klang.ui.klangeditor.PrimSubPanel extends javax.swing.JPanel {
  public malictus.klang.ui.klangeditor.PrimSubPanel(malictus.klang.ui.klangeditor.PrimPanel, malictus.klang.primitives.PrimitiveData, int);
  public int getPosition();
  protected void redoButton();
  protected malictus.klang.primitives.PrimitiveData getPrim();
  protected void setBold(boolean);
  static void access$000(malictus.klang.ui.klangeditor.PrimSubPanel);
  static void access$100(malictus.klang.ui.klangeditor.PrimSubPanel);
}
Compiled from "PrimSubPanel.java"
class malictus.klang.ui.klangeditor.PrimSubPanel$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.PrimSubPanel this$0;
  malictus.klang.ui.klangeditor.PrimSubPanel$1(malictus.klang.ui.klangeditor.PrimSubPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PrimSubPanel.java"
class malictus.klang.ui.klangeditor.PrimSubPanel$2 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.PrimSubPanel this$0;
  malictus.klang.ui.klangeditor.PrimSubPanel$2(malictus.klang.ui.klangeditor.PrimSubPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
public class malictus.klang.ui.klangeditor.RawEditPanel extends javax.swing.JScrollPane {
  malictus.klang.ui.klangeditor.RawEditPanel(malictus.klang.ui.klangeditor.KlangEditor);
  protected void updatePanel();
  protected void updatePanel(java.lang.String);
  protected void doInsertBytes();
  protected void doDeleteBytes();
  protected void doExportBytes();
  static void access$000(malictus.klang.ui.klangeditor.RawEditPanel);
  static void access$100(malictus.klang.ui.klangeditor.RawEditPanel, int);
  static void access$200(malictus.klang.ui.klangeditor.RawEditPanel);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$1 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$1(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$10 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$10(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$2 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$2(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$3 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$3(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$4 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$4(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$5 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$5(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$6 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$6(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$7 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$7(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$8 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$8(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RawEditPanel.java"
class malictus.klang.ui.klangeditor.RawEditPanel$9 implements java.awt.event.ActionListener {
  final malictus.klang.ui.klangeditor.RawEditPanel this$0;
  malictus.klang.ui.klangeditor.RawEditPanel$9(malictus.klang.ui.klangeditor.RawEditPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "TreePanel.java"
public class malictus.klang.ui.klangeditor.TreePanel extends javax.swing.JScrollPane {
  malictus.klang.ui.klangeditor.TreePanel(malictus.klang.ui.klangeditor.KlangEditor);
  protected void updatePanel();
  protected void updatePanelToNewByte();
  static void access$000(malictus.klang.ui.klangeditor.TreePanel);
}
Compiled from "TreePanel.java"
class malictus.klang.ui.klangeditor.TreePanel$1 implements javax.swing.event.TreeSelectionListener {
  final malictus.klang.ui.klangeditor.TreePanel this$0;
  malictus.klang.ui.klangeditor.TreePanel$1(malictus.klang.ui.klangeditor.TreePanel);
  public void valueChanged(javax.swing.event.TreeSelectionEvent);
}
