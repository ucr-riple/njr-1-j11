Compiled from "APRMatrix.java"
public class coho.common.matrix.APRMatrix extends coho.common.matrix.BasicMatrix<coho.common.number.CohoAPR> {
  protected coho.common.matrix.APRMatrix(coho.common.number.CohoAPR[][], int, int);
  public static coho.common.matrix.APRMatrix typeCast(coho.common.matrix.BasicMatrix<coho.common.number.CohoAPR>);
  public coho.common.matrix.APRMatrix(int, int);
  public coho.common.matrix.APRMatrix(int[]);
  public coho.common.matrix.APRMatrix(coho.common.matrix.Matrix);
  public coho.common.matrix.APRMatrix(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.APRMatrix(coho.common.number.CohoNumber[]);
  public coho.common.matrix.APRMatrix(java.lang.Number[][]);
  public coho.common.matrix.APRMatrix(double[][]);
  public coho.common.matrix.APRMatrix(java.lang.Number[]);
  public coho.common.matrix.APRMatrix(double[]);
  public static coho.common.matrix.APRMatrix create(int, int);
  public static coho.common.matrix.APRMatrix create(int[]);
  public static coho.common.matrix.APRMatrix create(coho.common.matrix.Matrix);
  public static coho.common.matrix.APRMatrix create(coho.common.number.CohoNumber[][]);
  public static coho.common.matrix.APRMatrix create(coho.common.number.CohoNumber[]);
  public static coho.common.matrix.APRMatrix create(java.lang.Number[][]);
  public static coho.common.matrix.APRMatrix create(java.lang.Number[]);
  public static coho.common.matrix.APRMatrix create(double[][]);
  public static coho.common.matrix.APRMatrix create(double[]);
  public coho.common.matrix.APRMatrix convert(double[][]);
  public coho.common.matrix.APRMatrix convert(double[]);
  public coho.common.matrix.APRMatrix convert();
  public coho.common.matrix.APRMatrix convert(int, int);
  public coho.common.matrix.APRMatrix convert(int[]);
  public coho.common.matrix.APRMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.APRMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.APRMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.APRMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.APRMatrix convert(java.lang.Number[]);
  public coho.common.number.ScaleType elementType();
  public coho.common.matrix.APRMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.APRMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.APRMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.APRMatrix assign(java.lang.Number, int);
  public coho.common.matrix.APRMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.APRMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.APRMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.APRMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.APRMatrix assign(java.lang.Number[]);
  public coho.common.matrix.APRMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.APRMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.APRMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.APRMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.APRMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.APRMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.APRMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.APRMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.APRMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.APRMatrix row(int);
  public coho.common.matrix.APRMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.APRMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.APRMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.APRMatrix col(int);
  public coho.common.matrix.APRMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.APRMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.APRMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.APRMatrix ones();
  public coho.common.matrix.APRMatrix zeros();
  public coho.common.matrix.APRMatrix randoms();
  public coho.common.matrix.APRMatrix ident();
  public coho.common.matrix.APRMatrix ident(int);
  public coho.common.matrix.APRMatrix diag();
  public coho.common.matrix.APRMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.APRMatrix fill(java.lang.Number);
  public coho.common.matrix.APRMatrix abs();
  public coho.common.matrix.APRMatrix negate();
  public coho.common.matrix.APRMatrix transpose();
  public coho.common.matrix.APRMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.APRMatrix add(coho.common.number.ScaleNumber);
  public coho.common.matrix.APRMatrix add(java.lang.Number);
  public coho.common.matrix.APRMatrix sub(coho.common.number.ScaleNumber);
  public coho.common.matrix.APRMatrix sub(java.lang.Number);
  public coho.common.matrix.APRMatrix mult(coho.common.number.ScaleNumber);
  public coho.common.matrix.APRMatrix mult(java.lang.Number);
  public coho.common.matrix.APRMatrix div(coho.common.number.ScaleNumber);
  public coho.common.matrix.APRMatrix div(java.lang.Number);
  public coho.common.matrix.APRMatrix add(coho.common.matrix.APRMatrix);
  public coho.common.matrix.APRMatrix sub(coho.common.matrix.APRMatrix);
  public coho.common.matrix.APRMatrix mult(coho.common.matrix.APRMatrix);
  public coho.common.matrix.APRMatrix div(coho.common.matrix.APRMatrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.APRMatrix elMult(coho.common.matrix.APRMatrix);
  public coho.common.matrix.APRMatrix elDiv(coho.common.matrix.APRMatrix);
  public coho.common.matrix.APRMatrix leftDiv(coho.common.matrix.APRMatrix) throws coho.common.matrix.SingularMatrixException;
  public static void main(java.lang.String[]);
  public coho.common.matrix.BasicMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix div(java.lang.Number);
  public coho.common.matrix.BasicMatrix mult(java.lang.Number);
  public coho.common.matrix.BasicMatrix sub(java.lang.Number);
  public coho.common.matrix.BasicMatrix add(java.lang.Number);
  public coho.common.matrix.BasicMatrix transpose();
  public coho.common.matrix.BasicMatrix negate();
  public coho.common.matrix.BasicMatrix abs();
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix col(int);
  public coho.common.matrix.BasicMatrix row(int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.BasicMatrix ident(int);
  public coho.common.matrix.BasicMatrix ident();
  public coho.common.matrix.BasicMatrix diag();
  public coho.common.matrix.BasicMatrix randoms();
  public coho.common.matrix.BasicMatrix zeros();
  public coho.common.matrix.BasicMatrix ones();
  public coho.common.matrix.BasicMatrix fill(java.lang.Number);
  public coho.common.matrix.BasicMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix convert();
  public coho.common.matrix.BasicMatrix convert(int[]);
  public coho.common.matrix.BasicMatrix convert(int, int);
  public coho.common.number.CohoType elementType();
  public coho.common.matrix.Matrix div(java.lang.Number);
  public coho.common.matrix.Matrix mult(java.lang.Number);
  public coho.common.matrix.Matrix sub(java.lang.Number);
  public coho.common.matrix.Matrix add(java.lang.Number);
  public coho.common.matrix.Matrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.Matrix fill(java.lang.Number);
  public coho.common.matrix.Matrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix diag();
  public coho.common.matrix.Matrix ident(int);
  public coho.common.matrix.Matrix ident();
  public coho.common.matrix.Matrix randoms();
  public coho.common.matrix.Matrix zeros();
  public coho.common.matrix.Matrix ones();
  public coho.common.matrix.Matrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.Range);
  public coho.common.matrix.Matrix col(int);
  public coho.common.matrix.Matrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.Range);
  public coho.common.matrix.Matrix row(int);
  public coho.common.matrix.Matrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.Matrix assign(java.lang.Number[]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix assign(java.lang.Number[][]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix assign(java.lang.Number, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.Matrix assign(java.lang.Number, int, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.Matrix convert(java.lang.Number[]);
  public coho.common.matrix.Matrix convert(java.lang.Number[][]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix convert();
  public coho.common.matrix.Matrix convert(int[]);
  public coho.common.matrix.Matrix convert(int, int);
}
Compiled from "ArrayFactory.java"
public interface coho.common.matrix.ArrayFactory {
  public abstract java.lang.Object[][] createArray(int, int);
  public abstract java.lang.Object[] createVector(int);
}
Compiled from "BasicMatrix.java"
public class coho.common.matrix.BasicMatrix<V extends coho.common.number.CohoNumber> implements coho.common.matrix.Matrix {
  protected final V[][] data;
  protected final int nrows;
  protected final int ncols;
  protected final coho.common.number.CohoType type;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp addOp;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp subOp;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp elMultOp;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp elDivOp;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp eqOp;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp neqOp;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp lessOp;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp leqOp;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp greaterOp;
  protected static final coho.common.matrix.BasicMatrix$BinaryMapOp geqOp;
  protected static final coho.common.matrix.BasicMatrix$ReduceOp dotProdOp;
  protected static final coho.common.matrix.BasicMatrix$ReduceOp maxOp;
  protected static final coho.common.matrix.BasicMatrix$ReduceOp minOp;
  protected static final coho.common.matrix.BasicMatrix$ReduceOp sumOp;
  protected static final coho.common.matrix.BasicMatrix$ReduceOp prodOp;
  static final java.lang.String matOpener;
  static final java.lang.String matCloser;
  static final java.lang.String rowOpener;
  static final java.lang.String rowCloser;
  static final java.lang.String colOpener;
  static final java.lang.String colCloser;
  static final boolean bCloseLastCol;
  static final int DDWidth;
  public static final int nStandardLength;
  public int nrows();
  public int ncols();
  public coho.common.number.CohoType elementType();
  public V[][] data();
  protected coho.common.matrix.BasicMatrix(coho.common.number.CohoType, int, int, V[][]);
  public coho.common.matrix.BasicMatrix(V, int, int);
  public coho.common.matrix.BasicMatrix(V, int[]);
  public coho.common.matrix.BasicMatrix(V[][]);
  public coho.common.matrix.BasicMatrix(V[]);
  public coho.common.matrix.BasicMatrix<V> convert(int, int);
  public coho.common.matrix.BasicMatrix<V> convert(int[]);
  public coho.common.matrix.BasicMatrix<V> convert();
  public coho.common.matrix.BasicMatrix<V> convert(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix<V> convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix<V> convert(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix<V> convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix<V> convert(java.lang.Number[]);
  public static coho.common.matrix.BasicMatrix create(coho.common.number.CohoType, int, int);
  public static coho.common.matrix.BasicMatrix create(coho.common.number.CohoNumber, int, int);
  public static coho.common.matrix.BasicMatrix create(java.lang.Number, int, int);
  public V zero();
  public V one();
  public V random();
  protected V elementConvert(coho.common.number.CohoNumber);
  protected V elementConvert(java.lang.Number);
  protected V[][] createArray(int, int);
  protected V[] createVector(int);
  public coho.common.matrix.BasicMatrix<V> fill(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix<V> fill(java.lang.Number);
  public coho.common.matrix.BasicMatrix<V> ones();
  public coho.common.matrix.BasicMatrix<V> zeros();
  public coho.common.matrix.BasicMatrix<V> randoms();
  public coho.common.matrix.BasicMatrix<V> diag();
  public coho.common.matrix.BasicMatrix<V> ident();
  public coho.common.matrix.BasicMatrix<V> ident(int);
  public int size(int);
  public int[] size();
  public int length();
  public boolean isVector();
  public boolean isSquare();
  protected void sameDims(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix<V> assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.BasicMatrix<V> assign(java.lang.Number, int, int);
  public coho.common.matrix.BasicMatrix<V> assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.BasicMatrix<V> assign(java.lang.Number, int);
  public coho.common.matrix.BasicMatrix<V> assign(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix<V> assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix<V> assign(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix<V> assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix<V> assign(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix<V> assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.BasicMatrix<V> assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.BasicMatrix<V> assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix<V> assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public V V(int, int);
  public V V(int);
  public coho.common.matrix.BasicMatrix<V> V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix<V> V(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix<V> V(coho.common.matrix.Range, int);
  public coho.common.matrix.BasicMatrix<V> V(int, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix<V> V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix<V> row(int);
  public coho.common.matrix.BasicMatrix<V> col(int);
  public coho.common.matrix.BasicMatrix<V> row(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix<V> col(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix<V> row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix<V> row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix<V> col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix<V> col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix binaryMap(coho.common.matrix.Matrix, coho.common.matrix.BasicMatrix$BinaryMapOp);
  public coho.common.matrix.BasicMatrix add(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix sub(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix elMult(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix elDiv(coho.common.matrix.Matrix);
  public coho.common.matrix.BooleanMatrix eq(coho.common.matrix.Matrix);
  public coho.common.matrix.BooleanMatrix neq(coho.common.matrix.Matrix);
  public coho.common.matrix.BooleanMatrix less(coho.common.matrix.Matrix);
  public coho.common.matrix.BooleanMatrix leq(coho.common.matrix.Matrix);
  public coho.common.matrix.BooleanMatrix greater(coho.common.matrix.Matrix);
  public coho.common.matrix.BooleanMatrix geq(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix<V> abs();
  public coho.common.matrix.BasicMatrix<V> negate();
  public coho.common.matrix.BasicMatrix<V> transpose();
  public coho.common.number.CohoNumber binaryReduce(coho.common.matrix.Matrix, coho.common.matrix.BasicMatrix$ReduceOp);
  public V unaryReduce(coho.common.matrix.BasicMatrix$ReduceOp);
  public coho.common.number.CohoNumber dotProd(coho.common.matrix.Matrix);
  public V max();
  public V min();
  public V norm();
  public V sum();
  public V prod();
  public coho.common.matrix.BasicMatrix mult(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix add(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix add(java.lang.Number);
  public coho.common.matrix.BasicMatrix sub(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix sub(java.lang.Number);
  public coho.common.matrix.BasicMatrix mult(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix mult(java.lang.Number);
  public coho.common.matrix.BasicMatrix div(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix div(java.lang.Number);
  public coho.common.matrix.BasicMatrix<V> add(coho.common.matrix.BasicMatrix<V>);
  public coho.common.matrix.BasicMatrix<V> sub(coho.common.matrix.BasicMatrix<V>);
  public coho.common.matrix.BasicMatrix<V> mult(coho.common.matrix.BasicMatrix<V>);
  public coho.common.matrix.BasicMatrix<V> div(coho.common.matrix.BasicMatrix<V>) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix<V> elMult(coho.common.matrix.BasicMatrix<V>);
  public coho.common.matrix.BasicMatrix<V> elDiv(coho.common.matrix.BasicMatrix<V>);
  public coho.common.matrix.BasicMatrix<V> leftDiv(coho.common.matrix.BasicMatrix<V>) throws coho.common.matrix.SingularMatrixException;
  public V dotProd(coho.common.matrix.BasicMatrix<V>);
  public coho.common.matrix.BasicMatrix div(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix leftDiv(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix<V> inv() throws coho.common.matrix.SingularMatrixException;
  public V[][] toArray();
  public V[] toVector();
  public final java.lang.String toString();
  public final java.lang.String toString(java.lang.Object);
  public java.lang.String stringify(java.lang.Object);
  public java.lang.String toMatlab();
  public static void main(java.lang.String[]);
  public coho.common.matrix.Matrix elDiv(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix leftDiv(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix div(java.lang.Number);
  public coho.common.matrix.Matrix div(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix div(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix elMult(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix mult(java.lang.Number);
  public coho.common.matrix.Matrix mult(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix mult(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix sub(java.lang.Number);
  public coho.common.matrix.Matrix sub(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix sub(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix add(java.lang.Number);
  public coho.common.matrix.Matrix add(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix add(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.Matrix fill(java.lang.Number);
  public coho.common.matrix.Matrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix diag();
  public coho.common.matrix.Matrix ident(int);
  public coho.common.matrix.Matrix ident();
  public coho.common.matrix.Matrix randoms();
  public coho.common.matrix.Matrix zeros();
  public coho.common.matrix.Matrix ones();
  public coho.common.matrix.Matrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.Range);
  public coho.common.matrix.Matrix col(int);
  public coho.common.matrix.Matrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.Range);
  public coho.common.matrix.Matrix row(int);
  public coho.common.matrix.Matrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.Matrix assign(java.lang.Number[]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix assign(java.lang.Number[][]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix assign(java.lang.Number, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.Matrix assign(java.lang.Number, int, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.Matrix convert(java.lang.Number[]);
  public coho.common.matrix.Matrix convert(java.lang.Number[][]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix convert();
  public coho.common.matrix.Matrix convert(int[]);
  public coho.common.matrix.Matrix convert(int, int);
  static {};
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$1 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$1();
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$10 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$10();
  public coho.common.number.ScaleType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.common.number.CohoBoolean v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$11 extends coho.common.matrix.BasicMatrix$ReduceOp {
  coho.common.matrix.BasicMatrix$11();
  public coho.common.number.CohoNumber middle(coho.common.number.CohoNumber, coho.common.number.CohoNumber[]);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$12 extends coho.common.matrix.BasicMatrix$ReduceOp {
  coho.common.matrix.BasicMatrix$12();
  public coho.common.number.CohoNumber middle(coho.common.number.CohoNumber, coho.common.number.CohoNumber[]);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$13 extends coho.common.matrix.BasicMatrix$ReduceOp {
  coho.common.matrix.BasicMatrix$13();
  public coho.common.number.CohoNumber middle(coho.common.number.CohoNumber, coho.common.number.CohoNumber[]);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$14 extends coho.common.matrix.BasicMatrix$ReduceOp {
  coho.common.matrix.BasicMatrix$14();
  public coho.common.number.CohoNumber middle(coho.common.number.CohoNumber, coho.common.number.CohoNumber[]);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$15 extends coho.common.matrix.BasicMatrix$ReduceOp {
  coho.common.matrix.BasicMatrix$15();
  public coho.common.number.CohoNumber middle(coho.common.number.CohoNumber, coho.common.number.CohoNumber[]);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$2 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$2();
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$3 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$3();
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$4 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$4();
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$5 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$5();
  public coho.common.number.ScaleType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.common.number.CohoBoolean v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$6 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$6();
  public coho.common.number.ScaleType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.common.number.CohoBoolean v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$7 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$7();
  public coho.common.number.ScaleType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.common.number.CohoBoolean v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$8 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$8();
  public coho.common.number.ScaleType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.common.number.CohoBoolean v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
}
Compiled from "BasicMatrix.java"
final class coho.common.matrix.BasicMatrix$9 extends coho.common.matrix.BasicMatrix$BinaryMapOp {
  coho.common.matrix.BasicMatrix$9();
  public coho.common.number.ScaleType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.common.number.CohoBoolean v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
}
Compiled from "BasicMatrix.java"
public abstract class coho.common.matrix.BasicMatrix$BinaryMapOp {
  protected coho.common.matrix.BasicMatrix$BinaryMapOp();
  public coho.common.number.CohoType t(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public abstract coho.common.number.CohoNumber v(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
}
Compiled from "BasicMatrix.java"
public abstract class coho.common.matrix.BasicMatrix$ReduceOp {
  protected coho.common.matrix.BasicMatrix$ReduceOp();
  public coho.common.number.CohoNumber first();
  public abstract coho.common.number.CohoNumber middle(coho.common.number.CohoNumber, coho.common.number.CohoNumber[]);
}
Compiled from "BooleanMatrix.java"
public class coho.common.matrix.BooleanMatrix extends coho.common.matrix.BasicMatrix<coho.common.number.CohoBoolean> {
  protected coho.common.matrix.BooleanMatrix(coho.common.number.CohoBoolean[][], int, int);
  public static coho.common.matrix.BooleanMatrix typeCast(coho.common.matrix.BasicMatrix<coho.common.number.CohoBoolean>);
  public coho.common.matrix.BooleanMatrix(int, int);
  public coho.common.matrix.BooleanMatrix(int[]);
  public coho.common.matrix.BooleanMatrix(coho.common.matrix.Matrix);
  public coho.common.matrix.BooleanMatrix(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BooleanMatrix(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BooleanMatrix(java.lang.Number[][]);
  public coho.common.matrix.BooleanMatrix(boolean[][]);
  public coho.common.matrix.BooleanMatrix(java.lang.Number[]);
  public coho.common.matrix.BooleanMatrix(boolean[]);
  public static coho.common.matrix.BooleanMatrix create(int, int);
  public static coho.common.matrix.BooleanMatrix create(int[]);
  public static coho.common.matrix.BooleanMatrix create(coho.common.matrix.Matrix);
  public static coho.common.matrix.BooleanMatrix create(coho.common.number.CohoNumber[][]);
  public static coho.common.matrix.BooleanMatrix create(coho.common.number.CohoNumber[]);
  public static coho.common.matrix.BooleanMatrix create(java.lang.Number[][]);
  public static coho.common.matrix.BooleanMatrix create(java.lang.Number[]);
  public static coho.common.matrix.BooleanMatrix create(boolean[][]);
  public static coho.common.matrix.BooleanMatrix create(boolean[]);
  public coho.common.matrix.BooleanMatrix convert(boolean[][]);
  public coho.common.matrix.BooleanMatrix convert(boolean[]);
  public coho.common.matrix.BooleanMatrix assign(boolean, int, int);
  public coho.common.matrix.BooleanMatrix assign(boolean, int);
  public coho.common.matrix.IntegerMatrix find();
  public boolean all();
  public boolean any();
  public coho.common.matrix.BooleanMatrix allInRow();
  public coho.common.matrix.BooleanMatrix allInCol();
  public coho.common.matrix.BooleanMatrix anyInRow();
  public coho.common.matrix.BooleanMatrix anyInCol();
  public coho.common.matrix.BooleanMatrix and(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix or(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix not();
  public coho.common.matrix.BooleanMatrix xor(coho.common.matrix.BasicMatrix<coho.common.number.CohoBoolean>);
  public coho.common.matrix.BooleanMatrix convert();
  public coho.common.matrix.BooleanMatrix convert(int, int);
  public coho.common.matrix.BooleanMatrix convert(int[]);
  public coho.common.matrix.BooleanMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.BooleanMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BooleanMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BooleanMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.BooleanMatrix convert(java.lang.Number[]);
  public coho.common.number.ScaleType elementType();
  public coho.common.matrix.BooleanMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.BooleanMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.BooleanMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.BooleanMatrix assign(java.lang.Number, int);
  public coho.common.matrix.BooleanMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.BooleanMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BooleanMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.BooleanMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BooleanMatrix assign(java.lang.Number[]);
  public coho.common.matrix.BooleanMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.BooleanMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.BooleanMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BooleanMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.BooleanMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.BooleanMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.BooleanMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.BooleanMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BooleanMatrix row(int);
  public coho.common.matrix.BooleanMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.BooleanMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BooleanMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix col(int);
  public coho.common.matrix.BooleanMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.BooleanMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BooleanMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix ones();
  public coho.common.matrix.BooleanMatrix zeros();
  public coho.common.matrix.BooleanMatrix randoms();
  public coho.common.matrix.BooleanMatrix ident();
  public coho.common.matrix.BooleanMatrix ident(int);
  public coho.common.matrix.BooleanMatrix diag();
  public coho.common.matrix.BooleanMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.BooleanMatrix fill(java.lang.Number);
  public coho.common.matrix.BooleanMatrix abs();
  public coho.common.matrix.BooleanMatrix negate();
  public coho.common.matrix.BooleanMatrix transpose();
  public coho.common.matrix.BooleanMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BooleanMatrix add(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix sub(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix mult(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix div(coho.common.matrix.BooleanMatrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BooleanMatrix elMult(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix elDiv(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix leftDiv(coho.common.matrix.BooleanMatrix) throws coho.common.matrix.SingularMatrixException;
  public static void main(java.lang.String[]);
  public coho.common.matrix.BasicMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix transpose();
  public coho.common.matrix.BasicMatrix negate();
  public coho.common.matrix.BasicMatrix abs();
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix col(int);
  public coho.common.matrix.BasicMatrix row(int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.BasicMatrix ident(int);
  public coho.common.matrix.BasicMatrix ident();
  public coho.common.matrix.BasicMatrix diag();
  public coho.common.matrix.BasicMatrix randoms();
  public coho.common.matrix.BasicMatrix zeros();
  public coho.common.matrix.BasicMatrix ones();
  public coho.common.matrix.BasicMatrix fill(java.lang.Number);
  public coho.common.matrix.BasicMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix convert();
  public coho.common.matrix.BasicMatrix convert(int[]);
  public coho.common.matrix.BasicMatrix convert(int, int);
  public coho.common.number.CohoType elementType();
  public coho.common.matrix.Matrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.Matrix fill(java.lang.Number);
  public coho.common.matrix.Matrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix diag();
  public coho.common.matrix.Matrix ident(int);
  public coho.common.matrix.Matrix ident();
  public coho.common.matrix.Matrix randoms();
  public coho.common.matrix.Matrix zeros();
  public coho.common.matrix.Matrix ones();
  public coho.common.matrix.Matrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.Range);
  public coho.common.matrix.Matrix col(int);
  public coho.common.matrix.Matrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.Range);
  public coho.common.matrix.Matrix row(int);
  public coho.common.matrix.Matrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.Matrix assign(java.lang.Number[]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix assign(java.lang.Number[][]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix assign(java.lang.Number, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.Matrix assign(java.lang.Number, int, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.Matrix convert(java.lang.Number[]);
  public coho.common.matrix.Matrix convert(java.lang.Number[][]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix convert();
  public coho.common.matrix.Matrix convert(int[]);
  public coho.common.matrix.Matrix convert(int, int);
}
Compiled from "DoubleIntervalMatrix.java"
public class coho.common.matrix.DoubleIntervalMatrix extends coho.common.matrix.BasicMatrix<coho.common.number.DoubleInterval> {
  protected coho.common.matrix.DoubleIntervalMatrix(coho.common.number.DoubleInterval[][], int, int);
  public static coho.common.matrix.DoubleIntervalMatrix typeCast(coho.common.matrix.BasicMatrix<coho.common.number.DoubleInterval>);
  public coho.common.matrix.DoubleIntervalMatrix(int, int);
  public coho.common.matrix.DoubleIntervalMatrix(int[]);
  public coho.common.matrix.DoubleIntervalMatrix(coho.common.matrix.Matrix);
  public coho.common.matrix.DoubleIntervalMatrix(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.DoubleIntervalMatrix(coho.common.number.CohoNumber[]);
  public coho.common.matrix.DoubleIntervalMatrix(java.lang.Number[][]);
  public coho.common.matrix.DoubleIntervalMatrix(double[][]);
  public coho.common.matrix.DoubleIntervalMatrix(java.lang.Number[]);
  public coho.common.matrix.DoubleIntervalMatrix(double[]);
  public static coho.common.matrix.DoubleIntervalMatrix create(int, int);
  public static coho.common.matrix.DoubleIntervalMatrix create(int[]);
  public static coho.common.matrix.DoubleIntervalMatrix create(coho.common.matrix.Matrix);
  public static coho.common.matrix.DoubleIntervalMatrix create(coho.common.number.CohoNumber[][]);
  public static coho.common.matrix.DoubleIntervalMatrix create(coho.common.number.CohoNumber[]);
  public static coho.common.matrix.DoubleIntervalMatrix create(java.lang.Number[][]);
  public static coho.common.matrix.DoubleIntervalMatrix create(java.lang.Number[]);
  public static coho.common.matrix.DoubleIntervalMatrix create(double[][]);
  public static coho.common.matrix.DoubleIntervalMatrix create(double[]);
  public coho.common.matrix.DoubleIntervalMatrix convert(double[][]);
  public coho.common.matrix.DoubleIntervalMatrix convert(double[]);
  public coho.common.matrix.DoubleMatrix lo();
  public coho.common.matrix.DoubleMatrix hi();
  public coho.common.matrix.DoubleMatrix x();
  public coho.common.matrix.DoubleMatrix e();
  public coho.common.matrix.DoubleIntervalMatrix convert();
  public coho.common.matrix.DoubleIntervalMatrix convert(int, int);
  public coho.common.matrix.DoubleIntervalMatrix convert(int[]);
  public coho.common.matrix.DoubleIntervalMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.DoubleIntervalMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.DoubleIntervalMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.DoubleIntervalMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.DoubleIntervalMatrix convert(java.lang.Number[]);
  public coho.common.number.IntervalType elementType();
  public coho.common.matrix.DoubleIntervalMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.DoubleIntervalMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.DoubleIntervalMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.DoubleIntervalMatrix assign(java.lang.Number, int);
  public coho.common.matrix.DoubleIntervalMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.DoubleIntervalMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.DoubleIntervalMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.DoubleIntervalMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.DoubleIntervalMatrix assign(java.lang.Number[]);
  public coho.common.matrix.DoubleIntervalMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.DoubleIntervalMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.DoubleIntervalMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.DoubleIntervalMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.DoubleIntervalMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.DoubleIntervalMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.DoubleIntervalMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.DoubleIntervalMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.DoubleIntervalMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.DoubleIntervalMatrix row(int);
  public coho.common.matrix.DoubleIntervalMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.DoubleIntervalMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.DoubleIntervalMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.DoubleIntervalMatrix col(int);
  public coho.common.matrix.DoubleIntervalMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.DoubleIntervalMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.DoubleIntervalMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.DoubleIntervalMatrix ones();
  public coho.common.matrix.DoubleIntervalMatrix zeros();
  public coho.common.matrix.DoubleIntervalMatrix randoms();
  public coho.common.matrix.DoubleIntervalMatrix ident();
  public coho.common.matrix.DoubleIntervalMatrix ident(int);
  public coho.common.matrix.DoubleIntervalMatrix diag();
  public coho.common.matrix.DoubleIntervalMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.DoubleIntervalMatrix fill(java.lang.Number);
  public coho.common.matrix.DoubleIntervalMatrix abs();
  public coho.common.matrix.DoubleIntervalMatrix negate();
  public coho.common.matrix.DoubleIntervalMatrix transpose();
  public coho.common.matrix.DoubleIntervalMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.DoubleIntervalMatrix add(coho.common.number.DoubleInterval);
  public coho.common.matrix.DoubleIntervalMatrix add(coho.common.number.ScaleNumber);
  public coho.common.matrix.DoubleIntervalMatrix add(java.lang.Number);
  public coho.common.matrix.DoubleIntervalMatrix sub(coho.common.number.DoubleInterval);
  public coho.common.matrix.DoubleIntervalMatrix sub(coho.common.number.ScaleNumber);
  public coho.common.matrix.DoubleIntervalMatrix sub(java.lang.Number);
  public coho.common.matrix.DoubleIntervalMatrix mult(coho.common.number.DoubleInterval);
  public coho.common.matrix.DoubleIntervalMatrix mult(coho.common.number.ScaleNumber);
  public coho.common.matrix.DoubleIntervalMatrix mult(java.lang.Number);
  public coho.common.matrix.DoubleIntervalMatrix div(coho.common.number.DoubleInterval);
  public coho.common.matrix.DoubleIntervalMatrix div(coho.common.number.ScaleNumber);
  public coho.common.matrix.DoubleIntervalMatrix div(java.lang.Number);
  public coho.common.matrix.DoubleIntervalMatrix add(coho.common.matrix.DoubleIntervalMatrix);
  public coho.common.matrix.DoubleIntervalMatrix sub(coho.common.matrix.DoubleIntervalMatrix);
  public coho.common.matrix.DoubleIntervalMatrix mult(coho.common.matrix.DoubleIntervalMatrix);
  public coho.common.matrix.DoubleIntervalMatrix div(coho.common.matrix.DoubleIntervalMatrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.DoubleIntervalMatrix elMult(coho.common.matrix.DoubleIntervalMatrix);
  public coho.common.matrix.DoubleIntervalMatrix elDiv(coho.common.matrix.DoubleIntervalMatrix);
  public coho.common.matrix.DoubleIntervalMatrix leftDiv(coho.common.matrix.DoubleIntervalMatrix) throws coho.common.matrix.SingularMatrixException;
  public static void main(java.lang.String[]);
  public coho.common.matrix.BasicMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix div(java.lang.Number);
  public coho.common.matrix.BasicMatrix mult(java.lang.Number);
  public coho.common.matrix.BasicMatrix sub(java.lang.Number);
  public coho.common.matrix.BasicMatrix add(java.lang.Number);
  public coho.common.matrix.BasicMatrix transpose();
  public coho.common.matrix.BasicMatrix negate();
  public coho.common.matrix.BasicMatrix abs();
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix col(int);
  public coho.common.matrix.BasicMatrix row(int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.BasicMatrix ident(int);
  public coho.common.matrix.BasicMatrix ident();
  public coho.common.matrix.BasicMatrix diag();
  public coho.common.matrix.BasicMatrix randoms();
  public coho.common.matrix.BasicMatrix zeros();
  public coho.common.matrix.BasicMatrix ones();
  public coho.common.matrix.BasicMatrix fill(java.lang.Number);
  public coho.common.matrix.BasicMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix convert();
  public coho.common.matrix.BasicMatrix convert(int[]);
  public coho.common.matrix.BasicMatrix convert(int, int);
  public coho.common.number.CohoType elementType();
  public coho.common.matrix.Matrix div(java.lang.Number);
  public coho.common.matrix.Matrix mult(java.lang.Number);
  public coho.common.matrix.Matrix sub(java.lang.Number);
  public coho.common.matrix.Matrix add(java.lang.Number);
  public coho.common.matrix.Matrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.Matrix fill(java.lang.Number);
  public coho.common.matrix.Matrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix diag();
  public coho.common.matrix.Matrix ident(int);
  public coho.common.matrix.Matrix ident();
  public coho.common.matrix.Matrix randoms();
  public coho.common.matrix.Matrix zeros();
  public coho.common.matrix.Matrix ones();
  public coho.common.matrix.Matrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.Range);
  public coho.common.matrix.Matrix col(int);
  public coho.common.matrix.Matrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.Range);
  public coho.common.matrix.Matrix row(int);
  public coho.common.matrix.Matrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.Matrix assign(java.lang.Number[]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix assign(java.lang.Number[][]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix assign(java.lang.Number, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.Matrix assign(java.lang.Number, int, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.Matrix convert(java.lang.Number[]);
  public coho.common.matrix.Matrix convert(java.lang.Number[][]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix convert();
  public coho.common.matrix.Matrix convert(int[]);
  public coho.common.matrix.Matrix convert(int, int);
}
Compiled from "DoubleMatrix.java"
public class coho.common.matrix.DoubleMatrix extends coho.common.matrix.BasicMatrix<coho.common.number.CohoDouble> {
  protected coho.common.matrix.DoubleMatrix(coho.common.number.CohoDouble[][], int, int);
  public static coho.common.matrix.DoubleMatrix typeCast(coho.common.matrix.BasicMatrix<coho.common.number.CohoDouble>);
  public coho.common.matrix.DoubleMatrix(int, int);
  public coho.common.matrix.DoubleMatrix(int[]);
  public coho.common.matrix.DoubleMatrix(coho.common.matrix.Matrix);
  public coho.common.matrix.DoubleMatrix(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.DoubleMatrix(coho.common.number.CohoNumber[]);
  public coho.common.matrix.DoubleMatrix(java.lang.Number[][]);
  public coho.common.matrix.DoubleMatrix(double[][]);
  public coho.common.matrix.DoubleMatrix(java.lang.Number[]);
  public coho.common.matrix.DoubleMatrix(double[]);
  public static coho.common.matrix.DoubleMatrix create(int, int);
  public static coho.common.matrix.DoubleMatrix create(int[]);
  public static coho.common.matrix.DoubleMatrix create(coho.common.matrix.Matrix);
  public static coho.common.matrix.DoubleMatrix create(coho.common.number.CohoNumber[][]);
  public static coho.common.matrix.DoubleMatrix create(coho.common.number.CohoNumber[]);
  public static coho.common.matrix.DoubleMatrix create(java.lang.Number[][]);
  public static coho.common.matrix.DoubleMatrix create(java.lang.Number[]);
  public static coho.common.matrix.DoubleMatrix create(double[][]);
  public static coho.common.matrix.DoubleMatrix create(double[]);
  public coho.common.matrix.DoubleMatrix convert(double[][]);
  public coho.common.matrix.DoubleMatrix convert(double[]);
  public coho.common.matrix.DoubleMatrix convert();
  public coho.common.matrix.DoubleMatrix convert(int, int);
  public coho.common.matrix.DoubleMatrix convert(int[]);
  public coho.common.matrix.DoubleMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.DoubleMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.DoubleMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.DoubleMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.DoubleMatrix convert(java.lang.Number[]);
  public coho.common.number.ScaleType elementType();
  public coho.common.matrix.DoubleMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.DoubleMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.DoubleMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.DoubleMatrix assign(java.lang.Number, int);
  public coho.common.matrix.DoubleMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.DoubleMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.DoubleMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.DoubleMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.DoubleMatrix assign(java.lang.Number[]);
  public coho.common.matrix.DoubleMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.DoubleMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.DoubleMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.DoubleMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.DoubleMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.DoubleMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.DoubleMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.DoubleMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.DoubleMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.DoubleMatrix row(int);
  public coho.common.matrix.DoubleMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.DoubleMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.DoubleMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.DoubleMatrix col(int);
  public coho.common.matrix.DoubleMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.DoubleMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.DoubleMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.DoubleMatrix ones();
  public coho.common.matrix.DoubleMatrix zeros();
  public coho.common.matrix.DoubleMatrix randoms();
  public coho.common.matrix.DoubleMatrix ident();
  public coho.common.matrix.DoubleMatrix ident(int);
  public coho.common.matrix.DoubleMatrix diag();
  public coho.common.matrix.DoubleMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.DoubleMatrix fill(java.lang.Number);
  public coho.common.matrix.DoubleMatrix abs();
  public coho.common.matrix.DoubleMatrix negate();
  public coho.common.matrix.DoubleMatrix transpose();
  public coho.common.matrix.DoubleMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.DoubleMatrix add(coho.common.number.CohoDouble);
  public coho.common.matrix.DoubleMatrix add(java.lang.Number);
  public coho.common.matrix.DoubleMatrix sub(coho.common.number.CohoDouble);
  public coho.common.matrix.DoubleMatrix sub(java.lang.Number);
  public coho.common.matrix.DoubleMatrix mult(coho.common.number.CohoDouble);
  public coho.common.matrix.DoubleMatrix mult(java.lang.Number);
  public coho.common.matrix.DoubleMatrix div(coho.common.number.CohoDouble);
  public coho.common.matrix.DoubleMatrix div(java.lang.Number);
  public coho.common.matrix.DoubleMatrix add(coho.common.matrix.DoubleMatrix);
  public coho.common.matrix.DoubleMatrix sub(coho.common.matrix.DoubleMatrix);
  public coho.common.matrix.DoubleMatrix mult(coho.common.matrix.DoubleMatrix);
  public coho.common.matrix.DoubleMatrix div(coho.common.matrix.DoubleMatrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.DoubleMatrix elMult(coho.common.matrix.DoubleMatrix);
  public coho.common.matrix.DoubleMatrix elDiv(coho.common.matrix.DoubleMatrix);
  public coho.common.matrix.DoubleMatrix leftDiv(coho.common.matrix.DoubleMatrix) throws coho.common.matrix.SingularMatrixException;
  public static void main(java.lang.String[]);
  public coho.common.matrix.BasicMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix div(java.lang.Number);
  public coho.common.matrix.BasicMatrix mult(java.lang.Number);
  public coho.common.matrix.BasicMatrix sub(java.lang.Number);
  public coho.common.matrix.BasicMatrix add(java.lang.Number);
  public coho.common.matrix.BasicMatrix transpose();
  public coho.common.matrix.BasicMatrix negate();
  public coho.common.matrix.BasicMatrix abs();
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix col(int);
  public coho.common.matrix.BasicMatrix row(int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.BasicMatrix ident(int);
  public coho.common.matrix.BasicMatrix ident();
  public coho.common.matrix.BasicMatrix diag();
  public coho.common.matrix.BasicMatrix randoms();
  public coho.common.matrix.BasicMatrix zeros();
  public coho.common.matrix.BasicMatrix ones();
  public coho.common.matrix.BasicMatrix fill(java.lang.Number);
  public coho.common.matrix.BasicMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix convert();
  public coho.common.matrix.BasicMatrix convert(int[]);
  public coho.common.matrix.BasicMatrix convert(int, int);
  public coho.common.number.CohoType elementType();
  public coho.common.matrix.Matrix div(java.lang.Number);
  public coho.common.matrix.Matrix mult(java.lang.Number);
  public coho.common.matrix.Matrix sub(java.lang.Number);
  public coho.common.matrix.Matrix add(java.lang.Number);
  public coho.common.matrix.Matrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.Matrix fill(java.lang.Number);
  public coho.common.matrix.Matrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix diag();
  public coho.common.matrix.Matrix ident(int);
  public coho.common.matrix.Matrix ident();
  public coho.common.matrix.Matrix randoms();
  public coho.common.matrix.Matrix zeros();
  public coho.common.matrix.Matrix ones();
  public coho.common.matrix.Matrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.Range);
  public coho.common.matrix.Matrix col(int);
  public coho.common.matrix.Matrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.Range);
  public coho.common.matrix.Matrix row(int);
  public coho.common.matrix.Matrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.Matrix assign(java.lang.Number[]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix assign(java.lang.Number[][]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix assign(java.lang.Number, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.Matrix assign(java.lang.Number, int, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.Matrix convert(java.lang.Number[]);
  public coho.common.matrix.Matrix convert(java.lang.Number[][]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix convert();
  public coho.common.matrix.Matrix convert(int[]);
  public coho.common.matrix.Matrix convert(int, int);
}
Compiled from "IntegerMatrix.java"
public class coho.common.matrix.IntegerMatrix extends coho.common.matrix.BasicMatrix<coho.common.number.CohoInteger> {
  protected coho.common.matrix.IntegerMatrix(coho.common.number.CohoInteger[][], int, int);
  public static coho.common.matrix.IntegerMatrix typeCast(coho.common.matrix.BasicMatrix<coho.common.number.CohoInteger>);
  public coho.common.matrix.IntegerMatrix(int, int);
  public coho.common.matrix.IntegerMatrix(int[]);
  public coho.common.matrix.IntegerMatrix(coho.common.matrix.Matrix);
  public coho.common.matrix.IntegerMatrix(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.IntegerMatrix(coho.common.number.CohoNumber[]);
  public coho.common.matrix.IntegerMatrix(java.lang.Number[][]);
  public coho.common.matrix.IntegerMatrix(int[][]);
  public coho.common.matrix.IntegerMatrix(java.lang.Number[]);
  public static coho.common.matrix.IntegerMatrix create(int, int);
  public static coho.common.matrix.IntegerMatrix create(int[]);
  public static coho.common.matrix.IntegerMatrix create(coho.common.matrix.Matrix);
  public static coho.common.matrix.IntegerMatrix create(coho.common.number.CohoNumber[][]);
  public static coho.common.matrix.IntegerMatrix create(coho.common.number.CohoNumber[]);
  public static coho.common.matrix.IntegerMatrix create(java.lang.Number[][]);
  public static coho.common.matrix.IntegerMatrix create(java.lang.Number[]);
  public static coho.common.matrix.IntegerMatrix create(int[][]);
  public coho.common.matrix.IntegerMatrix convert(int[][]);
  public coho.common.matrix.IntegerMatrix convert();
  public coho.common.matrix.IntegerMatrix convert(int, int);
  public coho.common.matrix.IntegerMatrix convert(int[]);
  public coho.common.matrix.IntegerMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.IntegerMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.IntegerMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.IntegerMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.IntegerMatrix convert(java.lang.Number[]);
  public coho.common.number.ScaleType elementType();
  public coho.common.matrix.IntegerMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.IntegerMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.IntegerMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.IntegerMatrix assign(java.lang.Number, int);
  public coho.common.matrix.IntegerMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.IntegerMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.IntegerMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.IntegerMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.IntegerMatrix assign(java.lang.Number[]);
  public coho.common.matrix.IntegerMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.IntegerMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.IntegerMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.IntegerMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.IntegerMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.IntegerMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.IntegerMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.IntegerMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.IntegerMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.IntegerMatrix row(int);
  public coho.common.matrix.IntegerMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.IntegerMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.IntegerMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.IntegerMatrix col(int);
  public coho.common.matrix.IntegerMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.IntegerMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.IntegerMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.IntegerMatrix ones();
  public coho.common.matrix.IntegerMatrix zeros();
  public coho.common.matrix.IntegerMatrix randoms();
  public coho.common.matrix.IntegerMatrix ident();
  public coho.common.matrix.IntegerMatrix ident(int);
  public coho.common.matrix.IntegerMatrix diag();
  public coho.common.matrix.IntegerMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.IntegerMatrix fill(java.lang.Number);
  public coho.common.matrix.IntegerMatrix abs();
  public coho.common.matrix.IntegerMatrix negate();
  public coho.common.matrix.IntegerMatrix transpose();
  public coho.common.matrix.IntegerMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.IntegerMatrix add(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.IntegerMatrix sub(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.IntegerMatrix mult(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.IntegerMatrix div(coho.common.matrix.IntegerMatrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.IntegerMatrix elMult(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.IntegerMatrix elDiv(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.IntegerMatrix leftDiv(coho.common.matrix.IntegerMatrix) throws coho.common.matrix.SingularMatrixException;
  public static void main(java.lang.String[]);
  public coho.common.matrix.BasicMatrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix transpose();
  public coho.common.matrix.BasicMatrix negate();
  public coho.common.matrix.BasicMatrix abs();
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix col(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix row(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix col(int);
  public coho.common.matrix.BasicMatrix row(int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.BasicMatrix assign(java.lang.Number, int, int);
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.BasicMatrix ident(int);
  public coho.common.matrix.BasicMatrix ident();
  public coho.common.matrix.BasicMatrix diag();
  public coho.common.matrix.BasicMatrix randoms();
  public coho.common.matrix.BasicMatrix zeros();
  public coho.common.matrix.BasicMatrix ones();
  public coho.common.matrix.BasicMatrix fill(java.lang.Number);
  public coho.common.matrix.BasicMatrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.BasicMatrix convert(java.lang.Number[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.BasicMatrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix convert();
  public coho.common.matrix.BasicMatrix convert(int[]);
  public coho.common.matrix.BasicMatrix convert(int, int);
  public coho.common.number.CohoType elementType();
  public coho.common.matrix.Matrix inv() throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.Matrix fill(java.lang.Number);
  public coho.common.matrix.Matrix fill(coho.common.number.CohoNumber);
  public coho.common.matrix.Matrix diag();
  public coho.common.matrix.Matrix ident(int);
  public coho.common.matrix.Matrix ident();
  public coho.common.matrix.Matrix randoms();
  public coho.common.matrix.Matrix zeros();
  public coho.common.matrix.Matrix ones();
  public coho.common.matrix.Matrix col(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.Range);
  public coho.common.matrix.Matrix col(int);
  public coho.common.matrix.Matrix row(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.Range);
  public coho.common.matrix.Matrix row(int);
  public coho.common.matrix.Matrix V(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix V(int, coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, int);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range);
  public coho.common.matrix.Matrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int, int);
  public coho.common.matrix.Matrix assign(java.lang.Number[]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix assign(java.lang.Number[][]);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix assign(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix assign(java.lang.Number, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int);
  public coho.common.matrix.Matrix assign(java.lang.Number, int, int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.Matrix convert(java.lang.Number[]);
  public coho.common.matrix.Matrix convert(java.lang.Number[][]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[]);
  public coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[][]);
  public coho.common.matrix.Matrix convert(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix convert();
  public coho.common.matrix.Matrix convert(int[]);
  public coho.common.matrix.Matrix convert(int, int);
}
Compiled from "Matrix.java"
public interface coho.common.matrix.Matrix {
  public abstract coho.common.matrix.Matrix convert(int, int);
  public abstract coho.common.matrix.Matrix convert(int[]);
  public abstract coho.common.matrix.Matrix convert();
  public abstract coho.common.matrix.Matrix convert(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[][]);
  public abstract coho.common.matrix.Matrix convert(coho.common.number.CohoNumber[]);
  public abstract coho.common.matrix.Matrix convert(java.lang.Number[][]);
  public abstract coho.common.matrix.Matrix convert(java.lang.Number[]);
  public abstract int nrows();
  public abstract int ncols();
  public abstract int[] size();
  public abstract int size(int);
  public abstract int length();
  public abstract coho.common.number.CohoType elementType();
  public abstract boolean isVector();
  public abstract boolean isSquare();
  public abstract coho.common.number.CohoNumber[][] toArray();
  public abstract coho.common.number.CohoNumber[] toVector();
  public abstract coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int, int);
  public abstract coho.common.matrix.Matrix assign(java.lang.Number, int, int);
  public abstract coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int);
  public abstract coho.common.matrix.Matrix assign(java.lang.Number, int);
  public abstract coho.common.matrix.Matrix assign(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[][]);
  public abstract coho.common.matrix.Matrix assign(java.lang.Number[][]);
  public abstract coho.common.matrix.Matrix assign(coho.common.number.CohoNumber[]);
  public abstract coho.common.matrix.Matrix assign(java.lang.Number[]);
  public abstract coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int, int);
  public abstract coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, int);
  public abstract coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.BooleanMatrix);
  public abstract coho.common.matrix.Matrix assign(coho.common.matrix.Matrix, coho.common.matrix.IntegerMatrix);
  public abstract coho.common.number.CohoNumber V(int, int);
  public abstract coho.common.number.CohoNumber V(int);
  public abstract coho.common.matrix.Matrix V(coho.common.matrix.Range, coho.common.matrix.Range);
  public abstract coho.common.matrix.Matrix V(coho.common.matrix.Range);
  public abstract coho.common.matrix.Matrix V(coho.common.matrix.Range, int);
  public abstract coho.common.matrix.Matrix V(int, coho.common.matrix.Range);
  public abstract coho.common.matrix.Matrix V(coho.common.matrix.IntegerMatrix);
  public abstract coho.common.matrix.Matrix row(int);
  public abstract coho.common.matrix.Matrix row(coho.common.matrix.Range);
  public abstract coho.common.matrix.Matrix row(coho.common.matrix.IntegerMatrix);
  public abstract coho.common.matrix.Matrix row(coho.common.matrix.BooleanMatrix);
  public abstract coho.common.matrix.Matrix col(int);
  public abstract coho.common.matrix.Matrix col(coho.common.matrix.Range);
  public abstract coho.common.matrix.Matrix col(coho.common.matrix.IntegerMatrix);
  public abstract coho.common.matrix.Matrix col(coho.common.matrix.BooleanMatrix);
  public abstract coho.common.number.CohoNumber one();
  public abstract coho.common.number.CohoNumber zero();
  public abstract coho.common.number.CohoNumber random();
  public abstract coho.common.matrix.Matrix ones();
  public abstract coho.common.matrix.Matrix zeros();
  public abstract coho.common.matrix.Matrix randoms();
  public abstract coho.common.matrix.Matrix ident();
  public abstract coho.common.matrix.Matrix ident(int);
  public abstract coho.common.matrix.Matrix diag();
  public abstract coho.common.matrix.Matrix fill(coho.common.number.CohoNumber);
  public abstract coho.common.matrix.Matrix fill(java.lang.Number);
  public abstract coho.common.matrix.Matrix abs();
  public abstract coho.common.matrix.Matrix negate();
  public abstract coho.common.matrix.Matrix transpose();
  public abstract coho.common.number.CohoNumber max();
  public abstract coho.common.number.CohoNumber min();
  public abstract coho.common.number.CohoNumber norm();
  public abstract coho.common.number.CohoNumber prod();
  public abstract coho.common.number.CohoNumber sum();
  public abstract coho.common.matrix.Matrix inv() throws coho.common.matrix.SingularMatrixException;
  public abstract coho.common.matrix.Matrix add(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.Matrix add(coho.common.number.CohoNumber);
  public abstract coho.common.matrix.Matrix add(java.lang.Number);
  public abstract coho.common.matrix.Matrix sub(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.Matrix sub(coho.common.number.CohoNumber);
  public abstract coho.common.matrix.Matrix sub(java.lang.Number);
  public abstract coho.common.matrix.Matrix mult(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.Matrix mult(coho.common.number.CohoNumber);
  public abstract coho.common.matrix.Matrix mult(java.lang.Number);
  public abstract coho.common.matrix.Matrix elMult(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.Matrix div(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public abstract coho.common.matrix.Matrix div(coho.common.number.CohoNumber);
  public abstract coho.common.matrix.Matrix div(java.lang.Number);
  public abstract coho.common.matrix.Matrix leftDiv(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public abstract coho.common.matrix.Matrix elDiv(coho.common.matrix.Matrix);
  public abstract coho.common.number.CohoNumber dotProd(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.BooleanMatrix eq(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.BooleanMatrix neq(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.BooleanMatrix greater(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.BooleanMatrix geq(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.BooleanMatrix less(coho.common.matrix.Matrix);
  public abstract coho.common.matrix.BooleanMatrix leq(coho.common.matrix.Matrix);
  public abstract java.lang.String toString();
  public abstract java.lang.String toString(java.lang.Object);
  public abstract java.lang.String toMatlab();
}
Compiled from "MatrixError.java"
public class coho.common.matrix.MatrixError extends java.lang.RuntimeException {
  public coho.common.matrix.MatrixError();
  public coho.common.matrix.MatrixError(java.lang.String);
  public coho.common.matrix.MatrixError(java.lang.Throwable);
  public coho.common.matrix.MatrixError(java.lang.String, java.lang.Throwable);
}
Compiled from "Range.java"
public class coho.common.matrix.Range {
  public int lo();
  public int hi();
  public coho.common.matrix.Range(int, int);
  public int length();
  public java.lang.String toString();
}
Compiled from "Reduce.java"
public interface coho.common.matrix.Reduce {
  public abstract coho.common.number.CohoNumber first(coho.common.matrix.BasicMatrix[]);
  public abstract coho.common.number.CohoNumber middle(coho.common.number.CohoNumber, coho.common.number.CohoNumber[]);
  public abstract coho.common.number.CohoNumber last(coho.common.number.CohoNumber);
}
Compiled from "ReduceCol.java"
public interface coho.common.matrix.ReduceCol extends coho.common.matrix.Reduce {
  public abstract coho.common.matrix.BasicMatrix create(int, coho.common.matrix.BasicMatrix[]);
}
Compiled from "ReduceRow.java"
public interface coho.common.matrix.ReduceRow extends coho.common.matrix.Reduce {
  public abstract coho.common.matrix.BasicMatrix create(int, coho.common.matrix.BasicMatrix[]);
}
Compiled from "SingularMatrixException.java"
public class coho.common.matrix.SingularMatrixException extends java.lang.Exception {
  double cond;
  public double getCond();
  public coho.common.matrix.SingularMatrixException(double);
  public coho.common.matrix.SingularMatrixException(double, java.lang.String);
  public coho.common.matrix.SingularMatrixException(java.lang.Throwable);
  public coho.common.matrix.SingularMatrixException(java.lang.String, java.lang.Throwable);
}
Compiled from "SparseMatrix.java"
public interface coho.common.matrix.SparseMatrix extends coho.common.matrix.Matrix {
  public abstract coho.common.matrix.BooleanMatrix nonZero();
  public abstract boolean isZero(int, int);
  public abstract int nonZeroNumOfRow(int);
  public abstract int nonZeroNumOfCol(int);
}
Compiled from "Test.java"
public class coho.common.matrix.Test {
  static coho.common.matrix.Test$MatrixTest subTest;
  static coho.common.matrix.Test$MatrixTest valueTest;
  static coho.common.matrix.Test$MatrixTest numberTest;
  static coho.common.matrix.Test$MatrixTest promoteTest;
  static coho.common.matrix.Test$MatrixTest doubleTest;
  static coho.common.matrix.Test$MatrixTest intervalTest;
  public coho.common.matrix.Test();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "Test.java"
final class coho.common.matrix.Test$1 implements coho.common.matrix.Test$MatrixTest {
  coho.common.matrix.Test$1();
  public boolean test();
}
Compiled from "Test.java"
final class coho.common.matrix.Test$2 implements coho.common.matrix.Test$MatrixTest {
  coho.common.matrix.Test$2();
  public boolean test();
}
Compiled from "Test.java"
final class coho.common.matrix.Test$3 implements coho.common.matrix.Test$MatrixTest {
  coho.common.matrix.Test$3();
  public boolean test();
}
Compiled from "Test.java"
final class coho.common.matrix.Test$4 implements coho.common.matrix.Test$MatrixTest {
  coho.common.matrix.Test$4();
  public boolean test();
}
Compiled from "Test.java"
final class coho.common.matrix.Test$5 implements coho.common.matrix.Test$MatrixTest {
  coho.common.matrix.Test$5();
  public boolean test();
}
Compiled from "Test.java"
final class coho.common.matrix.Test$6 implements coho.common.matrix.Test$MatrixTest {
  coho.common.matrix.Test$6();
  public boolean test();
}
Compiled from "Test.java"
interface coho.common.matrix.Test$MatrixTest {
  public abstract boolean test();
}
Compiled from "APRInterval.java"
public class coho.common.number.APRInterval extends coho.common.number.BasicInterval {
  public static final coho.common.number.APRInterval zero;
  public static final coho.common.number.APRInterval one;
  public static final coho.common.number.IntervalType type;
  public coho.common.number.CohoAPR lo();
  public coho.common.number.CohoAPR hi();
  public coho.common.number.CohoAPR x();
  public coho.common.number.CohoAPR e();
  public coho.common.number.APRInterval(coho.common.number.CohoNumber);
  public coho.common.number.APRInterval(java.lang.Number);
  public coho.common.number.APRInterval(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.APRInterval(java.lang.Number, java.lang.Number);
  public static coho.common.number.APRInterval create(coho.common.number.CohoNumber);
  public static coho.common.number.APRInterval create(java.lang.Number);
  public static coho.common.number.APRInterval create(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public static coho.common.number.APRInterval create(java.lang.Number, java.lang.Number);
  public coho.common.number.APRInterval convert(coho.common.number.CohoNumber);
  public coho.common.number.APRInterval convert(java.lang.Number);
  public coho.common.number.APRInterval convert(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.APRInterval convert(java.lang.Number, java.lang.Number);
  public coho.common.number.APRInterval[][] createArray(int, int);
  public coho.common.number.APRInterval[] createVector(int);
  public coho.common.number.APRInterval zero();
  public coho.common.number.APRInterval one();
  public coho.common.number.APRInterval random();
  public coho.common.number.APRInterval abs();
  public coho.common.number.APRInterval negate();
  public coho.common.number.APRInterval recip();
  public coho.common.number.APRInterval sqrt();
  public coho.common.number.APRInterval add(coho.common.number.APRInterval);
  public coho.common.number.APRInterval sub(coho.common.number.APRInterval);
  public coho.common.number.APRInterval mult(coho.common.number.APRInterval);
  public coho.common.number.APRInterval div(coho.common.number.APRInterval);
  public coho.common.number.APRInterval max(coho.common.number.APRInterval);
  public coho.common.number.APRInterval min(coho.common.number.APRInterval);
  public int compareTo(coho.common.number.APRInterval);
  public coho.common.number.IntervalType type();
  public coho.common.number.IntervalNumber sqrt();
  public coho.common.number.IntervalNumber recip();
  public coho.common.number.IntervalNumber negate();
  public coho.common.number.IntervalNumber abs();
  public coho.common.number.IntervalNumber random();
  public coho.common.number.IntervalNumber zero();
  public coho.common.number.IntervalNumber one();
  public coho.common.number.IntervalNumber[] createVector(int);
  public coho.common.number.IntervalNumber[][] createArray(int, int);
  public coho.common.number.IntervalNumber convert(java.lang.Number);
  public coho.common.number.IntervalNumber convert(coho.common.number.CohoNumber);
  public coho.common.number.ScaleNumber e();
  public coho.common.number.ScaleNumber x();
  public coho.common.number.ScaleNumber hi();
  public coho.common.number.ScaleNumber lo();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  static {};
}
Compiled from "BasicInterval.java"
public abstract class coho.common.number.BasicInterval extends coho.common.number.BasicNumber implements coho.common.number.IntervalNumber {
  public coho.common.number.BasicInterval();
  public abstract coho.common.number.ScaleNumber lo();
  public abstract coho.common.number.ScaleNumber hi();
  public abstract coho.common.number.ScaleNumber x();
  public abstract coho.common.number.ScaleNumber e();
  public coho.common.number.ScaleNumber scale();
  public coho.common.number.ScaleNumber error();
  public boolean isScale();
  public long longValue();
  public double doubleValue();
  public double doubleValue(coho.common.number.Round$ROUNDMODE);
  public abstract coho.common.number.IntervalNumber convert(coho.common.number.CohoNumber);
  public abstract coho.common.number.IntervalNumber convert(java.lang.Number);
  public abstract coho.common.number.IntervalNumber[][] createArray(int, int);
  public abstract coho.common.number.IntervalNumber[] createVector(int);
  public abstract coho.common.number.IntervalNumber one();
  public abstract coho.common.number.IntervalNumber zero();
  public abstract coho.common.number.IntervalNumber random();
  public abstract coho.common.number.IntervalNumber abs();
  public abstract coho.common.number.IntervalNumber negate();
  public abstract coho.common.number.IntervalNumber recip();
  public abstract coho.common.number.IntervalNumber sqrt();
  public coho.common.number.IntervalNumber add(coho.common.number.IntervalNumber);
  public coho.common.number.IntervalNumber sub(coho.common.number.IntervalNumber);
  public coho.common.number.IntervalNumber mult(coho.common.number.IntervalNumber);
  public coho.common.number.IntervalNumber div(coho.common.number.IntervalNumber);
  public coho.common.number.IntervalNumber max(coho.common.number.IntervalNumber);
  public coho.common.number.IntervalNumber min(coho.common.number.IntervalNumber);
  public int compareTo(coho.common.number.IntervalNumber);
  public coho.common.number.IntervalNumber add(java.lang.Number);
  public coho.common.number.IntervalNumber sub(java.lang.Number);
  public coho.common.number.IntervalNumber mult(java.lang.Number);
  public coho.common.number.IntervalNumber div(java.lang.Number);
  public coho.common.number.IntervalNumber max(java.lang.Number);
  public coho.common.number.IntervalNumber min(java.lang.Number);
  public int compareTo(java.lang.Number);
  public abstract coho.common.number.IntervalType type();
  public java.lang.String toString();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber min(java.lang.Number);
  public coho.common.number.CohoNumber max(java.lang.Number);
  public coho.common.number.CohoNumber div(java.lang.Number);
  public coho.common.number.CohoNumber mult(java.lang.Number);
  public coho.common.number.CohoNumber sub(java.lang.Number);
  public coho.common.number.CohoNumber add(java.lang.Number);
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
}
Compiled from "BasicInterval.java"
class coho.common.number.BasicInterval$1 {
  static final int[] $SwitchMap$coho$common$number$Round$ROUNDMODE;
  static {};
}
Compiled from "BasicNumber.java"
public abstract class coho.common.number.BasicNumber implements coho.common.number.CohoNumber {
  public coho.common.number.BasicNumber();
  public abstract coho.common.number.CohoNumber abs();
  public abstract coho.common.number.CohoNumber negate();
  public abstract coho.common.number.CohoNumber recip();
  public abstract coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber add(coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber add(java.lang.Number);
  public coho.common.number.CohoNumber sub(coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber sub(java.lang.Number);
  public coho.common.number.CohoNumber mult(coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber mult(java.lang.Number);
  public coho.common.number.CohoNumber div(coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber div(java.lang.Number);
  public coho.common.number.CohoNumber max(coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber max(java.lang.Number);
  public coho.common.number.CohoNumber min(coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber min(java.lang.Number);
  public int compareTo(coho.common.number.CohoNumber);
  public int compareTo(java.lang.Number);
  public final boolean eq(coho.common.number.CohoNumber);
  public final boolean eq(java.lang.Number);
  public final boolean neq(coho.common.number.CohoNumber);
  public final boolean neq(java.lang.Number);
  public final boolean greater(coho.common.number.CohoNumber);
  public final boolean greater(java.lang.Number);
  public final boolean geq(coho.common.number.CohoNumber);
  public final boolean geq(java.lang.Number);
  public final boolean less(coho.common.number.CohoNumber);
  public final boolean less(java.lang.Number);
  public final boolean leq(coho.common.number.CohoNumber);
  public final boolean leq(java.lang.Number);
  public abstract long longValue();
  public abstract double doubleValue();
  public boolean booleanValue();
  public byte byteValue();
  public short shortValue();
  public int intValue();
  public float floatValue();
  public abstract coho.common.number.CohoNumber one();
  public abstract coho.common.number.CohoNumber zero();
  public abstract coho.common.number.CohoNumber random();
  public abstract coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public abstract coho.common.number.CohoNumber convert(java.lang.Number);
  public abstract coho.common.number.CohoNumber[][] createArray(int, int);
  public abstract coho.common.number.CohoNumber[] createVector(int);
  public abstract coho.common.number.CohoType type();
  public abstract java.lang.String toString();
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public int compareTo(java.lang.Object);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
}
Compiled from "BasicScale.java"
public abstract class coho.common.number.BasicScale extends coho.common.number.BasicNumber implements coho.common.number.ScaleNumber {
  public coho.common.number.BasicScale();
  public abstract coho.common.number.BasicScale one();
  public abstract coho.common.number.BasicScale zero();
  public abstract coho.common.number.BasicScale random();
  public abstract coho.common.number.BasicScale convert(coho.common.number.CohoNumber);
  public abstract coho.common.number.BasicScale convert(java.lang.Number);
  public abstract coho.common.number.ScaleNumber[][] createArray(int, int);
  public abstract coho.common.number.ScaleNumber[] createVector(int);
  public coho.common.number.ScaleNumber scale();
  public coho.common.number.ScaleNumber error();
  public double doubleValue(coho.common.number.Round$ROUNDMODE);
  public abstract coho.common.number.ScaleNumber abs();
  public abstract coho.common.number.ScaleNumber recip();
  public abstract coho.common.number.ScaleNumber negate();
  public abstract coho.common.number.ScaleNumber sqrt();
  public coho.common.number.ScaleNumber add(coho.common.number.ScaleNumber);
  public coho.common.number.ScaleNumber sub(coho.common.number.ScaleNumber);
  public coho.common.number.ScaleNumber mult(coho.common.number.ScaleNumber);
  public coho.common.number.ScaleNumber div(coho.common.number.ScaleNumber);
  public coho.common.number.ScaleNumber max(coho.common.number.ScaleNumber);
  public coho.common.number.ScaleNumber min(coho.common.number.ScaleNumber);
  public int compareTo(coho.common.number.ScaleNumber);
  public coho.common.number.ScaleNumber add(java.lang.Number);
  public coho.common.number.ScaleNumber sub(java.lang.Number);
  public coho.common.number.ScaleNumber mult(java.lang.Number);
  public coho.common.number.ScaleNumber div(java.lang.Number);
  public coho.common.number.ScaleNumber max(java.lang.Number);
  public coho.common.number.ScaleNumber min(java.lang.Number);
  public int compareTo(java.lang.Number);
  public abstract coho.common.number.ScaleType type();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber min(java.lang.Number);
  public coho.common.number.CohoNumber max(java.lang.Number);
  public coho.common.number.CohoNumber div(java.lang.Number);
  public coho.common.number.CohoNumber mult(java.lang.Number);
  public coho.common.number.CohoNumber sub(java.lang.Number);
  public coho.common.number.CohoNumber add(java.lang.Number);
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.ScaleNumber random();
  public coho.common.number.ScaleNumber zero();
  public coho.common.number.ScaleNumber one();
}
Compiled from "BasicType.java"
public abstract class coho.common.number.BasicType implements coho.common.number.CohoType {
  protected java.lang.Class classType;
  protected coho.common.number.CohoNumber one;
  protected coho.common.number.CohoNumber zero;
  protected coho.common.number.BasicType(java.lang.Class, coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public java.lang.Class classType();
  public java.lang.String name();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.BasicType promote(coho.common.number.CohoType);
  public static coho.common.number.CohoNumber[] promote(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public static coho.common.number.CohoNumber[] promote(coho.common.number.CohoNumber, java.lang.Number);
  public static coho.common.number.CohoNumber promoteOp(coho.common.number.CohoNumber, coho.common.number.CohoNumber, coho.common.number.CohoNumber$ArithOp);
  public static coho.common.number.CohoNumber promoteOp(coho.common.number.CohoNumber, java.lang.Number, coho.common.number.CohoNumber$ArithOp);
  public java.lang.String toString();
  public coho.common.number.CohoType promote(coho.common.number.CohoType);
}
Compiled from "CohoAPR.java"
public class coho.common.number.CohoAPR extends coho.common.number.BasicScale implements coho.common.number.Round {
  final java.math.BigInteger numerator;
  final java.math.BigInteger denominator;
  public static final int BIAS;
  public static final coho.common.number.CohoAPR zero;
  public static final coho.common.number.CohoAPR one;
  public static coho.common.number.ScaleType type;
  public static boolean printDouble;
  public java.math.BigInteger numerator();
  public java.math.BigInteger denominator();
  public coho.common.number.CohoAPR(coho.common.number.CohoNumber);
  public coho.common.number.CohoAPR(java.lang.Number);
  public coho.common.number.CohoAPR(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoAPR(java.lang.Number, java.lang.Number);
  public coho.common.number.CohoAPR(java.math.BigInteger, java.math.BigInteger);
  public static coho.common.number.CohoAPR create(coho.common.number.CohoNumber);
  public static coho.common.number.CohoAPR create(java.lang.Number);
  public static coho.common.number.CohoAPR create(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public static coho.common.number.CohoAPR create(java.lang.Number, java.lang.Number);
  public static coho.common.number.CohoAPR create(java.math.BigInteger, java.math.BigInteger);
  public coho.common.number.CohoAPR convert(coho.common.number.CohoNumber);
  public coho.common.number.CohoAPR convert(java.lang.Number);
  public coho.common.number.CohoAPR convert(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.CohoAPR convert(java.lang.Number, java.lang.Number);
  public coho.common.number.CohoAPR convert(java.math.BigInteger, java.math.BigInteger);
  public coho.common.number.CohoAPR[][] createArray(int, int);
  public coho.common.number.CohoAPR[] createVector(int);
  public coho.common.number.CohoAPR zero();
  public coho.common.number.CohoAPR one();
  public coho.common.number.CohoAPR random();
  public coho.common.number.CohoAPR abs();
  public coho.common.number.CohoAPR negate();
  public coho.common.number.CohoAPR recip();
  public coho.common.number.CohoAPR sqrt();
  public coho.common.number.CohoAPR add(coho.common.number.CohoAPR);
  public coho.common.number.CohoAPR sub(coho.common.number.CohoAPR);
  public coho.common.number.CohoAPR mult(coho.common.number.CohoAPR);
  public coho.common.number.CohoAPR div(coho.common.number.CohoAPR);
  public coho.common.number.CohoAPR max(coho.common.number.CohoAPR);
  public coho.common.number.CohoAPR min(coho.common.number.CohoAPR);
  public int compareTo(coho.common.number.CohoAPR);
  public long longValue();
  public double doubleValue();
  static java.math.BigInteger floor(java.math.BigInteger, java.math.BigInteger);
  static java.math.BigInteger ceil(java.math.BigInteger, java.math.BigInteger);
  static java.math.BigInteger round(java.math.BigInteger, java.math.BigInteger);
  static int floorLog2(java.math.BigInteger);
  static int ceilLog2(java.math.BigInteger);
  static java.math.BigInteger pow(int);
  static java.math.BigInteger leftShift(java.math.BigInteger, int);
  static java.math.BigInteger rightShift(java.math.BigInteger, int);
  public double doubleValue(coho.common.number.Round$ROUNDMODE);
  public static boolean test();
  public coho.common.number.ScaleType type();
  public java.lang.String toString();
  public java.lang.String toString(boolean);
  public static void main(java.lang.String[]);
  public coho.common.number.ScaleNumber sqrt();
  public coho.common.number.ScaleNumber negate();
  public coho.common.number.ScaleNumber recip();
  public coho.common.number.ScaleNumber abs();
  public coho.common.number.ScaleNumber[] createVector(int);
  public coho.common.number.ScaleNumber[][] createArray(int, int);
  public coho.common.number.BasicScale convert(java.lang.Number);
  public coho.common.number.BasicScale convert(coho.common.number.CohoNumber);
  public coho.common.number.BasicScale random();
  public coho.common.number.BasicScale zero();
  public coho.common.number.BasicScale one();
  public coho.common.number.ScaleNumber random();
  public coho.common.number.ScaleNumber zero();
  public coho.common.number.ScaleNumber one();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  static {};
}
Compiled from "CohoAPR.java"
class coho.common.number.CohoAPR$1 {
  static final int[] $SwitchMap$coho$common$number$Round$ROUNDMODE;
  static {};
}
Compiled from "CohoBoolean.java"
public class coho.common.number.CohoBoolean extends coho.common.number.BasicScale {
  public static final coho.common.number.CohoBoolean one;
  public static final coho.common.number.CohoBoolean zero;
  public static coho.common.number.ScaleType type;
  public coho.common.number.CohoBoolean(coho.common.number.CohoNumber);
  public coho.common.number.CohoBoolean(java.lang.Number);
  public coho.common.number.CohoBoolean(java.lang.Boolean);
  public static coho.common.number.CohoBoolean create(coho.common.number.CohoNumber);
  public static coho.common.number.CohoBoolean create(java.lang.Number);
  public static coho.common.number.CohoBoolean create(java.lang.Boolean);
  public coho.common.number.CohoBoolean convert(coho.common.number.CohoNumber);
  public coho.common.number.CohoBoolean convert(java.lang.Number);
  public coho.common.number.CohoBoolean convert(java.lang.Boolean);
  public coho.common.number.CohoBoolean[][] createArray(int, int);
  public coho.common.number.CohoBoolean[] createVector(int);
  public coho.common.number.CohoBoolean one();
  public coho.common.number.CohoBoolean zero();
  public coho.common.number.CohoBoolean random();
  public coho.common.number.CohoBoolean abs();
  public coho.common.number.CohoBoolean negate();
  public coho.common.number.CohoBoolean recip();
  public coho.common.number.CohoBoolean sqrt();
  public coho.common.number.CohoBoolean add(coho.common.number.CohoBoolean);
  public coho.common.number.CohoBoolean sub(coho.common.number.CohoBoolean);
  public coho.common.number.CohoBoolean mult(coho.common.number.CohoBoolean);
  public coho.common.number.CohoBoolean div(coho.common.number.CohoBoolean);
  public coho.common.number.CohoBoolean max(coho.common.number.CohoBoolean);
  public coho.common.number.CohoBoolean min(coho.common.number.CohoBoolean);
  public int compareTo(coho.common.number.CohoBoolean);
  public double doubleValue();
  public long longValue();
  public coho.common.number.ScaleType type();
  public java.lang.String toString();
  public coho.common.number.CohoBoolean and(coho.common.number.CohoBoolean);
  public coho.common.number.CohoBoolean or(coho.common.number.CohoBoolean);
  public coho.common.number.CohoBoolean not(coho.common.number.CohoBoolean);
  public coho.common.number.CohoBoolean xor(coho.common.number.CohoBoolean);
  public static void main(java.lang.String[]);
  public coho.common.number.ScaleNumber sqrt();
  public coho.common.number.ScaleNumber negate();
  public coho.common.number.ScaleNumber recip();
  public coho.common.number.ScaleNumber abs();
  public coho.common.number.ScaleNumber[] createVector(int);
  public coho.common.number.ScaleNumber[][] createArray(int, int);
  public coho.common.number.BasicScale convert(java.lang.Number);
  public coho.common.number.BasicScale convert(coho.common.number.CohoNumber);
  public coho.common.number.BasicScale random();
  public coho.common.number.BasicScale zero();
  public coho.common.number.BasicScale one();
  public coho.common.number.ScaleNumber random();
  public coho.common.number.ScaleNumber zero();
  public coho.common.number.ScaleNumber one();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  static {};
}
Compiled from "CohoDouble.java"
public class coho.common.number.CohoDouble extends coho.common.number.BasicScale {
  public static final coho.common.number.CohoDouble zero;
  public static final coho.common.number.CohoDouble one;
  public static final coho.common.number.ScaleType type;
  public coho.common.number.CohoDouble(coho.common.number.CohoNumber);
  public coho.common.number.CohoDouble(java.lang.Number);
  public static coho.common.number.CohoDouble create(coho.common.number.CohoNumber);
  public static coho.common.number.CohoDouble create(java.lang.Number);
  public coho.common.number.CohoDouble convert(coho.common.number.CohoNumber);
  public coho.common.number.CohoDouble convert(java.lang.Number);
  public coho.common.number.CohoDouble[][] createArray(int, int);
  public coho.common.number.CohoDouble[] createVector(int);
  public coho.common.number.CohoDouble zero();
  public coho.common.number.CohoDouble one();
  public coho.common.number.CohoDouble random();
  public coho.common.number.CohoDouble abs();
  public coho.common.number.CohoDouble negate();
  public coho.common.number.CohoDouble recip();
  public coho.common.number.CohoDouble sqrt();
  public coho.common.number.CohoDouble add(coho.common.number.CohoDouble);
  public coho.common.number.CohoDouble sub(coho.common.number.CohoDouble);
  public coho.common.number.CohoDouble mult(coho.common.number.CohoDouble);
  public coho.common.number.CohoDouble div(coho.common.number.CohoDouble);
  public coho.common.number.CohoDouble max(coho.common.number.CohoDouble);
  public coho.common.number.CohoDouble min(coho.common.number.CohoDouble);
  public int compareTo(coho.common.number.CohoDouble);
  public long longValue();
  public double doubleValue();
  public coho.common.number.ScaleType type();
  public java.lang.String toString();
  public coho.common.number.ScaleNumber sqrt();
  public coho.common.number.ScaleNumber negate();
  public coho.common.number.ScaleNumber recip();
  public coho.common.number.ScaleNumber abs();
  public coho.common.number.ScaleNumber[] createVector(int);
  public coho.common.number.ScaleNumber[][] createArray(int, int);
  public coho.common.number.BasicScale convert(java.lang.Number);
  public coho.common.number.BasicScale convert(coho.common.number.CohoNumber);
  public coho.common.number.BasicScale random();
  public coho.common.number.BasicScale zero();
  public coho.common.number.BasicScale one();
  public coho.common.number.ScaleNumber random();
  public coho.common.number.ScaleNumber zero();
  public coho.common.number.ScaleNumber one();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  static {};
}
Compiled from "CohoInteger.java"
public class coho.common.number.CohoInteger extends coho.common.number.BasicScale {
  public static final coho.common.number.CohoInteger one;
  public static final coho.common.number.CohoInteger zero;
  public static final coho.common.number.ScaleType type;
  public coho.common.number.CohoInteger(coho.common.number.CohoNumber);
  public coho.common.number.CohoInteger(java.lang.Number);
  public static coho.common.number.CohoInteger create(coho.common.number.CohoNumber);
  public static coho.common.number.CohoInteger create(java.lang.Number);
  public coho.common.number.CohoInteger convert(coho.common.number.CohoNumber);
  public coho.common.number.CohoInteger convert(java.lang.Number);
  public coho.common.number.CohoInteger[][] createArray(int, int);
  public coho.common.number.CohoInteger[] createVector(int);
  public coho.common.number.CohoInteger zero();
  public coho.common.number.CohoInteger one();
  public coho.common.number.CohoInteger random();
  public coho.common.number.CohoInteger abs();
  public coho.common.number.CohoInteger negate();
  public coho.common.number.CohoInteger recip();
  public coho.common.number.CohoInteger sqrt();
  public coho.common.number.CohoInteger add(coho.common.number.CohoInteger);
  public coho.common.number.CohoInteger sub(coho.common.number.CohoInteger);
  public coho.common.number.CohoInteger mult(coho.common.number.CohoInteger);
  public coho.common.number.CohoInteger div(coho.common.number.CohoInteger);
  public coho.common.number.CohoInteger max(coho.common.number.CohoInteger);
  public coho.common.number.CohoInteger min(coho.common.number.CohoInteger);
  public int compareTo(coho.common.number.CohoInteger);
  public long longValue();
  public double doubleValue();
  public coho.common.number.ScaleType type();
  public java.lang.String toString();
  public coho.common.number.ScaleNumber sqrt();
  public coho.common.number.ScaleNumber negate();
  public coho.common.number.ScaleNumber recip();
  public coho.common.number.ScaleNumber abs();
  public coho.common.number.ScaleNumber[] createVector(int);
  public coho.common.number.ScaleNumber[][] createArray(int, int);
  public coho.common.number.BasicScale convert(java.lang.Number);
  public coho.common.number.BasicScale convert(coho.common.number.CohoNumber);
  public coho.common.number.BasicScale random();
  public coho.common.number.BasicScale zero();
  public coho.common.number.BasicScale one();
  public coho.common.number.ScaleNumber random();
  public coho.common.number.ScaleNumber zero();
  public coho.common.number.ScaleNumber one();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  static {};
}
Compiled from "CohoLong.java"
public class coho.common.number.CohoLong extends coho.common.number.BasicScale {
  public static final coho.common.number.CohoLong one;
  public static final coho.common.number.CohoLong zero;
  public static final coho.common.number.ScaleType type;
  public coho.common.number.CohoLong(coho.common.number.CohoNumber);
  public coho.common.number.CohoLong(java.lang.Number);
  public static coho.common.number.CohoLong create(coho.common.number.CohoNumber);
  public static coho.common.number.CohoLong create(java.lang.Number);
  public coho.common.number.CohoLong convert(coho.common.number.CohoNumber);
  public coho.common.number.CohoLong convert(java.lang.Number);
  public coho.common.number.CohoLong[][] createArray(int, int);
  public coho.common.number.CohoLong[] createVector(int);
  public coho.common.number.CohoLong zero();
  public coho.common.number.CohoLong one();
  public coho.common.number.CohoLong random();
  public coho.common.number.CohoLong abs();
  public coho.common.number.CohoLong negate();
  public coho.common.number.CohoLong recip();
  public coho.common.number.CohoLong sqrt();
  public coho.common.number.CohoLong add(coho.common.number.CohoLong);
  public coho.common.number.CohoLong sub(coho.common.number.CohoLong);
  public coho.common.number.CohoLong mult(coho.common.number.CohoLong);
  public coho.common.number.CohoLong div(coho.common.number.CohoLong);
  public coho.common.number.CohoLong max(coho.common.number.CohoLong);
  public coho.common.number.CohoLong min(coho.common.number.CohoLong);
  public int compareTo(coho.common.number.CohoLong);
  public long longValue();
  public double doubleValue();
  public coho.common.number.ScaleType type();
  public java.lang.String toString();
  public coho.common.number.ScaleNumber sqrt();
  public coho.common.number.ScaleNumber negate();
  public coho.common.number.ScaleNumber recip();
  public coho.common.number.ScaleNumber abs();
  public coho.common.number.ScaleNumber[] createVector(int);
  public coho.common.number.ScaleNumber[][] createArray(int, int);
  public coho.common.number.BasicScale convert(java.lang.Number);
  public coho.common.number.BasicScale convert(coho.common.number.CohoNumber);
  public coho.common.number.BasicScale random();
  public coho.common.number.BasicScale zero();
  public coho.common.number.BasicScale one();
  public coho.common.number.ScaleNumber random();
  public coho.common.number.ScaleNumber zero();
  public coho.common.number.ScaleNumber one();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  static {};
}
Compiled from "CohoNumber.java"
public interface coho.common.number.CohoNumber extends java.lang.Comparable<coho.common.number.CohoNumber>, coho.common.number.ErrorAnalysis, coho.common.matrix.ArrayFactory, coho.common.number.Round {
  public abstract boolean booleanValue();
  public abstract byte byteValue();
  public abstract int intValue();
  public abstract short shortValue();
  public abstract long longValue();
  public abstract float floatValue();
  public abstract double doubleValue();
  public abstract coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public abstract coho.common.number.CohoNumber convert(java.lang.Number);
  public abstract coho.common.number.CohoNumber abs();
  public abstract coho.common.number.CohoNumber negate();
  public abstract coho.common.number.CohoNumber recip();
  public abstract coho.common.number.CohoNumber sqrt();
  public abstract coho.common.number.CohoNumber add(coho.common.number.CohoNumber);
  public abstract coho.common.number.CohoNumber add(java.lang.Number);
  public abstract coho.common.number.CohoNumber sub(coho.common.number.CohoNumber);
  public abstract coho.common.number.CohoNumber sub(java.lang.Number);
  public abstract coho.common.number.CohoNumber mult(coho.common.number.CohoNumber);
  public abstract coho.common.number.CohoNumber mult(java.lang.Number);
  public abstract coho.common.number.CohoNumber div(coho.common.number.CohoNumber);
  public abstract coho.common.number.CohoNumber div(java.lang.Number);
  public abstract coho.common.number.CohoNumber max(coho.common.number.CohoNumber);
  public abstract coho.common.number.CohoNumber max(java.lang.Number);
  public abstract coho.common.number.CohoNumber min(coho.common.number.CohoNumber);
  public abstract coho.common.number.CohoNumber min(java.lang.Number);
  public abstract int compareTo(java.lang.Number);
  public abstract boolean eq(coho.common.number.CohoNumber);
  public abstract boolean eq(java.lang.Number);
  public abstract boolean neq(coho.common.number.CohoNumber);
  public abstract boolean neq(java.lang.Number);
  public abstract boolean greater(coho.common.number.CohoNumber);
  public abstract boolean greater(java.lang.Number);
  public abstract boolean geq(coho.common.number.CohoNumber);
  public abstract boolean geq(java.lang.Number);
  public abstract boolean less(coho.common.number.CohoNumber);
  public abstract boolean less(java.lang.Number);
  public abstract boolean leq(coho.common.number.CohoNumber);
  public abstract boolean leq(java.lang.Number);
  public abstract coho.common.number.CohoNumber one();
  public abstract coho.common.number.CohoNumber zero();
  public abstract coho.common.number.CohoNumber random();
  public abstract coho.common.number.CohoType type();
}
Compiled from "CohoNumber.java"
public final class coho.common.number.CohoNumber$ArithOp extends java.lang.Enum<coho.common.number.CohoNumber$ArithOp> {
  public static final coho.common.number.CohoNumber$ArithOp ABS;
  public static final coho.common.number.CohoNumber$ArithOp NEGATE;
  public static final coho.common.number.CohoNumber$ArithOp RECIP;
  public static final coho.common.number.CohoNumber$ArithOp SQRT;
  public static final coho.common.number.CohoNumber$ArithOp ADD;
  public static final coho.common.number.CohoNumber$ArithOp SUB;
  public static final coho.common.number.CohoNumber$ArithOp MULT;
  public static final coho.common.number.CohoNumber$ArithOp DIV;
  public static final coho.common.number.CohoNumber$ArithOp MAX;
  public static final coho.common.number.CohoNumber$ArithOp MIN;
  public static final coho.common.number.CohoNumber$ArithOp CMP;
  public static coho.common.number.CohoNumber$ArithOp[] values();
  public static coho.common.number.CohoNumber$ArithOp valueOf(java.lang.String);
  static {};
}
Compiled from "CohoType.java"
public interface coho.common.number.CohoType {
  public abstract coho.common.number.CohoType promote(coho.common.number.CohoType);
  public abstract java.lang.Class classType();
  public abstract java.lang.String name();
  public abstract coho.common.number.CohoNumber zero();
  public abstract coho.common.number.CohoNumber one();
}
Compiled from "DoubleInterval.java"
public class coho.common.number.DoubleInterval extends coho.common.number.BasicInterval {
  public static final coho.common.number.DoubleInterval zero;
  public static final coho.common.number.DoubleInterval one;
  protected static final double ulp;
  public static final coho.common.number.IntervalType type;
  public coho.common.number.CohoDouble lo();
  public coho.common.number.CohoDouble hi();
  public coho.common.number.CohoDouble x();
  public coho.common.number.CohoDouble e();
  public coho.common.number.DoubleInterval(coho.common.number.CohoNumber);
  public coho.common.number.DoubleInterval(java.lang.Number);
  public coho.common.number.DoubleInterval(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.DoubleInterval(java.lang.Number, java.lang.Number);
  public static coho.common.number.DoubleInterval create(coho.common.number.CohoNumber);
  public static coho.common.number.DoubleInterval create(java.lang.Number);
  public static coho.common.number.DoubleInterval create(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public static coho.common.number.DoubleInterval create(java.lang.Number, java.lang.Number);
  public coho.common.number.DoubleInterval convert(coho.common.number.CohoNumber);
  public coho.common.number.DoubleInterval convert(java.lang.Number);
  public coho.common.number.DoubleInterval convert(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.DoubleInterval convert(java.lang.Number, java.lang.Number);
  public coho.common.number.DoubleInterval[][] createArray(int, int);
  public coho.common.number.DoubleInterval[] createVector(int);
  public coho.common.number.DoubleInterval zero();
  public coho.common.number.DoubleInterval one();
  public coho.common.number.DoubleInterval random();
  protected static double ulp();
  public static double ulp(double);
  public static void main(java.lang.String[]);
  public coho.common.number.DoubleInterval abs();
  public coho.common.number.DoubleInterval negate();
  public coho.common.number.DoubleInterval recip();
  public coho.common.number.DoubleInterval sqrt();
  public coho.common.number.DoubleInterval add(coho.common.number.DoubleInterval);
  public coho.common.number.DoubleInterval sub(coho.common.number.DoubleInterval);
  public coho.common.number.DoubleInterval mult(coho.common.number.DoubleInterval);
  public coho.common.number.DoubleInterval div(coho.common.number.DoubleInterval);
  public coho.common.number.DoubleInterval max(coho.common.number.DoubleInterval);
  public coho.common.number.DoubleInterval min(coho.common.number.DoubleInterval);
  public int compareTo(coho.common.number.DoubleInterval);
  public coho.common.number.IntervalType type();
  public coho.common.number.IntervalNumber sqrt();
  public coho.common.number.IntervalNumber recip();
  public coho.common.number.IntervalNumber negate();
  public coho.common.number.IntervalNumber abs();
  public coho.common.number.IntervalNumber random();
  public coho.common.number.IntervalNumber zero();
  public coho.common.number.IntervalNumber one();
  public coho.common.number.IntervalNumber[] createVector(int);
  public coho.common.number.IntervalNumber[][] createArray(int, int);
  public coho.common.number.IntervalNumber convert(java.lang.Number);
  public coho.common.number.IntervalNumber convert(coho.common.number.CohoNumber);
  public coho.common.number.ScaleNumber e();
  public coho.common.number.ScaleNumber x();
  public coho.common.number.ScaleNumber hi();
  public coho.common.number.ScaleNumber lo();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  static {};
}
Compiled from "ErrorAnalysis.java"
public interface coho.common.number.ErrorAnalysis {
  public abstract coho.common.number.ScaleNumber scale();
  public abstract coho.common.number.ScaleNumber error();
}
Compiled from "IntegerInterval.java"
public class coho.common.number.IntegerInterval extends coho.common.number.BasicInterval {
  public static final coho.common.number.IntegerInterval zero;
  public static final coho.common.number.IntegerInterval one;
  public static final coho.common.number.IntervalType type;
  public coho.common.number.CohoInteger lo();
  public coho.common.number.CohoInteger hi();
  public coho.common.number.CohoInteger x();
  public coho.common.number.CohoInteger e();
  public coho.common.number.IntegerInterval(coho.common.number.CohoNumber);
  public coho.common.number.IntegerInterval(java.lang.Number);
  public coho.common.number.IntegerInterval(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.IntegerInterval(java.lang.Number, java.lang.Number);
  public static coho.common.number.IntegerInterval create(coho.common.number.CohoNumber);
  public static coho.common.number.IntegerInterval create(java.lang.Number);
  public static coho.common.number.IntegerInterval create(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public static coho.common.number.IntegerInterval create(java.lang.Number, java.lang.Number);
  public coho.common.number.IntegerInterval convert(coho.common.number.CohoNumber);
  public coho.common.number.IntegerInterval convert(java.lang.Number);
  public coho.common.number.IntegerInterval convert(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.IntegerInterval convert(java.lang.Number, java.lang.Number);
  public coho.common.number.IntegerInterval[][] createArray(int, int);
  public coho.common.number.IntegerInterval[] createVector(int);
  public coho.common.number.IntegerInterval zero();
  public coho.common.number.IntegerInterval one();
  public coho.common.number.IntegerInterval random();
  public coho.common.number.IntegerInterval abs();
  public coho.common.number.IntegerInterval negate();
  public coho.common.number.IntegerInterval recip();
  public coho.common.number.IntegerInterval sqrt();
  public coho.common.number.IntegerInterval add(coho.common.number.IntegerInterval);
  public coho.common.number.IntegerInterval sub(coho.common.number.IntegerInterval);
  public coho.common.number.IntegerInterval mult(coho.common.number.IntegerInterval);
  public coho.common.number.IntegerInterval div(coho.common.number.IntegerInterval);
  public coho.common.number.IntegerInterval max(coho.common.number.IntegerInterval);
  public coho.common.number.IntegerInterval min(coho.common.number.IntegerInterval);
  public int compareTo(coho.common.number.IntegerInterval);
  public coho.common.number.IntervalType type();
  public coho.common.number.IntervalNumber sqrt();
  public coho.common.number.IntervalNumber recip();
  public coho.common.number.IntervalNumber negate();
  public coho.common.number.IntervalNumber abs();
  public coho.common.number.IntervalNumber random();
  public coho.common.number.IntervalNumber zero();
  public coho.common.number.IntervalNumber one();
  public coho.common.number.IntervalNumber[] createVector(int);
  public coho.common.number.IntervalNumber[][] createArray(int, int);
  public coho.common.number.IntervalNumber convert(java.lang.Number);
  public coho.common.number.IntervalNumber convert(coho.common.number.CohoNumber);
  public coho.common.number.ScaleNumber e();
  public coho.common.number.ScaleNumber x();
  public coho.common.number.ScaleNumber hi();
  public coho.common.number.ScaleNumber lo();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  static {};
}
Compiled from "IntervalNumber.java"
public interface coho.common.number.IntervalNumber extends coho.common.number.CohoNumber {
  public abstract coho.common.number.ScaleNumber hi();
  public abstract coho.common.number.ScaleNumber lo();
  public abstract coho.common.number.ScaleNumber e();
  public abstract coho.common.number.ScaleNumber x();
  public abstract coho.common.number.IntervalNumber abs();
  public abstract coho.common.number.IntervalNumber negate();
  public abstract coho.common.number.IntervalNumber recip();
  public abstract coho.common.number.IntervalNumber sqrt();
  public abstract coho.common.number.IntervalNumber add(coho.common.number.IntervalNumber);
  public abstract coho.common.number.IntervalNumber add(java.lang.Number);
  public abstract coho.common.number.IntervalNumber sub(coho.common.number.IntervalNumber);
  public abstract coho.common.number.IntervalNumber sub(java.lang.Number);
  public abstract coho.common.number.IntervalNumber mult(coho.common.number.IntervalNumber);
  public abstract coho.common.number.IntervalNumber mult(java.lang.Number);
  public abstract coho.common.number.IntervalNumber div(coho.common.number.IntervalNumber);
  public abstract coho.common.number.IntervalNumber div(java.lang.Number);
  public abstract coho.common.number.IntervalNumber max(coho.common.number.IntervalNumber);
  public abstract coho.common.number.IntervalNumber max(java.lang.Number);
  public abstract coho.common.number.IntervalNumber min(coho.common.number.IntervalNumber);
  public abstract coho.common.number.IntervalNumber min(java.lang.Number);
  public abstract coho.common.number.IntervalNumber one();
  public abstract coho.common.number.IntervalNumber zero();
  public abstract coho.common.number.IntervalNumber random();
  public abstract coho.common.number.IntervalType type();
  public abstract boolean isScale();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber min(java.lang.Number);
  public coho.common.number.CohoNumber max(java.lang.Number);
  public coho.common.number.CohoNumber div(java.lang.Number);
  public coho.common.number.CohoNumber mult(java.lang.Number);
  public coho.common.number.CohoNumber sub(java.lang.Number);
  public coho.common.number.CohoNumber add(java.lang.Number);
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
}
Compiled from "IntervalType.java"
public class coho.common.number.IntervalType extends coho.common.number.BasicType {
  public coho.common.number.IntervalType(java.lang.Class, coho.common.number.IntervalNumber, coho.common.number.IntervalNumber);
  public coho.common.number.IntervalNumber zero();
  public coho.common.number.IntervalNumber one();
  public coho.common.number.IntervalType promote(coho.common.number.IntervalType);
  public static coho.common.number.IntervalType promote(coho.common.number.ScaleType);
  public static coho.common.number.IntervalNumber promote(coho.common.number.ScaleNumber);
  public static coho.common.number.IntervalNumber promote(java.lang.Number);
  public static coho.common.number.IntervalNumber[] promote(coho.common.number.IntervalNumber, coho.common.number.IntervalNumber);
  public static coho.common.number.IntervalNumber[] promote(coho.common.number.IntervalNumber, coho.common.number.ScaleNumber);
  public static coho.common.number.IntervalNumber[] promote(coho.common.number.IntervalNumber, java.lang.Number);
  public static coho.common.number.IntervalNumber promoteOp(coho.common.number.IntervalNumber, coho.common.number.IntervalNumber, coho.common.number.CohoNumber$ArithOp);
  public static coho.common.number.IntervalNumber promoteOp(coho.common.number.IntervalNumber, java.lang.Number, coho.common.number.CohoNumber$ArithOp);
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber zero();
  static {};
}
Compiled from "IntervalType.java"
class coho.common.number.IntervalType$1 {
  static final int[] $SwitchMap$coho$common$number$CohoNumber$ArithOp;
  static {};
}
Compiled from "InvalidIntervalException.java"
public class coho.common.number.InvalidIntervalException extends java.lang.ArithmeticException {
  public coho.common.number.InvalidIntervalException();
  public coho.common.number.InvalidIntervalException(java.lang.String);
}
Compiled from "LongInterval.java"
public class coho.common.number.LongInterval extends coho.common.number.BasicInterval {
  public static final coho.common.number.LongInterval zero;
  public static final coho.common.number.LongInterval one;
  public static final coho.common.number.IntervalType type;
  public coho.common.number.CohoLong lo();
  public coho.common.number.CohoLong hi();
  public coho.common.number.CohoLong x();
  public coho.common.number.CohoLong e();
  public coho.common.number.LongInterval(coho.common.number.CohoNumber);
  public coho.common.number.LongInterval(java.lang.Number);
  public coho.common.number.LongInterval(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.LongInterval(java.lang.Number, java.lang.Number);
  public static coho.common.number.LongInterval create(coho.common.number.CohoNumber);
  public static coho.common.number.LongInterval create(java.lang.Number);
  public static coho.common.number.LongInterval create(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public static coho.common.number.LongInterval create(java.lang.Number, java.lang.Number);
  public coho.common.number.LongInterval convert(coho.common.number.CohoNumber);
  public coho.common.number.LongInterval convert(java.lang.Number);
  public coho.common.number.LongInterval convert(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.common.number.LongInterval convert(java.lang.Number, java.lang.Number);
  public coho.common.number.LongInterval[][] createArray(int, int);
  public coho.common.number.LongInterval[] createVector(int);
  public coho.common.number.LongInterval zero();
  public coho.common.number.LongInterval one();
  public coho.common.number.LongInterval random();
  public coho.common.number.LongInterval abs();
  public coho.common.number.LongInterval negate();
  public coho.common.number.LongInterval recip();
  public coho.common.number.LongInterval sqrt();
  public coho.common.number.LongInterval add(coho.common.number.LongInterval);
  public coho.common.number.LongInterval sub(coho.common.number.LongInterval);
  public coho.common.number.LongInterval mult(coho.common.number.LongInterval);
  public coho.common.number.LongInterval div(coho.common.number.LongInterval);
  public coho.common.number.LongInterval max(coho.common.number.LongInterval);
  public coho.common.number.LongInterval min(coho.common.number.LongInterval);
  public int compareTo(coho.common.number.LongInterval);
  public coho.common.number.IntervalType type();
  public coho.common.number.IntervalNumber sqrt();
  public coho.common.number.IntervalNumber recip();
  public coho.common.number.IntervalNumber negate();
  public coho.common.number.IntervalNumber abs();
  public coho.common.number.IntervalNumber random();
  public coho.common.number.IntervalNumber zero();
  public coho.common.number.IntervalNumber one();
  public coho.common.number.IntervalNumber[] createVector(int);
  public coho.common.number.IntervalNumber[][] createArray(int, int);
  public coho.common.number.IntervalNumber convert(java.lang.Number);
  public coho.common.number.IntervalNumber convert(coho.common.number.CohoNumber);
  public coho.common.number.ScaleNumber e();
  public coho.common.number.ScaleNumber x();
  public coho.common.number.ScaleNumber hi();
  public coho.common.number.ScaleNumber lo();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
  public coho.common.number.CohoNumber convert(java.lang.Number);
  public coho.common.number.CohoNumber convert(coho.common.number.CohoNumber);
  public java.lang.Object[] createVector(int);
  public java.lang.Object[][] createArray(int, int);
  public coho.common.number.CohoNumber[] createVector(int);
  public coho.common.number.CohoNumber[][] createArray(int, int);
  static {};
}
Compiled from "NotcomparableIntervalException.java"
public class coho.common.number.NotcomparableIntervalException extends java.lang.ArithmeticException {
  public coho.common.number.NotcomparableIntervalException();
  public coho.common.number.NotcomparableIntervalException(java.lang.String);
}
Compiled from "Round.java"
public interface coho.common.number.Round {
  public abstract double doubleValue(coho.common.number.Round$ROUNDMODE);
}
Compiled from "Round.java"
public final class coho.common.number.Round$ROUNDMODE extends java.lang.Enum<coho.common.number.Round$ROUNDMODE> {
  public static final coho.common.number.Round$ROUNDMODE CEIL;
  public static final coho.common.number.Round$ROUNDMODE FLOOR;
  public static final coho.common.number.Round$ROUNDMODE NEAR;
  public static final coho.common.number.Round$ROUNDMODE ZERO;
  public static coho.common.number.Round$ROUNDMODE[] values();
  public static coho.common.number.Round$ROUNDMODE valueOf(java.lang.String);
  static {};
}
Compiled from "ScaleNumber.java"
public interface coho.common.number.ScaleNumber extends coho.common.number.CohoNumber {
  public abstract coho.common.number.ScaleNumber abs();
  public abstract coho.common.number.ScaleNumber negate();
  public abstract coho.common.number.ScaleNumber recip();
  public abstract coho.common.number.ScaleNumber sqrt();
  public abstract coho.common.number.ScaleNumber add(coho.common.number.ScaleNumber);
  public abstract coho.common.number.ScaleNumber add(java.lang.Number);
  public abstract coho.common.number.ScaleNumber sub(coho.common.number.ScaleNumber);
  public abstract coho.common.number.ScaleNumber sub(java.lang.Number);
  public abstract coho.common.number.ScaleNumber mult(coho.common.number.ScaleNumber);
  public abstract coho.common.number.ScaleNumber mult(java.lang.Number);
  public abstract coho.common.number.ScaleNumber div(coho.common.number.ScaleNumber);
  public abstract coho.common.number.ScaleNumber div(java.lang.Number);
  public abstract coho.common.number.ScaleNumber max(coho.common.number.ScaleNumber);
  public abstract coho.common.number.ScaleNumber max(java.lang.Number);
  public abstract coho.common.number.ScaleNumber min(coho.common.number.ScaleNumber);
  public abstract coho.common.number.ScaleNumber min(java.lang.Number);
  public abstract coho.common.number.ScaleNumber one();
  public abstract coho.common.number.ScaleNumber zero();
  public abstract coho.common.number.ScaleNumber random();
  public abstract coho.common.number.ScaleType type();
  public coho.common.number.CohoType type();
  public coho.common.number.CohoNumber random();
  public coho.common.number.CohoNumber zero();
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber min(java.lang.Number);
  public coho.common.number.CohoNumber max(java.lang.Number);
  public coho.common.number.CohoNumber div(java.lang.Number);
  public coho.common.number.CohoNumber mult(java.lang.Number);
  public coho.common.number.CohoNumber sub(java.lang.Number);
  public coho.common.number.CohoNumber add(java.lang.Number);
  public coho.common.number.CohoNumber sqrt();
  public coho.common.number.CohoNumber recip();
  public coho.common.number.CohoNumber negate();
  public coho.common.number.CohoNumber abs();
}
Compiled from "ScaleType.java"
public class coho.common.number.ScaleType extends coho.common.number.BasicType {
  public coho.common.number.ScaleType(java.lang.Class, coho.common.number.ScaleNumber, coho.common.number.ScaleNumber);
  public coho.common.number.ScaleNumber zero();
  public coho.common.number.ScaleNumber one();
  public coho.common.number.ScaleType promote(coho.common.number.ScaleType);
  public static coho.common.number.ScaleNumber[] promote(coho.common.number.ScaleNumber, coho.common.number.ScaleNumber);
  public static coho.common.number.ScaleNumber[] promote(coho.common.number.ScaleNumber, java.lang.Number);
  public static coho.common.number.ScaleNumber promote(java.lang.Number);
  public static coho.common.number.ScaleNumber promoteOp(coho.common.number.ScaleNumber, coho.common.number.ScaleNumber, coho.common.number.CohoNumber$ArithOp);
  public static coho.common.number.ScaleNumber promoteOp(coho.common.number.ScaleNumber, java.lang.Number, coho.common.number.CohoNumber$ArithOp);
  public coho.common.number.CohoNumber one();
  public coho.common.number.CohoNumber zero();
  static {};
}
Compiled from "ScaleType.java"
class coho.common.number.ScaleType$1 {
  static final int[] $SwitchMap$coho$common$number$CohoNumber$ArithOp;
  static {};
}
Compiled from "Test.java"
public class coho.common.number.Test {
  public static coho.common.number.Test$NumberTest promoteTest;
  public static coho.common.number.Test$NumberTest scaleTest;
  public static coho.common.number.Test$NumberTest intervalTest;
  public coho.common.number.Test();
  public static void main(java.lang.String[]);
  static void access$000(coho.common.number.CohoNumber, coho.common.number.CohoNumber, coho.common.number.CohoNumber$ArithOp);
  static void access$100(coho.common.number.CohoNumber, java.lang.Number, coho.common.number.CohoNumber$ArithOp);
  static void access$200(coho.common.number.CohoNumber, coho.common.number.CohoNumber$ArithOp);
  static {};
}
Compiled from "Test.java"
final class coho.common.number.Test$1 implements coho.common.number.Test$NumberTest {
  coho.common.number.Test$1();
  public boolean test();
}
Compiled from "Test.java"
final class coho.common.number.Test$2 implements coho.common.number.Test$NumberTest {
  coho.common.number.Test$2();
  public boolean test();
}
Compiled from "Test.java"
final class coho.common.number.Test$3 implements coho.common.number.Test$NumberTest {
  coho.common.number.Test$3();
  public boolean test();
}
Compiled from "Test.java"
class coho.common.number.Test$4 {
  static final int[] $SwitchMap$coho$common$number$CohoNumber$ArithOp;
  static {};
}
Compiled from "Test.java"
interface coho.common.number.Test$NumberTest {
  public abstract boolean test();
}
Compiled from "Configure.java"
public interface coho.common.util.Configure {
  public static final long serialVersionUIDPrefix;
}
Compiled from "MoreLong.java"
public class coho.common.util.MoreLong {
  public coho.common.util.MoreLong();
  public static java.lang.String toHexString(long);
}
Compiled from "MoreString.java"
public class coho.common.util.MoreString {
  public coho.common.util.MoreString();
  public static java.lang.String multiply(java.lang.String, int);
}
Compiled from "CohoDebug.java"
public interface coho.debug.CohoDebug {
  public abstract java.lang.String toCode();
}
Compiled from "DEBUG.java"
public class coho.debug.DEBUG {
  public static final boolean debug;
  public coho.debug.DEBUG();
  public static java.lang.String commentOut(java.lang.String);
  public static void print(java.lang.String);
  public static void print(boolean, java.lang.String);
  public static void println(java.lang.String);
  public static void println(boolean, java.lang.String);
  public static void println(java.lang.String, java.lang.String);
  public static void println(boolean, java.lang.String, java.lang.String);
  public static java.lang.String readLine();
  public static int readInt(java.lang.String);
  public static double readDouble(java.lang.String);
  public static java.lang.String toString(double[]);
  public static java.lang.String toHexString(double[]);
  public static java.lang.String toHexString(double);
  public static java.lang.String toString(int[]);
}
Compiled from "RandomDebug.java"
public class coho.debug.RandomDebug {
  public static boolean debug;
  public static int counter;
  public coho.debug.RandomDebug();
  public static void println(java.lang.String);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "STAT.java"
public class coho.debug.STAT {
  public static final boolean stat;
  public static int[] lpResult;
  public static int[] path;
  public static int basisCounter;
  public static int feasibleBasisCounter;
  public static int[] condNumber;
  public static int[] interval;
  public static int[] findBasis;
  public static int stepLP;
  public static int stepException;
  public static int lsCounter;
  public static int lsHybridCounter;
  public coho.debug.STAT();
  public static void println(java.lang.String);
  public static void outStat();
  public static void outStepStat(int);
  public static void statLP(coho.lp.solver.CohoSolverResult, boolean);
  public static void statLPPath(int);
  public static void statIllCond(int, double);
  public static void statLS(int);
  static {};
}
Compiled from "Test.java"
public class coho.debug.Test {
  public int a;
  public coho.debug.Test();
  public static void main(java.lang.String[]);
}
Compiled from "GeomException.java"
public class coho.geom.GeomException extends java.lang.RuntimeException {
  public coho.geom.GeomException();
  public coho.geom.GeomException(java.lang.String, java.lang.Throwable);
  public coho.geom.GeomException(java.lang.String);
  public coho.geom.GeomException(java.lang.Throwable);
}
Compiled from "GeomObj.java"
public interface coho.geom.GeomObj {
}
Compiled from "BoundingBox.java"
public class coho.geom.twodim.BoundingBox implements coho.geom.twodim.GeomObj2, java.lang.Comparable<coho.geom.twodim.BoundingBox> {
  public coho.common.number.CohoType type();
  public coho.geom.twodim.BoundingBox(coho.geom.twodim.Point, coho.geom.twodim.Point);
  public static coho.geom.twodim.BoundingBox create(coho.geom.twodim.Point, coho.geom.twodim.Point);
  public coho.geom.twodim.Point ll();
  public coho.geom.twodim.Point ur();
  public coho.geom.twodim.Point lr();
  public coho.geom.twodim.Point ul();
  public coho.geom.twodim.BoundingBox bbox();
  public coho.geom.twodim.BoundingBox translate(coho.geom.twodim.Point);
  public coho.geom.twodim.BoundingBox transpose();
  public coho.geom.twodim.BoundingBox negate();
  public coho.geom.twodim.GeomObj2 intersect(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.BoundingBox union(coho.geom.twodim.GeomObj2);
  public boolean contains(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.BoundingBox[] split();
  public int compareTo(coho.geom.twodim.BoundingBox);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean isPoint();
  public boolean isSegment();
  public coho.geom.twodim.BoundingBox specifyType(coho.common.number.CohoType);
  public double maxError();
  public java.lang.String toString();
  public static void main(java.lang.String[]);
  public coho.geom.twodim.GeomObj2 union(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.GeomObj2 transpose();
  public coho.geom.twodim.GeomObj2 negate();
  public coho.geom.twodim.GeomObj2 translate(coho.geom.twodim.Point);
  public coho.geom.twodim.GeomObj2 specifyType(coho.common.number.CohoType);
  public int compareTo(java.lang.Object);
}
Compiled from "ConvexPolygon.java"
public class coho.geom.twodim.ConvexPolygon extends coho.geom.twodim.SimplePolygon {
  public coho.geom.twodim.ConvexPolygon(coho.geom.twodim.Point[]);
  public coho.geom.twodim.ConvexPolygon(coho.geom.twodim.Point[], boolean);
  public coho.geom.twodim.ConvexPolygon(java.util.Collection<coho.geom.twodim.Point>);
  public coho.geom.twodim.ConvexPolygon(java.util.Collection<coho.geom.twodim.Point>, boolean);
  public coho.geom.twodim.ConvexPolygon(coho.geom.twodim.SimplePolygon);
  public coho.geom.twodim.ConvexPolygon(coho.geom.twodim.SimplePolygon, boolean);
  public static boolean isConvex(coho.geom.twodim.SimplePolygon);
  public coho.geom.twodim.ConvexPolygon intersect(coho.geom.twodim.ConvexPolygon);
  public coho.geom.twodim.ConvexPolygon intersect(coho.geom.twodim.ConvexPolygon, coho.geom.twodim.ConvexPolygon);
  public coho.geom.twodim.SimplePolygon union(coho.geom.twodim.ConvexPolygon);
  public static coho.geom.twodim.SimplePolygon union(coho.geom.twodim.ConvexPolygon, coho.geom.twodim.ConvexPolygon);
  public static coho.geom.twodim.SimplePolygon union(java.util.Collection<coho.geom.twodim.ConvexPolygon>);
  public coho.geom.twodim.ConvexPolygon reduce(coho.geom.twodim.Polygon$EndCondition);
  public coho.geom.twodim.ConvexPolygon specifyType(coho.common.number.CohoType);
  public boolean contains(coho.geom.twodim.SimplePolygon);
  public static void main(java.lang.String[]);
  public coho.geom.twodim.SimplePolygon specifyType(coho.common.number.CohoType);
  public coho.geom.twodim.SimplePolygon reduce(coho.geom.twodim.Polygon$EndCondition);
  public coho.geom.twodim.Polygon reduce(coho.geom.twodim.Polygon$EndCondition);
  public coho.geom.twodim.Polygon specifyType(coho.common.number.CohoType);
  public coho.geom.twodim.GeomObj2 specifyType(coho.common.number.CohoType);
}
Compiled from "DataTypeInterface.java"
interface coho.geom.twodim.DataTypeInterface {
  public abstract coho.geom.twodim.GeomObj2 specifyType(coho.common.number.CohoType);
  public abstract coho.common.number.CohoType type();
  public abstract double maxError();
}
Compiled from "Empty.java"
public class coho.geom.twodim.Empty implements coho.geom.twodim.GeomObj2 {
  public coho.common.number.CohoType type();
  public static coho.geom.twodim.Empty instance();
  public coho.geom.twodim.BoundingBox bbox();
  public coho.geom.twodim.Empty translate(coho.geom.twodim.Point);
  public coho.geom.twodim.Empty negate();
  public coho.geom.twodim.Empty transpose();
  public coho.geom.twodim.Empty intersect(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.Empty union(coho.geom.twodim.GeomObj2);
  public boolean contains(coho.geom.twodim.GeomObj2);
  public java.lang.String toString();
  public coho.geom.twodim.Empty specifyType(coho.common.number.CohoType);
  public double maxError();
  public static void main(java.lang.String[]);
  public coho.geom.twodim.GeomObj2 union(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.GeomObj2 intersect(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.GeomObj2 transpose();
  public coho.geom.twodim.GeomObj2 negate();
  public coho.geom.twodim.GeomObj2 translate(coho.geom.twodim.Point);
  public coho.geom.twodim.GeomObj2 specifyType(coho.common.number.CohoType);
  static {};
}
Compiled from "GeomObj2.java"
public interface coho.geom.twodim.GeomObj2 extends coho.geom.GeomObj,coho.geom.twodim.DataTypeInterface {
  public static final coho.geom.twodim.GeomObj2$RoundMode roundMode;
  public static final double eps;
  public static final double eps2;
  public abstract coho.geom.twodim.BoundingBox bbox();
  public abstract coho.geom.twodim.GeomObj2 translate(coho.geom.twodim.Point);
  public abstract coho.geom.twodim.GeomObj2 negate();
  public abstract coho.geom.twodim.GeomObj2 transpose();
  public abstract coho.geom.twodim.GeomObj2 intersect(coho.geom.twodim.GeomObj2);
  public abstract coho.geom.twodim.GeomObj2 union(coho.geom.twodim.GeomObj2);
  public abstract boolean contains(coho.geom.twodim.GeomObj2);
  static {};
}
Compiled from "GeomObj2.java"
public final class coho.geom.twodim.GeomObj2$RoundMode extends java.lang.Enum<coho.geom.twodim.GeomObj2$RoundMode> {
  public static final coho.geom.twodim.GeomObj2$RoundMode MIDDLE;
  public static final coho.geom.twodim.GeomObj2$RoundMode LARGE;
  public static final coho.geom.twodim.GeomObj2$RoundMode SMALL;
  public static final coho.geom.twodim.GeomObj2$RoundMode CENTER;
  public static coho.geom.twodim.GeomObj2$RoundMode[] values();
  public static coho.geom.twodim.GeomObj2$RoundMode valueOf(java.lang.String);
  static {};
}
Compiled from "Line.java"
public class coho.geom.twodim.Line implements coho.geom.twodim.GeomObj2 {
  public coho.common.number.CohoNumber A();
  public coho.common.number.CohoNumber B();
  public coho.common.number.CohoNumber C();
  public coho.common.number.CohoType type();
  public coho.geom.twodim.Line(coho.common.number.CohoNumber, coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.geom.twodim.Line(coho.common.number.ScaleNumber, coho.common.number.ScaleNumber, coho.common.number.ScaleNumber);
  public coho.geom.twodim.Line(double, double, double);
  public coho.geom.twodim.Line(int, coho.common.number.ScaleNumber, coho.common.number.ScaleNumber);
  public coho.geom.twodim.Line(int, double, double);
  public boolean similar(coho.geom.twodim.Line);
  public java.lang.String toString();
  public coho.geom.twodim.Line specifyType(coho.common.number.CohoType);
  public double maxError();
  public coho.geom.twodim.BoundingBox bbox();
  public boolean contains(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.GeomObj2 intersect(coho.geom.twodim.GeomObj2);
  protected coho.geom.twodim.GeomObj2 intersectPlane(coho.geom.twodim.Line);
  public coho.geom.twodim.GeomObj2 negate();
  public coho.geom.twodim.GeomObj2 translate(coho.geom.twodim.Point);
  public coho.geom.twodim.GeomObj2 transpose();
  public coho.geom.twodim.GeomObj2 union(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.GeomObj2 specifyType(coho.common.number.CohoType);
}
Compiled from "Point.java"
public class coho.geom.twodim.Point implements coho.geom.twodim.GeomObj2, java.lang.Comparable<coho.geom.twodim.Point> {
  public double doubleX();
  public double doubleY();
  public coho.common.number.CohoNumber x();
  public coho.common.number.CohoNumber y();
  public coho.common.number.CohoType type();
  public coho.geom.twodim.Point(coho.common.number.ScaleNumber, coho.common.number.ScaleNumber);
  public coho.geom.twodim.Point(java.lang.Number, java.lang.Number);
  protected coho.geom.twodim.Point(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public coho.geom.twodim.Point(coho.geom.twodim.Point);
  public static coho.geom.twodim.Point create(coho.common.number.ScaleNumber, coho.common.number.ScaleNumber);
  public static coho.geom.twodim.Point create(java.lang.Number, java.lang.Number);
  protected static coho.geom.twodim.Point create(coho.common.number.CohoNumber, coho.common.number.CohoNumber);
  public static coho.geom.twodim.Point create(coho.geom.twodim.Point);
  public coho.geom.twodim.BoundingBox bbox();
  public coho.geom.twodim.Point negate();
  public coho.geom.twodim.Point translate(coho.geom.twodim.Point);
  public coho.geom.twodim.Point transpose();
  public coho.geom.twodim.Point min(coho.geom.twodim.Point);
  public coho.geom.twodim.Point max(coho.geom.twodim.Point);
  public int compareTo(coho.geom.twodim.Point);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public coho.geom.twodim.GeomObj2 intersect(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.GeomObj2 union(coho.geom.twodim.GeomObj2);
  public boolean contains(coho.geom.twodim.GeomObj2);
  public java.lang.String toString();
  public coho.geom.twodim.Point specifyType(coho.common.number.CohoType);
  public double maxError();
  public static boolean isLeftTurn(coho.geom.twodim.Point, coho.geom.twodim.Point, coho.geom.twodim.Point);
  public static boolean isRightTurn(coho.geom.twodim.Point, coho.geom.twodim.Point, coho.geom.twodim.Point);
  public static boolean isStraight(coho.geom.twodim.Point, coho.geom.twodim.Point, coho.geom.twodim.Point);
  public static void main(java.lang.String[]);
  public coho.geom.twodim.GeomObj2 transpose();
  public coho.geom.twodim.GeomObj2 negate();
  public coho.geom.twodim.GeomObj2 translate(coho.geom.twodim.Point);
  public coho.geom.twodim.GeomObj2 specifyType(coho.common.number.CohoType);
  public int compareTo(java.lang.Object);
}
Compiled from "Polygon.java"
public interface coho.geom.twodim.Polygon extends coho.geom.twodim.GeomObj2 {
  public abstract int degree();
  public abstract coho.common.number.CohoNumber area();
  public abstract coho.common.number.CohoNumber perimeter();
  public abstract coho.geom.twodim.Point[] points();
  public abstract coho.geom.twodim.Point point(int);
  public abstract coho.geom.twodim.Segment[] edges();
  public abstract coho.geom.twodim.Segment edge(int);
  public abstract int llPos();
  public abstract coho.geom.twodim.GeomObj2 intersect(coho.geom.twodim.GeomObj2);
  public abstract coho.geom.twodim.Polygon intersect(coho.geom.twodim.Polygon);
  public abstract coho.geom.twodim.GeomObj2 union(coho.geom.twodim.GeomObj2);
  public abstract coho.geom.twodim.Polygon union(coho.geom.twodim.Polygon);
  public abstract coho.geom.twodim.Polygon union(coho.geom.twodim.Polygon[]);
  public abstract coho.geom.twodim.ConvexPolygon convexHull();
  public abstract coho.geom.twodim.Polygon specifyType(coho.common.number.CohoType);
  public abstract coho.geom.twodim.Polygon reduce(coho.geom.twodim.Polygon$EndCondition);
  public abstract coho.geom.twodim.Polygon reduce(coho.geom.twodim.Polygon$EndCondition, boolean, boolean);
  public coho.geom.twodim.GeomObj2 specifyType(coho.common.number.CohoType);
}
Compiled from "Polygon.java"
public class coho.geom.twodim.Polygon$CostEndCondition implements coho.geom.twodim.Polygon$EndCondition {
  public coho.geom.twodim.Polygon$CostEndCondition();
  public coho.geom.twodim.Polygon$CostEndCondition(double);
  public boolean cond(double, int, double, int);
  public double errtol();
}
Compiled from "Polygon.java"
public class coho.geom.twodim.Polygon$DegreeEndCondition implements coho.geom.twodim.Polygon$EndCondition {
  public coho.geom.twodim.Polygon$DegreeEndCondition(int);
  public boolean cond(double, int, double, int);
  public int degree();
}
Compiled from "Polygon.java"
public interface coho.geom.twodim.Polygon$EndCondition {
  public abstract boolean cond(double, int, double, int);
}
Compiled from "Segment.java"
public class coho.geom.twodim.Segment implements coho.geom.twodim.GeomObj2, java.lang.Comparable<coho.geom.twodim.Segment> {
  public coho.geom.twodim.Point p(int);
  public coho.geom.twodim.Point left();
  public coho.geom.twodim.Point right();
  public coho.common.number.CohoType type();
  public coho.geom.twodim.Segment(coho.geom.twodim.Point, coho.geom.twodim.Point);
  public static coho.geom.twodim.Segment create(coho.geom.twodim.Point, coho.geom.twodim.Point);
  public boolean isPoint();
  public coho.common.number.CohoNumber len2();
  public boolean isHoriz();
  public boolean isVert();
  public coho.geom.twodim.BoundingBox bbox();
  public coho.geom.twodim.Segment translate(coho.geom.twodim.Point);
  public coho.geom.twodim.Segment transpose();
  public coho.geom.twodim.Segment negate();
  public coho.geom.twodim.Segment reverse();
  public coho.common.number.CohoNumber x(coho.common.number.ScaleNumber);
  public coho.common.number.CohoNumber y(coho.common.number.ScaleNumber);
  public coho.common.number.CohoNumber A();
  public coho.common.number.CohoNumber B();
  public coho.common.number.CohoNumber C();
  public coho.geom.twodim.Line line();
  public coho.geom.twodim.GeomObj2 intersect(coho.geom.twodim.GeomObj2);
  protected coho.geom.twodim.GeomObj2 intersectBoundingBox(coho.geom.twodim.BoundingBox);
  public coho.geom.twodim.GeomObj2 intersectSegment(coho.geom.twodim.Segment);
  protected coho.geom.twodim.GeomObj2 intersectPoint(coho.geom.twodim.Point);
  public boolean isParallelTo(coho.geom.twodim.Segment);
  public boolean contains(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.GeomObj2 union(coho.geom.twodim.GeomObj2);
  public int compareTo(coho.geom.twodim.Segment);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareBySlope(coho.geom.twodim.Segment);
  public int compareByAngle(coho.geom.twodim.Segment);
  public int compareByRightX(coho.geom.twodim.Segment);
  public coho.geom.twodim.Segment specifyType(coho.common.number.CohoType);
  public double maxError();
  public java.lang.String toString();
  public static void main(java.lang.String[]);
  public coho.geom.twodim.GeomObj2 transpose();
  public coho.geom.twodim.GeomObj2 negate();
  public coho.geom.twodim.GeomObj2 translate(coho.geom.twodim.Point);
  public coho.geom.twodim.GeomObj2 specifyType(coho.common.number.CohoType);
  public int compareTo(java.lang.Object);
}
Compiled from "SimplePolygon.java"
public class coho.geom.twodim.SimplePolygon implements coho.geom.twodim.Polygon {
  protected final coho.geom.twodim.Point[] points;
  protected final coho.common.number.CohoType type;
  public coho.common.number.CohoType type();
  public coho.geom.twodim.SimplePolygon(coho.geom.twodim.Point[]);
  public coho.geom.twodim.SimplePolygon(java.util.Collection<coho.geom.twodim.Point>);
  public coho.geom.twodim.SimplePolygon(java.util.Collection<coho.geom.twodim.Point>, boolean);
  public coho.geom.twodim.SimplePolygon(coho.geom.twodim.SimplePolygon);
  public coho.geom.twodim.SimplePolygon(java.util.Iterator<coho.geom.twodim.Point>);
  protected coho.geom.twodim.SimplePolygon(coho.geom.twodim.Point[], boolean);
  public coho.geom.twodim.SimplePolygon(coho.geom.twodim.Segment[]);
  public int degree();
  public coho.geom.twodim.Point[] points();
  public coho.geom.twodim.Point point(int);
  public coho.geom.twodim.Segment[] edges();
  public coho.geom.twodim.Segment edge(int);
  public coho.geom.twodim.Point[] vertices();
  public int llPos();
  public coho.geom.twodim.Point ll();
  public coho.geom.twodim.Point ur();
  public coho.common.number.CohoNumber perimeter();
  public coho.common.number.CohoNumber area();
  public boolean isConvex(int);
  public boolean isConcave(int);
  public boolean isFlat(int);
  public coho.geom.twodim.BoundingBox bbox();
  public coho.geom.twodim.GeomObj2 negate();
  public coho.geom.twodim.GeomObj2 translate(coho.geom.twodim.Point);
  public coho.geom.twodim.GeomObj2 transpose();
  public coho.geom.twodim.GeomObj2 intersect(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.Polygon intersect(coho.geom.twodim.Polygon);
  public coho.geom.twodim.SimplePolygon intersect(coho.geom.twodim.SimplePolygon);
  public coho.geom.twodim.GeomObj2 union(coho.geom.twodim.GeomObj2);
  public coho.geom.twodim.Polygon union(coho.geom.twodim.Polygon);
  public coho.geom.twodim.SimplePolygon union(coho.geom.twodim.SimplePolygon);
  public coho.geom.twodim.Polygon union(coho.geom.twodim.Polygon[]);
  public coho.geom.twodim.SimplePolygon union(coho.geom.twodim.SimplePolygon[]);
  public boolean contains(coho.geom.twodim.GeomObj2);
  public boolean contains(coho.geom.twodim.SimplePolygon);
  public boolean contains(coho.geom.twodim.Point);
  public static coho.geom.twodim.ConvexPolygon convexHull(coho.geom.twodim.Point[]);
  public static coho.geom.twodim.ConvexPolygon convexHull(coho.geom.twodim.Point[], boolean);
  public coho.geom.twodim.ConvexPolygon convexHull();
  public coho.geom.twodim.SimplePolygon reduce(coho.geom.twodim.Polygon$EndCondition);
  public coho.geom.twodim.SimplePolygon reduce(coho.geom.twodim.Polygon$EndCondition, boolean, boolean);
  public coho.geom.twodim.SimplePolygon specifyType(coho.common.number.CohoType);
  public double maxError();
  public java.lang.String toString();
  public java.lang.String toMatlab();
  public java.lang.String toCode();
  public static void main(java.lang.String[]);
  public coho.geom.twodim.Polygon reduce(coho.geom.twodim.Polygon$EndCondition, boolean, boolean);
  public coho.geom.twodim.Polygon reduce(coho.geom.twodim.Polygon$EndCondition);
  public coho.geom.twodim.Polygon specifyType(coho.common.number.CohoType);
  public coho.geom.twodim.GeomObj2 specifyType(coho.common.number.CohoType);
}
Compiled from "SimplePolygon.java"
final class coho.geom.twodim.SimplePolygon$1thetaComparator implements java.util.Comparator<coho.geom.twodim.Point> {
  coho.geom.twodim.Point p;
  boolean cmpLength;
  public coho.geom.twodim.SimplePolygon$1thetaComparator(coho.geom.twodim.Point);
  public coho.geom.twodim.SimplePolygon$1thetaComparator(coho.geom.twodim.Point, boolean);
  public int compare(coho.geom.twodim.Point, coho.geom.twodim.Point);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "IntersectPoint.java"
class coho.geom.twodim.ops.IntersectPoint extends coho.geom.twodim.Point {
  public static java.util.Comparator<coho.geom.twodim.ops.IntersectPoint> ascendComparator;
  public static java.util.Comparator<coho.geom.twodim.ops.IntersectPoint> descendComparator;
  public coho.geom.twodim.Point point();
  public boolean isExact();
  public coho.geom.twodim.ops.IntersectSegment segment(int);
  public coho.geom.twodim.ops.IntersectPoint(coho.geom.twodim.Point, coho.geom.twodim.ops.IntersectSegment, coho.geom.twodim.ops.IntersectSegment, boolean);
  public coho.geom.twodim.ops.IntersectPoint(coho.geom.twodim.Point, coho.geom.twodim.ops.IntersectSegment, coho.geom.twodim.ops.IntersectSegment);
  public coho.geom.twodim.ops.IntersectSegment getSegment(coho.geom.twodim.ops.IntersectPoint);
  public coho.geom.twodim.ops.IntersectSegment advance(coho.geom.twodim.Segment, boolean);
  public boolean isIntersect();
  public boolean isFwdEndPoint(coho.geom.twodim.Segment);
  public boolean isEndPoint(coho.geom.twodim.Segment);
  public int dynamicCompare(coho.geom.twodim.Point);
  public int dynamicCompare(coho.geom.twodim.ops.IntersectPoint);
  public void eval();
  public java.lang.String toString();
  public java.lang.String toString(boolean);
  static {};
}
Compiled from "IntersectPoint.java"
final class coho.geom.twodim.ops.IntersectPoint$1 implements java.util.Comparator<coho.geom.twodim.ops.IntersectPoint> {
  coho.geom.twodim.ops.IntersectPoint$1();
  public int compare(coho.geom.twodim.ops.IntersectPoint, coho.geom.twodim.ops.IntersectPoint);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "IntersectPoint.java"
final class coho.geom.twodim.ops.IntersectPoint$2 implements java.util.Comparator<coho.geom.twodim.ops.IntersectPoint> {
  coho.geom.twodim.ops.IntersectPoint$2();
  public int compare(coho.geom.twodim.ops.IntersectPoint, coho.geom.twodim.ops.IntersectPoint);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "IntersectPoint.java"
class coho.geom.twodim.ops.IntersectPoint$3 {
  static final int[] $SwitchMap$coho$geom$twodim$ops$IntersectSegment$Side;
  static {};
}
Compiled from "IntersectSegment.java"
class coho.geom.twodim.ops.IntersectSegment extends coho.geom.twodim.Segment {
  public coho.geom.twodim.ops.IntersectSegment(coho.geom.twodim.Segment);
  public void add(coho.geom.twodim.ops.IntersectPoint);
  public java.util.Set<coho.geom.twodim.ops.IntersectSegment> getAllSegmentsOfPoint(coho.geom.twodim.ops.IntersectPoint);
  public int getSegmentsNumberOfPoint(coho.geom.twodim.ops.IntersectPoint);
  public boolean hasPoint(coho.geom.twodim.Point);
  public coho.geom.twodim.ops.IntersectSegment$Side whichSideOf(coho.geom.twodim.Segment);
  public coho.geom.twodim.ops.IntersectPoint advance(coho.geom.twodim.ops.IntersectPoint);
  public java.lang.String toString();
  public java.lang.String toString(boolean);
  public static void main(java.lang.String[]);
}
Compiled from "IntersectSegment.java"
public final class coho.geom.twodim.ops.IntersectSegment$Side extends java.lang.Enum<coho.geom.twodim.ops.IntersectSegment$Side> {
  public static final coho.geom.twodim.ops.IntersectSegment$Side LEFT;
  public static final coho.geom.twodim.ops.IntersectSegment$Side RIGHT;
  public static final coho.geom.twodim.ops.IntersectSegment$Side SAME;
  public static final coho.geom.twodim.ops.IntersectSegment$Side OPPOSITE;
  public static coho.geom.twodim.ops.IntersectSegment$Side[] values();
  public static coho.geom.twodim.ops.IntersectSegment$Side valueOf(java.lang.String);
  static {};
}
Compiled from "IntersectSimplePolygon.java"
class coho.geom.twodim.ops.IntersectSimplePolygon {
  public coho.geom.twodim.ops.IntersectPoint left();
  public coho.geom.twodim.BoundingBox bbox();
  public int hulls();
  public coho.geom.twodim.ops.IntersectSegment[] hull(int);
  public coho.geom.twodim.ops.IntersectSimplePolygon(coho.geom.twodim.ConvexPolygon);
  public coho.geom.twodim.ops.IntersectSimplePolygon(coho.geom.twodim.SimplePolygon);
  public void intersect(coho.geom.twodim.ops.IntersectSimplePolygon);
  public java.lang.String toString();
}
Compiled from "NonSimplePolygonException.java"
public class coho.geom.twodim.ops.NonSimplePolygonException extends coho.geom.GeomException {
  public coho.geom.twodim.ops.NonSimplePolygonException();
  public coho.geom.twodim.ops.NonSimplePolygonException(java.lang.String, java.lang.Throwable);
  public coho.geom.twodim.ops.NonSimplePolygonException(java.lang.String);
  public coho.geom.twodim.ops.NonSimplePolygonException(java.lang.Throwable);
}
Compiled from "OutwardReduce.java"
public class coho.geom.twodim.ops.OutwardReduce {
  public static double maxNewPointDist;
  public static double maxNewEdgeLen;
  public static final double hullWeight;
  static final boolean $assertionsDisabled;
  public int degree();
  public double area();
  coho.geom.twodim.ops.OutwardReduce$ReduceEvent getMinCostEvent();
  public static double[] areaDist(coho.geom.twodim.Point, coho.geom.twodim.Point, coho.geom.twodim.Point);
  public static double segLen(coho.geom.twodim.Point, coho.geom.twodim.Point);
  public coho.geom.twodim.ops.OutwardReduce(coho.geom.twodim.SimplePolygon);
  public coho.geom.twodim.ops.OutwardReduce(coho.geom.twodim.SimplePolygon, boolean, boolean);
  public coho.geom.twodim.ops.OutwardReduce(coho.geom.twodim.ConvexPolygon);
  coho.geom.twodim.ops.OutwardReduce$ReducePoint evalPointCost(coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
  coho.geom.twodim.ops.OutwardReduce$ReduceEdge evalEdgeCost(coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
  coho.geom.twodim.GeomObj2 edgeIntersect(coho.geom.twodim.Segment, coho.geom.twodim.Segment);
  boolean reducePoint(coho.geom.twodim.ops.OutwardReduce$ReducePoint);
  boolean reduceEdge(coho.geom.twodim.ops.OutwardReduce$ReduceEdge);
  boolean reduce(coho.geom.twodim.ops.OutwardReduce$ReduceEvent);
  public coho.geom.twodim.SimplePolygon reduce(coho.geom.twodim.Polygon$EndCondition);
  void reduceWithNoCost();
  void reduceWithSlightCost();
  coho.geom.twodim.SimplePolygon getPolygon();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "OutwardReduce.java"
class coho.geom.twodim.ops.OutwardReduce$ReduceEdge extends coho.geom.twodim.ops.OutwardReduce$ReduceEvent {
  public coho.geom.twodim.ops.OutwardReduce$ReduceEdge(coho.geom.twodim.ops.OutwardReduce$ReduceVertex, coho.geom.twodim.ops.OutwardReduce$ReduceVertex, double, double, coho.geom.twodim.GeomObj2);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  static coho.geom.twodim.GeomObj2 access$600(coho.geom.twodim.ops.OutwardReduce$ReduceEdge);
  static coho.geom.twodim.ops.OutwardReduce$ReduceVertex access$700(coho.geom.twodim.ops.OutwardReduce$ReduceEdge);
  static coho.geom.twodim.ops.OutwardReduce$ReduceVertex access$800(coho.geom.twodim.ops.OutwardReduce$ReduceEdge);
}
Compiled from "OutwardReduce.java"
class coho.geom.twodim.ops.OutwardReduce$ReduceEvent implements java.lang.Comparable<coho.geom.twodim.ops.OutwardReduce$ReduceEvent> {
  protected coho.geom.twodim.ops.OutwardReduce$ReduceEvent(double, double);
  protected coho.geom.twodim.ops.OutwardReduce$ReduceEvent(double);
  public double cost();
  public double area();
  public int compareTo(coho.geom.twodim.ops.OutwardReduce$ReduceEvent);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "OutwardReduce.java"
class coho.geom.twodim.ops.OutwardReduce$ReducePoint extends coho.geom.twodim.ops.OutwardReduce$ReduceEvent {
  public coho.geom.twodim.ops.OutwardReduce$ReducePoint(coho.geom.twodim.ops.OutwardReduce$ReduceVertex, double);
  public coho.geom.twodim.ops.OutwardReduce$ReducePoint(coho.geom.twodim.ops.OutwardReduce$ReduceVertex, double, double);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  static coho.geom.twodim.ops.OutwardReduce$ReduceVertex access$500(coho.geom.twodim.ops.OutwardReduce$ReducePoint);
}
Compiled from "OutwardReduce.java"
class coho.geom.twodim.ops.OutwardReduce$ReduceVertex extends coho.geom.twodim.Point {
  public coho.geom.twodim.ops.OutwardReduce$ReduceVertex(coho.geom.twodim.Point, coho.geom.twodim.ops.OutwardReduce$ReduceVertex, coho.geom.twodim.ops.OutwardReduce$ReduceVertex, coho.geom.twodim.ops.OutwardReduce$ReducePoint, coho.geom.twodim.ops.OutwardReduce$ReduceEdge, coho.geom.twodim.ops.OutwardReduce$ReduceEdge);
  public coho.geom.twodim.ops.OutwardReduce$ReduceVertex(coho.geom.twodim.Point, coho.geom.twodim.ops.OutwardReduce$ReduceVertex, coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
  public coho.geom.twodim.ops.OutwardReduce$ReduceVertex(coho.geom.twodim.Point, double);
  public coho.geom.twodim.ops.OutwardReduce$ReduceVertex(coho.geom.twodim.Point);
  public boolean isConvex();
  public boolean isConcave();
  public boolean isStraight();
  public double dist();
  static coho.geom.twodim.ops.OutwardReduce$ReduceVertex access$002(coho.geom.twodim.ops.OutwardReduce$ReduceVertex, coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
  static coho.geom.twodim.ops.OutwardReduce$ReduceVertex access$102(coho.geom.twodim.ops.OutwardReduce$ReduceVertex, coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
  static coho.geom.twodim.ops.OutwardReduce$ReducePoint access$202(coho.geom.twodim.ops.OutwardReduce$ReduceVertex, coho.geom.twodim.ops.OutwardReduce$ReducePoint);
  static coho.geom.twodim.ops.OutwardReduce$ReduceEdge access$302(coho.geom.twodim.ops.OutwardReduce$ReduceVertex, coho.geom.twodim.ops.OutwardReduce$ReduceEdge);
  static coho.geom.twodim.ops.OutwardReduce$ReduceEdge access$402(coho.geom.twodim.ops.OutwardReduce$ReduceVertex, coho.geom.twodim.ops.OutwardReduce$ReduceEdge);
  static coho.geom.twodim.ops.OutwardReduce$ReduceVertex access$100(coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
  static coho.geom.twodim.ops.OutwardReduce$ReduceVertex access$000(coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
  static coho.geom.twodim.ops.OutwardReduce$ReducePoint access$200(coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
  static coho.geom.twodim.ops.OutwardReduce$ReduceEdge access$400(coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
  static coho.geom.twodim.ops.OutwardReduce$ReduceEdge access$300(coho.geom.twodim.ops.OutwardReduce$ReduceVertex);
}
Compiled from "PolygonOp.java"
public class coho.geom.twodim.ops.PolygonOp {
  public coho.geom.twodim.ops.PolygonOp();
  public static boolean isSimple(coho.geom.twodim.Polygon);
  public static coho.geom.twodim.SimplePolygon toSimplePolygon(coho.geom.twodim.Polygon) throws coho.geom.GeomException;
  public static coho.geom.twodim.SimplePolygon toSimplePolygon(coho.geom.twodim.Polygon, boolean) throws coho.geom.GeomException;
  protected static coho.geom.twodim.Point[] toScale(coho.geom.twodim.ops.IntersectPoint[], coho.common.number.ScaleType);
  protected static coho.geom.twodim.Point[] toScale(java.util.Collection<coho.geom.twodim.ops.IntersectPoint>, coho.common.number.ScaleType);
}
Compiled from "SimplePolygonOp.java"
public class coho.geom.twodim.ops.SimplePolygonOp extends coho.geom.twodim.ops.PolygonOp {
  public static boolean stupid;
  public coho.geom.twodim.ops.SimplePolygonOp();
  public static coho.geom.twodim.SimplePolygon union(coho.geom.twodim.SimplePolygon[]);
  public static coho.geom.twodim.SimplePolygon union(coho.geom.twodim.SimplePolygon, coho.geom.twodim.SimplePolygon);
  public static coho.geom.twodim.SimplePolygon intersect(coho.geom.twodim.SimplePolygon, coho.geom.twodim.SimplePolygon);
  public static coho.geom.twodim.ConvexPolygon intersect(coho.geom.twodim.ConvexPolygon, coho.geom.twodim.ConvexPolygon);
  public static coho.geom.twodim.SimplePolygon reduce(coho.geom.twodim.SimplePolygon, coho.geom.twodim.Polygon$EndCondition);
  public static coho.geom.twodim.SimplePolygon reduce(coho.geom.twodim.SimplePolygon, coho.geom.twodim.Polygon$EndCondition, boolean, boolean);
  public static coho.geom.twodim.ConvexPolygon reduce(coho.geom.twodim.ConvexPolygon, coho.geom.twodim.Polygon$EndCondition);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SimplePolygonOp.java"
class coho.geom.twodim.ops.SimplePolygonOp$PolygonPair {
  coho.geom.twodim.ops.IntersectSimplePolygon p1;
  coho.geom.twodim.ops.IntersectSimplePolygon p2;
  public coho.geom.twodim.ops.SimplePolygonOp$PolygonPair(coho.geom.twodim.ops.IntersectSimplePolygon, coho.geom.twodim.ops.IntersectSimplePolygon);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "BasicArgs.java"
public class coho.interp.BasicArgs {
  public coho.interp.BasicArgs();
  public static double double_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  public static int int_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  public static coho.interp.RCvalue rc_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  public static java.lang.String string_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
}
Compiled from "BasicFunctions.java"
public class coho.interp.BasicFunctions {
  public coho.interp.BasicFunctions();
  public static void setLogWriter(java.io.FileOutputStream);
  public static void setParser(coho.interp.Parse);
  public static java.util.Enumeration functions();
  protected static void print_exception(java.lang.Exception, java.lang.String);
  protected static void print_exception(java.lang.Exception, java.lang.String, java.lang.String);
  protected static void do_print(coho.interp.RCvalue, java.lang.String) throws coho.interp.EvalException;
  static coho.interp.Function[] access$000();
  static coho.interp.Parse access$100();
  static coho.interp.Parse access$102(coho.interp.Parse);
  static {};
}
Compiled from "BasicFunctions.java"
final class coho.interp.BasicFunctions$1 implements java.util.Enumeration {
  coho.interp.BasicFunctions$1();
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "BasicFunctions.java"
final class coho.interp.BasicFunctions$2 implements coho.interp.Function {
  coho.interp.BasicFunctions$2();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicFunctions.java"
final class coho.interp.BasicFunctions$3 implements coho.interp.Function {
  coho.interp.BasicFunctions$3();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicFunctions.java"
final class coho.interp.BasicFunctions$4 implements coho.interp.Function {
  coho.interp.BasicFunctions$4();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicFunctions.java"
final class coho.interp.BasicFunctions$5 implements coho.interp.Function {
  coho.interp.BasicFunctions$5();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicFunctions.java"
final class coho.interp.BasicFunctions$6 implements coho.interp.Function {
  coho.interp.BasicFunctions$6();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicFunctions.java"
final class coho.interp.BasicFunctions$7 implements coho.interp.Function {
  coho.interp.BasicFunctions$7();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicFunctions.java"
final class coho.interp.BasicFunctions$8 implements coho.interp.Function {
  coho.interp.BasicFunctions$8();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicPTeval.java"
public class coho.interp.BasicPTeval implements coho.interp.PTeval {
  public static coho.interp.BasicPTeval voidPTeval;
  public boolean isTerminal();
  public int key();
  public java.lang.String text() throws java.lang.IllegalArgumentException;
  public coho.interp.PTnode child(int) throws java.lang.IllegalArgumentException;
  public int n_children() throws java.lang.IllegalArgumentException;
  public java.lang.String toString(int);
  public java.lang.String toString();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
  public coho.interp.BasicPTeval(coho.interp.PTnode, coho.interp.Evaluator);
  public static boolean isVoidPTeval(coho.interp.PTeval);
  static {};
}
Compiled from "BasicPTnode.java"
public class coho.interp.BasicPTnode implements coho.interp.PTnode {
  public boolean isTerminal();
  public int key();
  public java.lang.String text() throws java.lang.IllegalArgumentException;
  public coho.interp.PTnode child(int) throws java.lang.IllegalArgumentException;
  public int n_children() throws java.lang.IllegalArgumentException;
  public coho.interp.BasicPTnode(int, java.lang.String, coho.interp.SymbolName);
  public coho.interp.BasicPTnode(int, coho.interp.PTnode[], coho.interp.SymbolName);
  public java.lang.String toString(int);
  public java.lang.String toString();
}
Compiled from "BasicValue.java"
public class coho.interp.BasicValue implements coho.interp.Value {
  public coho.interp.BasicValue();
  public static void print(coho.interp.BasicValue, java.io.Writer, coho.interp.Value[]) throws java.io.IOException;
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public static coho.interp.Value noSuchOp(coho.interp.Value, coho.interp.Value, java.lang.String) throws coho.interp.EvalException;
  public static coho.interp.Value noSuchOp(coho.interp.Value, java.lang.String) throws coho.interp.EvalException;
  public static coho.interp.Value negate(coho.interp.BasicValue) throws coho.interp.EvalException;
  public coho.interp.Value negate() throws coho.interp.EvalException;
  public static coho.interp.Value abs(coho.interp.BasicValue) throws coho.interp.EvalException;
  public coho.interp.Value abs() throws coho.interp.EvalException;
  public static coho.interp.Value add(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
  public static coho.interp.Value mult(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
  public static coho.interp.Value less(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
  public static coho.interp.Value leq(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
  public static coho.interp.Value eq(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
  public static coho.interp.Value neq(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
  public static coho.interp.Value geq(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
  public static coho.interp.Value greater(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value add(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value mult(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value less(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value leq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value eq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value neq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value geq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value greater(coho.interp.Value) throws coho.interp.EvalException;
  public static java.util.Enumeration functions();
  public static java.lang.String name(coho.interp.BasicValue);
  public java.lang.String name();
  public static java.lang.String typeName(coho.interp.BasicValue);
  public java.lang.String typeName();
  public static java.lang.String toString(coho.interp.Value);
  public java.lang.String toString();
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$1 implements coho.interp.Function {
  coho.interp.BasicValue$1();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$10 extends coho.interp.BasicValue$CompareFn {
  coho.interp.BasicValue$10(java.lang.String);
  public coho.interp.Value cmp(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$11 implements java.util.Enumeration {
  final coho.interp.Function[] val$functions;
  coho.interp.BasicValue$11(coho.interp.Function[]);
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$2 implements coho.interp.Function {
  coho.interp.BasicValue$2();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$3 implements coho.interp.Function {
  coho.interp.BasicValue$3();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$4 implements coho.interp.Function {
  coho.interp.BasicValue$4();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$5 extends coho.interp.BasicValue$CompareFn {
  coho.interp.BasicValue$5(java.lang.String);
  public coho.interp.Value cmp(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$6 extends coho.interp.BasicValue$CompareFn {
  coho.interp.BasicValue$6(java.lang.String);
  public coho.interp.Value cmp(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$7 extends coho.interp.BasicValue$CompareFn {
  coho.interp.BasicValue$7(java.lang.String);
  public coho.interp.Value cmp(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$8 extends coho.interp.BasicValue$CompareFn {
  coho.interp.BasicValue$8(java.lang.String);
  public coho.interp.Value cmp(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
final class coho.interp.BasicValue$9 extends coho.interp.BasicValue$CompareFn {
  coho.interp.BasicValue$9(java.lang.String);
  public coho.interp.Value cmp(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
}
Compiled from "BasicValue.java"
public abstract class coho.interp.BasicValue$CompareFn implements coho.interp.Function {
  public java.lang.String name();
  public coho.interp.BasicValue$CompareFn(java.lang.String);
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
  public abstract coho.interp.Value cmp(coho.interp.Value, coho.interp.Value) throws coho.interp.EvalException;
}
Compiled from "Parser.java"
class coho.interp.CUP$Parser$actions {
  coho.interp.PTfactory pf;
  java.util.concurrent.BlockingQueue<coho.interp.PTeval> bq;
  void enqueue(coho.interp.PTeval);
  coho.interp.CUP$Parser$actions(coho.interp.Parser, coho.interp.PTfactory, java.util.concurrent.BlockingQueue<coho.interp.PTeval>);
  coho.interp.CUP$Parser$actions(coho.interp.Parser);
  public final java_cup.runtime.Symbol CUP$Parser$do_action(int, java_cup.runtime.lr_parser, java.util.Stack, int) throws java.lang.Exception;
}
Compiled from "Context.java"
public class coho.interp.Context {
  public coho.interp.Context();
  public static void put(java.lang.String, coho.interp.Value);
  public static coho.interp.Value get(java.lang.Object);
  public static java.util.Iterator iterator();
  static {};
}
Compiled from "CopyingReader.java"
public class coho.interp.CopyingReader extends java.io.Reader {
  java.io.LineNumberReader in;
  java.io.Writer log;
  java.lang.String line;
  int linePos;
  public coho.interp.CopyingReader(java.io.LineNumberReader, java.io.Writer);
  public coho.interp.CopyingReader(java.io.Reader, int, java.io.Writer);
  public coho.interp.CopyingReader(java.io.Reader, java.io.Writer);
  public coho.interp.CopyingReader(java.io.InputStream, java.io.Writer);
  public void close() throws java.io.IOException;
  public void mark(int) throws java.io.IOException;
  public boolean markSupported();
  public boolean ready() throws java.io.IOException;
  public void reset() throws java.io.IOException;
  public long skip(long) throws java.io.IOException;
  public int getLineNumber();
  public void setLineNumber(int);
  public int read() throws java.io.IOException;
  protected void getLine() throws java.io.IOException;
  public int read(char[], int, int) throws java.io.IOException;
}
Compiled from "DoubleIntervalValue.java"
public class coho.interp.DoubleIntervalValue extends coho.interp.BasicValue {
  protected static final coho.interp.ValueCreate factory;
  public coho.common.number.DoubleInterval x();
  protected coho.interp.DoubleIntervalValue(coho.common.number.DoubleInterval);
  public coho.common.number.DoubleInterval value();
  public coho.interp.Value negate() throws coho.interp.EvalException;
  public coho.interp.Value abs() throws coho.interp.EvalException;
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  protected void unsupported(coho.interp.Value, java.lang.String) throws coho.interp.EvalException;
  protected coho.interp.Value do_it(coho.interp.Value, java.lang.String) throws coho.interp.EvalException;
  public coho.interp.Value add(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value mult(coho.interp.Value) throws coho.interp.EvalException;
  public java.lang.String typeName();
  public static coho.interp.ValueCreate factory();
  static {};
}
Compiled from "DoubleIntervalValue.java"
public class coho.interp.DoubleIntervalValue$factory implements coho.interp.ValueCreate {
  protected coho.interp.DoubleIntervalValue$factory();
  public coho.interp.Value create(java.lang.Object, java.lang.Object);
  public java.lang.Object foo();
}
Compiled from "DoubleIntervalValue.java"
class coho.interp.DoubleIntervalValue$factory$1 {
  public coho.common.number.DoubleInterval x;
  final coho.interp.DoubleIntervalValue$factory this$0;
  coho.interp.DoubleIntervalValue$factory$1(coho.interp.DoubleIntervalValue$factory);
}
Compiled from "DoubleValue.java"
public class coho.interp.DoubleValue extends coho.interp.BasicValue {
  protected static final coho.interp.ValueCreate factory;
  public double d();
  protected coho.interp.DoubleValue(java.lang.Double);
  public double value();
  public coho.interp.Value negate() throws coho.interp.EvalException;
  public coho.interp.Value abs() throws coho.interp.EvalException;
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public coho.interp.Value add(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value mult(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value less(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value leq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value eq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value neq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value geq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value greater(coho.interp.Value) throws coho.interp.EvalException;
  public java.lang.String typeName();
  public static coho.interp.ValueCreate factory();
  static {};
}
Compiled from "DoubleValue.java"
public class coho.interp.DoubleValue$factory implements coho.interp.ValueCreate {
  protected coho.interp.DoubleValue$factory();
  public coho.interp.Value create(java.lang.Object, java.lang.Object);
  public java.lang.Object foo();
}
Compiled from "DoubleValue.java"
class coho.interp.DoubleValue$factory$1 {
  public java.lang.Double x;
  final coho.interp.DoubleValue$factory this$0;
  coho.interp.DoubleValue$factory$1(coho.interp.DoubleValue$factory);
}
Compiled from "Eval.java"
public class coho.interp.Eval {
  public coho.interp.Eval();
  public static void init();
  public static void noDefaultFunctions();
  public static void addFunctions(java.util.Enumeration);
  public static boolean setDebug(boolean);
  public static java.util.Enumeration nodeOperations();
  protected static coho.interp.Value _eval(coho.interp.PTnode, int) throws coho.interp.EvalException;
  protected static java.lang.String grindString(java.lang.String);
  public static java.util.Enumeration functions();
  static java.util.Map access$000();
  static {};
}
Compiled from "Eval.java"
final class coho.interp.Eval$1 implements coho.interp.Evaluator {
  coho.interp.Eval$1();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$10 implements coho.interp.Evaluator {
  coho.interp.Eval$10();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$11 implements coho.interp.Evaluator {
  coho.interp.Eval$11();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$12 implements coho.interp.Evaluator {
  coho.interp.Eval$12();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$13 implements coho.interp.Evaluator {
  coho.interp.Eval$13();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$14 implements coho.interp.Evaluator {
  coho.interp.Eval$14();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$15 implements java.util.Enumeration {
  final coho.interp.Evaluator[] val$actions;
  coho.interp.Eval$15(coho.interp.Evaluator[]);
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "Eval.java"
final class coho.interp.Eval$16 implements coho.interp.Function {
  coho.interp.Eval$16();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$17 implements coho.interp.Function {
  coho.interp.Eval$17();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$18 implements java.util.Enumeration {
  final coho.interp.Function[] val$functions;
  coho.interp.Eval$18(coho.interp.Function[]);
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "Eval.java"
final class coho.interp.Eval$2 implements coho.interp.Evaluator {
  coho.interp.Eval$2();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$3 implements coho.interp.Evaluator {
  coho.interp.Eval$3();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$4 implements coho.interp.Evaluator {
  coho.interp.Eval$4();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$5 implements coho.interp.Evaluator {
  coho.interp.Eval$5();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$6 implements coho.interp.Evaluator {
  coho.interp.Eval$6();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$7 implements coho.interp.Evaluator {
  coho.interp.Eval$7();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$8 implements coho.interp.Evaluator {
  coho.interp.Eval$8();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Eval.java"
final class coho.interp.Eval$9 implements coho.interp.Evaluator {
  coho.interp.Eval$9();
  public java.lang.Object production();
  public coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "EvalEndException.java"
public class coho.interp.EvalEndException extends coho.interp.EvalException {
  coho.interp.EvalEndException();
  coho.interp.EvalEndException(java.lang.String);
}
Compiled from "EvalException.java"
public class coho.interp.EvalException extends java.lang.Exception {
  public coho.interp.EvalException();
  public coho.interp.EvalException(java.lang.String);
}
Compiled from "EvalThread.java"
public class coho.interp.EvalThread implements java.lang.Runnable {
  public coho.interp.EvalThread(java.util.concurrent.BlockingQueue<coho.interp.PTeval>);
  public void run();
}
Compiled from "Evaluator.java"
public interface coho.interp.Evaluator {
  public abstract java.lang.Object production();
  public abstract coho.interp.Value eval(coho.interp.PTnode) throws coho.interp.EvalException;
}
Compiled from "Function.java"
public interface coho.interp.Function {
  public abstract java.lang.String name();
  public abstract coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "LPstuff.java"
public class coho.interp.LPstuff {
  public coho.interp.LPstuff();
  public static java.util.Enumeration functions();
  public static coho.lp.Constraint constraint_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  public static coho.lp.LP lp_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  static coho.interp.Function[] access$000();
  static {};
}
Compiled from "LPstuff.java"
final class coho.interp.LPstuff$1 implements coho.interp.Function {
  coho.interp.LPstuff$1();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "LPstuff.java"
final class coho.interp.LPstuff$2 implements coho.interp.Function {
  coho.interp.LPstuff$2();
  public java.lang.String name();
  public java.lang.String longName();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "LPstuff.java"
final class coho.interp.LPstuff$3 implements coho.interp.Function {
  coho.interp.LPstuff$3();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "LPstuff.java"
final class coho.interp.LPstuff$4 implements coho.interp.Function {
  coho.interp.LPstuff$4();
  public java.lang.String name();
  public java.lang.String longName();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "LPstuff.java"
final class coho.interp.LPstuff$5 implements coho.interp.Function {
  coho.interp.LPstuff$5();
  public java.lang.String name();
  public java.lang.String longName();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "LPstuff.java"
final class coho.interp.LPstuff$6 implements coho.interp.Function {
  coho.interp.LPstuff$6();
  public java.lang.String name();
  public java.lang.String longName();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "LPstuff.java"
final class coho.interp.LPstuff$7 implements coho.interp.Function {
  coho.interp.LPstuff$7();
  public java.lang.String name();
  public java.lang.String longName();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "LPstuff.java"
final class coho.interp.LPstuff$8 implements java.util.Enumeration {
  coho.interp.LPstuff$8();
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "LPstuff.java"
public class coho.interp.LPstuff$LPvalue extends coho.interp.BasicValue {
  public java.lang.String name();
  protected coho.interp.LPstuff$LPvalue(coho.lp.LP);
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public coho.lp.LP value();
}
Compiled from "LPstuff.java"
public class coho.interp.LPstuff$ProjectValue extends coho.interp.BasicValue {
  public java.lang.String name();
  protected coho.interp.LPstuff$ProjectValue(coho.lp.project.LPProject);
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public coho.lp.project.LPProject value();
}
Compiled from "LPstuff.java"
public class coho.interp.LPstuff$ResultValue extends coho.interp.BasicValue {
  public java.lang.String name();
  protected coho.interp.LPstuff$ResultValue(coho.lp.LPResult);
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public coho.interp.Value negate() throws coho.interp.EvalException;
  public coho.lp.LPResult value();
}
Compiled from "LineBreakingWriter.java"
public class coho.interp.LineBreakingWriter extends java.io.FilterWriter {
  public coho.interp.LineBreakingWriter(java.io.Writer, int);
  protected void doBreak() throws java.io.IOException;
  public void write(char) throws java.io.IOException;
  public void write(char[], int, int) throws java.io.IOException;
  public void write(char[]) throws java.io.IOException;
  public void write(java.lang.String, int, int) throws java.io.IOException;
  public void write(java.lang.String) throws java.io.IOException;
  public void flush() throws java.io.IOException;
}
Compiled from "LineReader.java"
public class coho.interp.LineReader extends java.io.Reader {
  java.io.LineNumberReader in;
  java.lang.String line;
  int linePos;
  public coho.interp.LineReader(java.io.Reader, int);
  public coho.interp.LineReader(java.io.Reader);
  public coho.interp.LineReader(java.io.InputStream);
  public void close() throws java.io.IOException;
  public void mark(int) throws java.io.IOException;
  public boolean markSupported();
  public boolean ready() throws java.io.IOException;
  public void reset() throws java.io.IOException;
  public long skip(long) throws java.io.IOException;
  public int getLineNumber();
  public void setLineNumber(int);
  public int read() throws java.io.IOException;
  public int read(char[], int, int) throws java.io.IOException;
  public boolean endOfLine(java.lang.String);
  public boolean endOfLine();
}
Compiled from "MatrixValue.java"
public class coho.interp.MatrixValue extends coho.interp.BasicValue {
  protected static final coho.interp.ValueCreate factory;
  public coho.common.matrix.Matrix m();
  protected coho.interp.MatrixValue(coho.common.matrix.Matrix);
  protected coho.interp.MatrixValue(coho.interp.RCvalue, coho.common.number.CohoType) throws coho.interp.EvalException;
  protected void mv_bad() throws coho.interp.EvalException;
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public coho.interp.Value negate() throws coho.interp.EvalException;
  public coho.interp.Value abs() throws coho.interp.EvalException;
  public coho.common.matrix.Matrix value();
  public coho.interp.Value add(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value mult(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value less(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value leq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value eq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value neq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value geq(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value greater(coho.interp.Value) throws coho.interp.EvalException;
  public coho.interp.Value submatrix(coho.common.matrix.Range, coho.common.matrix.Range) throws coho.interp.EvalException;
  public coho.interp.Value block_copy(coho.common.matrix.Matrix, int, int) throws coho.interp.EvalException;
  public static coho.interp.MatrixValue matrix(coho.interp.RCvalue, java.lang.String, coho.common.number.CohoType) throws coho.interp.EvalException;
  public static java.util.Enumeration matrixFns();
  public static coho.common.matrix.Matrix matrix_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  public static coho.common.matrix.Matrix matrix_arg(coho.interp.RCvalue, int, java.lang.String, coho.common.number.CohoType) throws coho.interp.EvalException;
  public static coho.common.matrix.BooleanMatrix booleanMatrix_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  public static coho.common.matrix.DoubleMatrix doubleMatrix_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  public static coho.common.matrix.IntegerMatrix intMatrix_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  public static coho.common.matrix.Range range_arg(coho.interp.RCvalue, int, java.lang.String) throws coho.interp.EvalException;
  public static int[] checkIndex(coho.common.matrix.Matrix, int[], java.lang.String) throws coho.interp.EvalException;
  public static int[] checkIndex(coho.common.matrix.Matrix, int, int, java.lang.String) throws coho.interp.EvalException;
  public static int checkRowIndex(coho.common.matrix.Matrix, int, java.lang.String) throws coho.interp.EvalException;
  public static coho.common.matrix.Range checkRowIndex(coho.common.matrix.Matrix, coho.common.matrix.Range, java.lang.String) throws coho.interp.EvalException;
  public static int checkColIndex(coho.common.matrix.Matrix, int, java.lang.String) throws coho.interp.EvalException;
  public static coho.common.matrix.Range checkColIndex(coho.common.matrix.Matrix, coho.common.matrix.Range, java.lang.String) throws coho.interp.EvalException;
  public java.lang.String typeName();
  public static coho.interp.ValueCreate factory();
  static {};
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$1 implements coho.interp.Function {
  coho.interp.MatrixValue$1();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$10 implements coho.interp.Function {
  coho.interp.MatrixValue$10();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$11 implements coho.interp.Function {
  coho.interp.MatrixValue$11();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$12 implements coho.interp.Function {
  coho.interp.MatrixValue$12();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$13 implements coho.interp.Function {
  coho.interp.MatrixValue$13();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$14 implements coho.interp.Function {
  coho.interp.MatrixValue$14();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$15 implements coho.interp.Function {
  coho.interp.MatrixValue$15();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$16 implements coho.interp.Function {
  coho.interp.MatrixValue$16();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$17 implements coho.interp.Function {
  coho.interp.MatrixValue$17();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$18 implements coho.interp.Function {
  coho.interp.MatrixValue$18();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$19 implements coho.interp.Function {
  coho.interp.MatrixValue$19();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$2 implements coho.interp.Function {
  coho.interp.MatrixValue$2();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$20 implements coho.interp.Function {
  coho.interp.MatrixValue$20();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$21 implements coho.interp.Function {
  coho.interp.MatrixValue$21();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$22 implements coho.interp.Function {
  coho.interp.MatrixValue$22();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$23 implements coho.interp.Function {
  coho.interp.MatrixValue$23();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$24 implements coho.interp.Function {
  coho.interp.MatrixValue$24();
  public java.lang.String name();
  public java.lang.String usage();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$25 implements java.util.Enumeration {
  final coho.interp.Function[] val$functions;
  coho.interp.MatrixValue$25(coho.interp.Function[]);
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$3 implements coho.interp.Function {
  coho.interp.MatrixValue$3();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$4 implements coho.interp.Function {
  coho.interp.MatrixValue$4();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$5 implements coho.interp.Function {
  coho.interp.MatrixValue$5();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$6 implements coho.interp.Function {
  coho.interp.MatrixValue$6();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$7 implements coho.interp.Function {
  coho.interp.MatrixValue$7();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$8 implements coho.interp.Function {
  coho.interp.MatrixValue$8();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
final class coho.interp.MatrixValue$9 implements coho.interp.Function {
  coho.interp.MatrixValue$9();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "MatrixValue.java"
public class coho.interp.MatrixValue$factory implements coho.interp.ValueCreate {
  protected coho.interp.MatrixValue$factory();
  public coho.interp.Value create(java.lang.Object, java.lang.Object);
  public java.lang.Object foo();
}
Compiled from "MatrixValue.java"
class coho.interp.MatrixValue$factory$1 {
  public coho.common.matrix.Matrix x;
  final coho.interp.MatrixValue$factory this$0;
  coho.interp.MatrixValue$factory$1(coho.interp.MatrixValue$factory);
}
Compiled from "MyParser.java"
class coho.interp.MyParser {
  coho.interp.MyParser();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "PTeval.java"
public interface coho.interp.PTeval extends coho.interp.PTnode,coho.interp.Evaluator {
}
Compiled from "PTevalFactory.java"
public class coho.interp.PTevalFactory implements coho.interp.PTfactory {
  public coho.interp.PTevalFactory(coho.interp.PTfactory);
  public coho.interp.PTevalFactory(coho.interp.SymbolName);
  public coho.interp.PTevalFactory();
  public coho.interp.PTeval create(int, java.lang.String);
  public coho.interp.PTeval create(int, coho.interp.PTnode[]);
  public static java.lang.String production(coho.interp.PTnode);
  protected coho.interp.Evaluator eval(coho.interp.PTnode);
  public coho.interp.PTevalFactory nodeOperations(java.util.Enumeration);
  public coho.interp.PTnode create(int, coho.interp.PTnode[]);
  public coho.interp.PTnode create(int, java.lang.String);
}
Compiled from "PTfactory.java"
public interface coho.interp.PTfactory {
  public abstract coho.interp.PTnode create(int, java.lang.String);
  public abstract coho.interp.PTnode create(int, coho.interp.PTnode[]);
}
Compiled from "PTnode.java"
public interface coho.interp.PTnode {
  public abstract boolean isTerminal();
  public abstract int key();
  public abstract java.lang.String text() throws java.lang.IllegalArgumentException;
  public abstract coho.interp.PTnode child(int) throws java.lang.IllegalArgumentException;
  public abstract int n_children() throws java.lang.IllegalArgumentException;
  public abstract java.lang.String toString(int);
  public abstract java.lang.String toString();
}
Compiled from "PTnodeFactory.java"
public class coho.interp.PTnodeFactory implements coho.interp.PTfactory {
  public coho.interp.PTnodeFactory(coho.interp.SymbolName);
  public coho.interp.PTnodeFactory();
  public coho.interp.PTnode create(int, java.lang.String);
  public coho.interp.PTnode create(int, coho.interp.PTnode[]);
}
Compiled from "Parse.java"
public interface coho.interp.Parse {
  public abstract java_cup.runtime.Symbol parse() throws java.lang.Exception;
  public abstract coho.interp.PTfactory pf();
  public abstract coho.interp.SymbolName sname();
  public abstract coho.interp.Parse create(java.io.Reader);
}
Compiled from "Parser.java"
public class coho.interp.Parser extends java_cup.runtime.lr_parser {
  protected static final short[][] _production_table;
  protected static final short[][] _action_table;
  protected static final short[][] _reduce_table;
  protected coho.interp.CUP$Parser$actions action_obj;
  public coho.interp.Parser();
  public coho.interp.Parser(java_cup.runtime.Scanner);
  public short[][] production_table();
  public short[][] action_table();
  public short[][] reduce_table();
  protected void init_actions();
  public java_cup.runtime.Symbol do_action(int, java_cup.runtime.lr_parser, java.util.Stack, int) throws java.lang.Exception;
  public int start_state();
  public int start_production();
  public int EOF_sym();
  public int error_sym();
  public java_cup.runtime.Symbol scan() throws java.lang.Exception;
  protected void init_actions_2(coho.interp.PTfactory, java.util.concurrent.BlockingQueue<coho.interp.PTeval>);
  static {};
}
Compiled from "ParserThread.java"
public class coho.interp.ParserThread extends coho.interp.Parser implements coho.interp.Parse,java.lang.Runnable {
  public coho.interp.Scanner scanner();
  public java.io.Reader in();
  public coho.interp.PTfactory pf();
  public coho.interp.SymbolName sname();
  public java.util.concurrent.BlockingQueue<coho.interp.PTeval> queue();
  public coho.interp.ParserThread(java.io.Reader, coho.interp.PTfactory, java.util.concurrent.BlockingQueue<coho.interp.PTeval>, coho.interp.SymbolName);
  public coho.interp.Parse create(java.io.Reader);
  public java_cup.runtime.Symbol scan() throws java.io.IOException;
  public void syntax_error(java_cup.runtime.Symbol);
  public void unrecovered_syntax_error(java_cup.runtime.Symbol) throws coho.interp.EvalException;
  protected boolean error_recovery(boolean);
  public void report_error(java.lang.String, java.lang.Object);
  public void report_fatal_error(java.lang.String, java.lang.Object);
  protected void init_actions();
  public void run();
}
Compiled from "PolygonValue.java"
public class coho.interp.PolygonValue extends coho.interp.BasicValue {
  public static final double defaultErrtol;
  protected static final coho.interp.ValueCreate[] factories;
  static final boolean $assertionsDisabled;
  protected coho.interp.PolygonValue(coho.geom.twodim.Polygon);
  protected coho.interp.PolygonValue(coho.interp.RCvalue) throws coho.interp.EvalException;
  public coho.interp.RCvalue java2Matlab() throws coho.interp.EvalException;
  protected void rc_bad() throws coho.interp.EvalException;
  public boolean has_rc();
  public coho.geom.twodim.Polygon polygon();
  public coho.interp.Value negate() throws coho.interp.EvalException;
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public java.lang.String toString();
  public static coho.interp.ValueCreate[] factory();
  protected static coho.interp.Value grind(coho.interp.RCvalue, coho.interp.PolygonValue$Operation) throws coho.interp.EvalException;
  protected static coho.interp.Value grind(coho.interp.RCvalue, coho.interp.PolygonValue$Operation, int, int) throws coho.interp.EvalException;
  public static java.util.Enumeration pgonFns();
  static coho.interp.Function[] access$000();
  static {};
}
Compiled from "PolygonValue.java"
final class coho.interp.PolygonValue$1 implements coho.interp.Function {
  coho.interp.PolygonValue$1();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "PolygonValue.java"
final class coho.interp.PolygonValue$2 implements coho.interp.Function {
  coho.interp.PolygonValue$2();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "PolygonValue.java"
final class coho.interp.PolygonValue$3 implements coho.interp.Function {
  coho.interp.PolygonValue$3();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "PolygonValue.java"
final class coho.interp.PolygonValue$4 implements coho.interp.Function {
  coho.interp.PolygonValue$4();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "PolygonValue.java"
final class coho.interp.PolygonValue$5 implements coho.interp.Function {
  coho.interp.PolygonValue$5();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "PolygonValue.java"
final class coho.interp.PolygonValue$6 implements coho.interp.Function {
  coho.interp.PolygonValue$6();
  public java.lang.String name();
  public coho.interp.Value eval(coho.interp.RCvalue) throws coho.interp.EvalException;
}
Compiled from "PolygonValue.java"
final class coho.interp.PolygonValue$7 implements java.util.Enumeration {
  coho.interp.PolygonValue$7();
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "PolygonValue.java"
public interface coho.interp.PolygonValue$Operation {
  public abstract java.lang.String name();
  public abstract coho.interp.PolygonValue op(coho.interp.PolygonValue, coho.interp.PolygonValue) throws coho.interp.EvalException;
}
Compiled from "PolygonValue.java"
public class coho.interp.PolygonValue$factory_pgon implements coho.interp.ValueCreate {
  protected coho.interp.PolygonValue$factory_pgon();
  public coho.interp.Value create(java.lang.Object, java.lang.Object);
  public java.lang.Object foo();
}
Compiled from "PolygonValue.java"
class coho.interp.PolygonValue$factory_pgon$1 {
  public coho.geom.twodim.Polygon x;
  final coho.interp.PolygonValue$factory_pgon this$0;
  coho.interp.PolygonValue$factory_pgon$1(coho.interp.PolygonValue$factory_pgon);
}
Compiled from "PolygonValue.java"
public class coho.interp.PolygonValue$factory_rc implements coho.interp.ValueCreate {
  protected coho.interp.PolygonValue$factory_rc();
  public coho.interp.Value create(java.lang.Object, java.lang.Object) throws coho.interp.EvalException;
  public java.lang.Object foo();
}
Compiled from "PolygonValue.java"
class coho.interp.PolygonValue$factory_rc$1 {
  public coho.interp.RCvalue x;
  final coho.interp.PolygonValue$factory_rc this$0;
  coho.interp.PolygonValue$factory_rc$1(coho.interp.PolygonValue$factory_rc);
}
Compiled from "PrefixFilterWriter.java"
public class coho.interp.PrefixFilterWriter extends java.io.FilterWriter {
  public static java.lang.String prefix;
  public coho.interp.PrefixFilterWriter(java.io.Writer);
  public void write(int) throws java.io.IOException;
  public void write(char[], int, int) throws java.io.IOException;
  public void write(java.lang.String, int, int) throws java.io.IOException;
  public void write(java.lang.String) throws java.io.IOException;
  public void write(char[]) throws java.io.IOException;
  public void flush() throws java.io.IOException;
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "PromptingReader.java"
public class coho.interp.PromptingReader extends java.io.Reader {
  java.io.LineNumberReader in;
  java.lang.String prompt;
  java.lang.String line;
  int linePos;
  public coho.interp.PromptingReader(java.io.LineNumberReader);
  public coho.interp.PromptingReader(java.io.Reader, int);
  public coho.interp.PromptingReader(java.io.Reader);
  public coho.interp.PromptingReader(java.io.InputStream);
  public coho.interp.PromptingReader setPrompt(java.lang.String);
  public void close() throws java.io.IOException;
  public void mark(int) throws java.io.IOException;
  public boolean markSupported();
  public boolean ready() throws java.io.IOException;
  public void reset() throws java.io.IOException;
  public long skip(long) throws java.io.IOException;
  public int getLineNumber();
  public void setLineNumber(int);
  public int read() throws java.io.IOException;
  public int read(char[], int, int) throws java.io.IOException;
}
Compiled from "RCvalue.java"
public class coho.interp.RCvalue extends coho.interp.BasicValue {
  public boolean isRow();
  protected coho.interp.RCvalue(coho.interp.Value[], boolean);
  public coho.interp.Value negate() throws coho.interp.EvalException;
  public coho.interp.Value value(int);
  public int size();
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public java.lang.String toString();
  public static coho.interp.ValueCreate factory();
  static {};
}
Compiled from "RCvalue.java"
public class coho.interp.RCvalue$TailValue extends coho.interp.BasicValue {
  public int size();
  public coho.interp.RCvalue$TailValue(coho.interp.Value[]);
  public java.util.Enumeration enumer();
  public void print(java.io.Writer, coho.interp.Value[]) throws java.io.IOException, coho.interp.EvalException;
  static coho.interp.Value access$000(coho.interp.RCvalue$TailValue);
  static coho.interp.RCvalue$TailValue access$100(coho.interp.RCvalue$TailValue);
}
Compiled from "RCvalue.java"
class coho.interp.RCvalue$TailValue$1 implements java.util.Enumeration {
  final coho.interp.RCvalue$TailValue this$0;
  coho.interp.RCvalue$TailValue$1(coho.interp.RCvalue$TailValue);
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "RCvalue.java"
public class coho.interp.RCvalue$factory implements coho.interp.ValueCreate {
  protected coho.interp.RCvalue$factory();
  public coho.interp.Value create(java.lang.Object, java.lang.Object);
  public java.lang.Object foo();
}
Compiled from "RCvalue.java"
class coho.interp.RCvalue$factory$1 {
  public coho.interp.Value[] x;
  final coho.interp.RCvalue$factory this$0;
  coho.interp.RCvalue$factory$1(coho.interp.RCvalue$factory);
}
Compiled from "RangeValue.java"
public class coho.interp.RangeValue extends coho.interp.BasicValue {
  protected static final coho.interp.ValueCreate factory;
  protected coho.interp.RangeValue(int, int) throws coho.interp.EvalException;
  protected coho.interp.RangeValue(coho.common.matrix.Range);
  public coho.common.matrix.Range value();
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public coho.interp.Value negate() throws coho.interp.EvalException;
  public static coho.interp.ValueCreate factory();
  static {};
}
Compiled from "RangeValue.java"
public class coho.interp.RangeValue$factory implements coho.interp.ValueCreate {
  protected coho.interp.RangeValue$factory();
  public coho.interp.Value create(java.lang.Object, java.lang.Object);
  public java.lang.Object foo();
}
Compiled from "RangeValue.java"
class coho.interp.RangeValue$factory$1 {
  public coho.common.matrix.Range x;
  final coho.interp.RangeValue$factory this$0;
  coho.interp.RangeValue$factory$1(coho.interp.RangeValue$factory);
}
Compiled from "Scanner.java"
public class coho.interp.Scanner implements java_cup.runtime.Scanner {
  public final int YYEOF;
  public coho.interp.Scanner(java.io.Reader, coho.interp.PTfactory, coho.interp.SymbolName);
  public static void main(java.lang.String[]) throws java.lang.Exception;
  public coho.interp.Scanner(java.io.Reader);
  public coho.interp.Scanner(java.io.InputStream);
  public java_cup.runtime.Symbol next_token() throws java.io.IOException;
}
Compiled from "StringValue.java"
public class coho.interp.StringValue extends coho.interp.BasicValue {
  protected static final coho.interp.ValueCreate factory;
  protected coho.interp.StringValue(java.lang.String);
  public java.lang.String value();
  public coho.interp.Value negate() throws coho.interp.EvalException;
  public java.lang.String toString();
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public static coho.interp.ValueCreate factory();
  static {};
}
Compiled from "StringValue.java"
public class coho.interp.StringValue$factory implements coho.interp.ValueCreate {
  protected coho.interp.StringValue$factory();
  public coho.interp.Value create(java.lang.Object, java.lang.Object);
  public java.lang.Object foo();
}
Compiled from "StringValue.java"
class coho.interp.StringValue$factory$1 {
  public java.lang.String x;
  final coho.interp.StringValue$factory this$0;
  coho.interp.StringValue$factory$1(coho.interp.StringValue$factory);
}
Compiled from "Sym.java"
public class coho.interp.Sym {
  public static final int MINUS;
  public static final int IDENT;
  public static final int SEMI;
  public static final int EOF;
  public static final int PLAIN_DOUBLE;
  public static final int STRING;
  public static final int RBRACKET;
  public static final int LEX_ERROR;
  public static final int ASSIGN;
  public static final int COMMA;
  public static final int error;
  public static final int HEX_DOUBLE;
  public static final int RPAREN;
  public static final int LBRACKET;
  public static final int LPAREN;
  static final int assignment;
  static final int col;
  static final int colTail;
  static final int stateList;
  static final int rowTail;
  static final int statement;
  static final int $START;
  static final int expr;
  static final int row;
  public coho.interp.Sym();
}
Compiled from "SymbolName.java"
public class coho.interp.SymbolName {
  public coho.interp.SymbolName(java.lang.Class);
  public coho.interp.SymbolName();
  public java.lang.String terminalName(int);
  public java.lang.String nonterminalName(int);
  public int nameToKey(java.lang.String);
  public boolean isTerminal(java.lang.String);
  public boolean isNonterminal(java.lang.String);
  public int n_terminals();
  public int n_nonterminals();
  protected static boolean _isTerminal(java.lang.String);
  protected static java.lang.String[] getMap(java.lang.Class, boolean);
}
Compiled from "Value.java"
public interface coho.interp.Value {
  public abstract void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public abstract coho.interp.Value negate() throws coho.interp.EvalException;
  public abstract coho.interp.Value abs() throws coho.interp.EvalException;
  public abstract coho.interp.Value add(coho.interp.Value) throws coho.interp.EvalException;
  public abstract coho.interp.Value mult(coho.interp.Value) throws coho.interp.EvalException;
  public abstract coho.interp.Value less(coho.interp.Value) throws coho.interp.EvalException;
  public abstract coho.interp.Value leq(coho.interp.Value) throws coho.interp.EvalException;
  public abstract coho.interp.Value eq(coho.interp.Value) throws coho.interp.EvalException;
  public abstract coho.interp.Value neq(coho.interp.Value) throws coho.interp.EvalException;
  public abstract coho.interp.Value geq(coho.interp.Value) throws coho.interp.EvalException;
  public abstract coho.interp.Value greater(coho.interp.Value) throws coho.interp.EvalException;
  public abstract java.lang.String typeName();
}
Compiled from "ValueCreate.java"
public interface coho.interp.ValueCreate {
  public abstract coho.interp.Value create(java.lang.Object, java.lang.Object) throws coho.interp.EvalException;
  public abstract java.lang.Object foo();
}
Compiled from "ValueFactory.java"
public class coho.interp.ValueFactory {
  public coho.interp.ValueFactory();
  public static void init(java.util.Enumeration);
  public static void init();
  public static void noDefaultFactories();
  public static coho.interp.Value create(java.lang.Object, java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static void addFactory(coho.interp.ValueCreate) throws java.lang.IllegalArgumentException;
  public static void addFactory(coho.interp.ValueCreate[]);
  public static void addFactory(java.util.Enumeration);
  public static coho.interp.Value create(boolean, java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(boolean) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(java.lang.Byte, java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(java.lang.Byte) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(char, java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(char) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(double, java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(double) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(java.lang.Float, java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(java.lang.Float) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(java.lang.Integer, java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(java.lang.Integer) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(long, java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(long) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(java.lang.Short, java.lang.Object) throws java.util.NoSuchElementException, coho.interp.EvalException;
  public static coho.interp.Value create(java.lang.Short) throws java.util.NoSuchElementException, coho.interp.EvalException;
  static java.util.Hashtable access$000();
  static {};
}
Compiled from "ValueFactory.java"
final class coho.interp.ValueFactory$1 implements java.util.Enumeration {
  coho.interp.ValueCreate[] f;
  int i;
  coho.interp.ValueFactory$1();
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "ValueFactory.java"
public class coho.interp.ValueFactory$TryHarder {
  public coho.interp.ValueFactory$TryHarder(java.lang.Class);
  public coho.interp.ValueCreate match();
  protected void grind(java.lang.Class);
  protected void check(java.lang.Class);
}
Compiled from "ValueFactory.java"
public class coho.interp.ValueFactory$TryHarder$Pair {
  public java.lang.Class c;
  final coho.interp.ValueFactory$TryHarder this$0;
  public coho.interp.ValueCreate f();
  public java.lang.Class c();
  public coho.interp.ValueFactory$TryHarder$Pair(coho.interp.ValueFactory$TryHarder, coho.interp.ValueCreate, java.lang.Class);
}
Compiled from "VoidValue.java"
public class coho.interp.VoidValue extends coho.interp.BasicValue {
  protected static final coho.interp.ValueCreate factory;
  protected coho.interp.VoidValue();
  public coho.interp.Value negate();
  public void print(java.io.Writer, coho.interp.Value[]) throws coho.interp.EvalException, java.io.IOException;
  public java.lang.String toString();
  public static coho.interp.VoidValue instance();
  public static coho.interp.ValueCreate factory();
  static {};
}
Compiled from "VoidValue.java"
public class coho.interp.VoidValue$factory implements coho.interp.ValueCreate {
  protected coho.interp.VoidValue$factory();
  public coho.interp.Value create(java.lang.Object, java.lang.Object);
  public java.lang.Object foo();
}
Compiled from "VoidValue.java"
class coho.interp.VoidValue$factory$1 {
  public java.lang.Void x;
  final coho.interp.VoidValue$factory this$0;
  coho.interp.VoidValue$factory$1(coho.interp.VoidValue$factory);
}
Compiled from "CCohoLPSolver.java"
public class coho.jni.CCohoLPSolver implements coho.lp.solver.CohoSolver {
  public coho.lp.solver.CohoSolver$DataFactory dataFactory();
  public coho.jni.CCohoLPSolver(coho.lp.LP);
  public coho.lp.LP lp();
  public coho.lp.solver.CohoSolverResult opt();
  public coho.lp.solver.CohoSolverResult opt(coho.common.matrix.Matrix);
  public coho.lp.solver.CohoSolverResult opt(coho.common.matrix.Matrix, coho.lp.LPBasis, int);
  public static void main(java.lang.String[]);
  public coho.lp.LPResult opt(coho.common.matrix.Matrix);
  public coho.lp.LPResult opt();
  static {};
}
Compiled from "Constraint.java"
public final class coho.lp.Constraint {
  public coho.common.matrix.Matrix a();
  public coho.common.matrix.Matrix b();
  public coho.lp.Constraint(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public int[] size();
  public int size(int);
  public int nrows();
  public int ncols();
  public void drop(int);
  public java.lang.String toString();
}
Compiled from "LP.java"
public class coho.lp.LP {
  public coho.lp.Constraint eq();
  public coho.lp.Constraint neq();
  public coho.common.matrix.BooleanMatrix vars();
  public coho.common.matrix.Matrix c();
  public int nConstraints();
  public int nVars();
  public void setC(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix fwd();
  public coho.common.matrix.Matrix bwd();
  public void setWd(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.lp.LP(coho.lp.Constraint, coho.lp.Constraint, coho.common.matrix.BooleanMatrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.lp.LP(coho.lp.Constraint, coho.lp.Constraint, coho.common.matrix.BooleanMatrix, coho.common.matrix.Matrix);
  public coho.lp.LP(coho.lp.Constraint, coho.lp.Constraint, coho.common.matrix.BooleanMatrix);
  public static coho.lp.LP create(coho.lp.Constraint, coho.lp.Constraint, coho.common.matrix.BooleanMatrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public static coho.lp.LP create(coho.lp.Constraint, coho.lp.Constraint, coho.common.matrix.BooleanMatrix, coho.common.matrix.Matrix);
  public static coho.lp.LP create(coho.lp.Constraint, coho.lp.Constraint, coho.common.matrix.BooleanMatrix);
  public static coho.lp.LP createStandard(coho.lp.Constraint, coho.common.matrix.Matrix);
  public static coho.lp.LP createStandard(coho.lp.Constraint);
  public static coho.lp.LP createCoho(coho.lp.Constraint, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public static coho.lp.LP createCoho(coho.lp.Constraint, coho.common.matrix.Matrix);
  public static coho.lp.LP createCoho(coho.lp.Constraint);
  public static coho.lp.LP createCohoDual(coho.lp.Constraint, coho.common.matrix.Matrix);
  public static coho.lp.LP createCohoDual(coho.lp.Constraint);
  public boolean isStandard();
  public boolean isCoho();
  public boolean isCohoDual();
  public coho.lp.LP dual(coho.common.matrix.Matrix);
  public coho.lp.LP dual();
  public java.lang.String toString();
  public static void main(java.lang.String[]);
}
Compiled from "LPBasicResult.java"
public class coho.lp.LPBasicResult implements coho.lp.LPResult {
  protected final coho.lp.LPResult$ResultStatus status;
  protected final coho.common.number.CohoNumber optCost;
  protected final coho.lp.LPBasis[] optBases;
  protected final coho.common.matrix.Matrix[] optPoints;
  public coho.lp.LPBasicResult(coho.lp.LPResult$ResultStatus, coho.common.number.CohoNumber, coho.lp.LPBasis[], coho.common.matrix.Matrix[]);
  public coho.lp.LPBasicResult(coho.lp.LPResult$ResultStatus, coho.common.number.CohoNumber, coho.lp.LPBasis, coho.common.matrix.Matrix);
  public coho.lp.LPBasicResult(coho.lp.LPResult$ResultStatus, double, coho.lp.LPBasis, coho.common.matrix.Matrix);
  public coho.lp.LPResult$ResultStatus status();
  public double optcost();
  public coho.common.number.CohoNumber optCost();
  public coho.lp.LPBasis optBasis();
  public coho.lp.LPBasis[] optBases();
  public coho.common.matrix.Matrix optPoint();
  public coho.common.matrix.Matrix[] optPoints();
  public java.util.Iterator<coho.lp.LPBasis> optBasesIter();
  public java.util.Iterator<coho.common.matrix.Matrix> optPointsIter();
  public static int statusID(coho.lp.LPResult$ResultStatus);
  public static java.lang.String statusName(coho.lp.LPResult$ResultStatus);
  public java.lang.String statusName();
  public java.lang.String toString();
  public java.lang.String toString(boolean);
}
Compiled from "LPBasicResult.java"
class coho.lp.LPBasicResult$1 implements java.util.Iterator<coho.lp.LPBasis> {
  final coho.lp.LPBasicResult this$0;
  coho.lp.LPBasicResult$1(coho.lp.LPBasicResult);
  public boolean hasNext();
  public coho.lp.LPBasis next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "LPBasicResult.java"
class coho.lp.LPBasicResult$2 implements java.util.Iterator<coho.common.matrix.Matrix> {
  final coho.lp.LPBasicResult this$0;
  coho.lp.LPBasicResult$2(coho.lp.LPBasicResult);
  public boolean hasNext();
  public coho.common.matrix.Matrix next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "LPBasicResult.java"
class coho.lp.LPBasicResult$3 {
  static final int[] $SwitchMap$coho$lp$LPResult$ResultStatus;
  static {};
}
Compiled from "LPBasis.java"
public final class coho.lp.LPBasis implements java.lang.Comparable<coho.lp.LPBasis> {
  public static java.lang.String statusName(coho.lp.LPBasis$BasisStatus);
  public java.lang.String statusName();
  public coho.lp.LPBasis$BasisStatus primalStatus();
  public coho.lp.LPBasis$BasisStatus dualStatus();
  public void setStatus(coho.lp.LPBasis$BasisStatus, coho.lp.LPBasis$BasisStatus);
  public void setPrimalStatus(coho.lp.LPBasis$BasisStatus);
  public void setDualStatus(coho.lp.LPBasis$BasisStatus);
  public coho.common.matrix.IntegerMatrix basis();
  public coho.lp.LPBasis(coho.common.matrix.IntegerMatrix, coho.lp.LPBasis$BasisStatus, coho.lp.LPBasis$BasisStatus);
  public coho.lp.LPBasis(coho.common.matrix.IntegerMatrix);
  public coho.lp.LPBasis(coho.common.matrix.BooleanMatrix, coho.lp.LPBasis$BasisStatus, coho.lp.LPBasis$BasisStatus);
  public coho.lp.LPBasis(coho.common.matrix.BooleanMatrix);
  public static coho.lp.LPBasis create(coho.common.matrix.IntegerMatrix, coho.lp.LPBasis$BasisStatus, coho.lp.LPBasis$BasisStatus);
  public static coho.lp.LPBasis create(coho.common.matrix.IntegerMatrix);
  public static coho.lp.LPBasis create(coho.common.matrix.BooleanMatrix, coho.lp.LPBasis$BasisStatus, coho.lp.LPBasis$BasisStatus);
  public static coho.lp.LPBasis create(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BooleanMatrix booleanBasis(int);
  public coho.lp.LPBasis replace(int, int, coho.lp.LPBasis$BasisStatus, coho.lp.LPBasis$BasisStatus);
  public int compareTo(coho.lp.LPBasis);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(java.lang.Object);
}
Compiled from "LPBasis.java"
class coho.lp.LPBasis$1 {
  static final int[] $SwitchMap$coho$lp$LPBasis$BasisStatus;
  static {};
}
Compiled from "LPBasis.java"
public final class coho.lp.LPBasis$BasisStatus extends java.lang.Enum<coho.lp.LPBasis$BasisStatus> {
  public static final coho.lp.LPBasis$BasisStatus FEASIBLE;
  public static final coho.lp.LPBasis$BasisStatus POSSIBLEFEASIBLE;
  public static final coho.lp.LPBasis$BasisStatus INFEASIBLE;
  public static final coho.lp.LPBasis$BasisStatus UNKNOWN;
  public static coho.lp.LPBasis$BasisStatus[] values();
  public static coho.lp.LPBasis$BasisStatus valueOf(java.lang.String);
  static {};
}
Compiled from "LPError.java"
public class coho.lp.LPError extends java.lang.RuntimeException {
  public coho.lp.LPError();
  public coho.lp.LPError(java.lang.String);
  public coho.lp.LPError(java.lang.Throwable);
  public coho.lp.LPError(java.lang.String, java.lang.Throwable);
}
Compiled from "LPResult.java"
public interface coho.lp.LPResult {
  public abstract double optcost();
  public abstract coho.common.number.CohoNumber optCost();
  public abstract coho.lp.LPBasis optBasis();
  public abstract coho.lp.LPBasis[] optBases();
  public abstract coho.common.matrix.Matrix optPoint();
  public abstract coho.common.matrix.Matrix[] optPoints();
  public abstract coho.lp.LPResult$ResultStatus status();
  public abstract java.lang.String statusName();
  public abstract java.lang.String toString();
  public abstract java.lang.String toString(boolean);
}
Compiled from "LPResult.java"
public final class coho.lp.LPResult$ResultStatus extends java.lang.Enum<coho.lp.LPResult$ResultStatus> {
  public static final coho.lp.LPResult$ResultStatus OK;
  public static final coho.lp.LPResult$ResultStatus POSSIBLEOK;
  public static final coho.lp.LPResult$ResultStatus INFEASIBLE;
  public static final coho.lp.LPResult$ResultStatus UNBOUNDED;
  public static final coho.lp.LPResult$ResultStatus INFEASIBLEORUNBOUNDED;
  public static final coho.lp.LPResult$ResultStatus UNKNOWN;
  public static coho.lp.LPResult$ResultStatus[] values();
  public static coho.lp.LPResult$ResultStatus valueOf(java.lang.String);
  static {};
}
Compiled from "LPSolver.java"
public interface coho.lp.LPSolver {
  public abstract coho.lp.LPResult opt();
  public abstract coho.lp.LPResult opt(coho.common.matrix.Matrix);
  public abstract coho.lp.LP lp();
}
Compiled from "SimplexSolver.java"
public interface coho.lp.SimplexSolver extends coho.lp.LPSolver {
  public abstract coho.lp.LPResult opt(coho.lp.LPBasis);
  public abstract coho.lp.LPResult opt(coho.common.matrix.Matrix, coho.lp.LPBasis);
}
Compiled from "UnboundedLPError.java"
public class coho.lp.UnboundedLPError extends coho.lp.LPError {
  public coho.lp.UnboundedLPError();
  public coho.lp.UnboundedLPError(java.lang.String);
  public coho.lp.UnboundedLPError(java.lang.Throwable);
  public coho.lp.UnboundedLPError(java.lang.String, java.lang.Throwable);
}
Compiled from "DoubleIntervalLPProject.java"
public class coho.lp.project.DoubleIntervalLPProject extends coho.lp.project.LPProject {
  public static final double planeEps;
  public static final double minLength;
  public static final double maxInc;
  coho.lp.project.DoubleIntervalLPProject(coho.lp.LP, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  protected java.util.ArrayList<coho.geom.twodim.Line> findPlanes(coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "LPProject.java"
public class coho.lp.project.LPProject {
  protected final coho.lp.LP lp;
  protected coho.common.matrix.Matrix x;
  protected coho.common.matrix.Matrix y;
  protected coho.common.matrix.Matrix hull;
  coho.lp.solver.CohoSolverFactory$Solver solver;
  public static boolean projectPoint;
  public static boolean useOneHop;
  static final boolean $assertionsDisabled;
  public coho.common.matrix.Matrix hull();
  coho.lp.project.LPProject(coho.lp.LP, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.lp.solver.CohoSolverFactory$Solver);
  protected void convert();
  protected coho.common.matrix.Matrix grind();
  protected coho.lp.project.LPProject$Norm[] norm(coho.lp.solver.CohoMatrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.number.CohoNumber);
  protected coho.common.matrix.Matrix findPoints(coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  protected coho.common.matrix.Matrix findByLine(coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  protected static coho.geom.twodim.Point[] line2Points(java.util.ArrayList<coho.geom.twodim.Line>, coho.common.number.ScaleType);
  protected static coho.geom.twodim.Point[] matrix2Points(java.util.Collection<coho.common.matrix.Matrix>, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.number.ScaleType);
  protected static coho.geom.twodim.Polygon points2Polygon(coho.geom.twodim.Point[], double);
  protected static coho.common.matrix.Matrix poly2FullMatrix(coho.geom.twodim.Polygon, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public java.lang.String optBases2Matlab(coho.lp.LPBasis);
  protected coho.common.number.CohoNumber nextNorm(coho.lp.solver.CohoMatrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.number.CohoNumber);
  protected coho.common.matrix.Matrix findByPlane(coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  protected java.util.ArrayList<coho.geom.twodim.Line> findPlanes(coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public java.lang.String toString();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "LPProject.java"
public class coho.lp.project.LPProject$Norm {
  coho.common.number.CohoNumber norm;
  int evictIndex;
  final coho.lp.project.LPProject this$0;
  public coho.lp.project.LPProject$Norm(coho.lp.project.LPProject, coho.common.number.CohoNumber, int);
}
Compiled from "ProjectFactory.java"
public class coho.lp.project.ProjectFactory {
  public static double errTol;
  public static coho.lp.solver.CohoSolverFactory$Solver lpSolver;
  public coho.lp.project.ProjectFactory();
  public static coho.lp.project.LPProject getProject(coho.lp.LP, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public static coho.lp.project.LPProject getProject(coho.lp.LP, coho.common.matrix.Matrix, coho.common.matrix.Matrix, coho.lp.solver.CohoSolverFactory$Solver);
  static {};
}
Compiled from "ProjectFactory.java"
class coho.lp.project.ProjectFactory$1 {
  static final int[] $SwitchMap$coho$lp$solver$CohoSolverFactory$Solver;
  static {};
}
Compiled from "APRCohoMatrix.java"
public class coho.lp.solver.APRCohoMatrix extends coho.lp.solver.BasicCohoMatrix<coho.common.number.CohoAPR> {
  protected coho.lp.solver.APRCohoMatrix(coho.common.number.CohoAPR[][], int[][], int, int, boolean);
  public coho.lp.solver.APRCohoMatrix(coho.common.matrix.Matrix, boolean);
  public static coho.lp.solver.APRCohoMatrix create(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.APRCohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public static coho.lp.solver.APRCohoMatrix typeCast(coho.lp.solver.BasicCohoMatrix<coho.common.number.CohoAPR>);
  public coho.lp.solver.APRCohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.APRCohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.APRCohoMatrix transpose();
  public coho.lp.solver.APRCohoMatrix abs();
  public coho.lp.solver.APRCohoMatrix negate();
  public coho.common.matrix.APRMatrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public static void main(java.lang.String[]);
  public coho.common.matrix.BasicMatrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.lp.solver.BasicCohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.BasicCohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.BasicCohoMatrix abs();
  public coho.lp.solver.BasicCohoMatrix negate();
  public coho.lp.solver.BasicCohoMatrix transpose();
  public coho.lp.solver.BasicCohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.CohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.CohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.CohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.CohoMatrix abs();
  public coho.lp.solver.CohoMatrix negate();
  public coho.lp.solver.CohoMatrix transpose();
  public coho.common.matrix.Matrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.BasicMatrix transpose();
  public coho.common.matrix.BasicMatrix negate();
  public coho.common.matrix.BasicMatrix abs();
}
Compiled from "APRDoubleHybridCohoSolver.java"
public class coho.lp.solver.APRDoubleHybridCohoSolver extends coho.lp.solver.BasicCohoSolver {
  coho.lp.solver.DoubleIntervalCohoMatrix intervalA;
  coho.common.matrix.DoubleIntervalMatrix intervalB;
  coho.common.matrix.DoubleIntervalMatrix intervalC;
  coho.lp.solver.DoubleCohoMatrix doubleA;
  coho.common.matrix.DoubleMatrix doubleB;
  coho.common.matrix.DoubleMatrix doubleC;
  public coho.lp.solver.APRDoubleHybridCohoSolver(coho.lp.LP) throws coho.lp.LPError;
  protected coho.lp.LPBasis initialBasis(coho.common.matrix.Matrix);
  protected void init(coho.common.matrix.Matrix);
  protected coho.lp.LPBasis pivot(coho.lp.LPBasis) throws coho.lp.UnboundedLPError;
  public boolean cohoFeasible(coho.lp.LPBasis);
  public boolean cohoDualFeasible(coho.lp.LPBasis);
  public boolean isClearOpt(coho.lp.LPBasis);
  protected boolean isOpt(coho.lp.LPBasis);
}
Compiled from "APRIntervalDoubleHybridCohoSolver.java"
public class coho.lp.solver.APRIntervalDoubleHybridCohoSolver extends coho.lp.solver.APRIntervalHybridCohoSolver {
  coho.lp.solver.DoubleCohoMatrix doubleA;
  coho.common.matrix.DoubleMatrix doubleB;
  coho.common.matrix.DoubleMatrix doubleC;
  public coho.lp.solver.APRIntervalDoubleHybridCohoSolver(coho.lp.LP) throws coho.lp.LPError;
  protected coho.lp.LPBasis initialBasis(coho.common.matrix.Matrix);
  protected void init(coho.common.matrix.Matrix);
  protected coho.lp.LPBasis pivot(coho.lp.LPBasis) throws coho.lp.UnboundedLPError;
}
Compiled from "APRIntervalHybridCohoSolver.java"
public class coho.lp.solver.APRIntervalHybridCohoSolver extends coho.lp.solver.BasicCohoSolver {
  coho.lp.solver.DoubleIntervalCohoMatrix intervalA;
  coho.common.matrix.DoubleIntervalMatrix intervalB;
  coho.common.matrix.DoubleIntervalMatrix intervalC;
  static final boolean $assertionsDisabled;
  public coho.lp.solver.APRIntervalHybridCohoSolver(coho.lp.LP) throws coho.lp.LPError;
  protected coho.lp.LPBasis initialBasis(coho.common.matrix.Matrix);
  protected void init(coho.common.matrix.Matrix);
  protected coho.lp.LPBasis findOptBySimplex(coho.lp.LPBasis) throws coho.lp.UnboundedLPError;
  protected coho.lp.LPBasis pivot(coho.lp.LPBasis, java.util.Set<coho.lp.LPBasis>) throws coho.lp.UnboundedLPError, coho.lp.solver.APRIntervalHybridCohoSolver$OptInHistoryException;
  public boolean cohoFeasible(coho.lp.LPBasis);
  public boolean cohoDualFeasible(coho.lp.LPBasis);
  public boolean isClearOpt(coho.lp.LPBasis);
  protected boolean isOpt(coho.lp.LPBasis);
  static {};
}
Compiled from "APRIntervalHybridCohoSolver.java"
class coho.lp.solver.APRIntervalHybridCohoSolver$OptInHistoryException extends coho.lp.LPError {
  coho.lp.solver.APRIntervalHybridCohoSolver$OptInHistoryException();
}
Compiled from "AllOptCohoSolver.java"
public class coho.lp.solver.AllOptCohoSolver {
  public coho.lp.solver.AllOptCohoSolver();
  public static coho.lp.solver.CohoSolverResult findAllOptResult(coho.lp.LP, coho.lp.solver.CohoSolverResult);
}
Compiled from "BasicCohoMatrix.java"
public class coho.lp.solver.BasicCohoMatrix<V extends coho.common.number.CohoNumber> extends coho.common.matrix.BasicMatrix<V> implements coho.lp.solver.CohoMatrix {
  protected final int[][] pos;
  protected final boolean isDual;
  public boolean isDual();
  protected static boolean isValid(coho.common.matrix.Matrix, boolean);
  protected coho.lp.solver.BasicCohoMatrix(V, V[][], int[][], int, int, boolean);
  protected coho.lp.solver.BasicCohoMatrix(V, int, int, boolean);
  public coho.lp.solver.BasicCohoMatrix(V, coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.BasicCohoMatrix<V> convert(coho.common.matrix.Matrix, boolean);
  public V V(int, int);
  public coho.lp.solver.BasicCohoMatrix<V> assign(coho.common.number.CohoNumber, int, int);
  public V sum();
  public V prod();
  public V norm();
  public coho.lp.solver.BasicCohoMatrix<V> transpose();
  public coho.lp.solver.BasicCohoMatrix<V> negate();
  public coho.lp.solver.BasicCohoMatrix<V> abs();
  public coho.common.matrix.BasicMatrix mult(coho.common.matrix.Matrix);
  public coho.common.number.CohoNumber dotProd(coho.common.matrix.Matrix);
  public coho.lp.solver.BasicCohoMatrix<V> trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.BasicCohoMatrix<V> trim(coho.common.matrix.BooleanMatrix);
  public coho.common.matrix.BasicMatrix<V> expand();
  public coho.lp.solver.BasicCohoMatrix<V> randoms(int, int);
  public coho.lp.solver.BasicCohoMatrix<V> randoms(int, int, boolean);
  public coho.common.matrix.BasicMatrix<V> row(int);
  public coho.common.matrix.BasicMatrix<V> row(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix<V> row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.BasicMatrix<V> col(int);
  public coho.common.matrix.BasicMatrix<V> col(coho.common.matrix.Range);
  public coho.common.matrix.BasicMatrix<V> col(coho.common.matrix.IntegerMatrix);
  public boolean isZero(int, int);
  public coho.common.matrix.BooleanMatrix nonZero();
  public int nonZeroNumOfRow(int);
  public int nonZeroNumOfCol(int);
  protected int nonZeroNumS(int);
  protected int nonZeroNumL(int);
  public java.util.ArrayList<java.lang.Integer>[] colsAtRow();
  public java.util.ArrayList<java.lang.Integer>[] rowsAtCol();
  protected static void checkDims(coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.common.matrix.BasicMatrix<V> leftDiv(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix<V> getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  protected int solveDirect(coho.common.matrix.BasicMatrix<V>, coho.common.matrix.BasicMatrix<V>, coho.common.matrix.BooleanMatrix, coho.common.matrix.BooleanMatrix);
  protected void markOneNZCols(coho.common.matrix.BooleanMatrix, coho.common.matrix.BooleanMatrix) throws coho.common.matrix.SingularMatrixException;
  protected coho.common.matrix.BasicMatrix<V> solveCycles(coho.common.matrix.BasicMatrix<V>) throws coho.common.matrix.SingularMatrixException;
  protected coho.common.matrix.BasicMatrix<V> solveCycle(coho.common.matrix.BasicMatrix<V>, coho.common.matrix.BasicMatrix<V>) throws coho.common.matrix.SingularMatrixException;
  protected void solveRemainder(coho.common.matrix.BasicMatrix<V>, coho.common.matrix.BasicMatrix<V>, coho.common.matrix.BooleanMatrix);
  public static void main(java.lang.String[]);
  public coho.common.matrix.BasicMatrix transpose();
  public coho.common.matrix.BasicMatrix negate();
  public coho.common.matrix.BasicMatrix abs();
  public coho.common.matrix.BasicMatrix assign(coho.common.number.CohoNumber, int, int);
  public coho.common.matrix.Matrix leftDiv(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix mult(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.Matrix col(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix col(coho.common.matrix.Range);
  public coho.common.matrix.Matrix col(int);
  public coho.common.matrix.Matrix row(coho.common.matrix.IntegerMatrix);
  public coho.common.matrix.Matrix row(coho.common.matrix.Range);
  public coho.common.matrix.Matrix row(int);
  public coho.common.matrix.Matrix assign(coho.common.number.CohoNumber, int, int);
  public coho.lp.solver.CohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.CohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.CohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.CohoMatrix abs();
  public coho.lp.solver.CohoMatrix negate();
  public coho.lp.solver.CohoMatrix transpose();
  public coho.common.matrix.Matrix expand();
  public coho.common.matrix.Matrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
}
Compiled from "BasicCohoSolver.java"
public class coho.lp.solver.BasicCohoSolver implements coho.lp.solver.CohoSolver {
  protected final coho.lp.LP lp;
  protected coho.lp.solver.CohoMatrix dualA;
  protected coho.common.matrix.Matrix dualB;
  protected coho.common.matrix.Matrix dualC;
  protected int nrows;
  protected int ncols;
  protected boolean isDual;
  protected boolean findBasis;
  public static final double BIGM;
  public static boolean CohoSolver_DEBUG;
  public static boolean CohoSolver_DEBUG_DETAIL;
  public static int oneHopMethod;
  static final boolean $assertionsDisabled;
  public coho.lp.LP lp();
  public coho.lp.solver.CohoSolver$DataFactory dataFactory();
  coho.lp.solver.BasicCohoSolver(coho.lp.LP, coho.lp.solver.CohoSolver$DataFactory) throws coho.lp.LPError;
  public coho.lp.solver.BasicCohoSolver(coho.lp.LP) throws coho.lp.LPError;
  public coho.lp.solver.CohoSolverResult opt();
  public coho.lp.solver.CohoSolverResult opt(coho.common.matrix.Matrix);
  public coho.lp.solver.CohoSolverResult opt(coho.lp.LPBasis);
  public coho.lp.solver.CohoSolverResult opt(coho.common.matrix.Matrix, coho.lp.LPBasis);
  protected void init(coho.common.matrix.Matrix);
  protected coho.lp.LPBasis initialBasis(coho.common.matrix.Matrix);
  protected coho.lp.LPBasis findOptBySimplex(coho.lp.LPBasis) throws coho.lp.UnboundedLPError;
  protected coho.lp.LPBasis pivot(coho.lp.LPBasis) throws coho.lp.UnboundedLPError;
  public coho.lp.solver.CohoSolverResult opt(coho.common.matrix.Matrix, coho.lp.LPBasis, int);
  protected coho.lp.LPBasis findOptInOneHop(coho.lp.LPBasis, int) throws coho.lp.UnboundedLPError;
  public coho.lp.LPResult$ResultStatus resultStatus(coho.lp.LPBasis);
  public coho.lp.LPResult$ResultStatus resultStatus(coho.lp.LPBasis, coho.common.matrix.Matrix, coho.common.matrix.Matrix);
  public coho.lp.solver.CohoSolverResult cohoDualResult(coho.lp.LPBasis);
  public coho.lp.solver.CohoSolverResult cohoDualResult(coho.lp.LPBasis, boolean);
  public coho.common.matrix.Matrix cohoDualPoint(coho.lp.LPBasis) throws coho.common.matrix.SingularMatrixException;
  public coho.common.number.CohoNumber cohoDualCost(coho.lp.LPBasis);
  public coho.common.number.CohoNumber cohoDualCost(coho.common.matrix.Matrix);
  public boolean cohoDualFeasible(coho.lp.LPBasis);
  public boolean cohoDualFeasible(coho.lp.LPBasis, coho.common.matrix.Matrix);
  public coho.lp.solver.CohoSolverResult cohoResult(coho.lp.LPBasis);
  public coho.lp.solver.CohoSolverResult cohoResult(coho.lp.LPBasis, boolean);
  public coho.common.matrix.Matrix cohoPoint(coho.lp.LPBasis) throws coho.common.matrix.SingularMatrixException;
  public coho.common.number.CohoNumber cohoCost(coho.common.matrix.Matrix);
  public coho.common.number.CohoNumber cohoCost(coho.lp.LPBasis);
  public boolean cohoFeasible(coho.lp.LPBasis);
  public boolean cohoFeasible(coho.lp.LPBasis, coho.common.matrix.Matrix);
  public boolean isClearOpt(coho.lp.LPBasis);
  public static void main(java.lang.String[]);
  public coho.lp.LPResult opt(coho.common.matrix.Matrix);
  public coho.lp.LPResult opt();
  static {};
}
Compiled from "BasicCohoSolver.java"
class coho.lp.solver.BasicCohoSolver$1 {
  static final int[] $SwitchMap$coho$lp$LPResult$ResultStatus;
  static {};
}
Compiled from "CohoMatrix.java"
public interface coho.lp.solver.CohoMatrix extends coho.common.matrix.SparseMatrix {
  public abstract coho.common.matrix.Matrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public abstract coho.common.matrix.Matrix leftDiv(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public abstract java.util.ArrayList<java.lang.Integer>[] colsAtRow();
  public abstract java.util.ArrayList<java.lang.Integer>[] rowsAtCol();
  public abstract boolean isDual();
  public abstract coho.common.matrix.Matrix expand();
  public abstract coho.lp.solver.CohoMatrix transpose();
  public abstract coho.lp.solver.CohoMatrix negate();
  public abstract coho.lp.solver.CohoMatrix abs();
  public abstract coho.lp.solver.CohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public abstract coho.lp.solver.CohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public abstract coho.lp.solver.CohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
}
Compiled from "CohoSolver.java"
public interface coho.lp.solver.CohoSolver extends coho.lp.LPSolver {
  public static final coho.lp.solver.CohoSolver$DataFactory doubleFactory;
  public static final coho.lp.solver.CohoSolver$DataFactory aprFactory;
  public static final coho.lp.solver.CohoSolver$DataFactory doubleIntervalFactory;
  public abstract coho.lp.solver.CohoSolverResult opt();
  public abstract coho.lp.solver.CohoSolverResult opt(coho.common.matrix.Matrix);
  public abstract coho.lp.solver.CohoSolverResult opt(coho.common.matrix.Matrix, coho.lp.LPBasis, int);
  public abstract coho.lp.solver.CohoSolver$DataFactory dataFactory();
  public coho.lp.LPResult opt(coho.common.matrix.Matrix);
  public coho.lp.LPResult opt();
  static {};
}
Compiled from "CohoSolver.java"
final class coho.lp.solver.CohoSolver$1 implements coho.lp.solver.CohoSolver$DataFactory {
  coho.lp.solver.CohoSolver$1();
  public coho.lp.solver.DoubleCohoMatrix createCohoMatrix(coho.common.matrix.Matrix, boolean);
  public coho.common.matrix.DoubleMatrix createMatrix(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix createMatrix(coho.common.matrix.Matrix);
  public coho.lp.solver.CohoMatrix createCohoMatrix(coho.common.matrix.Matrix, boolean);
}
Compiled from "CohoSolver.java"
final class coho.lp.solver.CohoSolver$2 implements coho.lp.solver.CohoSolver$DataFactory {
  coho.lp.solver.CohoSolver$2();
  public coho.lp.solver.APRCohoMatrix createCohoMatrix(coho.common.matrix.Matrix, boolean);
  public coho.common.matrix.APRMatrix createMatrix(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix createMatrix(coho.common.matrix.Matrix);
  public coho.lp.solver.CohoMatrix createCohoMatrix(coho.common.matrix.Matrix, boolean);
}
Compiled from "CohoSolver.java"
final class coho.lp.solver.CohoSolver$3 implements coho.lp.solver.CohoSolver$DataFactory {
  coho.lp.solver.CohoSolver$3();
  public coho.lp.solver.DoubleIntervalCohoMatrix createCohoMatrix(coho.common.matrix.Matrix, boolean);
  public coho.common.matrix.DoubleIntervalMatrix createMatrix(coho.common.matrix.Matrix);
  public coho.common.matrix.Matrix createMatrix(coho.common.matrix.Matrix);
  public coho.lp.solver.CohoMatrix createCohoMatrix(coho.common.matrix.Matrix, boolean);
}
Compiled from "CohoSolver.java"
public interface coho.lp.solver.CohoSolver$DataFactory {
  public abstract coho.lp.solver.CohoMatrix createCohoMatrix(coho.common.matrix.Matrix, boolean);
  public abstract coho.common.matrix.Matrix createMatrix(coho.common.matrix.Matrix);
}
Compiled from "CohoSolverFactory.java"
public class coho.lp.solver.CohoSolverFactory {
  public static coho.lp.solver.CohoSolverFactory$Solver SOLVER;
  public coho.lp.solver.CohoSolverFactory();
  public static coho.lp.solver.CohoSolver getSolver(coho.lp.LP);
  public static coho.lp.solver.CohoSolver getSolver(coho.lp.LP, coho.lp.solver.CohoSolverFactory$Solver);
  static {};
}
Compiled from "CohoSolverFactory.java"
class coho.lp.solver.CohoSolverFactory$1 {
  static final int[] $SwitchMap$coho$lp$solver$CohoSolverFactory$Solver;
  static {};
}
Compiled from "CohoSolverFactory.java"
public final class coho.lp.solver.CohoSolverFactory$Solver extends java.lang.Enum<coho.lp.solver.CohoSolverFactory$Solver> {
  public static final coho.lp.solver.CohoSolverFactory$Solver DOUBLE;
  public static final coho.lp.solver.CohoSolverFactory$Solver APR;
  public static final coho.lp.solver.CohoSolverFactory$Solver DOUBLEINTERVAL;
  public static final coho.lp.solver.CohoSolverFactory$Solver AIHYBRID;
  public static final coho.lp.solver.CohoSolverFactory$Solver ADHYBRID;
  public static final coho.lp.solver.CohoSolverFactory$Solver AIDHYBRID;
  public static final coho.lp.solver.CohoSolverFactory$Solver C;
  public static coho.lp.solver.CohoSolverFactory$Solver[] values();
  public static coho.lp.solver.CohoSolverFactory$Solver valueOf(java.lang.String);
  static {};
}
Compiled from "CohoSolverResult.java"
public class coho.lp.solver.CohoSolverResult extends coho.lp.LPBasicResult {
  public coho.lp.solver.CohoSolverResult(coho.lp.LPResult$ResultStatus, coho.common.number.CohoNumber, coho.lp.LPBasis[], coho.common.matrix.Matrix[]);
  public coho.lp.solver.CohoSolverResult(coho.lp.LPResult$ResultStatus, coho.common.number.CohoNumber, coho.lp.LPBasis, coho.common.matrix.Matrix);
  public static coho.lp.solver.CohoSolverResult create(coho.lp.LPResult$ResultStatus, coho.common.number.CohoNumber, coho.lp.LPBasis[], coho.common.matrix.Matrix[]);
  public static coho.lp.solver.CohoSolverResult create(coho.lp.LPResult$ResultStatus, coho.common.number.CohoNumber, coho.lp.LPBasis, coho.common.matrix.Matrix);
}
Compiled from "DoubleCohoMatrix.java"
public class coho.lp.solver.DoubleCohoMatrix extends coho.lp.solver.BasicCohoMatrix<coho.common.number.CohoDouble> {
  protected coho.lp.solver.DoubleCohoMatrix(coho.common.number.CohoDouble[][], int[][], int, int, boolean);
  public coho.lp.solver.DoubleCohoMatrix(coho.common.matrix.Matrix, boolean);
  public static coho.lp.solver.DoubleCohoMatrix create(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.DoubleCohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public static coho.lp.solver.DoubleCohoMatrix typeCast(coho.lp.solver.BasicCohoMatrix<coho.common.number.CohoDouble>);
  public coho.lp.solver.DoubleCohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.DoubleCohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.DoubleCohoMatrix transpose();
  public coho.lp.solver.DoubleCohoMatrix abs();
  public coho.lp.solver.DoubleCohoMatrix negate();
  public coho.common.matrix.DoubleMatrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public static void main(java.lang.String[]);
  public coho.common.matrix.BasicMatrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.lp.solver.BasicCohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.BasicCohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.BasicCohoMatrix abs();
  public coho.lp.solver.BasicCohoMatrix negate();
  public coho.lp.solver.BasicCohoMatrix transpose();
  public coho.lp.solver.BasicCohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.CohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.CohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.CohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.CohoMatrix abs();
  public coho.lp.solver.CohoMatrix negate();
  public coho.lp.solver.CohoMatrix transpose();
  public coho.common.matrix.Matrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.BasicMatrix transpose();
  public coho.common.matrix.BasicMatrix negate();
  public coho.common.matrix.BasicMatrix abs();
}
Compiled from "DoubleIntervalCohoMatrix.java"
public class coho.lp.solver.DoubleIntervalCohoMatrix extends coho.lp.solver.BasicCohoMatrix<coho.common.number.DoubleInterval> {
  public static final double MAXINTERVAL;
  public static final double MINXMIDDLE;
  public static boolean checkException;
  public static double MAXCONDNUMBER;
  public static double DEPENDENT;
  protected coho.lp.solver.DoubleIntervalCohoMatrix(coho.common.number.DoubleInterval[][], int[][], int, int, boolean);
  public coho.lp.solver.DoubleIntervalCohoMatrix(coho.common.matrix.Matrix, boolean);
  public static coho.lp.solver.DoubleIntervalCohoMatrix create(coho.common.matrix.Matrix, boolean);
  public static coho.lp.solver.DoubleIntervalCohoMatrix typeCast(coho.lp.solver.BasicCohoMatrix<coho.common.number.DoubleInterval>);
  public coho.lp.solver.DoubleIntervalCohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.DoubleIntervalCohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.DoubleIntervalCohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.DoubleIntervalCohoMatrix transpose();
  public coho.lp.solver.DoubleIntervalCohoMatrix abs();
  public coho.lp.solver.DoubleIntervalCohoMatrix negate();
  public coho.common.matrix.DoubleIntervalMatrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  protected coho.common.matrix.DoubleIntervalMatrix solveCycle(coho.common.matrix.BasicMatrix<coho.common.number.DoubleInterval>, coho.common.matrix.BasicMatrix<coho.common.number.DoubleInterval>) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BooleanMatrix independentConstraint();
  public static void main(java.lang.String[]);
  protected coho.common.matrix.BasicMatrix solveCycle(coho.common.matrix.BasicMatrix, coho.common.matrix.BasicMatrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.BasicMatrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.lp.solver.BasicCohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.BasicCohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.BasicCohoMatrix abs();
  public coho.lp.solver.BasicCohoMatrix negate();
  public coho.lp.solver.BasicCohoMatrix transpose();
  public coho.lp.solver.BasicCohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.CohoMatrix convert(coho.common.matrix.Matrix, boolean);
  public coho.lp.solver.CohoMatrix trim(coho.common.matrix.BooleanMatrix);
  public coho.lp.solver.CohoMatrix trim(coho.common.matrix.IntegerMatrix);
  public coho.lp.solver.CohoMatrix abs();
  public coho.lp.solver.CohoMatrix negate();
  public coho.lp.solver.CohoMatrix transpose();
  public coho.common.matrix.Matrix getSolution(coho.common.matrix.Matrix) throws coho.common.matrix.SingularMatrixException;
  public coho.common.matrix.Matrix transpose();
  public coho.common.matrix.Matrix negate();
  public coho.common.matrix.Matrix abs();
  public coho.common.matrix.BasicMatrix transpose();
  public coho.common.matrix.BasicMatrix negate();
  public coho.common.matrix.BasicMatrix abs();
  static {};
}
Compiled from "DoubleIntervalCohoSolver.java"
public class coho.lp.solver.DoubleIntervalCohoSolver extends coho.lp.solver.BasicCohoSolver {
  static final boolean $assertionsDisabled;
  coho.lp.solver.DoubleIntervalCohoSolver(coho.lp.LP) throws coho.lp.LPError;
  public coho.lp.solver.CohoSolverResult opt(coho.common.matrix.Matrix);
  protected coho.lp.solver.CohoSolverResult findOptBySimplex(coho.lp.LPBasis, java.util.ArrayList<coho.lp.LPBasis>) throws coho.lp.UnboundedLPError;
  public coho.lp.solver.CohoSolverResult cohoDualResult(coho.lp.LPBasis);
  public boolean cohoDualFeasible(coho.lp.LPBasis);
  public coho.lp.LPResult opt(coho.common.matrix.Matrix);
  static {};
}
Compiled from "DoubleIntervalCohoSolver.java"
class coho.lp.solver.DoubleIntervalCohoSolver$1 {
  static final int[] $SwitchMap$coho$lp$LPResult$ResultStatus;
  static {};
}
Compiled from "DoubleIntervalCohoSolver.java"
public class coho.lp.solver.DoubleIntervalCohoSolver$FindClearOptResultException extends java.lang.RuntimeException {
  coho.lp.solver.CohoSolverResult r;
  final coho.lp.solver.DoubleIntervalCohoSolver this$0;
  public coho.lp.solver.DoubleIntervalCohoSolver$FindClearOptResultException(coho.lp.solver.DoubleIntervalCohoSolver, coho.lp.solver.CohoSolverResult);
  public coho.lp.solver.CohoSolverResult getResult();
  public java.lang.String toString();
}
Compiled from "DoubleIntervalCohoSolver.java"
public class coho.lp.solver.DoubleIntervalCohoSolver$IllCondBasisException extends java.lang.RuntimeException {
  coho.lp.LPBasis basis;
  double cn;
  final coho.lp.solver.DoubleIntervalCohoSolver this$0;
  public coho.lp.LPBasis getBasis();
  public double getCN();
  public coho.lp.solver.DoubleIntervalCohoSolver$IllCondBasisException(coho.lp.solver.DoubleIntervalCohoSolver, coho.lp.LPBasis, double);
  public coho.lp.solver.DoubleIntervalCohoSolver$IllCondBasisException(coho.lp.solver.DoubleIntervalCohoSolver, coho.lp.LPBasis, double, java.lang.String);
  public coho.lp.solver.DoubleIntervalCohoSolver$IllCondBasisException(coho.lp.solver.DoubleIntervalCohoSolver, coho.lp.LPBasis, java.lang.Throwable);
  public coho.lp.solver.DoubleIntervalCohoSolver$IllCondBasisException(coho.lp.solver.DoubleIntervalCohoSolver, coho.lp.LPBasis, java.lang.String, java.lang.Throwable);
}
