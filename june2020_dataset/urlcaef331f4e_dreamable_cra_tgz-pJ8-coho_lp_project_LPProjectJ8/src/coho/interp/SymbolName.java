package coho.interp;

/**
 * Map the symbol name with symbol key based on a class. The default class is Sym 
 * generated by CUP
 */
// WARNING: the generation of tokenMap and nontermMap is done
//   by examining the sym class.  I assume that any name that starts
//   with a capital letter or is the name "error" is the name of a
//   token, and all other names are non-terminals.  If you introduce
//   tokens or non-terminals that don't follow these conventions,
//   toString will print garbage and may generate an Exception.

import java.lang.reflect.Field;
import java.util.NoSuchElementException;
import java.util.TreeMap;

public class SymbolName {
  private static String[] termMap;
  private static String[] nontermMap;
  private TreeMap stringToKey;


  public SymbolName(Class symClass) {
    termMap = getMap(symClass, true);
    nontermMap = getMap(symClass, false);
    Field[] f = symClass.getDeclaredFields();
    stringToKey = new TreeMap();
    try {
      for(int i = 0; i < f.length; i++)
        stringToKey.put(f[i].getName(), new Integer(f[i].getInt(symClass)));
    } catch (IllegalAccessException e) {
      throw new RuntimeException(e.toString());
    }
  }
  public SymbolName() { this((new Sym()).getClass()); }


  public String terminalName(int key) { return(termMap[key]); }
  public String nonterminalName(int key) { return(nontermMap[key]); }
  public int nameToKey(String name) {
    Integer k = (Integer)(stringToKey.get(name));
    if(k == null)
      throw new NoSuchElementException(
        "Coho.geom.interp.nameToKey(" + name + ")");
    return(k.intValue());
  }


  public boolean isTerminal(String name) {
    return((stringToKey.get(name) != null) && _isTerminal(name));
  }


  public boolean isNonterminal(String name) {
    return((stringToKey.get(name) != null) && !_isTerminal(name));
  }

  public int n_terminals() { return(termMap.length); }
  public int n_nonterminals() { return(nontermMap.length); }


  protected static boolean _isTerminal(String name) {
    return(    Character.isUpperCase(name.charAt(0))
            || (name.compareTo("error") == 0));
  }


  protected static String[] getMap(Class c, boolean doTerminals) {
    Field[] f = c.getDeclaredFields();
    int max = 0;

    try {
      for(int i = 0; i < f.length; i++) {
        if(_isTerminal(f[i].getName()) == doTerminals)
          max = Math.max(max, f[i].getInt(null));
      }

      String[] x = new String[max+1];
      for(int i = 0; i < f.length; i++)
        if(_isTerminal(f[i].getName()) == doTerminals)
          x[f[i].getInt(null)] = f[i].getName();
      return(x);
    } catch (Exception e) {
      throw new RuntimeException(e.getMessage());
    }
  }
//  public static void main(String[] args){
//	  SymbolName sname = new SymbolName();
//	  int key = sname.nameToKey("stateList");
//	  System.out.println(key);
//  }
}
