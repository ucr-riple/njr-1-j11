Compiled from "Main.java"
public class Main {
  static vsdk.toolkit.common.linealAlgebra.Matrix4x4 mat;
  public Main();
  public static void main(java.lang.String[]);
}
Compiled from "Tetris3d.java"
public class Tetris3d implements javax.media.opengl.GLEventListener,java.awt.event.KeyListener,java.awt.event.MouseListener,java.awt.event.MouseMotionListener,java.awt.event.MouseWheelListener {
  public static boolean band;
  public Tetris3d();
  public static void main(java.lang.String[]);
  public void display(javax.media.opengl.GLAutoDrawable);
  public void init(javax.media.opengl.GLAutoDrawable);
  public void dispose(javax.media.opengl.GLAutoDrawable);
  public void displayChanged(javax.media.opengl.GLAutoDrawable, boolean, boolean);
  public void reshape(javax.media.opengl.GLAutoDrawable, int, int, int, int);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyTyped(java.awt.event.KeyEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseWheelMoved(java.awt.event.MouseWheelEvent);
  static void access$000(Tetris3d);
  static {};
}
Compiled from "Tetris3d.java"
class Tetris3d$1 implements java.awt.event.ActionListener {
  final Tetris3d this$0;
  Tetris3d$1(Tetris3d);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Model.java"
public class model.Model {
  public static final int YES;
  public static final int NO;
  public static final int MAYBE;
  public static final int MAX_HEIGHT;
  public static boolean band;
  public model.Model();
  public void resetMatrix();
  public boolean[][][] getMatrix();
  public void setMatrix(boolean[][][]);
  public void incrementDesfX(model.shapes.Shape);
  public void decrementDesfX(model.shapes.Shape);
  public void incrementDesfY(model.shapes.Shape);
  public void decrementDesfY(model.shapes.Shape);
  public boolean rotateYes(model.shapes.Shape);
  public boolean rotateYesReverse(model.shapes.Shape);
  public boolean rotateNo(model.shapes.Shape);
  public boolean rotateNoReverse(model.shapes.Shape);
  public boolean rotateMaybe(model.shapes.Shape);
  public boolean rotateMaybeReverse(model.shapes.Shape);
  public boolean incrementLevel(model.shapes.Shape);
  public synchronized boolean incrementLevel2(model.shapes.Shape);
  static {};
}
Compiled from "Shape.java"
public abstract class model.shapes.Shape implements java.lang.Cloneable {
  public static final double BOX_LENGTH;
  public static final double SPACE;
  public static final vsdk.toolkit.common.linealAlgebra.Matrix4x4 yesMat;
  public static final vsdk.toolkit.common.linealAlgebra.Matrix4x4 noMat;
  public static final vsdk.toolkit.common.linealAlgebra.Matrix4x4 maybeMat;
  protected boolean[][][] matrix;
  protected vsdk.toolkit.common.ColorRgb color;
  protected int desfX;
  protected int desfY;
  protected int level;
  protected model.shapes.Shape();
  public boolean[][][] getMatrix();
  public void rotateYes();
  public void rotateNo();
  public void rotateMaybe();
  protected abstract void resetMatrix();
  public vsdk.toolkit.common.ColorRgb getColor();
  public int getDesfX();
  public void setDesfX(int);
  public int getDesfY();
  public void setDesfY(int);
  public int getLevel();
  public void setLevel(int);
  public void incrementDesfX();
  public void decrementDesfX();
  public void incrementDesfY();
  public void decrementDesfY();
  public void rotate(int);
  static {};
}
Compiled from "TetrisBar.java"
public class model.shapes.TetrisBar extends model.shapes.Shape {
  public model.shapes.TetrisBar();
  protected void resetMatrix();
}
Compiled from "TetrisBox.java"
public class model.shapes.TetrisBox extends model.shapes.Shape {
  public model.shapes.TetrisBox();
  protected void resetMatrix();
}
Compiled from "TetrisL.java"
public class model.shapes.TetrisL extends model.shapes.Shape {
  public model.shapes.TetrisL();
  protected void resetMatrix();
}
Compiled from "TetrisSimpleBox.java"
public class model.shapes.TetrisSimpleBox extends model.shapes.Shape {
  public model.shapes.TetrisSimpleBox(int, int, int);
  public int getX();
  public void setX(int);
  public int getY();
  public void setY(int);
  public int getZ();
  public void setZ(int);
  protected void resetMatrix();
}
Compiled from "TetrisT.java"
public class model.shapes.TetrisT extends model.shapes.Shape {
  public model.shapes.TetrisT();
  protected void resetMatrix();
}
Compiled from "ModelRenderer.java"
public class view.render.ModelRenderer {
  public view.render.ModelRenderer();
  public static void drawModel(javax.media.opengl.GL2, model.Model, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  static {};
}
Compiled from "TetrisShapeRenderer.java"
public class view.render.TetrisShapeRenderer {
  public view.render.TetrisShapeRenderer();
  public static void draw(javax.media.opengl.GL2, model.shapes.Shape, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
}
Compiled from "TetrisSimpleBoxRenderer.java"
public class view.render.TetrisSimpleBoxRenderer {
  public view.render.TetrisSimpleBoxRenderer();
  public static void draw(javax.media.opengl.GL2, model.shapes.Shape, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
}
Compiled from "WallRenderer.java"
public class view.render.WallRenderer {
  public view.render.WallRenderer();
  public static void draw(javax.media.opengl.GL2, int, int, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
}
Compiled from "ArrayListOfDoubles.java"
public class vsdk.toolkit.common.ArrayListOfDoubles extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public vsdk.toolkit.common.ArrayListOfDoubles(int);
  public int size();
  public double get(int);
  public void set(int, double);
  public void add(double);
  public void clean();
  public static void quicksort(double[], int, int);
  public void sort();
}
Compiled from "ArrayListOfInts.java"
public class vsdk.toolkit.common.ArrayListOfInts extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public vsdk.toolkit.common.ArrayListOfInts(int);
  public int size();
  public int get(int);
  public void set(int, int);
  public void add(int);
  public void clean();
  public static void quicksort(int[], int, int);
  public void sort();
}
Compiled from "CircularDoubleLinkedList.java"
public class vsdk.toolkit.common.CircularDoubleLinkedList<E> extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public vsdk.toolkit.common.CircularDoubleLinkedList();
  public int size();
  public void add(E);
  public void insertBefore(E, E);
  public void locateWindowAtIndex(int);
  public boolean locateWindowAtElem(E);
  public void swapElements(E, E);
  public E next();
  public E getWindow();
  public E previous();
  public E get(int);
  public void remove(int);
  public void removeElemAtWindow();
  public void push(E);
  public void reverse();
}
Compiled from "ColorRgb.java"
public class vsdk.toolkit.common.ColorRgb extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public double r;
  public double g;
  public double b;
  public vsdk.toolkit.common.ColorRgb();
  public vsdk.toolkit.common.ColorRgb(vsdk.toolkit.common.ColorRgb);
  public vsdk.toolkit.common.ColorRgb(double, double, double);
  public void modulate(vsdk.toolkit.common.ColorRgb);
  public double getR();
  public double getG();
  public double getB();
  public void setR(double);
  public void setG(double);
  public void setB(double);
  public float[] exportToFloatArrayVect();
  public double[] exportToDoubleArrayVect();
  public java.lang.String toString();
  public double distance(vsdk.toolkit.common.ColorRgb);
  public void clone(vsdk.toolkit.common.ColorRgb);
  public void importFromSigned8bitPixel(byte, byte, byte);
}
Compiled from "Entity.java"
public class vsdk.toolkit.common.Entity implements java.io.Serializable {
  public static final long serialVersionUID;
  public vsdk.toolkit.common.Entity();
  public int getSizeInBytes();
}
Compiled from "FundamentalEntity.java"
public abstract class vsdk.toolkit.common.FundamentalEntity extends vsdk.toolkit.common.Entity {
  public vsdk.toolkit.common.FundamentalEntity();
}
Compiled from "Ray.java"
public class vsdk.toolkit.common.Ray extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public vsdk.toolkit.common.linealAlgebra.Vector3D origin;
  public vsdk.toolkit.common.linealAlgebra.Vector3D direction;
  public double t;
  public vsdk.toolkit.common.Ray();
  public vsdk.toolkit.common.Ray(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.Ray(vsdk.toolkit.common.Ray);
  public void clone(vsdk.toolkit.common.Ray);
  public java.lang.String toString();
}
Compiled from "RendererConfiguration.java"
public class vsdk.toolkit.common.RendererConfiguration extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public static final int SHADING_TYPE_NOLIGHT;
  public static final int SHADING_TYPE_FLAT;
  public static final int SHADING_TYPE_GOURAUD;
  public static final int SHADING_TYPE_PHONG;
  public int compareTo(vsdk.toolkit.common.RendererConfiguration);
  public void clone(vsdk.toolkit.common.RendererConfiguration);
  public void setLodHint(int);
  public int getLodHint();
  public vsdk.toolkit.common.RendererConfiguration();
  public void setWireColor(vsdk.toolkit.common.ColorRgb);
  public void setWireColor(double, double, double);
  public vsdk.toolkit.common.ColorRgb getWireColor();
  public void setSurfaces(boolean);
  public void setWires(boolean);
  public void setBoundingVolume(boolean);
  public void setSelectionCorners(boolean);
  public void setTexture(boolean);
  public void setBumpMap(boolean);
  public void setPoints(boolean);
  public void setNormals(boolean);
  public void setTrianglesNormals(boolean);
  public void setShadingType(int);
  public boolean isSurfacesSet();
  public boolean isWiresSet();
  public boolean isBoundingVolumeSet();
  public boolean isSelectionCornersSet();
  public boolean isTextureSet();
  public boolean isBumpMapSet();
  public boolean isPointsSet();
  public boolean isNormalsSet();
  public boolean isTrianglesNormalsSet();
  public int getShadingType();
  public void changeSurfaces();
  public void changeWires();
  public void changeBoundingVolume();
  public void changeSelectionCorners();
  public void changeTexture();
  public void changeBumpMap();
  public void changePoints();
  public void changeNormals();
  public void changeTrianglesNormals();
  public void changeShadingType();
  public java.lang.String toString();
  public vsdk.toolkit.common.RendererConfiguration clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "StopWatch.java"
public class vsdk.toolkit.common.StopWatch {
  public vsdk.toolkit.common.StopWatch();
  public void start();
  public void stop();
  public double getElapsedRealTime();
}
Compiled from "Triangle.java"
public class vsdk.toolkit.common.Triangle extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public int p0;
  public int p1;
  public int p2;
  public vsdk.toolkit.common.linealAlgebra.Vector3D normal;
  public vsdk.toolkit.common.Triangle();
  public vsdk.toolkit.common.Triangle(int, int, int);
  public int getPoint0();
  public int getPoint1();
  public int getPoint2();
  public void setPoint0(int);
  public void setPoint1(int);
  public void setPoint2(int);
  public java.lang.String toString();
}
Compiled from "VSDK.java"
public class vsdk.toolkit.common.VSDK {
  public static final double EPSILON;
  public static final int WARNING;
  public static final int ERROR;
  public static final int FATAL_ERROR;
  public static final int DEBUG;
  public static final int VERBOSE;
  public static final int POINT;
  public static final int LINE;
  public static final int TRIANGLE;
  public static final int TRIANGLE_STRIP;
  public static final int QUAD;
  public static final int QUAD_STRIP;
  public static final int PRIMITIVE_TYPE_COUNT;
  public static final int PLANE;
  public static final int SPHERE;
  public static final int CONE;
  public static final int INTERSECTION_TYPE_COUNT;
  public static final int sizeofInt;
  public static final int sizeofReference;
  public vsdk.toolkit.common.VSDK();
  public static void resetPrimitiveCounters();
  public static void resetIntersectionCounters();
  public static void acumulatePrimitiveCount(int, int);
  public static void acumulateIntersectionCount(int, int);
  public static int getPrimitiveCount(int);
  public static int getIntersectionCount(int);
  public static boolean equals(double, double);
  public static double vectorDistance(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public static double colorDistance(vsdk.toolkit.common.ColorRgb, vsdk.toolkit.common.ColorRgb);
  public static double square(double);
  public static java.lang.String formatNumberWithinZeroes(long, int);
  public static java.lang.String formatDouble(double);
  public static java.lang.String formatDouble(double, int);
  public static java.lang.String formatByteAsHex(byte);
  public static java.lang.String formatIntAsHex(int);
  public static int signedByte2unsignedInteger(byte);
  public static byte unsigned8BitInteger2signedByte(int);
  public static void reportMessage(java.lang.Object, int, java.lang.String, java.lang.String);
  static {};
}
Compiled from "VSDKException.java"
public abstract class vsdk.toolkit.common.VSDKException extends java.lang.Exception {
  public vsdk.toolkit.common.VSDKException();
  public vsdk.toolkit.common.VSDKException(java.lang.String);
  public vsdk.toolkit.common.VSDKException(java.lang.String, java.lang.Throwable);
  public vsdk.toolkit.common.VSDKException(java.lang.Throwable);
}
Compiled from "Vertex.java"
public class vsdk.toolkit.common.Vertex extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public vsdk.toolkit.common.linealAlgebra.Vector3D position;
  public vsdk.toolkit.common.linealAlgebra.Vector3D normal;
  public vsdk.toolkit.common.linealAlgebra.Vector3D binormal;
  public vsdk.toolkit.common.linealAlgebra.Vector3D tangent;
  public double u;
  public double v;
  public java.util.ArrayList<vsdk.toolkit.common.Triangle> incidentTriangles;
  public vsdk.toolkit.common.Vertex(double, double, double);
  public vsdk.toolkit.common.Vertex(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.Vertex(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.Vertex(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, double, double);
  public vsdk.toolkit.common.Vertex(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.Vertex(vsdk.toolkit.common.Vertex);
  public vsdk.toolkit.common.linealAlgebra.Vector3D getPosition();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getNormal();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getBinormal();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getTangent();
  public double getU();
  public double getV();
  public java.util.ArrayList<vsdk.toolkit.common.Triangle> getIncidentTriangles();
  public void setPosition(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void setNormal(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void setBinormal(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void setTangent(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void setU(double);
  public void setV(double);
  public void setIncidentTriangles(java.util.ArrayList<vsdk.toolkit.common.Triangle>);
  public vsdk.toolkit.common.Triangle getIncidentTriangleAt(int);
  public java.lang.String toString();
}
Compiled from "Vertex2D.java"
public class vsdk.toolkit.common.Vertex2D extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public double x;
  public double y;
  public vsdk.toolkit.common.ColorRgb color;
  public vsdk.toolkit.common.Vertex2D(double, double);
  public vsdk.toolkit.common.Vertex2D(double, double, double, double, double);
  public java.lang.String toString();
}
Compiled from "CircularDoubleLinkedList.java"
class vsdk.toolkit.common._CircularDoubleLinkedListNode<E> extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public E data;
  public vsdk.toolkit.common._CircularDoubleLinkedListNode<E> next;
  public vsdk.toolkit.common._CircularDoubleLinkedListNode<E> previous;
  vsdk.toolkit.common._CircularDoubleLinkedListNode();
}
Compiled from "Matrix4x4.java"
public class vsdk.toolkit.common.linealAlgebra.Matrix4x4 extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public double[][] M;
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4();
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4(vsdk.toolkit.common.linealAlgebra.Matrix4x4);
  public void identity();
  public void orthogonalProjection(double, double, double, double, double, double);
  public void canonicalPerspectiveProjection();
  public void frustumProjection(double, double, double, double, double, double);
  public void translation(double, double, double);
  public void scale(double, double, double);
  public void scale(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void translation(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void eulerAnglesRotation(double, double, double);
  public void axisRotation(double, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void axisRotation(double, double, double, double);
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 inverse();
  public void invert();
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 cofactors();
  public void transpose();
  public final vsdk.toolkit.common.linealAlgebra.Matrix4x4 multiply(double);
  public final vsdk.toolkit.common.linealAlgebra.Vector3D multiply(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 multiply(vsdk.toolkit.common.linealAlgebra.Matrix4x4);
  public double determinant();
  public java.lang.String toString();
  public double[] exportToDoubleArrayRowOrder();
  public float[] exportToFloatArrayRowOrder();
  public vsdk.toolkit.common.linealAlgebra.Quaternion exportToQuaternion();
  public void importFromQuaternion(vsdk.toolkit.common.linealAlgebra.Quaternion);
  public double obtainEulerYawAngle();
  public double obtainEulerPitchAngle();
  public double obtainEulerRollAngle();
}
Compiled from "Quaternion.java"
public class vsdk.toolkit.common.linealAlgebra.Quaternion extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public vsdk.toolkit.common.linealAlgebra.Vector3D direction;
  public double magnitude;
  public vsdk.toolkit.common.linealAlgebra.Quaternion();
  public double length();
  public void normalize();
  public java.lang.String toString();
}
Compiled from "Vector3D.java"
public class vsdk.toolkit.common.linealAlgebra.Vector3D extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public double x;
  public double y;
  public double z;
  public vsdk.toolkit.common.linealAlgebra.Vector3D();
  public vsdk.toolkit.common.linealAlgebra.Vector3D(double, double, double);
  public vsdk.toolkit.common.linealAlgebra.Vector3D(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public final void multiply(vsdk.toolkit.common.linealAlgebra.Matrix4x4, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public final vsdk.toolkit.common.linealAlgebra.Vector3D multiply(double);
  public final vsdk.toolkit.common.linealAlgebra.Vector3D crossProduct(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public final vsdk.toolkit.common.linealAlgebra.Vector3D modulate(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public final void clone(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public final double dotProduct(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public final void normalize();
  public final double length();
  public final vsdk.toolkit.common.linealAlgebra.Vector3D add(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public final void add(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public final vsdk.toolkit.common.linealAlgebra.Vector3D substract(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public final void substract(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public float[] exportToFloatArrayVect();
  public double[] exportToDoubleArrayVect();
  public java.lang.String toString();
  public double obtainSphericalThetaAngle();
  public double obtainSphericalPhiAngle();
  public void setSphericalCoordinates(double, double, double);
}
Compiled from "Camera.java"
public class vsdk.toolkit.environment.Camera extends vsdk.toolkit.common.Entity {
  public static final long serialVersionUID;
  public static final int OPCODE_FAR;
  public static final int OPCODE_NEAR;
  public static final int OPCODE_RIGHT;
  public static final int OPCODE_LEFT;
  public static final int OPCODE_UP;
  public static final int OPCODE_DOWN;
  public static final int PROJECTION_MODE_ORTHOGONAL;
  public static final int PROJECTION_MODE_PERSPECTIVE;
  public vsdk.toolkit.environment.Camera();
  public vsdk.toolkit.environment.Camera(vsdk.toolkit.environment.Camera);
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 getNormalizingTransformation();
  public java.lang.String getName();
  public void setName(java.lang.String);
  public double getViewportXSize();
  public double getViewportYSize();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getPosition();
  public void setPosition(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.linealAlgebra.Vector3D getFocusedPosition();
  public void setFocusedPositionDirect(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void setFocusedPositionMaintainingOrthogonality(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.linealAlgebra.Vector3D getUp();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getUpWithScale();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getRightWithScale();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getFront();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getLeft();
  public void setUpDirect(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void setLeftDirect(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void setUpMaintainingOrthogonality(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public double getFov();
  public void setFov(double);
  public double getNearPlaneDistance();
  public void setNearPlaneDistance(double);
  public double getFarPlaneDistance();
  public void setFarPlaneDistance(double);
  public int getProjectionMode();
  public void setProjectionMode(int);
  public void updateViewportResize(int, int);
  public void updateVectors();
  public final vsdk.toolkit.common.Ray generateRay(int, int);
  public double getOrthogonalZoom();
  public void setOrthogonalZoom(double);
  public void setRotation(vsdk.toolkit.common.linealAlgebra.Matrix4x4);
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 getRotation();
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 calculateViewVolumeMatrix();
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 calculateTransformationMatrix();
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 calculateProjectionMatrix();
  public java.lang.String toString();
  public boolean clipLineCohenSutherlandCanonicVolume(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
}
Compiled from "Light.java"
public class vsdk.toolkit.environment.Light extends vsdk.toolkit.common.Entity {
  public static final long serialVersionUID;
  public static final int AMBIENT;
  public static final int DIRECTIONAL;
  public static final int POINT;
  public int tipo_de_luz;
  public vsdk.toolkit.common.linealAlgebra.Vector3D lvec;
  public java.lang.String getName();
  public void setName(java.lang.String);
  public vsdk.toolkit.environment.Light(int, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.ColorRgb);
  public int getId();
  public void setId(int);
  public void setAmbient(vsdk.toolkit.common.ColorRgb);
  public void setDiffuse(vsdk.toolkit.common.ColorRgb);
  public void setSpecular(vsdk.toolkit.common.ColorRgb);
  public vsdk.toolkit.common.linealAlgebra.Vector3D getPosition();
  public void setPosition(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.ColorRgb getAmbient();
  public vsdk.toolkit.common.ColorRgb getDiffuse();
  public vsdk.toolkit.common.ColorRgb getSpecular();
  public int getLightType();
  static {};
}
Compiled from "Material.java"
public class vsdk.toolkit.environment.Material extends vsdk.toolkit.common.Entity {
  public static final long serialVersionUID;
  public vsdk.toolkit.environment.Material();
  public vsdk.toolkit.environment.Material(vsdk.toolkit.environment.Material);
  public void setName(java.lang.String);
  public java.lang.String getName();
  public void setAmbient(vsdk.toolkit.common.ColorRgb);
  public void setDiffuse(vsdk.toolkit.common.ColorRgb);
  public void setSpecular(vsdk.toolkit.common.ColorRgb);
  public void setEmission(vsdk.toolkit.common.ColorRgb);
  public void setPhongExponent(double);
  public void setReflectionCoefficient(double);
  public void setRefractionCoefficient(double);
  public void setOpacity(double);
  public boolean isDoubleSided();
  public void setDoubleSided(boolean);
  public vsdk.toolkit.common.ColorRgb getAmbient();
  public vsdk.toolkit.common.ColorRgb getDiffuse();
  public vsdk.toolkit.common.ColorRgb getSpecular();
  public vsdk.toolkit.common.ColorRgb getEmission();
  public double getPhongExponent();
  public double getReflectionCoefficient();
  public double getRefractionCoefficient();
  public double getOpacity();
  public java.lang.String toString();
}
Compiled from "Arrow.java"
public class vsdk.toolkit.environment.geometry.Arrow extends vsdk.toolkit.environment.geometry.Solid {
  public static final long serialVersionUID;
  public vsdk.toolkit.environment.geometry.Arrow(double, double, double, double);
  public double getBaseLength();
  public void setBaseLength(double);
  public double getHeadLength();
  public void setHeadLength(double);
  public double getBaseRadius();
  public void setBaseRadius(double);
  public double getHeadRadius();
  public void setHeadRadius(double);
  public boolean doIntersection(vsdk.toolkit.common.Ray);
  public void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
  public double[] getMinMax();
}
Compiled from "Box.java"
public class vsdk.toolkit.environment.geometry.Box extends vsdk.toolkit.environment.geometry.Solid {
  public static final long serialVersionUID;
  public vsdk.toolkit.environment.geometry.Box(double, double, double);
  public vsdk.toolkit.environment.geometry.Box(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public int getLastIntersectedPlane();
  public boolean doIntersection(vsdk.toolkit.common.Ray);
  public void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
  public double[] getMinMax();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getSize();
  public void setSize(double, double, double);
  public void setSize(vsdk.toolkit.common.linealAlgebra.Vector3D);
}
Compiled from "Cone.java"
public class vsdk.toolkit.environment.geometry.Cone extends vsdk.toolkit.environment.geometry.Solid {
  public static final long serialVersionUID;
  public vsdk.toolkit.environment.geometry.Cone(double, double, double);
  public double getBaseRadius();
  public double getTopRadius();
  public double getHeight();
  public void setBaseRadius(double);
  public void setTopRadius(double);
  public void setHeight(double);
  public boolean doIntersection(vsdk.toolkit.common.Ray);
  public void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
  public double[] getMinMax();
}
Compiled from "Curve.java"
public abstract class vsdk.toolkit.environment.geometry.Curve extends vsdk.toolkit.environment.geometry.Geometry {
  public vsdk.toolkit.environment.geometry.Curve();
  public boolean doIntersection(vsdk.toolkit.common.Ray);
  public void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
}
Compiled from "Geometry.java"
public abstract class vsdk.toolkit.environment.geometry.Geometry extends vsdk.toolkit.common.Entity {
  public static final int INSIDE;
  public static final int LIMIT;
  public static final int OUTSIDE;
  public vsdk.toolkit.environment.geometry.Geometry();
  public abstract boolean doIntersection(vsdk.toolkit.common.Ray);
  public int computeQuantitativeInvisibility(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public abstract void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
  public abstract double[] getMinMax();
  public int doContainmentTest(vsdk.toolkit.common.linealAlgebra.Vector3D, double);
  public void doVoxelization(vsdk.toolkit.environment.geometry.VoxelVolume, vsdk.toolkit.common.linealAlgebra.Matrix4x4, vsdk.toolkit.gui.ProgressMonitor);
}
Compiled from "GeometryIntersectionInformation.java"
public class vsdk.toolkit.environment.geometry.GeometryIntersectionInformation extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public vsdk.toolkit.common.linealAlgebra.Vector3D p;
  public vsdk.toolkit.common.linealAlgebra.Vector3D n;
  public vsdk.toolkit.common.linealAlgebra.Vector3D t;
  public double u;
  public double v;
  public vsdk.toolkit.media.Image texture;
  public vsdk.toolkit.environment.geometry.GeometryIntersectionInformation();
  public vsdk.toolkit.environment.geometry.GeometryIntersectionInformation(vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
  public void clone(vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
}
Compiled from "HalfSpace.java"
public abstract class vsdk.toolkit.environment.geometry.HalfSpace extends vsdk.toolkit.environment.geometry.Surface {
  public vsdk.toolkit.environment.geometry.HalfSpace();
}
Compiled from "InfinitePlane.java"
public class vsdk.toolkit.environment.geometry.InfinitePlane extends vsdk.toolkit.environment.geometry.HalfSpace {
  public static final long serialVersionUID;
  public vsdk.toolkit.environment.geometry.InfinitePlane(vsdk.toolkit.environment.geometry.InfinitePlane);
  public vsdk.toolkit.environment.geometry.InfinitePlane(double, double, double, double);
  public vsdk.toolkit.environment.geometry.InfinitePlane(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.environment.geometry.InfinitePlane(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void clone(vsdk.toolkit.environment.geometry.InfinitePlane);
  public boolean doIntersection(vsdk.toolkit.common.Ray);
  public boolean doIntersectionWithNegative(vsdk.toolkit.common.Ray);
  public int doContainmentTestHalfSpace(vsdk.toolkit.common.linealAlgebra.Vector3D, double);
  public int doContainmentTest(vsdk.toolkit.common.linealAlgebra.Vector3D, double);
  public void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
  public double[] getMinMax();
  public vsdk.toolkit.common.linealAlgebra.Vector3D getNormal();
  public double getD();
  public void setNormal(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void setD(double);
  public void setFromPointNormal(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public double pointDistance(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.linealAlgebra.Vector3D projectPoint(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public vsdk.toolkit.common.linealAlgebra.Vector3D mirrorPoint(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public boolean overlapsWith(vsdk.toolkit.environment.geometry.InfinitePlane, double);
  public java.lang.String toString();
}
Compiled from "ParametricBiCubicPatch.java"
public class vsdk.toolkit.environment.geometry.ParametricBiCubicPatch extends vsdk.toolkit.environment.geometry.Surface {
  public static final long serialVersionUID;
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 Gx_MATRIX;
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 Gy_MATRIX;
  public vsdk.toolkit.common.linealAlgebra.Matrix4x4 Gz_MATRIX;
  public static final int FERGUSON;
  public vsdk.toolkit.environment.geometry.ParametricCurve contourCurve;
  public int type;
  public vsdk.toolkit.environment.geometry.ParametricBiCubicPatch();
  public void buildFergusonPatch(vsdk.toolkit.environment.geometry.ParametricCurve);
  public void buildBezierPatch(vsdk.toolkit.common.linealAlgebra.Vector3D[][]);
  public int getApproximationSteps();
  public void setApproximationSteps(int);
  public int getType();
  public void setType(int);
  public void evaluate(vsdk.toolkit.common.linealAlgebra.Vector3D, double, double);
  public void evaluateTangent(vsdk.toolkit.common.linealAlgebra.Vector3D, double, double);
  public void evaluateBinormal(vsdk.toolkit.common.linealAlgebra.Vector3D, double, double);
  public void evaluateNormal(vsdk.toolkit.common.linealAlgebra.Vector3D, double, double);
  public boolean doIntersection(vsdk.toolkit.common.Ray);
  public void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
  public double[] getMinMax();
}
Compiled from "ParametricCurve.java"
public class vsdk.toolkit.environment.geometry.ParametricCurve extends vsdk.toolkit.environment.geometry.Curve {
  public static final long serialVersionUID;
  public static vsdk.toolkit.common.linealAlgebra.Matrix4x4 LINEAR_MATRIX;
  public static vsdk.toolkit.common.linealAlgebra.Matrix4x4 HERMITE_MATRIX;
  public static vsdk.toolkit.common.linealAlgebra.Matrix4x4 BEZIER_MATRIX;
  public static vsdk.toolkit.common.linealAlgebra.Matrix4x4 UNRBSPLINE_MATRIX;
  public static vsdk.toolkit.common.linealAlgebra.Matrix4x4 CATMULL_ROM_MATRIX;
  public static final int BREAK;
  public static final int CORNER;
  public static final int QUAD;
  public static final int HERMITE;
  public static final int BEZIER;
  public static final int UNRBSPLINE;
  public static final int NUNRBSPLINE;
  public static final int CATMULLROM;
  public java.util.ArrayList<vsdk.toolkit.common.linealAlgebra.Vector3D[]> points;
  public java.util.ArrayList<java.lang.Integer> types;
  public vsdk.toolkit.environment.geometry.ParametricCurve();
  public int getApproximationSteps();
  public void setApproximationSteps(int);
  public void addPoint(vsdk.toolkit.common.linealAlgebra.Vector3D[], int);
  public int getNumPieces();
  public void addPointAt(vsdk.toolkit.common.linealAlgebra.Vector3D[], int, int);
  public vsdk.toolkit.common.linealAlgebra.Vector3D[] getPoint(int);
  public int getPointSize();
  public void removePoint(int);
  public void setPointAt(vsdk.toolkit.common.linealAlgebra.Vector3D[], int);
  public vsdk.toolkit.common.linealAlgebra.Vector3D evaluate(int, double);
  public java.util.ArrayList<vsdk.toolkit.common.linealAlgebra.Vector3D> calculatePoints(int, boolean);
  public double[] getMinMax();
  public int doContainmentTest(vsdk.toolkit.common.linealAlgebra.Vector3D, double);
  static {};
}
Compiled from "Polygon2D.java"
public class vsdk.toolkit.environment.geometry.Polygon2D extends vsdk.toolkit.environment.geometry.Surface {
  public static final long serialVersionUID;
  public java.util.ArrayList<vsdk.toolkit.environment.geometry._Polygon2DContour> loops;
  public vsdk.toolkit.environment.geometry.Polygon2D();
  public void addVertex(double, double, double, double, double);
  public void addVertex(double, double);
  public void nextLoop();
  public double[] getMinMax();
  public boolean doIntersection(vsdk.toolkit.common.Ray);
  public void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
}
Compiled from "Solid.java"
public abstract class vsdk.toolkit.environment.geometry.Solid extends vsdk.toolkit.environment.geometry.Geometry {
  public vsdk.toolkit.environment.geometry.Solid();
  public vsdk.toolkit.common.linealAlgebra.Vector3D doCenterOfMass();
}
Compiled from "Sphere.java"
public class vsdk.toolkit.environment.geometry.Sphere extends vsdk.toolkit.environment.geometry.Solid {
  public static final long serialVersionUID;
  public vsdk.toolkit.environment.geometry.Sphere(double);
  public boolean doIntersection(vsdk.toolkit.common.Ray);
  public void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
  public int doContainmentTest(vsdk.toolkit.common.linealAlgebra.Vector3D, double);
  public double[] getMinMax();
  public double getRadius();
  public void setRadius(double);
}
Compiled from "Surface.java"
public abstract class vsdk.toolkit.environment.geometry.Surface extends vsdk.toolkit.environment.geometry.Geometry {
  public vsdk.toolkit.environment.geometry.Surface();
}
Compiled from "VoxelVolume.java"
public class vsdk.toolkit.environment.geometry.VoxelVolume extends vsdk.toolkit.environment.geometry.Solid {
  public static final long serialVersionUID;
  public vsdk.toolkit.environment.geometry.VoxelVolume();
  public int getXSize();
  public int getYSize();
  public int getZSize();
  public boolean init(int, int, int);
  public void putVoxel(int, int, int, byte);
  public vsdk.toolkit.common.linealAlgebra.Vector3D getVoxelPosition(int, int, int);
  public int getNearestIFromX(double);
  public int getNearestJFromY(double);
  public int getNearestKFromZ(double);
  public int getVoxelAtPosition(double, double, double);
  public int getVoxelAtPosition(vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void putVoxelAtPosition(double, double, double, byte);
  public void putVoxelAtPosition(vsdk.toolkit.common.linealAlgebra.Vector3D, byte);
  public int getVoxel(int, int, int);
  public double[] getMinMax();
  public boolean doIntersection(vsdk.toolkit.common.Ray);
  public void doExtraInformation(vsdk.toolkit.common.Ray, double, vsdk.toolkit.environment.geometry.GeometryIntersectionInformation);
  public static vsdk.toolkit.common.linealAlgebra.Matrix4x4 getTransformFromVoxelFrameToMinMax(double[]);
  public vsdk.toolkit.common.linealAlgebra.Vector3D doCenterOfMass();
}
Compiled from "_Polygon2DContour.java"
public class vsdk.toolkit.environment.geometry._Polygon2DContour extends vsdk.toolkit.common.FundamentalEntity {
  public static final long serialVersionUID;
  public java.util.ArrayList<vsdk.toolkit.common.Vertex2D> vertices;
  public vsdk.toolkit.environment.geometry._Polygon2DContour();
  public void addVertex(double, double, double, double, double);
  public void addVertex(double, double);
}
Compiled from "AwtSystem.java"
public class vsdk.toolkit.gui.AwtSystem extends vsdk.toolkit.gui.PresentationElement {
  public vsdk.toolkit.gui.AwtSystem();
  public static vsdk.toolkit.gui.KeyEvent awt2vsdkEvent(java.awt.event.KeyEvent);
  public static void awt2vsdkEvent(vsdk.toolkit.gui.KeyEvent, java.awt.event.KeyEvent);
  public static vsdk.toolkit.media.RGBAImage calculateLabelImage(java.lang.String, vsdk.toolkit.common.ColorRgb);
  static {};
}
Compiled from "CameraController.java"
public abstract class vsdk.toolkit.gui.CameraController extends vsdk.toolkit.gui.Controller {
  public vsdk.toolkit.gui.CameraController();
  public abstract boolean processMouseEventAwt(java.awt.event.MouseEvent);
  public abstract boolean processKeyPressedEvent(vsdk.toolkit.gui.KeyEvent);
  public abstract boolean processKeyPressedEventAwt(java.awt.event.KeyEvent);
  public abstract boolean processKeyReleasedEventAwt(java.awt.event.KeyEvent);
  public abstract boolean processMousePressedEventAwt(java.awt.event.MouseEvent);
  public abstract boolean processMouseReleasedEventAwt(java.awt.event.MouseEvent);
  public abstract boolean processMouseClickedEventAwt(java.awt.event.MouseEvent);
  public abstract boolean processMouseMovedEventAwt(java.awt.event.MouseEvent);
  public abstract boolean processMouseDraggedEventAwt(java.awt.event.MouseEvent);
  public abstract boolean processMouseWheelEventAwt(java.awt.event.MouseWheelEvent);
  public abstract vsdk.toolkit.environment.Camera getCamera();
  public abstract void setCamera(vsdk.toolkit.environment.Camera);
  public abstract void setDeltaMovement(double);
}
Compiled from "CameraControllerAquynza.java"
public class vsdk.toolkit.gui.CameraControllerAquynza extends vsdk.toolkit.gui.CameraController {
  public vsdk.toolkit.gui.CameraControllerAquynza(vsdk.toolkit.environment.Camera);
  public double getDeltaMovement();
  public void setDeltaMovement(double);
  public boolean processMouseEventAwt(java.awt.event.MouseEvent);
  public boolean processKeyPressedEvent(vsdk.toolkit.gui.KeyEvent);
  public boolean processKeyPressedEventAwt(java.awt.event.KeyEvent);
  public boolean processKeyReleasedEventAwt(java.awt.event.KeyEvent);
  public boolean processMousePressedEventAwt(java.awt.event.MouseEvent);
  public boolean processMouseReleasedEventAwt(java.awt.event.MouseEvent);
  public boolean processMouseClickedEventAwt(java.awt.event.MouseEvent);
  public boolean processMouseMovedEventAwt(java.awt.event.MouseEvent);
  public boolean processMouseDraggedEventAwt(java.awt.event.MouseEvent);
  public boolean processMouseWheelEventAwt(java.awt.event.MouseWheelEvent);
  public vsdk.toolkit.environment.Camera getCamera();
  public void setCamera(vsdk.toolkit.environment.Camera);
}
Compiled from "Controller.java"
public abstract class vsdk.toolkit.gui.Controller extends vsdk.toolkit.gui.PresentationElement {
  public vsdk.toolkit.gui.Controller();
}
Compiled from "KeyEvent.java"
public class vsdk.toolkit.gui.KeyEvent extends vsdk.toolkit.gui.PresentationElement {
  public int keycode;
  public int modifierMask;
  public static final int MASK_CTRL;
  public static final int MASK_LCTRL;
  public static final int MASK_RCTRL;
  public static final int MASK_ALT;
  public static final int MASK_LALT;
  public static final int MASK_RALT;
  public static final int MASK_ALTGR;
  public static final int MASK_SHIFT;
  public static final int MASK_LSHIFT;
  public static final int MASK_RSHIFT;
  public static final int MASK_WINKEY;
  public static final int KEY_NONE;
  public static final int KEY_A;
  public static final int KEY_B;
  public static final int KEY_C;
  public static final int KEY_D;
  public static final int KEY_E;
  public static final int KEY_F;
  public static final int KEY_G;
  public static final int KEY_H;
  public static final int KEY_I;
  public static final int KEY_J;
  public static final int KEY_K;
  public static final int KEY_L;
  public static final int KEY_M;
  public static final int KEY_N;
  public static final int KEY_O;
  public static final int KEY_P;
  public static final int KEY_Q;
  public static final int KEY_R;
  public static final int KEY_S;
  public static final int KEY_T;
  public static final int KEY_U;
  public static final int KEY_V;
  public static final int KEY_W;
  public static final int KEY_X;
  public static final int KEY_Y;
  public static final int KEY_Z;
  public static final int KEY_a;
  public static final int KEY_b;
  public static final int KEY_c;
  public static final int KEY_d;
  public static final int KEY_e;
  public static final int KEY_f;
  public static final int KEY_g;
  public static final int KEY_h;
  public static final int KEY_i;
  public static final int KEY_j;
  public static final int KEY_k;
  public static final int KEY_l;
  public static final int KEY_m;
  public static final int KEY_n;
  public static final int KEY_o;
  public static final int KEY_p;
  public static final int KEY_q;
  public static final int KEY_r;
  public static final int KEY_s;
  public static final int KEY_t;
  public static final int KEY_u;
  public static final int KEY_v;
  public static final int KEY_w;
  public static final int KEY_x;
  public static final int KEY_y;
  public static final int KEY_z;
  public static final int KEY_0;
  public static final int KEY_1;
  public static final int KEY_2;
  public static final int KEY_3;
  public static final int KEY_4;
  public static final int KEY_5;
  public static final int KEY_6;
  public static final int KEY_7;
  public static final int KEY_8;
  public static final int KEY_9;
  public static final int KEY_NUM0;
  public static final int KEY_NUM1;
  public static final int KEY_NUM2;
  public static final int KEY_NUM3;
  public static final int KEY_NUM4;
  public static final int KEY_NUM5;
  public static final int KEY_NUM6;
  public static final int KEY_NUM7;
  public static final int KEY_NUM8;
  public static final int KEY_NUM9;
  public static final int KEY_F1;
  public static final int KEY_F2;
  public static final int KEY_F3;
  public static final int KEY_F4;
  public static final int KEY_F5;
  public static final int KEY_F6;
  public static final int KEY_F7;
  public static final int KEY_F8;
  public static final int KEY_F9;
  public static final int KEY_F10;
  public static final int KEY_F11;
  public static final int KEY_F12;
  public static final int KEY_ESC;
  public static final int KEY_PRINTSCREEN;
  public static final int KEY_BACKSPACE;
  public static final int KEY_INSERT;
  public static final int KEY_DELETE;
  public static final int KEY_PAGEUP;
  public static final int KEY_PAGEDOWN;
  public static final int KEY_HOME;
  public static final int KEY_END;
  public static final int KEY_SPACE;
  public static final int KEY_LSHIFT;
  public static final int KEY_RSHIFT;
  public static final int KEY_LALT;
  public static final int KEY_RALT;
  public static final int KEY_ALTGR;
  public static final int KEY_LCTRL;
  public static final int KEY_RCTRL;
  public static final int KEY_UP;
  public static final int KEY_DOWN;
  public static final int KEY_LEFT;
  public static final int KEY_RIGHT;
  public static final int KEY_NUMSLASH;
  public static final int KEY_NUMASTERISK;
  public static final int KEY_NUMMINUS;
  public static final int KEY_NUMPLUS;
  public static final int KEY_NUMLOCK;
  public static final int KEY_NUMENTER;
  public static final int KEY_ENTER;
  public static final int KEY_CAPSLOCK;
  public static final int KEY_TAB;
  public static final int KEY_COMMA;
  public static final int KEY_PERIOD;
  public static final int KEY_NUMPERIOD;
  public vsdk.toolkit.gui.KeyEvent();
}
Compiled from "PresentationElement.java"
public abstract class vsdk.toolkit.gui.PresentationElement {
  public vsdk.toolkit.gui.PresentationElement();
}
Compiled from "ProgressMonitor.java"
public abstract class vsdk.toolkit.gui.ProgressMonitor extends vsdk.toolkit.gui.PresentationElement {
  public vsdk.toolkit.gui.ProgressMonitor();
  public abstract void begin();
  public abstract void end();
  public abstract void update(double, double, double);
}
Compiled from "PersistenceElement.java"
public abstract class vsdk.toolkit.io.PersistenceElement {
  public vsdk.toolkit.io.PersistenceElement();
  public static boolean checkDirectory(java.lang.String);
  protected static java.lang.String extractExtensionFromFile(java.io.File);
  public static int readByteInt(java.io.InputStream) throws java.lang.Exception;
  public static int readByteUnsignedInt(java.io.InputStream) throws java.lang.Exception;
  public static void readBytes(java.io.InputStream, byte[]) throws java.lang.Exception;
  public static void writeBytes(java.io.OutputStream, byte[]) throws java.lang.Exception;
  public static int byteArray2intBE(byte[], int);
  public static void int2byteArrayBE(byte[], int, int);
  public static void int2byteArrayLE(byte[], int, int);
  public static int byteArray2intLE(byte[], int);
  public static long byteArray2longBE(byte[], int);
  public static long byteArray2longLE(byte[], int);
  public static float byteArray2floatBE(byte[], int);
  public static void float2byteArrayBE(byte[], int, float);
  public static void float2byteArrayLE(byte[], int, float);
  public static float byteArray2floatLE(byte[], int);
  public static int readIntLE(java.io.InputStream) throws java.lang.Exception;
  public static int readIntBE(java.io.InputStream) throws java.lang.Exception;
  public static void writeIntBE(java.io.OutputStream, int) throws java.lang.Exception;
  public static void writeIntLE(java.io.OutputStream, int) throws java.lang.Exception;
  public static long readLongLE(java.io.InputStream) throws java.lang.Exception;
  public static long readLongBE(java.io.InputStream) throws java.lang.Exception;
  public static float readFloatLE(java.io.InputStream) throws java.lang.Exception;
  public static float readFloatBE(java.io.InputStream) throws java.lang.Exception;
  public static void writeFloatBE(java.io.OutputStream, float) throws java.lang.Exception;
  public static void writeFloatLE(java.io.OutputStream, float) throws java.lang.Exception;
  public static void writeLongBE(java.io.OutputStream, long) throws java.lang.Exception;
  public static void writeLongLE(java.io.OutputStream, long) throws java.lang.Exception;
  public static java.lang.String readAsciiFixedSizeString(java.io.InputStream, int) throws java.lang.Exception;
  public static java.lang.String readAsciiString(java.io.InputStream) throws java.lang.Exception;
  public static java.lang.String readUtf8String(java.io.InputStream) throws java.lang.Exception;
  public static java.lang.String buildUtf8Char(byte[]);
  public static java.lang.String readUtf8Line(java.io.InputStream) throws java.lang.Exception;
  public static java.lang.String readAsciiLine(java.io.InputStream) throws java.lang.Exception;
  public static java.lang.String readAsciiToken(java.io.InputStream, byte[]) throws java.lang.Exception;
  public static void writeAsciiString(java.io.OutputStream, java.lang.String) throws java.lang.Exception;
  public static void writeUtf8String(java.io.OutputStream, java.lang.String) throws java.lang.Exception;
  public static void writeAsciiLine(java.io.OutputStream, java.lang.String) throws java.lang.Exception;
  public static void writeUtf8Line(java.io.OutputStream, java.lang.String) throws java.lang.Exception;
  public static boolean verifyLibrary(java.lang.String);
  static {};
}
Compiled from "ImageNotRecognizedException.java"
public class vsdk.toolkit.io.image.ImageNotRecognizedException extends vsdk.toolkit.common.VSDKException {
  public static final long serialVersionUID;
  java.io.File image;
  public vsdk.toolkit.io.image.ImageNotRecognizedException(java.lang.String, java.io.File);
  public java.io.File getImage();
}
Compiled from "ImagePersistence.java"
public class vsdk.toolkit.io.image.ImagePersistence extends vsdk.toolkit.io.PersistenceElement {
  public static boolean nativeWarningGiven;
  public vsdk.toolkit.io.image.ImagePersistence();
  public static vsdk.toolkit.media.RGBAImage importRGBA(java.io.File) throws vsdk.toolkit.io.image.ImageNotRecognizedException, java.lang.Exception;
  public static vsdk.toolkit.media.RGBImage importRGB(java.io.File) throws vsdk.toolkit.io.image.ImageNotRecognizedException, java.lang.Exception;
  public static boolean exportJPG(java.io.File, vsdk.toolkit.media.Image);
  public static void exportJPG(java.io.OutputStream, vsdk.toolkit.media.Image) throws java.lang.Exception;
  public static boolean exportPNG(java.io.File, vsdk.toolkit.media.Image);
  public static void exportPNG(java.io.OutputStream, vsdk.toolkit.media.Image) throws java.lang.Exception;
  public static boolean exportGIF(java.io.File, vsdk.toolkit.media.Image);
  public static boolean exportPPM(java.io.File, vsdk.toolkit.media.Image);
  public static boolean exportBMP(java.io.File, vsdk.toolkit.media.Image);
  public static boolean exportPNM(java.io.File, vsdk.toolkit.media.Image);
  static {};
}
Compiled from "TargaImage.java"
public class vsdk.toolkit.io.image.TargaImage extends vsdk.toolkit.io.PersistenceElement {
  public byte[] pixels;
  public vsdk.toolkit.io.image.TargaImage(java.io.File) throws vsdk.toolkit.io.image.ImageNotRecognizedException;
  public int getPixelDepth();
  public void printInfo();
  public int getYSize();
  public int getXSize();
  public byte[] getTexture();
  public java.awt.Dimension getSize();
  public void exportRGB(vsdk.toolkit.media.RGBImage);
  public void exportRGBA(vsdk.toolkit.media.RGBAImage);
}
Compiled from "Calligraphic2DBuffer.java"
public class vsdk.toolkit.media.Calligraphic2DBuffer extends vsdk.toolkit.media.MediaEntity {
  public static final long serialVersionUID;
  public vsdk.toolkit.media.Calligraphic2DBuffer();
  public void init();
  public void add2DLine(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public void add2DLine(double, double, double, double);
  public void get2DLine(int, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public int getNumLines();
  public void exportRgbImage(vsdk.toolkit.media.RGBImage);
  public void finalize();
}
Compiled from "Image.java"
public abstract class vsdk.toolkit.media.Image extends vsdk.toolkit.media.MediaEntity {
  public static final long serialVersionUID;
  public vsdk.toolkit.media.Image();
  public abstract boolean init(int, int);
  public abstract boolean initNoFill(int, int);
  public abstract int getXSize();
  public abstract int getYSize();
  public abstract void putPixelRgb(int, int, vsdk.toolkit.media.RGBPixel);
  public abstract vsdk.toolkit.media.RGBPixel getPixelRgb(int, int);
  public abstract void getPixelRgb(int, int, vsdk.toolkit.media.RGBPixel);
  public byte getPixel8bitGrayScale(int, int);
  public vsdk.toolkit.common.ColorRgb getColorRgbNearest(double, double);
  public vsdk.toolkit.common.ColorRgb getColorRgbBiLinear(double, double);
  public void createTestPattern();
  static {};
}
Compiled from "IndexedColorImage.java"
public class vsdk.toolkit.media.IndexedColorImage extends vsdk.toolkit.media.Image {
  public static final long serialVersionUID;
  public vsdk.toolkit.media.IndexedColorImage(vsdk.toolkit.media.RGBColorPalette);
  public vsdk.toolkit.media.IndexedColorImage();
  public void finalize();
  public boolean init(int, int);
  public boolean initNoFill(int, int);
  public int getXSize();
  public int getYSize();
  public byte[] getRawImage();
  public void putPixel(int, int, byte);
  public void putPixel(int, int, int);
  public byte getPixel8bitGrayScale(int, int);
  public int getPixel(int, int);
  public vsdk.toolkit.media.RGBPixel getPixelRgb(int, int);
  public void getPixelRgb(int, int, vsdk.toolkit.media.RGBPixel);
  public vsdk.toolkit.media.RGBColorPalette getColorTable();
  public void setColorTable(vsdk.toolkit.media.RGBColorPalette);
  public void putPixelRgb(int, int, vsdk.toolkit.media.RGBPixel);
  public vsdk.toolkit.media.RGBImage exportToRgbImage();
  public vsdk.toolkit.media.RGBAImage exportToRgbaImage();
}
Compiled from "MediaEntity.java"
public abstract class vsdk.toolkit.media.MediaEntity extends vsdk.toolkit.common.Entity {
  public vsdk.toolkit.media.MediaEntity();
}
Compiled from "RGBAImage.java"
public class vsdk.toolkit.media.RGBAImage extends vsdk.toolkit.media.Image {
  public static final long serialVersionUID;
  public vsdk.toolkit.media.RGBAImage();
  public void finalize();
  public void dettach();
  public int getSizeInBytes();
  public boolean init(int, int);
  public boolean initNoFill(int, int);
  public void putPixel(int, int, byte, byte, byte);
  public void putPixel(int, int, byte, byte, byte, byte);
  public void putPixel(int, int, vsdk.toolkit.media.RGBAPixel);
  public void putPixelRgb(int, int, vsdk.toolkit.media.RGBPixel);
  public vsdk.toolkit.media.RGBAPixel getPixel(int, int);
  public vsdk.toolkit.media.RGBPixel getPixelRgb(int, int);
  public void getPixelRgba(int, int, vsdk.toolkit.media.RGBAPixel);
  public void getPixelRgb(int, int, vsdk.toolkit.media.RGBPixel);
  public int getXSize();
  public int getYSize();
  public byte[] getRawImage();
  public java.nio.ByteBuffer getRawImageDirectBuffer();
  public void setRawImage(int, int, byte[]);
  public vsdk.toolkit.media.RGBAImage clone();
  public vsdk.toolkit.media.RGBImage exportToRgbImage();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "RGBAPixel.java"
public class vsdk.toolkit.media.RGBAPixel extends vsdk.toolkit.media.MediaEntity {
  public static final long serialVersionUID;
  public byte r;
  public byte g;
  public byte b;
  public byte a;
  public vsdk.toolkit.media.RGBAPixel();
  public void setR(byte);
  public byte getR();
  public void setG(byte);
  public byte getG();
  public void setB(byte);
  public byte getB();
  public void setA(byte);
  public byte getA();
  public java.lang.String toString();
}
Compiled from "RGBColorPalette.java"
public class vsdk.toolkit.media.RGBColorPalette extends vsdk.toolkit.media.MediaEntity {
  public static final long serialVersionUID;
  protected java.util.ArrayList<vsdk.toolkit.common.ColorRgb> colors;
  public vsdk.toolkit.media.RGBColorPalette();
  public void init(int);
  public int size();
  public void buildGrayLevelsTable();
  public vsdk.toolkit.common.ColorRgb getColorAt(int);
  public void setColorAt(int, vsdk.toolkit.common.ColorRgb);
  public void setColorAt(int, double, double, double);
  public void addColor(vsdk.toolkit.common.ColorRgb);
  public void addColor(double, double, double);
  public vsdk.toolkit.common.ColorRgb evalNearest(double);
  public vsdk.toolkit.common.ColorRgb evalLinear(double);
  public int selectNearestIndexToRgb(vsdk.toolkit.common.ColorRgb);
}
Compiled from "RGBImage.java"
public class vsdk.toolkit.media.RGBImage extends vsdk.toolkit.media.Image {
  public static final long serialVersionUID;
  public vsdk.toolkit.media.RGBImage();
  public void finalize();
  public void dettach();
  public int getSizeInBytes();
  public boolean init(int, int);
  public boolean initNoFill(int, int);
  public void putPixel(int, int, byte, byte, byte);
  public void putPixel(int, int, vsdk.toolkit.media.RGBPixel);
  public void putPixelRgb(int, int, vsdk.toolkit.media.RGBPixel);
  public vsdk.toolkit.media.RGBPixel getPixel(int, int);
  public vsdk.toolkit.media.RGBPixel getPixelRgb(int, int);
  public void getPixelRgb(int, int, vsdk.toolkit.media.RGBPixel);
  public int getXSize();
  public int getYSize();
  public byte[] getRawImage();
  public java.nio.ByteBuffer getRawImageDirectBuffer();
  public void setRawImage(int, int, byte[]);
  public vsdk.toolkit.media.RGBImage clone();
  public vsdk.toolkit.media.RGBAImage cloneToRgba();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "RGBPixel.java"
public class vsdk.toolkit.media.RGBPixel extends vsdk.toolkit.media.MediaEntity {
  public static final long serialVersionUID;
  public byte r;
  public byte g;
  public byte b;
  public vsdk.toolkit.media.RGBPixel();
  public void setR(byte);
  public byte getR();
  public void setG(byte);
  public byte getG();
  public void setB(byte);
  public byte getB();
  public void importFromColorRgb(vsdk.toolkit.common.ColorRgb);
  public java.lang.String toString();
}
Compiled from "ComputationalGeometry.java"
public class vsdk.toolkit.processing.ComputationalGeometry extends vsdk.toolkit.processing.ProcessingElement {
  public vsdk.toolkit.processing.ComputationalGeometry();
  public static boolean doIntersectionWithTriangle(vsdk.toolkit.common.Ray, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D);
  public static int lineContainmentTest(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, double);
  public static int lineSegmentContainmentTest(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, double);
  public static int triangleContainmentTest(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, double);
  public static void triangleMinMax(vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.linealAlgebra.Vector3D, double[]);
  static {};
}
Compiled from "ProcessingElement.java"
public abstract class vsdk.toolkit.processing.ProcessingElement {
  public vsdk.toolkit.processing.ProcessingElement();
}
Compiled from "Rasterizer2D.java"
public class vsdk.toolkit.render.Rasterizer2D extends vsdk.toolkit.render.RenderingElement {
  public vsdk.toolkit.render.Rasterizer2D();
  public static void drawLine(vsdk.toolkit.media.Image, int, int, int, int, vsdk.toolkit.media.RGBPixel);
  public static void drawPolygon(vsdk.toolkit.media.Image, vsdk.toolkit.environment.geometry.Polygon2D, vsdk.toolkit.media.RGBPixel);
  public static void fillPolygon(vsdk.toolkit.media.Image, vsdk.toolkit.environment.geometry.Polygon2D, vsdk.toolkit.media.RGBPixel);
  public static void fillSmoothPolygonCalculateColor(vsdk.toolkit.environment.geometry.Polygon2D, double, double, vsdk.toolkit.common.ColorRgb);
  public static void fillSmoothPolygon(vsdk.toolkit.media.Image, vsdk.toolkit.environment.geometry.Polygon2D);
}
Compiled from "RenderingElement.java"
public abstract class vsdk.toolkit.render.RenderingElement {
  public vsdk.toolkit.render.RenderingElement();
}
Compiled from "AwtRGBAImageRenderer.java"
public class vsdk.toolkit.render.awt.AwtRGBAImageRenderer extends vsdk.toolkit.render.awt.AwtRenderer {
  public vsdk.toolkit.render.awt.AwtRGBAImageRenderer();
  public static void draw(java.awt.Graphics, vsdk.toolkit.media.RGBAImage, int, int);
  public static void draw(java.awt.Graphics, vsdk.toolkit.media.RGBAImage);
  public static boolean importFromAwtBufferedImage(java.awt.image.BufferedImage, vsdk.toolkit.media.RGBAImage);
  public static java.awt.image.BufferedImage exportToAwtBufferedImage(vsdk.toolkit.media.RGBAImage);
}
Compiled from "AwtRGBImageRenderer.java"
public class vsdk.toolkit.render.awt.AwtRGBImageRenderer extends vsdk.toolkit.render.awt.AwtRenderer {
  public vsdk.toolkit.render.awt.AwtRGBImageRenderer();
  public static void draw(java.awt.Graphics, vsdk.toolkit.media.RGBImage, int, int);
  public static void draw(java.awt.Graphics, vsdk.toolkit.media.RGBImage);
  public static boolean importFromAwtBufferedImage(java.awt.image.BufferedImage, vsdk.toolkit.media.RGBImage);
  public static java.awt.image.BufferedImage exportToAwtBufferedImage(vsdk.toolkit.media.RGBImage);
}
Compiled from "AwtRenderer.java"
public abstract class vsdk.toolkit.render.awt.AwtRenderer extends vsdk.toolkit.render.RenderingElement {
  public vsdk.toolkit.render.awt.AwtRenderer();
}
Compiled from "JoglArrowRenderer.java"
public class vsdk.toolkit.render.jogl.JoglArrowRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglArrowRenderer();
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Arrow, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  static {};
}
Compiled from "JoglBoxRenderer.java"
public class vsdk.toolkit.render.jogl.JoglBoxRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglBoxRenderer();
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Box, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  static {};
}
Compiled from "JoglCalligraphic2DBufferRenderer.java"
public class vsdk.toolkit.render.jogl.JoglCalligraphic2DBufferRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglCalligraphic2DBufferRenderer();
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.media.Calligraphic2DBuffer);
}
Compiled from "JoglCameraRenderer.java"
public class vsdk.toolkit.render.jogl.JoglCameraRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglCameraRenderer();
  public static void activate(javax.media.opengl.GL2, vsdk.toolkit.environment.Camera);
  public static void activateCenter(javax.media.opengl.GL2, vsdk.toolkit.environment.Camera);
  public static void drawVolume(javax.media.opengl.GL2, vsdk.toolkit.environment.Camera);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.Camera);
}
Compiled from "JoglConeRenderer.java"
public class vsdk.toolkit.render.jogl.JoglConeRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglConeRenderer();
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Cone, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  static {};
}
Compiled from "JoglGeometryRenderer.java"
public class vsdk.toolkit.render.jogl.JoglGeometryRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglGeometryRenderer();
  protected static void activateShaders(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Geometry, vsdk.toolkit.environment.Camera);
  public static void prepareSurfaceQuality(javax.media.opengl.GL2, vsdk.toolkit.common.RendererConfiguration);
  public static void drawVertexNormal(javax.media.opengl.GL2, vsdk.toolkit.common.Vertex);
  public static void drawMinMaxBox(javax.media.opengl.GL2, double[], vsdk.toolkit.common.RendererConfiguration);
  public static void drawMinMaxBox(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Geometry, vsdk.toolkit.common.RendererConfiguration);
  public static void drawSelectionCorners(javax.media.opengl.GL2, double[], vsdk.toolkit.common.RendererConfiguration);
  public static void drawSelectionCorners(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Geometry, vsdk.toolkit.common.RendererConfiguration);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Geometry, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  public static void drawWithVertexArrays(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Geometry, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  static {};
}
Compiled from "JoglImageRenderer.java"
public class vsdk.toolkit.render.jogl.JoglImageRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglImageRenderer();
  public static int activate(javax.media.opengl.GL2, vsdk.toolkit.media.Image);
  public static void deactivate(javax.media.opengl.GL2, vsdk.toolkit.media.Image);
  public static int activateAsNormalMap(javax.media.opengl.GL2, vsdk.toolkit.media.Image, vsdk.toolkit.common.RendererConfiguration);
  public static void unload(javax.media.opengl.GL2, vsdk.toolkit.media.Image);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.media.Image);
}
Compiled from "JoglInfinitePlaneRenderer.java"
public class vsdk.toolkit.render.jogl.JoglInfinitePlaneRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglInfinitePlaneRenderer();
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.InfinitePlane, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  public static void drawInfinitePlaneElements(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.InfinitePlane, int, int);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.InfinitePlane, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration, int, int);
}
Compiled from "JoglLightRenderer.java"
public class vsdk.toolkit.render.jogl.JoglLightRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public static int supportedLightsInOpenGL;
  public vsdk.toolkit.render.jogl.JoglLightRenderer();
  public static void deactivate(javax.media.opengl.GL2, vsdk.toolkit.environment.Light);
  public static void activate(javax.media.opengl.GL2, vsdk.toolkit.environment.Light);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.Light);
  public static void turnOffAllLights(javax.media.opengl.GL2);
  static {};
}
Compiled from "JoglMaterialRenderer.java"
public class vsdk.toolkit.render.jogl.JoglMaterialRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglMaterialRenderer();
  public static void activate(javax.media.opengl.GL2, vsdk.toolkit.environment.Material);
  static {};
}
Compiled from "JoglMatrixRenderer.java"
public class vsdk.toolkit.render.jogl.JoglMatrixRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglMatrixRenderer();
  public static vsdk.toolkit.common.linealAlgebra.Matrix4x4 importJOGL(javax.media.opengl.GL2, int);
  public static void activate(javax.media.opengl.GL2, vsdk.toolkit.common.linealAlgebra.Matrix4x4);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.common.linealAlgebra.Matrix4x4);
}
Compiled from "JoglParametricBiCubicPatchRenderer.java"
public class vsdk.toolkit.render.jogl.JoglParametricBiCubicPatchRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglParametricBiCubicPatchRenderer();
  public static void drawControlPoints(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricBiCubicPatch);
  public static void drawNormals(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricBiCubicPatch, double, double, double, double);
  public static void drawSurfaceGrid(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricBiCubicPatch, double, double, double, double, vsdk.toolkit.common.RendererConfiguration);
  public static void drawControlGrid(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricBiCubicPatch, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration, vsdk.toolkit.common.ColorRgb);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricBiCubicPatch, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricBiCubicPatch, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration, int, int, double, double);
}
Compiled from "JoglParametricCurveRenderer.java"
public class vsdk.toolkit.render.jogl.JoglParametricCurveRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglParametricCurveRenderer();
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricCurve, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration, vsdk.toolkit.common.ColorRgb);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricCurve, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  public static void drawControlPointsCurve(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricCurve);
  public static void drawControlPointsCurve(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricCurve, vsdk.toolkit.common.ColorRgb, vsdk.toolkit.common.ColorRgb, vsdk.toolkit.common.ColorRgb);
  public static void drawPoints(javax.media.opengl.GL2, java.util.ArrayList);
  public static void drawOneControlPoints(javax.media.opengl.GL2, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.ColorRgb);
  public static void drawFirstControlPoint(javax.media.opengl.GL2, vsdk.toolkit.common.linealAlgebra.Vector3D, vsdk.toolkit.common.ColorRgb);
  public static void drawTwoControlPoints(javax.media.opengl.GL2, vsdk.toolkit.common.linealAlgebra.Vector3D[], int, vsdk.toolkit.common.ColorRgb, vsdk.toolkit.common.ColorRgb, vsdk.toolkit.common.ColorRgb);
  public static void drawThreeControlPoints(javax.media.opengl.GL2, vsdk.toolkit.common.linealAlgebra.Vector3D[], vsdk.toolkit.common.ColorRgb, vsdk.toolkit.common.ColorRgb, vsdk.toolkit.common.ColorRgb);
  public static void drawTesselatedCurveInterior(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.ParametricCurve);
  static {};
}
Compiled from "JoglRGBAImageRenderer.java"
public class vsdk.toolkit.render.jogl.JoglRGBAImageRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglRGBAImageRenderer();
  public static int activate(javax.media.opengl.GL2, vsdk.toolkit.media.RGBAImage);
  public static int activateAsNormalMap(javax.media.opengl.GL2, vsdk.toolkit.media.RGBAImage, vsdk.toolkit.common.RendererConfiguration);
  public static void unload(javax.media.opengl.GL2, vsdk.toolkit.media.RGBAImage);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.media.RGBAImage);
  public static java.nio.ByteBuffer importJOGLimage(javax.media.opengl.GL2);
  public static void getImageJOGL(javax.media.opengl.GL2, vsdk.toolkit.media.RGBAImage);
  public static vsdk.toolkit.media.RGBAImage getImageJOGL(javax.media.opengl.GL2);
  static {};
}
Compiled from "JoglRGBImageRenderer.java"
public class vsdk.toolkit.render.jogl.JoglRGBImageRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglRGBImageRenderer();
  public static int activate(javax.media.opengl.GL2, vsdk.toolkit.media.RGBImage);
  public static int activateAsNormalMap(javax.media.opengl.GL2, vsdk.toolkit.media.RGBImage, vsdk.toolkit.common.RendererConfiguration);
  public static void deactivate(javax.media.opengl.GL2, vsdk.toolkit.media.RGBImage);
  public static void unload(javax.media.opengl.GL2, vsdk.toolkit.media.RGBImage);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.media.RGBImage);
  public static java.nio.ByteBuffer importJOGLimage(javax.media.opengl.GL2);
  public static void getImageJOGL(javax.media.opengl.GL2, vsdk.toolkit.media.RGBImage);
  public static vsdk.toolkit.media.RGBImage getImageJOGL(javax.media.opengl.GL2);
  static {};
}
Compiled from "JoglRenderer.java"
public abstract class vsdk.toolkit.render.jogl.JoglRenderer extends vsdk.toolkit.render.RenderingElement {
  protected static boolean nvidiaCgErrorReported;
  public vsdk.toolkit.render.jogl.JoglRenderer();
  public static boolean verifyOpenGLAvailability();
  public static void createDefaultAutomaticNvidiaCgShaders(java.lang.String);
  public static boolean setRenderingWithNvidiaGpu(boolean);
  public static boolean verifyNvidiaCgAvailability();
  public static boolean getNvidiaCgAvailability();
  public static boolean tryToEnableNvidiaCg();
  public static void enableNvidiaCgProfiles();
  public static void disableNvidiaCgProfiles();
  public static boolean needCg(vsdk.toolkit.common.RendererConfiguration);
  public static void deactivateNvidiaGpuParameters(javax.media.opengl.GL2, vsdk.toolkit.common.RendererConfiguration);
  static {};
}
Compiled from "JoglSphereRenderer.java"
public class vsdk.toolkit.render.jogl.JoglSphereRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglSphereRenderer();
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Sphere, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  public static void draw(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.Sphere, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration, int, int);
}
Compiled from "JoglVoxelVolumeRenderer.java"
public class vsdk.toolkit.render.jogl.JoglVoxelVolumeRenderer extends vsdk.toolkit.render.jogl.JoglRenderer {
  public vsdk.toolkit.render.jogl.JoglVoxelVolumeRenderer();
  public static void setThreshold(int);
  public static int getThreshold();
  public static void drawBinaryCubes(javax.media.opengl.GL2, vsdk.toolkit.environment.geometry.VoxelVolume, vsdk.toolkit.environment.Camera, vsdk.toolkit.common.RendererConfiguration);
  static {};
}
Compiled from "_JoglPolygonTesselatorRoutines.java"
public class vsdk.toolkit.render.jogl._JoglPolygonTesselatorRoutines extends vsdk.toolkit.render.jogl.JoglRenderer implements javax.media.opengl.glu.GLUtessellatorCallback {
  public vsdk.toolkit.render.jogl._JoglPolygonTesselatorRoutines(javax.media.opengl.GL2, javax.media.opengl.glu.GLU);
  public void begin(int);
  public void end();
  public void vertex(java.lang.Object);
  public void vertexData(java.lang.Object, java.lang.Object);
  public void combine(double[], java.lang.Object[], float[], java.lang.Object[]);
  public void combineData(double[], java.lang.Object[], float[], java.lang.Object[], java.lang.Object);
  public void error(int);
  public void beginData(int, java.lang.Object);
  public void endData(java.lang.Object);
  public void edgeFlag(boolean);
  public void edgeFlagData(boolean, java.lang.Object);
  public void errorData(int, java.lang.Object);
}
Compiled from "JoglRGBAImageRenderer.java"
class vsdk.toolkit.render.jogl._JoglRGBAImageRendererImageAssociation extends vsdk.toolkit.render.jogl.JoglRenderer {
  public int glList;
  public com.jogamp.opengl.util.texture.Texture renderer;
  public vsdk.toolkit.media.RGBAImage image;
  vsdk.toolkit.render.jogl._JoglRGBAImageRendererImageAssociation();
}
Compiled from "JoglRGBImageRenderer.java"
class vsdk.toolkit.render.jogl._JoglRGBImageRendererImageAssociation extends vsdk.toolkit.render.jogl.JoglRenderer {
  public int glList;
  public com.jogamp.opengl.util.texture.Texture renderer;
  public vsdk.toolkit.media.RGBImage image;
  vsdk.toolkit.render.jogl._JoglRGBImageRendererImageAssociation();
}
