/**
 *
 */
package Junit_Tests;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;

import Game_World.Location;
import Game_World.Altar;
import Game_World.Wall;
import Game_World_Objects.*;
import Graphics_Renderer.GraphicsRenderer;
import Graphics_Renderer.ImageLayer;
import Object_Interfaces.Container;

/**
 * @author benjamin
 * 
 */
public class Class_Examples {
	public static Location getEmptyLocation() {
		int[][] tileIDs1 = {
				{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1 },
				{ -1, 1, 5, 3, 0, 1, 3, 4, 2, 0, 1, 5, 3, 0, 1, 3, 4, 2, 0, -1 },
				{ -1, 2, 3, 1, 3, 2, 4, 2, 4, 5, 4, 1, 2, 1, 5, 2, 4, 4, 4, -1 },
				{ -1, 2, 3, 1, 3, 2, 4, 2, 4, 5, 4, 1, 2, 1, 5, 2, 4, 4, 4, -1 },
				{ -1, 0, 5, 4, 3, 5, 0, 4, 3, 1, 5, 0, 3, 2, 3, 1, 2, 3, 0, -1 },
				{ -1, 4, 1, 2, 1, 5, 2, 4, 4, 4, 2, 0, 0, 5, 2, 2, 0, 4, 4, -1 },
				{ -1, 5, 0, 3, 2, 3, 1, 2, 3, 0, 5, 0, 3, 2, 3, 1, 2, 3, 0, -1 },
				{ -1, 2, 2, 5, 3, 4, 5, 3, 1, 3, 2, 4, 4, 2, 1, 3, 3, 0, 2, -1 },
				{ -1, 4, 1, 2, 1, 5, 2, 4, 4, 4, 2, 0, 0, 5, 2, 2, 0, 4, 4, -1 },
				{ -1, 5, 0, 3, 2, 3, 1, 2, 3, 0, 5, 0, 3, 2, 3, 1, 2, 3, 0, -1 },
				{ -1, 5, 0, 3, 2, 3, 1, 2, 3, 0, 5, 0, 3, 2, 3, 1, 2, 3, 0, -1 },
				{ -1, 0, 5, 4, 3, 5, 0, 4, 3, 1, 5, 0, 3, 2, 3, 1, 2, 3, 0, -1 },
				{ -1, 4, 4, 1, 0, 3, 3, 1, 5, 3, 4, 1, 2, 1, 5, 2, 4, 4, 4, -1 },
				{ -1, 2, 0, 0, 5, 2, 2, 0, 4, 4, 1, 5, 3, 0, 1, 3, 4, 2, 0, -1 },
				{ -1, 4, 1, 2, 1, 5, 2, 4, 4, 4, 2, 0, 0, 5, 2, 2, 0, 4, 4, -1 },
				{ -1, 4, 4, 1, 0, 3, 3, 1, 5, 3, 4, 1, 2, 1, 5, 2, 4, 4, 4, -1 },
				{ -1, 4, 4, 1, 0, 3, 3, 1, 5, 3, 4, 1, 2, 1, 5, 2, 4, 4, 4, -1 },
				{ -1, 2, 4, 4, 2, 1, 3, 3, 0, 2, 4, 4, 1, 0, 3, 3, 1, 5, 3, -1 },
				{ -1, 0, 5, 4, 3, 5, 0, 4, 3, 1, 5, 0, 3, 2, 3, 1, 2, 3, 0, -1 },
				{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1 } };
		int[][] tileIDs2 = {
				{ 0, 1, 2, 3, 2, 3, 3, 2, 3, 2, 3, 2, 2, 2, 2, 3, 2, 3, 4, 5 },
				{ 10, 11, 12, 12, 13, 13, 13, 13, 12, 12, 13, 12, 13, 12, 12,
						13, 12, 13, 14, 15 },
				{ 20, 21, 22, 23, 22, 22, 22, 22, 23, 23, 22, 23, 22, 23, 22,
						23, 22, 23, 24, 25 },
				{ 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 35 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 35 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 35 },
				{ 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, 45 },
				{ 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, 54, 55 },
				{ 60, 61, 62, 63, 62, 62, 63, 62, 62, 63, 63, 63, 62, 62, 63,
						62, 62, 62, 64, 65 } };
		int[][] tileIDs3 = {
				{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1 },
				{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1 },
				{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1 },
				{ -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 },
				{ -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1 } };

		ImageLayer layer1 = new ImageLayer("Images/tilesets/wooden floor.png",
				tileIDs1);
		ImageLayer layer2 = new ImageLayer(
				"Images/tilesets/walls interiour damaged.png", tileIDs2);
		ImageLayer layer3 = new ImageLayer("Images/tilesets/wall shadows.png",
				tileIDs3);

		List<ImageLayer> list = new ArrayList<ImageLayer>();
		list.add(layer1);
		list.add(layer2);
		list.add(layer3);
		GraphicsRenderer.allGraphics.put("Empty Location",
				GraphicsRenderer.drawLayers(list));
		Location room = new Location("Empty Location");
		// Top wall
		room.getAllObjects().add(new Wall(new Rectangle(0, 80, 800, 40)));
		// Left wall
		room.getAllObjects().add(new Wall(new Rectangle(0, 120, 40, 640)));
		// Right wall
		room.getAllObjects().add(new Wall(new Rectangle(760, 120, 40, 640)));
		// Bottom Wall
		room.getAllObjects().add(new Wall(new Rectangle(0, 760, 800, 40)));
		return room;
	}

	public static Location getAlterRoom() {
		int i = 0;
		if (i == 0)
			throw new IllegalArgumentException();
		Location room = getEmptyLocation();
		room.getAllObjects().add(new Altar());

		return room;
	}

	public static Location getRoomWithWall() {
		Location room = getEmptyLocation();

		room.getAllObjects().add(
				new Wall(new Rectangle(40, 320, 400, 40), "Home middle wall",
						new Point(0, 80)));
		room.getAllObjects().add(getEmptyChest());

		return room;
	}

	public static Container getEmptyContainer() {
		return null;
	}

	public static Chest getEmptyChest() {
		return new Chest(new Point(130, 140));
	}

	public static Chest getChest() {
		Chest chest = getEmptyChest();
		chest.getItems().add(new Food(null, 5));
		chest.getItems().add(new Key(null, 1));
		return chest;
	}
}
