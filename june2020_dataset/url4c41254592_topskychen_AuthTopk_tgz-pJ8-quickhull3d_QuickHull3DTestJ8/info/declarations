Compiled from "BigMathPoint.java"
public class Math.BigMathPoint {
  public Math.BigMathPoint(Math.BigMathPoint);
  public Math.BigMathPoint(long, long);
  public Math.BigMathPoint();
  public static Math.BigMathPoint add(Math.BigMathPoint, Math.BigMathPoint);
  public Math.BigMathPoint(java.math.BigDecimal, java.math.BigDecimal);
  public Math.BigMathPoint(java.math.BigDecimal[]);
  public Math.BigMathPoint(long[]);
  public Math.BigMathPoint(float[]);
  public void show();
  public java.math.BigDecimal getX();
  public void setX(java.math.BigDecimal);
  public java.math.BigDecimal getY();
  public void setY(java.math.BigDecimal);
  public java.math.BigDecimal getW();
  public java.math.BigDecimal[] getCoords();
  public int getCoordsLen();
  public java.math.BigDecimal getCoord(int);
  public static void main(java.lang.String[]);
}
Compiled from "BigMathUtility.java"
public class Math.BigMathUtility {
  public Math.BigMathUtility();
  public static java.math.BigDecimal Square(java.math.BigDecimal);
  public static java.math.BigDecimal getDistance2in2d(Math.BigMathPoint, Math.BigMathPoint);
  public static java.math.BigDecimal Det(Math.BigMathPoint, Math.BigMathPoint, Math.BigMathPoint);
  public static void main(java.lang.String[]);
}
Compiled from "MathCircle.java"
public class Math.MathCircle {
  Math.MathPoint c;
  double r;
  public Math.MathCircle();
  public Math.MathCircle(Math.MathCircle);
  public Math.MathCircle(double, double, double);
  public Math.MathCircle(Math.MathPoint, double);
  public Math.MathPoint getCenter();
  public double getRadius();
  public double getDiameter();
  public static double getDistByCenter(Math.MathCircle, Math.MathCircle);
  public static int getRelation(Math.MathCircle, Math.MathCircle);
  public boolean isInside(Math.MathPoint);
  public boolean isInsideStrictly(Math.MathPoint);
  public static Math.MathCircle getInscribedCircleFromIntersection(Math.MathCircle, Math.MathCircle);
  public static Math.MathCircle getInscribedCircleInBOutA(Math.MathCircle, Math.MathCircle);
  public double getArea();
  public double getPerimeter();
  public void show();
  public static void main(java.lang.String[]);
}
Compiled from "MathLine.java"
public class Math.MathLine {
  Math.MathPoint u;
  Math.MathPoint v;
  public Math.MathLine();
  public Math.MathLine(double, double, double, double);
  public Math.MathLine(Math.MathPoint, Math.MathPoint);
  public boolean isPointOnLine(double, double);
  public boolean isPointOnLine(Math.MathPoint);
  public boolean isPointOnSegment(double, double);
  public boolean isPointOnSegment(Math.MathPoint);
  public static void main(java.lang.String[]);
}
Compiled from "MathPoint.java"
public class Math.MathPoint {
  public Math.MathPoint(Math.MathPoint);
  public Math.MathPoint();
  public Math.MathPoint(double, double, double);
  public Math.MathPoint(double, double);
  public Math.MathPoint(double[]);
  public Math.MathPoint(float[]);
  public void show();
  public static void main(java.lang.String[]);
  public double getX();
  public void setX(double);
  public double getY();
  public void setY(double);
  public double getZ();
  public void setZ(double);
  public double[] getCoords();
  public int getCoordsLen();
  public double getCoord(int);
  public Math.MathPoint getNorm(double);
  public static double getDistance(Math.MathPoint, Math.MathPoint);
  public static Math.MathPoint add(Math.MathPoint, Math.MathPoint);
  public Math.MathPoint add(Math.MathPoint);
  public static Math.MathPoint minus(Math.MathPoint, Math.MathPoint);
  public Math.MathPoint minus(Math.MathPoint);
  public void multiplyToSelf(double);
  public Math.MathPoint multiply(double);
  public static Math.MathPoint dotproduct(Math.MathPoint, Math.MathPoint);
  public Math.MathPoint dotproduct(Math.MathPoint);
  public static Math.MathPoint getScorePoint(Math.MathPoint, Math.MathPoint, double);
  public boolean equals(Math.MathPoint);
}
Compiled from "MathPolygon.java"
public class Math.MathPolygon {
  java.util.ArrayList<Math.MathPoint> points;
  public Math.MathPolygon(Math.MathPoint[]);
  public Math.MathPolygon(java.util.ArrayList<Math.MathPoint>);
  public Math.MathPolygon();
  public int getVerticesNumber();
  public Math.MathPoint getVertice(int);
  public boolean removeVertice(int);
  public void addVertice(Math.MathPoint, int);
  public void addVertice(Math.MathPoint);
  public void addVertice(double[]);
  public void addVertice(double, double);
  public boolean inPolygon(Math.MathPoint);
  public boolean inPolygon2(Math.MathPoint);
  public static void main(java.lang.String[]);
}
Compiled from "MathSphere.java"
public class Math.MathSphere {
  Math.MathPoint c;
  double r;
  public Math.MathSphere();
  public Math.MathSphere(Math.MathCircle);
  public Math.MathSphere(Math.MathSphere);
  public Math.MathSphere(double, double, double, double);
  public Math.MathSphere(Math.MathPoint, double);
  public Math.MathPoint getCenter();
  public double getRadius();
  public double getDiameter();
  public static double getDistByCenter(Math.MathSphere, Math.MathSphere);
  public static int getRelation(Math.MathSphere, Math.MathSphere);
  public boolean isInside(Math.MathPoint);
  public boolean isInsideStrictly(Math.MathPoint);
  public static Math.MathSphere getInscribedCircleFromIntersection(Math.MathSphere, Math.MathSphere);
  public static Math.MathSphere getInscribedCircleInBOutA(Math.MathSphere, Math.MathSphere);
  public double getVolume();
  public double getSurfaceArea();
  public void show();
  public static void main(java.lang.String[]);
}
Compiled from "MathUtility.java"
public class Math.MathUtility {
  static double eps;
  public Math.MathUtility();
  public static double getEps();
  public static void setEps(double);
  public static double calculateLatLngDist(double, double, double, double);
  public static double Square(double);
  public static int D(double);
  public static double getDistance(double[], double[]);
  public static double getDistance(Math.MathPoint, Math.MathPoint);
  public static double getDistance2(double[], double[]);
  public static double getDistance(double, double, double, double);
  public static double getDistance2(double, double, double, double);
  public static double Det(Math.MathPoint, Math.MathPoint, Math.MathPoint);
  public static Math.MathPoint getCross2Lines(Math.MathPoint, Math.MathPoint, Math.MathPoint, Math.MathPoint);
  public static boolean isParallel(Math.MathPoint, Math.MathPoint, Math.MathPoint, Math.MathPoint);
  public static boolean isOppoSide(Math.MathPoint, Math.MathPoint, Math.MathPoint, Math.MathPoint);
  public static boolean isInsideRect(Math.MathPoint, Math.MathPoint[]);
  public static boolean is2SegmentsCrossed(Math.MathPoint, Math.MathPoint, Math.MathPoint, Math.MathPoint);
  public static boolean isSegmentIntersectWithRect(Math.MathLine, Math.MathPoint[]);
  public static boolean isSegmentInterOrInsideWithRect(Math.MathLine, Math.MathPoint[]);
  public static boolean isSegmentInterOrInsideWithRect(Math.MathPoint, Math.MathPoint, Math.MathPoint, Math.MathPoint);
  public static double getApproximate(double);
  public static boolean isPointOnLine(Math.MathPoint, Math.MathLine);
  public static boolean isPointOnLine(Math.MathPoint, Math.MathPoint, Math.MathPoint);
  public static boolean isPointOnSegment(Math.MathPoint, Math.MathLine);
  public static boolean isPointOnSegment(Math.MathPoint, Math.MathPoint, Math.MathPoint);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "Delaunay.java"
public class mesh.Delaunay {
  float[][] edges;
  mesh.LinkedArray mesh;
  int[][] links;
  int linkCount;
  public mesh.Delaunay(float[][]);
  public float[][] getEdges();
  public int[][] getLinks();
  public int[] getLinked(int);
  public int edgeCount();
}
Compiled from "Hull.java"
public class mesh.Hull {
  int[] extrema;
  mesh.MPolygon region;
  public mesh.Hull(float[][]);
  public int[] getExtrema();
  public mesh.MPolygon getRegion();
}
Compiled from "IntArray.java"
public class mesh.IntArray {
  int[] data;
  int length;
  public mesh.IntArray();
  public mesh.IntArray(int);
  public void add(int);
  public int get(int);
  public boolean contains(int);
}
Compiled from "LinkedArray.java"
public class mesh.LinkedArray {
  mesh.LinkedIndex[] array;
  public mesh.LinkedArray(int);
  public mesh.LinkedIndex get(int);
  public void link(int, int);
  public boolean linked(int, int);
}
Compiled from "LinkedIndex.java"
public class mesh.LinkedIndex {
  mesh.LinkedArray array;
  int index;
  int[] links;
  int linkCount;
  public mesh.LinkedIndex(mesh.LinkedArray, int);
  public void linkTo(int);
  public boolean linked(int);
  public int[] getLinks();
}
Compiled from "MPolygon.java"
public class mesh.MPolygon {
  float[][] coords;
  int count;
  public mesh.MPolygon();
  public mesh.MPolygon(int);
  public void add(float, float);
  public int count();
  public float[][] getCoords();
  public float[] getCoords(int);
}
Compiled from "PDelaunay.java"
public class mesh.PDelaunay {
  float[][] edges;
  mesh.LinkedArray mesh;
  int[][] links;
  int linkCount;
  public mesh.PDelaunay(float[][]);
  public float[][] getEdges();
  public int[][] getLinks();
  public int[] getLinked(int);
  public int edgeCount();
  public static void main(java.lang.String[]);
}
Compiled from "PVoronoi.java"
public class mesh.PVoronoi {
  float[][] edges;
  mesh.MPolygon[] regions;
  public mesh.PVoronoi(float[][]);
  public mesh.MPolygon[] getRegions();
  public float[][] getEdges();
  protected boolean isEdgeShared(int[], int[]);
  public static void main(java.lang.String[]);
}
Compiled from "Voronoi.java"
public class mesh.Voronoi {
  float[][] edges;
  mesh.MPolygon[] regions;
  public mesh.Voronoi(float[][]);
  public mesh.MPolygon[] getRegions();
  public float[][] getEdges();
  protected boolean isEdgeShared(int[], int[]);
}
Compiled from "Face.java"
class quickhull3d.Face {
  quickhull3d.HalfEdge he0;
  double area;
  double planeOffset;
  int index;
  int numVerts;
  quickhull3d.Face next;
  static final int VISIBLE;
  static final int NON_CONVEX;
  static final int DELETED;
  int mark;
  quickhull3d.Vertex outside;
  public void computeCentroid(quickhull3d.Point3d);
  public void computeNormal(quickhull3d.Vector3d, double);
  public void computeNormal(quickhull3d.Vector3d);
  public static quickhull3d.Face createTriangle(quickhull3d.Vertex, quickhull3d.Vertex, quickhull3d.Vertex);
  public static quickhull3d.Face createTriangle(quickhull3d.Vertex, quickhull3d.Vertex, quickhull3d.Vertex, double);
  public static quickhull3d.Face create(quickhull3d.Vertex[], int[]);
  public quickhull3d.Face();
  public quickhull3d.HalfEdge getEdge(int);
  public quickhull3d.HalfEdge getFirstEdge();
  public quickhull3d.HalfEdge findEdge(quickhull3d.Vertex, quickhull3d.Vertex);
  public double distanceToPlane(quickhull3d.Point3d);
  public quickhull3d.Vector3d getNormal();
  public quickhull3d.Point3d getCentroid();
  public int numVertices();
  public java.lang.String getVertexString();
  public void getVertexIndices(int[]);
  void checkConsistency();
  public int mergeAdjacentFace(quickhull3d.HalfEdge, quickhull3d.Face[]);
  public void triangulate(quickhull3d.FaceList, double);
}
Compiled from "FaceList.java"
class quickhull3d.FaceList {
  quickhull3d.FaceList();
  public void clear();
  public void add(quickhull3d.Face);
  public quickhull3d.Face first();
  public boolean isEmpty();
}
Compiled from "HalfEdge.java"
class quickhull3d.HalfEdge {
  quickhull3d.Vertex vertex;
  quickhull3d.Face face;
  quickhull3d.HalfEdge next;
  quickhull3d.HalfEdge prev;
  quickhull3d.HalfEdge opposite;
  public quickhull3d.HalfEdge(quickhull3d.Vertex, quickhull3d.Face);
  public quickhull3d.HalfEdge();
  public void setNext(quickhull3d.HalfEdge);
  public quickhull3d.HalfEdge getNext();
  public void setPrev(quickhull3d.HalfEdge);
  public quickhull3d.HalfEdge getPrev();
  public quickhull3d.Face getFace();
  public quickhull3d.HalfEdge getOpposite();
  public void setOpposite(quickhull3d.HalfEdge);
  public quickhull3d.Vertex head();
  public quickhull3d.Vertex tail();
  public quickhull3d.Face oppositeFace();
  public java.lang.String getVertexString();
  public double length();
  public double lengthSquared();
}
Compiled from "InternalErrorException.java"
public class quickhull3d.InternalErrorException extends java.lang.RuntimeException {
  public quickhull3d.InternalErrorException(java.lang.String);
}
Compiled from "Point3d.java"
public class quickhull3d.Point3d extends quickhull3d.Vector3d {
  public quickhull3d.Point3d();
  public quickhull3d.Point3d(quickhull3d.Vector3d);
  public quickhull3d.Point3d(double, double, double);
}
Compiled from "QhullTest.java"
class quickhull3d.QhullTest {
  static double[] coords;
  static int[][] faces;
  quickhull3d.QhullTest();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "QhullTestCA.java"
public class quickhull3d.QhullTestCA {
  public quickhull3d.QhullTestCA();
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
}
Compiled from "QuickHull3D.java"
public class quickhull3d.QuickHull3D {
  public static final int CLOCKWISE;
  public static final int INDEXED_FROM_ONE;
  public static final int INDEXED_FROM_ZERO;
  public static final int POINT_RELATIVE;
  public static final double AUTOMATIC_TOLERANCE;
  protected int findIndex;
  protected double charLength;
  protected boolean debug;
  protected quickhull3d.Vertex[] pointBuffer;
  protected int[] vertexPointIndices;
  protected java.util.Vector faces;
  protected java.util.Vector horizon;
  protected int numVertices;
  protected int numFaces;
  protected int numPoints;
  protected double explicitTolerance;
  protected double tolerance;
  public boolean getDebug();
  public void setDebug(boolean);
  public double getDistanceTolerance();
  public void setExplicitDistanceTolerance(double);
  public double getExplicitDistanceTolerance();
  public quickhull3d.QuickHull3D();
  public quickhull3d.QuickHull3D(double[]) throws java.lang.IllegalArgumentException;
  public quickhull3d.QuickHull3D(quickhull3d.Point3d[]) throws java.lang.IllegalArgumentException;
  protected void setHull(double[], int, int[][], int);
  protected void setFromQhull(double[], int, boolean);
  public void build(double[]) throws java.lang.IllegalArgumentException;
  public void build(double[], int) throws java.lang.IllegalArgumentException;
  public void build(quickhull3d.Point3d[]) throws java.lang.IllegalArgumentException;
  public void build(quickhull3d.Point3d[], int) throws java.lang.IllegalArgumentException;
  public void triangulate();
  protected void initBuffers(int);
  protected void setPoints(double[], int);
  protected void setPoints(quickhull3d.Point3d[], int);
  protected void computeMaxAndMin();
  protected void createInitialSimplex() throws java.lang.IllegalArgumentException;
  public int getNumVertices();
  public quickhull3d.Point3d[] getVertices();
  public int getVertices(double[]);
  public int[] getVertexPointIndices();
  public int getNumFaces();
  public int[][] getFaces();
  public int[][] getFaces(int);
  public void print(java.io.PrintStream);
  public void print(java.io.PrintStream, int);
  protected void resolveUnclaimedPoints(quickhull3d.FaceList);
  protected void deleteFacePoints(quickhull3d.Face, quickhull3d.Face);
  protected double oppFaceDistance(quickhull3d.HalfEdge);
  protected void calculateHorizon(quickhull3d.Point3d, quickhull3d.HalfEdge, quickhull3d.Face, java.util.Vector);
  protected void addNewFaces(quickhull3d.FaceList, quickhull3d.Vertex, java.util.Vector);
  protected quickhull3d.Vertex nextPointToAdd();
  protected void addPointToHull(quickhull3d.Vertex);
  protected void buildHull();
  protected void reindexFacesAndVertices();
  protected boolean checkFaceConvexity(quickhull3d.Face, double, java.io.PrintStream);
  protected boolean checkFaces(double, java.io.PrintStream);
  public boolean check(java.io.PrintStream);
  public boolean check(java.io.PrintStream, double);
}
Compiled from "QuickHull3DTest.java"
public class quickhull3d.QuickHull3DTest {
  static boolean triangulate;
  static boolean doTesting;
  static boolean doTiming;
  static boolean debugEnable;
  static final int NO_DEGENERACY;
  static final int EDGE_DEGENERACY;
  static final int VERTEX_DEGENERACY;
  java.util.Random rand;
  static boolean testRotation;
  static int degeneracyTest;
  static double epsScale;
  int cnt;
  public quickhull3d.QuickHull3DTest();
  public boolean faceIndicesEqual(int[], int[]);
  public double[] randomPoints(int, double);
  public double[] randomDegeneratePoints(int, int);
  public double[] randomSphericalPoints(int, double);
  public double[] randomCubedPoints(int, double, double);
  public double[] randomGridPoints(int, double);
  void explicitFaceCheck(quickhull3d.QuickHull3D, int[][]) throws java.lang.Exception;
  void singleTest(double[], int[][]) throws java.lang.Exception;
  double[] addDegeneracy(int, double[], quickhull3d.QuickHull3D);
  void degenerateTest(quickhull3d.QuickHull3D, double[]) throws java.lang.Exception;
  void rotateCoords(double[], double[], double, double, double);
  void printCoords(double[]);
  void testException(double[], java.lang.String);
  void test(double[], int[][]) throws java.lang.Exception;
  public void explicitAndRandomTests();
  public void timingTests();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SimpleExample.java"
public class quickhull3d.SimpleExample {
  public quickhull3d.SimpleExample();
  public static void main(java.lang.String[]);
}
Compiled from "Vector3d.java"
public class quickhull3d.Vector3d {
  public double x;
  public double y;
  public double z;
  public quickhull3d.Vector3d();
  public quickhull3d.Vector3d(quickhull3d.Vector3d);
  public quickhull3d.Vector3d(double, double, double);
  public double get(int);
  public void set(int, double);
  public void set(quickhull3d.Vector3d);
  public void add(quickhull3d.Vector3d, quickhull3d.Vector3d);
  public void add(quickhull3d.Vector3d);
  public void sub(quickhull3d.Vector3d, quickhull3d.Vector3d);
  public void sub(quickhull3d.Vector3d);
  public void scale(double);
  public void scale(double, quickhull3d.Vector3d);
  public double norm();
  public double normSquared();
  public double distance(quickhull3d.Vector3d);
  public double distanceSquared(quickhull3d.Vector3d);
  public double dot(quickhull3d.Vector3d);
  public void normalize();
  public void setZero();
  public void set(double, double, double);
  public void cross(quickhull3d.Vector3d, quickhull3d.Vector3d);
  protected void setRandom(double, double, java.util.Random);
  public java.lang.String toString();
}
Compiled from "Vertex.java"
class quickhull3d.Vertex {
  quickhull3d.Point3d pnt;
  int index;
  quickhull3d.Vertex prev;
  quickhull3d.Vertex next;
  quickhull3d.Face face;
  public quickhull3d.Vertex();
  public quickhull3d.Vertex(double, double, double, int);
}
Compiled from "VertexList.java"
class quickhull3d.VertexList {
  quickhull3d.VertexList();
  public void clear();
  public void add(quickhull3d.Vertex);
  public void addAll(quickhull3d.Vertex);
  public void delete(quickhull3d.Vertex);
  public void delete(quickhull3d.Vertex, quickhull3d.Vertex);
  public void insertBefore(quickhull3d.Vertex, quickhull3d.Vertex);
  public quickhull3d.Vertex first();
  public boolean isEmpty();
}
Compiled from "IData.java"
public interface spatialindex.core.IData extends spatialindex.core.IEntry {
  public abstract byte[] getData();
}
Compiled from "IEntry.java"
public interface spatialindex.core.IEntry {
  public abstract int getIdentifier();
  public abstract spatialindex.core.IShape getShape();
}
Compiled from "INearestNeighborComparator.java"
public interface spatialindex.core.INearestNeighborComparator {
  public abstract double getMinimumDistance(spatialindex.core.IShape, spatialindex.core.IEntry);
}
Compiled from "INode.java"
public interface spatialindex.core.INode extends spatialindex.core.IEntry {
  public abstract int getChildrenCount();
  public abstract int getChildIdentifier(int) throws java.lang.IndexOutOfBoundsException;
  public abstract spatialindex.core.IShape getChildShape(int) throws java.lang.IndexOutOfBoundsException;
  public abstract int getLevel();
  public abstract boolean isIndex();
  public abstract boolean isLeaf();
}
Compiled from "INodeCommand.java"
public interface spatialindex.core.INodeCommand {
  public abstract void execute(spatialindex.core.INode);
}
Compiled from "IQueryStrategy.java"
public interface spatialindex.core.IQueryStrategy {
  public abstract void getNextEntry(spatialindex.core.IEntry, int[], boolean[]);
}
Compiled from "IShape.java"
public interface spatialindex.core.IShape {
  public static final double EPSILON;
  public abstract boolean intersects(spatialindex.core.IShape);
  public abstract boolean contains(spatialindex.core.IShape);
  public abstract boolean touches(spatialindex.core.IShape);
  public abstract double[] getCenter();
  public abstract long getDimension();
  public abstract spatialindex.core.Region getMBR();
  public abstract double getArea();
  public abstract double getMinimumDistance(spatialindex.core.IShape);
}
Compiled from "ISpatialIndex.java"
public interface spatialindex.core.ISpatialIndex {
  public abstract void flush() throws java.lang.IllegalStateException;
  public abstract void insertData(byte[], spatialindex.core.IShape, int);
  public abstract boolean deleteData(spatialindex.core.IShape, int);
  public abstract void containmentQuery(spatialindex.core.IShape, spatialindex.core.IVisitor);
  public abstract void intersectionQuery(spatialindex.core.IShape, spatialindex.core.IVisitor);
  public abstract void pointLocationQuery(spatialindex.core.IShape, spatialindex.core.IVisitor);
  public abstract void nearestNeighborQuery(int, spatialindex.core.IShape, spatialindex.core.IVisitor, spatialindex.core.INearestNeighborComparator);
  public abstract void nearestNeighborQuery(int, spatialindex.core.IShape, spatialindex.core.IVisitor);
  public abstract void queryStrategy(spatialindex.core.IQueryStrategy);
  public abstract spatialindex.setting.PropertySet getIndexProperties();
  public abstract void addWriteNodeCommand(spatialindex.core.INodeCommand);
  public abstract void addReadNodeCommand(spatialindex.core.INodeCommand);
  public abstract void addDeleteNodeCommand(spatialindex.core.INodeCommand);
  public abstract boolean isIndexValid();
  public abstract spatialindex.core.IStatistics getStatistics();
}
Compiled from "IStatistics.java"
public interface spatialindex.core.IStatistics {
  public abstract long getReads();
  public abstract long getWrites();
  public abstract long getNumberOfNodes();
  public abstract long getNumberOfData();
}
Compiled from "IVisitor.java"
public interface spatialindex.core.IVisitor {
  public static final int TYPE_OUTSIDE;
  public static final int TYPE_INTERSECT;
  public static final int TYPE_INSIDE;
  public abstract void visitData(spatialindex.core.IData);
  public abstract void visitData(spatialindex.core.IData, int);
  public abstract void setParentCellInside(boolean);
  public abstract void searchFinished(int);
  public abstract java.util.ArrayList<java.lang.String> getVOStringArray();
  public abstract void visitNode(spatialindex.core.INode);
  public abstract void visitNode(spatialindex.core.INode, int);
  public abstract void visitNode(spatialindex.core.INode, int, int[]);
  public abstract void setParentNodeInside(boolean);
}
Compiled from "Point.java"
public class spatialindex.core.Point implements spatialindex.core.IShape,java.lang.Cloneable,java.io.Serializable {
  public static final double EPSILON;
  public double[] m_pCoords;
  public spatialindex.core.Point(double[]);
  public spatialindex.core.Point(spatialindex.core.Point);
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
  public boolean intersects(spatialindex.core.IShape);
  public boolean contains(spatialindex.core.IShape);
  public boolean touches(spatialindex.core.IShape);
  public double[] getCenter();
  public long getDimension();
  public spatialindex.core.Region getMBR();
  public double getArea();
  public double getMinimumDistance(spatialindex.core.IShape);
  double getMinimumDistance(spatialindex.core.Point);
  public double getCoord(int) throws java.lang.IndexOutOfBoundsException;
}
Compiled from "RWLock.java"
public class spatialindex.core.RWLock {
  public spatialindex.core.RWLock();
  public synchronized void read_lock();
  public synchronized boolean read_lock_noblock();
  public synchronized void read_unlock();
  public void write_lock();
  public synchronized boolean write_lock_noblock();
  public synchronized void write_unlock();
}
Compiled from "Region.java"
public class spatialindex.core.Region implements spatialindex.core.IShape,java.io.Serializable {
  public double[] m_pLow;
  public double[] m_pHigh;
  public spatialindex.core.Region();
  public spatialindex.core.Region(double[], double[]);
  public spatialindex.core.Region(spatialindex.core.Point, spatialindex.core.Point);
  public spatialindex.core.Region(spatialindex.core.Region);
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
  public boolean intersects(spatialindex.core.IShape);
  public boolean contains(spatialindex.core.IShape);
  public boolean touches(spatialindex.core.IShape);
  public double[] getCenter();
  public long getDimension();
  public spatialindex.core.Region getMBR();
  public double getArea();
  public double getMinimumDistance(spatialindex.core.IShape);
  public int getRelationCode(spatialindex.core.IShape);
  public boolean intersects(spatialindex.core.Region);
  public boolean contains(spatialindex.core.Region);
  public boolean touches(spatialindex.core.Region);
  public double getMinimumDistance(spatialindex.core.Region);
  public boolean contains(spatialindex.core.Point);
  public boolean touches(spatialindex.core.Point);
  public double getMinimumDistance(spatialindex.core.Point);
  public double getIntersectingArea(spatialindex.core.Region);
  public spatialindex.core.Region combinedRegion(spatialindex.core.Region);
  public static spatialindex.core.Region combinedRegion(spatialindex.core.Region[]);
  public static void combinedRegion(spatialindex.core.Region, spatialindex.core.Region);
  public double getMargin();
  public double getLow(int) throws java.lang.IndexOutOfBoundsException;
  public double getHigh(int) throws java.lang.IndexOutOfBoundsException;
  public java.lang.String toString();
}
Compiled from "VOErrorException.java"
public class spatialindex.core.VOErrorException extends java.lang.Exception {
  java.lang.String errInfo;
  public spatialindex.core.VOErrorException(java.lang.String);
  public java.lang.String toString();
}
Compiled from "Buffer.java"
public abstract class spatialindex.io.Buffer implements spatialindex.io.IBuffer {
  int m_capacity;
  boolean m_bWriteThrough;
  spatialindex.io.IStorageManager m_storageManager;
  java.util.HashMap<java.lang.Integer, spatialindex.io.Buffer$Entry> m_buffer;
  long m_hits;
  abstract void addEntry(int, spatialindex.io.Buffer$Entry);
  abstract void removeEntry();
  public spatialindex.io.Buffer(spatialindex.io.IStorageManager, int, boolean);
  public byte[] loadByteArray(int);
  public int storeByteArray(int, byte[]);
  public void deleteByteArray(int);
  public void flush();
  public void clear();
  public long getHits();
}
Compiled from "Buffer.java"
class spatialindex.io.Buffer$Entry {
  byte[] m_data;
  boolean m_bDirty;
  final spatialindex.io.Buffer this$0;
  spatialindex.io.Buffer$Entry(spatialindex.io.Buffer, byte[]);
}
Compiled from "DiskStorageManager.java"
public class spatialindex.io.DiskStorageManager implements spatialindex.io.IStorageManager {
  public spatialindex.io.DiskStorageManager(spatialindex.setting.PropertySet) throws java.lang.SecurityException, java.lang.NullPointerException, java.io.IOException, java.io.FileNotFoundException, java.lang.IllegalArgumentException;
  public void flush();
  public byte[] loadByteArray(int);
  public int storeByteArray(int, byte[]);
  public void deleteByteArray(int);
  public void close();
}
Compiled from "DiskStorageManager.java"
class spatialindex.io.DiskStorageManager$Entry {
  int m_length;
  java.util.ArrayList<java.lang.Integer> m_pages;
  final spatialindex.io.DiskStorageManager this$0;
  spatialindex.io.DiskStorageManager$Entry(spatialindex.io.DiskStorageManager);
}
Compiled from "IBuffer.java"
public interface spatialindex.io.IBuffer extends spatialindex.io.IStorageManager {
  public abstract long getHits();
  public abstract void clear();
  public abstract void flush();
}
Compiled from "IStorageManager.java"
public interface spatialindex.io.IStorageManager {
  public static final int NewPage;
  public abstract void flush();
  public abstract byte[] loadByteArray(int);
  public abstract int storeByteArray(int, byte[]);
  public abstract void deleteByteArray(int);
}
Compiled from "InvalidPageException.java"
public class spatialindex.io.InvalidPageException extends java.lang.RuntimeException {
  public spatialindex.io.InvalidPageException(int);
}
Compiled from "MemoryStorageManager.java"
public class spatialindex.io.MemoryStorageManager implements spatialindex.io.IStorageManager {
  public spatialindex.io.MemoryStorageManager();
  public void flush();
  public byte[] loadByteArray(int);
  public int storeByteArray(int, byte[]);
  public void deleteByteArray(int);
}
Compiled from "MemoryStorageManager.java"
class spatialindex.io.MemoryStorageManager$Entry {
  byte[] m_pData;
  final spatialindex.io.MemoryStorageManager this$0;
  spatialindex.io.MemoryStorageManager$Entry(spatialindex.io.MemoryStorageManager, byte[]);
}
Compiled from "RandomEvictionsBuffer.java"
public class spatialindex.io.RandomEvictionsBuffer extends spatialindex.io.Buffer {
  java.util.Random m_random;
  static final boolean $assertionsDisabled;
  public spatialindex.io.RandomEvictionsBuffer(spatialindex.io.IStorageManager, int, boolean);
  void addEntry(int, spatialindex.io.Buffer$Entry);
  void removeEntry();
  static {};
}
Compiled from "BuildKDTreeStrategy.java"
public class spatialindex.rtree.BuildKDTreeStrategy implements spatialindex.core.IQueryStrategy {
  java.util.ArrayList<java.lang.Integer> ids;
  spatialindex.rtree.BuildKDTreeStrategy$kdentry[] node_list;
  spatialindex.rtree.RTree rtree;
  public int d;
  public void build_kd_tree_internal(int, int, int);
  public void build_kd_tree_leaf(int, int, int);
  public void getNextEntry(spatialindex.core.IEntry, int[], boolean[]);
  public spatialindex.rtree.BuildKDTreeStrategy(spatialindex.rtree.RTree);
}
Compiled from "BuildKDTreeStrategy.java"
class spatialindex.rtree.BuildKDTreeStrategy$1 implements java.util.Comparator<spatialindex.rtree.BuildKDTreeStrategy$kdentry> {
  final int val$indicator;
  final spatialindex.rtree.BuildKDTreeStrategy this$0;
  spatialindex.rtree.BuildKDTreeStrategy$1(spatialindex.rtree.BuildKDTreeStrategy, int);
  public int compare(spatialindex.rtree.BuildKDTreeStrategy$kdentry, spatialindex.rtree.BuildKDTreeStrategy$kdentry);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "BuildKDTreeStrategy.java"
class spatialindex.rtree.BuildKDTreeStrategy$2 implements java.util.Comparator<spatialindex.rtree.BuildKDTreeStrategy$kdentry> {
  final int val$indicator;
  final spatialindex.rtree.BuildKDTreeStrategy this$0;
  spatialindex.rtree.BuildKDTreeStrategy$2(spatialindex.rtree.BuildKDTreeStrategy, int);
  public int compare(spatialindex.rtree.BuildKDTreeStrategy$kdentry, spatialindex.rtree.BuildKDTreeStrategy$kdentry);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "BuildKDTreeStrategy.java"
class spatialindex.rtree.BuildKDTreeStrategy$3 implements java.util.Comparator<spatialindex.rtree.BuildKDTreeStrategy$kdentry> {
  final int val$indicater;
  final spatialindex.rtree.BuildKDTreeStrategy this$0;
  spatialindex.rtree.BuildKDTreeStrategy$3(spatialindex.rtree.BuildKDTreeStrategy, int);
  public int compare(spatialindex.rtree.BuildKDTreeStrategy$kdentry, spatialindex.rtree.BuildKDTreeStrategy$kdentry);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "BuildKDTreeStrategy.java"
class spatialindex.rtree.BuildKDTreeStrategy$kdentry {
  int id;
  spatialindex.core.Region region;
  final spatialindex.rtree.BuildKDTreeStrategy this$0;
  public spatialindex.rtree.BuildKDTreeStrategy$kdentry(spatialindex.rtree.BuildKDTreeStrategy, int, spatialindex.core.Region);
}
Compiled from "BuildRTreeStrategy.java"
public class spatialindex.rtree.BuildRTreeStrategy implements spatialindex.core.IQueryStrategy {
  java.util.ArrayList<java.lang.Integer> ids;
  spatialindex.rtree.RTree rtree;
  spatialindex.rtree.BuildRTreeStrategy$KNNCompartor knnc;
  spatialindex.core.IShape query;
  spatialindex.core.IVisitor v;
  java.util.ArrayList<spatialindex.rtree.StateCell> states;
  double dist;
  public void LoadRTree(spatialindex.rtree.Node, spatialindex.core.IShape, spatialindex.rtree.BuildRTreeStrategy$KNNCompartor, spatialindex.core.IVisitor, spatialindex.core.Region, double);
  public void getNextEntry(spatialindex.core.IEntry, int[], boolean[]);
  public spatialindex.rtree.BuildRTreeStrategy(spatialindex.rtree.RTree, spatialindex.core.IShape, spatialindex.core.IVisitor, double, java.util.ArrayList<spatialindex.rtree.StateCell>);
  public static void main(java.lang.String[]);
}
Compiled from "BuildRTreeStrategy.java"
class spatialindex.rtree.BuildRTreeStrategy$KNNCompartor {
  final spatialindex.rtree.BuildRTreeStrategy this$0;
  spatialindex.rtree.BuildRTreeStrategy$KNNCompartor(spatialindex.rtree.BuildRTreeStrategy);
  public double getMinimumDistance(spatialindex.core.IShape, spatialindex.core.Region);
  public double getMaximunDistance(spatialindex.core.IShape, spatialindex.core.Region);
}
Compiled from "BuildVerificationKDTreeStrategy.java"
public class spatialindex.rtree.BuildVerificationKDTreeStrategy implements spatialindex.core.IQueryStrategy {
  java.util.ArrayList<java.lang.Integer> ids;
  spatialindex.rtree.RTree rtree;
  spatialindex.rtree.BuildVerificationKDTreeStrategy$KNNCompartor knnc;
  spatialindex.core.IShape query;
  spatialindex.core.IVisitor v;
  java.util.ArrayList<spatialindex.rtree.StateCell> states;
  double dist;
  public void LoadKDTree(int, int, int, spatialindex.rtree.Node, spatialindex.core.IShape, spatialindex.rtree.BuildVerificationKDTreeStrategy$KNNCompartor, spatialindex.core.IVisitor, spatialindex.core.Region, double);
  public void getNextEntry(spatialindex.core.IEntry, int[], boolean[]);
  public spatialindex.rtree.BuildVerificationKDTreeStrategy(spatialindex.rtree.RTree, spatialindex.core.IShape, spatialindex.core.IVisitor, double, java.util.ArrayList<spatialindex.rtree.StateCell>);
}
Compiled from "BuildVerificationKDTreeStrategy.java"
class spatialindex.rtree.BuildVerificationKDTreeStrategy$KNNCompartor {
  final spatialindex.rtree.BuildVerificationKDTreeStrategy this$0;
  spatialindex.rtree.BuildVerificationKDTreeStrategy$KNNCompartor(spatialindex.rtree.BuildVerificationKDTreeStrategy);
  public double getMinimumDistance(spatialindex.core.IShape, spatialindex.core.IEntry);
  public double getMaximunDistance(spatialindex.core.IShape, spatialindex.core.IEntry);
}
Compiled from "Index.java"
public class spatialindex.rtree.Index extends spatialindex.rtree.Node {
  public spatialindex.rtree.Index(spatialindex.rtree.RTree, int, int);
  protected spatialindex.rtree.Node chooseSubtree(spatialindex.core.Region, int, java.util.Stack<java.lang.Integer>);
  protected spatialindex.rtree.Leaf findLeaf(spatialindex.core.Region, int, java.util.Stack<java.lang.Integer>);
  protected spatialindex.rtree.Node[] split(byte[], spatialindex.core.Region, int);
  protected int findLeastEnlargement(spatialindex.core.Region);
  protected int findLeastOverlap(spatialindex.core.Region);
  protected void adjustTree(spatialindex.rtree.Node, java.util.Stack<java.lang.Integer>);
  protected void adjustTree(spatialindex.rtree.Node, spatialindex.rtree.Node, java.util.Stack<java.lang.Integer>, boolean[]);
  protected void drawSelf(java.awt.Graphics, double);
}
Compiled from "Index.java"
class spatialindex.rtree.Index$OverlapEntry {
  int m_id;
  double m_enlargement;
  spatialindex.core.Region m_original;
  spatialindex.core.Region m_combined;
  double m_oa;
  double m_ca;
  final spatialindex.rtree.Index this$0;
  spatialindex.rtree.Index$OverlapEntry(spatialindex.rtree.Index);
}
Compiled from "Index.java"
class spatialindex.rtree.Index$OverlapEntryComparator implements java.util.Comparator<java.lang.Object> {
  final spatialindex.rtree.Index this$0;
  spatialindex.rtree.Index$OverlapEntryComparator(spatialindex.rtree.Index);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "Leaf.java"
public class spatialindex.rtree.Leaf extends spatialindex.rtree.Node {
  public spatialindex.rtree.Leaf(spatialindex.rtree.RTree, int);
  protected spatialindex.rtree.Node chooseSubtree(spatialindex.core.Region, int, java.util.Stack<java.lang.Integer>);
  protected spatialindex.rtree.Leaf findLeaf(spatialindex.core.Region, int, java.util.Stack<java.lang.Integer>);
  protected spatialindex.rtree.Node[] split(byte[], spatialindex.core.Region, int);
  protected void deleteData(int, java.util.Stack<java.lang.Integer>, java.util.ArrayList<java.lang.Integer>);
  public void drawSelf(java.awt.Graphics, double);
}
Compiled from "MyRtree.java"
public class spatialindex.rtree.MyRtree extends spatialindex.rtree.RTree {
  public void BuildEmbededIndex_KDTree();
  public spatialindex.rtree.MyRtree(spatialindex.setting.PropertySet, spatialindex.io.IStorageManager);
  public void nearestNeighborQuery(int, spatialindex.core.IShape, spatialindex.core.IVisitor, spatialindex.core.INearestNeighborComparator);
  public void nearestNeighborQuery(int, spatialindex.core.IShape, spatialindex.core.IVisitor);
  public static void main(java.lang.String[]) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
}
Compiled from "Node.java"
public abstract class spatialindex.rtree.Node implements spatialindex.core.INode {
  static java.awt.Color COLOR_NODE;
  static java.awt.Color COLOR_DATA;
  static java.awt.Color COLOR_QUERY;
  static java.awt.Color COLOR_TEXT;
  static int BORDER_WIDTH;
  protected spatialindex.rtree.RTree m_pTree;
  protected int m_level;
  protected int m_identifier;
  protected int m_children;
  protected int m_capacity;
  protected spatialindex.core.Region m_nodeMBR;
  protected byte[][] m_pData;
  protected int[] m_pDataLength;
  protected spatialindex.core.Region[] m_pMBR;
  protected int[] m_pIdentifier;
  int m_totalDataLength;
  protected abstract spatialindex.rtree.Node chooseSubtree(spatialindex.core.Region, int, java.util.Stack<java.lang.Integer>);
  protected abstract spatialindex.rtree.Leaf findLeaf(spatialindex.core.Region, int, java.util.Stack<java.lang.Integer>);
  protected abstract spatialindex.rtree.Node[] split(byte[], spatialindex.core.Region, int);
  public int getIdentifier();
  public spatialindex.core.IShape getShape();
  public int getChildrenCount();
  public int getChildIdentifier(int) throws java.lang.IndexOutOfBoundsException;
  public spatialindex.core.IShape getChildShape(int) throws java.lang.IndexOutOfBoundsException;
  public int getLevel();
  public boolean isLeaf();
  public boolean isIndex();
  protected spatialindex.rtree.Node(spatialindex.rtree.RTree, int, int, int);
  protected void insertEntry(byte[], spatialindex.core.Region, int) throws java.lang.IllegalStateException;
  protected void deleteEntry(int) throws java.lang.IndexOutOfBoundsException;
  protected boolean insertData(byte[], spatialindex.core.Region, int, java.util.Stack<java.lang.Integer>, boolean[], java.util.ArrayList<java.lang.Integer>);
  protected void reinsertData(byte[], spatialindex.core.Region, int, java.util.ArrayList<java.lang.Integer>, java.util.ArrayList<java.lang.Integer>);
  protected void rtreeSplit(byte[], spatialindex.core.Region, int, java.util.ArrayList<java.lang.Integer>, java.util.ArrayList<java.lang.Integer>);
  protected void rstarSplit(byte[], spatialindex.core.Region, int, java.util.ArrayList<java.lang.Integer>, java.util.ArrayList<java.lang.Integer>);
  protected int[] pickSeeds();
  protected void condenseTree(java.util.Stack<spatialindex.rtree.Node>, java.util.Stack<java.lang.Integer>);
  protected void load(byte[]) throws java.io.IOException;
  protected byte[] store() throws java.io.IOException;
  protected abstract void drawSelf(java.awt.Graphics, double);
  protected void drawRect(java.awt.Graphics, spatialindex.core.Region, java.awt.Color, double);
  protected void fillRect(java.awt.Graphics, spatialindex.core.Region, java.awt.Color, double);
  protected void drawRect(java.awt.Graphics, spatialindex.core.Region, java.awt.Color, double, java.lang.String, java.awt.Color);
  static {};
}
Compiled from "Node.java"
class spatialindex.rtree.Node$ReinsertEntry {
  int m_id;
  double m_dist;
  final spatialindex.rtree.Node this$0;
  public spatialindex.rtree.Node$ReinsertEntry(spatialindex.rtree.Node, int, double);
}
Compiled from "Node.java"
class spatialindex.rtree.Node$ReinsertEntryComparator implements java.util.Comparator<java.lang.Object> {
  final spatialindex.rtree.Node this$0;
  spatialindex.rtree.Node$ReinsertEntryComparator(spatialindex.rtree.Node);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "Node.java"
class spatialindex.rtree.Node$RstarSplitEntry {
  spatialindex.core.Region m_pRegion;
  int m_id;
  int m_sortDim;
  final spatialindex.rtree.Node this$0;
  spatialindex.rtree.Node$RstarSplitEntry(spatialindex.rtree.Node, spatialindex.core.Region, int, int);
}
Compiled from "Node.java"
class spatialindex.rtree.Node$RstarSplitEntryComparatorHigh implements java.util.Comparator<java.lang.Object> {
  final spatialindex.rtree.Node this$0;
  spatialindex.rtree.Node$RstarSplitEntryComparatorHigh(spatialindex.rtree.Node);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "Node.java"
class spatialindex.rtree.Node$RstarSplitEntryComparatorLow implements java.util.Comparator<java.lang.Object> {
  final spatialindex.rtree.Node this$0;
  spatialindex.rtree.Node$RstarSplitEntryComparatorLow(spatialindex.rtree.Node);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "RTree.java"
public class spatialindex.rtree.RTree implements spatialindex.core.ISpatialIndex {
  public java.io.RandomAccessFile rafPoint;
  public java.io.RandomAccessFile rafLine;
  public java.util.HashMap<java.lang.Long, long[]> tOfPoint;
  public java.util.HashMap<java.lang.Long, long[]> tOfLine;
  public java.util.HashMap<java.lang.Long, utility.Compare.DataOfPoint> buffer_Points;
  public java.util.HashMap<java.lang.Long, utility.geo.DataOfLine> buffer_Lines;
  public java.lang.String destFileNamePoint;
  public java.lang.String destFileNameLine;
  spatialindex.core.IShape queryRegion;
  spatialindex.core.RWLock m_rwLock;
  spatialindex.io.IStorageManager m_pStorageManager;
  int m_rootID;
  int m_headerID;
  int m_treeVariant;
  double m_fillFactor;
  int m_indexCapacity;
  int m_leafCapacity;
  int m_nearMinimumOverlapFactor;
  double m_splitDistributionFactor;
  double m_reinsertFactor;
  int m_dimension;
  spatialindex.core.Region m_infiniteRegion;
  spatialindex.rtree.Statistics m_stats;
  java.util.ArrayList<spatialindex.core.INodeCommand> m_writeNodeCommands;
  java.util.ArrayList<spatialindex.core.INodeCommand> m_readNodeCommands;
  java.util.ArrayList<spatialindex.core.INodeCommand> m_deleteNodeCommands;
  static final boolean $assertionsDisabled;
  public int getUpdate_node_size();
  public void setUpdate_node_size(int);
  public void setDestFileNamePoint(java.lang.String);
  public void setDestFileNameLine(java.lang.String);
  public static spatialindex.rtree.RTree createRTree(java.lang.String[]);
  public void loadIndexOfPoints();
  public void closeIndex();
  public void loadIndexOfLines();
  public void loadIndex();
  public utility.Compare.DataOfPoint loadDataOfPointFromIndex(long);
  public utility.geo.DataOfLine loadDataOfLineFromIndex(long, long);
  public utility.geo.DataOfLine loadDataOfLineFromBtree(int, int);
  public spatialindex.rtree.RTree(spatialindex.setting.PropertySet, spatialindex.io.IStorageManager);
  public void insertData(byte[], spatialindex.core.IShape, int);
  public void insertData(byte[], spatialindex.core.IShape, int, boolean) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public boolean deleteData(spatialindex.core.IShape, int);
  public boolean deleteData(spatialindex.core.IShape, int, boolean) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public void containmentQuery(spatialindex.core.IShape, spatialindex.core.IVisitor);
  public void intersectionQuery(spatialindex.core.IShape, spatialindex.core.IVisitor);
  public void pointLocationQuery(spatialindex.core.IShape, spatialindex.core.IVisitor);
  public void nearestNeighborQuery(int, spatialindex.core.IShape, spatialindex.core.IVisitor, spatialindex.core.INearestNeighborComparator);
  public void nearestNeighborQuery(int, spatialindex.core.IShape, spatialindex.core.IVisitor);
  public void queryStrategy(spatialindex.core.IQueryStrategy);
  public spatialindex.setting.PropertySet getIndexProperties();
  public void addWriteNodeCommand(spatialindex.core.INodeCommand);
  public void addReadNodeCommand(spatialindex.core.INodeCommand);
  public void addDeleteNodeCommand(spatialindex.core.INodeCommand);
  public boolean isIndexValid();
  public spatialindex.core.IStatistics getStatistics();
  public void flush() throws java.lang.IllegalStateException;
  public void drawSelf(java.awt.Graphics, java.awt.Rectangle);
  protected void insertData_impl(byte[], spatialindex.core.Region, int, java.util.ArrayList<java.lang.Integer>);
  protected void insertData_impl(byte[], spatialindex.core.Region, int, int, boolean[], java.util.ArrayList<java.lang.Integer>);
  protected boolean deleteData_impl(spatialindex.core.Region, int, java.util.ArrayList<java.lang.Integer>);
  protected int writeNode(spatialindex.rtree.Node) throws java.lang.IllegalStateException;
  public synchronized spatialindex.rtree.Node readNode(int);
  protected void deleteNode(spatialindex.rtree.Node);
  public java.lang.String toString();
  static {};
}
Compiled from "RTree.java"
class spatialindex.rtree.RTree$Data implements spatialindex.core.IData {
  int m_id;
  spatialindex.core.Region m_shape;
  byte[] m_pData;
  final spatialindex.rtree.RTree this$0;
  spatialindex.rtree.RTree$Data(spatialindex.rtree.RTree, byte[], spatialindex.core.Region, int);
  public int getIdentifier();
  public spatialindex.core.IShape getShape();
  public byte[] getData();
}
Compiled from "RTree.java"
class spatialindex.rtree.RTree$NNComparator implements spatialindex.core.INearestNeighborComparator {
  final spatialindex.rtree.RTree this$0;
  spatialindex.rtree.RTree$NNComparator(spatialindex.rtree.RTree);
  public double getMinimumDistance(spatialindex.core.IShape, spatialindex.core.IEntry);
}
Compiled from "RTree.java"
class spatialindex.rtree.RTree$NNEntry {
  spatialindex.core.IEntry m_pEntry;
  double m_minDist;
  final spatialindex.rtree.RTree this$0;
  spatialindex.rtree.RTree$NNEntry(spatialindex.rtree.RTree, spatialindex.core.IEntry, double);
}
Compiled from "RTree.java"
class spatialindex.rtree.RTree$NNEntryComparator implements java.util.Comparator<java.lang.Object> {
  final spatialindex.rtree.RTree this$0;
  spatialindex.rtree.RTree$NNEntryComparator(spatialindex.rtree.RTree);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "RTree.java"
class spatialindex.rtree.RTree$ValidateEntry {
  spatialindex.core.Region m_parentMBR;
  spatialindex.rtree.Node m_pNode;
  final spatialindex.rtree.RTree this$0;
  spatialindex.rtree.RTree$ValidateEntry(spatialindex.rtree.RTree, spatialindex.core.Region, spatialindex.rtree.Node);
}
Compiled from "SecurityNode.java"
public class spatialindex.rtree.SecurityNode {
  public spatialindex.rtree.Node correspondNode;
  public utility.Compare.DataOfPoint[] dop;
  public java.lang.String mbrDigest;
  public java.lang.String childDigest;
  public static boolean USE_HILBERT_ORDER;
  public static boolean USE_X_ORDER;
  public static final int HILBERT_LV;
  public static java.util.Comparator<spatialindex.core.Region> COMPARATOR;
  public spatialindex.rtree.SecurityNode();
  public int getID();
  public java.util.ArrayList<java.lang.String> readStringArraylist(java.io.DataInputStream) throws java.io.IOException;
  public java.util.ArrayList<utility.security.mbrGfunction> readmbrGfunctionArraylist(java.io.DataInputStream) throws java.io.IOException;
  public void writeStringArraylist(java.io.DataOutputStream, java.util.ArrayList<java.lang.String>) throws java.io.IOException;
  public void writembrGfunctionArraylist(java.io.DataOutputStream, java.util.ArrayList<utility.security.mbrGfunction>) throws java.io.IOException;
  public spatialindex.rtree.SecurityNode(byte[], spatialindex.rtree.RTree) throws java.io.IOException;
  public byte[] saveTobytes() throws java.io.IOException;
  public static spatialindex.rtree.SecurityNode buildSecurityNode(spatialindex.rtree.SecurityTree, spatialindex.rtree.RTree) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public java.lang.String getMbrDigest();
  public java.lang.String getChildDigest();
  public utility.Compare.DataOfPoint[] getDOPs(spatialindex.rtree.RTree);
  public void sortTuples();
  public void printBytes(byte[]);
  protected int buildSelfSecurityInfo(spatialindex.rtree.RTree, spatialindex.rtree.Node) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public java.util.ArrayList<java.lang.String> getChildGValues();
  public java.lang.String getChildGValueById(int);
  public java.util.ArrayList<java.lang.String> getChildHashValues();
  public java.lang.String getEntaValue();
  public int getChildCount();
  public java.lang.String getGValue();
  protected int getLevel();
  public java.lang.String getrsaentaValue();
  public java.lang.String toString();
  static {};
}
Compiled from "SecurityNode.java"
final class spatialindex.rtree.SecurityNode$1 implements java.util.Comparator<spatialindex.core.Region> {
  spatialindex.rtree.SecurityNode$1();
  public int compare(spatialindex.core.Region, spatialindex.core.Region);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "SecurityTree.java"
public class spatialindex.rtree.SecurityTree {
  public java.lang.String filePath;
  spatialindex.rtree.SecurityNode root;
  int level;
  public spatialindex.rtree.SecurityTree(spatialindex.rtree.RTree, java.lang.String, boolean) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public void buildSecurityTree(spatialindex.rtree.SecurityTree, spatialindex.rtree.RTree) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public void saveSecurityNode(spatialindex.rtree.SecurityNode, int);
  public spatialindex.rtree.SecurityNode getSecurityNode(int);
  public java.lang.String getRootEntaValue();
  public java.lang.String getrsarootentaValue();
  public static void writeToFile(java.io.DataOutputStream, java.io.DataOutputStream, int, long, byte[]) throws java.io.IOException;
  public void clearcache();
  public boolean checkindex();
  public java.lang.String toString();
}
Compiled from "SecurityVisitor.java"
public class spatialindex.rtree.SecurityVisitor implements spatialindex.core.IVisitor {
  static int UNDEFINED_INT_VALUE;
  static java.lang.String UNDEFINED_STR_VALUE;
  public java.util.HashMap<java.lang.Integer, java.lang.Integer> nodeState;
  public java.util.HashMap<java.lang.Integer, java.lang.Integer> dataState;
  public spatialindex.rtree.SecurityVisitor();
  public void visitNode(spatialindex.core.INode, int);
  public void visitNode(spatialindex.core.INode, int, int[], int);
  public void visitNode(spatialindex.core.INode);
  public void visitData(spatialindex.core.IData);
  public void setParentNodeInside(boolean);
  public java.util.ArrayList<java.lang.String> getVOStringArray();
  public void searchFinished(int);
  public void setParentCellInside(boolean);
  public void visitNode(spatialindex.core.INode, int, int[]);
  public void visitData(spatialindex.core.IData, int);
  public double getDistance();
  public void setDistance(double);
  static {};
}
Compiled from "StateCell.java"
public class spatialindex.rtree.StateCell {
  public static void main(java.lang.String[]);
  public spatialindex.rtree.StateCell();
  public spatialindex.rtree.StateCell(int, int, boolean, int, int, double);
  public int getLevel();
  public void setLevel(int);
  public int getId();
  public void setId(int);
  public int getStatus();
  public void setStatus(int);
  public int getParent();
  public void setParent(int);
  public boolean isLeafEntry();
  public void setLeafEntry(boolean);
  public double getDist();
  public void setDist(double);
}
Compiled from "Statistics.java"
public class spatialindex.rtree.Statistics implements spatialindex.core.IStatistics,java.lang.Cloneable {
  protected long m_reads;
  protected long m_writes;
  protected long m_splits;
  protected long m_hits;
  protected long m_misses;
  protected long m_nodes;
  protected long m_adjustments;
  protected long m_queryResults;
  protected long m_data;
  protected int m_treeHeight;
  protected java.util.ArrayList<java.lang.Integer> m_nodesInLevel;
  public spatialindex.rtree.Statistics();
  public spatialindex.rtree.Statistics(spatialindex.rtree.Statistics);
  public long getReads();
  public long getWrites();
  public long getNumberOfNodes();
  public long getNumberOfData();
  public long getSplits();
  public long getHits();
  public long getMisses();
  public long getAdjustments();
  public long getQueryResults();
  public int getTreeHeight();
  public int getNumberOfNodesInLevel(int) throws java.lang.IndexOutOfBoundsException;
  public void reset();
  public java.lang.String toString();
  public java.lang.Object clone();
}
Compiled from "VO.java"
public class spatialindex.rtree.VO implements java.io.Serializable {
  public static boolean isSoloAuth;
  public spatialindex.rtree.VO();
  void handleVOInParallel(spatialindex.core.Point, int);
  public spatialindex.rtree.VO(int, spatialindex.core.IShape, java.util.HashMap<java.lang.Integer, java.lang.Integer>, boolean, spatialindex.rtree.RTree, int, boolean);
  public boolean computePos(int, utility.Compare.DataOfPoint, int);
  public boolean computePos(int, int, int);
  public spatialindex.rtree.VO(int, spatialindex.core.IShape, boolean, spatialindex.rtree.RTree, spatialindex.rtree.SecurityTree, int, double, int, boolean);
  public utility.security.Point computePoint(spatialindex.core.IShape, int, utility.security.Point);
  public void computeDataIo();
  public long getVOSize();
  public boolean isSigned(spatialindex.rtree.StateCell, spatialindex.rtree.StateCell);
  public utility.StatisticForAuth getStatistics();
  public java.lang.String computeRootEnta(spatialindex.core.Region) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public java.lang.String getrsaEntaValue();
  public void buildenta(spatialindex.rtree.VO$VOCell, spatialindex.rtree.VO$VOCell[], boolean, spatialindex.core.Region) throws java.lang.IndexOutOfBoundsException, spatialindex.core.VOErrorException, java.lang.Exception;
  public java.lang.String reConstruct(int);
  public boolean verify(spatialindex.core.Point);
  public byte[] writeToBytes() throws java.io.IOException;
  public void readFromBytes(byte[]) throws java.io.IOException;
  public boolean isParallel();
  public boolean isSoloAuth();
  public void setParallel(boolean);
  public int getThreadNum();
  public void setThreadNum(int);
  static spatialindex.rtree.RTree access$000(spatialindex.rtree.VO);
  static {};
}
Compiled from "VO.java"
class spatialindex.rtree.VO$1 implements java.lang.Runnable {
  int threadId;
  final int val$tid;
  final int[] val$lock;
  final java.util.ArrayList val$vos;
  final int val$type;
  final spatialindex.core.Point val$query;
  final boolean[] val$threadStatus;
  final spatialindex.rtree.VO this$0;
  spatialindex.rtree.VO$1(spatialindex.rtree.VO, int, int[], java.util.ArrayList, int, spatialindex.core.Point, boolean[]);
  public void run();
}
Compiled from "VO.java"
class spatialindex.rtree.VO$2 implements java.util.Comparator<java.lang.Integer> {
  final spatialindex.core.IShape val$query;
  final spatialindex.rtree.VO this$0;
  spatialindex.rtree.VO$2(spatialindex.rtree.VO, spatialindex.core.IShape);
  public int compare(java.lang.Integer, java.lang.Integer);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "VO.java"
class spatialindex.rtree.VO$3 implements java.util.Comparator<java.lang.Integer> {
  final spatialindex.core.IShape val$query;
  final spatialindex.rtree.VO this$0;
  spatialindex.rtree.VO$3(spatialindex.rtree.VO, spatialindex.core.IShape);
  public int compare(java.lang.Integer, java.lang.Integer);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "VO.java"
class spatialindex.rtree.VO$4 implements java.util.Comparator<spatialindex.rtree.StateCell> {
  final spatialindex.rtree.VO this$0;
  spatialindex.rtree.VO$4(spatialindex.rtree.VO);
  public int compare(spatialindex.rtree.StateCell, spatialindex.rtree.StateCell);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "VO.java"
class spatialindex.rtree.VO$5 implements java.util.Comparator<spatialindex.rtree.StateCell> {
  final spatialindex.rtree.VO this$0;
  spatialindex.rtree.VO$5(spatialindex.rtree.VO);
  public int compare(spatialindex.rtree.StateCell, spatialindex.rtree.StateCell);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "VO.java"
class spatialindex.rtree.VO$VOCell implements java.io.Serializable {
  public java.lang.Integer identifier;
  public boolean isFinish;
  public utility.Compare.DataOfPoint dataOfPoint;
  public utility.security.Point sPint;
  public java.lang.String mbrDigest;
  public int[] childIdentifiers;
  public java.lang.String childDigest;
  public int level;
  final spatialindex.rtree.VO this$0;
  public spatialindex.rtree.VO$VOCell(spatialindex.rtree.VO);
  public long getVOSize();
  public long getVOSizeBOVD();
  public void setLevel(int);
  public spatialindex.rtree.VO$VOCell(spatialindex.rtree.VO, boolean, utility.Compare.DataOfPoint, int);
  public spatialindex.rtree.VO$VOCell(spatialindex.rtree.VO, boolean, java.lang.String, int[], int, utility.security.Point);
  public spatialindex.rtree.VO$VOCell(spatialindex.rtree.VO, boolean, java.lang.String, java.lang.String, int);
  public void writeStringArray(java.io.DataOutputStream, java.lang.String[][]) throws java.io.IOException;
  public java.lang.String[][] readStringArray(java.io.DataInputStream) throws java.io.IOException;
  public void writeToFile(java.io.DataOutputStream) throws java.io.IOException;
  public void readFromFile(java.io.DataInputStream) throws java.io.IOException;
  public byte[] writeToBytes();
}
Compiled from "VO.java"
interface spatialindex.rtree.VO$cell {
  public abstract boolean verify(spatialindex.core.Point);
  public abstract void generateVeryfyPart(spatialindex.core.Point);
}
Compiled from "VO.java"
public class spatialindex.rtree.VO$dcCell implements spatialindex.rtree.VO$cell {
  public utility.Compare.DistanceCompare dc;
  public utility.security.Point p1;
  public utility.security.Point p2;
  final spatialindex.rtree.VO this$0;
  public spatialindex.rtree.VO$dcCell(spatialindex.rtree.VO);
  public spatialindex.rtree.VO$dcCell(spatialindex.rtree.VO, utility.security.Point, utility.security.Point);
  public void generateVeryfyPart(spatialindex.core.Point);
  public boolean verify(spatialindex.core.Point);
  public long getVOSize();
  public byte[] writeToBytes();
}
Compiled from "VO.java"
public class spatialindex.rtree.VO$gfCell implements spatialindex.rtree.VO$cell {
  public utility.security.Gfunction gf;
  public utility.security.Gfunction gf2;
  public java.lang.String[] ServerReturned;
  public java.lang.String[] ServerReturned2;
  public boolean isL;
  public boolean isL2;
  final spatialindex.rtree.VO this$0;
  public spatialindex.rtree.VO$gfCell(spatialindex.rtree.VO);
  public spatialindex.rtree.VO$gfCell(spatialindex.rtree.VO, utility.security.Gfunction, utility.security.Gfunction, boolean, boolean);
  public long getVOSize();
  public void setGf(utility.security.Gfunction, boolean);
  public void setGf2(utility.security.Gfunction, boolean);
  public void generateVeryfyPart(spatialindex.core.Point);
  public byte[] writeToBytes();
  public boolean verify(spatialindex.core.Point);
}
Compiled from "VO.java"
public class spatialindex.rtree.VO$lineCell implements spatialindex.rtree.VO$cell {
  public long id1;
  public long id2;
  public utility.geo.Line line;
  public java.lang.String signature;
  final spatialindex.rtree.VO this$0;
  public spatialindex.rtree.VO$lineCell(spatialindex.rtree.VO);
  public spatialindex.rtree.VO$lineCell(spatialindex.rtree.VO, utility.geo.DataOfLine);
  public void generateVeryfyPart(spatialindex.core.Point);
  public boolean verify(spatialindex.core.Point);
  public long getVOSize();
  public byte[] writeToBytes();
}
Compiled from "PropertySet.java"
public class spatialindex.setting.PropertySet {
  public spatialindex.setting.PropertySet();
  public java.lang.Object getProperty(java.lang.String);
  public void setProperty(java.lang.String, java.lang.Object);
}
Compiled from "SpatialIndex.java"
public class spatialindex.spatialindex.SpatialIndex {
  public static final java.lang.String EMAIL;
  public static final java.lang.String VERSION;
  public static final java.lang.String DATE;
  public static final double EPSILON;
  public static final int RtreeVariantQuadratic;
  public static final int RtreeVariantLinear;
  public static final int RtreeVariantRstar;
  public static final int PersistentIndex;
  public static final int PersistentLeaf;
  public static final int ContainmentQuery;
  public static final int IntersectionQuery;
  public spatialindex.spatialindex.SpatialIndex();
  public static spatialindex.core.ISpatialIndex createRTree(spatialindex.setting.PropertySet, spatialindex.io.IStorageManager);
  public static spatialindex.io.IStorageManager createMemoryStorageManager(spatialindex.setting.PropertySet);
  public static spatialindex.io.IStorageManager createDiskStorageManager(spatialindex.setting.PropertySet) throws java.lang.SecurityException, java.lang.NullPointerException, java.io.IOException, java.io.FileNotFoundException, java.lang.IllegalArgumentException;
}
Compiled from "CalcNumberOfMR.java"
public class utility.CalcNumberOfMR {
  public static spatialindex.rtree.RTree rtree;
  public static spatialindex.rtree.RTree rtree_kd;
  public static spatialindex.rtree.SecurityTree srtree;
  public static spatialindex.rtree.SecurityTree srtree_kd;
  public static spatialindex.rtree.MyRtree myrtree;
  public static spatialindex.rtree.MyRtree myrtree_kd;
  public utility.CalcNumberOfMR();
  public static void LoadMyRTree(java.lang.String, boolean, spatialindex.rtree.MyRtree[], spatialindex.rtree.SecurityTree[], boolean) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public static void main(java.lang.String[]) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
}
Compiled from "CalcNumberOfVN.java"
public class utility.CalcNumberOfVN {
  public utility.CalcNumberOfVN();
  public static void main(java.lang.String[]);
}
Compiled from "DataOfPoint.java"
public class utility.Compare.DataOfPoint {
  public int pid;
  public utility.security.Point p;
  public utility.security.Gfunction gf_x;
  public utility.security.Gfunction gf_y;
  public java.lang.Long[] delaunayIds;
  public java.lang.String signature;
  public int getPointId();
  public utility.Compare.DataOfPoint();
  public utility.Compare.DataOfPoint(int, utility.security.Point, java.lang.Long[]);
  public utility.Compare.DataOfPoint(utility.security.Point, utility.security.Gfunction, utility.security.Gfunction);
  public utility.Compare.DataOfPoint(byte[]);
  public byte[] writeToBytes() throws java.io.IOException;
  public void load(java.io.DataInputStream);
  public void loadFromBytes(byte[]) throws java.io.IOException;
  public java.lang.String getDigest();
  public java.lang.String getSignature();
  public void signWithRSA(utility.security.RSA);
  public static void main(java.lang.String[]) throws java.io.IOException;
  public static void testReadFromFile() throws java.io.IOException;
}
Compiled from "DataOfPointParser.java"
public class utility.Compare.DataOfPointParser {
  public static java.lang.String filein;
  public static java.lang.String filename;
  public jdbm.RecordManager recmanOfPoint;
  public jdbm.PrimaryTreeMap<java.lang.Long, byte[]> btOfPoint;
  public void loadData() throws java.io.IOException;
  public utility.Compare.DataOfPointParser(boolean) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "DistanceCompare.java"
public class utility.Compare.DistanceCompare implements utility.security.IVo {
  boolean runTest;
  public utility.security.Point pL;
  public utility.security.Point pH;
  public java.math.BigInteger rsa_delta;
  public static utility.security.Paillier pailliar;
  public utility.security.RSA rsa;
  public utility.Compare.DistanceCompare(utility.security.Point, utility.security.Point, boolean);
  public utility.Compare.DistanceCompare(utility.security.Point, utility.security.Point);
  public utility.Compare.DistanceCompare(int, int, int, int, int, int);
  public utility.Compare.DistanceCompare(int[], int[]);
  public void init();
  public void GenerateVeryfyPart(utility.security.Point);
  public boolean ClientVerify(utility.security.Point);
  public boolean ClientVerify(int, int);
  public long getVOSize();
  public java.lang.String getDigest();
  public byte[] writeToBytes();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "buildBtreeOfPoints.java"
public class utility.Compare.buildBtreeOfPoints {
  public static boolean DEBUG;
  public static boolean ISCAR;
  public static long SCALE;
  public jdbm.RecordManager recmanOfPoint;
  public jdbm.PrimaryTreeMap<java.lang.Long, byte[]> btOfPoint;
  public int ThreadNum;
  public java.util.ArrayList<float[]> points;
  public java.util.ArrayList<java.lang.Integer> idmap;
  public mesh.Delaunay delaunay;
  public boolean[] threadStatus;
  public static utility.security.RSA rsa;
  public void loadData(java.lang.String) throws java.io.IOException;
  public utility.Compare.buildBtreeOfPoints(boolean, java.lang.String, java.lang.String) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "buildBtreeOfPoints.java"
class utility.Compare.buildBtreeOfPoints$1 implements java.lang.Runnable {
  int threadId;
  final int val$tid;
  final int[] val$lock;
  final int val$totalNum;
  final long val$start;
  final utility.Compare.buildBtreeOfPoints this$0;
  utility.Compare.buildBtreeOfPoints$1(utility.Compare.buildBtreeOfPoints, int, int[], int, long);
  public void run();
}
Compiled from "buildIndexDP.java"
public class utility.Compare.buildIndexDP {
  public static java.util.ArrayList<long[]> points;
  public static int ThreadNum;
  public static boolean[] threadStatus;
  public static utility.security.RSA rsa;
  public utility.Compare.buildIndexDP();
  public static void loadData(java.lang.String);
  public static void buildIndex(java.lang.String, java.lang.String, int, int) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.lang.NumberFormatException, java.io.IOException;
  static {};
}
Compiled from "buildIndexDP.java"
final class utility.Compare.buildIndexDP$1 implements java.lang.Runnable {
  int threadId;
  final int val$tid;
  final int[] val$lock;
  final int val$limit;
  final long[] val$w_lock;
  final java.io.DataOutputStream val$dos_dat;
  final java.io.DataOutputStream val$dos_idx;
  utility.Compare.buildIndexDP$1(int, int[], int, long[], java.io.DataOutputStream, java.io.DataOutputStream);
  public void run();
}
Compiled from "genDataOfPointForHadoop.java"
public class utility.Compare.genDataOfPointForHadoop {
  public static boolean DEBUG;
  public static boolean ISCAR;
  public static long SCALE;
  public static java.lang.String filename;
  public utility.Compare.genDataOfPointForHadoop();
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "mergeIndexDP.java"
public class utility.Compare.mergeIndexDP {
  static int[] machineList;
  static java.util.ArrayList<long[]> testIndexs;
  public utility.Compare.mergeIndexDP();
  public static boolean testIntegrity(java.lang.String, java.lang.String);
  public static void mergeFile(java.lang.String, java.lang.String) throws java.io.IOException;
  public static void runTest(java.lang.String, java.lang.String, long[], int) throws java.io.IOException;
  public static void runTest(java.lang.String, java.lang.String) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "CompareExp.java"
public class utility.CompareExp {
  public utility.CompareExp();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "CompareFunction.java"
public class utility.CompareFunction {
  public utility.CompareFunction();
  public static double functionL(double, Math.MathPoint, Math.MathPoint);
  public static double functionNL(double, Math.MathPoint, Math.MathPoint);
  public static int topkQuery(java.util.ArrayList<utility.data>, int, double, double, double);
  static int getPos(double, double[]);
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "DataFormater.java"
public class utility.DataFormater {
  public static boolean ISCAR;
  public static long SCALE;
  public static int DATASET_SIZE;
  public static java.lang.String input_file_name;
  public static java.lang.String output_file_name;
  public utility.DataFormater();
  public static void genCa();
  public static void genNE();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "ReadDigest.java"
class utility.DigestCell {
  java.lang.String pDigest;
  java.lang.String pDigestX;
  java.lang.String pDigestY;
  java.lang.String gfxDigest;
  java.lang.String gfyDigest;
  public utility.DigestCell(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
}
Compiled from "DirectedMinSpanTree.java"
public class utility.DirectedMinSpanTree {
  int N;
  int M;
  utility.Edge[] edge;
  int[] d;
  int[] p;
  int[] v;
  int[] n;
  int[] m;
  int[] o;
  int[] w;
  int edgeId;
  public int inf;
  public utility.DirectedMinSpanTree();
  public utility.DirectedMinSpanTree(int, int);
  public void addEdge(int, int, int);
  public int calcDirectedMinSpanTreeWeight(int);
  public void getPlan();
  public void printPlan();
  public static void main(java.lang.String[]);
}
Compiled from "DirectedMinSpanTree.java"
class utility.Edge {
  public int a;
  public int b;
  public int c;
  public int a2;
  public int b2;
  public int c2;
  public utility.Edge();
  public utility.Edge(int, int, int);
}
Compiled from "FormatData2Norm.java"
public class utility.FormatData2Norm {
  public static int scale;
  public static java.util.ArrayList<long[]> pointsAfter;
  public static java.util.HashSet<java.lang.Long> cnt;
  public utility.FormatData2Norm();
  public static long getId(long, long);
  public static void loadFile(java.lang.String, java.lang.String) throws java.io.FileNotFoundException;
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
  static {};
}
Compiled from "CalcNumberOfMR.java"
class utility.MRData {
  int id;
  spatialindex.core.IShape shape;
  public utility.MRData();
  public utility.MRData(int, spatialindex.core.IShape);
  public int getIdentifier();
  public spatialindex.core.IShape getShape();
}
Compiled from "MemStat.java"
public class utility.MemStat implements java.lang.Runnable {
  static long mb;
  long mem_size;
  long max_mem;
  boolean isFinish;
  public utility.MemStat();
  public static void main(java.lang.String[]);
  public void run();
  public void reSet();
  public long getCurrentMemSize();
  public long getMaxMemSize();
  public long getCurrentMemSizeInMB();
  public long getMaxMemSizeInMB();
  public void printInfo();
  public void setFinish();
  static {};
}
Compiled from "PWVgeneratpr.java"
public class utility.PWVgeneratpr {
  public static float lx;
  public static float rx;
  public static float ly;
  public static float ry;
  public static Math.MathPoint p0;
  public static Math.MathPoint p1;
  public static Math.MathPoint p2;
  public static Math.MathPoint p3;
  public utility.PWVgeneratpr();
  public static boolean isInRnage(float, float);
  public static boolean isInRnage(Math.MathPoint);
  public static Math.MathPoint getCrossPoint(Math.MathPoint, Math.MathPoint);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "QueryGenerator.java"
public class utility.QueryGenerator {
  public static java.lang.String filename;
  public utility.QueryGenerator();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "ReadDigest.java"
public class utility.ReadDigest {
  public java.util.HashMap<java.lang.Integer, utility.DigestCell> digestHashMap;
  public jdbm.RecordManager recmanOfPoint;
  public jdbm.PrimaryTreeMap<java.lang.Long, byte[]> btOfPoint;
  public int ThreadNum;
  public boolean[] threadStatus;
  public utility.ReadDigest(java.lang.String);
  public static void main(java.lang.String[]);
}
Compiled from "ReadDigest.java"
class utility.ReadDigest$1 implements java.lang.Runnable {
  int threadId;
  final int val$tid;
  final int[] val$lock;
  final utility.ReadDigest this$0;
  utility.ReadDigest$1(utility.ReadDigest, int, int[]);
  public void run();
}
Compiled from "StatisticForAuth.java"
public class utility.StatisticForAuth {
  public double pre_time_SP;
  public double con_time_SP;
  public double vrf_time_CL;
  public double size_VO;
  public double num_PPB;
  public double num_PLB;
  public double num_Gf;
  public int num_node;
  public int num_miss_far;
  public int num_miss_near;
  public int num_miss_1n;
  public int num_dataio;
  public void reset();
  public utility.StatisticForAuth();
  public void print();
  public void printtoffile(java.io.PrintWriter);
  public void update(utility.StatisticForAuth);
  public void getAveage(int);
  public static void main(java.lang.String[]);
}
Compiled from "Statistics.java"
public class utility.Statistics {
  public boolean kind;
  public int num_of_Pailliar;
  public int num_of_Lines;
  public long construction_time;
  public long verify_time;
  public long generate_time;
  public long load_time;
  public int num_of_near_points;
  public int num_of_far_points;
  public int num_of_gf_points;
  public int size_of_VO;
  public int k_of_knn;
  public utility.Statistics();
  public int VOsize();
  public long Contruction_Time_For_Server();
  public long Verify_For_Client();
  public void getvoSize();
  public void printinfo();
  public void printinfotofile(java.io.PrintWriter);
}
Compiled from "VerifyIndex.java"
public class utility.VerifyIndex {
  public static java.lang.String idx;
  public static java.io.RandomAccessFile rafPoint;
  public static java.util.HashMap<java.lang.Long, long[]> tOfPoint;
  public static java.io.RandomAccessFile rafLine;
  public static java.util.HashMap<java.lang.Long, long[]> tOfLine;
  public utility.VerifyIndex();
  public static void loadIndex() throws java.io.IOException;
  public static void verify() throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "CompareFunction.java"
class utility.data {
  Math.MathPoint p;
  int id;
  public utility.data(Math.MathPoint, int);
}
Compiled from "delaynayGenerator.java"
public class utility.delaynayGenerator {
  public static java.util.ArrayList<int[]> points;
  public static java.util.HashSet<java.lang.Long> cnt;
  public static mesh.PDelaunay pd;
  public utility.delaynayGenerator();
  public static long getId(int, int);
  public static void loadData(java.lang.String);
  public static void storeToFile(java.lang.String) throws java.io.FileNotFoundException;
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
  static {};
}
Compiled from "generator.java"
public class utility.generator {
  public utility.generator();
  public static void GeneratePointsofInteger(int, int, java.lang.String);
  public static void GeneratePointsofInteger(int, int, int, int, int, java.lang.String);
  public static void GeneratePointsofDouble(double, double, double, double, int, java.lang.String);
  public static void generatorofnear(int, java.lang.String);
  public static void main(java.lang.String[]);
}
Compiled from "DataOfLine.java"
public class utility.geo.DataOfLine {
  public java.lang.Long lid;
  public utility.geo.Line line;
  public static java.lang.Long M;
  public java.lang.String signature;
  public utility.geo.DataOfLine();
  public utility.geo.DataOfLine(long, utility.geo.Line);
  public utility.geo.DataOfLine(byte[]);
  public byte[] writeToBytes();
  public void loadFromBytes(byte[]);
  public void loadFromFile(java.io.DataInputStream);
  public long getLineId();
  public static long calcLineId(int, int);
  public static long calcLineId(long, long);
  public java.lang.String getDigest();
  public java.lang.String signWithRSA(utility.security.RSA);
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "Line.java"
public class utility.geo.Line implements utility.security.IVo {
  public utility.security.Point pL;
  public utility.security.Point pH;
  Math.BigMathPoint o_pL;
  Math.BigMathPoint o_pH;
  utility.security.Point farL_pL;
  utility.security.Point farL_pH;
  utility.security.Point farR_pL;
  utility.security.Point farR_pH;
  public static utility.security.Paillier paillier;
  public static utility.security.SeedsGenerater seeds;
  java.math.BigInteger g_L_x1;
  java.math.BigInteger g_L_y1;
  java.math.BigInteger g_L_x2;
  java.math.BigInteger g_L_y2;
  java.math.BigInteger g_L_x1y2;
  java.math.BigInteger g_L_x2y1;
  java.math.BigInteger g_R_x1;
  java.math.BigInteger g_R_y1;
  java.math.BigInteger g_R_x2;
  java.math.BigInteger g_R_y2;
  java.math.BigInteger g_R_x1y2;
  java.math.BigInteger g_R_x2y1;
  public long[] areaRep;
  java.math.BigInteger[] baseRep;
  public utility.security.Gfunction gf;
  public java.lang.String[] ServerReturned;
  boolean runTest;
  public utility.geo.Line();
  public utility.geo.Line(long, long, long, long, long, long);
  public utility.geo.Line(utility.security.Point, utility.security.Point);
  public utility.geo.Line(int[], int[]);
  public utility.geo.Line(float[], float[]);
  public void init();
  void init_paillier();
  public void GenerateVeryfyPart(utility.security.Point, boolean);
  void writeToFileOfPaillier(java.io.DataOutputStream);
  public void writeToFile(java.io.DataOutputStream);
  void readFromFileOfPaillier(java.io.DataInputStream);
  public static int seekLenOfPaillier(java.io.DataInputStream);
  public static int seekLen(java.io.DataInputStream);
  public void readFromFile(java.io.DataInputStream);
  public boolean ClientVerify(int, int);
  public boolean ClientVerify(utility.security.Point);
  public java.lang.String getDigest();
  public long getVOSize();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "VoronoiNeighbors.java"
public class utility.geo.VoronoiNeighbors {
  public void generateVoronoiNeighbors(java.lang.String, java.lang.String);
  public void loadVoronoiNeighbors(java.lang.String, java.util.HashMap<java.lang.Integer, int[]>);
  public utility.geo.VoronoiNeighbors();
  public long getNumberOfVoronoiNeighbor(int, java.util.HashMap<java.lang.Integer, int[]>);
  public static void main(java.lang.String[]);
}
Compiled from "buildBtreeOfLines.java"
public class utility.geo.buildBtreeOfLines {
  public static boolean DEBUG;
  public jdbm.RecordManager recmanOfLine;
  public jdbm.PrimaryTreeMap<java.lang.Long, byte[]> btOfLine;
  public int ThreadNum;
  public java.util.ArrayList<float[]> points;
  public java.util.ArrayList<java.lang.Integer> idmap;
  public mesh.Delaunay delaunay;
  public boolean[] threadStatus;
  public static utility.security.RSA rsa;
  public void loadData(java.lang.String) throws java.io.IOException;
  public utility.geo.buildBtreeOfLines(boolean, java.lang.String, java.lang.String) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "buildBtreeOfLines.java"
class utility.geo.buildBtreeOfLines$1 implements java.lang.Runnable {
  final int val$tid;
  final int[] val$lock;
  final int val$totalNum;
  final long val$start;
  final utility.geo.buildBtreeOfLines this$0;
  utility.geo.buildBtreeOfLines$1(utility.geo.buildBtreeOfLines, int, int[], int, long);
  public void run();
}
Compiled from "buildIndexDL.java"
public class utility.geo.buildIndexDL {
  public static java.util.ArrayList<long[]> points;
  public static int ThreadNum;
  public static boolean[] threadStatus;
  public static utility.security.RSA rsa;
  public utility.geo.buildIndexDL();
  public static void loadData(java.lang.String);
  public static void buildIndex(java.lang.String, java.lang.String, int, int) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.lang.NumberFormatException, java.io.IOException;
  static {};
}
Compiled from "buildIndexDL.java"
final class utility.geo.buildIndexDL$1 implements java.lang.Runnable {
  int threadId;
  final int val$tid;
  final int[] val$lock;
  final int val$limit;
  final long[] val$w_lock;
  final java.io.DataOutputStream val$dos_dat;
  final java.io.DataOutputStream val$dos_idx;
  utility.geo.buildIndexDL$1(int, int[], int, long[], java.io.DataOutputStream, java.io.DataOutputStream);
  public void run();
}
Compiled from "genDataOfLineForHadoop.java"
public class utility.geo.genDataOfLineForHadoop {
  public static boolean DEBUG;
  public static java.lang.String filename;
  public void loadData(int) throws java.io.IOException;
  public void loadDataByhop(int) throws java.io.IOException;
  public utility.geo.genDataOfLineForHadoop(boolean) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "mergeIndexDL.java"
public class utility.geo.mergeIndexDL {
  static int[] machineList;
  static java.util.ArrayList<long[]> testIndexs;
  public utility.geo.mergeIndexDL();
  public static boolean testIntegrity(java.lang.String, java.lang.String);
  public static void mergeFile(java.lang.String, java.lang.String) throws java.io.IOException;
  public static void runTest(java.lang.String, java.lang.String) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "gowallaParser.java"
public class utility.gowallaParser {
  public static java.util.HashMap<java.lang.Long, utility.gowallaParser$location> locations;
  public static double rate;
  public static double minx;
  public static double maxx;
  public static double miny;
  public static double maxy;
  public static double minz;
  public static double maxz;
  public static java.util.HashSet<java.lang.Long> cnt;
  public static java.lang.String destFileName;
  public static java.lang.String fileInputPath;
  public utility.gowallaParser();
  public static long getId(long, long, long);
  public static void loadData(java.lang.String) throws java.io.FileNotFoundException;
  public static void formatData(java.lang.String) throws java.io.FileNotFoundException;
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
  static {};
}
Compiled from "gowallaParser.java"
class utility.gowallaParser$location {
  long locId;
  long rating;
  double lat;
  double lng;
  final utility.gowallaParser this$0;
  public utility.gowallaParser$location(utility.gowallaParser);
  public utility.gowallaParser$location(utility.gowallaParser, long, double, double);
  public void addOneRating();
  public double getX();
  public double getY();
  public double getW();
}
Compiled from "knnwithcryop.java"
public class utility.knnwithcryop {
  public static spatialindex.rtree.RTree rtree;
  public static spatialindex.rtree.RTree rtree_kd;
  public static spatialindex.rtree.SecurityTree srtree;
  public static spatialindex.rtree.SecurityTree srtree_kd;
  public static spatialindex.rtree.MyRtree myrtree;
  public static spatialindex.rtree.MyRtree myrtree_kd;
  public static java.util.HashMap<java.lang.Integer, int[]> nbHashMap;
  public static boolean IS_BATCH_QUERY;
  public static utility.MemStat memStat;
  public utility.knnwithcryop();
  public static void LoadMyRTree(java.lang.String, boolean, spatialindex.rtree.MyRtree[], spatialindex.rtree.SecurityTree[], boolean) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public static void main(java.lang.String[]) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public static void query(int, spatialindex.core.Point, java.io.PrintWriter, utility.StatisticForAuth[], int, int, boolean) throws java.io.IOException;
  static {};
}
Compiled from "knnwithcryop.java"
class utility.knnwithcryop$MyRtreeBasedVisitor implements spatialindex.core.IVisitor {
  public int kNum;
  public java.util.ArrayList<spatialindex.core.IShape> data;
  public java.util.ArrayList<java.lang.Integer> ids;
  public spatialindex.core.Point pt;
  final utility.knnwithcryop this$0;
  public utility.knnwithcryop$MyRtreeBasedVisitor(utility.knnwithcryop, int, spatialindex.core.Point);
  public java.util.ArrayList<java.lang.String> getVOStringArray();
  public void searchFinished(int);
  public void setParentCellInside(boolean);
  public void setParentNodeInside(boolean);
  public void visitData(spatialindex.core.IData);
  public void visitNode(spatialindex.core.INode);
  public void visitNode(spatialindex.core.INode, int);
  public void visitNode(spatialindex.core.INode, int, int[]);
  public void printinfo();
  public void visitData(spatialindex.core.IData, int);
}
Compiled from "knnwithcryop.java"
class utility.knnwithcryop$MyRtreeBasedVisitor$1 implements java.util.Comparator<spatialindex.core.IShape> {
  final utility.knnwithcryop$MyRtreeBasedVisitor this$1;
  utility.knnwithcryop$MyRtreeBasedVisitor$1(utility.knnwithcryop$MyRtreeBasedVisitor);
  public int compare(spatialindex.core.IShape, spatialindex.core.IShape);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "knnwithcryop.java"
class utility.knnwithcryop$MyRtreeBasedVisitor$2 implements java.util.Comparator<spatialindex.core.IShape> {
  final utility.knnwithcryop$MyRtreeBasedVisitor this$1;
  utility.knnwithcryop$MyRtreeBasedVisitor$2(utility.knnwithcryop$MyRtreeBasedVisitor);
  public int compare(spatialindex.core.IShape, spatialindex.core.IShape);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "knnwithcryop.java"
class utility.knnwithcryop$MyVisitor implements spatialindex.core.IVisitor {
  public java.util.ArrayList<java.lang.Integer> p_id;
  public java.util.ArrayList<java.lang.Integer> p_x;
  public java.util.ArrayList<java.lang.Integer> p_y;
  final utility.knnwithcryop this$0;
  public utility.knnwithcryop$MyVisitor(utility.knnwithcryop);
  public java.util.ArrayList<java.lang.String> getVOStringArray();
  public void searchFinished(int);
  public void setParentCellInside(boolean);
  public void setParentNodeInside(boolean);
  public void visitData(spatialindex.core.IData);
  public void visitNode(spatialindex.core.INode);
  public void visitNode(spatialindex.core.INode, int);
  public void visitNode(spatialindex.core.INode, int, int[]);
  public void printinfo();
  public void visitData(spatialindex.core.IData, int);
}
Compiled from "newDelaunayParser.java"
public class utility.newDelaunayParser {
  public static java.util.HashMap<java.lang.Integer, java.util.HashSet<java.lang.Integer>> pointsList;
  public static java.util.ArrayList<long[]> points;
  public utility.newDelaunayParser();
  public static void loadData(java.lang.String) throws java.io.FileNotFoundException;
  public static void writeToFile(java.lang.String) throws java.io.FileNotFoundException;
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
  static {};
}
Compiled from "BigIntegerUtility.java"
public class utility.security.BigIntegerUtility {
  public static final double U;
  public static final double L;
  public static int U_HASHVALUE;
  public static int L_HASHVALUE;
  public static final java.math.BigInteger ZERO;
  public static final java.math.BigInteger ONE;
  public static final java.math.BigInteger TWO;
  public static final java.math.BigInteger PRIME_P;
  public static final java.math.BigInteger PRIME_Q;
  public static final java.math.BigInteger N;
  public static final java.math.BigInteger R;
  public static final java.math.BigInteger T;
  public utility.security.BigIntegerUtility();
  public static void main(java.lang.String[]);
  public static java.math.BigInteger compute2XPowerRemain(java.math.BigInteger, int, java.math.BigInteger);
  public static java.math.BigInteger compute2XPowerRemainWithDefaultN(java.math.BigInteger, int);
  static {};
}
Compiled from "DataIO.java"
public class utility.security.DataIO {
  public static java.lang.String defaultCharSet;
  public utility.security.DataIO();
  public static int[] readIntArrays(java.io.DataInputStream);
  public static void writeIntArrays(java.io.DataOutputStream, int[]);
  public static void writeIntArrays(java.io.DataOutputStream, java.lang.Integer[]);
  public static void writeBigInteger(java.io.DataOutputStream, java.math.BigInteger);
  public static java.math.BigInteger readBigInteger(java.io.DataInputStream);
  public static void writeString(java.io.DataOutputStream, java.lang.String, java.lang.String);
  public static void writeString(java.io.DataOutputStream, java.lang.String);
  public static java.lang.String readString(java.io.DataInputStream);
  public static boolean compareString(java.lang.String, java.lang.String, java.lang.String);
  public static boolean compareStringInRSA(java.lang.String, java.lang.String);
  public static boolean compareString(java.lang.String, java.lang.String);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "Gfunction.java"
public class utility.security.Gfunction {
  public long L;
  public long U;
  public java.lang.String r;
  public java.lang.String[] MHTree;
  public java.lang.String[][] GvalueU;
  public java.lang.String[][] GvalueL;
  public java.lang.String[] GvalueUs;
  public java.lang.String[] GvalueLs;
  public int[][] valueU;
  public int[][] valueL;
  public long v;
  public int base;
  public int m;
  public int whichSide;
  public boolean isL;
  public utility.security.Gfunction(long, int, long, long);
  public utility.security.Gfunction(long, int, long, long, int);
  public utility.security.Gfunction(long, int);
  public utility.security.Gfunction();
  public utility.security.Gfunction(int);
  public static java.lang.String HashXmore1times(java.lang.String, long);
  public static java.lang.String HashXtimes(java.lang.String, long);
  public void GenerateU();
  public void GenerateL();
  public java.lang.String[] generateVerifyPart(boolean, int, int[]);
  public java.lang.String[] GenerateVeryfyPart(long, boolean);
  public void writeToFile(java.io.DataOutputStream) throws java.io.IOException;
  public void readFromFile(java.io.DataInputStream) throws java.io.IOException;
  public void buildMHTree(int, int, int, java.lang.String[]);
  public void buildVO(int, int, int, int, java.util.ArrayList<java.lang.String>);
  public static java.lang.String rebuildVO(int, int, java.lang.String[], java.lang.String);
  public void copyStringArray(java.lang.String[], java.lang.String[]);
  public java.lang.String getDigest();
  public utility.security.Gfunction getcopy();
  public java.lang.String ClientComputed(java.lang.String[], long) throws java.lang.Exception;
  public java.lang.String ClientComputed(java.lang.String[], long[]) throws java.lang.Exception;
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Hasher.java"
public class utility.security.Hasher {
  public utility.security.Hasher();
  public static void main(java.lang.String[]);
  public static java.lang.String hashString(java.lang.String);
  static {};
}
Compiled from "IVo.java"
public interface utility.security.IVo {
  public abstract java.lang.String getDigest();
  public abstract boolean ClientVerify(int, int);
}
Compiled from "Paillier.java"
public class utility.security.Paillier {
  public java.math.BigInteger p;
  public java.math.BigInteger q;
  public java.math.BigInteger lambda;
  public java.math.BigInteger n;
  public java.math.BigInteger nsquare;
  public java.math.BigInteger r2n;
  public utility.security.Paillier(int, int);
  public utility.security.Paillier();
  public utility.security.Paillier(boolean);
  public void KeyGeneration(int, int);
  public java.math.BigInteger Encryption(java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger Encryption(java.math.BigInteger);
  public java.math.BigInteger EncryptionWithoutR(java.math.BigInteger);
  public java.math.BigInteger GetEulorTotient();
  public java.math.BigInteger GetG();
  public java.math.BigInteger Decryption(java.math.BigInteger);
  public static void geneateconst(int);
  public static void main(java.lang.String[]);
}
Compiled from "Point.java"
public class utility.security.Point {
  public long x;
  public long y;
  public long w;
  public java.math.BigInteger g_p_x2;
  public java.math.BigInteger g_p_y2;
  public java.math.BigInteger g_2p_x;
  public java.math.BigInteger g_2p_y;
  public java.math.BigInteger g_p_w;
  public java.math.BigInteger g_a;
  public java.math.BigInteger g_0;
  public static utility.security.SeedsGenerater seeds;
  public static utility.security.Paillier pailliar;
  public static java.math.BigInteger a;
  public utility.security.Point();
  public utility.security.Point(long, long, long);
  public utility.security.Point(long[]);
  public utility.security.Point(int[]);
  public utility.security.Point(utility.security.Point);
  public utility.security.Point(utility.security.Point, boolean);
  public void setXSide(utility.security.Point);
  public void setYSide(utility.security.Point);
  public utility.security.Point(utility.security.Point, utility.security.Point);
  public utility.security.Point doublePoint();
  public void Add(utility.security.Point);
  public static long Areax2(utility.security.Point, utility.security.Point, utility.security.Point);
  public static long Distance2(utility.security.Point, utility.security.Point);
  public static long Distance2(long, long, long, long);
  public static java.math.BigInteger buildDelta(utility.security.Point, utility.security.Point, long, long);
  public static boolean verifyByClient(utility.security.Point, utility.security.Point, utility.security.Point, java.math.BigInteger);
  public void buildByPaillier();
  public void readFromFile(java.io.DataInputStream);
  public void writeToFile(java.io.DataOutputStream);
  public java.lang.String getDigest();
  public java.lang.String getDigestX();
  public java.lang.String getDigestY();
  public java.lang.String compactHashCode();
  public long getVOSize();
  public void print();
  public long getX();
  public long getY();
  public long getW();
  public void setX(long);
  public void setY(long);
  public void setW(long);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "RSA.java"
public class utility.security.RSA {
  public java.math.BigInteger n;
  public java.math.BigInteger e;
  public java.math.BigInteger d;
  public utility.security.RSA();
  public utility.security.RSA(int);
  public void initKey();
  public void initKey(int);
  public java.math.BigInteger getPublicKey();
  public java.math.BigInteger getPrivateKey();
  public java.lang.String encrypt(java.lang.String);
  public java.lang.String decrypt(java.lang.String);
  public java.math.BigInteger encrypt(java.math.BigInteger);
  public java.math.BigInteger decrypt(java.math.BigInteger);
  public static java.lang.String SignWithRsa(java.lang.String, java.lang.String, java.lang.String);
  public java.math.BigInteger getCondensedRSA(java.math.BigInteger[]);
  public java.lang.String getCondensedRSA(java.lang.String[]);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SecurityUtility.java"
public class utility.security.SecurityUtility {
  public static final java.math.BigInteger N;
  public static java.lang.String U_HASHVALUE;
  public static java.lang.String L_HASHVALUE;
  public static utility.security.RSA rsa;
  public utility.security.SecurityUtility();
  public static void main(java.lang.String[]) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public static int getCount();
  public static void resetCount();
  public static java.lang.String computeGValue(utility.security.mbrGfunction, spatialindex.core.Region) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public static utility.security.Gfunction[][] computeGValueComponents(spatialindex.core.Region) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public static java.lang.String[] computeEssentialGValueComponents(utility.security.Gfunction, int, boolean) throws java.lang.Exception;
  public static java.lang.String[] computeEssentialGValueComponents(utility.security.Gfunction, double, boolean) throws java.lang.Exception;
  public static java.lang.String[] computeEssentialGValueComponents(utility.security.Gfunction, long, boolean) throws java.lang.Exception;
  public static java.lang.String[][] computeEssentialGValueComponents(utility.security.mbrGfunction, spatialindex.core.Region, int, spatialindex.core.Region) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public static java.lang.String[][] computeEssentialGValueComponents(utility.security.mbrGfunction, spatialindex.core.Region, int, spatialindex.core.Region, int) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public static java.lang.String computeAndVerifyGValue(int, java.lang.String[][], spatialindex.core.Region) throws java.lang.IndexOutOfBoundsException, java.lang.Exception;
  public static utility.security.Gfunction computeFunctionG(double) throws java.lang.Exception;
  public static utility.security.Gfunction computeFunctionG(int) throws java.lang.Exception;
  public static java.lang.String combineFunctionG(java.lang.String[], double) throws java.lang.Exception;
  public static java.lang.String combineFunctionG(double, java.lang.String[]) throws java.lang.Exception;
  public static java.lang.String computeHashValue(utility.security.Gfunction[][]) throws java.io.UnsupportedEncodingException;
  public static java.lang.String computeHashValue(java.lang.String[][]) throws java.io.UnsupportedEncodingException;
  public static java.lang.String computeHashValue(java.lang.String[]) throws java.io.UnsupportedEncodingException;
  public static java.lang.String computeHashValue(java.math.BigInteger[]) throws java.io.UnsupportedEncodingException;
  public static java.lang.String computeGeneralHashValue(java.lang.Long[]);
  public static java.lang.String computeGeneralHashValue(long[]);
  public static java.lang.String computeGeneralHashValue(int[]);
  public static java.lang.String computeGeneralHashValue(java.lang.String[]);
  public static java.lang.String signWithRSA(java.lang.String) throws java.io.UnsupportedEncodingException;
  public static java.lang.String deSignWithRSA(java.lang.String) throws java.io.UnsupportedEncodingException;
  public static double round(double, int);
  static {};
}
Compiled from "SeedsGenerater.java"
public class utility.security.SeedsGenerater {
  public static java.math.BigInteger[] seeds;
  public static java.math.BigInteger[] rsa_g_seeds;
  public static java.math.BigInteger[] g_seeds;
  public static utility.security.Paillier paillier;
  static final java.math.BigInteger ONE;
  static final java.math.BigInteger TWO;
  public static utility.security.RSA rsa;
  public static int base;
  public java.lang.String filename;
  public utility.security.SeedsGenerater();
  public utility.security.SeedsGenerater(int);
  public utility.security.SeedsGenerater(boolean);
  public java.math.BigInteger[] Decompose(java.math.BigInteger);
  public java.math.BigInteger Decompose2(java.math.BigInteger);
  public long[] getRepresentation(long, int);
  public java.math.BigInteger[] getRepresentationBase(int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "mbrGfunction.java"
public class utility.security.mbrGfunction {
  public utility.security.Gfunction[][] gfs;
  public boolean isleaf;
  public void setisLeaf(boolean);
  public utility.security.mbrGfunction();
  public utility.security.mbrGfunction(utility.security.Gfunction[][]);
  public void setGf(utility.security.Gfunction[][]);
  public void writeToFile(java.io.DataOutputStream) throws java.io.IOException;
  public void readFromFile(java.io.DataInputStream) throws java.io.IOException;
}
Compiled from "test.java"
public class utility.test {
  public static utility.security.Paillier paillier;
  public static utility.security.RSA rsa;
  public utility.test();
  public static void printarray(float[][]);
  public static void testTime();
  public static void main(java.lang.String[]) throws java.io.IOException, java.security.NoSuchAlgorithmException;
  static {};
}
Compiled from "testData.java"
public class utility.testData extends javax.swing.JFrame {
  public static final int DEFAULT_WIDTH;
  public static final int DEFAULT_HEIGHT;
  public static final int DEFAULT_LOCATION_X;
  public static final int DEFAULT_LOCATION_Y;
  public static void main(java.lang.String[]);
  public utility.testData();
  static java.lang.String access$000(utility.testData);
  static java.lang.String access$100(utility.testData);
}
Compiled from "testData.java"
final class utility.testData$1 implements java.lang.Runnable {
  utility.testData$1();
  public void run();
}
Compiled from "testData.java"
class utility.testData$data extends javax.swing.JPanel {
  java.util.ArrayList<java.awt.Point> points;
  java.util.ArrayList<java.awt.Point> points2;
  final utility.testData this$0;
  utility.testData$data(utility.testData);
  public void paintComponent(java.awt.Graphics);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy implements spatialindex.core.IQueryStrategy {
  java.util.ArrayList<java.lang.Integer> ids;
  java.util.HashSet<java.lang.Long> lineHashSet_index;
  java.util.HashSet<java.lang.Long> lineHashSet_leaf;
  int limit;
  public int num;
  spatialindex.rtree.RTree rtree;
  public long calcLineId(int, int, int);
  public void computePreSignedLines(spatialindex.rtree.Node);
  public long getNumberOfMRtreeNode();
  public void getNextEntry(spatialindex.core.IEntry, int[], boolean[]);
  public utility.travesalStrategy();
  public utility.travesalStrategy(spatialindex.rtree.RTree, int);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy$1 implements java.util.Comparator<spatialindex.rtree.Node> {
  final java.awt.Point val$q;
  final utility.travesalStrategy this$0;
  utility.travesalStrategy$1(utility.travesalStrategy, java.awt.Point);
  public int compare(spatialindex.rtree.Node, spatialindex.rtree.Node);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy$2 implements java.util.Comparator<spatialindex.rtree.Node> {
  final java.awt.Point val$q;
  final utility.travesalStrategy this$0;
  utility.travesalStrategy$2(utility.travesalStrategy, java.awt.Point);
  public int compare(spatialindex.rtree.Node, spatialindex.rtree.Node);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy$3 implements java.util.Comparator<spatialindex.rtree.Node> {
  final java.awt.Point val$q;
  final utility.travesalStrategy this$0;
  utility.travesalStrategy$3(utility.travesalStrategy, java.awt.Point);
  public int compare(spatialindex.rtree.Node, spatialindex.rtree.Node);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy$4 implements java.util.Comparator<spatialindex.rtree.Node> {
  final java.awt.Point val$q;
  final utility.travesalStrategy this$0;
  utility.travesalStrategy$4(utility.travesalStrategy, java.awt.Point);
  public int compare(spatialindex.rtree.Node, spatialindex.rtree.Node);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy$5 implements java.util.Comparator<utility.MRData> {
  final java.awt.Point val$q;
  final utility.travesalStrategy this$0;
  utility.travesalStrategy$5(utility.travesalStrategy, java.awt.Point);
  public int compare(utility.MRData, utility.MRData);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy$6 implements java.util.Comparator<utility.MRData> {
  final java.awt.Point val$q;
  final utility.travesalStrategy this$0;
  utility.travesalStrategy$6(utility.travesalStrategy, java.awt.Point);
  public int compare(utility.MRData, utility.MRData);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy$7 implements java.util.Comparator<utility.MRData> {
  final java.awt.Point val$q;
  final utility.travesalStrategy this$0;
  utility.travesalStrategy$7(utility.travesalStrategy, java.awt.Point);
  public int compare(utility.MRData, utility.MRData);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy$8 implements java.util.Comparator<utility.MRData> {
  final java.awt.Point val$q;
  final utility.travesalStrategy this$0;
  utility.travesalStrategy$8(utility.travesalStrategy, java.awt.Point);
  public int compare(utility.MRData, utility.MRData);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "CalcNumberOfMR.java"
class utility.travesalStrategy_kd implements spatialindex.core.IQueryStrategy {
  java.util.ArrayList<java.lang.Integer> nextIds;
  long num;
  int limit;
  java.util.HashSet<java.lang.Integer> lineHashSet;
  public void getids(java.util.ArrayList<java.lang.Integer>, int, int, int, int);
  public void computePreSignedLines(spatialindex.rtree.Node, int, int, int);
  public long getNumberOfMRtreeNode();
  public void getNextEntry(spatialindex.core.IEntry, int[], boolean[]);
  public utility.travesalStrategy_kd();
  public utility.travesalStrategy_kd(int);
}
Compiled from "CompareFunction.java"
class utility.tuple implements java.lang.Comparable<utility.tuple> {
  double w1;
  double w2;
  double dist;
  int id;
  public utility.tuple(double, int, double, double);
  public int compareTo(utility.tuple);
  public int compareTo(java.lang.Object);
}
