Compiled from "App.java"
public class com.bigfatplayer.hello.App {
  public com.bigfatplayer.hello.App();
  public int add(int, int);
  public int mul(int, int);
  public double divide(int, int) throws java.lang.IllegalArgumentException;
  public static void main(java.lang.String[]);
}
Compiled from "AppClient.java"
public class com.bigfatplayer.hello.AppClient implements java.lang.Runnable {
  public com.bigfatplayer.hello.AppClient();
  public void run();
}
Compiled from "AppServer.java"
public class com.bigfatplayer.hello.AppServer implements java.lang.Runnable {
  public com.bigfatplayer.hello.AppServer();
  public void run();
}
Compiled from "AppTest.java"
public class com.bigfatplayer.hello.AppTest {
  public com.bigfatplayer.hello.AppTest();
  public void simple();
  public void testAdd();
  public void mul();
  public void failMul();
  public void zeroDivisionTest();
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator {
  public com.bigfatplayer.hello.Calculator();
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$1 {
  static final int[] $SwitchMap$com$bigfatplayer$hello$Calculator$ping_args$_Fields;
  static final int[] $SwitchMap$com$bigfatplayer$hello$Calculator$ping_result$_Fields;
  static final int[] $SwitchMap$com$bigfatplayer$hello$Calculator$add_args$_Fields;
  static final int[] $SwitchMap$com$bigfatplayer$hello$Calculator$add_result$_Fields;
  static final int[] $SwitchMap$com$bigfatplayer$hello$Calculator$calculate_args$_Fields;
  static final int[] $SwitchMap$com$bigfatplayer$hello$Calculator$calculate_result$_Fields;
  static final int[] $SwitchMap$com$bigfatplayer$hello$Calculator$zip_args$_Fields;
  static {};
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$AsyncClient extends org.apache.thrift.async.TAsyncClient implements com.bigfatplayer.hello.Calculator$AsyncIface {
  public com.bigfatplayer.hello.Calculator$AsyncClient(org.apache.thrift.protocol.TProtocolFactory, org.apache.thrift.async.TAsyncClientManager, org.apache.thrift.transport.TNonblockingTransport);
  public void ping(org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$ping_call>) throws org.apache.thrift.TException;
  public void add(int, int, org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$add_call>) throws org.apache.thrift.TException;
  public void calculate(int, com.bigfatplayer.hello.Work, org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$calculate_call>) throws org.apache.thrift.TException;
  public void zip(org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$zip_call>) throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$AsyncClient$Factory implements org.apache.thrift.async.TAsyncClientFactory<com.bigfatplayer.hello.Calculator$AsyncClient> {
  public com.bigfatplayer.hello.Calculator$AsyncClient$Factory(org.apache.thrift.async.TAsyncClientManager, org.apache.thrift.protocol.TProtocolFactory);
  public com.bigfatplayer.hello.Calculator$AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport);
  public org.apache.thrift.async.TAsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport);
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$AsyncClient$add_call extends org.apache.thrift.async.TAsyncMethodCall {
  public com.bigfatplayer.hello.Calculator$AsyncClient$add_call(int, int, org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$add_call>, org.apache.thrift.async.TAsyncClient, org.apache.thrift.protocol.TProtocolFactory, org.apache.thrift.transport.TNonblockingTransport) throws org.apache.thrift.TException;
  public void write_args(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public int getResult() throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$AsyncClient$calculate_call extends org.apache.thrift.async.TAsyncMethodCall {
  public com.bigfatplayer.hello.Calculator$AsyncClient$calculate_call(int, com.bigfatplayer.hello.Work, org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$calculate_call>, org.apache.thrift.async.TAsyncClient, org.apache.thrift.protocol.TProtocolFactory, org.apache.thrift.transport.TNonblockingTransport) throws org.apache.thrift.TException;
  public void write_args(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public int getResult() throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$AsyncClient$ping_call extends org.apache.thrift.async.TAsyncMethodCall {
  public com.bigfatplayer.hello.Calculator$AsyncClient$ping_call(org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$ping_call>, org.apache.thrift.async.TAsyncClient, org.apache.thrift.protocol.TProtocolFactory, org.apache.thrift.transport.TNonblockingTransport) throws org.apache.thrift.TException;
  public void write_args(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void getResult() throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$AsyncClient$zip_call extends org.apache.thrift.async.TAsyncMethodCall {
  public com.bigfatplayer.hello.Calculator$AsyncClient$zip_call(org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$zip_call>, org.apache.thrift.async.TAsyncClient, org.apache.thrift.protocol.TProtocolFactory, org.apache.thrift.transport.TNonblockingTransport) throws org.apache.thrift.TException;
  public void write_args(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void getResult() throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public interface com.bigfatplayer.hello.Calculator$AsyncIface {
  public abstract void ping(org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$ping_call>) throws org.apache.thrift.TException;
  public abstract void add(int, int, org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$add_call>) throws org.apache.thrift.TException;
  public abstract void calculate(int, com.bigfatplayer.hello.Work, org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$calculate_call>) throws org.apache.thrift.TException;
  public abstract void zip(org.apache.thrift.async.AsyncMethodCallback<com.bigfatplayer.hello.Calculator$AsyncClient$zip_call>) throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$Client extends org.apache.thrift.TServiceClient implements com.bigfatplayer.hello.Calculator$Iface {
  public com.bigfatplayer.hello.Calculator$Client(org.apache.thrift.protocol.TProtocol);
  public com.bigfatplayer.hello.Calculator$Client(org.apache.thrift.protocol.TProtocol, org.apache.thrift.protocol.TProtocol);
  public void ping() throws org.apache.thrift.TException;
  public void send_ping() throws org.apache.thrift.TException;
  public void recv_ping() throws org.apache.thrift.TException;
  public int add(int, int) throws org.apache.thrift.TException;
  public void send_add(int, int) throws org.apache.thrift.TException;
  public int recv_add() throws org.apache.thrift.TException;
  public int calculate(int, com.bigfatplayer.hello.Work) throws org.apache.thrift.TException;
  public void send_calculate(int, com.bigfatplayer.hello.Work) throws org.apache.thrift.TException;
  public int recv_calculate() throws org.apache.thrift.TException;
  public void zip() throws org.apache.thrift.TException;
  public void send_zip() throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$Client$Factory implements org.apache.thrift.TServiceClientFactory<com.bigfatplayer.hello.Calculator$Client> {
  public com.bigfatplayer.hello.Calculator$Client$Factory();
  public com.bigfatplayer.hello.Calculator$Client getClient(org.apache.thrift.protocol.TProtocol);
  public com.bigfatplayer.hello.Calculator$Client getClient(org.apache.thrift.protocol.TProtocol, org.apache.thrift.protocol.TProtocol);
  public org.apache.thrift.TServiceClient getClient(org.apache.thrift.protocol.TProtocol, org.apache.thrift.protocol.TProtocol);
  public org.apache.thrift.TServiceClient getClient(org.apache.thrift.protocol.TProtocol);
}
Compiled from "Calculator.java"
public interface com.bigfatplayer.hello.Calculator$Iface {
  public abstract void ping() throws org.apache.thrift.TException;
  public abstract int add(int, int) throws org.apache.thrift.TException;
  public abstract int calculate(int, com.bigfatplayer.hello.Work) throws org.apache.thrift.TException;
  public abstract void zip() throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$Processor<I extends com.bigfatplayer.hello.Calculator$Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
  public com.bigfatplayer.hello.Calculator$Processor(I);
  protected com.bigfatplayer.hello.Calculator$Processor(I, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>);
  static {};
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$Processor$add<I extends com.bigfatplayer.hello.Calculator$Iface> extends org.apache.thrift.ProcessFunction<I, com.bigfatplayer.hello.Calculator$add_args> {
  public com.bigfatplayer.hello.Calculator$Processor$add();
  public com.bigfatplayer.hello.Calculator$add_args getEmptyArgsInstance();
  protected boolean isOneway();
  public com.bigfatplayer.hello.Calculator$add_result getResult(I, com.bigfatplayer.hello.Calculator$add_args) throws org.apache.thrift.TException;
  public org.apache.thrift.TBase getEmptyArgsInstance();
  public org.apache.thrift.TBase getResult(java.lang.Object, org.apache.thrift.TBase) throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$Processor$calculate<I extends com.bigfatplayer.hello.Calculator$Iface> extends org.apache.thrift.ProcessFunction<I, com.bigfatplayer.hello.Calculator$calculate_args> {
  public com.bigfatplayer.hello.Calculator$Processor$calculate();
  public com.bigfatplayer.hello.Calculator$calculate_args getEmptyArgsInstance();
  protected boolean isOneway();
  public com.bigfatplayer.hello.Calculator$calculate_result getResult(I, com.bigfatplayer.hello.Calculator$calculate_args) throws org.apache.thrift.TException;
  public org.apache.thrift.TBase getEmptyArgsInstance();
  public org.apache.thrift.TBase getResult(java.lang.Object, org.apache.thrift.TBase) throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$Processor$ping<I extends com.bigfatplayer.hello.Calculator$Iface> extends org.apache.thrift.ProcessFunction<I, com.bigfatplayer.hello.Calculator$ping_args> {
  public com.bigfatplayer.hello.Calculator$Processor$ping();
  public com.bigfatplayer.hello.Calculator$ping_args getEmptyArgsInstance();
  protected boolean isOneway();
  public com.bigfatplayer.hello.Calculator$ping_result getResult(I, com.bigfatplayer.hello.Calculator$ping_args) throws org.apache.thrift.TException;
  public org.apache.thrift.TBase getEmptyArgsInstance();
  public org.apache.thrift.TBase getResult(java.lang.Object, org.apache.thrift.TBase) throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$Processor$zip<I extends com.bigfatplayer.hello.Calculator$Iface> extends org.apache.thrift.ProcessFunction<I, com.bigfatplayer.hello.Calculator$zip_args> {
  public com.bigfatplayer.hello.Calculator$Processor$zip();
  public com.bigfatplayer.hello.Calculator$zip_args getEmptyArgsInstance();
  protected boolean isOneway();
  public org.apache.thrift.TBase getResult(I, com.bigfatplayer.hello.Calculator$zip_args) throws org.apache.thrift.TException;
  public org.apache.thrift.TBase getEmptyArgsInstance();
  public org.apache.thrift.TBase getResult(java.lang.Object, org.apache.thrift.TBase) throws org.apache.thrift.TException;
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$add_args implements org.apache.thrift.TBase<com.bigfatplayer.hello.Calculator$add_args, com.bigfatplayer.hello.Calculator$add_args$_Fields>, java.io.Serializable, java.lang.Cloneable {
  public int num1;
  public int num2;
  public static final java.util.Map<com.bigfatplayer.hello.Calculator$add_args$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public com.bigfatplayer.hello.Calculator$add_args();
  public com.bigfatplayer.hello.Calculator$add_args(int, int);
  public com.bigfatplayer.hello.Calculator$add_args(com.bigfatplayer.hello.Calculator$add_args);
  public com.bigfatplayer.hello.Calculator$add_args deepCopy();
  public void clear();
  public int getNum1();
  public com.bigfatplayer.hello.Calculator$add_args setNum1(int);
  public void unsetNum1();
  public boolean isSetNum1();
  public void setNum1IsSet(boolean);
  public int getNum2();
  public com.bigfatplayer.hello.Calculator$add_args setNum2(int);
  public void unsetNum2();
  public boolean isSetNum2();
  public void setNum2IsSet(boolean);
  public void setFieldValue(com.bigfatplayer.hello.Calculator$add_args$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(com.bigfatplayer.hello.Calculator$add_args$_Fields);
  public boolean isSet(com.bigfatplayer.hello.Calculator$add_args$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(com.bigfatplayer.hello.Calculator$add_args);
  public int hashCode();
  public int compareTo(com.bigfatplayer.hello.Calculator$add_args);
  public com.bigfatplayer.hello.Calculator$add_args$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$1300();
  static org.apache.thrift.protocol.TField access$1400();
  static org.apache.thrift.protocol.TField access$1500();
  static {};
}
Compiled from "Calculator.java"
public final class com.bigfatplayer.hello.Calculator$add_args$_Fields extends java.lang.Enum<com.bigfatplayer.hello.Calculator$add_args$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static final com.bigfatplayer.hello.Calculator$add_args$_Fields NUM1;
  public static final com.bigfatplayer.hello.Calculator$add_args$_Fields NUM2;
  public static com.bigfatplayer.hello.Calculator$add_args$_Fields[] values();
  public static com.bigfatplayer.hello.Calculator$add_args$_Fields valueOf(java.lang.String);
  public static com.bigfatplayer.hello.Calculator$add_args$_Fields findByThriftId(int);
  public static com.bigfatplayer.hello.Calculator$add_args$_Fields findByThriftIdOrThrow(int);
  public static com.bigfatplayer.hello.Calculator$add_args$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$add_args$add_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<com.bigfatplayer.hello.Calculator$add_args> {
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$add_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$add_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$add_args$add_argsStandardScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$add_args$add_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$add_args$add_argsStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$add_args$add_argsStandardSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$add_args$add_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<com.bigfatplayer.hello.Calculator$add_args> {
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$add_args) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$add_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$add_args$add_argsTupleScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$add_args$add_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$add_args$add_argsTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$add_args$add_argsTupleSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$add_result implements org.apache.thrift.TBase<com.bigfatplayer.hello.Calculator$add_result, com.bigfatplayer.hello.Calculator$add_result$_Fields>, java.io.Serializable, java.lang.Cloneable {
  public int success;
  public static final java.util.Map<com.bigfatplayer.hello.Calculator$add_result$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public com.bigfatplayer.hello.Calculator$add_result();
  public com.bigfatplayer.hello.Calculator$add_result(int);
  public com.bigfatplayer.hello.Calculator$add_result(com.bigfatplayer.hello.Calculator$add_result);
  public com.bigfatplayer.hello.Calculator$add_result deepCopy();
  public void clear();
  public int getSuccess();
  public com.bigfatplayer.hello.Calculator$add_result setSuccess(int);
  public void unsetSuccess();
  public boolean isSetSuccess();
  public void setSuccessIsSet(boolean);
  public void setFieldValue(com.bigfatplayer.hello.Calculator$add_result$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(com.bigfatplayer.hello.Calculator$add_result$_Fields);
  public boolean isSet(com.bigfatplayer.hello.Calculator$add_result$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(com.bigfatplayer.hello.Calculator$add_result);
  public int hashCode();
  public int compareTo(com.bigfatplayer.hello.Calculator$add_result);
  public com.bigfatplayer.hello.Calculator$add_result$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$2000();
  static org.apache.thrift.protocol.TField access$2100();
  static {};
}
Compiled from "Calculator.java"
public final class com.bigfatplayer.hello.Calculator$add_result$_Fields extends java.lang.Enum<com.bigfatplayer.hello.Calculator$add_result$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static final com.bigfatplayer.hello.Calculator$add_result$_Fields SUCCESS;
  public static com.bigfatplayer.hello.Calculator$add_result$_Fields[] values();
  public static com.bigfatplayer.hello.Calculator$add_result$_Fields valueOf(java.lang.String);
  public static com.bigfatplayer.hello.Calculator$add_result$_Fields findByThriftId(int);
  public static com.bigfatplayer.hello.Calculator$add_result$_Fields findByThriftIdOrThrow(int);
  public static com.bigfatplayer.hello.Calculator$add_result$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$add_result$add_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<com.bigfatplayer.hello.Calculator$add_result> {
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$add_result) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$add_result) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$add_result$add_resultStandardScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$add_result$add_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$add_result$add_resultStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$add_result$add_resultStandardSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$add_result$add_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<com.bigfatplayer.hello.Calculator$add_result> {
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$add_result) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$add_result) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$add_result$add_resultTupleScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$add_result$add_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$add_result$add_resultTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$add_result$add_resultTupleSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$calculate_args implements org.apache.thrift.TBase<com.bigfatplayer.hello.Calculator$calculate_args, com.bigfatplayer.hello.Calculator$calculate_args$_Fields>, java.io.Serializable, java.lang.Cloneable {
  public int logid;
  public com.bigfatplayer.hello.Work w;
  public static final java.util.Map<com.bigfatplayer.hello.Calculator$calculate_args$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public com.bigfatplayer.hello.Calculator$calculate_args();
  public com.bigfatplayer.hello.Calculator$calculate_args(int, com.bigfatplayer.hello.Work);
  public com.bigfatplayer.hello.Calculator$calculate_args(com.bigfatplayer.hello.Calculator$calculate_args);
  public com.bigfatplayer.hello.Calculator$calculate_args deepCopy();
  public void clear();
  public int getLogid();
  public com.bigfatplayer.hello.Calculator$calculate_args setLogid(int);
  public void unsetLogid();
  public boolean isSetLogid();
  public void setLogidIsSet(boolean);
  public com.bigfatplayer.hello.Work getW();
  public com.bigfatplayer.hello.Calculator$calculate_args setW(com.bigfatplayer.hello.Work);
  public void unsetW();
  public boolean isSetW();
  public void setWIsSet(boolean);
  public void setFieldValue(com.bigfatplayer.hello.Calculator$calculate_args$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(com.bigfatplayer.hello.Calculator$calculate_args$_Fields);
  public boolean isSet(com.bigfatplayer.hello.Calculator$calculate_args$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(com.bigfatplayer.hello.Calculator$calculate_args);
  public int hashCode();
  public int compareTo(com.bigfatplayer.hello.Calculator$calculate_args);
  public com.bigfatplayer.hello.Calculator$calculate_args$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$2600();
  static org.apache.thrift.protocol.TField access$2700();
  static org.apache.thrift.protocol.TField access$2800();
  static {};
}
Compiled from "Calculator.java"
public final class com.bigfatplayer.hello.Calculator$calculate_args$_Fields extends java.lang.Enum<com.bigfatplayer.hello.Calculator$calculate_args$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static final com.bigfatplayer.hello.Calculator$calculate_args$_Fields LOGID;
  public static final com.bigfatplayer.hello.Calculator$calculate_args$_Fields W;
  public static com.bigfatplayer.hello.Calculator$calculate_args$_Fields[] values();
  public static com.bigfatplayer.hello.Calculator$calculate_args$_Fields valueOf(java.lang.String);
  public static com.bigfatplayer.hello.Calculator$calculate_args$_Fields findByThriftId(int);
  public static com.bigfatplayer.hello.Calculator$calculate_args$_Fields findByThriftIdOrThrow(int);
  public static com.bigfatplayer.hello.Calculator$calculate_args$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<com.bigfatplayer.hello.Calculator$calculate_args> {
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$calculate_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$calculate_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsStandardScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsStandardSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<com.bigfatplayer.hello.Calculator$calculate_args> {
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$calculate_args) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$calculate_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsTupleScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$calculate_args$calculate_argsTupleSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$calculate_result implements org.apache.thrift.TBase<com.bigfatplayer.hello.Calculator$calculate_result, com.bigfatplayer.hello.Calculator$calculate_result$_Fields>, java.io.Serializable, java.lang.Cloneable {
  public int success;
  public static final java.util.Map<com.bigfatplayer.hello.Calculator$calculate_result$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public com.bigfatplayer.hello.Calculator$calculate_result();
  public com.bigfatplayer.hello.Calculator$calculate_result(int);
  public com.bigfatplayer.hello.Calculator$calculate_result(com.bigfatplayer.hello.Calculator$calculate_result);
  public com.bigfatplayer.hello.Calculator$calculate_result deepCopy();
  public void clear();
  public int getSuccess();
  public com.bigfatplayer.hello.Calculator$calculate_result setSuccess(int);
  public void unsetSuccess();
  public boolean isSetSuccess();
  public void setSuccessIsSet(boolean);
  public void setFieldValue(com.bigfatplayer.hello.Calculator$calculate_result$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(com.bigfatplayer.hello.Calculator$calculate_result$_Fields);
  public boolean isSet(com.bigfatplayer.hello.Calculator$calculate_result$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(com.bigfatplayer.hello.Calculator$calculate_result);
  public int hashCode();
  public int compareTo(com.bigfatplayer.hello.Calculator$calculate_result);
  public com.bigfatplayer.hello.Calculator$calculate_result$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$3300();
  static org.apache.thrift.protocol.TField access$3400();
  static {};
}
Compiled from "Calculator.java"
public final class com.bigfatplayer.hello.Calculator$calculate_result$_Fields extends java.lang.Enum<com.bigfatplayer.hello.Calculator$calculate_result$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static final com.bigfatplayer.hello.Calculator$calculate_result$_Fields SUCCESS;
  public static com.bigfatplayer.hello.Calculator$calculate_result$_Fields[] values();
  public static com.bigfatplayer.hello.Calculator$calculate_result$_Fields valueOf(java.lang.String);
  public static com.bigfatplayer.hello.Calculator$calculate_result$_Fields findByThriftId(int);
  public static com.bigfatplayer.hello.Calculator$calculate_result$_Fields findByThriftIdOrThrow(int);
  public static com.bigfatplayer.hello.Calculator$calculate_result$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<com.bigfatplayer.hello.Calculator$calculate_result> {
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$calculate_result) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$calculate_result) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultStandardScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultStandardSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<com.bigfatplayer.hello.Calculator$calculate_result> {
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$calculate_result) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$calculate_result) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultTupleScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$calculate_result$calculate_resultTupleSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$ping_args implements org.apache.thrift.TBase<com.bigfatplayer.hello.Calculator$ping_args, com.bigfatplayer.hello.Calculator$ping_args$_Fields>, java.io.Serializable, java.lang.Cloneable {
  public static final java.util.Map<com.bigfatplayer.hello.Calculator$ping_args$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public com.bigfatplayer.hello.Calculator$ping_args();
  public com.bigfatplayer.hello.Calculator$ping_args(com.bigfatplayer.hello.Calculator$ping_args);
  public com.bigfatplayer.hello.Calculator$ping_args deepCopy();
  public void clear();
  public void setFieldValue(com.bigfatplayer.hello.Calculator$ping_args$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(com.bigfatplayer.hello.Calculator$ping_args$_Fields);
  public boolean isSet(com.bigfatplayer.hello.Calculator$ping_args$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(com.bigfatplayer.hello.Calculator$ping_args);
  public int hashCode();
  public int compareTo(com.bigfatplayer.hello.Calculator$ping_args);
  public com.bigfatplayer.hello.Calculator$ping_args$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$300();
  static {};
}
Compiled from "Calculator.java"
public final class com.bigfatplayer.hello.Calculator$ping_args$_Fields extends java.lang.Enum<com.bigfatplayer.hello.Calculator$ping_args$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static com.bigfatplayer.hello.Calculator$ping_args$_Fields[] values();
  public static com.bigfatplayer.hello.Calculator$ping_args$_Fields valueOf(java.lang.String);
  public static com.bigfatplayer.hello.Calculator$ping_args$_Fields findByThriftId(int);
  public static com.bigfatplayer.hello.Calculator$ping_args$_Fields findByThriftIdOrThrow(int);
  public static com.bigfatplayer.hello.Calculator$ping_args$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$ping_args$ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<com.bigfatplayer.hello.Calculator$ping_args> {
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$ping_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$ping_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$ping_args$ping_argsStandardScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$ping_args$ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$ping_args$ping_argsStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$ping_args$ping_argsStandardSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$ping_args$ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<com.bigfatplayer.hello.Calculator$ping_args> {
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$ping_args) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$ping_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$ping_args$ping_argsTupleScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$ping_args$ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$ping_args$ping_argsTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$ping_args$ping_argsTupleSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$ping_result implements org.apache.thrift.TBase<com.bigfatplayer.hello.Calculator$ping_result, com.bigfatplayer.hello.Calculator$ping_result$_Fields>, java.io.Serializable, java.lang.Cloneable {
  public static final java.util.Map<com.bigfatplayer.hello.Calculator$ping_result$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public com.bigfatplayer.hello.Calculator$ping_result();
  public com.bigfatplayer.hello.Calculator$ping_result(com.bigfatplayer.hello.Calculator$ping_result);
  public com.bigfatplayer.hello.Calculator$ping_result deepCopy();
  public void clear();
  public void setFieldValue(com.bigfatplayer.hello.Calculator$ping_result$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(com.bigfatplayer.hello.Calculator$ping_result$_Fields);
  public boolean isSet(com.bigfatplayer.hello.Calculator$ping_result$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(com.bigfatplayer.hello.Calculator$ping_result);
  public int hashCode();
  public int compareTo(com.bigfatplayer.hello.Calculator$ping_result);
  public com.bigfatplayer.hello.Calculator$ping_result$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$800();
  static {};
}
Compiled from "Calculator.java"
public final class com.bigfatplayer.hello.Calculator$ping_result$_Fields extends java.lang.Enum<com.bigfatplayer.hello.Calculator$ping_result$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static com.bigfatplayer.hello.Calculator$ping_result$_Fields[] values();
  public static com.bigfatplayer.hello.Calculator$ping_result$_Fields valueOf(java.lang.String);
  public static com.bigfatplayer.hello.Calculator$ping_result$_Fields findByThriftId(int);
  public static com.bigfatplayer.hello.Calculator$ping_result$_Fields findByThriftIdOrThrow(int);
  public static com.bigfatplayer.hello.Calculator$ping_result$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$ping_result$ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<com.bigfatplayer.hello.Calculator$ping_result> {
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$ping_result) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$ping_result) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$ping_result$ping_resultStandardScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$ping_result$ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$ping_result$ping_resultStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$ping_result$ping_resultStandardSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$ping_result$ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<com.bigfatplayer.hello.Calculator$ping_result> {
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$ping_result) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$ping_result) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$ping_result$ping_resultTupleScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$ping_result$ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$ping_result$ping_resultTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$ping_result$ping_resultTupleSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
public class com.bigfatplayer.hello.Calculator$zip_args implements org.apache.thrift.TBase<com.bigfatplayer.hello.Calculator$zip_args, com.bigfatplayer.hello.Calculator$zip_args$_Fields>, java.io.Serializable, java.lang.Cloneable {
  public static final java.util.Map<com.bigfatplayer.hello.Calculator$zip_args$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public com.bigfatplayer.hello.Calculator$zip_args();
  public com.bigfatplayer.hello.Calculator$zip_args(com.bigfatplayer.hello.Calculator$zip_args);
  public com.bigfatplayer.hello.Calculator$zip_args deepCopy();
  public void clear();
  public void setFieldValue(com.bigfatplayer.hello.Calculator$zip_args$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(com.bigfatplayer.hello.Calculator$zip_args$_Fields);
  public boolean isSet(com.bigfatplayer.hello.Calculator$zip_args$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(com.bigfatplayer.hello.Calculator$zip_args);
  public int hashCode();
  public int compareTo(com.bigfatplayer.hello.Calculator$zip_args);
  public com.bigfatplayer.hello.Calculator$zip_args$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$3900();
  static {};
}
Compiled from "Calculator.java"
public final class com.bigfatplayer.hello.Calculator$zip_args$_Fields extends java.lang.Enum<com.bigfatplayer.hello.Calculator$zip_args$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static com.bigfatplayer.hello.Calculator$zip_args$_Fields[] values();
  public static com.bigfatplayer.hello.Calculator$zip_args$_Fields valueOf(java.lang.String);
  public static com.bigfatplayer.hello.Calculator$zip_args$_Fields findByThriftId(int);
  public static com.bigfatplayer.hello.Calculator$zip_args$_Fields findByThriftIdOrThrow(int);
  public static com.bigfatplayer.hello.Calculator$zip_args$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$zip_args$zip_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<com.bigfatplayer.hello.Calculator$zip_args> {
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$zip_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$zip_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$zip_args$zip_argsStandardScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$zip_args$zip_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$zip_args$zip_argsStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$zip_args$zip_argsStandardSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$zip_args$zip_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<com.bigfatplayer.hello.Calculator$zip_args> {
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$zip_args) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Calculator$zip_args) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Calculator$zip_args$zip_argsTupleScheme(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "Calculator.java"
class com.bigfatplayer.hello.Calculator$zip_args$zip_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Calculator$zip_args$zip_argsTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Calculator$zip_args$zip_argsTupleSchemeFactory(com.bigfatplayer.hello.Calculator$1);
}
Compiled from "CalculatorServer.java"
public class com.bigfatplayer.hello.CalculatorServer implements com.bigfatplayer.hello.Calculator$Iface {
  public com.bigfatplayer.hello.CalculatorServer();
  public void ping() throws org.apache.thrift.TException;
  public int add(int, int) throws org.apache.thrift.TException;
  public int calculate(int, com.bigfatplayer.hello.Work) throws org.apache.thrift.TException;
  public void zip() throws org.apache.thrift.TException;
}
Compiled from "Work.java"
public class com.bigfatplayer.hello.Work implements org.apache.thrift.TBase<com.bigfatplayer.hello.Work, com.bigfatplayer.hello.Work$_Fields>, java.io.Serializable, java.lang.Cloneable {
  public int num1;
  public int num2;
  public java.lang.String comment;
  public static final java.util.Map<com.bigfatplayer.hello.Work$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public com.bigfatplayer.hello.Work();
  public com.bigfatplayer.hello.Work(int, int);
  public com.bigfatplayer.hello.Work(com.bigfatplayer.hello.Work);
  public com.bigfatplayer.hello.Work deepCopy();
  public void clear();
  public int getNum1();
  public com.bigfatplayer.hello.Work setNum1(int);
  public void unsetNum1();
  public boolean isSetNum1();
  public void setNum1IsSet(boolean);
  public int getNum2();
  public com.bigfatplayer.hello.Work setNum2(int);
  public void unsetNum2();
  public boolean isSetNum2();
  public void setNum2IsSet(boolean);
  public java.lang.String getComment();
  public com.bigfatplayer.hello.Work setComment(java.lang.String);
  public void unsetComment();
  public boolean isSetComment();
  public void setCommentIsSet(boolean);
  public void setFieldValue(com.bigfatplayer.hello.Work$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(com.bigfatplayer.hello.Work$_Fields);
  public boolean isSet(com.bigfatplayer.hello.Work$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(com.bigfatplayer.hello.Work);
  public int hashCode();
  public int compareTo(com.bigfatplayer.hello.Work);
  public com.bigfatplayer.hello.Work$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$300();
  static org.apache.thrift.protocol.TField access$400();
  static org.apache.thrift.protocol.TField access$500();
  static org.apache.thrift.protocol.TField access$600();
  static {};
}
Compiled from "Work.java"
class com.bigfatplayer.hello.Work$1 {
  static final int[] $SwitchMap$com$bigfatplayer$hello$Work$_Fields;
  static {};
}
Compiled from "Work.java"
class com.bigfatplayer.hello.Work$WorkStandardScheme extends org.apache.thrift.scheme.StandardScheme<com.bigfatplayer.hello.Work> {
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Work) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Work) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Work$WorkStandardScheme(com.bigfatplayer.hello.Work$1);
}
Compiled from "Work.java"
class com.bigfatplayer.hello.Work$WorkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Work$WorkStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Work$WorkStandardSchemeFactory(com.bigfatplayer.hello.Work$1);
}
Compiled from "Work.java"
class com.bigfatplayer.hello.Work$WorkTupleScheme extends org.apache.thrift.scheme.TupleScheme<com.bigfatplayer.hello.Work> {
  public void write(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Work) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, com.bigfatplayer.hello.Work) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  com.bigfatplayer.hello.Work$WorkTupleScheme(com.bigfatplayer.hello.Work$1);
}
Compiled from "Work.java"
class com.bigfatplayer.hello.Work$WorkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public com.bigfatplayer.hello.Work$WorkTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  com.bigfatplayer.hello.Work$WorkTupleSchemeFactory(com.bigfatplayer.hello.Work$1);
}
Compiled from "Work.java"
public final class com.bigfatplayer.hello.Work$_Fields extends java.lang.Enum<com.bigfatplayer.hello.Work$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static final com.bigfatplayer.hello.Work$_Fields NUM1;
  public static final com.bigfatplayer.hello.Work$_Fields NUM2;
  public static final com.bigfatplayer.hello.Work$_Fields COMMENT;
  public static com.bigfatplayer.hello.Work$_Fields[] values();
  public static com.bigfatplayer.hello.Work$_Fields valueOf(java.lang.String);
  public static com.bigfatplayer.hello.Work$_Fields findByThriftId(int);
  public static com.bigfatplayer.hello.Work$_Fields findByThriftIdOrThrow(int);
  public static com.bigfatplayer.hello.Work$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
