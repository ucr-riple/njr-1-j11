Compiled from "EditModeGUI.java"
public class GUI.EditModeGUI {
  public GUI.EditModeGUI(modes.EditMode);
  public editmode.CommandAdd getCommand();
  public void hideFrame();
  public void launchFrame();
  static modes.EditMode access$000(GUI.EditModeGUI);
}
Compiled from "EditModeGUI.java"
public class GUI.EditModeGUI$ListenCloseWdw extends java.awt.event.WindowAdapter {
  final GUI.EditModeGUI this$0;
  public GUI.EditModeGUI$ListenCloseWdw(GUI.EditModeGUI);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "EditModeGUI.java"
public class GUI.EditModeGUI$ListenMenuAddEnviroment implements java.awt.event.ActionListener {
  final GUI.EditModeGUI this$0;
  public GUI.EditModeGUI$ListenMenuAddEnviroment(GUI.EditModeGUI, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EditModeGUI.java"
public class GUI.EditModeGUI$ListenMenuAddFactory implements java.awt.event.ActionListener {
  final GUI.EditModeGUI this$0;
  public GUI.EditModeGUI$ListenMenuAddFactory(GUI.EditModeGUI, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EditModeGUI.java"
public class GUI.EditModeGUI$ListenMenuAddUnit implements java.awt.event.ActionListener {
  final GUI.EditModeGUI this$0;
  public GUI.EditModeGUI$ListenMenuAddUnit(GUI.EditModeGUI, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EditModeGUI.java"
public class GUI.EditModeGUI$ListenMenuExit implements java.awt.event.ActionListener {
  final GUI.EditModeGUI this$0;
  public GUI.EditModeGUI$ListenMenuExit(GUI.EditModeGUI);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EditModeGUI.java"
public class GUI.EditModeGUI$ListenMenuGuide implements java.awt.event.ActionListener {
  final GUI.EditModeGUI this$0;
  public GUI.EditModeGUI$ListenMenuGuide(GUI.EditModeGUI);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EditModeGUI.java"
public class GUI.EditModeGUI$ListenMenuLevel implements java.awt.event.ActionListener {
  final GUI.EditModeGUI this$0;
  public GUI.EditModeGUI$ListenMenuLevel(GUI.EditModeGUI, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Achievement.java"
public abstract class achievement.Achievement<T extends attribute.Attribute> implements java.io.Serializable {
  public static final java.lang.String ACHIEVEMENT_TAG;
  public static final java.lang.String NO_ACHIEVEMENT_MESSAGE;
  public achievement.Achievement();
  public void notifyAchievement(achiever.Achiever, T);
  public boolean handleObservable(T);
  public abstract boolean satisfiesConditions();
  public T getObservable();
  public void notifyObservers(achiever.Achiever);
  abstract void notifyObserver(observers.GameObserver, achiever.Achiever);
  public void attachObserver(observers.GameObserver);
  public void removeObserver(observers.GameObserver);
  public void setAchievementMessage(java.lang.String);
  public java.lang.String getAchievementMessage();
  abstract java.lang.String createAchievementMessage(achiever.Achiever);
}
Compiled from "AchievementDeathEffectsMap.java"
public class achievement.AchievementDeathEffectsMap extends achievement.Achievement {
  public static achievement.AchievementDeathEffectsMap getAchievement();
  public boolean satisfiesConditions();
  void notifyObserver(observers.GameObserver, achiever.Achiever);
  java.lang.String createAchievementMessage(achiever.Achiever);
  static {};
}
Compiled from "AchievementKill.java"
public class achievement.AchievementKill extends achievement.Achievement<attribute.AttributeKills> {
  public static final java.lang.String KILL_ACHIEVEMENT_BEGINNING_MESSAGE;
  public static achievement.AchievementKill getAchievement();
  public boolean satisfiesConditions();
  public void notifyObserver(observers.GameObserver, achiever.Achiever);
  java.lang.String createAchievementMessage(achiever.Achiever);
  static {};
}
Compiled from "AchievementLevelUp.java"
public class achievement.AchievementLevelUp extends achievement.Achievement<attribute.AttributeExperience> {
  public static final java.lang.String LEVEL_UP_MESSAGE;
  public static achievement.AchievementLevelUp getAchievement();
  public boolean satisfiesConditions();
  void notifyObserver(observers.GameObserver, achiever.Achiever);
  java.lang.String createAchievementMessage(achiever.Achiever);
  static {};
}
Compiled from "AchievementLose.java"
public class achievement.AchievementLose extends achievement.Achievement<attribute.AttributeUnitGroup> {
  public static final java.lang.String END_GAME_MESSAGE;
  public static achievement.AchievementLose getAchievement();
  public static void setGameMode(modes.GameMode);
  public boolean satisfiesConditions();
  void notifyObserver(observers.GameObserver, achiever.Achiever);
  java.lang.String createAchievementMessage(achiever.Achiever);
  static {};
}
Compiled from "AchievementTime.java"
public class achievement.AchievementTime extends achievement.Achievement {
  public static final java.lang.String TIME_ACHIEVEMENT_MESSAGE;
  public static achievement.AchievementTime getAchievement();
  public boolean satisfiesConditions();
  public void notifyObserver(observers.GameObserver, achiever.Achiever);
  public static void checkPlayTime(long);
  java.lang.String createAchievementMessage(achiever.Achiever);
  static {};
}
Compiled from "AchievementUnlockUnit.java"
public class achievement.AchievementUnlockUnit<A extends achiever.Achiever> extends achievement.Achievement<attribute.AttributeLevel> {
  public static java.lang.String NO_MORE_UNLOCKABLES_MESSAGE;
  public static final java.lang.String UNLOCK_UNIT_ACHIEVEMENT_BEGINNING_MESSAGE;
  public static achievement.AchievementUnlockUnit getAchievement();
  public void addUnlockableUnit(int, units.Unit);
  public void notifyObserver(observers.GameObserver, achiever.Achiever);
  public boolean satisfiesConditions();
  public void setNextUnlockable();
  java.lang.String createAchievementMessage(achiever.Achiever);
  static {};
}
Compiled from "Achiever.java"
public interface achiever.Achiever extends achiever.upgrades.AchieverUpgradable {
  public abstract attribute.Attribute getAttribute(java.lang.String);
  public abstract void addAttribute(attribute.Attribute);
  public abstract void removeAttribute(attribute.Attribute);
}
Compiled from "AchieverAddUnitModification.java"
public class achiever.upgrades.AchieverAddUnitModification extends achiever.upgrades.AchieverAttributeModification<attribute.AttributeUnitGroup, units.Unit> {
  public achiever.upgrades.AchieverAddUnitModification(achiever.upgrades.AchieverUpgradable, units.Unit);
  public void changeUnit(units.Unit);
}
Compiled from "AchieverAttributeModification.java"
public abstract class achiever.upgrades.AchieverAttributeModification<T extends attribute.Attribute, E> extends achiever.upgrades.AchieverDecorator<E> {
  public achiever.upgrades.AchieverAttributeModification(achiever.upgrades.AchieverUpgradable, E, java.lang.String);
  public T getAttribute();
  public void setAttribute(T);
  public void modify();
}
Compiled from "AchieverDecorator.java"
public abstract class achiever.upgrades.AchieverDecorator<T> implements achiever.upgrades.AchieverUpgradable {
  public achiever.upgrades.AchieverDecorator(achiever.upgrades.AchieverUpgradable, T);
  public abstract void modify();
  public achiever.upgrades.AchieverUpgradable getDecoratedAchiever();
  public void setDecoratedPlayer(achiever.upgrades.AchieverUpgradable);
  public attribute.Attribute getAttribute(java.lang.String);
  public T getData();
  public void setData(T);
}
Compiled from "AchieverExperienceModification.java"
public class achiever.upgrades.AchieverExperienceModification extends achiever.upgrades.AchieverAttributeModification<attribute.AttributeExperience, java.lang.Integer> {
  public achiever.upgrades.AchieverExperienceModification(achiever.upgrades.AchieverUpgradable, java.lang.Integer);
}
Compiled from "AchieverLevelModification.java"
public class achiever.upgrades.AchieverLevelModification extends achiever.upgrades.AchieverAttributeModification<attribute.AttributeLevel, java.lang.Integer> {
  public achiever.upgrades.AchieverLevelModification(achiever.upgrades.AchieverUpgradable, java.lang.Integer);
}
Compiled from "AchieverUnlockUnitModification.java"
public class achiever.upgrades.AchieverUnlockUnitModification extends achiever.upgrades.AchieverAttributeModification<attribute.AttributeUnitTypes, units.Unit> {
  public achiever.upgrades.AchieverUnlockUnitModification(achiever.upgrades.AchieverUpgradable, units.Unit);
  public void modify();
}
Compiled from "AchieverUpgradable.java"
public interface achiever.upgrades.AchieverUpgradable extends units.upgrades.Upgradable {
  public abstract attribute.Attribute getAttribute(java.lang.String);
}
Compiled from "Bot.java"
public class ai.Bot extends player.Player {
  ai.StrategyAI strategy;
  ai.state.AIstateController myStateController;
  modes.models.GameModel myModel;
  public ai.Bot(java.lang.String);
  public void setGameModel(modes.models.GameModel);
  public java.lang.String getType();
  public void setStrategy(ai.StrategyAI);
  public void completeTurn(map.LevelMap, modes.models.GameModel);
  public ai.StrategyAI getStrategy();
  public void setControllerBotState();
  public void doMove(units.Unit, units.interactions.Interaction);
}
Compiled from "DumbStrategyAI.java"
public class ai.DumbStrategyAI implements ai.StrategyAI {
  units.interactions.UnitButtonMove interactMove;
  public ai.DumbStrategyAI();
  public void completeTurn(map.LevelMap, ai.Bot, modes.models.GameModel);
  public int analyzeTurn(units.Unit, units.interactions.Interaction);
}
Compiled from "HumanPlayer.java"
public class ai.HumanPlayer extends player.Player {
  public ai.HumanPlayer(java.lang.String);
  public java.lang.String getType();
}
Compiled from "SlightlySmarterAI.java"
public class ai.SlightlySmarterAI implements ai.StrategyAI {
  public ai.SlightlySmarterAI();
  public void completeTurn(map.LevelMap, ai.Bot, modes.models.GameModel);
  public int analyzeTurn(units.Unit, units.interactions.Interaction);
}
Compiled from "StrategyAI.java"
public interface ai.StrategyAI extends java.io.Serializable {
  public abstract void completeTurn(map.LevelMap, ai.Bot, modes.models.GameModel);
  public abstract int analyzeTurn(units.Unit, units.interactions.Interaction);
}
Compiled from "AIstate.java"
public abstract class ai.state.AIstate {
  public ai.state.AIstate();
  public void doMove(modes.models.GameModel);
  public abstract java.lang.String getNextStateMovesComplete();
  public abstract java.util.ArrayList<units.interactions.Interaction> getValidMoves();
  public abstract boolean containsLegalNextStates(java.lang.String);
  public int getMovesLeft(modes.models.GameModel);
}
Compiled from "AIstateController.java"
public class ai.state.AIstateController {
  public ai.state.AIstateController();
  public void initalizeController(java.lang.String, modes.models.GameModel);
  public static void setState(java.lang.String);
  public static void sendInteraction(units.Unit);
  public static void sendCurrentPlayerUpdate(player.Player);
}
Compiled from "BotReactionState.java"
public class ai.state.BotReactionState extends ai.state.AIstate {
  java.util.ArrayList<java.lang.String> legalNextStates;
  java.util.ArrayList<units.interactions.Interaction> validMoves;
  public ai.state.BotReactionState();
  public java.util.ArrayList<units.interactions.Interaction> getValidMoves();
  public boolean containsLegalNextStates(java.lang.String);
  public java.lang.String getNextStateMovesComplete();
}
Compiled from "BotTurnState.java"
public class ai.state.BotTurnState extends ai.state.AIstate {
  java.util.ArrayList<java.lang.String> legalNextStates;
  java.util.ArrayList<units.interactions.Interaction> validMoves;
  public ai.state.BotTurnState();
  public java.util.ArrayList<units.interactions.Interaction> getValidMoves();
  public boolean containsLegalNextStates(java.lang.String);
  public java.lang.String getNextStateMovesComplete();
}
Compiled from "HumanReactionState.java"
public class ai.state.HumanReactionState extends ai.state.AIstate {
  java.util.ArrayList<java.lang.String> legalNextStates;
  java.util.ArrayList<units.interactions.Interaction> validMoves;
  public ai.state.HumanReactionState();
  public java.util.ArrayList<units.interactions.Interaction> getValidMoves();
  public boolean containsLegalNextStates(java.lang.String);
  public java.lang.String getNextStateMovesComplete();
}
Compiled from "HumanTurnState.java"
public class ai.state.HumanTurnState extends ai.state.AIstate {
  java.util.ArrayList<java.lang.String> legalNextStates;
  java.util.ArrayList<units.interactions.Interaction> validMoves;
  public ai.state.HumanTurnState();
  public java.util.ArrayList<units.interactions.Interaction> getValidMoves();
  public boolean containsLegalNextStates(java.lang.String);
  public java.lang.String getNextStateMovesComplete();
}
Compiled from "AchievementList.java"
public class attribute.AchievementList extends attribute.Attribute<java.util.ArrayList<java.lang.String>, java.lang.String> {
  public attribute.AchievementList(achiever.Achiever);
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.String);
  public void refresh();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "Attribute.java"
public abstract class attribute.Attribute<T, E> implements java.io.Serializable, attribute.AttributeConstants {
  public attribute.Attribute(achiever.Achiever);
  public void attachAchievement(achievement.Achievement);
  public void removeAchievement(achievement.Achievement);
  public abstract java.lang.String name();
  public void augmentData(E);
  public abstract void augmentDataTemplate(E);
  public void notifyAchievements();
  public void setData(T);
  public T getData();
  public achiever.Achiever getOwner();
  public abstract void refresh();
}
Compiled from "AttributeAchievementList.java"
public class attribute.AttributeAchievementList extends attribute.Attribute<java.util.ArrayList<java.lang.String>, java.lang.String> {
  public attribute.AttributeAchievementList(achiever.Achiever);
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.String);
  public void refresh();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeAlive.java"
public class attribute.AttributeAlive extends attribute.Attribute<java.lang.Boolean, java.lang.Boolean> {
  public attribute.AttributeAlive(achiever.Achiever);
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Boolean);
  public void refresh();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeAttack.java"
public class attribute.AttributeAttack extends attribute.Attribute<java.lang.Integer, java.lang.Integer> {
  protected int baseAttackDamage;
  protected int attackRange;
  protected int attacksLeft;
  protected int maxAttacks;
  public attribute.AttributeAttack(units.Unit, int, int, int);
  public int getAttackDamage();
  public int getAttackRange();
  public int getMaxAttacks();
  public int getAttacksLeft();
  public void setAttacksLeft(int);
  public void setMaxAttacks(int);
  public void setAttackDamage(int);
  public void decrementAttacksLeft(int);
  public void setAttackRange(int);
  public void refresh();
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Integer);
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeAvailableActions.java"
public class attribute.AttributeAvailableActions extends attribute.Attribute<java.util.HashMap<java.lang.String, java.lang.Boolean>, java.lang.String> {
  public attribute.AttributeAvailableActions(achiever.Achiever);
  public void refresh();
  public void usedAttribute(java.lang.String);
  public void cycleAttributes();
  public boolean isAttributeUsed(java.lang.String);
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.String);
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeConstants.java"
public interface attribute.AttributeConstants {
  public static final java.lang.String MOVES;
  public static final java.lang.String ATTACK;
  public static final java.lang.String UNIT_GROUP;
  public static final java.lang.String UNITS;
  public static final java.lang.String EXPERIENCE;
  public static final java.lang.String LEVEL;
  public static final java.lang.String KILLS;
  public static final java.lang.String ACHIEVEMENTS;
  public static final java.lang.String TURN;
  public static final java.lang.String MAP_MODIFIABLE;
  public static final java.lang.String DEATH_EFFECT;
  public static final java.lang.String AVAILABLE_ACTIONS;
  public static final java.lang.String INCORRECT_ATTRIBUTE_ERROR;
}
Compiled from "AttributeDeathEffect.java"
public class attribute.AttributeDeathEffect extends attribute.AttributeAlive {
  public attribute.AttributeDeathEffect(achiever.Achiever);
  public java.lang.String name();
}
Compiled from "AttributeExperience.java"
public class attribute.AttributeExperience extends attribute.Attribute<java.lang.Integer, java.lang.Integer> {
  public attribute.AttributeExperience(achiever.Achiever);
  public attribute.AttributeExperience(achiever.Achiever, int);
  public java.lang.String name();
  public int giveDeathExperience();
  public void augmentDataTemplate(java.lang.Integer);
  public void refresh();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeHealth.java"
public class attribute.AttributeHealth extends attribute.Attribute<java.lang.Integer, java.lang.Integer> {
  public attribute.AttributeHealth(units.Unit, int);
  public int getHP();
  public void decrementHP(int);
  public void setHP(int);
  public void increaseHP(int);
  public void refresh();
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Integer);
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeImage.java"
public class attribute.AttributeImage extends attribute.Attribute<serialization.SBufferedImage, serialization.SBufferedImage> {
  protected serialization.SBufferedImage myImage;
  protected units.Unit myUnit;
  public attribute.AttributeImage(units.Unit, java.lang.String);
  public void setNewImage(serialization.SBufferedImage);
  public void refresh();
  public java.lang.String name();
  public void augmentDataTemplate(serialization.SBufferedImage);
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeKills.java"
public class attribute.AttributeKills extends attribute.Attribute<java.util.ArrayList<units.Unit>, units.Unit> {
  public attribute.AttributeKills(achiever.Achiever);
  public java.lang.String name();
  public int getKillCount();
  public java.util.Stack<units.Unit> getRecentKilledUnits();
  public void augmentDataTemplate(units.Unit);
  public void refresh();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeLevel.java"
public class attribute.AttributeLevel extends attribute.Attribute<java.lang.Integer, java.lang.Integer> {
  public attribute.AttributeLevel(achiever.Achiever);
  public attribute.AttributeLevel(achiever.Achiever, int);
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Integer);
  public void refresh();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeList.java"
public class attribute.AttributeList<T extends attribute.Attribute> implements java.lang.Iterable<T>, java.io.Serializable {
  public static final java.lang.String NO_SUCH_ATTRIBUTE_MESSAGE;
  public attribute.AttributeList();
  public void add(T);
  public void remove(T);
  public T get(java.lang.String);
  public boolean hasAttribute(java.lang.String);
  public java.util.Iterator<T> iterator();
  static java.util.ArrayList access$000(attribute.AttributeList);
  static java.util.ArrayList access$100(attribute.AttributeList);
}
Compiled from "AttributeList.java"
class attribute.AttributeList$AttributeListIterator implements java.util.Iterator {
  java.util.ArrayList<java.lang.String> names;
  java.util.ArrayList<T> attributes;
  final attribute.AttributeList this$0;
  public attribute.AttributeList$AttributeListIterator(attribute.AttributeList, attribute.AttributeList);
  public boolean hasNext();
  public T next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "AttributeMapModifiable.java"
public class attribute.AttributeMapModifiable extends attribute.Attribute<java.lang.Boolean, java.lang.Boolean> {
  public attribute.AttributeMapModifiable(achiever.Achiever);
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Boolean);
  public void refresh();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeMove.java"
public class attribute.AttributeMove extends attribute.Attribute<java.lang.Integer, java.lang.Integer> {
  public int maxMoves;
  public int movesLeft;
  public attribute.AttributeMove(units.Unit, int);
  public void setMaxMoves(int);
  public int getMovesLeft();
  public int getMaxMoves();
  public void decrementMoveCount(int);
  public void refresh();
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Integer);
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeProduction.java"
public class attribute.AttributeProduction extends attribute.Attribute<java.lang.Integer, java.lang.Integer> {
  protected int productionRange;
  public attribute.AttributeProduction(units.Unit);
  public attribute.AttributeProduction(units.Unit, int);
  public int getProductionRange();
  public void refresh();
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Integer);
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeReactable.java"
public class attribute.AttributeReactable extends attribute.Attribute {
  public attribute.AttributeReactable(units.Unit, java.util.Map<environment.Environment, units.reactions.Reaction>, java.util.Map<environment.Environment, java.lang.Boolean>);
  public attribute.AttributeReactable(units.Unit);
  public boolean isValidMove(units.Unit, environment.Environment);
  public void reactToEnvironment(units.Unit, environment.Environment);
  public void refresh();
  public void setReaction(environment.Environment, units.reactions.Reaction);
  public void setMap(java.util.Map<environment.Environment, units.reactions.Reaction>);
  public void setMoves(java.util.Map<environment.Environment, java.lang.Boolean>);
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeTurn.java"
public class attribute.AttributeTurn extends attribute.Attribute<java.lang.Integer, java.lang.Integer> {
  public attribute.AttributeTurn(achiever.Achiever);
  public void refresh();
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Integer);
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeUnitGroup.java"
public class attribute.AttributeUnitGroup extends attribute.Attribute<java.util.ArrayList<units.Unit>, units.Unit> {
  public attribute.AttributeUnitGroup(player.Player);
  public void addNewUnitType(units.Unit);
  public java.lang.String name();
  public int getUnitGroupSize();
  public void refreshAttributesAndInteractions();
  public void remove(units.Unit);
  public void augmentDataTemplate(units.Unit);
  public void refresh();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "AttributeUnitTypes.java"
public class attribute.AttributeUnitTypes extends attribute.Attribute<java.util.HashMap<java.lang.String, units.Unit>, units.Unit> {
  public static final units.Unit DEFAULT_UNIT;
  public attribute.AttributeUnitTypes(player.Player);
  public java.lang.String name();
  public units.Unit createUnit(java.lang.String) throws java.lang.InstantiationException, java.lang.IllegalAccessException;
  public void augmentDataTemplate(units.Unit);
  public void refresh();
  public void augmentDataTemplate(java.lang.Object);
  static {};
}
Compiled from "AttributeUpgrades.java"
public class attribute.AttributeUpgrades extends attribute.Attribute {
  public attribute.AttributeUpgrades(units.Unit);
  public void refresh();
  public units.upgrades.UpgradeTree getMyTree();
  public void setMyTree(units.upgrades.UpgradeTree);
  public java.lang.String name();
  public void augmentDataTemplate(java.lang.Object);
}
Compiled from "CommandAdd.java"
public class editmode.CommandAdd extends editmode.EditModeCommand {
  public editmode.CommandAdd(java.lang.Double, java.lang.Double);
  public void getunit();
  public java.lang.String CommandName();
  public void processunit(java.lang.String);
  public void processenvironment(java.lang.String);
  public void performCommand(modes.EditMode$GameState, modes.EditMode);
  public modes.EditMode$Type getType();
}
Compiled from "CommandDelete.java"
public class editmode.CommandDelete extends editmode.EditModeCommand {
  public editmode.CommandDelete(double, double);
  public java.lang.String CommandName();
  public void performCommand(modes.EditMode$GameState, modes.EditMode);
}
Compiled from "CommandLoad.java"
public class editmode.CommandLoad extends editmode.EditModeCommand {
  public editmode.CommandLoad(double, double);
  public void performCommand(modes.EditMode$GameState, modes.EditMode);
  public java.lang.String CommandName();
  public serialization.MapElement getMap();
  public void load();
}
Compiled from "CommandPlayer1Select.java"
public class editmode.CommandPlayer1Select extends editmode.EditModeCommand {
  public editmode.CommandPlayer1Select(double, double);
  public java.lang.String CommandName();
  public void performCommand(modes.EditMode$GameState, modes.EditMode);
}
Compiled from "CommandPlayer2Select.java"
public class editmode.CommandPlayer2Select extends editmode.EditModeCommand {
  public editmode.CommandPlayer2Select(double, double);
  public java.lang.String CommandName();
  public void performCommand(modes.EditMode$GameState, modes.EditMode);
}
Compiled from "CommandSave.java"
public class editmode.CommandSave extends editmode.EditModeCommand {
  public editmode.CommandSave(double, double);
  public java.lang.String CommandName();
  public void performCommand(modes.EditMode$GameState, modes.EditMode);
  public void savemap();
  public void savegame();
}
Compiled from "EditCommandGroup.java"
public class editmode.EditCommandGroup extends com.golden.gamedev.object.SpriteGroup {
  public editmode.EditCommandGroup(java.lang.String);
  public void add(editmode.EditModeCommand);
  public void remove(editmode.EditModeCommand);
  public editmode.EditModeCommand get(java.lang.String);
  public java.util.ArrayList<editmode.EditModeCommand> getButtons();
  public void render(java.awt.Graphics2D);
}
Compiled from "EditModeCommand.java"
public abstract class editmode.EditModeCommand extends com.golden.gamedev.object.Sprite {
  protected static map.LevelMap map;
  public editmode.EditModeCommand(double, double);
  public editmode.EditModeCommand();
  public abstract java.lang.String CommandName();
  public abstract void performCommand(modes.EditMode$GameState, modes.EditMode);
  public void setImage();
  public java.awt.image.BufferedImage getBufferedImage(java.lang.String);
  public boolean wasClicked(int, int);
  protected void setImageFilepath(java.lang.String);
  protected void setClickedImageFilepath(java.lang.String);
  public void setClickedButtonImage();
  public void setUnclickedButtonImage();
  public void setImage(java.awt.image.BufferedImage);
}
Compiled from "Environment.java"
public abstract class environment.Environment extends com.golden.gamedev.object.Sprite implements java.io.Serializable {
  protected int myDimX;
  protected int myDimY;
  protected double myRatio;
  public environment.Environment(double);
  public environment.Environment();
  public abstract java.lang.String Name();
  public abstract java.lang.String getImageURL();
  public abstract boolean isActive(int);
  public int getDimX();
  public int getDimY();
  public void resize(int, int);
}
Compiled from "Mountain.java"
public class environment.Mountain extends environment.Permanent {
  public environment.Mountain(double);
  public java.lang.String Name();
  public java.lang.String getImageURL();
}
Compiled from "Permanent.java"
public abstract class environment.Permanent extends environment.Environment implements java.io.Serializable {
  public environment.Permanent(double);
  public boolean isActive(int);
}
Compiled from "PoisonGas.java"
public class environment.PoisonGas extends environment.Transient {
  public environment.PoisonGas(double, int, int);
  public java.lang.String Name();
  public java.lang.String getImageURL();
}
Compiled from "Portal.java"
public class environment.Portal extends environment.Permanent {
  public environment.Portal(double);
  public java.lang.String Name();
  public java.lang.String getImageURL();
  public boolean isActive(int);
}
Compiled from "Snow.java"
public class environment.Snow extends environment.Transient {
  public environment.Snow(double, int, int);
  public java.lang.String Name();
  public boolean isActive(int);
  public java.lang.String getImageURL();
}
Compiled from "Transient.java"
public abstract class environment.Transient extends environment.Environment implements achiever.Achiever,java.io.Serializable {
  protected int myStartTurn;
  protected int myEndTurn;
  attribute.AttributeTurn turns;
  public environment.Transient(double, int, int);
  public boolean isActive(int);
  public attribute.Attribute getAttribute(java.lang.String);
  public void modify();
  public void addAttribute(attribute.Attribute);
  public void removeAttribute(attribute.Attribute);
}
Compiled from "TBComponent.java"
public interface frame.TBComponent extends java.io.Serializable {
  public abstract void setLocation(int, int);
  public abstract int getHeight();
  public abstract int getWidth();
  public abstract int getXLocation();
  public abstract int getYLocation();
  public abstract void render(java.awt.Graphics2D);
  public abstract void resize(int, int);
}
Compiled from "TBPanel.java"
public class frame.TBPanel implements frame.TBComponent {
  public frame.TBPanel(int, int, int, int);
  public void add(frame.TBComponent);
  public void add(frame.TBComponent, java.lang.String);
  public void remove(frame.TBComponent);
  public void render(java.awt.Graphics2D);
  public void setLayout(frame.layout.Layout);
  public void setLocation(int, int);
  public int getHeight();
  public int getWidth();
  public int getXLocation();
  public int getYLocation();
  public void resize(int, int);
}
Compiled from "TBBackground.java"
public class frame.background.TBBackground extends com.golden.gamedev.object.Sprite implements java.io.Serializable {
  public frame.background.TBBackground(java.awt.image.BufferedImage);
  public void resize(int, int);
  public void render(java.awt.Graphics2D);
  public void render(java.awt.Graphics2D, int, int);
}
Compiled from "BlankDisplay.java"
public class frame.display.BlankDisplay extends frame.display.Display {
  public frame.display.BlankDisplay(int, int, int, int, java.lang.String);
  public void render(java.awt.Graphics2D);
}
Compiled from "CommandDisplay.java"
public class frame.display.CommandDisplay extends frame.display.Display {
  public frame.display.CommandDisplay(java.awt.image.BufferedImage, int, int);
  public frame.display.CommandDisplay(java.awt.image.BufferedImage, int, int, int, int);
  public void render(java.awt.Graphics2D);
}
Compiled from "Display.java"
public abstract class frame.display.Display implements frame.TBComponent {
  public frame.background.TBBackground myBackground;
  public frame.display.Display();
  public frame.display.Display(frame.background.TBBackground);
  public frame.display.Display(java.awt.image.BufferedImage);
  public frame.display.Display(int, int);
  public abstract void render(java.awt.Graphics2D);
  public void setLocation(int, int);
  public int getXLocation();
  public int getYLocation();
  public void loadFont();
  public boolean isVisible();
  public void setVisible(boolean);
  public int getWidth();
  public int getHeight();
  public com.golden.gamedev.object.GameFont getFont();
  public void setSize(int, int);
  public void resize(int, int);
}
Compiled from "PlayerDisplay.java"
public class frame.display.PlayerDisplay extends frame.display.Display {
  public frame.display.PlayerDisplay(java.awt.image.BufferedImage, int, int);
  public frame.display.PlayerDisplay(player.Player, java.awt.image.BufferedImage, int, int, int, int);
  public void render(java.awt.Graphics2D);
}
Compiled from "UnitDisplay.java"
public class frame.display.UnitDisplay extends frame.display.Display {
  public frame.display.UnitDisplay(java.awt.image.BufferedImage, int, int);
  public frame.display.UnitDisplay(java.awt.image.BufferedImage, int, int, int, int);
  public void render(java.awt.Graphics2D);
}
Compiled from "VictoryDisplay.java"
public class frame.display.VictoryDisplay extends frame.display.Display {
  public frame.display.VictoryDisplay(java.awt.image.BufferedImage, int, int);
  public frame.display.VictoryDisplay(java.awt.image.BufferedImage, int, int, int, int);
  public void render(java.awt.Graphics2D);
}
Compiled from "Layout.java"
public abstract class frame.layout.Layout implements java.io.Serializable {
  public frame.layout.Layout();
  public void add(frame.TBComponent, java.lang.String);
  public void remove(frame.TBComponent);
  public boolean isEmpty();
  public void setLocation(int, int);
  public void setLoc(int, int);
  public void setSize(int, int);
  public void setDim(int, int);
  public java.util.Map getMap();
  public int getXLoc();
  public int getYLoc();
  public int getXDim();
  public int getYDim();
  public abstract void update();
  public abstract void initialize();
  public abstract void updateContainers();
}
Compiled from "LeftRightLayout.java"
public class frame.layout.LeftRightLayout extends frame.layout.Layout {
  public java.util.HashMap<java.lang.String, frame.layout.container.LayoutContainer> containers;
  public frame.layout.LeftRightLayout();
  public void update();
  public void initialize();
  public void updateContainers();
}
Compiled from "TopDownLayout.java"
public class frame.layout.TopDownLayout extends frame.layout.Layout {
  public java.util.HashMap<java.lang.String, frame.layout.container.LayoutContainer> containers;
  public frame.layout.TopDownLayout();
  public void update();
  public void initialize();
  public void updateContainers();
}
Compiled from "LayoutContainer.java"
public abstract class frame.layout.container.LayoutContainer implements java.io.Serializable {
  public frame.layout.container.LayoutContainer(int, int, int, int);
  public void add(frame.TBComponent);
  public void addAll(java.util.ArrayList<frame.TBComponent>);
  public void remove(frame.TBComponent);
  public void setLocation(int, int);
  public void setLoc(int, int);
  public void setSize(int, int);
  public void setDim(int, int);
  public int getXLoc();
  public int getYLoc();
  public int getXDim();
  public int getYDim();
  public java.util.ArrayList<frame.TBComponent> getComponents();
  public abstract void update();
}
Compiled from "VerticalLayoutContainer.java"
public class frame.layout.container.VerticalLayoutContainer extends frame.layout.container.LayoutContainer {
  public frame.layout.container.VerticalLayoutContainer(int, int, int, int);
  public void update();
}
Compiled from "AttackCommandEvent.java"
public class input.AttackCommandEvent extends input.CommandSelectEvents {
  public input.AttackCommandEvent(modes.TBGameMode, int);
  protected java.lang.String getCommandName();
}
Compiled from "CommandSelectEvents.java"
public abstract class input.CommandSelectEvents extends input.UserEvents {
  public input.CommandSelectEvents(modes.TBGameMode, int);
  protected abstract java.lang.String getCommandName();
  public void performEvent(int, int);
}
Compiled from "CyclePlayerEvent.java"
public class input.CyclePlayerEvent extends input.UserEvents {
  public input.CyclePlayerEvent(modes.TBGameMode, int);
  public void performEvent(int, int);
}
Compiled from "DeselectEvents.java"
public abstract class input.DeselectEvents extends input.UserEvents {
  public input.DeselectEvents(modes.TBGameMode, int);
  public void performEvent(int, int);
}
Compiled from "EvolveCommandEvent.java"
public class input.EvolveCommandEvent extends input.CommandSelectEvents {
  public input.EvolveCommandEvent(modes.TBGameMode, int);
  protected java.lang.String getCommandName();
}
Compiled from "InputEngine.java"
public class input.InputEngine extends input.TBInputEngine {
  public input.InputEngine(com.golden.gamedev.engine.BaseInput, modes.GameMode);
  public void createDefaultKeyBindingsMap(java.util.HashMap<java.lang.String, java.lang.Integer>);
  public java.lang.String getFileName();
  public int getFileCheckTime();
}
Compiled from "KeyDeselectEvent.java"
public class input.KeyDeselectEvent extends input.DeselectEvents {
  public input.KeyDeselectEvent(modes.TBGameMode, int);
}
Compiled from "KeySelectEvent.java"
public class input.KeySelectEvent extends input.SelectEvents {
  public input.KeySelectEvent(modes.TBGameMode, int);
}
Compiled from "MouseDeselectEvent.java"
public class input.MouseDeselectEvent extends input.DeselectEvents {
  public input.MouseDeselectEvent(modes.TBGameMode, int);
}
Compiled from "MouseHoverEvent.java"
public class input.MouseHoverEvent extends input.MoveEvents {
  public input.MouseHoverEvent(modes.TBGameMode, int);
  protected int getDx(int);
  protected int getDy(int);
}
Compiled from "MouseSelectEvent.java"
public class input.MouseSelectEvent extends input.SelectEvents {
  public input.MouseSelectEvent(modes.TBGameMode, int);
  protected int getXdx(int);
  protected int getYdx(int);
  protected boolean isNotInBounds(int, int);
}
Compiled from "MoveCommandEvent.java"
public class input.MoveCommandEvent extends input.CommandSelectEvents {
  public input.MoveCommandEvent(modes.TBGameMode, int);
  protected java.lang.String getCommandName();
}
Compiled from "MoveDownEvent.java"
public class input.MoveDownEvent extends input.MoveEvents {
  public input.MoveDownEvent(modes.TBGameMode, int);
  protected int getDx(int);
  protected int getDy(int);
}
Compiled from "MoveEvents.java"
public abstract class input.MoveEvents extends input.UserEvents {
  public input.MoveEvents(modes.TBGameMode, int);
  protected abstract int getDx(int);
  protected abstract int getDy(int);
  public void performEvent(int, int);
}
Compiled from "MoveLeftEvent.java"
public class input.MoveLeftEvent extends input.MoveEvents {
  public input.MoveLeftEvent(modes.TBGameMode, int);
  protected int getDx(int);
  protected int getDy(int);
}
Compiled from "MoveRightEvent.java"
public class input.MoveRightEvent extends input.MoveEvents {
  public input.MoveRightEvent(modes.TBGameMode, int);
  protected int getDx(int);
  protected int getDy(int);
}
Compiled from "MoveUpEvent.java"
public class input.MoveUpEvent extends input.MoveEvents {
  public input.MoveUpEvent(modes.TBGameMode, int);
  protected int getDx(int);
  protected int getDy(int);
}
Compiled from "NovaCommandEvent.java"
public class input.NovaCommandEvent extends input.CommandSelectEvents {
  public input.NovaCommandEvent(modes.TBGameMode, int);
  protected java.lang.String getCommandName();
}
Compiled from "ProduceCommandEvent.java"
public class input.ProduceCommandEvent extends input.CommandSelectEvents {
  public input.ProduceCommandEvent(modes.TBGameMode, int);
  protected java.lang.String getCommandName();
}
Compiled from "SelectEvents.java"
public abstract class input.SelectEvents extends input.UserEvents {
  public input.SelectEvents(modes.TBGameMode, int);
  public void performEvent(int, int);
}
Compiled from "TBInputEngine.java"
public abstract class input.TBInputEngine {
  public input.TBInputEngine(com.golden.gamedev.engine.BaseInput, modes.TBGameMode);
  public abstract void createDefaultKeyBindingsMap(java.util.HashMap<java.lang.String, java.lang.Integer>);
  public abstract java.lang.String getFileName();
  public abstract int getFileCheckTime();
  protected void loadEvents(modes.TBGameMode);
  protected void loadKeyBindingsFromFile(modes.TBGameMode, java.io.File);
  public void update(long);
  public void setEventList(java.util.ArrayList<input.UserEvents>);
  public java.util.ArrayList<input.UserEvents> getEventList();
  public void setBsInput(com.golden.gamedev.engine.BaseInput);
  public com.golden.gamedev.engine.BaseInput getBsInput();
}
Compiled from "TBInputEngine.java"
class input.TBInputEngine$1 {
}
Compiled from "TBInputEngine.java"
class input.TBInputEngine$FileWatcher extends java.util.TimerTask {
  final input.TBInputEngine this$0;
  public final void run();
  input.TBInputEngine$FileWatcher(input.TBInputEngine, java.io.File, modes.TBGameMode, input.TBInputEngine$1);
}
Compiled from "UserEvents.java"
public abstract class input.UserEvents {
  public input.UserEvents(modes.TBGameMode, int);
  public boolean isLinkedToEvent(int);
  public abstract void performEvent(int, int);
  public java.lang.String toString();
  public int getKeyBinding();
  public map.LevelMap getMap();
  public modes.TBGameMode getGame();
  public void setKeyBinding(int);
}
Compiled from "LevelMap.java"
public class map.LevelMap implements frame.TBComponent,java.io.Serializable,achiever.Achiever {
  public static final int DEFAULT_TILE_SIZE;
  public map.LevelMap();
  public map.LevelMap(int);
  public map.LevelMap(int, int);
  public map.LevelMap(int, int, int);
  public map.LevelMap(int, int, int, int, int);
  public void calculateTileSize();
  public int getTileDimX();
  public int getTileDimY();
  public int getRowIndex(int);
  public int getColumnIndex(int);
  public map.Tile getTileByCoords(int, int);
  public map.Tile getTileByPixels(int, int);
  public void render(java.awt.Graphics2D);
  public java.util.ArrayList<map.Tile> getTilesList();
  public int getDimX();
  public int getDimY();
  public void unhighlightRange(int);
  public void unHighlightEverything();
  public void setLocation(int, int);
  public int getHeight();
  public int getWidth();
  public int getXLocation();
  public int getYLocation();
  public map.Tile[][] getTiles();
  public void setTiles(map.Tile[][]);
  public void clearTiles();
  public void resize(int, int);
  public void modify();
  public void addAchievementMessage(java.lang.String);
  public attribute.Attribute getAttribute(java.lang.String);
  public void addAttribute(attribute.Attribute);
  public void removeAttribute(attribute.Attribute);
  static {};
}
Compiled from "Tile.java"
public class map.Tile implements java.io.Serializable {
  public static final int ORIGINAL_BACKGROUND_RANK;
  public static final int CURRENT_PLAYER_OWNED_BACKGROUND_RANK;
  public static final int SELECTED_TILE_BACKGROUND_IMAGE_RANK;
  public static final int IN_RANGE_TILE_BACKGROUND_RANK;
  public static final int ATTACK_RANGE_TILE_BACKGROUND_RANK;
  public java.util.ArrayList<java.lang.Integer> getTileRankeList();
  public map.Tile(int, int);
  public units.Unit getUnit();
  public java.util.ArrayList<environment.Environment> getEnvironment();
  public void setUnit(units.upgrades.UnitUpgradable);
  public void setEnvironment(environment.Environment);
  public void removeUnit();
  public void removeEnviroment();
  public int getDistance(map.Tile);
  public int getTileCoordinateX();
  public int getTileCoordinateY();
  public int getTileDimX();
  public int getTileDimY();
  public void render(java.awt.Graphics2D);
  public boolean isWithinBoundary(int, environment.Environment);
  public void toggleRenderable();
  public boolean isRenderable();
  public void pushBackground(int);
  public void removeBackground(int);
  public void clearSelection();
  public void updateEnvironmentalEffects(units.Unit);
  public void clearUnitAndEnvironment();
  public void setLocation(int, int);
  public void resize(int, int);
  public java.lang.String toString();
  public void print();
  public int getHighestRank();
}
Compiled from "EditMode.java"
public class modes.EditMode extends com.golden.gamedev.GameObject implements java.io.Serializable {
  public modes.EditMode(com.golden.gamedev.GameEngine, serialization.MapElement);
  public modes.EditMode(com.golden.gamedev.GameEngine, serialization.GameElement);
  public void initResources();
  public void render(java.awt.Graphics2D);
  public void update(long);
  public void rendergame(serialization.GameElement);
  public void rendermap(serialization.MapElement);
  public static java.util.ArrayList<serialization.UnitElement> getUnitElements();
  public void setUnitElements(java.util.ArrayList<serialization.UnitElement>);
  public static java.util.ArrayList<serialization.EnvironmentElement> getEnvironmentElements();
  public void setEnvironmentElements(java.util.ArrayList<serialization.EnvironmentElement>);
  public static java.util.HashMap<java.lang.Integer, serialization.MapElement> getLevelMapping();
  public static modes.EditMode$GameState getState();
  public void setLevel(int);
  public static int getLevel();
  public static int getTotalLevels();
  public void setTotalLevels(int);
  public void exit();
  public modes.EditMode$UnitOwner getCurrOwner();
  public void setCurrOwner(modes.EditMode$UnitOwner);
  public void setGameState(modes.EditMode$GameState);
  public map.LevelMap getLevelMap();
  public void SetLevelMap(map.LevelMap);
  public java.lang.String getkey();
  public void setkey(java.lang.String);
  public modes.EditMode$Type getType();
  public void setType(modes.EditMode$Type);
  public map.Tile getClicked();
  public boolean wasclicked();
  public editmode.EditModeCommand getselectedButton();
  public void setselectedButton(editmode.EditModeCommand);
  public void saveCurrent();
  public void changelevel(int);
}
Compiled from "EditMode.java"
public final class modes.EditMode$GameState extends java.lang.Enum<modes.EditMode$GameState> {
  public static final modes.EditMode$GameState STANDBY;
  public static final modes.EditMode$GameState WAITING_FOR_DESTINATION;
  public static modes.EditMode$GameState[] values();
  public static modes.EditMode$GameState valueOf(java.lang.String);
  static {};
}
Compiled from "EditMode.java"
public final class modes.EditMode$Type extends java.lang.Enum<modes.EditMode$Type> {
  public static final modes.EditMode$Type UNIT;
  public static final modes.EditMode$Type ENVIRONMENT;
  public static final modes.EditMode$Type FACTORY;
  public static modes.EditMode$Type[] values();
  public static modes.EditMode$Type valueOf(java.lang.String);
  static {};
}
Compiled from "EditMode.java"
public final class modes.EditMode$UnitOwner extends java.lang.Enum<modes.EditMode$UnitOwner> {
  public static final modes.EditMode$UnitOwner PLAYER1;
  public static final modes.EditMode$UnitOwner PLAYER2;
  public static modes.EditMode$UnitOwner[] values();
  public static modes.EditMode$UnitOwner valueOf(java.lang.String);
  static {};
}
Compiled from "GameMode.java"
public class modes.GameMode extends modes.TBGameMode {
  public static final int STANDBY;
  public static final int SELECTED;
  public static final int WAITING_FOR_DESTINATION;
  public modes.GameMode(com.golden.gamedev.GameEngine);
  public modes.GameMode(com.golden.gamedev.GameEngine, java.io.File);
  public modes.GameMode(com.golden.gamedev.GameEngine, int, int);
  public modes.GameMode(com.golden.gamedev.GameEngine, java.io.File, int, int);
  protected void loadFile(java.io.File);
  public void initResources();
  protected void initializeModels();
  public void defaultInitialization();
  public void render(java.awt.Graphics2D);
  public void update(long);
  protected void loadUnits();
}
Compiled from "TBGame.java"
public class modes.TBGame extends com.golden.gamedev.GameEngine implements java.io.Serializable {
  public static java.util.HashMap<java.lang.String, units.Unit> UnitAddMap;
  public static java.util.HashMap<java.lang.String, environment.Environment> EnviromentAddMap;
  public static java.util.HashMap<java.lang.String, java.lang.Double> EnviromentSizeMap;
  public static final int TITLE_SCREEN;
  public static final int GAME_MODE;
  public static final int LOAD_GAME_MODE;
  public static final int EDIT_MODE;
  public modes.TBGame();
  public modes.TBGame(serialization.MapElement, int, int);
  public modes.TBGame(serialization.GameElement, int, int);
  public void initResources();
  public com.golden.gamedev.GameObject getGame(int);
  public static void main(java.lang.String[]);
}
Compiled from "TBGameMode.java"
public abstract class modes.TBGameMode extends com.golden.gamedev.GameObject {
  public modes.TBGameMode(com.golden.gamedev.GameEngine);
  public modes.TBGameMode(com.golden.gamedev.GameEngine, java.io.File);
  protected abstract void loadFile(java.io.File);
  public abstract void initResources();
  public abstract void render(java.awt.Graphics2D);
  public abstract void update(long);
  protected abstract void defaultInitialization();
  protected abstract void loadUnits();
  protected abstract void initializeModels();
  public void setButtonGroup(com.golden.gamedev.object.SpriteGroup);
  public com.golden.gamedev.object.SpriteGroup getButtonGroup();
  public void setEnvironmentGroup(com.golden.gamedev.object.SpriteGroup);
  public com.golden.gamedev.object.SpriteGroup getEnvironmentGroup();
  public void setPlayfield(com.golden.gamedev.object.PlayField);
  public com.golden.gamedev.object.PlayField getPlayfield();
  public void setBackground(com.golden.gamedev.object.Background);
  public com.golden.gamedev.object.Background getBackground();
  public void setModelMap(java.util.HashMap<java.lang.Integer, modes.models.GameModel>);
  public java.util.HashMap<java.lang.Integer, modes.models.GameModel> getModelMap();
  public void setPlayTime(long);
  public long getPlayTime();
  public void setyDim(int);
  public int getyDim();
  public void setxDim(int);
  public int getxDim();
  public static void setCurrState(int);
  public static int getCurrState();
  public void setFont(com.golden.gamedev.object.GameFont);
  public com.golden.gamedev.object.GameFont getFont();
  public void setPlayerList(java.util.ArrayList<player.Player>);
  public java.util.ArrayList<player.Player> getPlayerList();
  public static void setTileBackground(com.golden.gamedev.object.Background);
  public static com.golden.gamedev.object.Background getTileBackground();
  public void setInputEngine(input.TBInputEngine);
  public input.TBInputEngine getInputEngine();
  public void select(int, int);
  public void deselectAll();
  public void moveTile(int, int);
  public void selectCommand(java.lang.String);
  public void cycleTurn();
  public map.Tile getTile();
  public modes.models.GameModel getCurrentModel();
  public void nullCheck();
  public static void setMap(map.LevelMap);
  public static map.LevelMap getMap();
  public void stopGame();
  public boolean isGameRunning();
}
Compiled from "TitleScreen.java"
public class modes.TitleScreen extends com.golden.gamedev.GameObject {
  public modes.TitleScreen(com.golden.gamedev.GameEngine);
  public void initResources();
  public void update(long);
  public void render(java.awt.Graphics2D);
}
Compiled from "GameModel.java"
public abstract class modes.models.GameModel {
  public modes.models.GameModel(map.LevelMap);
  public abstract void select(int, int);
  public abstract map.Tile getTile();
  public abstract void moveTile(int, int);
  protected boolean isTileInBounds(int, int);
  protected void unhighlightPreviousTile();
  public void nullCheck();
  public void deselectAll();
  public void cycleTurn();
  public void highlightPlayerUnits();
  public void setSelectedUnit(units.Unit);
  public units.Unit getSelectedUnit();
  public void setSelectedTile(map.Tile);
  public map.Tile getSelectedTile();
  public void setSelectedDestination(map.Tile);
  public map.Tile getSelectedDestination();
  public void setSelectedButton(units.interactions.ButtonSprite);
  public units.interactions.ButtonSprite getSelectedButton();
  public void setSelectedAttribute(attribute.Attribute);
  public attribute.Attribute getSelectedAttribute();
  public void setButtonGroup(com.golden.gamedev.object.SpriteGroup);
  public com.golden.gamedev.object.SpriteGroup getButtonGroup();
  public void setPlayerList(java.util.ArrayList<player.Player>);
  public void setEnvironmentGroup(com.golden.gamedev.object.SpriteGroup);
  public java.util.ArrayList<player.Player> getPlayerList();
  public void setCurrentPlayer(player.Player);
  public player.Player getCurrentPlayer();
  public map.LevelMap getMap();
}
Compiled from "SelectedModel.java"
public class modes.models.SelectedModel extends modes.models.GameModel {
  public modes.models.SelectedModel(map.LevelMap);
  public void select(int, int);
  public map.Tile getTile();
  public void moveTile(int, int);
  public void selectCommand(java.lang.Object...);
}
Compiled from "StandbyModel.java"
public class modes.models.StandbyModel extends modes.models.GameModel {
  public modes.models.StandbyModel(map.LevelMap);
  public map.Tile getTile();
  public void moveTile(int, int);
  public void select(int, int);
}
Compiled from "WaitingModel.java"
public class modes.models.WaitingModel extends modes.models.GameModel {
  public modes.models.WaitingModel(map.LevelMap);
  public map.Tile getTile();
  public void moveTile(int, int);
  public void select(int, int);
  protected boolean isTileInBounds(int, int);
}
Compiled from "Selections.java"
public class modes.selections.Selections {
  public static void setSelectedTile(map.Tile);
  public static map.Tile getSelectedTile();
  public static void setSelectedDestination(map.Tile);
  public static map.Tile getSelectedDestination();
  public static void setSelectedUnit(units.Unit);
  public static units.Unit getSelectedUnit();
  public static void setSelectedButton(units.interactions.ButtonSprite);
  public static units.interactions.ButtonSprite getSelectedButton();
  public static void setSelectedAtrribute(attribute.Attribute);
  public static attribute.Attribute getSelectedAtrribute();
  public static com.golden.gamedev.object.SpriteGroup getButtonGroup();
  public static void setButtonGroup(com.golden.gamedev.object.SpriteGroup);
  public static void setPlayerList(java.util.ArrayList<player.Player>);
  public static java.util.ArrayList<player.Player> getPlayerList();
  public static com.golden.gamedev.object.SpriteGroup getEnvironmentGroup();
  public static void setEnvironmentGroup(com.golden.gamedev.object.SpriteGroup);
  public static void setCurrentPlayer(player.Player);
  public static player.Player getCurrentPlayer();
  public static void setGameOver(boolean);
  public static boolean getGameOver();
}
Compiled from "GameObserver.java"
public abstract class observers.GameObserver<T extends achiever.Achiever> implements java.io.Serializable {
  public observers.GameObserver();
  public void notifyObserver(T);
  abstract void notifyObserverTemplate(T);
}
Compiled from "ObserverDeathEffectsMap.java"
public class observers.ObserverDeathEffectsMap extends observers.GameObserver<map.LevelMap> {
  public observers.ObserverDeathEffectsMap();
  void notifyObserverTemplate(map.LevelMap);
  void notifyObserverTemplate(achiever.Achiever);
}
Compiled from "ObserverKills.java"
public class observers.ObserverKills extends observers.GameObserver {
  public observers.ObserverKills();
  public void notifyObserverTemplate(achiever.Achiever);
}
Compiled from "ObserverLevelUp.java"
public class observers.ObserverLevelUp extends observers.GameObserver {
  public static final java.lang.String LEVEL_UP_MESSAGE;
  public observers.ObserverLevelUp();
  public void notifyObserverTemplate(achiever.Achiever);
}
Compiled from "ObserverLose.java"
public class observers.ObserverLose extends observers.GameObserver {
  public observers.ObserverLose();
  public void notifyObserverTemplate(achiever.Achiever);
  public void setGameMode(modes.GameMode);
}
Compiled from "ObserverUnlockUnits.java"
public class observers.ObserverUnlockUnits extends observers.GameObserver {
  public observers.ObserverUnlockUnits(java.util.TreeMap<java.lang.Integer, units.Unit>);
  public void setUnlockLevel(int);
  public void notifyObserverTemplate(achiever.Achiever);
}
Compiled from "Player.java"
public abstract class player.Player implements java.io.Serializable,achiever.upgrades.AchieverUpgradable,achiever.Achiever {
  public player.Player(java.lang.String);
  public void addAttribute(attribute.Attribute);
  public void removeAttribute(attribute.Attribute);
  public attribute.Attribute getAttribute(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.Object);
  public attribute.AttributeUnitGroup getPlayerUnits();
  public attribute.AttributeUnitTypes getPlayerUnitTypes();
  public attribute.AttributeExperience getPlayerExperience();
  public attribute.AttributeLevel getPlayerLevel();
  public attribute.AttributeKills getPlayerKills();
  public abstract java.lang.String getType();
  public java.lang.String getPlayerName();
  public void cycleUnitTurns();
  public void modify();
}
Compiled from "EnvironmentElement.java"
public class serialization.EnvironmentElement implements java.io.Serializable {
  public serialization.EnvironmentElement();
  public java.util.ArrayList<environment.Environment> getEnviroment();
  public void setEnviroment(java.util.ArrayList<environment.Environment>);
  public void setX(int);
  public int getX();
  public void setY(int);
  public int getY();
  public java.lang.String toString();
}
Compiled from "GameElement.java"
public class serialization.GameElement implements java.io.Serializable {
  public serialization.GameElement();
  public java.util.HashMap<java.lang.Integer, serialization.MapElement> getLevelMap();
  public void setLevelMap(java.util.HashMap<java.lang.Integer, serialization.MapElement>);
  public java.lang.String toString();
}
Compiled from "MapElement.java"
public class serialization.MapElement implements java.io.Serializable {
  public serialization.MapElement();
  public modes.EditMode$GameState getState();
  public void setState(modes.EditMode$GameState);
  public void setpixelsX(int);
  public int getpixelsX();
  public void setpixelsY(int);
  public int getpixelsY();
  public void settilesX(int);
  public int gettilesX();
  public void settilesY(int);
  public int gettilesY();
  public void setunitlist(java.util.List<serialization.UnitElement>);
  public java.util.List<serialization.UnitElement> getunitlist();
  public void setEvironmentlist(java.util.List<serialization.EnvironmentElement>);
  public java.util.List<serialization.EnvironmentElement> getEnviromentList();
  public java.lang.String toString();
  public int getLevel();
  public void setLevel(int);
}
Compiled from "SBufferedImage.java"
public class serialization.SBufferedImage implements java.io.Serializable {
  public serialization.SBufferedImage();
  public long getId();
  public void setId(long);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public java.awt.image.BufferedImage getImage();
  public void setImage(java.awt.image.BufferedImage);
}
Compiled from "UnitElement.java"
public class serialization.UnitElement implements java.io.Serializable {
  public serialization.UnitElement();
  public units.Unit getUnit();
  public void setUnit(units.Unit);
  public modes.EditMode$UnitOwner getUnitOwner();
  public void setUnitOwner(modes.EditMode$UnitOwner);
  public java.lang.String toString();
}
Compiled from "BulbasaurUnit.java"
public class units.BulbasaurUnit extends units.Unit {
  public units.BulbasaurUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String addButton();
}
Compiled from "CelebiUnit.java"
public class units.CelebiUnit extends units.Unit {
  public static final java.lang.String PIKACHU_ADD_BUTTON;
  public units.CelebiUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String addButton();
}
Compiled from "CharmanderUnit.java"
public class units.CharmanderUnit extends units.Unit {
  public units.CharmanderUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String addButton();
}
Compiled from "ElectrodeUnit.java"
public class units.ElectrodeUnit extends units.Unit {
  public static final java.lang.String ELECTRODE_ADD_BUTTON;
  public units.ElectrodeUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String addButton();
  public java.lang.String toString();
}
Compiled from "HewnerUnit.java"
public class units.HewnerUnit extends units.Unit {
  public units.HewnerUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String addButton();
}
Compiled from "HoohUnit.java"
public class units.HoohUnit extends units.Unit {
  public units.HoohUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String toString();
  public java.lang.String addButton();
}
Compiled from "LugiaUnit.java"
public class units.LugiaUnit extends units.Unit {
  public units.LugiaUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String toString();
  public java.lang.String addButton();
}
Compiled from "MewUnit.java"
public class units.MewUnit extends units.Unit {
  public units.MewUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String toString();
  public java.lang.String addButton();
}
Compiled from "PikachuFactoryUnit.java"
public class units.PikachuFactoryUnit extends units.Unit {
  public units.PikachuFactoryUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public void addUnitType(units.Unit);
  public java.lang.String addButton();
}
Compiled from "PikachuUnit.java"
public class units.PikachuUnit extends units.Unit {
  public static final java.lang.String PIKACHU_ADD_BUTTON;
  public units.PikachuUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String addButton();
}
Compiled from "SnorlaxUnit.java"
public class units.SnorlaxUnit extends units.Unit {
  public units.SnorlaxUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String toString();
  public java.lang.String addButton();
  public void addAchievementMessage(java.lang.String);
}
Compiled from "TesterUnit.java"
public class units.TesterUnit extends units.Unit {
  public units.TesterUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String addButton();
}
Compiled from "Unit.java"
public abstract class units.Unit extends com.golden.gamedev.object.Sprite implements units.upgrades.UnitUpgradable,java.io.Serializable,achiever.Achiever {
  protected attribute.AttributeList<attribute.Attribute> unitAttributeList;
  protected java.util.ArrayList<units.interactions.Interaction> interactionList;
  protected int xTileLoc;
  protected int yTileLoc;
  public units.Unit();
  public abstract java.lang.String unitName();
  public abstract java.lang.String imageFilepath();
  public void beDestroyed(units.Unit, map.LevelMap);
  public void addAttribute(attribute.Attribute);
  public void removeAttribute(attribute.Attribute);
  public java.util.ArrayList<units.interactions.Interaction> getInteractionList();
  public attribute.AttributeList<attribute.Attribute> getAttributeList();
  public attribute.Attribute getAttribute(java.lang.String);
  public boolean hasAttribute(java.lang.String);
  public units.interactions.Interaction getInteraction(java.lang.String);
  public boolean hasInteraction(java.lang.String);
  public int getXTileLoc();
  public int getYTileLoc();
  public void setLoc(int, int);
  public void modify();
  public boolean isSelected();
  public void setSelected(boolean);
  public achiever.Achiever getOwner();
  public void setOwner(achiever.Achiever);
  public abstract java.lang.String addButton();
  public void setAttributeList(attribute.AttributeList<attribute.Attribute>);
  public void setInteraction(java.util.ArrayList<units.interactions.Interaction>);
  public void resize(int, int);
  public void render(java.awt.Graphics2D);
  public void addAchievementMessage(java.lang.String);
}
Compiled from "WeezingUnit.java"
public class units.WeezingUnit extends units.Unit {
  public static final java.lang.String PIKACHU_ADD_BUTTON;
  public units.WeezingUnit();
  public java.lang.String unitName();
  public java.lang.String imageFilepath();
  public java.lang.String addButton();
}
Compiled from "ButtonEvolve.java"
public class units.interactions.ButtonEvolve extends units.interactions.InteractionUnitButton {
  public units.interactions.ButtonEvolve();
  public serialization.SBufferedImage buttonImage();
  public void performButton(modes.models.GameModel);
  public java.lang.String toString();
  public void refresh();
}
Compiled from "ButtonSprite.java"
public class units.interactions.ButtonSprite extends com.golden.gamedev.object.Sprite implements frame.TBComponent {
  public units.interactions.ButtonSprite(units.interactions.InteractionUnitButton);
  public units.interactions.InteractionUnitButton getInteractionButton();
  public void setLocation(int, int);
  public int getXLocation();
  public int getYLocation();
  public void resize(int, int);
  public void render(java.awt.Graphics2D);
}
Compiled from "ButtonSpriteFactory.java"
public class units.interactions.ButtonSpriteFactory {
  java.util.ArrayList<units.interactions.ButtonSprite> myButtons;
  units.Unit myUnit;
  public units.interactions.ButtonSpriteFactory(units.Unit);
  public java.util.ArrayList<units.interactions.ButtonSprite> getButtonSpriteList();
}
Compiled from "ButtonTargetRequired.java"
public abstract class units.interactions.ButtonTargetRequired extends units.interactions.InteractionUnitButton implements java.io.Serializable {
  public units.interactions.ButtonTargetRequired();
  protected abstract int targetTileBackground();
  public void highlightTargetableTiles(modes.models.GameModel);
  protected abstract boolean isTargetable(modes.models.GameModel, map.Tile);
}
Compiled from "Interaction.java"
public abstract class units.interactions.Interaction implements java.io.Serializable {
  public units.interactions.Interaction();
  public abstract java.lang.String toString();
  public abstract void refresh();
}
Compiled from "InteractionPassiveTurn.java"
public abstract class units.interactions.InteractionPassiveTurn extends units.interactions.Interaction {
  public units.interactions.InteractionPassiveTurn();
  public abstract void performInteraction(modes.models.GameModel, units.Unit);
}
Compiled from "InteractionUnitButton.java"
public abstract class units.interactions.InteractionUnitButton extends units.interactions.Interaction implements java.io.Serializable {
  public units.interactions.InteractionUnitButton();
  public abstract serialization.SBufferedImage buttonImage();
  public abstract void performButton(modes.models.GameModel);
}
Compiled from "PassivePoisonGas.java"
public class units.interactions.PassivePoisonGas extends units.interactions.InteractionPassiveTurn {
  public units.interactions.PassivePoisonGas();
  public void performInteraction(modes.models.GameModel, units.Unit);
  public java.lang.String toString();
  public void refresh();
}
Compiled from "UnitButtonAttack.java"
public class units.interactions.UnitButtonAttack extends units.interactions.ButtonTargetRequired {
  public units.interactions.UnitButtonAttack();
  public serialization.SBufferedImage buttonImage();
  public void performButton(modes.models.GameModel);
  public java.lang.String toString();
  protected int targetTileBackground();
  protected boolean isTargetable(modes.models.GameModel, map.Tile);
  public void refresh();
}
Compiled from "UnitButtonMove.java"
public class units.interactions.UnitButtonMove extends units.interactions.ButtonTargetRequired {
  public units.interactions.UnitButtonMove();
  public serialization.SBufferedImage buttonImage();
  public void performButton(modes.models.GameModel);
  public java.lang.String toString();
  protected int targetTileBackground();
  protected boolean isTargetable(modes.models.GameModel, map.Tile);
  public void refresh();
}
Compiled from "UnitButtonNova.java"
public class units.interactions.UnitButtonNova extends units.interactions.InteractionUnitButton {
  public units.interactions.UnitButtonNova();
  public serialization.SBufferedImage buttonImage();
  public void performButton(modes.models.GameModel);
  public java.lang.String toString();
  public void refresh();
}
Compiled from "UnitButtonProduce.java"
public class units.interactions.UnitButtonProduce extends units.interactions.ButtonTargetRequired {
  public units.interactions.UnitButtonProduce(units.Unit);
  public serialization.SBufferedImage buttonImage();
  public void performButton(modes.models.GameModel);
  public java.lang.String toString();
  protected int targetTileBackground();
  protected boolean isTargetable(modes.models.GameModel, map.Tile);
  public void refresh();
}
Compiled from "HealthBasedMoveReaction.java"
public class units.reactions.HealthBasedMoveReaction extends units.reactions.Reaction {
  public units.reactions.HealthBasedMoveReaction();
  public void apply(units.Unit);
}
Compiled from "HyperSpeedReaction.java"
public class units.reactions.HyperSpeedReaction extends units.reactions.Reaction {
  public units.reactions.HyperSpeedReaction();
  public void apply(units.Unit);
}
Compiled from "ParalyzingAttackReaction.java"
public class units.reactions.ParalyzingAttackReaction extends units.reactions.Reaction {
  public units.reactions.ParalyzingAttackReaction();
  public void apply(units.Unit);
}
Compiled from "Reaction.java"
public abstract class units.reactions.Reaction {
  public units.reactions.Reaction();
  public abstract void apply(units.Unit);
}
Compiled from "HealthModification.java"
public class units.upgrades.HealthModification extends units.upgrades.UnitAttributeModification {
  public units.upgrades.HealthModification(units.upgrades.UnitUpgradable, int, int);
  public void modify();
  public boolean checkCost();
  public void applyCost();
}
Compiled from "ImageModification.java"
public class units.upgrades.ImageModification extends units.upgrades.UnitAttributeModification {
  public units.upgrades.ImageModification(units.upgrades.UnitUpgradable, int, java.lang.String);
  public void modify();
  public boolean checkCost();
  public void applyCost();
}
Compiled from "InteractionModification.java"
public abstract class units.upgrades.InteractionModification extends units.upgrades.UnitDecorator {
  public units.upgrades.InteractionModification(units.upgrades.UnitUpgradable, int);
  public java.util.ArrayList<units.interactions.Interaction> getInteraction();
  public void setInteraction(java.util.ArrayList<units.interactions.Interaction>);
}
Compiled from "MapModification.java"
public abstract class units.upgrades.MapModification extends units.upgrades.UnitDecorator {
  public units.upgrades.MapModification(units.upgrades.UnitUpgradable, int, map.LevelMap);
  public map.LevelMap getMap();
  public void setMap(map.LevelMap);
}
Compiled from "MoveModification.java"
public class units.upgrades.MoveModification extends units.upgrades.UnitAttributeModification {
  public units.upgrades.MoveModification(units.upgrades.UnitUpgradable, int, int);
  public void modify();
  public boolean checkCost();
  public void applyCost();
}
Compiled from "TeleportModification.java"
public class units.upgrades.TeleportModification extends units.upgrades.MapModification {
  public units.upgrades.TeleportModification(units.upgrades.UnitUpgradable, int, map.LevelMap, int, int);
  public void modify();
  public boolean checkCost();
  public void applyCost();
}
Compiled from "UnitAttributeModification.java"
public abstract class units.upgrades.UnitAttributeModification extends units.upgrades.UnitDecorator {
  public units.upgrades.UnitAttributeModification(units.upgrades.UnitUpgradable, int, java.lang.String);
  public attribute.Attribute getAttribute();
  public void setAttribute(attribute.Attribute);
}
Compiled from "UnitDecorator.java"
public abstract class units.upgrades.UnitDecorator implements units.upgrades.UnitUpgradable,java.io.Serializable {
  public units.upgrades.UnitDecorator(units.upgrades.UnitUpgradable, int);
  public abstract void modify();
  public abstract boolean checkCost();
  public abstract void applyCost();
  public units.upgrades.UnitUpgradable getDecoratedUnit();
  public void setDecoratedUnit(units.upgrades.UnitUpgradable);
  public int getUpgradeCost();
  public void setUpgradeCost(int);
  public attribute.Attribute getAttribute(java.lang.String);
  public java.util.ArrayList<units.interactions.Interaction> getInteractionList();
  public achiever.Achiever getOwner();
}
Compiled from "UnitUpgradable.java"
public interface units.upgrades.UnitUpgradable extends units.upgrades.Upgradable {
  public abstract attribute.Attribute getAttribute(java.lang.String);
  public abstract java.util.ArrayList<units.interactions.Interaction> getInteractionList();
  public abstract achiever.Achiever getOwner();
}
Compiled from "Upgradable.java"
public interface units.upgrades.Upgradable {
  public abstract void modify();
}
Compiled from "UpgradeNode.java"
public class units.upgrades.UpgradeNode implements java.io.Serializable {
  public units.upgrades.UpgradeNode(units.upgrades.UnitDecorator);
  public java.util.ArrayList<units.upgrades.UpgradeNode> getChildren();
  public units.upgrades.UpgradeNode getParent();
  public void setParent(units.upgrades.UpgradeNode);
  public void setChildren(java.util.ArrayList<units.upgrades.UpgradeNode>);
  public boolean isAvailable();
  public void setAvailable(boolean);
  public void modify();
}
Compiled from "UpgradeTest.java"
public class units.upgrades.UpgradeTest {
  public units.upgrades.UpgradeTest();
  public static void main(java.lang.String[]);
}
Compiled from "UpgradeTree.java"
public class units.upgrades.UpgradeTree implements java.io.Serializable {
  public units.upgrades.UpgradeTree();
  public units.upgrades.UpgradeNode getRoot();
  public void setRoot(units.upgrades.UpgradeNode);
  public void addLeaf(units.upgrades.UpgradeNode, units.upgrades.UpgradeNode);
}
Compiled from "Wait.java"
public class util.Wait {
  public util.Wait();
  public static void sec(long);
}
