Compiled from "Engine.java"
public class org.maltparser.Engine {
  public org.maltparser.Engine() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.flow.FlowChartInstance initialize(int) throws org.maltparser.core.exception.MaltChainedException;
  public void process(int) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate(int) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Malt.java"
public class org.maltparser.Malt {
  public org.maltparser.Malt();
  public static void main(java.lang.String[]);
}
Compiled from "MaltConsoleEngine.java"
public class org.maltparser.MaltConsoleEngine {
  public static final int OPTION_CONTAINER;
  public org.maltparser.MaltConsoleEngine();
  public void startEngine(java.lang.String[]);
}
Compiled from "MaltParserService.java"
public class org.maltparser.MaltParserService {
  public org.maltparser.MaltParserService() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.MaltParserService(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.MaltParserService(boolean) throws org.maltparser.core.exception.MaltChainedException;
  public void runExperiment(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void initializeParserModel(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure parse(java.lang.String[]) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure toDependencyStructure(java.lang.String[]) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.DataFormatSpecification readDataFormatSpecification(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure toDependencyStructure(java.lang.String[], org.maltparser.core.io.dataformat.DataFormatSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure toDependencyStructure(java.lang.String[], java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String[] parseTokens(java.lang.String[]) throws org.maltparser.core.exception.MaltChainedException;
  public void terminateParserModel() throws org.maltparser.core.exception.MaltChainedException;
  public int getOptionContainer();
}
Compiled from "ConfigDirChartItem.java"
public class org.maltparser.core.config.ConfigDirChartItem extends org.maltparser.core.flow.item.ChartItem {
  public org.maltparser.core.config.ConfigDirChartItem();
  public void initialize(org.maltparser.core.flow.FlowChartInstance, org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public int preprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public int process(int) throws org.maltparser.core.exception.MaltChainedException;
  public int postprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "Configuration.java"
public interface org.maltparser.core.config.Configuration {
  public abstract org.maltparser.core.config.ConfigurationDir getConfigurationDir();
  public abstract void setConfigurationDir(org.maltparser.core.config.ConfigurationDir);
  public abstract org.apache.log4j.Logger getConfigLogger();
  public abstract void setConfigLogger(org.apache.log4j.Logger);
  public abstract org.maltparser.core.symbol.SymbolTableHandler getSymbolTables();
  public abstract org.maltparser.core.config.ConfigurationRegistry getRegistry();
  public abstract java.lang.Object getOptionValue(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getOptionValueString(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ConfigurationDir.java"
public class org.maltparser.core.config.ConfigurationDir {
  protected static final int BUFFER;
  protected java.io.File configDirectory;
  protected java.lang.String name;
  protected java.lang.String type;
  protected java.io.File workingDirectory;
  protected java.net.URL url;
  protected int containerIndex;
  protected java.io.BufferedWriter infoFile;
  protected java.lang.String createdByMaltParserVersion;
  public org.maltparser.core.config.ConfigurationDir(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.config.ConfigurationDir(java.lang.String, java.lang.String, int) throws org.maltparser.core.exception.MaltChainedException;
  public void initDataFormat() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.OutputStreamWriter getOutputStreamWriter(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.OutputStreamWriter getOutputStreamWriter(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.OutputStreamWriter getAppendOutputStreamWriter(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.InputStreamReader getInputStreamReader(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.InputStreamReader getInputStreamReader(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.jar.JarEntry getConfigFileEntry(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.InputStream getInputStreamFromConfigFileEntry(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.InputStreamReader getInputStreamReaderFromConfigFileEntry(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.InputStreamReader getInputStreamReaderFromConfigFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.File getFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.net.URL getConfigFileEntryURL(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String copyToConfig(java.io.File) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String copyToConfig(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String copyToConfig(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public void deleteConfigDirectory() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.File getConfigDirectory();
  protected void setConfigDirectory(java.io.File);
  public void createConfigDirectory() throws org.maltparser.core.exception.MaltChainedException;
  protected void checkConfigDirectory() throws org.maltparser.core.exception.MaltChainedException;
  protected void createInfoFile() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedWriter getInfoFileWriter() throws org.maltparser.core.exception.MaltChainedException;
  public void createConfigFile() throws org.maltparser.core.exception.MaltChainedException;
  public void copyConfigFile(java.io.File, java.io.File, org.maltparser.core.config.version.Versioning) throws org.maltparser.core.exception.MaltChainedException;
  protected void initNameNTypeFromInfoFile(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public void echoInfoFile() throws org.maltparser.core.exception.MaltChainedException;
  public void unpackConfigFile() throws org.maltparser.core.exception.MaltChainedException;
  protected void unpackConfigFile(java.util.jar.JarInputStream) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  protected void setName(java.lang.String);
  public java.lang.String getType();
  protected void setType(java.lang.String);
  public java.io.File getWorkingDirectory();
  public void initWorkingDirectory() throws org.maltparser.core.exception.MaltChainedException;
  public void initWorkingDirectory(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.net.URL getUrl();
  protected void setUrl(java.net.URL);
  public int getContainerIndex();
  public void setContainerIndex(int);
  public java.lang.String getCreatedByMaltParserVersion();
  public void setCreatedByMaltParserVersion(java.lang.String);
  public void initCreatedByMaltParserVersionFromInfoFile() throws org.maltparser.core.exception.MaltChainedException;
  public void versioning() throws org.maltparser.core.exception.MaltChainedException;
  protected void checkNConvertConfigVersion() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  protected void finalize() throws java.lang.Throwable;
  public org.maltparser.core.symbol.SymbolTableHandler getSymbolTables();
  public void setSymbolTables(org.maltparser.core.symbol.SymbolTableHandler);
  public org.maltparser.core.io.dataformat.DataFormatManager getDataFormatManager();
  public void setDataFormatManager(org.maltparser.core.io.dataformat.DataFormatManager);
  public java.util.Set<java.lang.String> getDataFormatInstanceKeys();
  public boolean addDataFormatInstance(java.lang.String, org.maltparser.core.io.dataformat.DataFormatInstance);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance(java.lang.String);
  public int sizeDataFormatInstance();
  public org.maltparser.core.io.dataformat.DataFormatInstance getInputDataFormatInstance();
  public java.net.URL getInputFormatURL();
  public java.net.URL getOutputFormatURL();
}
Compiled from "ConfigurationException.java"
public class org.maltparser.core.config.ConfigurationException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.config.ConfigurationException(java.lang.String);
  public org.maltparser.core.config.ConfigurationException(java.lang.String, java.lang.Throwable);
}
Compiled from "ConfigurationRegistry.java"
public class org.maltparser.core.config.ConfigurationRegistry extends java.util.HashMap<java.lang.Class<?>, java.lang.Object> {
  public static final long serialVersionUID;
  public org.maltparser.core.config.ConfigurationRegistry();
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Class<?>, java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
}
Compiled from "Versioning.java"
public class org.maltparser.core.config.version.Versioning {
  public static java.lang.String[] availableVersions;
  public static boolean[] supportVersions;
  public org.maltparser.core.config.version.Versioning(java.lang.String, java.lang.String, java.io.File, java.lang.String);
  public java.util.jar.JarEntry getJarEntry(java.util.jar.JarEntry);
  public boolean hasChanges(java.util.jar.JarEntry, java.util.jar.JarEntry);
  public java.lang.String modifyJarEntry(java.util.jar.JarEntry, java.util.jar.JarEntry, java.lang.StringBuilder);
  public boolean earlierVersion(java.lang.String);
  public boolean support(java.lang.String);
  public java.lang.String getFeatureModelXML();
  public void setFeatureModelXML(java.lang.String);
  public java.lang.String getInputFormatXML();
  public void setInputFormatXML(java.lang.String);
  public java.lang.String getNewConfigName();
  public void setNewConfigName(java.lang.String);
  public java.lang.String getConfigName();
  public void setConfigName(java.lang.String);
  public java.lang.String getConfigType();
  public void setConfigType(java.lang.String);
  public java.io.File getMcoPath();
  public void setMcoPath(java.io.File);
  public java.lang.String getMaltParserVersion();
  public void setMaltParserVersion(java.lang.String);
  public java.lang.String getParserModelVersion();
  public void setParserModelVersion(java.lang.String);
  static {};
}
Compiled from "MaltChainedException.java"
public class org.maltparser.core.exception.MaltChainedException extends java.lang.Exception {
  public static final long serialVersionUID;
  public org.maltparser.core.exception.MaltChainedException();
  public org.maltparser.core.exception.MaltChainedException(java.lang.String);
  public org.maltparser.core.exception.MaltChainedException(java.lang.String, java.lang.Throwable);
  public java.lang.Throwable getCause();
  public java.lang.String getMessageChain();
  public void printStackTrace();
}
Compiled from "AbstractFeatureFactory.java"
public interface org.maltparser.core.feature.AbstractFeatureFactory {
  public abstract org.maltparser.core.feature.function.Function makeFunction(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "FeatureException.java"
public class org.maltparser.core.feature.FeatureException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.feature.FeatureException(java.lang.String);
  public org.maltparser.core.feature.FeatureException(java.lang.String, java.lang.Throwable);
}
Compiled from "FeatureModel.java"
public class org.maltparser.core.feature.FeatureModel extends org.maltparser.core.helper.HashMap<java.lang.String, org.maltparser.core.feature.FeatureVector> {
  public static final long serialVersionUID;
  protected org.maltparser.core.feature.spec.SpecificationModel specModel;
  protected final java.util.ArrayList<org.maltparser.core.feature.function.AddressFunction> addressFunctionCache;
  protected final java.util.ArrayList<org.maltparser.core.feature.function.FeatureFunction> featureFunctionCache;
  protected org.maltparser.core.config.ConfigurationRegistry registry;
  protected org.maltparser.core.feature.system.FeatureEngine featureEngine;
  protected org.maltparser.core.feature.FeatureVector mainFeatureVector;
  protected final java.util.regex.Pattern splitPattern;
  public org.maltparser.core.feature.FeatureModel(org.maltparser.core.feature.spec.SpecificationModel, org.maltparser.core.config.ConfigurationRegistry, org.maltparser.core.feature.system.FeatureEngine) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.spec.SpecificationModel getSpecModel();
  public void setSpecModel(org.maltparser.core.feature.spec.SpecificationModel);
  public java.util.ArrayList<org.maltparser.core.feature.function.AddressFunction> getAddressFunctionCache();
  public java.util.ArrayList<org.maltparser.core.feature.function.FeatureFunction> getFeatureFunctionCache();
  public org.maltparser.core.config.ConfigurationRegistry getRegistry();
  public void setRegistry(org.maltparser.core.config.ConfigurationRegistry);
  public org.maltparser.core.feature.system.FeatureEngine getFeatureEngine();
  public void setFeatureEngine(org.maltparser.core.feature.system.FeatureEngine);
  public org.maltparser.core.feature.FeatureVector getMainFeatureVector();
  public org.maltparser.core.feature.FeatureVector getFeatureVector(java.lang.String);
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void update(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.FeatureFunction identifyFeature(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected void identifyFeatureFunction(java.util.Stack<java.lang.Object>) throws org.maltparser.core.exception.MaltChainedException;
  protected void initializeFunction(org.maltparser.core.feature.function.Function, java.util.Stack<java.lang.Object>) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "FeatureModelManager.java"
public class org.maltparser.core.feature.FeatureModelManager {
  protected org.maltparser.core.feature.spec.SpecificationModels specModels;
  protected org.maltparser.core.feature.system.FeatureEngine featureEngine;
  protected org.maltparser.core.config.ConfigurationDir configDirectory;
  public org.maltparser.core.feature.FeatureModelManager(org.maltparser.core.feature.system.FeatureEngine, org.maltparser.core.config.ConfigurationDir) throws org.maltparser.core.exception.MaltChainedException;
  public void loadSpecification(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void loadParSpecification(java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureModel getFeatureModel(java.lang.String, int, org.maltparser.core.config.ConfigurationRegistry) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureModel getFeatureModel(java.lang.String, org.maltparser.core.config.ConfigurationRegistry) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureModel getFeatureModel(org.maltparser.core.feature.spec.SpecificationModel, org.maltparser.core.config.ConfigurationRegistry) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.spec.SpecificationModels getSpecModels();
  protected void setSpecModels(org.maltparser.core.feature.spec.SpecificationModels);
  public org.maltparser.core.feature.system.FeatureEngine getFeatureEngine();
  public void setFeatureEngine(org.maltparser.core.feature.system.FeatureEngine);
  public org.maltparser.core.config.ConfigurationDir getConfigDirectory();
  public void setConfigDirectory(org.maltparser.core.config.ConfigurationDir);
  public java.lang.String toString();
}
Compiled from "FeatureVector.java"
public class org.maltparser.core.feature.FeatureVector extends java.util.ArrayList<org.maltparser.core.feature.function.FeatureFunction> implements java.io.Serializable {
  public static final long serialVersionUID;
  protected org.maltparser.core.feature.spec.SpecificationSubModel specSubModel;
  protected org.maltparser.core.feature.FeatureModel featureModel;
  public org.maltparser.core.feature.FeatureVector(org.maltparser.core.feature.FeatureModel, org.maltparser.core.feature.spec.SpecificationSubModel) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.spec.SpecificationSubModel getSpecSubModel();
  protected void setSpecSubModel(org.maltparser.core.feature.spec.SpecificationSubModel);
  public org.maltparser.core.feature.FeatureModel getFeatureModel();
  protected void setFeatureModel(org.maltparser.core.feature.FeatureModel);
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue(int);
  public org.maltparser.core.feature.value.FeatureValue[] getFeatureValues();
  public java.lang.String toString();
}
Compiled from "AddressFunction.java"
public abstract class org.maltparser.core.feature.function.AddressFunction implements org.maltparser.core.feature.function.Function {
  protected org.maltparser.core.feature.value.AddressValue address;
  public org.maltparser.core.feature.function.AddressFunction();
  public abstract void update(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.AddressValue getAddressValue();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "FeatureCastFunction.java"
public interface org.maltparser.core.feature.function.FeatureCastFunction extends org.maltparser.core.feature.function.FeatureFunction {
}
Compiled from "FeatureFunction.java"
public interface org.maltparser.core.feature.function.FeatureFunction extends org.maltparser.core.feature.function.Function {
  public abstract java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public abstract org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public abstract int getType();
  public abstract java.lang.String getMapIdentifier();
}
Compiled from "FeatureMapFunction.java"
public interface org.maltparser.core.feature.function.FeatureMapFunction extends org.maltparser.core.feature.function.FeatureFunction {
}
Compiled from "Function.java"
public interface org.maltparser.core.feature.function.Function {
  public abstract void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.Class<?>[] getParameterTypes();
  public abstract void update() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Modifiable.java"
public interface org.maltparser.core.feature.function.Modifiable extends org.maltparser.core.feature.function.FeatureFunction {
  public abstract void setFeatureValue(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void setFeatureValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Merge3Feature.java"
public class org.maltparser.core.feature.map.Merge3Feature implements org.maltparser.core.feature.function.FeatureMapFunction {
  public org.maltparser.core.feature.map.Merge3Feature(org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void updateCardinality() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.FeatureFunction getFirstFeature();
  public void setFirstFeature(org.maltparser.core.feature.function.FeatureFunction);
  public org.maltparser.core.feature.function.FeatureFunction getSecondFeature();
  public void setSecondFeature(org.maltparser.core.feature.function.FeatureFunction);
  public org.maltparser.core.feature.function.FeatureFunction getThirdFeature();
  public void setThirdFeature(org.maltparser.core.feature.function.FeatureFunction);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  protected void setColumn(org.maltparser.core.io.dataformat.ColumnDescription);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "MergeFeature.java"
public class org.maltparser.core.feature.map.MergeFeature implements org.maltparser.core.feature.function.FeatureMapFunction {
  public org.maltparser.core.feature.map.MergeFeature(org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.FeatureFunction getFirstFeature();
  public void setFirstFeature(org.maltparser.core.feature.function.FeatureFunction);
  public org.maltparser.core.feature.function.FeatureFunction getSecondFeature();
  public void setSecondFeature(org.maltparser.core.feature.function.FeatureFunction);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  protected void setColumn(org.maltparser.core.io.dataformat.ColumnDescription);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "PrefixFeature.java"
public class org.maltparser.core.feature.map.PrefixFeature implements org.maltparser.core.feature.function.FeatureMapFunction {
  protected org.maltparser.core.feature.function.FeatureFunction parentFeature;
  protected org.maltparser.core.feature.value.MultipleFeatureValue multipleFeatureValue;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.io.dataformat.DataFormatInstance dataFormatInstance;
  protected org.maltparser.core.io.dataformat.ColumnDescription column;
  protected int prefixLength;
  public org.maltparser.core.feature.map.PrefixFeature(org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void updateCardinality() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.FeatureFunction getParentFeature();
  public void setParentFeature(org.maltparser.core.feature.function.FeatureFunction);
  public int getPrefixLength();
  public void setPrefixLength(int);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  protected void setColumn(org.maltparser.core.io.dataformat.ColumnDescription);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "SplitFeature.java"
public class org.maltparser.core.feature.map.SplitFeature implements org.maltparser.core.feature.function.FeatureMapFunction {
  protected org.maltparser.core.feature.function.FeatureFunction parentFeature;
  protected org.maltparser.core.feature.value.MultipleFeatureValue multipleFeatureValue;
  protected org.maltparser.core.io.dataformat.DataFormatInstance dataFormatInstance;
  protected org.maltparser.core.io.dataformat.ColumnDescription column;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected java.lang.String separators;
  protected java.util.regex.Pattern separatorsPattern;
  public org.maltparser.core.feature.map.SplitFeature(org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void updateCardinality() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public org.maltparser.core.feature.function.FeatureFunction getParentFeature();
  public void setParentFeature(org.maltparser.core.feature.function.FeatureFunction);
  public java.lang.String getSeparators();
  public void setSeparators(java.lang.String);
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  protected void setColumn(org.maltparser.core.io.dataformat.ColumnDescription);
  public int getType();
  public java.lang.String getMapIdentifier();
  public java.lang.String toString();
}
Compiled from "SuffixFeature.java"
public class org.maltparser.core.feature.map.SuffixFeature implements org.maltparser.core.feature.function.FeatureMapFunction {
  protected org.maltparser.core.feature.function.FeatureFunction parentFeature;
  protected org.maltparser.core.feature.value.MultipleFeatureValue multipleFeatureValue;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.io.dataformat.DataFormatInstance dataFormatInstance;
  protected org.maltparser.core.io.dataformat.ColumnDescription column;
  protected int suffixLength;
  public org.maltparser.core.feature.map.SuffixFeature(org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.FeatureFunction getParentFeature();
  public void setParentFeature(org.maltparser.core.feature.function.FeatureFunction);
  public int getSuffixLength();
  public void setSuffixLength(int);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  protected void setColumn(org.maltparser.core.io.dataformat.ColumnDescription);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "SpecificationModel.java"
public class org.maltparser.core.feature.spec.SpecificationModel implements java.lang.Iterable<org.maltparser.core.feature.spec.SpecificationSubModel> {
  public org.maltparser.core.feature.spec.SpecificationModel() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.spec.SpecificationModel(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void add(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void add(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSpecModelName();
  public void setSpecModelName(java.lang.String);
  public java.util.Iterator<org.maltparser.core.feature.spec.SpecificationSubModel> iterator();
  public int size();
  public org.maltparser.core.feature.spec.SpecificationSubModel getSpecSubModel(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SpecificationModels.java"
public class org.maltparser.core.feature.spec.SpecificationModels {
  public org.maltparser.core.feature.spec.SpecificationModels() throws org.maltparser.core.exception.MaltChainedException;
  public void add(int, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void add(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void add(int, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void add(java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public int getNextIndex();
  public void loadParReader(java.net.URL, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void load(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.spec.SpecificationModel getSpecificationModel(java.net.URL, int);
  public java.lang.String toString();
}
Compiled from "SpecificationSubModel.java"
public class org.maltparser.core.feature.spec.SpecificationSubModel implements java.lang.Iterable<java.lang.String> {
  public org.maltparser.core.feature.spec.SpecificationSubModel();
  public org.maltparser.core.feature.spec.SpecificationSubModel(java.lang.String);
  public void add(java.lang.String);
  public java.lang.String getSubModelName();
  public void setSubModelName(java.lang.String);
  public int size();
  public java.util.Iterator<java.lang.String> iterator();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "FeatureSpecReader.java"
public interface org.maltparser.core.feature.spec.reader.FeatureSpecReader {
  public abstract void load(java.net.URL, org.maltparser.core.feature.spec.SpecificationModels) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ParReader.java"
public class org.maltparser.core.feature.spec.reader.ParReader implements org.maltparser.core.feature.spec.reader.FeatureSpecReader {
  public org.maltparser.core.feature.spec.reader.ParReader() throws org.maltparser.core.exception.MaltChainedException;
  public void load(java.net.URL, org.maltparser.core.feature.spec.SpecificationModels) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.EnumMap<org.maltparser.core.feature.spec.reader.ParReader$ColumnNames, java.lang.String> getColumnNameMap();
  public void initializeColumnNameMap();
  public void setColumnNameMap(java.util.EnumMap<org.maltparser.core.feature.spec.reader.ParReader$ColumnNames, java.lang.String>);
  public java.util.EnumMap<org.maltparser.core.feature.spec.reader.ParReader$DataStructures, java.lang.String> getDataStructuresMap();
  public void initializeDataStructuresMap();
  public void setDataStructuresMap(java.util.EnumMap<org.maltparser.core.feature.spec.reader.ParReader$DataStructures, java.lang.String>);
  public boolean isUseSplitFeats();
  public void setUseSplitFeats(boolean);
  public boolean isCovington();
  public void setCovington(boolean);
  public boolean isPppath();
  public void setPppath(boolean);
  public boolean isPplifted();
  public void setPplifted(boolean);
  public boolean isPpcoveredRoot();
  public void setPpcoveredRoot(boolean);
  public java.lang.String toString();
}
Compiled from "ParReader.java"
public final class org.maltparser.core.feature.spec.reader.ParReader$ColumnNames extends java.lang.Enum<org.maltparser.core.feature.spec.reader.ParReader$ColumnNames> {
  public static final org.maltparser.core.feature.spec.reader.ParReader$ColumnNames POS;
  public static final org.maltparser.core.feature.spec.reader.ParReader$ColumnNames DEP;
  public static final org.maltparser.core.feature.spec.reader.ParReader$ColumnNames LEX;
  public static final org.maltparser.core.feature.spec.reader.ParReader$ColumnNames LEMMA;
  public static final org.maltparser.core.feature.spec.reader.ParReader$ColumnNames CPOS;
  public static final org.maltparser.core.feature.spec.reader.ParReader$ColumnNames FEATS;
  public static org.maltparser.core.feature.spec.reader.ParReader$ColumnNames[] values();
  public static org.maltparser.core.feature.spec.reader.ParReader$ColumnNames valueOf(java.lang.String);
  static {};
}
Compiled from "ParReader.java"
public final class org.maltparser.core.feature.spec.reader.ParReader$DataStructures extends java.lang.Enum<org.maltparser.core.feature.spec.reader.ParReader$DataStructures> {
  public static final org.maltparser.core.feature.spec.reader.ParReader$DataStructures STACK;
  public static final org.maltparser.core.feature.spec.reader.ParReader$DataStructures INPUT;
  public static final org.maltparser.core.feature.spec.reader.ParReader$DataStructures LEFTCONTEXT;
  public static final org.maltparser.core.feature.spec.reader.ParReader$DataStructures RIGHTCONTEXT;
  public static org.maltparser.core.feature.spec.reader.ParReader$DataStructures[] values();
  public static org.maltparser.core.feature.spec.reader.ParReader$DataStructures valueOf(java.lang.String);
  static {};
}
Compiled from "XmlReader.java"
public class org.maltparser.core.feature.spec.reader.XmlReader implements org.maltparser.core.feature.spec.reader.FeatureSpecReader {
  public org.maltparser.core.feature.spec.reader.XmlReader();
  public void load(java.net.URL, org.maltparser.core.feature.spec.SpecificationModels) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "FeatureEngine.java"
public class org.maltparser.core.feature.system.FeatureEngine extends org.maltparser.core.helper.HashMap<java.lang.String, org.maltparser.core.feature.system.FunctionDescription> {
  public static final long serialVersionUID;
  public org.maltparser.core.feature.system.FeatureEngine();
  public org.maltparser.core.feature.function.Function newFunction(java.lang.String, org.maltparser.core.config.ConfigurationRegistry) throws org.maltparser.core.exception.MaltChainedException;
  public void load(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void load(org.maltparser.core.plugin.PluginLoader) throws org.maltparser.core.exception.MaltChainedException;
  public void load(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public void readFeatureSystem(org.w3c.dom.Element) throws org.maltparser.core.exception.MaltChainedException;
  public void readFunction(org.w3c.dom.Element) throws org.maltparser.core.exception.MaltChainedException;
  public void readSubFunction(org.w3c.dom.Element, java.lang.Class<?>, boolean) throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "FunctionDescription.java"
public class org.maltparser.core.feature.system.FunctionDescription {
  public org.maltparser.core.feature.system.FunctionDescription(java.lang.String, java.lang.Class<?>, boolean, boolean);
  public org.maltparser.core.feature.function.Function newFunction(org.maltparser.core.config.ConfigurationRegistry) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public void setName(java.lang.String);
  public java.lang.Class<?> getFunctionClass();
  public void setFunctionClass(java.lang.Class<?>);
  public boolean isHasSubfunctions();
  public void setHasSubfunctions(boolean);
  public boolean isHasFactory();
  public void setHasFactory(boolean);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "AddressValue.java"
public class org.maltparser.core.feature.value.AddressValue extends org.maltparser.core.feature.value.FunctionValue {
  public org.maltparser.core.feature.value.AddressValue(org.maltparser.core.feature.function.Function);
  public void reset();
  public java.lang.Class<?> getAddressClass();
  public java.lang.Object getAddress();
  public void setAddress(java.lang.Object);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "FeatureValue.java"
public abstract class org.maltparser.core.feature.value.FeatureValue extends org.maltparser.core.feature.value.FunctionValue {
  protected boolean nullValue;
  public org.maltparser.core.feature.value.FeatureValue(org.maltparser.core.feature.function.Function);
  public void reset();
  public boolean isNullValue();
  public void setNullValue(boolean);
  public abstract boolean isMultiple();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "FunctionValue.java"
public abstract class org.maltparser.core.feature.value.FunctionValue {
  protected org.maltparser.core.feature.function.Function function;
  public org.maltparser.core.feature.value.FunctionValue(org.maltparser.core.feature.function.Function);
  public org.maltparser.core.feature.function.Function getFunction();
  public void setFunction(org.maltparser.core.feature.function.Function);
  public abstract void reset();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "MultipleFeatureValue.java"
public class org.maltparser.core.feature.value.MultipleFeatureValue extends org.maltparser.core.feature.value.FeatureValue {
  protected java.util.SortedMap<java.lang.Integer, java.lang.String> featureValues;
  public org.maltparser.core.feature.value.MultipleFeatureValue(org.maltparser.core.feature.function.Function);
  public void reset();
  public void addFeatureValue(int, java.lang.String);
  protected void setFeatureValues(java.util.SortedMap<java.lang.Integer, java.lang.String>);
  public java.util.Set<java.lang.Integer> getCodes();
  public int getFirstCode();
  public java.util.Set<java.lang.String> getSymbols();
  public java.lang.String getFirstSymbol();
  public boolean isMultiple();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "SingleFeatureValue.java"
public class org.maltparser.core.feature.value.SingleFeatureValue extends org.maltparser.core.feature.value.FeatureValue {
  protected int indexCode;
  protected java.lang.String symbol;
  protected double value;
  public org.maltparser.core.feature.value.SingleFeatureValue(org.maltparser.core.feature.function.Function);
  public void reset();
  public void update(int, java.lang.String, boolean, double);
  public int getIndexCode();
  public void setIndexCode(int);
  public java.lang.String getSymbol();
  public void setSymbol(java.lang.String);
  public double getValue();
  public void setValue(double);
  public boolean isMultiple();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "FlowChartInstance.java"
public class org.maltparser.core.flow.FlowChartInstance {
  public org.maltparser.core.flow.FlowChartInstance(int, org.maltparser.core.flow.spec.ChartSpecification, org.maltparser.core.flow.FlowChartManager) throws org.maltparser.core.exception.MaltChainedException;
  protected org.maltparser.core.flow.item.ChartItem initChartItem(org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public void addFlowChartRegistry(java.lang.Class<?>, java.lang.String, java.lang.Object);
  public void removeFlowChartRegistry(java.lang.Class<?>, java.lang.String);
  public java.lang.Object getFlowChartRegistry(java.lang.Class<?>, java.lang.String);
  public void setEngineRegistry(java.lang.String, java.lang.Object);
  public java.lang.Object getEngineRegistry(java.lang.String);
  public org.maltparser.core.flow.FlowChartManager getFlowChartManager();
  protected void setFlowChartManager(org.maltparser.core.flow.FlowChartManager);
  public int getOptionContainerIndex();
  protected void setOptionContainerIndex(int);
  public org.maltparser.core.flow.spec.ChartSpecification getChartSpecification();
  protected void setChartSpecification(org.maltparser.core.flow.spec.ChartSpecification);
  public java.util.LinkedHashSet<org.maltparser.core.flow.item.ChartItem> getPreProcessChartItems();
  public java.util.LinkedHashSet<org.maltparser.core.flow.item.ChartItem> getProcessChartItems();
  public java.util.LinkedHashSet<org.maltparser.core.flow.item.ChartItem> getPostProcessChartItems();
  public boolean hasPreProcessChartItems();
  public boolean hasProcessChartItems();
  public boolean hasPostProcessChartItems();
  public int preprocess() throws org.maltparser.core.exception.MaltChainedException;
  public int process() throws org.maltparser.core.exception.MaltChainedException;
  public int postprocess() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public void setName(java.lang.String);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "FlowChartManager.java"
public class org.maltparser.core.flow.FlowChartManager {
  public org.maltparser.core.flow.FlowChartManager();
  public static org.maltparser.core.flow.FlowChartManager instance();
  public void load(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void load(org.maltparser.core.plugin.PluginLoader) throws org.maltparser.core.exception.MaltChainedException;
  public void load(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.flow.FlowChartInstance initialize(int, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.flow.system.FlowChartSystem getFlowChartSystem();
  public java.lang.String toString();
  static {};
}
Compiled from "FlowException.java"
public class org.maltparser.core.flow.FlowException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.flow.FlowException(java.lang.String);
  public org.maltparser.core.flow.FlowException(java.lang.String, java.lang.Throwable);
}
Compiled from "ChartItem.java"
public abstract class org.maltparser.core.flow.item.ChartItem {
  protected org.maltparser.core.flow.FlowChartInstance flowChartinstance;
  protected org.maltparser.core.flow.spec.ChartItemSpecification chartItemSpecification;
  public static final int CONTINUE;
  public static final int TERMINATE;
  public static final int NEWITERATION;
  public org.maltparser.core.flow.item.ChartItem();
  public void initialize(org.maltparser.core.flow.FlowChartInstance, org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int preprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int process(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int postprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.flow.FlowChartInstance getFlowChartInstance();
  protected void setFlowChartInstance(org.maltparser.core.flow.FlowChartInstance);
  public int getOptionContainerIndex();
  public org.maltparser.core.flow.system.elem.ChartElement getChartElement(java.lang.String);
  public org.maltparser.core.flow.spec.ChartItemSpecification getChartItemSpecification();
  public void setChartItemSpecification(org.maltparser.core.flow.spec.ChartItemSpecification);
}
Compiled from "ChartItemSpecification.java"
public class org.maltparser.core.flow.spec.ChartItemSpecification {
  public org.maltparser.core.flow.spec.ChartItemSpecification();
  public org.maltparser.core.flow.spec.ChartItemSpecification(java.lang.String, java.lang.Class<? extends org.maltparser.core.flow.item.ChartItem>);
  public java.lang.String getChartItemName();
  public void setChartItemName(java.lang.String);
  public java.lang.Class<? extends org.maltparser.core.flow.item.ChartItem> getChartItemClass();
  public void setChartItemClass(java.lang.Class<? extends org.maltparser.core.flow.item.ChartItem>);
  public java.util.HashMap<java.lang.String, java.lang.String> getChartItemAttributes();
  public java.lang.String getChartItemAttribute(java.lang.String);
  public void addChartItemAttribute(java.lang.String, java.lang.String);
  public void removeChartItemAttribute(java.lang.String);
  public void read(org.w3c.dom.Element, org.maltparser.core.flow.FlowChartManager) throws org.maltparser.core.exception.MaltChainedException;
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "ChartSpecification.java"
public class org.maltparser.core.flow.spec.ChartSpecification {
  public org.maltparser.core.flow.spec.ChartSpecification();
  public java.lang.String getName();
  public void setName(java.lang.String);
  public java.util.LinkedHashSet<org.maltparser.core.flow.spec.ChartItemSpecification> getPreProcessChartItemSpecifications();
  public void addPreProcessChartItemSpecifications(org.maltparser.core.flow.spec.ChartItemSpecification);
  public void removePreProcessChartItemSpecifications(org.maltparser.core.flow.spec.ChartItemSpecification);
  public java.util.LinkedHashSet<org.maltparser.core.flow.spec.ChartItemSpecification> getProcessChartItemSpecifications();
  public void addProcessChartItemSpecifications(org.maltparser.core.flow.spec.ChartItemSpecification);
  public void removeProcessChartItemSpecifications(org.maltparser.core.flow.spec.ChartItemSpecification);
  public java.util.LinkedHashSet<org.maltparser.core.flow.spec.ChartItemSpecification> getPostProcessChartItemSpecifications();
  public void addPostProcessChartItemSpecifications(org.maltparser.core.flow.spec.ChartItemSpecification);
  public void removePostProcessChartItemSpecifications(org.maltparser.core.flow.spec.ChartItemSpecification);
  public void read(org.w3c.dom.Element, org.maltparser.core.flow.FlowChartManager) throws org.maltparser.core.exception.MaltChainedException;
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "FlowChartSystem.java"
public class org.maltparser.core.flow.system.FlowChartSystem {
  public org.maltparser.core.flow.system.FlowChartSystem();
  public void load(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void load(org.maltparser.core.plugin.PluginLoader) throws org.maltparser.core.exception.MaltChainedException;
  public void load(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public void readChartElements(org.w3c.dom.Element) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.flow.system.elem.ChartElement getChartElement(java.lang.String);
  public java.lang.String toString();
}
Compiled from "ChartAttribute.java"
public class org.maltparser.core.flow.system.elem.ChartAttribute {
  public org.maltparser.core.flow.system.elem.ChartAttribute();
  public java.lang.String getName();
  public void setName(java.lang.String);
  public java.lang.String getDefaultValue();
  public void setDefaultValue(java.lang.String);
  public void read(org.w3c.dom.Element, org.maltparser.core.flow.system.FlowChartSystem) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "ChartElement.java"
public class org.maltparser.core.flow.system.elem.ChartElement {
  public org.maltparser.core.flow.system.elem.ChartElement();
  public java.lang.String getItem();
  public void setItem(java.lang.String);
  public void addAttribute(java.lang.String, org.maltparser.core.flow.system.elem.ChartAttribute);
  public org.maltparser.core.flow.system.elem.ChartAttribute getAttribute(java.lang.String);
  public java.lang.Class<? extends org.maltparser.core.flow.item.ChartItem> getChartItemClass();
  public java.util.LinkedHashMap<java.lang.String, org.maltparser.core.flow.system.elem.ChartAttribute> getAttributes();
  public void read(org.w3c.dom.Element, org.maltparser.core.flow.system.FlowChartSystem) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "HashMap.java"
public class org.maltparser.core.helper.HashMap<K, V> implements java.util.Map<K, V>, java.io.Serializable {
  transient java.lang.Object[] keys;
  transient int size;
  transient java.lang.Object[] values;
  static java.lang.Object maskNullKey(java.lang.Object);
  static java.lang.Object unmaskNullKey(java.lang.Object);
  public org.maltparser.core.helper.HashMap();
  public org.maltparser.core.helper.HashMap(java.util.Map<? extends K, ? extends V>);
  public void clear();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public boolean equals(java.lang.Object);
  public V get(java.lang.Object);
  public int hashCode();
  public boolean isEmpty();
  public java.util.Set<K> keySet();
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public int size();
  public java.lang.String toString();
  public java.util.Collection<V> values();
  protected void doReadObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
  protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException;
  protected boolean keyEquals(java.lang.Object, java.lang.Object);
  protected int keyHashCode(java.lang.Object);
  protected boolean valueEquals(java.lang.Object, java.lang.Object);
  protected int valueHashCode(java.lang.Object);
  void ensureSizeFor(int);
  int findKey(java.lang.Object);
  int findKeyOrEmpty(java.lang.Object);
  void internalRemove(int);
  static java.lang.Object access$300();
  static {};
}
Compiled from "HashMap.java"
final class org.maltparser.core.helper.HashMap$1 implements java.io.Serializable {
  org.maltparser.core.helper.HashMap$1();
  java.lang.Object readResolve();
}
Compiled from "HashMap.java"
class org.maltparser.core.helper.HashMap$EntryIterator implements java.util.Iterator<java.util.Map$Entry<K, V>> {
  final org.maltparser.core.helper.HashMap this$0;
  public boolean hasNext();
  public java.util.Map$Entry<K, V> next();
  public void remove();
  public java.lang.Object next();
  org.maltparser.core.helper.HashMap$EntryIterator(org.maltparser.core.helper.HashMap, org.maltparser.core.helper.HashMap$1);
}
Compiled from "HashMap.java"
class org.maltparser.core.helper.HashMap$EntrySet extends java.util.AbstractSet<java.util.Map$Entry<K, V>> {
  final org.maltparser.core.helper.HashMap this$0;
  public boolean add(java.util.Map$Entry<K, V>);
  public boolean addAll(java.util.Collection<? extends java.util.Map$Entry<K, V>>);
  public void clear();
  public boolean contains(java.lang.Object);
  public int hashCode();
  public java.util.Iterator<java.util.Map$Entry<K, V>> iterator();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public int size();
  public boolean add(java.lang.Object);
  org.maltparser.core.helper.HashMap$EntrySet(org.maltparser.core.helper.HashMap, org.maltparser.core.helper.HashMap$1);
}
Compiled from "HashMap.java"
class org.maltparser.core.helper.HashMap$HashEntry implements java.util.Map$Entry<K, V> {
  final org.maltparser.core.helper.HashMap this$0;
  public org.maltparser.core.helper.HashMap$HashEntry(org.maltparser.core.helper.HashMap, int);
  public boolean equals(java.lang.Object);
  public K getKey();
  public V getValue();
  public int hashCode();
  public V setValue(V);
  public java.lang.String toString();
}
Compiled from "HashMap.java"
class org.maltparser.core.helper.HashMap$KeyIterator implements java.util.Iterator<K> {
  final org.maltparser.core.helper.HashMap this$0;
  public boolean hasNext();
  public K next();
  public void remove();
  org.maltparser.core.helper.HashMap$KeyIterator(org.maltparser.core.helper.HashMap, org.maltparser.core.helper.HashMap$1);
}
Compiled from "HashMap.java"
class org.maltparser.core.helper.HashMap$KeySet extends java.util.AbstractSet<K> {
  final org.maltparser.core.helper.HashMap this$0;
  public void clear();
  public boolean contains(java.lang.Object);
  public int hashCode();
  public java.util.Iterator<K> iterator();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public int size();
  org.maltparser.core.helper.HashMap$KeySet(org.maltparser.core.helper.HashMap, org.maltparser.core.helper.HashMap$1);
}
Compiled from "HashMap.java"
class org.maltparser.core.helper.HashMap$ValueIterator implements java.util.Iterator<V> {
  final org.maltparser.core.helper.HashMap this$0;
  public boolean hasNext();
  public V next();
  public void remove();
  org.maltparser.core.helper.HashMap$ValueIterator(org.maltparser.core.helper.HashMap, org.maltparser.core.helper.HashMap$1);
}
Compiled from "HashMap.java"
class org.maltparser.core.helper.HashMap$Values extends java.util.AbstractCollection<V> {
  final org.maltparser.core.helper.HashMap this$0;
  public void clear();
  public boolean contains(java.lang.Object);
  public int hashCode();
  public java.util.Iterator<V> iterator();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public int size();
  org.maltparser.core.helper.HashMap$Values(org.maltparser.core.helper.HashMap, org.maltparser.core.helper.HashMap$1);
}
Compiled from "HashSet.java"
public class org.maltparser.core.helper.HashSet<E> extends java.util.AbstractSet<E> implements java.io.Serializable {
  transient int size;
  transient java.lang.Object[] table;
  static java.lang.Object maskNull(java.lang.Object);
  static java.lang.Object unmaskNull(java.lang.Object);
  public org.maltparser.core.helper.HashSet();
  public org.maltparser.core.helper.HashSet(java.util.Collection<? extends E>);
  public boolean add(E);
  public boolean addAll(java.util.Collection<? extends E>);
  public void clear();
  public boolean contains(java.lang.Object);
  public java.util.Iterator<E> iterator();
  public boolean remove(java.lang.Object);
  public int size();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  protected void doReadObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
  protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException;
  protected boolean itemEquals(java.lang.Object, java.lang.Object);
  protected int itemHashCode(java.lang.Object);
  void addAll(E[]);
  void internalRemove(int);
  static java.lang.Object access$000();
  static {};
}
Compiled from "HashSet.java"
final class org.maltparser.core.helper.HashSet$1 implements java.io.Serializable {
  org.maltparser.core.helper.HashSet$1();
  java.lang.Object readResolve();
}
Compiled from "HashSet.java"
class org.maltparser.core.helper.HashSet$SetIterator implements java.util.Iterator<E> {
  final org.maltparser.core.helper.HashSet this$0;
  public org.maltparser.core.helper.HashSet$SetIterator(org.maltparser.core.helper.HashSet);
  public boolean hasNext();
  public E next();
  public void remove();
}
Compiled from "Malt04.java"
public class org.maltparser.core.helper.Malt04 {
  public org.maltparser.core.helper.Malt04();
  public static void loadAllMalt04Tagset(org.maltparser.core.options.OptionManager, int, org.maltparser.core.symbol.SymbolTableHandler, org.apache.log4j.Logger) throws org.maltparser.core.exception.MaltChainedException;
  public static void loadMalt04Posset(java.lang.String, java.lang.String, java.lang.String, org.maltparser.core.symbol.SymbolTableHandler, org.apache.log4j.Logger) throws org.maltparser.core.exception.MaltChainedException;
  public static void loadMalt04Cposset(java.lang.String, java.lang.String, java.lang.String, org.maltparser.core.symbol.SymbolTableHandler, org.apache.log4j.Logger) throws org.maltparser.core.exception.MaltChainedException;
  public static void loadMalt04Depset(java.lang.String, java.lang.String, java.lang.String, org.maltparser.core.symbol.SymbolTableHandler, org.apache.log4j.Logger) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "NoOutputStream.java"
public final class org.maltparser.core.helper.NoOutputStream extends java.io.OutputStream {
  public static final java.io.OutputStream DEVNULL;
  public void write(int);
  public void write(byte[]);
  public void write(byte[], int, int);
  static {};
}
Compiled from "NoPrintStream.java"
public final class org.maltparser.core.helper.NoPrintStream extends java.io.PrintStream {
  public static final java.io.OutputStream NO_OUTPUTSTREAM;
  public static final java.io.PrintStream NO_PRINTSTREAM;
  public java.io.PrintStream append(char);
  public java.io.PrintStream append(java.lang.CharSequence, int, int);
  public java.io.PrintStream append(java.lang.CharSequence);
  public boolean checkError();
  public void close();
  public void flush();
  public java.io.PrintStream format(java.util.Locale, java.lang.String, java.lang.Object...);
  public java.io.PrintStream format(java.lang.String, java.lang.Object...);
  public void print(boolean);
  public void print(char);
  public void print(char[]);
  public void print(double);
  public void print(float);
  public void print(int);
  public void print(long);
  public void print(java.lang.Object);
  public void print(java.lang.String);
  public java.io.PrintStream printf(java.util.Locale, java.lang.String, java.lang.Object...);
  public java.io.PrintStream printf(java.lang.String, java.lang.Object...);
  public void println();
  public void println(boolean);
  public void println(char);
  public void println(char[]);
  public void println(double);
  public void println(float);
  public void println(int);
  public void println(long);
  public void println(java.lang.Object);
  public void println(java.lang.String);
  protected void setError();
  public void write(byte[], int, int);
  public void write(int);
  public java.lang.Appendable append(char) throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException;
  static {};
}
Compiled from "SystemInfo.java"
public class org.maltparser.core.helper.SystemInfo {
  public static org.maltparser.core.helper.SystemInfo instance();
  public static java.lang.String header();
  public static java.lang.String shortHelp();
  public static java.lang.String getVersion();
  public static java.lang.String getBuildDate();
  static {};
}
Compiled from "SystemLogger.java"
public class org.maltparser.core.helper.SystemLogger {
  public static org.maltparser.core.helper.SystemLogger instance();
  public static org.apache.log4j.Logger logger();
  public org.apache.log4j.Level getSystemVerbosityLevel();
  public void setSystemVerbosityLevel(java.lang.String);
  static {};
}
Compiled from "URLFinder.java"
public class org.maltparser.core.helper.URLFinder {
  public org.maltparser.core.helper.URLFinder();
  public java.net.URL findURL(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.net.URL findURLinJars(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Util.java"
public class org.maltparser.core.helper.Util {
  public org.maltparser.core.helper.Util();
  public static java.lang.String xmlEscape(java.lang.String);
  public static int simpleTicer(org.apache.log4j.Logger, long, int, int, int);
  public static void startTicer(org.apache.log4j.Logger, long, int, int);
  public static void endTicer(org.apache.log4j.Logger, long, int, int, int);
  public static void copyfile(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public static double atof(java.lang.String);
  public static int atoi(java.lang.String) throws java.lang.NumberFormatException;
  public static void closeQuietly(java.io.Closeable);
  public static double[] copyOf(double[], int);
  public static int[] copyOf(int[], int);
  public static boolean equals(double[], double[]);
}
Compiled from "ColumnDescription.java"
public class org.maltparser.core.io.dataformat.ColumnDescription implements java.lang.Comparable<org.maltparser.core.io.dataformat.ColumnDescription> {
  public static final int INPUT;
  public static final int HEAD;
  public static final int DEPENDENCY_EDGE_LABEL;
  public static final int PHRASE_STRUCTURE_EDGE_LABEL;
  public static final int PHRASE_STRUCTURE_NODE_LABEL;
  public static final int SECONDARY_EDGE_LABEL;
  public static final int IGNORE;
  public static final int STRING;
  public static final int INTEGER;
  public static final int BOOLEAN;
  public static final int REAL;
  public org.maltparser.core.io.dataformat.ColumnDescription(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.maltparser.core.symbol.SymbolTableHandler, java.lang.String, boolean) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.ColumnDescription(java.lang.String, int, int, java.lang.String, org.maltparser.core.symbol.SymbolTableHandler, java.lang.String, boolean) throws org.maltparser.core.exception.MaltChainedException;
  public int getPosition();
  public java.lang.String getName();
  public java.lang.String getDefaultOutput();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public java.lang.String getNullValueStrategy();
  public boolean isInternal();
  public int getCategory();
  public java.lang.String getCategoryName();
  public int getType();
  public java.lang.String getTypeName();
  public int compareTo(org.maltparser.core.io.dataformat.ColumnDescription);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
  static {};
}
Compiled from "DataFormatEntry.java"
public class org.maltparser.core.io.dataformat.DataFormatEntry {
  public org.maltparser.core.io.dataformat.DataFormatEntry(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getDataFormatEntryName();
  public void setDataFormatEntryName(java.lang.String);
  public java.lang.String getCategory();
  public void setCategory(java.lang.String);
  public java.lang.String getType();
  public void setType(java.lang.String);
  public java.lang.String getDefaultOutput();
  public void setDefaultOutput(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "DataFormatException.java"
public class org.maltparser.core.io.dataformat.DataFormatException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.io.dataformat.DataFormatException(java.lang.String);
  public org.maltparser.core.io.dataformat.DataFormatException(java.lang.String, java.lang.Throwable);
}
Compiled from "DataFormatInstance.java"
public class org.maltparser.core.io.dataformat.DataFormatInstance implements java.lang.Iterable<org.maltparser.core.io.dataformat.ColumnDescription> {
  public org.maltparser.core.io.dataformat.DataFormatInstance(java.util.Map<java.lang.String, org.maltparser.core.io.dataformat.DataFormatEntry>, org.maltparser.core.symbol.SymbolTableHandler, java.lang.String, org.maltparser.core.io.dataformat.DataFormatSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.ColumnDescription addInternalColumnDescription(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.ColumnDescription addInternalColumnDescription(java.lang.String, int, int, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.ColumnDescription addInternalColumnDescription(java.lang.String, org.maltparser.core.io.dataformat.ColumnDescription) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.ColumnDescription getColumnDescriptionByName(java.lang.String);
  public java.util.Iterator<org.maltparser.core.io.dataformat.ColumnDescription> iterator();
  public org.maltparser.core.io.dataformat.DataFormatSpecification getDataFormarSpec();
  protected void createHeadColumnDescriptions();
  public org.maltparser.core.io.dataformat.ColumnDescription getHeadColumnDescription();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.io.dataformat.ColumnDescription> getHeadColumnDescriptions();
  protected void createDependencyEdgeLabelSymbolTables();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.symbol.SymbolTable> getDependencyEdgeLabelSymbolTables();
  protected void createDependencyEdgeLabelColumnDescriptions();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.io.dataformat.ColumnDescription> getDependencyEdgeLabelColumnDescriptions();
  protected void createPhraseStructureEdgeLabelSymbolTables();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.symbol.SymbolTable> getPhraseStructureEdgeLabelSymbolTables();
  protected void createPhraseStructureEdgeLabelColumnDescriptions();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.io.dataformat.ColumnDescription> getPhraseStructureEdgeLabelColumnDescriptions();
  protected void createPhraseStructureNodeLabelSymbolTables();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.symbol.SymbolTable> getPhraseStructureNodeLabelSymbolTables();
  protected void createPhraseStructureNodeLabelColumnDescriptions();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.io.dataformat.ColumnDescription> getPhraseStructureNodeLabelColumnDescriptions();
  protected void createSecondaryEdgeLabelSymbolTables();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.symbol.SymbolTable> getSecondaryEdgeLabelSymbolTables();
  protected void createSecondaryEdgeLabelColumnDescriptions();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.io.dataformat.ColumnDescription> getSecondaryEdgeLabelColumnDescriptions();
  protected void createInputSymbolTables();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.symbol.SymbolTable> getInputSymbolTables();
  protected void createInputColumnDescriptions();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.io.dataformat.ColumnDescription> getInputColumnDescriptions();
  protected void createIgnoreColumnDescriptions();
  public java.util.SortedMap<java.lang.String, org.maltparser.core.io.dataformat.ColumnDescription> getIgnoreColumnDescriptions();
  public java.util.SortedSet<org.maltparser.core.io.dataformat.ColumnDescription> getHeadColumnDescriptionSet();
  public java.util.SortedSet<org.maltparser.core.io.dataformat.ColumnDescription> getDependencyEdgeLabelColumnDescriptionSet();
  public java.util.SortedSet<org.maltparser.core.io.dataformat.ColumnDescription> getPhraseStructureEdgeLabelColumnDescriptionSet();
  public java.util.SortedSet<org.maltparser.core.io.dataformat.ColumnDescription> getPhraseStructureNodeLabelColumnDescriptionSet();
  public java.util.SortedSet<org.maltparser.core.io.dataformat.ColumnDescription> getSecondaryEdgeLabelColumnDescriptionSet();
  public java.util.SortedSet<org.maltparser.core.io.dataformat.ColumnDescription> getInputColumnDescriptionSet();
  public java.util.SortedSet<org.maltparser.core.io.dataformat.ColumnDescription> getIgnoreColumnDescriptionSet();
  public org.maltparser.core.symbol.SymbolTableHandler getSymbolTables();
  public java.lang.String toString();
}
Compiled from "DataFormatManager.java"
public class org.maltparser.core.io.dataformat.DataFormatManager {
  public org.maltparser.core.io.dataformat.DataFormatManager(java.net.URL, java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.DataFormatSpecification loadDataFormat(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.DataFormatSpecification getInputDataFormatSpec();
  public org.maltparser.core.io.dataformat.DataFormatSpecification getOutputDataFormatSpec();
  public void setInputDataFormatSpec(org.maltparser.core.io.dataformat.DataFormatSpecification);
  public void setOutputDataFormatSpec(org.maltparser.core.io.dataformat.DataFormatSpecification);
  public org.maltparser.core.io.dataformat.DataFormatSpecification getDataFormatSpec(java.lang.String);
}
Compiled from "DataFormatSpecification.java"
public class org.maltparser.core.io.dataformat.DataFormatSpecification {
  public org.maltparser.core.io.dataformat.DataFormatSpecification();
  public org.maltparser.core.io.dataformat.DataFormatInstance createDataFormatInstance(org.maltparser.core.symbol.SymbolTableHandler, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void parseDataFormatXMLfile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.helper.HashSet<org.maltparser.core.io.dataformat.DataFormatSpecification$Dependency> getDependencies();
  public void parseDataFormatXMLfile(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public void addEntry(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public org.maltparser.core.io.dataformat.DataFormatEntry getEntry(java.lang.String);
  public java.lang.String getDataFormatName();
  public org.maltparser.core.io.dataformat.DataFormatSpecification$DataStructure getDataStructure();
  public java.lang.String toString();
}
Compiled from "DataFormatSpecification.java"
public final class org.maltparser.core.io.dataformat.DataFormatSpecification$DataStructure extends java.lang.Enum<org.maltparser.core.io.dataformat.DataFormatSpecification$DataStructure> {
  public static final org.maltparser.core.io.dataformat.DataFormatSpecification$DataStructure DEPENDENCY;
  public static final org.maltparser.core.io.dataformat.DataFormatSpecification$DataStructure PHRASE;
  public static org.maltparser.core.io.dataformat.DataFormatSpecification$DataStructure[] values();
  public static org.maltparser.core.io.dataformat.DataFormatSpecification$DataStructure valueOf(java.lang.String);
  static {};
}
Compiled from "DataFormatSpecification.java"
public class org.maltparser.core.io.dataformat.DataFormatSpecification$Dependency {
  protected java.lang.String dependentOn;
  protected java.lang.String urlString;
  protected java.lang.String map;
  protected java.lang.String mapUrl;
  final org.maltparser.core.io.dataformat.DataFormatSpecification this$0;
  public org.maltparser.core.io.dataformat.DataFormatSpecification$Dependency(org.maltparser.core.io.dataformat.DataFormatSpecification, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getDependentOn();
  protected void setDependentOn(java.lang.String);
  public java.lang.String getUrlString();
  public void setUrlString(java.lang.String);
  public java.lang.String getMap();
  protected void setMap(java.lang.String);
  public java.lang.String getMapUrl();
  public void setMapUrl(java.lang.String);
  public java.lang.String toString();
}
Compiled from "OptionContainer.java"
public class org.maltparser.core.options.OptionContainer implements java.lang.Comparable<org.maltparser.core.options.OptionContainer> {
  public static final int SAVEDOPTION;
  public static final int DEPENDENCIES_RESOLVED;
  public static final int COMMANDLINE;
  public static final int OPTIONFILE;
  public org.maltparser.core.options.OptionContainer(int) throws org.maltparser.core.options.OptionException;
  public void addOptionValue(int, org.maltparser.core.options.option.Option, java.lang.Object) throws org.maltparser.core.options.OptionException;
  public java.lang.Object getOptionValue(org.maltparser.core.options.option.Option);
  public java.lang.String getOptionValueString(org.maltparser.core.options.option.Option);
  public boolean contains(int, org.maltparser.core.options.option.Option) throws org.maltparser.core.options.OptionException;
  public int getNumberOfOptionValues();
  public int getIndex();
  public int compareTo(org.maltparser.core.options.OptionContainer);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "OptionDescriptions.java"
public class org.maltparser.core.options.OptionDescriptions {
  public org.maltparser.core.options.OptionDescriptions();
  public org.maltparser.core.options.option.Option getOption(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.options.option.Option getOption(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Set<org.maltparser.core.options.option.Option> getSaveOptionSet();
  public java.util.TreeSet<java.lang.String> getOptionGroupNameSet();
  public java.util.Collection<org.maltparser.core.options.option.Option> getOptionGroupList(java.lang.String);
  public void parseOptionDescriptionXMLfile(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public void generateMaps() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toStringMaps();
  public java.lang.String toStringOptionGroup(java.lang.String);
  public java.lang.String toString();
}
Compiled from "OptionException.java"
public class org.maltparser.core.options.OptionException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.options.OptionException(java.lang.String);
  public org.maltparser.core.options.OptionException(java.lang.String, java.lang.Throwable);
}
Compiled from "OptionGroup.java"
public class org.maltparser.core.options.OptionGroup {
  public static int toStringSetting;
  public static final int WITHGROUPNAME;
  public static final int NOGROUPNAME;
  public org.maltparser.core.options.OptionGroup(java.lang.String);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public void addOption(org.maltparser.core.options.option.Option) throws org.maltparser.core.options.OptionException;
  public org.maltparser.core.options.option.Option getOption(java.lang.String);
  public java.util.Collection<org.maltparser.core.options.option.Option> getOptionList();
  public java.lang.String toString();
  static {};
}
Compiled from "OptionManager.java"
public class org.maltparser.core.options.OptionManager {
  public static final int DEFAULTVALUE;
  public static org.maltparser.core.options.OptionManager instance();
  public void loadOptionDescriptionFile() throws org.maltparser.core.exception.MaltChainedException;
  public void loadOptionDescriptionFile(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.options.OptionDescriptions getOptionDescriptions();
  public java.lang.Object getOptionValue(int, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getOptionDefaultValue(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getOptionValueNoDefault(int, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getOptionValueString(int, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getOptionValueStringNoDefault(int, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void overloadOptionValue(int, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public int getNumberOfOptionValues(int);
  public java.util.Set<java.lang.Integer> getOptionContainerIndices();
  public void loadOptions(int, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void loadOptions(int, java.io.InputStreamReader) throws org.maltparser.core.exception.MaltChainedException;
  public void saveOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void saveOptions(java.io.OutputStreamWriter) throws org.maltparser.core.exception.MaltChainedException;
  public void saveOptions(int, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void saveOptions(int, java.io.OutputStreamWriter) throws org.maltparser.core.exception.MaltChainedException;
  public void generateMaps() throws org.maltparser.core.exception.MaltChainedException;
  public boolean parseCommandLine(java.lang.String, int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean parseCommandLine(java.lang.String[], int) throws org.maltparser.core.exception.MaltChainedException;
  public void parseOptionInstanceXMLfile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toStringPrettyValues(int, java.util.Set<java.lang.String>) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
  static {};
}
Compiled from "OptionValues.java"
public class org.maltparser.core.options.OptionValues {
  public org.maltparser.core.options.OptionValues();
  public java.lang.Object getOptionValue(int, org.maltparser.core.options.option.Option) throws org.maltparser.core.options.OptionException;
  public java.lang.String getOptionValueString(int, org.maltparser.core.options.option.Option) throws org.maltparser.core.options.OptionException;
  public java.lang.Object getOptionValue(org.maltparser.core.options.option.Option) throws org.maltparser.core.options.OptionException;
  public int getNumberOfOptionValues(int);
  public java.util.Set<java.lang.Integer> getOptionContainerIndices();
  public boolean addOptionValue(int, int, org.maltparser.core.options.option.Option, java.lang.Object) throws org.maltparser.core.options.OptionException;
  public java.lang.String toString();
}
Compiled from "BoolOption.java"
public class org.maltparser.core.options.option.BoolOption extends org.maltparser.core.options.option.Option {
  public org.maltparser.core.options.option.BoolOption(org.maltparser.core.options.OptionGroup, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getValueObject(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getDefaultValueObject() throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDefaultValueString();
  public java.lang.String getStringRepresentation(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "ClassOption.java"
public class org.maltparser.core.options.option.ClassOption extends org.maltparser.core.options.option.Option {
  public org.maltparser.core.options.option.ClassOption(org.maltparser.core.options.OptionGroup, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getValueObject(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getDefaultValueObject() throws org.maltparser.core.options.OptionException;
  public java.lang.String getLegalValueString(java.lang.Class<?>) throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?> getClazz(java.lang.String);
  public void addLegalValue(java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDefaultValueString();
  public java.lang.String getStringRepresentation(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "EnumOption.java"
public class org.maltparser.core.options.option.EnumOption extends org.maltparser.core.options.option.Option {
  public org.maltparser.core.options.option.EnumOption(org.maltparser.core.options.OptionGroup, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getValueObject(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getDefaultValueObject() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDefaultValueString();
  public void setDefaultValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void addLegalValue(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void addLegalValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getStringRepresentation(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "IntegerOption.java"
public class org.maltparser.core.options.option.IntegerOption extends org.maltparser.core.options.option.Option {
  public org.maltparser.core.options.option.IntegerOption(org.maltparser.core.options.OptionGroup, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getValueObject(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getDefaultValueObject() throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDefaultValueString();
  public java.lang.String getStringRepresentation(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "Option.java"
public abstract class org.maltparser.core.options.option.Option implements java.lang.Comparable<org.maltparser.core.options.option.Option> {
  public static final int NONE;
  public static final int TRAIN;
  public static final int PROCESS;
  public static final int BOTH;
  public static final int SAVE;
  public org.maltparser.core.options.option.Option(org.maltparser.core.options.OptionGroup, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.Object getValueObject(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.Object getDefaultValueObject() throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getDefaultValueString();
  public abstract void setDefaultValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getStringRepresentation(java.lang.Object);
  public org.maltparser.core.options.OptionGroup getGroup();
  public void setGroup(org.maltparser.core.options.OptionGroup);
  public java.lang.String getName();
  public void setName(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getShortDescription();
  public void setShortDescription(java.lang.String);
  public java.lang.String getFlag();
  public void setFlag(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public int getUsage();
  public void setUsage(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void setUsage(int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isAmbiguous();
  public void setAmbiguous(boolean);
  public int compareTo(org.maltparser.core.options.option.Option);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "StringEnumOption.java"
public class org.maltparser.core.options.option.StringEnumOption extends org.maltparser.core.options.option.Option {
  public org.maltparser.core.options.option.StringEnumOption(org.maltparser.core.options.OptionGroup, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getValueObject(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getDefaultValueObject() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getLegalValueString(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getLegalValueMapToString(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDefaultValueString();
  public java.lang.String getMapto(java.lang.String);
  public void addLegalValue(java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getStringRepresentation(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "StringOption.java"
public class org.maltparser.core.options.option.StringOption extends org.maltparser.core.options.option.Option {
  public org.maltparser.core.options.option.StringOption(org.maltparser.core.options.OptionGroup, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getValueObject(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getDefaultValueObject() throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultValue(java.lang.String);
  public java.lang.String getDefaultValueString();
  public java.lang.String getStringRepresentation(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "UnaryOption.java"
public class org.maltparser.core.options.option.UnaryOption extends org.maltparser.core.options.option.Option {
  public org.maltparser.core.options.option.UnaryOption(org.maltparser.core.options.OptionGroup, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getValueObject(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Object getDefaultValueObject() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDefaultValueString();
  public java.lang.String getStringRepresentation(java.lang.Object);
  public void setDefaultValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "JarLoader.java"
public class org.maltparser.core.plugin.JarLoader extends java.security.SecureClassLoader {
  public org.maltparser.core.plugin.JarLoader(java.lang.ClassLoader);
  protected java.lang.Class<?> findClass(java.lang.String);
  public boolean readJarFile(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?> getClass(java.lang.String);
  protected void checkPackageAccess(java.lang.String);
  public java.lang.String toString();
}
Compiled from "Plugin.java"
public class org.maltparser.core.plugin.Plugin {
  public org.maltparser.core.plugin.Plugin(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.plugin.Plugin(java.io.File) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.jar.JarFile getArchive();
  public void setArchive(java.util.jar.JarFile);
  public java.lang.String getPluginName();
  public void setPluginName(java.lang.String);
  public java.net.URL getUrl();
  public void setUrl(java.net.URL);
  public java.lang.String toString();
}
Compiled from "PluginException.java"
public class org.maltparser.core.plugin.PluginException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.plugin.PluginException(java.lang.String);
  public org.maltparser.core.plugin.PluginException(java.lang.String, java.lang.Throwable);
}
Compiled from "PluginLoader.java"
public class org.maltparser.core.plugin.PluginLoader implements java.lang.Iterable<org.maltparser.core.plugin.Plugin> {
  public static org.maltparser.core.plugin.PluginLoader instance();
  public void loadPlugins(java.io.File) throws org.maltparser.core.exception.MaltChainedException;
  public void loadPlugins(java.io.File[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?> getClass(java.lang.String);
  public java.lang.Object newInstance(java.lang.String, java.lang.Class<?>[], java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Iterator<org.maltparser.core.plugin.Plugin> iterator();
  public java.lang.String toString();
  static {};
}
Compiled from "ObjectPool.java"
public abstract class org.maltparser.core.pool.ObjectPool<T> {
  protected int keepThreshold;
  public org.maltparser.core.pool.ObjectPool();
  public org.maltparser.core.pool.ObjectPool(int);
  public int getKeepThreshold();
  public void setKeepThreshold(int);
  protected abstract T create() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void resetObject(T) throws org.maltparser.core.exception.MaltChainedException;
  public abstract T checkOut() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void checkIn(T) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void checkInAll() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ObjectPoolList.java"
public abstract class org.maltparser.core.pool.ObjectPoolList<T> extends org.maltparser.core.pool.ObjectPool<T> {
  public org.maltparser.core.pool.ObjectPoolList();
  public org.maltparser.core.pool.ObjectPoolList(int);
  protected abstract T create() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void resetObject(T) throws org.maltparser.core.exception.MaltChainedException;
  public synchronized T checkOut() throws org.maltparser.core.exception.MaltChainedException;
  public synchronized void checkIn(T) throws org.maltparser.core.exception.MaltChainedException;
  public synchronized void checkInAll() throws org.maltparser.core.exception.MaltChainedException;
  public int getCurrentSize();
  public void setCurrentSize(int);
  public int size();
  public java.lang.String toString();
}
Compiled from "ObjectPoolSet.java"
public abstract class org.maltparser.core.pool.ObjectPoolSet<T> extends org.maltparser.core.pool.ObjectPool<T> {
  public org.maltparser.core.pool.ObjectPoolSet();
  public org.maltparser.core.pool.ObjectPoolSet(int);
  protected abstract T create() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void resetObject(T) throws org.maltparser.core.exception.MaltChainedException;
  public synchronized T checkOut() throws org.maltparser.core.exception.MaltChainedException;
  public synchronized void checkIn(T) throws org.maltparser.core.exception.MaltChainedException;
  public synchronized void checkInAll() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "Propagation.java"
public class org.maltparser.core.propagation.Propagation {
  public org.maltparser.core.propagation.Propagation(org.maltparser.core.propagation.spec.PropagationSpec, org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void propagate(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "PropagationException.java"
public class org.maltparser.core.propagation.PropagationException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.propagation.PropagationException(java.lang.String);
  public org.maltparser.core.propagation.PropagationException(java.lang.String, java.lang.Throwable);
}
Compiled from "PropagationManager.java"
public class org.maltparser.core.propagation.PropagationManager {
  public org.maltparser.core.propagation.PropagationManager(org.maltparser.core.config.ConfigurationDir);
  public void loadSpecification(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void propagate(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.propagation.spec.PropagationSpecs getPropagationSpecs();
  public org.maltparser.core.config.ConfigurationDir getConfigDirectory();
  public void setConfigDirectory(org.maltparser.core.config.ConfigurationDir);
  public org.maltparser.core.propagation.Propagations getPropagations();
}
Compiled from "Propagations.java"
public class org.maltparser.core.propagation.Propagations {
  public org.maltparser.core.propagation.Propagations(org.maltparser.core.propagation.spec.PropagationSpecs, org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void propagate(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.ArrayList<org.maltparser.core.propagation.Propagation> getPropagations();
  public java.lang.String toString();
}
Compiled from "PropagationSpec.java"
public class org.maltparser.core.propagation.spec.PropagationSpec {
  public static final long serialVersionUID;
  public org.maltparser.core.propagation.spec.PropagationSpec(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getFrom();
  public void setFrom(java.lang.String);
  public java.lang.String getTo();
  public void setTo(java.lang.String);
  public java.lang.String getFor();
  public void setFor(java.lang.String);
  public java.lang.String getOver();
  public void setOver(java.lang.String);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "PropagationSpecs.java"
public class org.maltparser.core.propagation.spec.PropagationSpecs extends java.util.ArrayList<org.maltparser.core.propagation.spec.PropagationSpec> {
  public static final long serialVersionUID;
  public org.maltparser.core.propagation.spec.PropagationSpecs();
  public java.lang.String toString();
}
Compiled from "PropagationSpecsReader.java"
public class org.maltparser.core.propagation.spec.PropagationSpecsReader {
  public org.maltparser.core.propagation.spec.PropagationSpecsReader();
  public void load(java.net.URL, org.maltparser.core.propagation.spec.PropagationSpecs) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SymbolException.java"
public class org.maltparser.core.symbol.SymbolException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.symbol.SymbolException(java.lang.String);
  public org.maltparser.core.symbol.SymbolException(java.lang.String, java.lang.Throwable);
}
Compiled from "SymbolTable.java"
public interface org.maltparser.core.symbol.SymbolTable extends org.maltparser.core.symbol.Table {
  public abstract int addSymbol(java.lang.StringBuilder) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.util.Set<java.lang.Integer> getCodes();
  public abstract void printSymbolTable(org.apache.log4j.Logger) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void save(java.io.BufferedWriter) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void load(java.io.BufferedReader) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getValueCounter();
  public abstract int getNullValueCode(org.maltparser.core.symbol.nullvalue.NullValues$NullValueId) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getNullValueSymbol(org.maltparser.core.symbol.nullvalue.NullValues$NullValueId) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean isNullValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean isNullValue(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void copy(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SymbolTableHandler.java"
public interface org.maltparser.core.symbol.SymbolTableHandler extends org.maltparser.core.symbol.TableHandler {
  public abstract org.maltparser.core.symbol.SymbolTable addSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.symbol.SymbolTable addSymbolTable(java.lang.String, org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.symbol.SymbolTable addSymbolTable(java.lang.String, int, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.symbol.SymbolTable getSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.util.Set<java.lang.String> getSymbolTableNames();
  public abstract void cleanUp();
  public abstract void save(java.io.OutputStreamWriter) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void save(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void load(java.io.InputStreamReader) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void load(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void printSymbolTables(org.apache.log4j.Logger) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.symbol.SymbolTable loadTagset(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.Table addSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.Table getSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Table.java"
public interface org.maltparser.core.symbol.Table {
  public abstract int addSymbol(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getSymbolCodeToString(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getSymbolStringToCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getName();
  public abstract int size();
}
Compiled from "TableFeature.java"
public abstract class org.maltparser.core.symbol.TableFeature implements org.maltparser.core.feature.function.FeatureFunction,org.maltparser.core.feature.function.Modifiable {
  protected org.maltparser.core.feature.value.SingleFeatureValue featureValue;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected java.lang.String tableName;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected int type;
  public org.maltparser.core.symbol.TableFeature() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void update() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.Class<?>[] getParameterTypes();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public void updateCardinality();
  public void setFeatureValue(int) throws org.maltparser.core.exception.MaltChainedException;
  public void setFeatureValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public void setTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public boolean equals(java.lang.Object);
  public void setTableName(java.lang.String);
  public java.lang.String getTableName();
  public int getType();
  public void setType(int);
  public java.lang.String getMapIdentifier();
  public java.lang.String toString();
}
Compiled from "TableHandler.java"
public interface org.maltparser.core.symbol.TableHandler {
  public abstract org.maltparser.core.symbol.Table getSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.symbol.Table addSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "InputNullValues.java"
public class org.maltparser.core.symbol.nullvalue.InputNullValues extends org.maltparser.core.symbol.nullvalue.NullValues {
  public org.maltparser.core.symbol.nullvalue.InputNullValues(java.lang.String, org.maltparser.core.symbol.SymbolTable);
  protected void makeNullValues();
  protected void setNullValueEncoding(java.lang.String);
  public java.lang.String toString();
}
Compiled from "NullValues.java"
public abstract class org.maltparser.core.symbol.nullvalue.NullValues {
  protected org.maltparser.core.helper.HashMap<org.maltparser.core.symbol.nullvalue.NullValues$NullValueId, java.lang.String> nullValue2SymbolMap;
  protected org.maltparser.core.helper.HashMap<org.maltparser.core.symbol.nullvalue.NullValues$NullValueId, java.lang.Integer> nullValue2CodeMap;
  protected org.maltparser.core.helper.HashMap<java.lang.String, java.lang.Integer> symbol2CodeMap;
  protected java.util.SortedMap<java.lang.Integer, java.lang.String> code2SymbolMap;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree nullValueEncoding;
  protected java.lang.String nullValueStrategy;
  protected int nextCode;
  public org.maltparser.core.symbol.nullvalue.NullValues(org.maltparser.core.symbol.SymbolTable);
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public java.lang.String getNullValueStrategy();
  protected void setNullValueStrategy(java.lang.String);
  public org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree getNullValueEncoding();
  public int getNextCode();
  protected void setNextCode(int);
  public boolean isNullValue(int);
  public boolean isNullValue(java.lang.String);
  public boolean isNullValue(java.lang.StringBuilder);
  public int nullvalueToCode(org.maltparser.core.symbol.nullvalue.NullValues$NullValueId) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String nullvalueToSymbol(org.maltparser.core.symbol.nullvalue.NullValues$NullValueId) throws org.maltparser.core.exception.MaltChainedException;
  public int symbolToCode(java.lang.String);
  public int symbolToCode(java.lang.StringBuilder);
  public java.lang.String codeToSymbol(int);
  protected abstract void setNullValueEncoding(java.lang.String);
  protected abstract void makeNullValues();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "NullValues.java"
public final class org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree extends java.lang.Enum<org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree> {
  public static final org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree NONE;
  public static final org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree ONE;
  public static final org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree ROOTNODE;
  public static final org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree NOVALUE;
  public static org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree[] values();
  public static org.maltparser.core.symbol.nullvalue.NullValues$NullValueDegree valueOf(java.lang.String);
  static {};
}
Compiled from "NullValues.java"
public final class org.maltparser.core.symbol.nullvalue.NullValues$NullValueId extends java.lang.Enum<org.maltparser.core.symbol.nullvalue.NullValues$NullValueId> {
  public static final org.maltparser.core.symbol.nullvalue.NullValues$NullValueId NO_NODE;
  public static final org.maltparser.core.symbol.nullvalue.NullValues$NullValueId ROOT_NODE;
  public static final org.maltparser.core.symbol.nullvalue.NullValues$NullValueId NO_VALUE;
  public static org.maltparser.core.symbol.nullvalue.NullValues$NullValueId[] values();
  public static org.maltparser.core.symbol.nullvalue.NullValues$NullValueId valueOf(java.lang.String);
  static {};
}
Compiled from "OutputNullValues.java"
public class org.maltparser.core.symbol.nullvalue.OutputNullValues extends org.maltparser.core.symbol.nullvalue.NullValues {
  public org.maltparser.core.symbol.nullvalue.OutputNullValues(java.lang.String, org.maltparser.core.symbol.SymbolTable);
  protected void setNullValueEncoding(java.lang.String);
  protected void makeNullValues();
  public java.lang.String toString();
}
Compiled from "Trie.java"
public class org.maltparser.core.symbol.trie.Trie {
  public org.maltparser.core.symbol.trie.Trie();
  public org.maltparser.core.symbol.trie.TrieNode addValue(java.lang.String, org.maltparser.core.symbol.trie.TrieSymbolTable, int) throws org.maltparser.core.symbol.SymbolException;
  public org.maltparser.core.symbol.trie.TrieNode addValue(java.lang.StringBuilder, org.maltparser.core.symbol.trie.TrieSymbolTable, int) throws org.maltparser.core.symbol.SymbolException;
  public java.lang.String getValue(org.maltparser.core.symbol.trie.TrieNode, org.maltparser.core.symbol.trie.TrieSymbolTable);
  public java.lang.Integer getEntry(java.lang.String, org.maltparser.core.symbol.trie.TrieSymbolTable);
  public boolean equals(java.lang.Object);
  public int hashCode();
}
Compiled from "TrieEntry.java"
public class org.maltparser.core.symbol.trie.TrieEntry {
  public org.maltparser.core.symbol.trie.TrieEntry(int, boolean);
  public int getCode();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "TrieNode.java"
public class org.maltparser.core.symbol.trie.TrieNode {
  public org.maltparser.core.symbol.trie.TrieNode(char, org.maltparser.core.symbol.trie.TrieNode);
  public org.maltparser.core.symbol.trie.TrieNode getOrAddChild(boolean, char, org.maltparser.core.symbol.trie.TrieSymbolTable, int) throws org.maltparser.core.symbol.SymbolException;
  public org.maltparser.core.symbol.trie.TrieNode getChild(char);
  public java.lang.Integer getEntry(org.maltparser.core.symbol.trie.TrieSymbolTable);
  public char getCharacter();
  public org.maltparser.core.symbol.trie.TrieNode getParent();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "TrieSymbolTable.java"
public class org.maltparser.core.symbol.trie.TrieSymbolTable implements org.maltparser.core.symbol.SymbolTable {
  public org.maltparser.core.symbol.trie.TrieSymbolTable(java.lang.String, org.maltparser.core.symbol.trie.Trie, int, java.lang.String, int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.trie.TrieSymbolTable(java.lang.String, org.maltparser.core.symbol.trie.Trie, int);
  public int addSymbol(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public int addSymbol(java.lang.StringBuilder) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSymbolCodeToString(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getSymbolStringToCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void clearTmpStorage();
  public java.lang.String getNullValueStrategy();
  public int getColumnCategory();
  public void printSymbolTable(org.apache.log4j.Logger) throws org.maltparser.core.exception.MaltChainedException;
  public void saveHeader(java.io.BufferedWriter) throws org.maltparser.core.exception.MaltChainedException;
  public int size();
  public void save(java.io.BufferedWriter) throws org.maltparser.core.exception.MaltChainedException;
  public void load(java.io.BufferedReader) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public int getValueCounter();
  protected void updateValueCounter(int);
  protected int increaseValueCounter();
  public int getNullValueCode(org.maltparser.core.symbol.nullvalue.NullValues$NullValueId) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getNullValueSymbol(org.maltparser.core.symbol.nullvalue.NullValues$NullValueId) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isNullValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isNullValue(int) throws org.maltparser.core.exception.MaltChainedException;
  public void copy(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.SortedMap<java.lang.Integer, org.maltparser.core.symbol.trie.TrieNode> getCodeTable();
  public java.util.Set<java.lang.Integer> getCodes();
  protected org.maltparser.core.symbol.trie.Trie getTrie();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "TrieSymbolTableHandler.java"
public class org.maltparser.core.symbol.trie.TrieSymbolTableHandler implements org.maltparser.core.symbol.SymbolTableHandler {
  public static final int ADD_NEW_TO_TRIE;
  public static final int ADD_NEW_TO_TMP_STORAGE;
  public org.maltparser.core.symbol.trie.TrieSymbolTableHandler(int);
  public org.maltparser.core.symbol.trie.TrieSymbolTable addSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.trie.TrieSymbolTable addSymbolTable(java.lang.String, org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.trie.TrieSymbolTable addSymbolTable(java.lang.String, int, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.trie.TrieSymbolTable getSymbolTable(java.lang.String);
  public java.util.Set<java.lang.String> getSymbolTableNames();
  public void cleanUp();
  public void save(java.io.OutputStreamWriter) throws org.maltparser.core.exception.MaltChainedException;
  public void save(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void loadHeader(java.io.BufferedReader) throws org.maltparser.core.exception.MaltChainedException;
  public void load(java.io.InputStreamReader) throws org.maltparser.core.exception.MaltChainedException;
  public void load(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.SymbolTable loadTagset(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void printSymbolTables(org.apache.log4j.Logger) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.SymbolTable getSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.SymbolTable addSymbolTable(java.lang.String, int, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.SymbolTable addSymbolTable(java.lang.String, org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.SymbolTable addSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.Table addSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.Table getSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "CopyChartItem.java"
public class org.maltparser.core.syntaxgraph.CopyChartItem extends org.maltparser.core.flow.item.ChartItem {
  public org.maltparser.core.syntaxgraph.CopyChartItem();
  public void initialize(org.maltparser.core.flow.FlowChartInstance, org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public int preprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public int process(int) throws org.maltparser.core.exception.MaltChainedException;
  public int postprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public void copyTerminalStructure(org.maltparser.core.syntaxgraph.TokenStructure, org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void copyPartialDependencyStructure(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "DependencyGraph.java"
public class org.maltparser.core.syntaxgraph.DependencyGraph extends org.maltparser.core.syntaxgraph.Sentence implements org.maltparser.core.syntaxgraph.DependencyStructure {
  public org.maltparser.core.syntaxgraph.DependencyGraph(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode addDependencyNode() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode addDependencyNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getDependencyNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public int nDependencyNode();
  public int getHighestDependencyNodeIndex();
  public org.maltparser.core.syntaxgraph.edge.Edge addDependencyEdge(int, int) throws org.maltparser.core.exception.MaltChainedException;
  protected org.maltparser.core.syntaxgraph.edge.Edge addDependencyEdge(org.maltparser.core.syntaxgraph.node.DependencyNode, org.maltparser.core.syntaxgraph.node.DependencyNode) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.Edge moveDependencyEdge(int, int) throws org.maltparser.core.exception.MaltChainedException;
  protected org.maltparser.core.syntaxgraph.edge.Edge moveDependencyEdge(org.maltparser.core.syntaxgraph.node.DependencyNode, org.maltparser.core.syntaxgraph.node.DependencyNode) throws org.maltparser.core.exception.MaltChainedException;
  public void removeDependencyEdge(int, int) throws org.maltparser.core.exception.MaltChainedException;
  protected void removeDependencyEdge(org.maltparser.core.syntaxgraph.node.Node, org.maltparser.core.syntaxgraph.node.Node) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.Edge addSecondaryEdge(org.maltparser.core.syntaxgraph.node.ComparableNode, org.maltparser.core.syntaxgraph.node.ComparableNode) throws org.maltparser.core.exception.MaltChainedException;
  public void removeSecondaryEdge(org.maltparser.core.syntaxgraph.node.ComparableNode, org.maltparser.core.syntaxgraph.node.ComparableNode) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasLabeledDependency(int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isConnected();
  public boolean isProjective() throws org.maltparser.core.exception.MaltChainedException;
  public boolean isTree();
  public boolean isSingleHeaded();
  public boolean isSingleHeadedConstraint();
  public void setSingleHeadedConstraint(boolean);
  public int nNonProjectiveEdges() throws org.maltparser.core.exception.MaltChainedException;
  public int nEdges();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> getEdges();
  public java.util.SortedSet<java.lang.Integer> getDependencyIndices();
  protected org.maltparser.core.syntaxgraph.node.DependencyNode link(org.maltparser.core.syntaxgraph.node.DependencyNode, org.maltparser.core.syntaxgraph.node.DependencyNode);
  public void linkAllTreesToRoot() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.LabelSet getDefaultRootEdgeLabels() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDefaultRootEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public int getDefaultRootEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultRootEdgeLabel(org.maltparser.core.symbol.SymbolTable, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultRootEdgeLabels(java.lang.String, java.util.SortedMap<java.lang.String, org.maltparser.core.symbol.SymbolTable>) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getDependencyRoot();
  public java.lang.String toString();
}
Compiled from "DependencyGraph.java"
class org.maltparser.core.syntaxgraph.DependencyGraph$1 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.edge.Edge> {
  final org.maltparser.core.syntaxgraph.DependencyGraph this$0;
  org.maltparser.core.syntaxgraph.DependencyGraph$1(org.maltparser.core.syntaxgraph.DependencyGraph);
  protected org.maltparser.core.syntaxgraph.edge.Edge create();
  public void resetObject(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "DependencyStructure.java"
public interface org.maltparser.core.syntaxgraph.DependencyStructure extends org.maltparser.core.syntaxgraph.TokenStructure,org.maltparser.core.syntaxgraph.SecEdgeStructure {
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode addDependencyNode() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode addDependencyNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getDependencyNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int nDependencyNode();
  public abstract int getHighestDependencyNodeIndex();
  public abstract org.maltparser.core.syntaxgraph.edge.Edge addDependencyEdge(int, int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.edge.Edge moveDependencyEdge(int, int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void removeDependencyEdge(int, int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int nEdges();
  public abstract java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> getEdges();
  public abstract java.util.SortedSet<java.lang.Integer> getDependencyIndices();
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getDependencyRoot();
  public abstract boolean hasLabeledDependency(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean isConnected();
  public abstract boolean isProjective() throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean isSingleHeaded();
  public abstract boolean isTree();
  public abstract int nNonProjectiveEdges() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void linkAllTreesToRoot() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.LabelSet getDefaultRootEdgeLabels() throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getDefaultRootEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getDefaultRootEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void setDefaultRootEdgeLabel(org.maltparser.core.symbol.SymbolTable, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void setDefaultRootEdgeLabels(java.lang.String, java.util.SortedMap<java.lang.String, org.maltparser.core.symbol.SymbolTable>) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Element.java"
public interface org.maltparser.core.syntaxgraph.Element {
  public abstract void addLabel(org.maltparser.core.symbol.SymbolTable, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void addLabel(org.maltparser.core.symbol.SymbolTable, int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void addLabel(org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean hasLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean isLabeled();
  public abstract int nLabels();
  public abstract java.util.Set<org.maltparser.core.symbol.SymbolTable> getLabelTypes();
  public abstract org.maltparser.core.syntaxgraph.LabelSet getLabelSet();
  public abstract void removeLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void removeLabels() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.SyntaxGraph getBelongsToGraph();
  public abstract void setBelongsToGraph(org.maltparser.core.syntaxgraph.SyntaxGraph);
  public abstract void clear() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "GraphAnalyzerChartItem.java"
public class org.maltparser.core.syntaxgraph.GraphAnalyzerChartItem extends org.maltparser.core.flow.item.ChartItem {
  public org.maltparser.core.syntaxgraph.GraphAnalyzerChartItem();
  public void initialize(org.maltparser.core.flow.FlowChartInstance, org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public int preprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public int process(int) throws org.maltparser.core.exception.MaltChainedException;
  public int postprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "GraphElement.java"
public abstract class org.maltparser.core.syntaxgraph.GraphElement extends java.util.Observable implements org.maltparser.core.syntaxgraph.Element {
  public org.maltparser.core.syntaxgraph.GraphElement();
  public void addLabel(org.maltparser.core.symbol.SymbolTable, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void addLabel(org.maltparser.core.symbol.SymbolTable, int) throws org.maltparser.core.exception.MaltChainedException;
  public void addLabel(org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public int getLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isLabeled();
  public int nLabels();
  public java.util.Set<org.maltparser.core.symbol.SymbolTable> getLabelTypes();
  public org.maltparser.core.syntaxgraph.LabelSet getLabelSet();
  public void removeLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public void removeLabels() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.SyntaxGraph getBelongsToGraph();
  public void setBelongsToGraph(org.maltparser.core.syntaxgraph.SyntaxGraph);
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(org.maltparser.core.syntaxgraph.GraphElement);
  public java.lang.String toString();
}
Compiled from "LabelSet.java"
public class org.maltparser.core.syntaxgraph.LabelSet extends java.util.LinkedHashMap<org.maltparser.core.symbol.SymbolTable, java.lang.Integer> {
  public static final long serialVersionUID;
  public org.maltparser.core.syntaxgraph.LabelSet();
  public org.maltparser.core.syntaxgraph.LabelSet(int);
  public org.maltparser.core.syntaxgraph.LabelSet(int, float);
  public org.maltparser.core.syntaxgraph.LabelSet(org.maltparser.core.syntaxgraph.LabelSet);
}
Compiled from "LabeledStructure.java"
public interface org.maltparser.core.syntaxgraph.LabeledStructure {
  public abstract org.maltparser.core.symbol.SymbolTableHandler getSymbolTables();
  public abstract void setSymbolTables(org.maltparser.core.symbol.SymbolTableHandler);
  public abstract void addLabel(org.maltparser.core.syntaxgraph.Element, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.LabelSet checkOutNewLabelSet() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void checkInLabelSet(org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "MappablePhraseStructureGraph.java"
public class org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph extends org.maltparser.core.syntaxgraph.Sentence implements org.maltparser.core.syntaxgraph.DependencyStructure,org.maltparser.core.syntaxgraph.PhraseStructure {
  public org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode addDependencyNode() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode addDependencyNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getDependencyNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public int nDependencyNode();
  public int getHighestDependencyNodeIndex();
  public org.maltparser.core.syntaxgraph.edge.Edge addDependencyEdge(int, int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.Edge addDependencyEdge(org.maltparser.core.syntaxgraph.node.DependencyNode, org.maltparser.core.syntaxgraph.node.DependencyNode) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.Edge moveDependencyEdge(int, int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.Edge moveDependencyEdge(org.maltparser.core.syntaxgraph.node.DependencyNode, org.maltparser.core.syntaxgraph.node.DependencyNode) throws org.maltparser.core.exception.MaltChainedException;
  public void removeDependencyEdge(int, int) throws org.maltparser.core.exception.MaltChainedException;
  protected void removeDependencyEdge(org.maltparser.core.syntaxgraph.node.Node, org.maltparser.core.syntaxgraph.node.Node) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.Edge addSecondaryEdge(org.maltparser.core.syntaxgraph.node.ComparableNode, org.maltparser.core.syntaxgraph.node.ComparableNode) throws org.maltparser.core.exception.MaltChainedException;
  public void removeSecondaryEdge(org.maltparser.core.syntaxgraph.node.ComparableNode, org.maltparser.core.syntaxgraph.node.ComparableNode) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasLabeledDependency(int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isConnected();
  public boolean isProjective() throws org.maltparser.core.exception.MaltChainedException;
  public boolean isTree();
  public boolean isSingleHeaded();
  public boolean isSingleHeadedConstraint();
  public void setSingleHeadedConstraint(boolean);
  public int nNonProjectiveEdges() throws org.maltparser.core.exception.MaltChainedException;
  public int nEdges();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> getEdges();
  public java.util.SortedSet<java.lang.Integer> getDependencyIndices();
  protected org.maltparser.core.syntaxgraph.node.DependencyNode link(org.maltparser.core.syntaxgraph.node.DependencyNode, org.maltparser.core.syntaxgraph.node.DependencyNode);
  public void linkAllTerminalsToRoot() throws org.maltparser.core.exception.MaltChainedException;
  public void linkAllTreesToRoot() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.LabelSet getDefaultRootEdgeLabels() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDefaultRootEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public int getDefaultRootEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultRootEdgeLabel(org.maltparser.core.symbol.SymbolTable, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultRootEdgeLabels(java.lang.String, java.util.SortedMap<java.lang.String, org.maltparser.core.symbol.SymbolTable>) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getDependencyRoot();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode addTerminalNode() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode addTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getTerminalNode(int);
  public int nTerminalNode();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode addNonTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode addNonTerminalNode() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getNonTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getHighestNonTerminalIndex();
  public java.util.Set<java.lang.Integer> getNonTerminalIndices();
  public boolean hasNonTerminals();
  public int nNonTerminals();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getPhraseStructureRoot();
  public org.maltparser.core.syntaxgraph.edge.Edge addPhraseStructureEdge(org.maltparser.core.syntaxgraph.node.PhraseStructureNode, org.maltparser.core.syntaxgraph.node.PhraseStructureNode) throws org.maltparser.core.exception.MaltChainedException;
  public void update(java.util.Observable, java.lang.Object);
  public org.maltparser.core.syntaxgraph.ds2ps.LosslessMapping getMapping();
  public void setMapping(org.maltparser.core.syntaxgraph.ds2ps.LosslessMapping);
  public void addLabel(org.maltparser.core.syntaxgraph.Element, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void removePhraseStructureEdge(org.maltparser.core.syntaxgraph.node.PhraseStructureNode, org.maltparser.core.syntaxgraph.node.PhraseStructureNode) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isContinuous();
  public boolean isContinuousExcludeTerminalsAttachToRoot();
  public java.lang.String toStringTerminalNode(org.maltparser.core.syntaxgraph.node.TokenNode);
  public java.lang.String toStringNonTerminalNode(org.maltparser.core.syntaxgraph.node.NonTerminalNode);
  public java.lang.String toString();
}
Compiled from "MappablePhraseStructureGraph.java"
class org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph$1 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.edge.Edge> {
  final org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph this$0;
  org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph$1(org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph);
  protected org.maltparser.core.syntaxgraph.edge.Edge create();
  public void resetObject(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "MappablePhraseStructureGraph.java"
class org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph$2 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.node.NonTerminal> {
  final org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph this$0;
  org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph$2(org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph);
  protected org.maltparser.core.syntaxgraph.node.NonTerminal create() throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(org.maltparser.core.syntaxgraph.node.NonTerminal) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "PhraseStructure.java"
public interface org.maltparser.core.syntaxgraph.PhraseStructure extends org.maltparser.core.syntaxgraph.TokenStructure,org.maltparser.core.syntaxgraph.SecEdgeStructure {
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode addTerminalNode() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode addTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode getTerminalNode(int);
  public abstract int nTerminalNode();
  public abstract org.maltparser.core.syntaxgraph.edge.Edge addPhraseStructureEdge(org.maltparser.core.syntaxgraph.node.PhraseStructureNode, org.maltparser.core.syntaxgraph.node.PhraseStructureNode) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void removePhraseStructureEdge(org.maltparser.core.syntaxgraph.node.PhraseStructureNode, org.maltparser.core.syntaxgraph.node.PhraseStructureNode) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int nEdges();
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode getPhraseStructureRoot();
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode getNonTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode addNonTerminalNode() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode addNonTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getHighestNonTerminalIndex();
  public abstract java.util.Set<java.lang.Integer> getNonTerminalIndices();
  public abstract boolean hasNonTerminals();
  public abstract int nNonTerminals();
  public abstract boolean isContinuous();
  public abstract boolean isContinuousExcludeTerminalsAttachToRoot();
}
Compiled from "PhraseStructureGraph.java"
public class org.maltparser.core.syntaxgraph.PhraseStructureGraph extends org.maltparser.core.syntaxgraph.Sentence implements org.maltparser.core.syntaxgraph.PhraseStructure {
  protected final org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.edge.Edge> edgePool;
  protected final java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> graphEdges;
  protected final java.util.SortedMap<java.lang.Integer, org.maltparser.core.syntaxgraph.node.NonTerminal> nonTerminalNodes;
  protected final org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.node.NonTerminal> nonTerminalPool;
  protected final org.maltparser.core.syntaxgraph.node.Root root;
  public org.maltparser.core.syntaxgraph.PhraseStructureGraph(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode addTerminalNode() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode addTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getTerminalNode(int);
  public int nTerminalNode();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode addNonTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode addNonTerminalNode() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getNonTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getHighestNonTerminalIndex();
  public java.util.Set<java.lang.Integer> getNonTerminalIndices();
  public boolean hasNonTerminals();
  public int nNonTerminals();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getPhraseStructureRoot();
  public org.maltparser.core.syntaxgraph.edge.Edge addPhraseStructureEdge(org.maltparser.core.syntaxgraph.node.PhraseStructureNode, org.maltparser.core.syntaxgraph.node.PhraseStructureNode) throws org.maltparser.core.exception.MaltChainedException;
  public void removePhraseStructureEdge(org.maltparser.core.syntaxgraph.node.PhraseStructureNode, org.maltparser.core.syntaxgraph.node.PhraseStructureNode) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.Edge addSecondaryEdge(org.maltparser.core.syntaxgraph.node.ComparableNode, org.maltparser.core.syntaxgraph.node.ComparableNode) throws org.maltparser.core.exception.MaltChainedException;
  public void removeSecondaryEdge(org.maltparser.core.syntaxgraph.node.ComparableNode, org.maltparser.core.syntaxgraph.node.ComparableNode) throws org.maltparser.core.exception.MaltChainedException;
  public int nEdges();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> getEdges();
  public boolean isContinuous();
  public boolean isContinuousExcludeTerminalsAttachToRoot();
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toStringTerminalNode(org.maltparser.core.syntaxgraph.node.TokenNode);
  public java.lang.String toStringNonTerminalNode(org.maltparser.core.syntaxgraph.node.NonTerminalNode);
  public java.lang.String toString();
}
Compiled from "PhraseStructureGraph.java"
class org.maltparser.core.syntaxgraph.PhraseStructureGraph$1 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.edge.Edge> {
  final org.maltparser.core.syntaxgraph.PhraseStructureGraph this$0;
  org.maltparser.core.syntaxgraph.PhraseStructureGraph$1(org.maltparser.core.syntaxgraph.PhraseStructureGraph);
  protected org.maltparser.core.syntaxgraph.edge.Edge create();
  public void resetObject(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "PhraseStructureGraph.java"
class org.maltparser.core.syntaxgraph.PhraseStructureGraph$2 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.node.NonTerminal> {
  final org.maltparser.core.syntaxgraph.PhraseStructureGraph this$0;
  org.maltparser.core.syntaxgraph.PhraseStructureGraph$2(org.maltparser.core.syntaxgraph.PhraseStructureGraph);
  protected org.maltparser.core.syntaxgraph.node.NonTerminal create() throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(org.maltparser.core.syntaxgraph.node.NonTerminal) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "RootLabels.java"
public class org.maltparser.core.syntaxgraph.RootLabels {
  public static final java.lang.String DEFAULT_ROOTSYMBOL;
  public org.maltparser.core.syntaxgraph.RootLabels();
  public void setRootLabels(java.lang.String, java.util.SortedMap<java.lang.String, org.maltparser.core.symbol.SymbolTable>) throws org.maltparser.core.exception.MaltChainedException;
  public void setDefaultRootLabel(org.maltparser.core.symbol.SymbolTable, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Integer getDefaultRootLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.LabelSet getDefaultRootLabels() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDefaultRootLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public boolean checkRootLabelCodes(org.maltparser.core.syntaxgraph.LabelSet);
}
Compiled from "SecEdgeStructure.java"
public interface org.maltparser.core.syntaxgraph.SecEdgeStructure {
  public abstract org.maltparser.core.syntaxgraph.edge.Edge addSecondaryEdge(org.maltparser.core.syntaxgraph.node.ComparableNode, org.maltparser.core.syntaxgraph.node.ComparableNode) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void removeSecondaryEdge(org.maltparser.core.syntaxgraph.node.ComparableNode, org.maltparser.core.syntaxgraph.node.ComparableNode) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Sentence.java"
public class org.maltparser.core.syntaxgraph.Sentence extends org.maltparser.core.syntaxgraph.SyntaxGraph implements org.maltparser.core.syntaxgraph.TokenStructure {
  protected final org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.node.Token> terminalPool;
  protected final java.util.SortedMap<java.lang.Integer, org.maltparser.core.syntaxgraph.node.Token> terminalNodes;
  protected int sentenceID;
  public org.maltparser.core.syntaxgraph.Sentence(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.TokenNode addTokenNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.TokenNode addTokenNode() throws org.maltparser.core.exception.MaltChainedException;
  public int nTokenNode();
  public boolean hasTokens();
  protected org.maltparser.core.syntaxgraph.node.Token getOrAddTerminalNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.SortedSet<java.lang.Integer> getTokenIndices();
  public int getHighestTokenIndex();
  public org.maltparser.core.syntaxgraph.node.TokenNode getTokenNode(int);
  public int getSentenceID();
  public void setSentenceID(int);
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public void update(java.util.Observable, java.lang.Object);
  public java.lang.String toString();
}
Compiled from "Sentence.java"
class org.maltparser.core.syntaxgraph.Sentence$1 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.node.Token> {
  final org.maltparser.core.syntaxgraph.Sentence this$0;
  org.maltparser.core.syntaxgraph.Sentence$1(org.maltparser.core.syntaxgraph.Sentence);
  protected org.maltparser.core.syntaxgraph.node.Token create() throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(org.maltparser.core.syntaxgraph.node.Token) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Structure.java"
public interface org.maltparser.core.syntaxgraph.Structure {
  public abstract void clear() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SyntaxGraph.java"
public abstract class org.maltparser.core.syntaxgraph.SyntaxGraph implements org.maltparser.core.syntaxgraph.LabeledStructure,org.maltparser.core.syntaxgraph.Structure,java.util.Observer {
  protected org.maltparser.core.symbol.SymbolTableHandler symbolTables;
  protected final org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.LabelSet> labelSetPool;
  protected int numberOfComponents;
  public org.maltparser.core.syntaxgraph.SyntaxGraph(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.SymbolTableHandler getSymbolTables();
  public void setSymbolTables(org.maltparser.core.symbol.SymbolTableHandler);
  public void addLabel(org.maltparser.core.syntaxgraph.Element, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.LabelSet checkOutNewLabelSet() throws org.maltparser.core.exception.MaltChainedException;
  public void checkInLabelSet(org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SyntaxGraph.java"
class org.maltparser.core.syntaxgraph.SyntaxGraph$1 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.core.syntaxgraph.LabelSet> {
  final org.maltparser.core.syntaxgraph.SyntaxGraph this$0;
  org.maltparser.core.syntaxgraph.SyntaxGraph$1(org.maltparser.core.syntaxgraph.SyntaxGraph);
  protected org.maltparser.core.syntaxgraph.LabelSet create();
  public void resetObject(org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SyntaxGraphChartItem.java"
public class org.maltparser.core.syntaxgraph.SyntaxGraphChartItem extends org.maltparser.core.flow.item.ChartItem {
  public org.maltparser.core.syntaxgraph.SyntaxGraphChartItem();
  public void initialize(org.maltparser.core.flow.FlowChartInstance, org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public int preprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public int process(int) throws org.maltparser.core.exception.MaltChainedException;
  public int postprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "SyntaxGraphException.java"
public class org.maltparser.core.syntaxgraph.SyntaxGraphException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.syntaxgraph.SyntaxGraphException(java.lang.String);
  public org.maltparser.core.syntaxgraph.SyntaxGraphException(java.lang.String, java.lang.Throwable);
}
Compiled from "TokenStructure.java"
public interface org.maltparser.core.syntaxgraph.TokenStructure extends org.maltparser.core.syntaxgraph.Structure,org.maltparser.core.syntaxgraph.LabeledStructure {
  public abstract org.maltparser.core.syntaxgraph.node.TokenNode addTokenNode() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.TokenNode addTokenNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.TokenNode getTokenNode(int);
  public abstract int nTokenNode();
  public abstract java.util.SortedSet<java.lang.Integer> getTokenIndices();
  public abstract int getHighestTokenIndex();
  public abstract boolean hasTokens();
  public abstract int getSentenceID();
  public abstract void setSentenceID(int);
}
Compiled from "Weightable.java"
public interface org.maltparser.core.syntaxgraph.Weightable {
  public abstract void setWeight(double);
  public abstract double getWeight();
}
Compiled from "Dependency2PhraseStructure.java"
public interface org.maltparser.core.syntaxgraph.ds2ps.Dependency2PhraseStructure {
}
Compiled from "LosslessMapping.java"
public class org.maltparser.core.syntaxgraph.ds2ps.LosslessMapping implements org.maltparser.core.syntaxgraph.ds2ps.Dependency2PhraseStructure {
  public org.maltparser.core.syntaxgraph.ds2ps.LosslessMapping(org.maltparser.core.io.dataformat.DataFormatInstance, org.maltparser.core.io.dataformat.DataFormatInstance);
  public void clear();
  public java.lang.String getOptionString();
  public void setOptionString(java.lang.String);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDependencyDataFormatInstance();
  public void setDependencyDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public org.maltparser.core.io.dataformat.DataFormatInstance getPhraseStructuretDataFormatInstance();
  public void setPhraseStructuretDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public void update(org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph, org.maltparser.core.syntaxgraph.edge.Edge, java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  public void updateDependenyGraph(org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph, org.maltparser.core.syntaxgraph.node.PhraseStructureNode) throws org.maltparser.core.exception.MaltChainedException;
  public void connectUnattachedSpines(org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph) throws org.maltparser.core.exception.MaltChainedException;
  public void updatePhraseStructureGraph(org.maltparser.core.syntaxgraph.MappablePhraseStructureGraph, org.maltparser.core.syntaxgraph.edge.Edge, boolean) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.headrules.HeadRules getHeadRules();
  public void setHeadRules(org.maltparser.core.syntaxgraph.headrules.HeadRules);
  public void setHeadRules(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Edge.java"
public interface org.maltparser.core.syntaxgraph.edge.Edge extends org.maltparser.core.syntaxgraph.Element {
  public static final int DEPENDENCY_EDGE;
  public static final int PHRASE_STRUCTURE_EDGE;
  public static final int SECONDARY_EDGE;
  public abstract void setEdge(org.maltparser.core.syntaxgraph.node.Node, org.maltparser.core.syntaxgraph.node.Node, int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.Node getSource();
  public abstract org.maltparser.core.syntaxgraph.node.Node getTarget();
  public abstract int getType();
}
Compiled from "GraphEdge.java"
public class org.maltparser.core.syntaxgraph.edge.GraphEdge extends org.maltparser.core.syntaxgraph.GraphElement implements org.maltparser.core.syntaxgraph.edge.Edge, java.lang.Comparable<org.maltparser.core.syntaxgraph.edge.GraphEdge> {
  public org.maltparser.core.syntaxgraph.edge.GraphEdge();
  public org.maltparser.core.syntaxgraph.edge.GraphEdge(org.maltparser.core.syntaxgraph.node.Node, org.maltparser.core.syntaxgraph.node.Node, int) throws org.maltparser.core.exception.MaltChainedException;
  public void setEdge(org.maltparser.core.syntaxgraph.node.Node, org.maltparser.core.syntaxgraph.node.Node, int) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.Node getSource();
  public org.maltparser.core.syntaxgraph.node.Node getTarget();
  public int getType();
  public int compareTo(org.maltparser.core.syntaxgraph.edge.GraphEdge);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "WeightedEdge.java"
public class org.maltparser.core.syntaxgraph.edge.WeightedEdge extends org.maltparser.core.syntaxgraph.edge.GraphEdge implements org.maltparser.core.syntaxgraph.Weightable {
  public org.maltparser.core.syntaxgraph.edge.WeightedEdge();
  public org.maltparser.core.syntaxgraph.edge.WeightedEdge(org.maltparser.core.syntaxgraph.node.Node, org.maltparser.core.syntaxgraph.node.Node, int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.WeightedEdge(org.maltparser.core.syntaxgraph.node.Node, org.maltparser.core.syntaxgraph.node.Node, int, java.lang.Double) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public double getWeight();
  public void setWeight(double);
  public int compareTo(org.maltparser.core.syntaxgraph.edge.WeightedEdge);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "ArcDirFeature.java"
public class org.maltparser.core.syntaxgraph.feature.ArcDirFeature implements org.maltparser.core.feature.function.FeatureFunction {
  protected org.maltparser.core.feature.function.AddressFunction addressFunction;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.feature.value.SingleFeatureValue featureValue;
  public org.maltparser.core.syntaxgraph.feature.ArcDirFeature(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void updateCardinality();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction();
  public void setAddressFunction(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public void setTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public int getType();
  public java.lang.String getMapIdentifier();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "ColumnFeature.java"
public abstract class org.maltparser.core.syntaxgraph.feature.ColumnFeature implements org.maltparser.core.feature.function.FeatureFunction,org.maltparser.core.feature.function.Modifiable {
  protected org.maltparser.core.io.dataformat.ColumnDescription column;
  protected final org.maltparser.core.feature.value.SingleFeatureValue featureValue;
  public org.maltparser.core.syntaxgraph.feature.ColumnFeature() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void update() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.Class<?>[] getParameterTypes();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  protected void setColumn(org.maltparser.core.io.dataformat.ColumnDescription);
  public void setFeatureValue(int) throws org.maltparser.core.exception.MaltChainedException;
  public void setFeatureValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected void castFeatureValue(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public boolean equals(java.lang.Object);
  public java.lang.String getColumnName();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public int getType();
  public java.lang.String getMapIdentifier();
  public java.lang.String toString();
}
Compiled from "DGraphAddressFunction.java"
public class org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction extends org.maltparser.core.feature.function.AddressFunction {
  public org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction(java.lang.String);
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void update(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction();
  public void setAddressFunction(org.maltparser.core.feature.function.AddressFunction);
  public java.lang.String getSubFunctionName();
  public void setSubFunctionName(java.lang.String);
  public org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction getSubFunction();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "DGraphAddressFunction.java"
public final class org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction extends java.lang.Enum<org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction> {
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction HEAD;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction LDEP;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction RDEP;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction RDEP2;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction LSIB;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction RSIB;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction PRED;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction SUCC;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction ANC;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction PANC;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction LDESC;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction PLDESC;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction RDESC;
  public static final org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction PRDESC;
  public static org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction[] values();
  public static org.maltparser.core.syntaxgraph.feature.DGraphAddressFunction$DGraphSubFunction valueOf(java.lang.String);
  static {};
}
Compiled from "DistanceFeature.java"
public class org.maltparser.core.syntaxgraph.feature.DistanceFeature implements org.maltparser.core.feature.function.FeatureFunction {
  protected org.maltparser.core.feature.function.AddressFunction addressFunction1;
  protected org.maltparser.core.feature.function.AddressFunction addressFunction2;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.feature.value.SingleFeatureValue featureValue;
  protected java.lang.String normalizationString;
  protected java.util.Map<java.lang.Integer, java.lang.String> normalization;
  public org.maltparser.core.syntaxgraph.feature.DistanceFeature(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void updateCardinality();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction1();
  public void setAddressFunction1(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction2();
  public void setAddressFunction2(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public void setTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "ExistsFeature.java"
public class org.maltparser.core.syntaxgraph.feature.ExistsFeature implements org.maltparser.core.feature.function.FeatureFunction {
  protected org.maltparser.core.feature.function.AddressFunction addressFunction;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.feature.value.SingleFeatureValue featureValue;
  public org.maltparser.core.syntaxgraph.feature.ExistsFeature(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void updateCardinality();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction();
  public void setAddressFunction(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public void setTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "InputArcDirFeature.java"
public class org.maltparser.core.syntaxgraph.feature.InputArcDirFeature implements org.maltparser.core.feature.function.FeatureFunction {
  protected org.maltparser.core.io.dataformat.ColumnDescription column;
  protected org.maltparser.core.io.dataformat.DataFormatInstance dataFormatInstance;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.feature.value.SingleFeatureValue featureValue;
  protected org.maltparser.core.feature.function.AddressFunction addressFunction;
  public org.maltparser.core.syntaxgraph.feature.InputArcDirFeature(org.maltparser.core.io.dataformat.DataFormatInstance, org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public void updateCardinality() throws org.maltparser.core.exception.MaltChainedException;
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction();
  public void setAddressFunction(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  public void setColumn(org.maltparser.core.io.dataformat.ColumnDescription) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public void setFeatureValue(org.maltparser.core.feature.value.SingleFeatureValue);
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public void setTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "InputArcFeature.java"
public class org.maltparser.core.syntaxgraph.feature.InputArcFeature implements org.maltparser.core.feature.function.FeatureFunction {
  protected org.maltparser.core.feature.function.AddressFunction addressFunction1;
  protected org.maltparser.core.feature.function.AddressFunction addressFunction2;
  protected org.maltparser.core.io.dataformat.ColumnDescription column;
  protected org.maltparser.core.io.dataformat.DataFormatInstance dataFormatInstance;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.feature.value.SingleFeatureValue featureValue;
  public org.maltparser.core.syntaxgraph.feature.InputArcFeature(org.maltparser.core.io.dataformat.DataFormatInstance, org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public void updateCardinality() throws org.maltparser.core.exception.MaltChainedException;
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  public void setColumn(org.maltparser.core.io.dataformat.ColumnDescription) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction1();
  public void setAddressFunction1(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction2();
  public void setAddressFunction2(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public void setFeatureValue(org.maltparser.core.feature.value.SingleFeatureValue);
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public void setTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "InputColumnFeature.java"
public final class org.maltparser.core.syntaxgraph.feature.InputColumnFeature extends org.maltparser.core.syntaxgraph.feature.ColumnFeature {
  public org.maltparser.core.syntaxgraph.feature.InputColumnFeature(org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction();
  public void setAddressFunction(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "InputTableFeature.java"
public class org.maltparser.core.syntaxgraph.feature.InputTableFeature extends org.maltparser.core.symbol.TableFeature {
  protected org.maltparser.core.feature.function.AddressFunction addressFunction;
  public org.maltparser.core.syntaxgraph.feature.InputTableFeature(org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction();
  public void setAddressFunction(org.maltparser.core.feature.function.AddressFunction);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "NumOfFeature.java"
public class org.maltparser.core.syntaxgraph.feature.NumOfFeature implements org.maltparser.core.feature.function.FeatureFunction {
  protected org.maltparser.core.feature.function.AddressFunction addressFunction;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.feature.value.SingleFeatureValue featureValue;
  protected org.maltparser.core.syntaxgraph.feature.NumOfFeature$NumOfRelation numOfRelation;
  protected java.lang.String numOfRelationName;
  protected java.lang.String normalizationString;
  protected java.util.Map<java.lang.Integer, java.lang.String> normalization;
  public org.maltparser.core.syntaxgraph.feature.NumOfFeature(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void updateCardinality();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void setNumOfRelation(java.lang.String);
  public org.maltparser.core.syntaxgraph.feature.NumOfFeature$NumOfRelation getNumOfRelation();
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction();
  public void setAddressFunction(org.maltparser.core.feature.function.AddressFunction);
  public void setTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "NumOfFeature.java"
public final class org.maltparser.core.syntaxgraph.feature.NumOfFeature$NumOfRelation extends java.lang.Enum<org.maltparser.core.syntaxgraph.feature.NumOfFeature$NumOfRelation> {
  public static final org.maltparser.core.syntaxgraph.feature.NumOfFeature$NumOfRelation LDEPS;
  public static final org.maltparser.core.syntaxgraph.feature.NumOfFeature$NumOfRelation RDEPS;
  public static final org.maltparser.core.syntaxgraph.feature.NumOfFeature$NumOfRelation DEPS;
  public static org.maltparser.core.syntaxgraph.feature.NumOfFeature$NumOfRelation[] values();
  public static org.maltparser.core.syntaxgraph.feature.NumOfFeature$NumOfRelation valueOf(java.lang.String);
  static {};
}
Compiled from "OutputArcFeature.java"
public class org.maltparser.core.syntaxgraph.feature.OutputArcFeature implements org.maltparser.core.feature.function.FeatureFunction {
  protected org.maltparser.core.feature.function.AddressFunction addressFunction1;
  protected org.maltparser.core.feature.function.AddressFunction addressFunction2;
  protected org.maltparser.core.io.dataformat.ColumnDescription column;
  protected org.maltparser.core.io.dataformat.DataFormatInstance dataFormatInstance;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.feature.value.SingleFeatureValue featureValue;
  public org.maltparser.core.syntaxgraph.feature.OutputArcFeature(org.maltparser.core.io.dataformat.DataFormatInstance, org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.value.FeatureValue getFeatureValue();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public void updateCardinality() throws org.maltparser.core.exception.MaltChainedException;
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  public void setColumn(org.maltparser.core.io.dataformat.ColumnDescription) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction1();
  public void setAddressFunction1(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction2();
  public void setAddressFunction2(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public void setFeatureValue(org.maltparser.core.feature.value.SingleFeatureValue);
  public org.maltparser.core.symbol.SymbolTable getSymbolTable();
  public void setSymbolTable(org.maltparser.core.symbol.SymbolTable);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public void setTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public int getType();
  public java.lang.String getMapIdentifier();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "OutputColumnFeature.java"
public class org.maltparser.core.syntaxgraph.feature.OutputColumnFeature extends org.maltparser.core.syntaxgraph.feature.ColumnFeature {
  public org.maltparser.core.syntaxgraph.feature.OutputColumnFeature(org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction();
  public void setAddressFunction(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "OutputTableFeature.java"
public class org.maltparser.core.syntaxgraph.feature.OutputTableFeature extends org.maltparser.core.symbol.TableFeature {
  protected org.maltparser.core.feature.function.AddressFunction addressFunction;
  protected org.maltparser.core.symbol.SymbolTableHandler tableHandler;
  public org.maltparser.core.syntaxgraph.feature.OutputTableFeature(org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.AddressFunction getAddressFunction();
  public void setAddressFunction(org.maltparser.core.feature.function.AddressFunction);
  public org.maltparser.core.symbol.SymbolTableHandler getTableHandler();
  public void setTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "Direction.java"
public final class org.maltparser.core.syntaxgraph.headrules.Direction extends java.lang.Enum<org.maltparser.core.syntaxgraph.headrules.Direction> {
  public static final org.maltparser.core.syntaxgraph.headrules.Direction LEFT;
  public static final org.maltparser.core.syntaxgraph.headrules.Direction RIGHT;
  public static org.maltparser.core.syntaxgraph.headrules.Direction[] values();
  public static org.maltparser.core.syntaxgraph.headrules.Direction valueOf(java.lang.String);
  static {};
}
Compiled from "HeadRule.java"
public class org.maltparser.core.syntaxgraph.headrules.HeadRule extends java.util.ArrayList<org.maltparser.core.syntaxgraph.headrules.PrioList> {
  public static final long serialVersionUID;
  protected org.maltparser.core.syntaxgraph.headrules.HeadRules headRules;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected int symbolCode;
  protected org.maltparser.core.syntaxgraph.headrules.Direction defaultDirection;
  public org.maltparser.core.syntaxgraph.headrules.HeadRule(org.maltparser.core.syntaxgraph.headrules.HeadRules, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void init(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild(org.maltparser.core.syntaxgraph.node.NonTerminalNode) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.SymbolTable getTable();
  public void setTable(org.maltparser.core.symbol.SymbolTable);
  public int getSymbolCode();
  public void setSymbolCode(int);
  public java.lang.String getSymbolString() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.headrules.Direction getDefaultDirection();
  public void setDefaultDirection(org.maltparser.core.syntaxgraph.headrules.Direction);
  public org.apache.log4j.Logger getLogger();
  public void setHeadRules(org.maltparser.core.syntaxgraph.headrules.HeadRules);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public java.lang.String toString();
}
Compiled from "HeadRuleException.java"
public class org.maltparser.core.syntaxgraph.headrules.HeadRuleException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.core.syntaxgraph.headrules.HeadRuleException(java.lang.String);
  public org.maltparser.core.syntaxgraph.headrules.HeadRuleException(java.lang.String, java.lang.Throwable);
}
Compiled from "HeadRules.java"
public class org.maltparser.core.syntaxgraph.headrules.HeadRules extends org.maltparser.core.helper.HashMap<java.lang.String, org.maltparser.core.syntaxgraph.headrules.HeadRule> {
  public static final long serialVersionUID;
  protected org.apache.log4j.Logger logger;
  protected java.lang.String name;
  protected org.maltparser.core.io.dataformat.DataFormatInstance dataFormatInstance;
  protected org.maltparser.core.symbol.SymbolTable nonTerminalSymbolTable;
  protected org.maltparser.core.symbol.SymbolTable edgelabelSymbolTable;
  public org.maltparser.core.syntaxgraph.headrules.HeadRules(org.apache.log4j.Logger, org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void parseHeadRules(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void parseHeadRules(java.net.URL) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild(org.maltparser.core.syntaxgraph.node.NonTerminalNode) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.headrules.Direction getDefaultDirection(org.maltparser.core.syntaxgraph.node.NonTerminalNode) throws org.maltparser.core.exception.MaltChainedException;
  public org.apache.log4j.Logger getLogger();
  public void setLogger(org.apache.log4j.Logger);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public java.lang.String toString();
}
Compiled from "PrioList.java"
public class org.maltparser.core.syntaxgraph.headrules.PrioList extends java.util.ArrayList<org.maltparser.core.syntaxgraph.headrules.PrioSet> {
  public static final long serialVersionUID;
  protected org.maltparser.core.syntaxgraph.headrules.HeadRule headRule;
  protected org.maltparser.core.syntaxgraph.headrules.Direction direction;
  public org.maltparser.core.syntaxgraph.headrules.PrioList(org.maltparser.core.syntaxgraph.headrules.HeadRule, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void init(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild(org.maltparser.core.syntaxgraph.node.NonTerminalNode) throws org.maltparser.core.exception.MaltChainedException;
  public org.apache.log4j.Logger getLogger();
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public org.maltparser.core.syntaxgraph.headrules.HeadRule getHeadRule();
  public void setHeadRule(org.maltparser.core.syntaxgraph.headrules.HeadRule);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "PrioSet.java"
public class org.maltparser.core.syntaxgraph.headrules.PrioSet extends java.util.ArrayList<org.maltparser.core.syntaxgraph.headrules.PrioSetMember> {
  public static final long serialVersionUID;
  protected org.maltparser.core.syntaxgraph.headrules.PrioList prioList;
  protected org.maltparser.core.syntaxgraph.headrules.PrioSetMember cache;
  public org.maltparser.core.syntaxgraph.headrules.PrioSet(org.maltparser.core.syntaxgraph.headrules.PrioList);
  public org.maltparser.core.syntaxgraph.headrules.PrioSet(org.maltparser.core.syntaxgraph.headrules.PrioList, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void init(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.headrules.PrioSetMember addPrioSetMember(org.maltparser.core.symbol.SymbolTable, org.maltparser.core.io.dataformat.ColumnDescription, java.lang.String, org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.headrules.PrioSetMember addPrioSetMember(org.maltparser.core.symbol.SymbolTable, org.maltparser.core.io.dataformat.ColumnDescription, int, org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild(org.maltparser.core.syntaxgraph.node.NonTerminalNode, org.maltparser.core.syntaxgraph.headrules.Direction) throws org.maltparser.core.exception.MaltChainedException;
  public org.apache.log4j.Logger getLogger();
  public org.maltparser.core.syntaxgraph.headrules.PrioList getPrioList();
  protected void setPrioList(org.maltparser.core.syntaxgraph.headrules.PrioList);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "PrioSetMember.java"
public class org.maltparser.core.syntaxgraph.headrules.PrioSetMember {
  protected org.maltparser.core.syntaxgraph.headrules.PrioSet prioSet;
  protected org.maltparser.core.symbol.SymbolTable table;
  protected org.maltparser.core.io.dataformat.ColumnDescription column;
  protected int symbolCode;
  protected org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember relationToPrevMember;
  public org.maltparser.core.syntaxgraph.headrules.PrioSetMember(org.maltparser.core.syntaxgraph.headrules.PrioSet, org.maltparser.core.symbol.SymbolTable, org.maltparser.core.io.dataformat.ColumnDescription, int, org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember);
  public org.maltparser.core.syntaxgraph.headrules.PrioSetMember(org.maltparser.core.syntaxgraph.headrules.PrioSet, org.maltparser.core.symbol.SymbolTable, org.maltparser.core.io.dataformat.ColumnDescription, java.lang.String, org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.headrules.PrioSet getPrioSet();
  public void setPrioSet(org.maltparser.core.syntaxgraph.headrules.PrioSet);
  public org.maltparser.core.io.dataformat.ColumnDescription getColumn();
  public void setColumn(org.maltparser.core.io.dataformat.ColumnDescription);
  public org.maltparser.core.symbol.SymbolTable getTable();
  public void setTable(org.maltparser.core.symbol.SymbolTable);
  public int getSymbolCode();
  public java.lang.String getSymbolString() throws org.maltparser.core.exception.MaltChainedException;
  public void setSymbolCode(int);
  public org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember getRelationToPrevMember();
  public void setRelationToPrevMember(org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "PrioSetMember.java"
public final class org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember extends java.lang.Enum<org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember> {
  public static final org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember START;
  public static final org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember DISJUNCTION;
  public static final org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember CONJUNCTION;
  public static org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember[] values();
  public static org.maltparser.core.syntaxgraph.headrules.PrioSetMember$RelationToPrevMember valueOf(java.lang.String);
  static {};
}
Compiled from "ComparableNode.java"
public interface org.maltparser.core.syntaxgraph.node.ComparableNode extends org.maltparser.core.syntaxgraph.Element, java.lang.Comparable<org.maltparser.core.syntaxgraph.node.ComparableNode> {
  public abstract int getIndex();
  public abstract int getCompareToIndex();
  public abstract boolean isRoot();
  public abstract org.maltparser.core.syntaxgraph.node.ComparableNode getLeftmostProperDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.ComparableNode getRightmostProperDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getLeftmostProperDescendantIndex() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getRightmostProperDescendantIndex() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.ComparableNode getLeftmostDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.ComparableNode getRightmostDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getLeftmostDescendantIndex() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getRightmostDescendantIndex() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getInDegree();
  public abstract int getOutDegree();
  public abstract java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> getIncomingSecondaryEdges();
  public abstract java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> getOutgoingSecondaryEdges();
}
Compiled from "DependencyNode.java"
public interface org.maltparser.core.syntaxgraph.node.DependencyNode extends org.maltparser.core.syntaxgraph.node.ComparableNode {
  public abstract boolean hasAtMostOneHead();
  public abstract boolean hasHead();
  public abstract java.util.Set<org.maltparser.core.syntaxgraph.node.DependencyNode> getHeads() throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.util.Set<org.maltparser.core.syntaxgraph.edge.Edge> getHeadEdges() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getHead() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.edge.Edge getHeadEdge() throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean hasAncestorInside(int, int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void addHeadEdgeLabel(org.maltparser.core.symbol.SymbolTable, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void addHeadEdgeLabel(org.maltparser.core.symbol.SymbolTable, int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void addHeadEdgeLabel(org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean hasHeadEdgeLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getHeadEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getHeadEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean isHeadEdgeLabeled() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int nHeadEdgeLabels() throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.util.Set<org.maltparser.core.symbol.SymbolTable> getHeadEdgeLabelTypes() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.LabelSet getHeadEdgeLabelSet() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getAncestor() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getProperAncestor() throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean hasDependent();
  public abstract boolean hasLeftDependent();
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getLeftDependent(int);
  public abstract int getLeftDependentCount();
  public abstract java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> getLeftDependents();
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getLeftSibling() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getSameSideLeftSibling() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getClosestLeftDependent();
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getLeftmostDependent();
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getRightDependent(int);
  public abstract int getRightDependentCount();
  public abstract java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> getRightDependents();
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getRightSibling() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getSameSideRightSibling() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getClosestRightDependent();
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getRightmostDependent();
  public abstract boolean hasRightDependent();
  public abstract boolean isProjective() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getDependencyNodeDepth() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getRank();
  public abstract void setRank(int);
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode findComponent();
  public abstract org.maltparser.core.syntaxgraph.node.DependencyNode getComponent();
  public abstract void setComponent(org.maltparser.core.syntaxgraph.node.DependencyNode);
}
Compiled from "GraphNode.java"
public abstract class org.maltparser.core.syntaxgraph.node.GraphNode extends org.maltparser.core.syntaxgraph.GraphElement implements org.maltparser.core.syntaxgraph.node.Node {
  protected java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> incomingEdges;
  protected java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> outgoingEdges;
  public org.maltparser.core.syntaxgraph.node.GraphNode() throws org.maltparser.core.exception.MaltChainedException;
  public void addIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void addOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void removeIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void removeOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public int getLeftmostProperDescendantIndex() throws org.maltparser.core.exception.MaltChainedException;
  public int getRightmostProperDescendantIndex() throws org.maltparser.core.exception.MaltChainedException;
  public int getLeftmostDescendantIndex() throws org.maltparser.core.exception.MaltChainedException;
  public int getRightmostDescendantIndex() throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Iterator<org.maltparser.core.syntaxgraph.edge.Edge> getIncomingEdgeIterator();
  public java.util.Iterator<org.maltparser.core.syntaxgraph.edge.Edge> getOutgoingEdgeIterator();
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public int getInDegree();
  public int getOutDegree();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> getIncomingSecondaryEdges();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.edge.Edge> getOutgoingSecondaryEdges();
  public int compareTo(org.maltparser.core.syntaxgraph.node.ComparableNode);
  public abstract int getIndex();
  public abstract void setIndex(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean isRoot();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "Node.java"
public interface org.maltparser.core.syntaxgraph.node.Node extends org.maltparser.core.syntaxgraph.node.ComparableNode,org.maltparser.core.syntaxgraph.Element {
  public abstract void addIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void addOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void removeIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void removeOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.util.Iterator<org.maltparser.core.syntaxgraph.edge.Edge> getIncomingEdgeIterator();
  public abstract java.util.Iterator<org.maltparser.core.syntaxgraph.edge.Edge> getOutgoingEdgeIterator();
  public abstract void setIndex(int) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "NonTerminal.java"
public class org.maltparser.core.syntaxgraph.node.NonTerminal extends org.maltparser.core.syntaxgraph.node.GraphNode implements org.maltparser.core.syntaxgraph.node.PhraseStructureNode,org.maltparser.core.syntaxgraph.node.NonTerminalNode {
  public static final int INDEX_OFFSET;
  protected final java.util.SortedSet<org.maltparser.core.syntaxgraph.node.PhraseStructureNode> children;
  protected org.maltparser.core.syntaxgraph.node.PhraseStructureNode parent;
  protected int index;
  public org.maltparser.core.syntaxgraph.node.NonTerminal() throws org.maltparser.core.exception.MaltChainedException;
  public void addIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void removeIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void addOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void removeOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getParent();
  public org.maltparser.core.syntaxgraph.edge.Edge getParentEdge() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getParentEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public int getParentEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasParentEdgeLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public int getHeight();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.node.PhraseStructureNode> getChildren();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getChild(int);
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getLeftChild();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getRightChild();
  public int nChildren();
  public boolean hasNonTerminalChildren();
  public boolean hasTerminalChildren();
  public org.maltparser.core.syntaxgraph.node.TokenNode getLexicalHead(org.maltparser.core.syntaxgraph.headrules.HeadRules) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild(org.maltparser.core.syntaxgraph.headrules.HeadRules) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.TokenNode getLexicalHead() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.TokenNode identifyHead(org.maltparser.core.syntaxgraph.headrules.HeadRules) throws org.maltparser.core.exception.MaltChainedException;
  public int getIndex();
  public int getCompareToIndex();
  public boolean isContinuous();
  public boolean isContinuousExcludeTerminalsAttachToRoot();
  public boolean isRoot();
  public org.maltparser.core.syntaxgraph.node.ComparableNode getLeftmostProperDescendant();
  public org.maltparser.core.syntaxgraph.node.ComparableNode getRightmostProperDescendant();
  public org.maltparser.core.syntaxgraph.node.ComparableNode getLeftmostDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.ComparableNode getRightmostDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public void setIndex(int) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public int compareTo(org.maltparser.core.syntaxgraph.node.ComparableNode);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "NonTerminalNode.java"
public interface org.maltparser.core.syntaxgraph.node.NonTerminalNode extends org.maltparser.core.syntaxgraph.node.PhraseStructureNode {
  public abstract org.maltparser.core.syntaxgraph.node.TokenNode identifyHead(org.maltparser.core.syntaxgraph.headrules.HeadRules) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.TokenNode getLexicalHead(org.maltparser.core.syntaxgraph.headrules.HeadRules) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.TokenNode getLexicalHead() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild(org.maltparser.core.syntaxgraph.headrules.HeadRules) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild() throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.util.SortedSet<org.maltparser.core.syntaxgraph.node.PhraseStructureNode> getChildren();
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode getChild(int);
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode getLeftChild();
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode getRightChild();
  public abstract int nChildren();
  public abstract boolean hasNonTerminalChildren();
  public abstract boolean hasTerminalChildren();
  public abstract int getHeight();
  public abstract boolean isContinuous();
  public abstract boolean isContinuousExcludeTerminalsAttachToRoot();
}
Compiled from "PhraseStructureNode.java"
public interface org.maltparser.core.syntaxgraph.node.PhraseStructureNode extends org.maltparser.core.syntaxgraph.node.ComparableNode {
  public abstract org.maltparser.core.syntaxgraph.node.PhraseStructureNode getParent();
  public abstract org.maltparser.core.syntaxgraph.edge.Edge getParentEdge() throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getParentEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getParentEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean hasParentEdgeLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Root.java"
public class org.maltparser.core.syntaxgraph.node.Root extends org.maltparser.core.syntaxgraph.node.GraphNode implements org.maltparser.core.syntaxgraph.node.DependencyNode,org.maltparser.core.syntaxgraph.node.PhraseStructureNode,org.maltparser.core.syntaxgraph.node.NonTerminalNode {
  protected final java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> leftDependents;
  protected final java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> rightDependents;
  protected final java.util.SortedSet<org.maltparser.core.syntaxgraph.node.PhraseStructureNode> children;
  protected org.maltparser.core.syntaxgraph.node.DependencyNode component;
  protected int rank;
  public org.maltparser.core.syntaxgraph.node.Root() throws org.maltparser.core.exception.MaltChainedException;
  public void addIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void removeIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge);
  public void addOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void removeOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getAncestor() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getProperAncestor() throws org.maltparser.core.exception.MaltChainedException;
  public int getRank();
  public void setRank(int);
  public org.maltparser.core.syntaxgraph.node.DependencyNode findComponent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getComponent();
  public void setComponent(org.maltparser.core.syntaxgraph.node.DependencyNode);
  public boolean isContinuous();
  public boolean isContinuousExcludeTerminalsAttachToRoot();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getParent();
  public org.maltparser.core.syntaxgraph.edge.Edge getParentEdge() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getParentEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public int getParentEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasParentEdgeLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.node.PhraseStructureNode> getChildren();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getChild(int);
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getLeftChild();
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getRightChild();
  public int nChildren();
  public boolean hasNonTerminalChildren();
  public boolean hasTerminalChildren();
  public int getHeight();
  public org.maltparser.core.syntaxgraph.node.TokenNode getLexicalHead(org.maltparser.core.syntaxgraph.headrules.HeadRules) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild(org.maltparser.core.syntaxgraph.headrules.HeadRules) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.TokenNode getLexicalHead() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getHeadChild() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.TokenNode identifyHead(org.maltparser.core.syntaxgraph.headrules.HeadRules) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasAtMostOneHead();
  public boolean hasAncestorInside(int, int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasHead();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getHead() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.Edge getHeadEdge() throws org.maltparser.core.exception.MaltChainedException;
  public void addHeadEdgeLabel(org.maltparser.core.symbol.SymbolTable, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void addHeadEdgeLabel(org.maltparser.core.symbol.SymbolTable, int) throws org.maltparser.core.exception.MaltChainedException;
  public void addHeadEdgeLabel(org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
  public int getHeadEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.LabelSet getHeadEdgeLabelSet() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getHeadEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Set<org.maltparser.core.symbol.SymbolTable> getHeadEdgeLabelTypes() throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasHeadEdgeLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isHeadEdgeLabeled() throws org.maltparser.core.exception.MaltChainedException;
  public int nHeadEdgeLabels() throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Set<org.maltparser.core.syntaxgraph.edge.Edge> getHeadEdges() throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Set<org.maltparser.core.syntaxgraph.node.DependencyNode> getHeads() throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasDependent();
  public boolean hasLeftDependent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLeftDependent(int);
  public int getLeftDependentCount();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> getLeftDependents();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLeftSibling() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getSameSideLeftSibling() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getClosestLeftDependent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLeftmostDependent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getRightDependent(int);
  public int getRightDependentCount();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> getRightDependents();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getRightSibling() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getSameSideRightSibling() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getClosestRightDependent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getRightmostDependent();
  public boolean hasRightDependent();
  protected void getDependencyDominationSet(java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode>);
  public boolean isProjective() throws org.maltparser.core.exception.MaltChainedException;
  public int getDependencyNodeDepth() throws org.maltparser.core.exception.MaltChainedException;
  public int getIndex();
  public int getCompareToIndex();
  public boolean isRoot();
  public org.maltparser.core.syntaxgraph.node.ComparableNode getLeftmostProperDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.ComparableNode getRightmostProperDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.ComparableNode getLeftmostDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.ComparableNode getRightmostDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public void setIndex(int) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public int compareTo(org.maltparser.core.syntaxgraph.node.ComparableNode);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "TerminalNode.java"
public interface org.maltparser.core.syntaxgraph.node.TerminalNode extends org.maltparser.core.syntaxgraph.node.PhraseStructureNode {
}
Compiled from "Token.java"
public class org.maltparser.core.syntaxgraph.node.Token extends org.maltparser.core.syntaxgraph.node.GraphNode implements org.maltparser.core.syntaxgraph.node.TokenNode,org.maltparser.core.syntaxgraph.node.DependencyNode,org.maltparser.core.syntaxgraph.node.PhraseStructureNode {
  protected org.maltparser.core.syntaxgraph.node.TokenNode predecessor;
  protected org.maltparser.core.syntaxgraph.node.TokenNode successor;
  protected org.maltparser.core.syntaxgraph.node.DependencyNode component;
  protected int rank;
  protected int index;
  protected org.maltparser.core.syntaxgraph.node.PhraseStructureNode parent;
  protected final java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> heads;
  protected final java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> leftDependents;
  protected final java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> rightDependents;
  public org.maltparser.core.syntaxgraph.node.Token() throws org.maltparser.core.exception.MaltChainedException;
  public void setPredecessor(org.maltparser.core.syntaxgraph.node.TokenNode);
  public void setSuccessor(org.maltparser.core.syntaxgraph.node.TokenNode);
  public org.maltparser.core.syntaxgraph.node.TokenNode getPredecessor();
  public org.maltparser.core.syntaxgraph.node.TokenNode getSuccessor();
  public int getRank();
  public void setRank(int);
  public org.maltparser.core.syntaxgraph.node.DependencyNode findComponent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getComponent();
  public void setComponent(org.maltparser.core.syntaxgraph.node.DependencyNode);
  public void addIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void removeIncomingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void addOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void removeOutgoingEdge(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void setIndex(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getIndex();
  public int getCompareToIndex();
  public boolean isRoot();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getAncestor() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getProperAncestor() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.ComparableNode getLeftmostProperDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.ComparableNode getRightmostProperDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.ComparableNode getLeftmostDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.ComparableNode getRightmostDescendant() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.PhraseStructureNode getParent();
  public org.maltparser.core.syntaxgraph.edge.Edge getParentEdge() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getParentEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public int getParentEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasParentEdgeLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasAtMostOneHead();
  public boolean hasAncestorInside(int, int) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Set<org.maltparser.core.syntaxgraph.edge.Edge> getHeadEdges() throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Set<org.maltparser.core.syntaxgraph.node.DependencyNode> getHeads() throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasHead();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getHead() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.edge.Edge getHeadEdge() throws org.maltparser.core.exception.MaltChainedException;
  public void addHeadEdgeLabel(org.maltparser.core.symbol.SymbolTable, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void addHeadEdgeLabel(org.maltparser.core.symbol.SymbolTable, int) throws org.maltparser.core.exception.MaltChainedException;
  public void addHeadEdgeLabel(org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasHeadEdgeLabel(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getHeadEdgeLabelSymbol(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public int getHeadEdgeLabelCode(org.maltparser.core.symbol.SymbolTable) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isHeadEdgeLabeled() throws org.maltparser.core.exception.MaltChainedException;
  public int nHeadEdgeLabels() throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Set<org.maltparser.core.symbol.SymbolTable> getHeadEdgeLabelTypes() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.LabelSet getHeadEdgeLabelSet() throws org.maltparser.core.exception.MaltChainedException;
  public boolean hasDependent();
  public boolean hasLeftDependent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLeftDependent(int);
  public int getLeftDependentCount();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> getLeftDependents();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLeftSibling() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getSameSideLeftSibling() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getClosestLeftDependent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLeftmostDependent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getRightDependent(int);
  public int getRightDependentCount();
  public java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode> getRightDependents();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getRightSibling() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getSameSideRightSibling() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getClosestRightDependent();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getRightmostDependent();
  protected void getDependencyDominationSet(java.util.SortedSet<org.maltparser.core.syntaxgraph.node.DependencyNode>);
  public boolean hasRightDependent();
  public boolean isProjective() throws org.maltparser.core.exception.MaltChainedException;
  public int getDependencyNodeDepth() throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public int compareTo(org.maltparser.core.syntaxgraph.node.ComparableNode);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "TokenNode.java"
public interface org.maltparser.core.syntaxgraph.node.TokenNode extends org.maltparser.core.syntaxgraph.node.DependencyNode,org.maltparser.core.syntaxgraph.node.PhraseStructureNode {
  public abstract void setPredecessor(org.maltparser.core.syntaxgraph.node.TokenNode);
  public abstract void setSuccessor(org.maltparser.core.syntaxgraph.node.TokenNode);
  public abstract org.maltparser.core.syntaxgraph.node.TokenNode getPredecessor();
  public abstract org.maltparser.core.syntaxgraph.node.TokenNode getSuccessor();
}
Compiled from "BracketReader.java"
public class org.maltparser.core.syntaxgraph.reader.BracketReader implements org.maltparser.core.syntaxgraph.reader.SyntaxGraphReader {
  public org.maltparser.core.syntaxgraph.reader.BracketReader();
  public void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.net.URL, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.io.InputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void readProlog() throws org.maltparser.core.exception.MaltChainedException;
  public boolean readSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void readEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedReader getReader();
  public void setReader(java.io.BufferedReader);
  public int getSentenceCount() throws org.maltparser.core.exception.MaltChainedException;
  public void setSentenceCount(int);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public java.lang.String getOptions();
  public void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getFileName();
  public void setFileName(java.lang.String);
  public java.net.URL getUrl();
  public void setUrl(java.net.URL);
  public java.lang.String getCharsetName();
  public void setCharsetName(java.lang.String);
  public int getNIterations();
  public void setNIterations(int);
  public int getIterationCounter();
  public void close() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "NegraReader.java"
public class org.maltparser.core.syntaxgraph.reader.NegraReader implements org.maltparser.core.syntaxgraph.reader.SyntaxGraphReader {
  public org.maltparser.core.syntaxgraph.reader.NegraReader();
  public void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.net.URL, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.io.InputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void readProlog() throws org.maltparser.core.exception.MaltChainedException;
  public boolean readSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void readEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedReader getReader();
  public void setReader(java.io.BufferedReader);
  public int getSentenceCount();
  public void setSentenceCount(int);
  public int getFormatVersion();
  public void setFormatVersion(int);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public java.lang.String getOptions();
  public void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getFileName();
  public void setFileName(java.lang.String);
  public java.net.URL getUrl();
  public void setUrl(java.net.URL);
  public java.lang.String getCharsetName();
  public void setCharsetName(java.lang.String);
  public int getNIterations();
  public void setNIterations(int);
  public int getIterationCounter();
  public void close() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "NegraReader.java"
final class org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables extends java.lang.Enum<org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables> {
  public static final org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables ORIGIN;
  public static final org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables EDITOR;
  public static final org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables WORDTAG;
  public static final org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables MORPHTAG;
  public static final org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables NODETAG;
  public static final org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables EDGETAG;
  public static final org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables SECEDGETAG;
  public static final org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables SENTENCE;
  public static final org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables UNDEF;
  public static org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables[] values();
  public static org.maltparser.core.syntaxgraph.reader.NegraReader$NegraTables valueOf(java.lang.String);
  static {};
}
Compiled from "ReadChartItem.java"
public class org.maltparser.core.syntaxgraph.reader.ReadChartItem extends org.maltparser.core.flow.item.ChartItem {
  public org.maltparser.core.syntaxgraph.reader.ReadChartItem();
  public void initialize(org.maltparser.core.flow.FlowChartInstance, org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public int preprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public int process(int) throws org.maltparser.core.exception.MaltChainedException;
  public int postprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getInputFormatName();
  public void setInputFormatName(java.lang.String);
  public java.lang.String getInputFileName();
  public void setInputFileName(java.lang.String);
  public java.lang.String getInputCharSet();
  public void setInputCharSet(java.lang.String);
  public java.lang.String getReaderOptions();
  public void setReaderOptions(java.lang.String);
  public int getIterations();
  public void setIterations(int);
  public java.lang.Class<? extends org.maltparser.core.syntaxgraph.reader.SyntaxGraphReader> getSyntaxGraphReaderClass();
  public void setSyntaxGraphReaderClass(java.lang.Class<?>) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getNullValueStrategy();
  public void setNullValueStrategy(java.lang.String);
  public java.lang.String getTargetName();
  public void setTargetName(java.lang.String);
  public org.maltparser.core.syntaxgraph.reader.SyntaxGraphReader getReader();
  public org.maltparser.core.io.dataformat.DataFormatInstance getInputDataFormatInstance();
  public void initInput(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void initReader(java.lang.Class<? extends org.maltparser.core.syntaxgraph.reader.SyntaxGraphReader>, java.lang.String, java.lang.String, java.lang.String, int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "SyntaxGraphReader.java"
public interface org.maltparser.core.syntaxgraph.reader.SyntaxGraphReader {
  public abstract void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void open(java.net.URL, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void open(java.io.InputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void readProlog() throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean readSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void readEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getSentenceCount() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public abstract void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public abstract java.lang.String getOptions();
  public abstract void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void close() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getNIterations();
  public abstract void setNIterations(int);
  public abstract int getIterationCounter();
}
Compiled from "TabReader.java"
public class org.maltparser.core.syntaxgraph.reader.TabReader implements org.maltparser.core.syntaxgraph.reader.SyntaxGraphReader {
  public org.maltparser.core.syntaxgraph.reader.TabReader();
  public void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.net.URL, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.io.InputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void readProlog() throws org.maltparser.core.exception.MaltChainedException;
  public boolean readSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void readEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedReader getReader();
  public void setReader(java.io.BufferedReader) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public int getSentenceCount() throws org.maltparser.core.exception.MaltChainedException;
  public void setSentenceCount(int);
  public java.lang.String getOptions();
  public void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getFileName();
  public void setFileName(java.lang.String);
  public java.net.URL getUrl();
  public void setUrl(java.net.URL);
  public java.lang.String getCharsetName();
  public void setCharsetName(java.lang.String);
  public int getNIterations();
  public void setNIterations(int);
  public int getIterationCounter();
  public void close() throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "TigerXMLHeader.java"
public class org.maltparser.core.syntaxgraph.reader.TigerXMLHeader {
  public org.maltparser.core.syntaxgraph.reader.TigerXMLHeader(org.maltparser.core.symbol.SymbolTableHandler);
  public boolean isTigerXMLWritable();
  public void addFeature(java.lang.String, java.lang.String);
  public void addFeatureValue(java.lang.String, java.lang.String);
  public void addFeatureValue(java.lang.String, java.lang.String, java.lang.String);
  public void addEdgeLabelValue(java.lang.String);
  public void addEdgeLabelValue(java.lang.String, java.lang.String);
  public void addSecEdgeLabelValue(java.lang.String);
  public void addSecEdgeLabelValue(java.lang.String, java.lang.String);
  public java.lang.String getCorpusID();
  public void setCorpusID(java.lang.String);
  public java.lang.String getCorpusVersion();
  public void setCorpusVersion(java.lang.String);
  public void setExternal(java.lang.String);
  public java.lang.String getExternal();
  public void setMeta(java.lang.String, java.lang.String);
  public java.lang.String getMetaName();
  public void setMetaName(java.lang.String);
  public java.lang.String getMetaAuthor();
  public void setMetaAuthor(java.lang.String);
  public java.lang.String getMetaDescription();
  public void setMetaDescription(java.lang.String);
  public java.lang.String getMetaInDate();
  public java.lang.String getMetaCurrentDate();
  public java.lang.String getMetaCurrentDate(java.lang.String);
  public void setMetaInDate(java.lang.String);
  public java.lang.String getMetaFormat();
  public void setMetaFormat(java.lang.String);
  public java.lang.String getMetaHistory();
  public void setMetaHistory(java.lang.String);
  public org.maltparser.core.symbol.SymbolTableHandler getSymbolTableHandler();
  protected void setSymbolTableHandler(org.maltparser.core.symbol.SymbolTableHandler);
  public java.lang.String toTigerXML();
  public java.lang.String toString();
}
Compiled from "TigerXMLHeader.java"
public final class org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain extends java.lang.Enum<org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain> {
  public static final org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain T;
  public static final org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain NT;
  public static final org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain FREC;
  public static final org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain EL;
  public static final org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain SEL;
  public static org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain[] values();
  public static org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain valueOf(java.lang.String);
  static {};
}
Compiled from "TigerXMLHeader.java"
public class org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$FeatureEdgeLabel {
  final org.maltparser.core.syntaxgraph.reader.TigerXMLHeader this$0;
  public org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$FeatureEdgeLabel(org.maltparser.core.syntaxgraph.reader.TigerXMLHeader, java.lang.String, java.lang.String);
  public org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$FeatureEdgeLabel(org.maltparser.core.syntaxgraph.reader.TigerXMLHeader, java.lang.String, org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public void setDomain(java.lang.String);
  public void setDomain(org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain);
  public java.lang.String getDomainName();
  public org.maltparser.core.syntaxgraph.reader.TigerXMLHeader$Domain getDomain();
  public org.maltparser.core.symbol.SymbolTable getTable();
  public void setTable(org.maltparser.core.symbol.SymbolTable);
  public void addValue(java.lang.String);
  public void addValue(java.lang.String, java.lang.String);
  public java.lang.String toTigerXML();
  public java.lang.String toString();
}
Compiled from "TigerXMLReader.java"
public class org.maltparser.core.syntaxgraph.reader.TigerXMLReader implements org.maltparser.core.syntaxgraph.reader.SyntaxGraphReader {
  public org.maltparser.core.syntaxgraph.reader.TigerXMLReader();
  public void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.net.URL, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.io.InputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void readProlog() throws org.maltparser.core.exception.MaltChainedException;
  public boolean readSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public int getSentenceCount();
  public void setSentenceCount(int);
  public javax.xml.stream.XMLStreamReader getReader();
  public void setReader(javax.xml.stream.XMLStreamReader);
  public void readEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public void close() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public java.lang.String getOptions();
  public void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getFileName();
  public void setFileName(java.lang.String);
  public java.net.URL getUrl();
  public void setUrl(java.net.URL);
  public java.lang.String getCharsetName();
  public void setCharsetName(java.lang.String);
  public int getNIterations();
  public void setNIterations(int);
  public int getIterationCounter();
}
Compiled from "BracketWriter.java"
public class org.maltparser.core.syntaxgraph.writer.BracketWriter implements org.maltparser.core.syntaxgraph.writer.SyntaxGraphWriter {
  public org.maltparser.core.syntaxgraph.writer.BracketWriter();
  public void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.io.OutputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void writeEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public void writeProlog() throws org.maltparser.core.exception.MaltChainedException;
  public void writeSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedWriter getWriter();
  public void setWriter(java.io.BufferedWriter) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public java.lang.String getOptions();
  public void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void close() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "BracketWriter.java"
final class org.maltparser.core.syntaxgraph.writer.BracketWriter$PennWriterFormat extends java.lang.Enum<org.maltparser.core.syntaxgraph.writer.BracketWriter$PennWriterFormat> {
  public static final org.maltparser.core.syntaxgraph.writer.BracketWriter$PennWriterFormat DEFAULT;
  public static final org.maltparser.core.syntaxgraph.writer.BracketWriter$PennWriterFormat PRETTY;
  public static org.maltparser.core.syntaxgraph.writer.BracketWriter$PennWriterFormat[] values();
  public static org.maltparser.core.syntaxgraph.writer.BracketWriter$PennWriterFormat valueOf(java.lang.String);
  static {};
}
Compiled from "NegraWriter.java"
public class org.maltparser.core.syntaxgraph.writer.NegraWriter implements org.maltparser.core.syntaxgraph.writer.SyntaxGraphWriter {
  public org.maltparser.core.syntaxgraph.writer.NegraWriter();
  public void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.io.OutputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void writeProlog() throws org.maltparser.core.exception.MaltChainedException;
  public void writeSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void writeEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedWriter getWriter();
  public void setWriter(java.io.BufferedWriter);
  public int getSentenceCount();
  public void setSentenceCount(int);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public java.lang.String getOptions();
  public void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void close() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SyntaxGraphWriter.java"
public interface org.maltparser.core.syntaxgraph.writer.SyntaxGraphWriter {
  public abstract void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void open(java.io.OutputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void writeProlog() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void writeSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void writeEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public abstract void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public abstract java.lang.String getOptions();
  public abstract void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void close() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "TabWriter.java"
public class org.maltparser.core.syntaxgraph.writer.TabWriter implements org.maltparser.core.syntaxgraph.writer.SyntaxGraphWriter {
  public org.maltparser.core.syntaxgraph.writer.TabWriter();
  public void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.io.OutputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void writeProlog() throws org.maltparser.core.exception.MaltChainedException;
  public void writeSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void writeEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedWriter getWriter();
  public void setWriter(java.io.BufferedWriter) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public java.lang.String getOptions();
  public void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void close() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "TigerXMLWriter.java"
public class org.maltparser.core.syntaxgraph.writer.TigerXMLWriter implements org.maltparser.core.syntaxgraph.writer.SyntaxGraphWriter {
  public org.maltparser.core.syntaxgraph.writer.TigerXMLWriter();
  public void open(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void open(java.io.OutputStream, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void writeProlog() throws org.maltparser.core.exception.MaltChainedException;
  public void writeSentence(org.maltparser.core.syntaxgraph.TokenStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void writeEpilog() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedWriter getWriter();
  public void setWriter(java.io.BufferedWriter);
  public void close() throws org.maltparser.core.exception.MaltChainedException;
  public void writeNonTerminals(org.maltparser.core.syntaxgraph.PhraseStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void writeNonTerminal(org.maltparser.core.syntaxgraph.node.NonTerminalNode, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public int getSentenceCount();
  public void setSentenceCount(int);
  public org.maltparser.core.io.dataformat.DataFormatInstance getDataFormatInstance();
  public void setDataFormatInstance(org.maltparser.core.io.dataformat.DataFormatInstance);
  public java.lang.String getOptions();
  public void setOptions(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "TigerXMLWriter.java"
final class org.maltparser.core.syntaxgraph.writer.TigerXMLWriter$RootHandling extends java.lang.Enum<org.maltparser.core.syntaxgraph.writer.TigerXMLWriter$RootHandling> {
  public static final org.maltparser.core.syntaxgraph.writer.TigerXMLWriter$RootHandling TALBANKEN;
  public static final org.maltparser.core.syntaxgraph.writer.TigerXMLWriter$RootHandling NORMAL;
  public static org.maltparser.core.syntaxgraph.writer.TigerXMLWriter$RootHandling[] values();
  public static org.maltparser.core.syntaxgraph.writer.TigerXMLWriter$RootHandling valueOf(java.lang.String);
  static {};
}
Compiled from "WriteChartItem.java"
public class org.maltparser.core.syntaxgraph.writer.WriteChartItem extends org.maltparser.core.flow.item.ChartItem {
  public org.maltparser.core.syntaxgraph.writer.WriteChartItem();
  public void initialize(org.maltparser.core.flow.FlowChartInstance, org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public int preprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public int process(int) throws org.maltparser.core.exception.MaltChainedException;
  public int postprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getOutputFormatName();
  public void setOutputFormatName(java.lang.String);
  public java.lang.String getOutputFileName();
  public void setOutputFileName(java.lang.String);
  public java.lang.String getOutputCharSet();
  public void setOutputCharSet(java.lang.String);
  public java.lang.String getWriterOptions();
  public void setWriterOptions(java.lang.String);
  public java.lang.Class<? extends org.maltparser.core.syntaxgraph.writer.SyntaxGraphWriter> getSyntaxGraphWriterClass();
  public void setSyntaxGraphWriterClass(java.lang.Class<?>) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getNullValueStrategy();
  public void setNullValueStrategy(java.lang.String);
  public void initOutput(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void initWriter(java.lang.Class<? extends org.maltparser.core.syntaxgraph.writer.SyntaxGraphWriter>, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<? extends org.maltparser.core.syntaxgraph.writer.SyntaxGraphWriter> getGraphWriterClass();
  public org.maltparser.core.syntaxgraph.writer.SyntaxGraphWriter getWriter();
  public java.lang.String getSourceName();
  public org.maltparser.core.io.dataformat.DataFormatInstance getOutputDataFormatInstance();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "CreateDependencyGraph.java"
public class org.maltparser.examples.CreateDependencyGraph {
  public org.maltparser.examples.CreateDependencyGraph();
  public org.maltparser.core.syntaxgraph.DependencyGraph run() throws org.maltparser.core.exception.MaltChainedException;
  public static void main(java.lang.String[]);
}
Compiled from "CreatePhraseStructureGraph.java"
public class org.maltparser.examples.CreatePhraseStructureGraph {
  public org.maltparser.examples.CreatePhraseStructureGraph();
  public org.maltparser.core.syntaxgraph.PhraseStructureGraph run() throws org.maltparser.core.exception.MaltChainedException;
  public static void main(java.lang.String[]);
}
Compiled from "OptionFreeInitialization.java"
public class org.maltparser.examples.OptionFreeInitialization {
  public org.maltparser.examples.OptionFreeInitialization();
  public static void main(java.lang.String[]);
}
Compiled from "ParseSentence1.java"
public class org.maltparser.examples.ParseSentence1 {
  public org.maltparser.examples.ParseSentence1();
  public static void main(java.lang.String[]);
}
Compiled from "ParseSentence2.java"
public class org.maltparser.examples.ParseSentence2 {
  public org.maltparser.examples.ParseSentence2();
  public static void main(java.lang.String[]);
}
Compiled from "ParseSentence3.java"
public class org.maltparser.examples.ParseSentence3 {
  public org.maltparser.examples.ParseSentence3();
  public static void main(java.lang.String[]);
}
Compiled from "ParseSentence4.java"
public class org.maltparser.examples.ParseSentence4 {
  public org.maltparser.examples.ParseSentence4();
  public static void main(java.lang.String[]);
}
Compiled from "ParsingExperiment.java"
public class org.maltparser.examples.ParsingExperiment {
  public org.maltparser.examples.ParsingExperiment();
  public static void main(java.lang.String[]);
}
Compiled from "ReadWriteCoNLL.java"
public class org.maltparser.examples.ReadWriteCoNLL {
  public org.maltparser.examples.ReadWriteCoNLL(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void run(java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public static void main(java.lang.String[]);
}
Compiled from "TrainingExperiment.java"
public class org.maltparser.examples.TrainingExperiment {
  public org.maltparser.examples.TrainingExperiment();
  public static void main(java.lang.String[]);
}
Compiled from "LearningMethod.java"
public interface org.maltparser.ml.LearningMethod {
  public static final int BATCH;
  public static final int CLASSIFY;
  public abstract void addInstance(org.maltparser.parser.history.action.SingleDecision, org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void train(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void moveAllInstances(org.maltparser.ml.LearningMethod, org.maltparser.core.feature.function.FeatureFunction, java.util.ArrayList<java.lang.Integer>) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean predict(org.maltparser.core.feature.FeatureVector, org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.io.BufferedWriter getInstanceWriter();
  public abstract void increaseNumberOfInstances();
  public abstract void decreaseNumberOfInstances();
}
Compiled from "Cheater.java"
public class org.maltparser.ml.cheater.Cheater implements org.maltparser.ml.LearningMethod {
  protected org.maltparser.parser.guide.instance.InstanceModel owner;
  protected int learnerMode;
  protected java.lang.String name;
  protected int numberOfInstances;
  protected boolean excludeNullValues;
  public org.maltparser.ml.cheater.Cheater(org.maltparser.parser.guide.instance.InstanceModel, java.lang.Integer) throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.SingleDecision, org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public void train(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public boolean predict(org.maltparser.core.feature.FeatureVector, org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void moveAllInstances(org.maltparser.ml.LearningMethod, org.maltparser.core.feature.function.FeatureFunction, java.util.ArrayList<java.lang.Integer>) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  protected void closeCheaterWriter() throws org.maltparser.core.exception.MaltChainedException;
  protected void closeInstanceWriter() throws org.maltparser.core.exception.MaltChainedException;
  protected void initSpecialParameters() throws org.maltparser.core.exception.MaltChainedException;
  public static void maltSVMFormat2OriginalSVMFormat(java.io.InputStreamReader, java.io.OutputStreamWriter, int[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedWriter getInstanceWriter();
  public org.maltparser.parser.guide.instance.InstanceModel getOwner();
  protected void setOwner(org.maltparser.parser.guide.instance.InstanceModel);
  public int getLearnerMode();
  public void setLearnerMode(int) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getLearningMethodName();
  public org.maltparser.parser.DependencyParserConfig getConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public int getNumberOfInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void increaseNumberOfInstances();
  public void decreaseNumberOfInstances();
  protected void setNumberOfInstances(int);
  protected void setLearningMethodName(java.lang.String);
  protected java.io.OutputStreamWriter getInstanceOutputStreamWriter(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStreamReader getInstanceInputStreamReader(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStreamReader getInstanceInputStreamReaderFromConfigFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.File getFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.util.jar.JarEntry getConfigFileEntry(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected void finalize() throws java.lang.Throwable;
  public java.lang.String toString();
}
Compiled from "Cheater.java"
public final class org.maltparser.ml.cheater.Cheater$Verbostity extends java.lang.Enum<org.maltparser.ml.cheater.Cheater$Verbostity> {
  public static final org.maltparser.ml.cheater.Cheater$Verbostity SILENT;
  public static final org.maltparser.ml.cheater.Cheater$Verbostity ERROR;
  public static final org.maltparser.ml.cheater.Cheater$Verbostity ALL;
  public static org.maltparser.ml.cheater.Cheater$Verbostity[] values();
  public static org.maltparser.ml.cheater.Cheater$Verbostity valueOf(java.lang.String);
  static {};
}
Compiled from "CheaterException.java"
public class org.maltparser.ml.cheater.CheaterException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.ml.cheater.CheaterException(java.lang.String);
  public org.maltparser.ml.cheater.CheaterException(java.lang.String, java.lang.Throwable);
}
Compiled from "FeatureList.java"
public class org.maltparser.ml.lib.FeatureList {
  public org.maltparser.ml.lib.FeatureList();
  public org.maltparser.ml.lib.FeatureList(int);
  public void add(org.maltparser.ml.lib.MaltFeatureNode);
  public void add(int, double);
  public org.maltparser.ml.lib.MaltFeatureNode get(int);
  public void clear();
  public int size();
  public org.maltparser.ml.lib.MaltFeatureNode[] toArray();
}
Compiled from "FeatureMap.java"
public class org.maltparser.ml.lib.FeatureMap implements java.io.Serializable {
  public org.maltparser.ml.lib.FeatureMap();
  public int addIndex(int, int);
  public int getIndex(int, int);
  public int addIndex(int, int, int);
  public int setIndex(long, int);
  public int decrementIndex(java.lang.Long);
  public void decrementfeatureCounter();
  public java.lang.Integer removeIndex(long);
  public int getIndex(int, int, int);
  public int size();
  public java.lang.Long[] reverseMap();
  public void setFeatureCounter(int);
  public int getFeatureCounter();
}
Compiled from "Lib.java"
public abstract class org.maltparser.ml.lib.Lib implements org.maltparser.ml.LearningMethod {
  protected org.maltparser.ml.lib.Lib$Verbostity verbosity;
  protected org.maltparser.parser.guide.instance.InstanceModel owner;
  protected int learnerMode;
  protected java.lang.String name;
  protected int numberOfInstances;
  protected boolean saveInstanceFiles;
  protected boolean excludeNullValues;
  protected java.io.BufferedWriter instanceOutput;
  protected org.maltparser.ml.lib.FeatureMap featureMap;
  protected java.lang.String paramString;
  protected java.lang.String pathExternalTrain;
  protected java.util.LinkedHashMap<java.lang.String, java.lang.String> libOptions;
  protected java.lang.String allowedLibOptionFlags;
  protected org.apache.log4j.Logger configLogger;
  protected final java.util.regex.Pattern tabPattern;
  protected final java.util.regex.Pattern pipePattern;
  protected org.maltparser.ml.lib.MaltLibModel model;
  public org.maltparser.ml.lib.Lib(org.maltparser.parser.guide.instance.InstanceModel, java.lang.Integer, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.SingleDecision, org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void moveAllInstances(org.maltparser.ml.LearningMethod, org.maltparser.core.feature.function.FeatureFunction, java.util.ArrayList<java.lang.Integer>) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public boolean predict(org.maltparser.core.feature.FeatureVector, org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public void train(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  protected abstract void trainExternal(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  protected abstract void trainInternal(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedWriter getInstanceWriter();
  protected void closeInstanceWriter() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getParamString();
  public org.maltparser.parser.guide.instance.InstanceModel getOwner();
  protected void setOwner(org.maltparser.parser.guide.instance.InstanceModel);
  public int getLearnerMode();
  public void setLearnerMode(int) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getLearningMethodName();
  public org.maltparser.parser.DependencyParserConfig getConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public int getNumberOfInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void increaseNumberOfInstances();
  public void decreaseNumberOfInstances();
  protected void setNumberOfInstances(int);
  protected void setLearningMethodName(java.lang.String);
  public java.lang.String getPathExternalTrain();
  public void setPathExternalTrain(java.lang.String);
  protected java.io.OutputStreamWriter getInstanceOutputStreamWriter(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStreamReader getInstanceInputStreamReader(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStreamReader getInstanceInputStreamReaderFromConfigFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStream getInputStreamFromConfigFileEntry(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.File getFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.util.jar.JarEntry getConfigFileEntry(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected void initSpecialParameters() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getLibOptions();
  public java.lang.String[] getLibParamStringArray();
  public abstract void initLibOptions();
  public abstract void initAllowedLibOptionFlags();
  public void parseParameters(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected void finalize() throws java.lang.Throwable;
  public java.lang.String toString();
  protected int binariesInstance(java.lang.String, org.maltparser.ml.lib.FeatureList) throws org.maltparser.core.exception.MaltChainedException;
  protected void binariesInstances2SVMFileFormat(java.io.InputStreamReader, java.io.OutputStreamWriter) throws org.maltparser.core.exception.MaltChainedException;
  protected void saveFeatureMap(java.io.OutputStream, org.maltparser.ml.lib.FeatureMap) throws org.maltparser.core.exception.MaltChainedException;
  protected org.maltparser.ml.lib.FeatureMap loadFeatureMap(java.io.InputStream) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Lib.java"
public final class org.maltparser.ml.lib.Lib$Verbostity extends java.lang.Enum<org.maltparser.ml.lib.Lib$Verbostity> {
  public static final org.maltparser.ml.lib.Lib$Verbostity SILENT;
  public static final org.maltparser.ml.lib.Lib$Verbostity ERROR;
  public static final org.maltparser.ml.lib.Lib$Verbostity ALL;
  public static org.maltparser.ml.lib.Lib$Verbostity[] values();
  public static org.maltparser.ml.lib.Lib$Verbostity valueOf(java.lang.String);
  static {};
}
Compiled from "LibException.java"
public class org.maltparser.ml.lib.LibException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.ml.lib.LibException(java.lang.String);
  public org.maltparser.ml.lib.LibException(java.lang.String, java.lang.Throwable);
}
Compiled from "LibLinear.java"
public class org.maltparser.ml.lib.LibLinear extends org.maltparser.ml.lib.Lib {
  public org.maltparser.ml.lib.LibLinear(org.maltparser.parser.guide.instance.InstanceModel, java.lang.Integer) throws org.maltparser.core.exception.MaltChainedException;
  protected void trainInternal(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public static boolean eliminate(double[]);
  protected void trainExternal(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public void initLibOptions();
  public void initAllowedLibOptionFlags();
}
Compiled from "LibSvm.java"
public class org.maltparser.ml.lib.LibSvm extends org.maltparser.ml.lib.Lib {
  public org.maltparser.ml.lib.LibSvm(org.maltparser.parser.guide.instance.InstanceModel, java.lang.Integer) throws org.maltparser.core.exception.MaltChainedException;
  protected void trainInternal(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  protected void trainExternal(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public void initLibOptions();
  public void initAllowedLibOptionFlags();
}
Compiled from "MaltFeatureNode.java"
public class org.maltparser.ml.lib.MaltFeatureNode implements java.lang.Comparable<org.maltparser.ml.lib.MaltFeatureNode> {
  int index;
  double value;
  public org.maltparser.ml.lib.MaltFeatureNode();
  public org.maltparser.ml.lib.MaltFeatureNode(int, double);
  public int getIndex();
  public void setIndex(int);
  public double getValue();
  public void setValue(double);
  public void clear();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(org.maltparser.ml.lib.MaltFeatureNode);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "MaltLibModel.java"
public interface org.maltparser.ml.lib.MaltLibModel {
  public abstract int[] predict(org.maltparser.ml.lib.MaltFeatureNode[]);
}
Compiled from "MaltLiblinearModel.java"
public class org.maltparser.ml.lib.MaltLiblinearModel implements java.io.Serializable,org.maltparser.ml.lib.MaltLibModel {
  public org.maltparser.ml.lib.MaltLiblinearModel(int[], int, int, double[][], de.bwaldvogel.liblinear.SolverType);
  public org.maltparser.ml.lib.MaltLiblinearModel(java.io.Reader) throws java.io.IOException;
  public org.maltparser.ml.lib.MaltLiblinearModel(java.io.File) throws java.io.IOException;
  public int getNrClass();
  public int getNrFeature();
  public int[] getLabels();
  public boolean isProbabilityModel();
  public double getBias();
  public int[] predict(org.maltparser.ml.lib.MaltFeatureNode[]);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  static {};
}
Compiled from "MaltLibsvmModel.java"
public class org.maltparser.ml.lib.MaltLibsvmModel implements java.io.Serializable,org.maltparser.ml.lib.MaltLibModel {
  public libsvm.svm_parameter param;
  public int nr_class;
  public int l;
  public libsvm.svm_node[][] SV;
  public double[][] sv_coef;
  public double[] rho;
  public int[] label;
  public int[] nSV;
  public int[] start;
  public org.maltparser.ml.lib.MaltLibsvmModel(libsvm.svm_model, libsvm.svm_problem);
  public int[] predict(org.maltparser.ml.lib.MaltFeatureNode[]);
  static double dot(org.maltparser.ml.lib.MaltFeatureNode[], libsvm.svm_node[]);
  static double powi(double, int);
  static double k_function(org.maltparser.ml.lib.MaltFeatureNode[], libsvm.svm_node[], libsvm.svm_parameter);
  public int[] getLabels();
}
Compiled from "Liblinear.java"
public class org.maltparser.ml.liblinear.Liblinear implements org.maltparser.ml.LearningMethod {
  public static final java.lang.String LIBLINEAR_VERSION;
  protected org.maltparser.parser.guide.instance.InstanceModel owner;
  protected int learnerMode;
  protected java.lang.String name;
  protected int numberOfInstances;
  protected boolean saveInstanceFiles;
  protected boolean excludeNullValues;
  protected java.lang.String pathExternalLiblinearTrain;
  public org.maltparser.ml.liblinear.Liblinear(org.maltparser.parser.guide.instance.InstanceModel, java.lang.Integer) throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.SingleDecision, org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void train(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public void moveAllInstances(org.maltparser.ml.LearningMethod, org.maltparser.core.feature.function.FeatureFunction, java.util.ArrayList<java.lang.Integer>) throws org.maltparser.core.exception.MaltChainedException;
  public boolean predict(org.maltparser.core.feature.FeatureVector, org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public boolean predictWithFeaturePruning(org.maltparser.core.feature.FeatureVector, org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedWriter getInstanceWriter();
  protected void closeInstanceWriter() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getParamString();
  public org.maltparser.parser.guide.instance.InstanceModel getOwner();
  protected void setOwner(org.maltparser.parser.guide.instance.InstanceModel);
  public int getLearnerMode();
  public void setLearnerMode(int) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getLearningMethodName();
  public org.maltparser.parser.DependencyParserConfig getConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public int getNumberOfInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void increaseNumberOfInstances();
  public void decreaseNumberOfInstances();
  protected void setNumberOfInstances(int);
  protected void setLearningMethodName(java.lang.String);
  protected java.io.OutputStreamWriter getInstanceOutputStreamWriter(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStreamReader getInstanceInputStreamReader(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStreamReader getInstanceInputStreamReaderFromConfigFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStream getInputStreamFromConfigFileEntry(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.File getFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.util.jar.JarEntry getConfigFileEntry(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public de.bwaldvogel.liblinear.Problem readLibLinearProblemWithFeaturePruning(java.io.InputStreamReader) throws org.maltparser.core.exception.MaltChainedException;
  public de.bwaldvogel.liblinear.Problem readLibLinearProblem(java.io.InputStreamReader, int[]) throws org.maltparser.core.exception.MaltChainedException;
  protected void initSpecialParameters() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getLibLinearOptions();
  public void parseParameters(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public double getBias() throws org.maltparser.core.exception.MaltChainedException;
  public de.bwaldvogel.liblinear.Parameter getLiblinearParameters() throws org.maltparser.core.exception.MaltChainedException;
  public void initLiblinearOptions();
  public java.lang.String[] getLibLinearParamStringArray();
  public void liblinear_predict_with_kbestlist(de.bwaldvogel.liblinear.Model, de.bwaldvogel.liblinear.FeatureNode[], org.maltparser.parser.history.kbest.KBestList) throws org.maltparser.core.exception.MaltChainedException;
  public static void maltSVMFormat2OriginalSVMFormat(java.io.InputStreamReader, java.io.OutputStreamWriter, int[]) throws org.maltparser.core.exception.MaltChainedException;
  protected void finalize() throws java.lang.Throwable;
  public java.lang.String toString();
}
Compiled from "Liblinear.java"
public final class org.maltparser.ml.liblinear.Liblinear$Verbostity extends java.lang.Enum<org.maltparser.ml.liblinear.Liblinear$Verbostity> {
  public static final org.maltparser.ml.liblinear.Liblinear$Verbostity SILENT;
  public static final org.maltparser.ml.liblinear.Liblinear$Verbostity ERROR;
  public static final org.maltparser.ml.liblinear.Liblinear$Verbostity ALL;
  public static org.maltparser.ml.liblinear.Liblinear$Verbostity[] values();
  public static org.maltparser.ml.liblinear.Liblinear$Verbostity valueOf(java.lang.String);
  static {};
}
Compiled from "LiblinearException.java"
public class org.maltparser.ml.liblinear.LiblinearException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.ml.liblinear.LiblinearException(java.lang.String);
  public org.maltparser.ml.liblinear.LiblinearException(java.lang.String, java.lang.Throwable);
}
Compiled from "XNode.java"
public class org.maltparser.ml.liblinear.XNode implements java.lang.Comparable<org.maltparser.ml.liblinear.XNode> {
  public org.maltparser.ml.liblinear.XNode(int, double);
  public int getIndex();
  public void setIndex(int);
  public double getValue();
  public void setValue(double);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(org.maltparser.ml.liblinear.XNode);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "Libsvm.java"
public class org.maltparser.ml.libsvm.Libsvm implements org.maltparser.ml.LearningMethod {
  public static final java.lang.String LIBSVM_VERSION;
  protected org.maltparser.parser.guide.instance.InstanceModel owner;
  protected int learnerMode;
  protected java.lang.String name;
  protected int numberOfInstances;
  protected boolean saveInstanceFiles;
  protected boolean excludeNullValues;
  protected java.lang.String pathExternalSVMTrain;
  public org.maltparser.ml.libsvm.Libsvm(org.maltparser.parser.guide.instance.InstanceModel, java.lang.Integer) throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.SingleDecision, org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void train(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  public void moveAllInstances(org.maltparser.ml.LearningMethod, org.maltparser.core.feature.function.FeatureFunction, java.util.ArrayList<java.lang.Integer>) throws org.maltparser.core.exception.MaltChainedException;
  public boolean predict(org.maltparser.core.feature.FeatureVector, org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public java.io.BufferedWriter getInstanceWriter();
  protected void closeInstanceWriter() throws org.maltparser.core.exception.MaltChainedException;
  protected void initSvmParam(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getParamString();
  public org.maltparser.parser.guide.instance.InstanceModel getOwner();
  protected void setOwner(org.maltparser.parser.guide.instance.InstanceModel);
  public int getLearnerMode();
  public void setLearnerMode(int) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getLearningMethodName();
  public org.maltparser.parser.DependencyParserConfig getConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public int getNumberOfInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void increaseNumberOfInstances();
  public void decreaseNumberOfInstances();
  protected void setNumberOfInstances(int);
  protected void setLearningMethodName(java.lang.String);
  protected java.io.OutputStreamWriter getInstanceOutputStreamWriter(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStreamReader getInstanceInputStreamReader(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.InputStreamReader getInstanceInputStreamReaderFromConfigFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.io.File getFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected java.util.jar.JarEntry getConfigFileEntry(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public final libsvm.svm_problem readProblemMaltSVMFormat(java.io.InputStreamReader, int[], libsvm.svm_parameter) throws org.maltparser.core.exception.MaltChainedException;
  protected void initSpecialParameters() throws org.maltparser.core.exception.MaltChainedException;
  protected void initParameters(libsvm.svm_parameter) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toStringParameters(libsvm.svm_parameter);
  public java.lang.String[] getSVMParamStringArray(libsvm.svm_parameter);
  public void parseParameters(java.lang.String, libsvm.svm_parameter) throws org.maltparser.core.exception.MaltChainedException;
  public void svm_predict_with_kbestlist(libsvm.svm_model, libsvm.svm_node[], org.maltparser.parser.history.kbest.KBestList) throws org.maltparser.core.exception.MaltChainedException;
  public static void maltSVMFormat2OriginalSVMFormat(java.io.InputStreamReader, java.io.OutputStreamWriter, int[]) throws org.maltparser.core.exception.MaltChainedException;
  protected void finalize() throws java.lang.Throwable;
  public java.lang.String toString();
}
Compiled from "Libsvm.java"
public final class org.maltparser.ml.libsvm.Libsvm$Verbostity extends java.lang.Enum<org.maltparser.ml.libsvm.Libsvm$Verbostity> {
  public static final org.maltparser.ml.libsvm.Libsvm$Verbostity SILENT;
  public static final org.maltparser.ml.libsvm.Libsvm$Verbostity ERROR;
  public static final org.maltparser.ml.libsvm.Libsvm$Verbostity ALL;
  public static org.maltparser.ml.libsvm.Libsvm$Verbostity[] values();
  public static org.maltparser.ml.libsvm.Libsvm$Verbostity valueOf(java.lang.String);
  static {};
}
Compiled from "LibsvmException.java"
public class org.maltparser.ml.libsvm.LibsvmException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.ml.libsvm.LibsvmException(java.lang.String);
  public org.maltparser.ml.libsvm.LibsvmException(java.lang.String, java.lang.Throwable);
}
Compiled from "AbstractParserFactory.java"
public interface org.maltparser.parser.AbstractParserFactory extends org.maltparser.core.feature.AbstractFeatureFactory {
  public abstract org.maltparser.parser.ParserConfiguration makeParserConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Algorithm.java"
public abstract class org.maltparser.parser.Algorithm {
  protected org.maltparser.parser.DependencyParserConfig manager;
  protected org.maltparser.parser.guide.ClassifierGuide classifierGuide;
  protected org.maltparser.parser.ParserState parserState;
  protected org.maltparser.parser.ParserConfiguration currentParserConfiguration;
  protected boolean diagnostics;
  protected java.io.BufferedWriter diaWriter;
  public org.maltparser.parser.Algorithm(org.maltparser.parser.DependencyParserConfig) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public boolean isDiagnostics();
  public void setDiagnostics(boolean);
  public java.io.BufferedWriter getDiaWriter();
  public void writeToDiaFile(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void closeDiaWriter() throws org.maltparser.core.exception.MaltChainedException;
  public void openDiaWriter(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.ClassifierGuide getGuide();
  public void setGuide(org.maltparser.parser.guide.ClassifierGuide);
  public org.maltparser.parser.ParserConfiguration getCurrentParserConfiguration();
  protected void setCurrentParserConfiguration(org.maltparser.parser.ParserConfiguration);
  public org.maltparser.parser.ParserState getParserState();
  protected void setParserState(org.maltparser.parser.ParserState);
  protected org.maltparser.parser.AbstractParserFactory makeParserFactory() throws org.maltparser.core.exception.MaltChainedException;
  protected void initParserState(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.DependencyParserConfig getManager();
  public void setManager(org.maltparser.parser.DependencyParserConfig);
  protected void copyEdges(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  protected void copyDynamicInput(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "BatchTrainer.java"
public class org.maltparser.parser.BatchTrainer extends org.maltparser.parser.Trainer {
  public org.maltparser.parser.BatchTrainer(org.maltparser.parser.DependencyParserConfig) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure parse(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide getOracleGuide();
  public void train() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "DependencyParserConfig.java"
public interface org.maltparser.parser.DependencyParserConfig extends org.maltparser.core.config.Configuration {
  public abstract void parse(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void oracleParse(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.guide.ClassifierGuide getGuide();
  public abstract org.maltparser.parser.Algorithm getAlgorithm();
  public abstract org.maltparser.core.propagation.PropagationManager getPropagationManager();
}
Compiled from "DeterministicParser.java"
public class org.maltparser.parser.DeterministicParser extends org.maltparser.parser.Parser {
  public org.maltparser.parser.DeterministicParser(org.maltparser.parser.DependencyParserConfig) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure parse(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Oracle.java"
public abstract class org.maltparser.parser.Oracle implements org.maltparser.parser.guide.OracleGuide {
  protected final org.maltparser.parser.history.container.ActionContainer[] actionContainers;
  protected org.maltparser.parser.history.container.ActionContainer transActionContainer;
  protected final org.maltparser.parser.history.container.ActionContainer[] arcLabelActionContainers;
  public org.maltparser.parser.Oracle(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.GuideUserHistory getHistory();
  public org.maltparser.parser.DependencyParserConfig getConfiguration();
  public java.lang.String getGuideName();
  public void setGuideName(java.lang.String);
  protected org.maltparser.parser.history.action.GuideUserAction updateActionContainers(int, org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Parser.java"
public abstract class org.maltparser.parser.Parser extends org.maltparser.parser.Algorithm {
  public org.maltparser.parser.Parser(org.maltparser.parser.DependencyParserConfig) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.DependencyStructure parse(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ParserConfiguration.java"
public abstract class org.maltparser.parser.ParserConfiguration {
  protected org.maltparser.parser.history.HistoryNode historyNode;
  public org.maltparser.parser.ParserConfiguration();
  public org.maltparser.parser.history.HistoryNode getHistoryNode();
  public void setHistoryNode(org.maltparser.parser.history.HistoryNode);
  public abstract void setDependencyGraph(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean isTerminalState() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.DependencyStructure getDependencyGraph();
  public abstract void clear() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void initialize(org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ParserState.java"
public class org.maltparser.parser.ParserState {
  public org.maltparser.parser.ParserState(org.maltparser.parser.Algorithm, org.maltparser.parser.AbstractParserFactory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.ParserState(org.maltparser.parser.Algorithm, org.maltparser.parser.AbstractParserFactory, int) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.Algorithm getAlgorithm();
  public org.maltparser.core.symbol.SymbolTableHandler getSymboltables();
  protected void setSymboltables(org.maltparser.core.symbol.SymbolTableHandler);
  public org.maltparser.parser.history.GuideUserHistory getHistory();
  protected void setHistory(org.maltparser.parser.history.GuideUserHistory);
  public org.maltparser.parser.TransitionSystem getTransitionSystem();
  protected void setTransitionSystem(org.maltparser.parser.TransitionSystem);
  public org.maltparser.parser.history.HistoryStructure getHistoryStructure();
  protected void setHistoryStructure(org.maltparser.parser.history.HistoryStructure);
  public void initialize(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isTerminalState() throws org.maltparser.core.exception.MaltChainedException;
  public boolean permissible(org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
  public void apply(org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
  public int nConfigurations() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.ParserConfiguration getConfiguration();
  public org.maltparser.parser.AbstractParserFactory getFactory();
}
Compiled from "ParsingException.java"
public class org.maltparser.parser.ParsingException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.parser.ParsingException(java.lang.String);
  public org.maltparser.parser.ParsingException(java.lang.String, java.lang.Throwable);
}
Compiled from "SingleMalt.java"
public class org.maltparser.parser.SingleMalt implements org.maltparser.parser.DependencyParserConfig {
  public static final int LEARN;
  public static final int PARSE;
  protected org.maltparser.core.config.ConfigurationDir configDir;
  protected org.apache.log4j.Logger configLogger;
  protected int optionContainerIndex;
  protected org.maltparser.parser.Algorithm parsingAlgorithm;
  protected int mode;
  protected org.maltparser.core.config.ConfigurationRegistry registry;
  protected org.maltparser.core.symbol.SymbolTableHandler symbolTableHandler;
  protected org.maltparser.core.io.dataformat.DataFormatInstance dataFormatInstance;
  protected long startTime;
  protected long endTime;
  protected int nIterations;
  protected org.maltparser.core.propagation.PropagationManager propagationManager;
  public org.maltparser.parser.SingleMalt();
  public void initialize(int, org.maltparser.core.io.dataformat.DataFormatInstance, org.maltparser.core.config.ConfigurationDir, int) throws org.maltparser.core.exception.MaltChainedException;
  protected void initParsingAlgorithm() throws org.maltparser.core.exception.MaltChainedException;
  public void addRegistry(java.lang.Class<?>, java.lang.Object);
  public void process(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public void parse(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void oracleParse(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void train() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public org.apache.log4j.Logger initConfigLogger(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.apache.log4j.Logger getConfigLogger();
  public void setConfigLogger(org.apache.log4j.Logger);
  public org.maltparser.core.config.ConfigurationDir getConfigurationDir();
  public void setConfigurationDir(org.maltparser.core.config.ConfigurationDir);
  public int getMode();
  public org.maltparser.core.config.ConfigurationRegistry getRegistry();
  public void setRegistry(org.maltparser.core.config.ConfigurationRegistry);
  public java.lang.Object getOptionValue(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getOptionValueString(java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.options.OptionManager getOptionManager() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.SymbolTableHandler getSymbolTables();
  public org.maltparser.core.propagation.PropagationManager getPropagationManager();
  public org.maltparser.parser.Algorithm getAlgorithm();
  public org.maltparser.parser.guide.ClassifierGuide getGuide();
  public void checkOptionDependency() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SingleMaltChartItem.java"
public class org.maltparser.parser.SingleMaltChartItem extends org.maltparser.core.flow.item.ChartItem {
  public org.maltparser.parser.SingleMaltChartItem();
  public void initialize(org.maltparser.core.flow.FlowChartInstance, org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public int preprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public int process(int) throws org.maltparser.core.exception.MaltChainedException;
  public int postprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.SingleMalt getSingleMalt();
  public void setSingleMalt(org.maltparser.parser.SingleMalt);
  public java.lang.String getTargetName();
  public void setTargetName(java.lang.String);
  public java.lang.String getSourceName();
  public void setSourceName(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "Trainer.java"
public abstract class org.maltparser.parser.Trainer extends org.maltparser.parser.Algorithm {
  public org.maltparser.parser.Trainer(org.maltparser.parser.DependencyParserConfig) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.syntaxgraph.DependencyStructure parse(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.guide.OracleGuide getOracleGuide();
  public abstract void train() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "TransitionSystem.java"
public abstract class org.maltparser.parser.TransitionSystem {
  protected org.maltparser.parser.transition.TransitionTableHandler transitionTableHandler;
  protected org.maltparser.parser.history.container.ActionContainer[] actionContainers;
  protected org.maltparser.parser.history.container.ActionContainer transActionContainer;
  protected org.maltparser.parser.history.container.ActionContainer[] arcLabelActionContainers;
  protected org.maltparser.core.propagation.PropagationManager propagationManager;
  public org.maltparser.parser.TransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void apply(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean permissible(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.history.action.GuideUserAction getDeterministicAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected abstract void addAvailableTransitionToTable(org.maltparser.parser.transition.TransitionTable) throws org.maltparser.core.exception.MaltChainedException;
  protected abstract void initWithDefaultTransitions(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getName();
  public abstract org.maltparser.parser.history.action.GuideUserAction defaultAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected org.maltparser.parser.history.action.GuideUserAction updateActionContainers(org.maltparser.parser.history.GuideUserHistory, int, org.maltparser.core.syntaxgraph.LabelSet) throws org.maltparser.core.exception.MaltChainedException;
  protected boolean isActionContainersLabeled();
  protected void addEdgeLabels(org.maltparser.core.syntaxgraph.edge.Edge) throws org.maltparser.core.exception.MaltChainedException;
  public void initTransitionSystem(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public void initTableHandlers(java.lang.String, org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public void copyAction(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.helper.HashMap<java.lang.String, org.maltparser.core.symbol.TableHandler> getTableHandlers();
  public org.maltparser.parser.transition.TransitionTableHandler getTransitionTableHandler();
  public org.maltparser.core.propagation.PropagationManager getPropagationManager();
  public void setPropagationManager(org.maltparser.core.propagation.PropagationManager);
  public java.lang.String getActionString(org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "CovingtonAddressFunction.java"
public class org.maltparser.parser.algorithm.covington.CovingtonAddressFunction extends org.maltparser.core.feature.function.AddressFunction {
  public org.maltparser.parser.algorithm.covington.CovingtonAddressFunction(java.lang.String, org.maltparser.parser.Algorithm);
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void update(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSubFunctionName();
  public void setSubFunctionName(java.lang.String);
  public org.maltparser.parser.algorithm.covington.CovingtonAddressFunction$CovingtonSubFunction getSubFunction();
  public org.maltparser.core.feature.value.AddressValue getAddressValue();
  public org.maltparser.parser.Algorithm getParsingAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public int getIndex();
  public void setIndex(int);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "CovingtonAddressFunction.java"
public final class org.maltparser.parser.algorithm.covington.CovingtonAddressFunction$CovingtonSubFunction extends java.lang.Enum<org.maltparser.parser.algorithm.covington.CovingtonAddressFunction$CovingtonSubFunction> {
  public static final org.maltparser.parser.algorithm.covington.CovingtonAddressFunction$CovingtonSubFunction LEFT;
  public static final org.maltparser.parser.algorithm.covington.CovingtonAddressFunction$CovingtonSubFunction RIGHT;
  public static final org.maltparser.parser.algorithm.covington.CovingtonAddressFunction$CovingtonSubFunction LEFTCONTEXT;
  public static final org.maltparser.parser.algorithm.covington.CovingtonAddressFunction$CovingtonSubFunction RIGHTCONTEXT;
  public static org.maltparser.parser.algorithm.covington.CovingtonAddressFunction$CovingtonSubFunction[] values();
  public static org.maltparser.parser.algorithm.covington.CovingtonAddressFunction$CovingtonSubFunction valueOf(java.lang.String);
  static {};
}
Compiled from "CovingtonConfig.java"
public class org.maltparser.parser.algorithm.covington.CovingtonConfig extends org.maltparser.parser.ParserConfiguration {
  public org.maltparser.parser.algorithm.covington.CovingtonConfig(org.maltparser.core.symbol.SymbolTableHandler, boolean, boolean) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyStructure();
  public java.util.ArrayList<org.maltparser.core.syntaxgraph.node.DependencyNode> getInput();
  public boolean isTerminalState();
  public int getRight();
  public void setRight(int);
  public int getLeft();
  public void setLeft(int);
  public int getLeftstop();
  public int getRightstop();
  public boolean isAllowRoot();
  public void setAllowRoot(boolean);
  public boolean isAllowShift();
  public void setAllowShift(boolean);
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLeftNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getRightNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLeftContextNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getRightContextNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLeftTarget();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getRightTarget();
  public void setDependencyGraph(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyGraph();
  public void initialize(org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "CovingtonFactory.java"
public abstract class org.maltparser.parser.algorithm.covington.CovingtonFactory implements org.maltparser.parser.AbstractParserFactory {
  protected org.maltparser.parser.Algorithm algorithm;
  protected org.maltparser.parser.DependencyParserConfig manager;
  public org.maltparser.parser.algorithm.covington.CovingtonFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.ParserConfiguration makeParserConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.Function makeFunction(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.Algorithm getAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.DependencyParserConfig getManager();
  public void setManager(org.maltparser.parser.DependencyParserConfig);
}
Compiled from "CovingtonNonProjFactory.java"
public class org.maltparser.parser.algorithm.covington.CovingtonNonProjFactory extends org.maltparser.parser.algorithm.covington.CovingtonFactory {
  public org.maltparser.parser.algorithm.covington.CovingtonNonProjFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "CovingtonOracle.java"
public class org.maltparser.parser.algorithm.covington.CovingtonOracle extends org.maltparser.parser.Oracle {
  public org.maltparser.parser.algorithm.covington.CovingtonOracle(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction predict(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "CovingtonProjFactory.java"
public class org.maltparser.parser.algorithm.covington.CovingtonProjFactory extends org.maltparser.parser.algorithm.covington.CovingtonFactory {
  public org.maltparser.parser.algorithm.covington.CovingtonProjFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "NonProjective.java"
public class org.maltparser.parser.algorithm.covington.NonProjective extends org.maltparser.parser.TransitionSystem {
  protected static final int SHIFT;
  protected static final int NOARC;
  protected static final int RIGHTARC;
  protected static final int LEFTARC;
  public org.maltparser.parser.algorithm.covington.NonProjective() throws org.maltparser.core.exception.MaltChainedException;
  public void apply(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction getDeterministicAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected void addAvailableTransitionToTable(org.maltparser.parser.transition.TransitionTable) throws org.maltparser.core.exception.MaltChainedException;
  protected void initWithDefaultTransitions(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public boolean permissible(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction defaultAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Projective.java"
public class org.maltparser.parser.algorithm.covington.Projective extends org.maltparser.parser.TransitionSystem {
  protected static final int SHIFT;
  protected static final int NOARC;
  protected static final int RIGHTARC;
  protected static final int LEFTARC;
  public org.maltparser.parser.algorithm.covington.Projective() throws org.maltparser.core.exception.MaltChainedException;
  public void apply(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction getDeterministicAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected void addAvailableTransitionToTable(org.maltparser.parser.transition.TransitionTable) throws org.maltparser.core.exception.MaltChainedException;
  protected void initWithDefaultTransitions(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public boolean permissible(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction defaultAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ArcEager.java"
public class org.maltparser.parser.algorithm.nivre.ArcEager extends org.maltparser.parser.TransitionSystem {
  protected static final int SHIFT;
  protected static final int REDUCE;
  protected static final int RIGHTARC;
  protected static final int LEFTARC;
  public org.maltparser.parser.algorithm.nivre.ArcEager() throws org.maltparser.core.exception.MaltChainedException;
  public void apply(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction getDeterministicAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected void addAvailableTransitionToTable(org.maltparser.parser.transition.TransitionTable) throws org.maltparser.core.exception.MaltChainedException;
  protected void initWithDefaultTransitions(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public boolean permissible(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction defaultAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ArcEagerOracle.java"
public class org.maltparser.parser.algorithm.nivre.ArcEagerOracle extends org.maltparser.parser.Oracle {
  public org.maltparser.parser.algorithm.nivre.ArcEagerOracle(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction predict(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ArcStandard.java"
public class org.maltparser.parser.algorithm.nivre.ArcStandard extends org.maltparser.parser.TransitionSystem {
  protected static final int SHIFT;
  protected static final int RIGHTARC;
  protected static final int LEFTARC;
  public org.maltparser.parser.algorithm.nivre.ArcStandard() throws org.maltparser.core.exception.MaltChainedException;
  public void apply(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction getDeterministicAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected void addAvailableTransitionToTable(org.maltparser.parser.transition.TransitionTable) throws org.maltparser.core.exception.MaltChainedException;
  protected void initWithDefaultTransitions(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public boolean permissible(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction defaultAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ArcStandardOracle.java"
public class org.maltparser.parser.algorithm.nivre.ArcStandardOracle extends org.maltparser.parser.Oracle {
  public org.maltparser.parser.algorithm.nivre.ArcStandardOracle(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction predict(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "NivreAddressFunction.java"
public class org.maltparser.parser.algorithm.nivre.NivreAddressFunction extends org.maltparser.core.feature.function.AddressFunction {
  public org.maltparser.parser.algorithm.nivre.NivreAddressFunction(java.lang.String, org.maltparser.parser.Algorithm);
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void update(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSubFunctionName();
  public void setSubFunctionName(java.lang.String);
  public org.maltparser.parser.algorithm.nivre.NivreAddressFunction$NivreSubFunction getSubFunction();
  public org.maltparser.core.feature.value.AddressValue getAddressValue();
  public org.maltparser.parser.Algorithm getParsingAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public int getIndex();
  public void setIndex(int);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "NivreAddressFunction.java"
public final class org.maltparser.parser.algorithm.nivre.NivreAddressFunction$NivreSubFunction extends java.lang.Enum<org.maltparser.parser.algorithm.nivre.NivreAddressFunction$NivreSubFunction> {
  public static final org.maltparser.parser.algorithm.nivre.NivreAddressFunction$NivreSubFunction STACK;
  public static final org.maltparser.parser.algorithm.nivre.NivreAddressFunction$NivreSubFunction INPUT;
  public static org.maltparser.parser.algorithm.nivre.NivreAddressFunction$NivreSubFunction[] values();
  public static org.maltparser.parser.algorithm.nivre.NivreAddressFunction$NivreSubFunction valueOf(java.lang.String);
  static {};
}
Compiled from "NivreArcEagerFactory.java"
public class org.maltparser.parser.algorithm.nivre.NivreArcEagerFactory extends org.maltparser.parser.algorithm.nivre.NivreFactory {
  public org.maltparser.parser.algorithm.nivre.NivreArcEagerFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "NivreArcStandardFactory.java"
public class org.maltparser.parser.algorithm.nivre.NivreArcStandardFactory extends org.maltparser.parser.algorithm.nivre.NivreFactory {
  public org.maltparser.parser.algorithm.nivre.NivreArcStandardFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "NivreConfig.java"
public class org.maltparser.parser.algorithm.nivre.NivreConfig extends org.maltparser.parser.ParserConfiguration {
  public org.maltparser.parser.algorithm.nivre.NivreConfig(org.maltparser.core.symbol.SymbolTableHandler, boolean, boolean) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Stack<org.maltparser.core.syntaxgraph.node.DependencyNode> getStack();
  public java.util.Stack<org.maltparser.core.syntaxgraph.node.DependencyNode> getInput();
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyStructure();
  public boolean isTerminalState();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getStackNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getInputNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public void setDependencyGraph(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyGraph();
  public void initialize(org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public boolean isAllowRoot();
  public void setAllowRoot(boolean);
  public boolean isAllowReduce();
  public void setAllowReduce(boolean);
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "NivreFactory.java"
public abstract class org.maltparser.parser.algorithm.nivre.NivreFactory implements org.maltparser.parser.AbstractParserFactory {
  protected org.maltparser.parser.Algorithm algorithm;
  protected org.maltparser.parser.DependencyParserConfig manager;
  public org.maltparser.parser.algorithm.nivre.NivreFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.ParserConfiguration makeParserConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.Function makeFunction(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.Algorithm getAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.DependencyParserConfig getManager();
  public void setManager(org.maltparser.parser.DependencyParserConfig);
}
Compiled from "NivrePlanarArcEagerFactory.java"
public class org.maltparser.parser.algorithm.planar.NivrePlanarArcEagerFactory extends org.maltparser.parser.algorithm.planar.PlanarFactory {
  public org.maltparser.parser.algorithm.planar.NivrePlanarArcEagerFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Planar.java"
public class org.maltparser.parser.algorithm.planar.Planar extends org.maltparser.parser.TransitionSystem {
  protected static final int SHIFT;
  protected static final int REDUCE;
  protected static final int RIGHTARC;
  protected static final int LEFTARC;
  public org.maltparser.parser.algorithm.planar.Planar() throws org.maltparser.core.exception.MaltChainedException;
  public void apply(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction getDeterministicAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected void addAvailableTransitionToTable(org.maltparser.parser.transition.TransitionTable) throws org.maltparser.core.exception.MaltChainedException;
  protected void initWithDefaultTransitions(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public boolean permissible(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction defaultAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "PlanarAddressFunction.java"
public class org.maltparser.parser.algorithm.planar.PlanarAddressFunction extends org.maltparser.core.feature.function.AddressFunction {
  public org.maltparser.parser.algorithm.planar.PlanarAddressFunction(java.lang.String, org.maltparser.parser.Algorithm);
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void update(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSubFunctionName();
  public void setSubFunctionName(java.lang.String);
  public org.maltparser.parser.algorithm.planar.PlanarAddressFunction$PlanarSubFunction getSubFunction();
  public org.maltparser.core.feature.value.AddressValue getAddressValue();
  public org.maltparser.parser.Algorithm getParsingAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public int getIndex();
  public void setIndex(int);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "PlanarAddressFunction.java"
public final class org.maltparser.parser.algorithm.planar.PlanarAddressFunction$PlanarSubFunction extends java.lang.Enum<org.maltparser.parser.algorithm.planar.PlanarAddressFunction$PlanarSubFunction> {
  public static final org.maltparser.parser.algorithm.planar.PlanarAddressFunction$PlanarSubFunction STACK;
  public static final org.maltparser.parser.algorithm.planar.PlanarAddressFunction$PlanarSubFunction INPUT;
  public static org.maltparser.parser.algorithm.planar.PlanarAddressFunction$PlanarSubFunction[] values();
  public static org.maltparser.parser.algorithm.planar.PlanarAddressFunction$PlanarSubFunction valueOf(java.lang.String);
  static {};
}
Compiled from "PlanarArcEagerOracle.java"
public class org.maltparser.parser.algorithm.planar.PlanarArcEagerOracle extends org.maltparser.parser.Oracle {
  public org.maltparser.parser.algorithm.planar.PlanarArcEagerOracle(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction predict(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "PlanarConfig.java"
public class org.maltparser.parser.algorithm.planar.PlanarConfig extends org.maltparser.parser.ParserConfiguration {
  public static final int NO_CONNECTEDNESS;
  public static final int REDUCE_ONLY;
  public static final int FULL_CONNECTEDNESS;
  public static final int NORMAL;
  public static final int RELAXED;
  public final boolean SINGLE_HEAD;
  public boolean noCoveredRoots;
  public boolean acyclicity;
  public int connectedness;
  public org.maltparser.parser.algorithm.planar.PlanarConfig(org.maltparser.core.symbol.SymbolTableHandler, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Stack<org.maltparser.core.syntaxgraph.node.DependencyNode> getStack();
  public java.util.Stack<org.maltparser.core.syntaxgraph.node.DependencyNode> getInput();
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyStructure();
  public boolean isTerminalState();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getStackNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getInputNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public void setDependencyGraph(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyGraph();
  public void initialize(org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public boolean requiresSingleHead();
  public boolean requiresNoCoveredRoots();
  public boolean requiresAcyclicity();
  public boolean requiresConnectednessCheckOnReduce();
  public boolean requiresConnectednessCheckOnShift();
  public void setNoCoveredRoots(boolean);
  public void setAcyclicity(boolean);
  protected void setConnectedness(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public int getRootHandling();
  protected void setRootHandling(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "PlanarFactory.java"
public abstract class org.maltparser.parser.algorithm.planar.PlanarFactory implements org.maltparser.parser.AbstractParserFactory {
  protected org.maltparser.parser.Algorithm algorithm;
  protected org.maltparser.parser.DependencyParserConfig manager;
  public org.maltparser.parser.algorithm.planar.PlanarFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.ParserConfiguration makeParserConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.Function makeFunction(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.Algorithm getAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.DependencyParserConfig getManager();
  public void setManager(org.maltparser.parser.DependencyParserConfig);
}
Compiled from "NonProjective.java"
public class org.maltparser.parser.algorithm.stack.NonProjective extends org.maltparser.parser.TransitionSystem {
  protected static final int SHIFT;
  protected static final int SWAP;
  protected static final int RIGHTARC;
  protected static final int LEFTARC;
  public org.maltparser.parser.algorithm.stack.NonProjective() throws org.maltparser.core.exception.MaltChainedException;
  public void apply(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public boolean permissible(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction getDeterministicAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected void addAvailableTransitionToTable(org.maltparser.parser.transition.TransitionTable) throws org.maltparser.core.exception.MaltChainedException;
  protected void initWithDefaultTransitions(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public org.maltparser.parser.history.action.GuideUserAction defaultAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Projective.java"
public class org.maltparser.parser.algorithm.stack.Projective extends org.maltparser.parser.TransitionSystem {
  protected static final int SHIFT;
  protected static final int RIGHTARC;
  protected static final int LEFTARC;
  public org.maltparser.parser.algorithm.stack.Projective() throws org.maltparser.core.exception.MaltChainedException;
  public void apply(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public boolean permissible(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction getDeterministicAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected void addAvailableTransitionToTable(org.maltparser.parser.transition.TransitionTable) throws org.maltparser.core.exception.MaltChainedException;
  protected void initWithDefaultTransitions(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public org.maltparser.parser.history.action.GuideUserAction defaultAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "ProjectiveOracle.java"
public class org.maltparser.parser.algorithm.stack.ProjectiveOracle extends org.maltparser.parser.Oracle {
  public org.maltparser.parser.algorithm.stack.ProjectiveOracle(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction predict(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "StackAddressFunction.java"
public class org.maltparser.parser.algorithm.stack.StackAddressFunction extends org.maltparser.core.feature.function.AddressFunction {
  public org.maltparser.parser.algorithm.stack.StackAddressFunction(java.lang.String, org.maltparser.parser.Algorithm);
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void update(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSubFunctionName();
  public void setSubFunctionName(java.lang.String);
  public org.maltparser.parser.algorithm.stack.StackAddressFunction$StackSubFunction getSubFunction();
  public org.maltparser.core.feature.value.AddressValue getAddressValue();
  public org.maltparser.parser.Algorithm getParsingAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public int getIndex();
  public void setIndex(int);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "StackAddressFunction.java"
public final class org.maltparser.parser.algorithm.stack.StackAddressFunction$StackSubFunction extends java.lang.Enum<org.maltparser.parser.algorithm.stack.StackAddressFunction$StackSubFunction> {
  public static final org.maltparser.parser.algorithm.stack.StackAddressFunction$StackSubFunction STACK;
  public static final org.maltparser.parser.algorithm.stack.StackAddressFunction$StackSubFunction INPUT;
  public static final org.maltparser.parser.algorithm.stack.StackAddressFunction$StackSubFunction LOOKAHEAD;
  public static org.maltparser.parser.algorithm.stack.StackAddressFunction$StackSubFunction[] values();
  public static org.maltparser.parser.algorithm.stack.StackAddressFunction$StackSubFunction valueOf(java.lang.String);
  static {};
}
Compiled from "StackConfig.java"
public class org.maltparser.parser.algorithm.stack.StackConfig extends org.maltparser.parser.ParserConfiguration {
  public org.maltparser.parser.algorithm.stack.StackConfig(org.maltparser.core.symbol.SymbolTableHandler) throws org.maltparser.core.exception.MaltChainedException;
  public java.util.Stack<org.maltparser.core.syntaxgraph.node.DependencyNode> getStack();
  public java.util.Stack<org.maltparser.core.syntaxgraph.node.DependencyNode> getInput();
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyStructure();
  public boolean isTerminalState();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getStackNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getLookaheadNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getInputNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public void setDependencyGraph(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void lookaheadIncrement();
  public void lookaheadDecrement();
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyGraph();
  public void initialize(org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "StackFactory.java"
public abstract class org.maltparser.parser.algorithm.stack.StackFactory implements org.maltparser.parser.AbstractParserFactory {
  protected org.maltparser.parser.Algorithm algorithm;
  protected org.maltparser.parser.DependencyParserConfig manager;
  public org.maltparser.parser.algorithm.stack.StackFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.ParserConfiguration makeParserConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.Function makeFunction(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.Algorithm getAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.DependencyParserConfig getManager();
  public void setManager(org.maltparser.parser.DependencyParserConfig);
}
Compiled from "StackProjFactory.java"
public class org.maltparser.parser.algorithm.stack.StackProjFactory extends org.maltparser.parser.algorithm.stack.StackFactory {
  public org.maltparser.parser.algorithm.stack.StackProjFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "StackSwapEagerFactory.java"
public class org.maltparser.parser.algorithm.stack.StackSwapEagerFactory extends org.maltparser.parser.algorithm.stack.StackFactory {
  public org.maltparser.parser.algorithm.stack.StackSwapEagerFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "StackSwapLazyFactory.java"
public class org.maltparser.parser.algorithm.stack.StackSwapLazyFactory extends org.maltparser.parser.algorithm.stack.StackFactory {
  public org.maltparser.parser.algorithm.stack.StackSwapLazyFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SwapEagerOracle.java"
public class org.maltparser.parser.algorithm.stack.SwapEagerOracle extends org.maltparser.parser.Oracle {
  public org.maltparser.parser.algorithm.stack.SwapEagerOracle(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction predict(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SwapLazyOracle.java"
public class org.maltparser.parser.algorithm.stack.SwapLazyOracle extends org.maltparser.parser.Oracle {
  public org.maltparser.parser.algorithm.stack.SwapLazyOracle(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction predict(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "TwoPlanar.java"
public class org.maltparser.parser.algorithm.twoplanar.TwoPlanar extends org.maltparser.parser.TransitionSystem {
  protected static final int SHIFT;
  protected static final int SWITCH;
  protected static final int RIGHTARC;
  protected static final int LEFTARC;
  protected static final int REDUCE;
  protected static final int REDUCEBOTH;
  public org.maltparser.parser.algorithm.twoplanar.TwoPlanar() throws org.maltparser.core.exception.MaltChainedException;
  public void apply(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction getDeterministicAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  protected void addAvailableTransitionToTable(org.maltparser.parser.transition.TransitionTable) throws org.maltparser.core.exception.MaltChainedException;
  protected void initWithDefaultTransitions(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public boolean permissible(org.maltparser.parser.history.action.GuideUserAction, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction defaultAction(org.maltparser.parser.history.GuideUserHistory, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "TwoPlanarAddressFunction.java"
public class org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction extends org.maltparser.core.feature.function.AddressFunction {
  protected java.lang.String subFunctionName;
  protected org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction$TwoPlanarSubFunction subFunction;
  protected org.maltparser.parser.Algorithm parsingAlgorithm;
  protected int index;
  public org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction(java.lang.String, org.maltparser.parser.Algorithm);
  public void initialize(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.Class<?>[] getParameterTypes();
  public void update() throws org.maltparser.core.exception.MaltChainedException;
  public void update(java.lang.Object[]) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getSubFunctionName();
  public void setSubFunctionName(java.lang.String);
  public org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction$TwoPlanarSubFunction getSubFunction();
  public org.maltparser.core.feature.value.AddressValue getAddressValue();
  public org.maltparser.parser.Algorithm getParsingAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public int getIndex();
  public void setIndex(int);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "TwoPlanarAddressFunction.java"
public final class org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction$TwoPlanarSubFunction extends java.lang.Enum<org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction$TwoPlanarSubFunction> {
  public static final org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction$TwoPlanarSubFunction ACTIVESTACK;
  public static final org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction$TwoPlanarSubFunction INACTIVESTACK;
  public static final org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction$TwoPlanarSubFunction INPUT;
  public static org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction$TwoPlanarSubFunction[] values();
  public static org.maltparser.parser.algorithm.twoplanar.TwoPlanarAddressFunction$TwoPlanarSubFunction valueOf(java.lang.String);
  static {};
}
Compiled from "TwoPlanarArcEagerFactory.java"
public class org.maltparser.parser.algorithm.twoplanar.TwoPlanarArcEagerFactory extends org.maltparser.parser.algorithm.twoplanar.TwoPlanarFactory {
  public org.maltparser.parser.algorithm.twoplanar.TwoPlanarArcEagerFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.TransitionSystem makeTransitionSystem() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.OracleGuide makeOracleGuide(org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "TwoPlanarArcEagerOracle.java"
public class org.maltparser.parser.algorithm.twoplanar.TwoPlanarArcEagerOracle extends org.maltparser.parser.Oracle {
  static final boolean $assertionsDisabled;
  public org.maltparser.parser.algorithm.twoplanar.TwoPlanarArcEagerOracle(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideUserHistory) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction predict(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  static {};
}
Compiled from "TwoPlanarConfig.java"
public class org.maltparser.parser.algorithm.twoplanar.TwoPlanarConfig extends org.maltparser.parser.ParserConfiguration {
  public static final int NORMAL;
  public static final int RELAXED;
  public final boolean SINGLE_HEAD;
  public boolean noCoveredRoots;
  public boolean acyclicity;
  public boolean reduceAfterSwitch;
  public static final boolean FIRST_STACK;
  public static final boolean SECOND_STACK;
  public org.maltparser.parser.algorithm.twoplanar.TwoPlanarConfig(org.maltparser.core.symbol.SymbolTableHandler, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void switchStacks();
  public boolean reduceAfterSwitch();
  public void setReduceAfterSwitch(boolean);
  public void setLastAction(int);
  public int getLastAction();
  public boolean getStackActivityState();
  public java.util.Stack<org.maltparser.core.syntaxgraph.node.DependencyNode> getActiveStack();
  public java.util.Stack<org.maltparser.core.syntaxgraph.node.DependencyNode> getInactiveStack();
  public java.util.Stack<org.maltparser.core.syntaxgraph.node.DependencyNode> getInput();
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyStructure();
  public boolean isTerminalState();
  public org.maltparser.core.syntaxgraph.node.DependencyNode getActiveStackNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getInactiveStackNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.node.DependencyNode getInputNode(int) throws org.maltparser.core.exception.MaltChainedException;
  public void setDependencyGraph(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.syntaxgraph.DependencyStructure getDependencyGraph();
  public void initialize(org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
  public int getRootHandling();
  protected void setRootHandling(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public boolean requiresSingleHead();
  public boolean requiresNoCoveredRoots();
  public boolean requiresAcyclicity();
  public void setNoCoveredRoots(boolean);
  public void setAcyclicity(boolean);
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "TwoPlanarFactory.java"
public abstract class org.maltparser.parser.algorithm.twoplanar.TwoPlanarFactory implements org.maltparser.parser.AbstractParserFactory {
  protected org.maltparser.parser.Algorithm algorithm;
  protected org.maltparser.parser.DependencyParserConfig manager;
  public org.maltparser.parser.algorithm.twoplanar.TwoPlanarFactory(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.ParserConfiguration makeParserConfiguration() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.function.Function makeFunction(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.Algorithm getAlgorithm();
  public void setAlgorithm(org.maltparser.parser.Algorithm);
  public org.maltparser.parser.DependencyParserConfig getManager();
  public void setManager(org.maltparser.parser.DependencyParserConfig);
}
Compiled from "ClassifierGuide.java"
public interface org.maltparser.parser.guide.ClassifierGuide extends org.maltparser.parser.guide.Guide {
  public abstract void addInstance(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void predict(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.feature.FeatureVector predictExtract(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.feature.FeatureVector extract() throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean predictFromKBestList(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.guide.ClassifierGuide$GuideMode getGuideMode();
  public abstract org.maltparser.parser.history.GuideHistory getHistory();
  public abstract org.maltparser.core.feature.FeatureModelManager getFeatureModelManager();
}
Compiled from "ClassifierGuide.java"
public final class org.maltparser.parser.guide.ClassifierGuide$GuideMode extends java.lang.Enum<org.maltparser.parser.guide.ClassifierGuide$GuideMode> {
  public static final org.maltparser.parser.guide.ClassifierGuide$GuideMode BATCH;
  public static final org.maltparser.parser.guide.ClassifierGuide$GuideMode CLASSIFY;
  public static org.maltparser.parser.guide.ClassifierGuide$GuideMode[] values();
  public static org.maltparser.parser.guide.ClassifierGuide$GuideMode valueOf(java.lang.String);
  static {};
}
Compiled from "Guidable.java"
public interface org.maltparser.parser.guide.Guidable {
  public abstract void setInstance(org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void predict(org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean predictFromKBestList(org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "Guide.java"
public interface org.maltparser.parser.guide.Guide {
  public abstract void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.DependencyParserConfig getConfiguration();
  public abstract java.lang.String getGuideName();
  public abstract void setGuideName(java.lang.String);
}
Compiled from "GuideException.java"
public class org.maltparser.parser.guide.GuideException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.parser.guide.GuideException(java.lang.String);
  public org.maltparser.parser.guide.GuideException(java.lang.String, java.lang.Throwable);
}
Compiled from "Model.java"
public interface org.maltparser.parser.guide.Model {
  public abstract void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.guide.ClassifierGuide getGuide();
  public abstract java.lang.String getModelName() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "OracleGuide.java"
public interface org.maltparser.parser.guide.OracleGuide extends org.maltparser.parser.guide.Guide {
  public abstract org.maltparser.parser.history.action.GuideUserAction predict(org.maltparser.core.syntaxgraph.DependencyStructure, org.maltparser.parser.ParserConfiguration) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SingleGuide.java"
public class org.maltparser.parser.guide.SingleGuide implements org.maltparser.parser.guide.ClassifierGuide {
  public org.maltparser.parser.guide.SingleGuide(org.maltparser.parser.DependencyParserConfig, org.maltparser.parser.history.GuideHistory, org.maltparser.parser.guide.ClassifierGuide$GuideMode) throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public void predict(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector predictExtract(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector extract() throws org.maltparser.core.exception.MaltChainedException;
  public boolean predictFromKBestList(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.decision.DecisionModel getDecisionModel();
  public org.maltparser.parser.DependencyParserConfig getConfiguration();
  public org.maltparser.parser.history.GuideHistory getHistory();
  public org.maltparser.parser.guide.ClassifierGuide$GuideMode getGuideMode();
  public org.maltparser.core.feature.FeatureModelManager getFeatureModelManager();
  protected void initDecisionModel(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getGuideName();
  public void setGuideName(java.lang.String);
  public java.lang.String toString();
}
Compiled from "BranchedDecisionModel.java"
public class org.maltparser.parser.guide.decision.BranchedDecisionModel implements org.maltparser.parser.guide.decision.DecisionModel {
  public org.maltparser.parser.guide.decision.BranchedDecisionModel(org.maltparser.parser.guide.ClassifierGuide, org.maltparser.core.feature.FeatureModel) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.decision.BranchedDecisionModel(org.maltparser.parser.guide.ClassifierGuide, org.maltparser.parser.guide.decision.DecisionModel, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void updateFeatureModel() throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public boolean predict(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector predictExtract(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector extract() throws org.maltparser.core.exception.MaltChainedException;
  public boolean predictFromKBestList(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.ClassifierGuide getGuide();
  public java.lang.String getModelName();
  public org.maltparser.core.feature.FeatureModel getFeatureModel();
  public int getDecisionIndex();
  public org.maltparser.parser.guide.decision.DecisionModel getParentDecisionModel();
  public java.lang.String toString();
}
Compiled from "DecisionModel.java"
public interface org.maltparser.parser.guide.decision.DecisionModel extends org.maltparser.parser.guide.Model {
  public abstract void updateFeatureModel() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void addInstance(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean predict(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.feature.FeatureVector predictExtract(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.feature.FeatureVector extract() throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean predictFromKBestList(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.feature.FeatureModel getFeatureModel();
  public abstract int getDecisionIndex();
}
Compiled from "OneDecisionModel.java"
public class org.maltparser.parser.guide.decision.OneDecisionModel implements org.maltparser.parser.guide.decision.DecisionModel {
  public org.maltparser.parser.guide.decision.OneDecisionModel(org.maltparser.parser.guide.ClassifierGuide, org.maltparser.core.feature.FeatureModel) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.decision.OneDecisionModel(org.maltparser.parser.guide.ClassifierGuide, org.maltparser.parser.guide.decision.DecisionModel, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void updateFeatureModel() throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public boolean predict(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector predictExtract(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector extract() throws org.maltparser.core.exception.MaltChainedException;
  public boolean predictFromKBestList(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.ClassifierGuide getGuide();
  public java.lang.String getModelName();
  public org.maltparser.core.feature.FeatureModel getFeatureModel();
  public int getDecisionIndex();
  public org.maltparser.parser.guide.decision.DecisionModel getPrevDecisionModel();
  public java.lang.String toString();
}
Compiled from "SeqDecisionModel.java"
public class org.maltparser.parser.guide.decision.SeqDecisionModel implements org.maltparser.parser.guide.decision.DecisionModel {
  public org.maltparser.parser.guide.decision.SeqDecisionModel(org.maltparser.parser.guide.ClassifierGuide, org.maltparser.core.feature.FeatureModel) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.decision.SeqDecisionModel(org.maltparser.parser.guide.ClassifierGuide, org.maltparser.parser.guide.decision.DecisionModel, java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public void updateFeatureModel() throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public boolean predict(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector predictExtract(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector extract() throws org.maltparser.core.exception.MaltChainedException;
  public boolean predictFromKBestList(org.maltparser.parser.history.action.GuideDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.ClassifierGuide getGuide();
  public java.lang.String getModelName();
  public org.maltparser.core.feature.FeatureModel getFeatureModel();
  public int getDecisionIndex();
  public org.maltparser.parser.guide.decision.DecisionModel getPrevDecisionModel();
  public org.maltparser.parser.guide.decision.DecisionModel getNextDecisionModel();
  public java.lang.String toString();
}
Compiled from "AtomicModel.java"
public class org.maltparser.parser.guide.instance.AtomicModel implements org.maltparser.parser.guide.instance.InstanceModel {
  public org.maltparser.parser.guide.instance.AtomicModel(int, org.maltparser.core.feature.FeatureVector, org.maltparser.parser.guide.Model) throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public boolean predict(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector predictExtract(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector extract() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public void moveAllInstances(org.maltparser.parser.guide.instance.AtomicModel, org.maltparser.core.feature.function.FeatureFunction, java.util.ArrayList<java.lang.Integer>) throws org.maltparser.core.exception.MaltChainedException;
  public void train() throws org.maltparser.core.exception.MaltChainedException;
  public void initMethod() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.Model getParent() throws org.maltparser.core.exception.MaltChainedException;
  protected void setParent(org.maltparser.parser.guide.Model);
  public java.lang.String getModelName();
  protected void setModelName(java.lang.String);
  public org.maltparser.core.feature.FeatureVector getFeatures();
  protected void setFeatures(org.maltparser.core.feature.FeatureVector);
  public org.maltparser.parser.guide.ClassifierGuide getGuide();
  public int getIndex();
  protected void setIndex(int);
  public int getFrequency();
  public void increaseFrequency();
  public void decreaseFrequency();
  protected void setFrequency(int);
  public org.maltparser.ml.LearningMethod getMethod();
  public java.lang.String toString();
}
Compiled from "FeatureDivideModel.java"
public class org.maltparser.parser.guide.instance.FeatureDivideModel implements org.maltparser.parser.guide.instance.InstanceModel {
  public org.maltparser.parser.guide.instance.FeatureDivideModel(org.maltparser.core.feature.FeatureVector, org.maltparser.parser.guide.Model) throws org.maltparser.core.exception.MaltChainedException;
  public void addInstance(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public void noMoreInstances() throws org.maltparser.core.exception.MaltChainedException;
  public void finalizeSentence(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public boolean predict(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector predictExtract(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector extract() throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public void train() throws org.maltparser.core.exception.MaltChainedException;
  protected void initSplitParam(org.maltparser.core.feature.FeatureVector) throws org.maltparser.core.exception.MaltChainedException;
  protected void save() throws org.maltparser.core.exception.MaltChainedException;
  protected void load() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.guide.Model getParent();
  public org.maltparser.parser.guide.ClassifierGuide getGuide();
  protected void setParent(org.maltparser.parser.guide.Model) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getModelName() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.feature.FeatureVector getMasterFeatureVector();
  public org.maltparser.core.feature.FeatureVector getDivideFeatureVector();
  public int getFrequency();
  public void increaseFrequency();
  public void decreaseFrequency();
  protected void setFrequency(int);
  public java.lang.String toString();
}
Compiled from "InstanceModel.java"
public interface org.maltparser.parser.guide.instance.InstanceModel extends org.maltparser.parser.guide.Model {
  public abstract void addInstance(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean predict(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.feature.FeatureVector predictExtract(org.maltparser.parser.history.action.SingleDecision) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.feature.FeatureVector extract() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void train() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void increaseFrequency();
  public abstract void decreaseFrequency();
}
Compiled from "GuideHistory.java"
public interface org.maltparser.parser.history.GuideHistory {
  public abstract org.maltparser.parser.history.action.GuideDecision getEmptyGuideDecision() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getNumberOfDecisions();
  public abstract org.maltparser.core.symbol.TableHandler getTableHandler(java.lang.String);
  public abstract void setKBestListClass(java.lang.Class<?>) throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.Class<?> getKBestListClass();
  public abstract int getKBestSize();
  public abstract void setKBestSize(int);
  public abstract void setSeparator(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "GuideUserHistory.java"
public interface org.maltparser.parser.history.GuideUserHistory {
  public abstract org.maltparser.parser.history.action.GuideUserAction getEmptyGuideUserAction() throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.util.ArrayList<org.maltparser.parser.history.container.ActionContainer> getActionContainers();
  public abstract org.maltparser.parser.history.container.ActionContainer[] getActionContainerArray();
  public abstract int getNumberOfDecisions();
  public abstract void clear() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "History.java"
public class org.maltparser.parser.history.History implements org.maltparser.parser.history.GuideUserHistory,org.maltparser.parser.history.GuideHistory {
  protected final org.maltparser.core.pool.ObjectPoolList<org.maltparser.parser.history.action.ComplexDecisionAction> actionPool;
  protected java.lang.Class<? extends org.maltparser.parser.history.kbest.KBestList> kBestListClass;
  protected int kBestSize;
  protected java.lang.String separator;
  protected java.lang.String decisionSettings;
  protected java.util.ArrayList<org.maltparser.parser.history.container.TableContainer> decisionTables;
  protected java.util.ArrayList<org.maltparser.parser.history.container.TableContainer> actionTables;
  protected org.maltparser.core.helper.HashMap<java.lang.String, org.maltparser.core.symbol.TableHandler> tableHandlers;
  public org.maltparser.parser.history.History(java.lang.String, java.lang.String, org.maltparser.core.helper.HashMap<java.lang.String, org.maltparser.core.symbol.TableHandler>) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideUserAction getEmptyGuideUserAction() throws org.maltparser.core.exception.MaltChainedException;
  public java.util.ArrayList<org.maltparser.parser.history.container.ActionContainer> getActionContainers();
  public org.maltparser.parser.history.container.ActionContainer[] getActionContainerArray();
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.GuideDecision getEmptyGuideDecision() throws org.maltparser.core.exception.MaltChainedException;
  public int getNumberOfDecisions();
  public org.maltparser.core.symbol.TableHandler getTableHandler(java.lang.String);
  public java.lang.Class<? extends org.maltparser.parser.history.kbest.KBestList> getKBestListClass();
  public void setKBestListClass(java.lang.Class<?>) throws org.maltparser.core.exception.MaltChainedException;
  public int getKBestSize();
  public void setKBestSize(int);
  public int getNumberOfActions();
  public java.util.ArrayList<org.maltparser.parser.history.container.TableContainer> getDecisionTables();
  public java.util.ArrayList<org.maltparser.parser.history.container.TableContainer> getActionTables();
  public org.maltparser.core.helper.HashMap<java.lang.String, org.maltparser.core.symbol.TableHandler> getTableHandlers();
  public java.lang.String getSeparator();
  public void setSeparator(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDecisionSettings();
  public void setDecisionSettings(java.lang.String);
  protected void setTableHandlers(org.maltparser.core.helper.HashMap<java.lang.String, org.maltparser.core.symbol.TableHandler>);
  protected org.maltparser.parser.history.action.ActionDecision getEmptyActionObject() throws org.maltparser.core.exception.MaltChainedException;
  protected void initDecisionSettings(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
  static org.maltparser.parser.history.History access$000(org.maltparser.parser.history.History);
}
Compiled from "History.java"
class org.maltparser.parser.history.History$1 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.parser.history.action.ComplexDecisionAction> {
  final org.maltparser.parser.history.History this$0;
  org.maltparser.parser.history.History$1(org.maltparser.parser.history.History);
  protected org.maltparser.parser.history.action.ComplexDecisionAction create() throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(org.maltparser.parser.history.action.ComplexDecisionAction) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "HistoryException.java"
public class org.maltparser.parser.history.HistoryException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.parser.history.HistoryException(java.lang.String);
  public org.maltparser.parser.history.HistoryException(java.lang.String, java.lang.Throwable);
}
Compiled from "HistoryList.java"
public class org.maltparser.parser.history.HistoryList extends org.maltparser.parser.history.HistoryStructure {
  protected final java.util.ArrayList<org.maltparser.parser.history.HistoryNode> list;
  protected final org.maltparser.core.pool.ObjectPoolList<org.maltparser.parser.history.HistoryNode> nodePool;
  public org.maltparser.parser.history.HistoryList() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.HistoryNode getNewHistoryNode(org.maltparser.parser.history.HistoryNode, org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void toFile() throws org.maltparser.core.exception.MaltChainedException;
  public void close() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "HistoryList.java"
class org.maltparser.parser.history.HistoryList$1 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.parser.history.HistoryNode> {
  final org.maltparser.parser.history.HistoryList this$0;
  org.maltparser.parser.history.HistoryList$1(org.maltparser.parser.history.HistoryList);
  protected org.maltparser.parser.history.HistoryNode create() throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(org.maltparser.parser.history.HistoryNode) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "HistoryListNode.java"
public class org.maltparser.parser.history.HistoryListNode implements org.maltparser.parser.history.HistoryNode {
  public org.maltparser.parser.history.HistoryListNode(org.maltparser.parser.history.HistoryNode, org.maltparser.parser.history.action.GuideUserAction);
  public org.maltparser.parser.history.HistoryNode getPreviousNode();
  public org.maltparser.parser.history.action.GuideUserAction getAction();
  public void setPreviousNode(org.maltparser.parser.history.HistoryNode);
  public void setAction(org.maltparser.parser.history.action.GuideUserAction);
  public int getPosition();
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "HistoryNode.java"
public interface org.maltparser.parser.history.HistoryNode {
  public abstract org.maltparser.parser.history.HistoryNode getPreviousNode();
  public abstract org.maltparser.parser.history.action.GuideUserAction getAction();
  public abstract void setAction(org.maltparser.parser.history.action.GuideUserAction);
  public abstract void setPreviousNode(org.maltparser.parser.history.HistoryNode);
  public abstract int getPosition();
  public abstract void clear() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "HistoryStructure.java"
public abstract class org.maltparser.parser.history.HistoryStructure {
  public org.maltparser.parser.history.HistoryStructure();
  public abstract org.maltparser.parser.history.HistoryNode getNewHistoryNode(org.maltparser.parser.history.HistoryNode, org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void clear() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void toFile() throws org.maltparser.core.exception.MaltChainedException;
  public abstract void close() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "HistoryTree.java"
public class org.maltparser.parser.history.HistoryTree extends org.maltparser.parser.history.HistoryStructure {
  protected final org.maltparser.core.pool.ObjectPoolList<org.maltparser.parser.history.HistoryNode> nodePool;
  public org.maltparser.parser.history.HistoryTree();
  public org.maltparser.parser.history.HistoryNode getNewHistoryNode(org.maltparser.parser.history.HistoryNode, org.maltparser.parser.history.action.GuideUserAction) throws org.maltparser.core.exception.MaltChainedException;
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public void toFile() throws org.maltparser.core.exception.MaltChainedException;
  public void close() throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String toString();
}
Compiled from "HistoryTree.java"
class org.maltparser.parser.history.HistoryTree$1 extends org.maltparser.core.pool.ObjectPoolList<org.maltparser.parser.history.HistoryNode> {
  final org.maltparser.parser.history.HistoryTree this$0;
  org.maltparser.parser.history.HistoryTree$1(org.maltparser.parser.history.HistoryTree);
  protected org.maltparser.parser.history.HistoryNode create() throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(org.maltparser.parser.history.HistoryNode) throws org.maltparser.core.exception.MaltChainedException;
  public void resetObject(java.lang.Object) throws org.maltparser.core.exception.MaltChainedException;
  protected java.lang.Object create() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "HistoryTreeNode.java"
public class org.maltparser.parser.history.HistoryTreeNode implements org.maltparser.parser.history.HistoryNode {
  public org.maltparser.parser.history.HistoryTreeNode(org.maltparser.parser.history.HistoryNode, org.maltparser.parser.history.action.GuideUserAction);
  public org.maltparser.parser.history.action.GuideUserAction getAction();
  public void setAction(org.maltparser.parser.history.action.GuideUserAction);
  public org.maltparser.parser.history.HistoryNode getPreviousNode();
  public void setPreviousNode(org.maltparser.parser.history.HistoryNode);
  public int getDepth();
  public void setDepth(int);
  public void addChild(org.maltparser.parser.history.HistoryTreeNode);
  public void removeChild(org.maltparser.parser.history.HistoryTreeNode);
  public org.maltparser.parser.history.HistoryTreeNode getChild(org.maltparser.parser.history.action.ActionDecision);
  public int getPosition();
  public void clear() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "ActionDecision.java"
public interface org.maltparser.parser.history.action.ActionDecision {
  public abstract void clear();
}
Compiled from "ComplexDecisionAction.java"
public class org.maltparser.parser.history.action.ComplexDecisionAction implements org.maltparser.parser.history.action.GuideUserAction,org.maltparser.parser.history.action.MultipleDecision {
  public org.maltparser.parser.history.action.ComplexDecisionAction(org.maltparser.parser.history.History) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.action.ComplexDecisionAction(org.maltparser.parser.history.GuideHistory) throws org.maltparser.core.exception.MaltChainedException;
  public void addAction(java.util.ArrayList<org.maltparser.parser.history.container.ActionContainer>) throws org.maltparser.core.exception.MaltChainedException;
  public void getAction(java.util.ArrayList<org.maltparser.parser.history.container.ActionContainer>) throws org.maltparser.core.exception.MaltChainedException;
  public void addAction(org.maltparser.parser.history.container.ActionContainer[]) throws org.maltparser.core.exception.MaltChainedException;
  public void getAction(org.maltparser.parser.history.container.ActionContainer[]) throws org.maltparser.core.exception.MaltChainedException;
  public void getKBestLists(java.util.ArrayList<org.maltparser.parser.history.kbest.ScoredKBestList>) throws org.maltparser.core.exception.MaltChainedException;
  public void getKBestLists(org.maltparser.parser.history.kbest.ScoredKBestList[]) throws org.maltparser.core.exception.MaltChainedException;
  public int numberOfActions();
  public org.maltparser.parser.history.GuideUserHistory getGuideUserHistory();
  public void clear();
  public org.maltparser.parser.history.action.SingleDecision getSingleDecision(int) throws org.maltparser.core.exception.MaltChainedException;
  public int numberOfDecisions();
  public org.maltparser.parser.history.GuideHistory getGuideHistory();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "GuideDecision.java"
public interface org.maltparser.parser.history.action.GuideDecision extends org.maltparser.parser.history.action.ActionDecision {
  public abstract org.maltparser.parser.history.GuideHistory getGuideHistory();
  public abstract int numberOfDecisions();
}
Compiled from "GuideUserAction.java"
public interface org.maltparser.parser.history.action.GuideUserAction {
  public abstract void addAction(java.util.ArrayList<org.maltparser.parser.history.container.ActionContainer>) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void addAction(org.maltparser.parser.history.container.ActionContainer[]) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void getAction(java.util.ArrayList<org.maltparser.parser.history.container.ActionContainer>) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void getAction(org.maltparser.parser.history.container.ActionContainer[]) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void getKBestLists(java.util.ArrayList<org.maltparser.parser.history.kbest.ScoredKBestList>) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void getKBestLists(org.maltparser.parser.history.kbest.ScoredKBestList[]) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int numberOfActions();
  public abstract org.maltparser.parser.history.GuideUserHistory getGuideUserHistory();
}
Compiled from "MultipleDecision.java"
public interface org.maltparser.parser.history.action.MultipleDecision extends org.maltparser.parser.history.action.GuideDecision {
  public abstract org.maltparser.parser.history.action.SingleDecision getSingleDecision(int) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "SimpleDecisionAction.java"
public class org.maltparser.parser.history.action.SimpleDecisionAction implements org.maltparser.parser.history.action.SingleDecision {
  public org.maltparser.parser.history.action.SimpleDecisionAction(org.maltparser.parser.history.History, org.maltparser.parser.history.container.TableContainer) throws org.maltparser.core.exception.MaltChainedException;
  public void clear();
  public int numberOfDecisions();
  public void addDecision(int) throws org.maltparser.core.exception.MaltChainedException;
  public void addDecision(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public int getDecisionCode() throws org.maltparser.core.exception.MaltChainedException;
  public int getDecisionCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getDecisionSymbol() throws org.maltparser.core.exception.MaltChainedException;
  public boolean updateFromKBestList() throws org.maltparser.core.exception.MaltChainedException;
  public boolean continueWithNextDecision() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.GuideHistory getGuideHistory();
  public org.maltparser.parser.history.History getActionHistory();
  public org.maltparser.parser.history.container.TableContainer getTableContainer();
  public org.maltparser.parser.history.kbest.KBestList getKBestList() throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.history.container.TableContainer$RelationToNextDecision getRelationToNextDecision();
  public java.lang.String toString();
}
Compiled from "SingleDecision.java"
public interface org.maltparser.parser.history.action.SingleDecision extends org.maltparser.parser.history.action.GuideDecision {
  public abstract void addDecision(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract void addDecision(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getDecisionCode() throws org.maltparser.core.exception.MaltChainedException;
  public abstract java.lang.String getDecisionSymbol() throws org.maltparser.core.exception.MaltChainedException;
  public abstract int getDecisionCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.history.kbest.KBestList getKBestList() throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean updateFromKBestList() throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean continueWithNextDecision() throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.parser.history.container.TableContainer getTableContainer();
  public abstract org.maltparser.parser.history.container.TableContainer$RelationToNextDecision getRelationToNextDecision();
}
Compiled from "ActionContainer.java"
public class org.maltparser.parser.history.container.ActionContainer {
  public org.maltparser.parser.history.container.ActionContainer(org.maltparser.parser.history.container.TableContainer);
  public void clear();
  public java.lang.String getActionSymbol();
  public int getActionCode();
  public java.lang.String setAction(int) throws org.maltparser.core.exception.MaltChainedException;
  public int setAction(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.Table getTable();
  public java.lang.String getTableName();
  public java.lang.String getTableContainerName();
  public java.lang.String toString();
}
Compiled from "CombinedTableContainer.java"
public class org.maltparser.parser.history.container.CombinedTableContainer extends org.maltparser.parser.history.container.TableContainer implements org.maltparser.core.symbol.Table {
  public org.maltparser.parser.history.container.CombinedTableContainer(org.maltparser.core.symbol.TableHandler, java.lang.String, java.util.List<org.maltparser.parser.history.container.TableContainer>, char) throws org.maltparser.core.exception.MaltChainedException;
  public void clearCache();
  public int addSymbol(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public java.lang.String getSymbolCodeToString(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getSymbolStringToCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public int getNumberContainers();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public boolean containCode(int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean containSymbol(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public int getCombinedCode(java.util.List<org.maltparser.parser.history.container.ActionContainer>) throws org.maltparser.core.exception.MaltChainedException;
  public int getCombinedCode(org.maltparser.parser.history.container.ActionContainer[], int) throws org.maltparser.core.exception.MaltChainedException;
  public void setActionContainer(java.util.List<org.maltparser.parser.history.container.ActionContainer>, int) throws org.maltparser.core.exception.MaltChainedException;
  public void setActionContainer(org.maltparser.parser.history.container.ActionContainer[], int, int) throws org.maltparser.core.exception.MaltChainedException;
  protected void split() throws org.maltparser.core.exception.MaltChainedException;
  public char getSeparator();
  protected void initSymbolTable() throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "DecisionPropertyTable.java"
public interface org.maltparser.parser.history.container.DecisionPropertyTable {
  public abstract boolean continueWithNextDecision(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract boolean continueWithNextDecision(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.symbol.Table getTableForNextDecision(int) throws org.maltparser.core.exception.MaltChainedException;
  public abstract org.maltparser.core.symbol.Table getTableForNextDecision(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "TableContainer.java"
public class org.maltparser.parser.history.container.TableContainer {
  protected int cachedCode;
  protected final java.lang.StringBuilder cachedSymbol;
  protected org.maltparser.core.symbol.Table table;
  protected java.lang.String name;
  public org.maltparser.parser.history.container.TableContainer(org.maltparser.core.symbol.Table, java.lang.String, char);
  public void clearCache();
  public java.lang.String getSymbol(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public boolean containCode(int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean containSymbol(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public boolean continueWithNextDecision(int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean continueWithNextDecision(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.Table getTable();
  public java.lang.String getTableName();
  public java.lang.String getTableContainerName();
  public org.maltparser.parser.history.container.TableContainer$RelationToNextDecision getRelationToNextDecision();
  protected void setTable(org.maltparser.core.symbol.Table);
  protected void setName(java.lang.String);
  public int size();
  public java.lang.String toString();
}
Compiled from "TableContainer.java"
public final class org.maltparser.parser.history.container.TableContainer$RelationToNextDecision extends java.lang.Enum<org.maltparser.parser.history.container.TableContainer$RelationToNextDecision> {
  public static final org.maltparser.parser.history.container.TableContainer$RelationToNextDecision COMBINED;
  public static final org.maltparser.parser.history.container.TableContainer$RelationToNextDecision SEQUANTIAL;
  public static final org.maltparser.parser.history.container.TableContainer$RelationToNextDecision BRANCHED;
  public static final org.maltparser.parser.history.container.TableContainer$RelationToNextDecision SWITCHED;
  public static final org.maltparser.parser.history.container.TableContainer$RelationToNextDecision NONE;
  public static org.maltparser.parser.history.container.TableContainer$RelationToNextDecision[] values();
  public static org.maltparser.parser.history.container.TableContainer$RelationToNextDecision valueOf(java.lang.String);
  static {};
}
Compiled from "Candidate.java"
public class org.maltparser.parser.history.kbest.Candidate {
  protected int actionCode;
  public org.maltparser.parser.history.kbest.Candidate();
  public int getActionCode();
  public void setActionCode(int);
  public void reset();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "KBestList.java"
public class org.maltparser.parser.history.kbest.KBestList {
  protected final java.util.ArrayList<org.maltparser.parser.history.kbest.Candidate> kBestList;
  protected int k;
  protected int topCandidateIndex;
  protected int addCandidateIndex;
  protected org.maltparser.parser.history.action.SingleDecision decision;
  public org.maltparser.parser.history.kbest.KBestList(org.maltparser.parser.history.action.SingleDecision);
  public org.maltparser.parser.history.kbest.KBestList(java.lang.Integer, org.maltparser.parser.history.action.SingleDecision);
  protected void initKBestList();
  public void reset();
  public void add(int) throws org.maltparser.core.exception.MaltChainedException;
  public void addList(int[]) throws org.maltparser.core.exception.MaltChainedException;
  public void add(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public boolean updateActionWithNextKBest() throws org.maltparser.core.exception.MaltChainedException;
  public int peekNextKBest();
  public int getCurrentSize();
  public int getK();
  protected void setK(int);
  protected int getTopCandidateIndex();
  protected int getAddCandidateIndex();
  public org.maltparser.parser.history.action.SingleDecision getDecision();
  public int getKBestListSize();
  public org.maltparser.parser.history.kbest.ScoredCandidate getCandidate(int);
  public java.lang.String toString();
}
Compiled from "ScoredCandidate.java"
public class org.maltparser.parser.history.kbest.ScoredCandidate extends org.maltparser.parser.history.kbest.Candidate {
  protected float score;
  public org.maltparser.parser.history.kbest.ScoredCandidate();
  public float getScore();
  public void setScore(java.lang.Float);
  public void reset();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "ScoredKBestList.java"
public class org.maltparser.parser.history.kbest.ScoredKBestList extends org.maltparser.parser.history.kbest.KBestList {
  public org.maltparser.parser.history.kbest.ScoredKBestList(org.maltparser.parser.history.action.SingleDecision);
  public org.maltparser.parser.history.kbest.ScoredKBestList(java.lang.Integer, org.maltparser.parser.history.action.SingleDecision);
  protected void initKBestList();
  public void add(int, float) throws org.maltparser.core.exception.MaltChainedException;
  public void add(java.lang.String, float) throws org.maltparser.core.exception.MaltChainedException;
  public float peekNextKBestScore();
  public java.lang.String toString();
}
Compiled from "Transition.java"
public class org.maltparser.parser.transition.Transition implements java.lang.Comparable<org.maltparser.parser.transition.Transition> {
  public org.maltparser.parser.transition.Transition(int, java.lang.String, boolean);
  public int getCode();
  public java.lang.String getSymbol();
  public boolean isLabeled();
  public int compareTo(org.maltparser.parser.transition.Transition);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "TransitionTable.java"
public class org.maltparser.parser.transition.TransitionTable implements org.maltparser.core.symbol.Table,org.maltparser.parser.history.container.DecisionPropertyTable {
  public org.maltparser.parser.transition.TransitionTable(java.lang.String);
  public void addTransition(int, java.lang.String, boolean, org.maltparser.parser.transition.TransitionTable);
  public boolean continueWithNextDecision(int) throws org.maltparser.core.exception.MaltChainedException;
  public boolean continueWithNextDecision(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.Table getTableForNextDecision(int) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.Table getTableForNextDecision(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.parser.transition.Transition getTransition(java.lang.String);
  public org.maltparser.parser.transition.Transition getTransition(int);
  public int addSymbol(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public java.lang.String getName();
  public java.lang.String getSymbolCodeToString(int) throws org.maltparser.core.exception.MaltChainedException;
  public int getSymbolStringToCode(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  protected void setName(java.lang.String);
  public int size();
}
Compiled from "TransitionTableHandler.java"
public class org.maltparser.parser.transition.TransitionTableHandler implements org.maltparser.core.symbol.TableHandler {
  public org.maltparser.parser.transition.TransitionTableHandler();
  public org.maltparser.core.symbol.Table addSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
  public org.maltparser.core.symbol.Table getSymbolTable(java.lang.String) throws org.maltparser.core.exception.MaltChainedException;
}
Compiled from "PseudoProjChartItem.java"
public class org.maltparser.transform.pseudo.PseudoProjChartItem extends org.maltparser.core.flow.item.ChartItem {
  public org.maltparser.transform.pseudo.PseudoProjChartItem();
  public void initialize(org.maltparser.core.flow.FlowChartInstance, org.maltparser.core.flow.spec.ChartItemSpecification) throws org.maltparser.core.exception.MaltChainedException;
  public int preprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public int process(int) throws org.maltparser.core.exception.MaltChainedException;
  public int postprocess(int) throws org.maltparser.core.exception.MaltChainedException;
  public void terminate() throws org.maltparser.core.exception.MaltChainedException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "PseudoProjectivity.java"
public class org.maltparser.transform.pseudo.PseudoProjectivity {
  static int id;
  public org.maltparser.transform.pseudo.PseudoProjectivity();
  public void initialize(java.lang.String, java.lang.String, java.lang.String, org.apache.log4j.Logger, org.maltparser.core.io.dataformat.DataFormatInstance) throws org.maltparser.core.exception.MaltChainedException;
  public void projectivize(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void mergeArclabels(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void splitArclabels(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  public void deprojectivize(org.maltparser.core.syntaxgraph.DependencyStructure) throws org.maltparser.core.exception.MaltChainedException;
  static {};
}
Compiled from "PseudoProjectivity.java"
final class org.maltparser.transform.pseudo.PseudoProjectivity$CoveredRootAttachment extends java.lang.Enum<org.maltparser.transform.pseudo.PseudoProjectivity$CoveredRootAttachment> {
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$CoveredRootAttachment NONE;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$CoveredRootAttachment IGNORE;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$CoveredRootAttachment LEFT;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$CoveredRootAttachment RIGHT;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$CoveredRootAttachment HEAD;
  public static org.maltparser.transform.pseudo.PseudoProjectivity$CoveredRootAttachment[] values();
  public static org.maltparser.transform.pseudo.PseudoProjectivity$CoveredRootAttachment valueOf(java.lang.String);
  static {};
}
Compiled from "PseudoProjectivity.java"
final class org.maltparser.transform.pseudo.PseudoProjectivity$LiftingOrder extends java.lang.Enum<org.maltparser.transform.pseudo.PseudoProjectivity$LiftingOrder> {
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$LiftingOrder SHORTEST;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$LiftingOrder DEEPEST;
  public static org.maltparser.transform.pseudo.PseudoProjectivity$LiftingOrder[] values();
  public static org.maltparser.transform.pseudo.PseudoProjectivity$LiftingOrder valueOf(java.lang.String);
  static {};
}
Compiled from "PseudoProjectivity.java"
final class org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding extends java.lang.Enum<org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding> {
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding NONE;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding BASELINE;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding HEAD;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding PATH;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding HEADPATH;
  public static final org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding TRACE;
  public static org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding[] values();
  public static org.maltparser.transform.pseudo.PseudoProjectivity$PseudoProjectiveEncoding valueOf(java.lang.String);
  static {};
}
Compiled from "TransformationException.java"
public class org.maltparser.transform.pseudo.TransformationException extends org.maltparser.core.exception.MaltChainedException {
  public static final long serialVersionUID;
  public org.maltparser.transform.pseudo.TransformationException(java.lang.String);
  public org.maltparser.transform.pseudo.TransformationException(java.lang.String, java.lang.Throwable);
}
