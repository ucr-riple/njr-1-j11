Compiled from "e.java"
public class a.e {
  public static java.util.logging.Logger LOGGER;
  public static boolean HIDE_EMPTY_EFFECTS_IN_PRINT;
  public static boolean __DEBUG;
  public static boolean __INFO;
  public static boolean __FATAL;
  public static boolean __HIGHDETAILS;
  public static boolean __LOGGER;
  public static final int FATAL;
  public static final int DEBUG;
  public static final int INFO;
  public static final int OFF;
  static final int __DEFAULTDISPLAY;
  public static java.lang.String[] RANDOM_RANGE;
  public static final double MIN_MATCH_REQUIRED;
  public static double PENALTY_FOR_EXTRA_TRACE;
  public static double PENALTY_FOR_EXTRA_LETTER;
  public static boolean WHOLE_NUMBER;
  public static final int NO_FLAGS;
  public static final int DONT_SAVE_MESSAGES_AND_PARTICIPANTS;
  public static final int SIMPLE_TRACES;
  public static final int FULL_TRACES;
  public static int DEFAULT_TRACE_TYPE;
  public static final int AGGRESSIVE_DEDUPING;
  public static final int SIMPLE_DEDUPING;
  public static final int NO_DEDUPING;
  public static int DEFAULT_DEDUPING_LEVEL;
  public static final java.lang.String AND;
  public static final java.lang.String OR;
  public static final java.lang.String NOT;
  public static final java.lang.String IMP;
  public static final java.lang.String IMPLIES;
  public static final java.lang.String EMPTY_EFFECT;
  public static final java.lang.String EMPTY_FORMULA;
  public static java.lang.String endl;
  public static java.lang.String tab;
  public static int indent;
  static boolean __initDone;
  static boolean __measureInitDone;
  public static void incIndent();
  public static void decIndent();
  public static java.lang.String dent();
  public static java.lang.String err(java.lang.String);
  public static java.lang.String write(java.lang.String);
  public static java.lang.String writeln(java.lang.String);
  public static java.lang.String print(java.lang.String);
  public static java.lang.String println(java.lang.String);
  public static java.lang.String println(java.lang.String, int);
  public static java.lang.String print(java.lang.String, int);
  public static void log(java.lang.String);
  public a.e();
  static {};
}
Compiled from "e.java"
public final class a.e$SIM_RESULT extends java.lang.Enum<a.e$SIM_RESULT> {
  public static final a.e$SIM_RESULT WHOLE_NUMBER;
  public static final a.e$SIM_RESULT RATIO;
  public boolean TYPE;
  public static a.e$SIM_RESULT[] values();
  public static a.e$SIM_RESULT valueOf(java.lang.String);
  static {};
}
Compiled from "e.java"
public final class a.e$WORD_MATCH_STRENGTH extends java.lang.Enum<a.e$WORD_MATCH_STRENGTH> {
  public static final a.e$WORD_MATCH_STRENGTH EXACT;
  public static final a.e$WORD_MATCH_STRENGTH STRONG;
  public static final a.e$WORD_MATCH_STRENGTH MEDIUM;
  public static final a.e$WORD_MATCH_STRENGTH WEAK;
  public static final a.e$WORD_MATCH_STRENGTH STUPID;
  public double MATCH_NUMBER;
  public static a.e$WORD_MATCH_STRENGTH[] values();
  public static a.e$WORD_MATCH_STRENGTH valueOf(java.lang.String);
  static {};
}
Compiled from "AbductiveExample.java"
public class be.fnord.DefaultLogic.AbductiveExample {
  public be.fnord.DefaultLogic.AbductiveExample();
  public static void main(java.lang.String[]);
}
Compiled from "App.java"
public class be.fnord.DefaultLogic.App {
  public be.fnord.DefaultLogic.App();
  public static void main(java.lang.String[]);
}
Compiled from "AppTest.java"
public class be.fnord.DefaultLogic.AppTest extends junit.framework.TestCase {
  public be.fnord.DefaultLogic.AppTest(java.lang.String);
  public static junit.framework.Test suite();
  public void testApp();
}
Compiled from "DefaultLogicExample.java"
public class be.fnord.DefaultLogic.DefaultLogicExample {
  public be.fnord.DefaultLogic.DefaultLogicExample();
  public static void example1();
  public static void example10();
  public static void example11();
  public static void example12();
  public static void example13();
  public static void example2();
  public static void example3();
  public static void example4();
  public static void example5();
  public static void example6();
  public static void example7();
  public static void example8();
  public static void example9();
  public static void main(java.lang.String[]);
}
Compiled from "ExtraExample.java"
public class be.fnord.DefaultLogic.ExtraExample {
  public be.fnord.DefaultLogic.ExtraExample();
  public static void example();
  public static void example2();
  public static void main(java.lang.String[]);
}
Compiled from "AbductionReasoner.java"
public class be.fnord.util.logic.AbductionReasoner {
  public static final boolean _VERBOSE;
  public static final int MAX_GUESSES;
  public int CURRENT_GUESS;
  java.util.LinkedList<java.lang.String> facts;
  java.lang.String kb;
  java.lang.String observations;
  public boolean SOLUTION_FOUND;
  public be.fnord.util.logic.AbductionReasoner();
  public be.fnord.util.logic.AbductionReasoner(java.lang.String, java.util.LinkedList<java.lang.String>, java.lang.String);
  public void _AbductionReasoner(java.lang.String, java.util.LinkedList<java.lang.String>, java.lang.String);
  public java.util.HashSet<java.lang.String> findMinimal(java.util.LinkedList<java.lang.String>);
  public java.util.LinkedList<java.lang.String> getFacts();
  public java.lang.String getKb();
  public java.lang.String getObservations();
  public java.util.LinkedList<java.lang.String> getPossibleScenarios();
  public boolean makeGuess(java.lang.String, java.lang.String, java.lang.String);
  public void setFacts(java.util.LinkedList<java.lang.String>);
  public void setKb(java.lang.String);
  public void setObservations(java.lang.String);
  public boolean testFact(java.lang.String, java.util.LinkedList<java.lang.String>, java.lang.String, java.util.LinkedList<java.lang.String>, java.lang.String, java.util.LinkedList<java.lang.String>);
  public java.lang.String unrollList(java.util.LinkedList<java.lang.String>, java.lang.String);
}
Compiled from "ClassicalLogicS.java"
public class be.fnord.util.logic.ClassicalLogicS extends orbital.moon.logic.ClassicalLogic implements java.io.Serializable {
  public be.fnord.util.logic.ClassicalLogicS();
  public boolean infer(java.lang.String, java.lang.String) throws orbital.logic.sign.ParseException;
  public orbital.logic.sign.Signature scanSignature(java.lang.String) throws orbital.logic.sign.ParseException;
  public orbital.logic.sign.Expression createExpression(java.lang.String) throws orbital.logic.sign.ParseException;
  public orbital.logic.imp.Formula$Composite composeFixed(orbital.logic.sign.Symbol, orbital.logic.functor.Functor, orbital.logic.sign.Expression[]);
  public orbital.logic.imp.Formula$Composite composeDelayed(orbital.logic.imp.Formula, orbital.logic.sign.Expression[], orbital.logic.sign.concrete.Notation);
  public orbital.logic.imp.Formula createFixedSymbol(orbital.logic.sign.Symbol, java.lang.Object, boolean);
  public orbital.logic.imp.Formula createSymbol(orbital.logic.sign.Symbol);
  public orbital.logic.sign.Expression createAtomic(orbital.logic.sign.Symbol);
}
Compiled from "DefaultReasoner.java"
public class be.fnord.util.logic.DefaultReasoner {
  public be.fnord.util.logic.defaultLogic.RuleSet rules;
  public be.fnord.util.logic.defaultLogic.WorldSet world;
  public static void main(java.lang.String[]);
  public be.fnord.util.logic.DefaultReasoner();
  public be.fnord.util.logic.DefaultReasoner(be.fnord.util.logic.defaultLogic.WorldSet, be.fnord.util.logic.defaultLogic.RuleSet);
  public void _DefaultReasoner(be.fnord.util.logic.defaultLogic.WorldSet, be.fnord.util.logic.defaultLogic.RuleSet);
  public java.util.HashSet<java.lang.String> getPossibleScenarios();
}
Compiled from "WFF.java"
public class be.fnord.util.logic.WFF implements java.io.Serializable {
  protected static transient org.apache.log4j.Logger logger;
  public int clauses;
  protected transient be.fnord.util.logic.ClassicalLogicS logic;
  public be.fnord.util.logic.WFF();
  public be.fnord.util.logic.WFF(java.lang.String);
  public boolean computeAssignments(java.util.Set<java.lang.String>);
  public boolean entails(be.fnord.util.logic.WFF);
  public boolean eval();
  protected boolean eval(java.lang.String);
  protected boolean eval(java.lang.String, java.lang.String);
  public boolean eval(be.fnord.util.logic.WFF);
  public boolean eval(be.fnord.util.logic.WFF, java.lang.String);
  public java.lang.String getClosure();
  public java.lang.String getEffect(java.lang.String, java.lang.String);
  public java.lang.String getFormula();
  public java.lang.String getID();
  public boolean isConsistent();
  public boolean isConsistent(java.lang.String);
  public boolean isEmpty();
  public boolean issat();
  public boolean issat(java.util.Set<java.lang.String>);
  public boolean issat(java.lang.String);
  public java.lang.String removeFromString(java.lang.String, java.lang.String);
  public void setFormula(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "DefaultRule.java"
public class be.fnord.util.logic.defaultLogic.DefaultRule {
  public be.fnord.util.logic.defaultLogic.DefaultRule();
  public java.lang.String getConsequence();
  public java.lang.String getJustificatoin();
  public java.lang.String getPrerequisite();
  public void setConsequence(java.lang.String);
  public void setJustificatoin(java.lang.String);
  public void setPrerequisite(java.lang.String);
  public java.lang.String toString();
}
Compiled from "RuleSet.java"
public class be.fnord.util.logic.defaultLogic.RuleSet {
  public java.util.LinkedList<java.lang.String> addedConsequence;
  public be.fnord.util.logic.defaultLogic.RuleSet();
  public void addRule(be.fnord.util.logic.defaultLogic.DefaultRule);
  public java.util.LinkedList<java.lang.String> applyRules(java.util.LinkedList<java.lang.String>, be.fnord.util.logic.WFF);
  public java.util.LinkedList<java.lang.String> generateExtensions(java.util.LinkedList<java.lang.String>, be.fnord.util.logic.WFF);
  public java.util.LinkedList<java.lang.String> getAllConsequences(be.fnord.util.logic.WFF);
  public java.util.LinkedList<be.fnord.util.logic.defaultLogic.DefaultRule> getRules();
  public java.util.LinkedList<java.lang.String> removeInconsistent(java.util.LinkedList<java.lang.String>, be.fnord.util.logic.WFF);
  public void setRules(java.util.LinkedList<be.fnord.util.logic.defaultLogic.DefaultRule>);
  public boolean testRule(be.fnord.util.logic.WFF, be.fnord.util.logic.WFF, be.fnord.util.logic.defaultLogic.DefaultRule);
  public java.lang.String toString();
}
Compiled from "WorldSet.java"
public class be.fnord.util.logic.defaultLogic.WorldSet {
  public be.fnord.util.logic.defaultLogic.WorldSet();
  public void addFormula(java.lang.String);
  public java.util.LinkedList<java.lang.String> getFormula();
  public java.lang.String getWorld();
  public void removeFormula(java.lang.String);
  public void setFormula(java.util.LinkedList<java.lang.String>);
  public java.lang.String toString();
}
Compiled from "CombinationGenerator.java"
public class com.merriampark.Gilleland.CombinationGenerator {
  public com.merriampark.Gilleland.CombinationGenerator(int, int);
  public int[] getNext();
  public java.math.BigInteger getNumLeft();
  public java.math.BigInteger getTotal();
  public boolean hasMore();
  public void reset();
}
