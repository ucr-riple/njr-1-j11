Compiled from "SMThemeParkExperi1.java"
class SMThemeParkExperi1 {
  SMThemeParkExperi1();
  public static void main(java.lang.String[]);
}
Compiled from "SMThemeParkExperi2.java"
class SMThemeParkExperi2 {
  public static final double CONF_LEVEL;
  SMThemeParkExperi2();
  public static void main(java.lang.String[]);
}
Compiled from "SMThemeParkExperi3.java"
class SMThemeParkExperi3 {
  public static double[] cfLevels;
  SMThemeParkExperi3();
  public static void main(java.lang.String[]);
  public static double[] computeLastCFLevel(double[]);
  static {};
}
Compiled from "TableHelper.java"
public class TableHelper {
  public TableHelper();
  public static void printTable(absmodJ.ConfidenceInterval, absmodJ.ConfidenceInterval, absmodJ.ConfidenceInterval);
}
Compiled from "ArriveAtStationFP.java"
public class simModel.ArriveAtStationFP extends absmodJ.ScheduledAction {
  simModel.SMThemePark model;
  public simModel.ArriveAtStationFP(simModel.SMThemePark);
  protected double timeSequence();
  protected void actionEvent();
}
Compiled from "ArriveAtStationGI.java"
public class simModel.ArriveAtStationGI extends absmodJ.ScheduledAction {
  simModel.SMThemePark model;
  public simModel.ArriveAtStationGI(simModel.SMThemePark);
  protected double timeSequence();
  protected void actionEvent();
}
Compiled from "ArriveAtStationRC.java"
public class simModel.ArriveAtStationRC extends absmodJ.ScheduledAction {
  simModel.SMThemePark model;
  public simModel.ArriveAtStationRC(simModel.SMThemePark);
  protected double timeSequence();
  protected void actionEvent();
}
Compiled from "ArriveAtStationSH.java"
public class simModel.ArriveAtStationSH extends absmodJ.ScheduledAction {
  simModel.SMThemePark model;
  public simModel.ArriveAtStationSH(simModel.SMThemePark);
  protected double timeSequence();
  protected void actionEvent();
}
Compiled from "Constants.java"
public class simModel.Constants {
  protected static final int FP;
  protected static final int SH;
  protected static final int GI;
  protected static final int RC;
  protected static final int NO_STATION;
  public static final int NUM_STATIONS;
  protected static final java.lang.String FP_S;
  protected static final java.lang.String SH_S;
  protected static final java.lang.String GI_S;
  protected static final java.lang.String RC_S;
  protected static final int MAX_CUSTOMERS_PER_CAR;
  public static final int MIN_NUMBER_OF_TRAINS;
  public static final int MAX_NUMBER_OF_TRAINS;
  public static final int MIN_NUMBER_OF_CARS;
  public static final int MAX_NUMBER_OF_CARS;
  public static final int COST_OF_TRAIN;
  public static final int COST_OF_CAR;
  public static final int COST_OF_SINGLE_SIDED;
  public static final int COST_OF_DOUBLE_SIDED;
  public static final int SINGLE_SIDED;
  public static final int DOUBLE_SIDED;
  public simModel.Constants();
}
Compiled from "DVPs.java"
class simModel.DVPs {
  simModel.SMThemePark model;
  public simModel.DVPs(simModel.SMThemePark);
  protected double uLoadUnloadTime();
  protected double travelTime(int);
  protected double getPercentageOfCustomersLeaving(int, int);
}
Compiled from "ExtraBoardingTime.java"
public class simModel.ExtraBoardingTime extends absmodJ.ExtSequelActivity {
  simModel.SMThemePark model;
  int id;
  public simModel.ExtraBoardingTime(simModel.SMThemePark, int);
  public int interruptionPreCond();
  public void interruptionSCS(int);
  protected double duration();
  public void startingEvent();
  protected void terminatingEvent();
}
Compiled from "Initialise.java"
class simModel.Initialise extends absmodJ.ScheduledAction {
  simModel.SMThemePark model;
  double[] ts;
  int tsix;
  public simModel.Initialise(simModel.SMThemePark);
  public double timeSequence();
  public void actionEvent();
}
Compiled from "Output.java"
public class simModel.Output {
  simModel.SMThemePark model;
  simModel.Output(simModel.SMThemePark);
  public int getTotalEvent();
  public int getType1BoardingEvent();
  public int getType2BoardingEvent();
  public int getType3BoardingEvent();
  public int getType4BoardingEvent();
  public double getPerctOfType1Scen();
  public double getPerctOfType2Scen();
  public double getPerctOfType3Scen();
  public double getPerctOfType4Scen();
  public void setTotalEvent(int);
  public void setType1BoardingEvent(int);
  public void setType2BoardingEvent(int);
  public void setType3BoardingEvent(int);
  public void setType4BoardingEvent(int);
  public void incrTotalEvent();
  public void incrType1BoardingEvent();
  public void incrType2BoardingEvent();
  public void incrType3BoardingEvent();
  public void incrType4BoardingEvent();
  public int getCost();
}
Compiled from "RVPs.java"
class simModel.RVPs {
  simModel.SMThemePark model;
  protected cern.jet.random.Exponential interArrDistFP;
  protected cern.jet.random.Exponential interArrDistSH;
  protected cern.jet.random.Exponential interArrDistGI;
  protected cern.jet.random.Exponential interArrDistRC;
  static final double MEAN_ARRL_FP_1;
  static final double MEAN_ARRL_FP_2;
  static final double MEAN_ARRL_FP_3;
  static final double MEAN_ARRL_FP_4;
  static final double MEAN_ARRL_FP_5;
  static final double MEAN_ARRL_FP_6;
  static final double MEAN_ARRL_FP_7;
  static final double MEAN_ARRL_FP_8;
  static final double MEAN_ARRL_FP_9;
  static final double MEAN_ARRL_FP_10;
  static final double MEAN_ARRL_FP_11;
  static final double MEAN_ARRL_FP_12;
  static final double MEAN_ARRL_SH_1;
  static final double MEAN_ARRL_SH_2;
  static final double MEAN_ARRL_SH_3;
  static final double MEAN_ARRL_SH_4;
  static final double MEAN_ARRL_SH_5;
  static final double MEAN_ARRL_SH_6;
  static final double MEAN_ARRL_SH_7;
  static final double MEAN_ARRL_SH_8;
  static final double MEAN_ARRL_SH_9;
  static final double MEAN_ARRL_SH_10;
  static final double MEAN_ARRL_SH_11;
  static final double MEAN_ARRL_SH_12;
  static final double MEAN_ARRL_GI_1;
  static final double MEAN_ARRL_GI_2;
  static final double MEAN_ARRL_GI_3;
  static final double MEAN_ARRL_GI_4;
  static final double MEAN_ARRL_GI_5;
  static final double MEAN_ARRL_GI_6;
  static final double MEAN_ARRL_GI_7;
  static final double MEAN_ARRL_GI_8;
  static final double MEAN_ARRL_GI_9;
  static final double MEAN_ARRL_GI_10;
  static final double MEAN_ARRL_GI_11;
  static final double MEAN_ARRL_GI_12;
  static final double MEAN_ARRL_RC_1;
  static final double MEAN_ARRL_RC_2;
  static final double MEAN_ARRL_RC_3;
  static final double MEAN_ARRL_RC_4;
  static final double MEAN_ARRL_RC_5;
  static final double MEAN_ARRL_RC_6;
  static final double MEAN_ARRL_RC_7;
  static final double MEAN_ARRL_RC_8;
  static final double MEAN_ARRL_RC_9;
  static final double MEAN_ARRL_RC_10;
  static final double MEAN_ARRL_RC_11;
  static final double MEAN_ARRL_RC_12;
  public simModel.RVPs(simModel.SMThemePark, simModel.Seeds);
  protected double uCustomersFP();
  protected double uCustomersSH();
  protected double uCustomersGI();
  protected double uCustomersRC();
  protected double getMeanTimeFP();
  protected double getMeanTimeSH();
  protected double getMeanTimeGI();
  protected double getMeanTimeRC();
}
Compiled from "SMThemePark.java"
public class simModel.SMThemePark extends absmodJ.AOSimulationModel {
  protected int numberOfTrains;
  protected int totalNumberOfCars;
  protected int boardingOption;
  protected boolean fixBoardingTime;
  simModel.Tracks[] rqTracks;
  simModel.Stations[] gStations;
  simModel.Trains[] rcgTrains;
  protected simModel.RVPs rvp;
  protected simModel.DVPs dvp;
  protected simModel.UDPs udp;
  public simModel.Output output;
  protected double closingTime;
  boolean traceFlag;
  public simModel.SMThemePark(double, double, int, int, int, boolean, simModel.Seeds, boolean);
  public simModel.SMThemePark();
  protected void testPreconditions(absmodJ.Behaviour);
  protected void eventOccured();
  protected void spStart(absmodJ.SequelActivity);
  protected double getClock();
  public boolean projectGoalReached();
  public void outputResults();
}
Compiled from "Seeds.java"
public class simModel.Seeds {
  int arrFP;
  int arrSH;
  int arrGI;
  int arrRC;
  public simModel.Seeds(cern.jet.random.engine.RandomSeedGenerator);
}
Compiled from "Stations.java"
public class simModel.Stations {
  int numCustomers;
  public java.lang.String name;
  public simModel.Stations(java.lang.String);
}
Compiled from "Tracks.java"
public class simModel.Tracks {
  protected java.util.ArrayList<java.lang.Integer> trainList;
  public simModel.Tracks();
  protected void spInsertQue(java.lang.Integer);
  protected java.lang.Integer spRemoveQue();
  protected int getN();
}
Compiled from "Trains.java"
public class simModel.Trains {
  protected int numCars;
  protected int numCustomers;
  protected int[] numLeavingCustomers;
  simModel.Trains$StatusType status;
  public simModel.Trains(int, int);
}
Compiled from "Trains.java"
public final class simModel.Trains$StatusType extends java.lang.Enum<simModel.Trains$StatusType> {
  public static final simModel.Trains$StatusType BOARDING;
  public static final simModel.Trains$StatusType TRAVELLING;
  public static final simModel.Trains$StatusType ARRIVED;
  public static simModel.Trains$StatusType[] values();
  public static simModel.Trains$StatusType valueOf(java.lang.String);
  static {};
}
Compiled from "TravellingBetweenStations.java"
public class simModel.TravellingBetweenStations extends absmodJ.SequelActivity {
  simModel.SMThemePark model;
  int id;
  simModel.Trains train;
  public simModel.TravellingBetweenStations(simModel.SMThemePark, int);
  protected double duration();
  public void startingEvent();
  protected void terminatingEvent();
}
Compiled from "UDPs.java"
public class simModel.UDPs {
  simModel.SMThemePark model;
  public simModel.UDPs(simModel.SMThemePark);
  public boolean checkTrainArrived(int);
  protected int stationReadyForUnboarding();
  protected void setOutputForStation(simModel.Stations);
  protected void boardAtStation(int);
  protected int getMaxNumberOfCustomers(java.lang.Integer);
  protected int getAvailableCapacity(java.lang.Integer);
}
Compiled from "UnBoardingAndBoarding.java"
public class simModel.UnBoardingAndBoarding extends absmodJ.ConditionalActivity {
  simModel.SMThemePark model;
  int id;
  public simModel.UnBoardingAndBoarding(simModel.SMThemePark);
  protected static boolean precondition(simModel.SMThemePark);
  protected double duration();
  public void startingEvent();
  protected void terminatingEvent();
}
