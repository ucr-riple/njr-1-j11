Compiled from "Log.java"
public final class fw.Log {
  public fw.Log();
  public static void success(java.lang.String, java.lang.Object...);
  public static void error(java.lang.String, java.lang.Object...);
}
Compiled from "Log.java"
public class fw.Log$AssertionException extends java.lang.RuntimeException {
  public fw.Log$AssertionException(java.lang.String);
}
Compiled from "Main.java"
public class fw.Main {
  public fw.Main();
  public static void main(java.lang.String[]);
}
Compiled from "Matcher.java"
public interface fw.Matcher<T> {
  public abstract boolean evaluate(T);
  public abstract void printSuccess(T);
  public abstract void printNegationSuccess(T);
  public abstract void raiseFailure(T);
  public abstract void raiseNegationFailure(T);
}
Compiled from "SyntaxicTestCase.java"
public class fw.SyntaxicTestCase {
  protected static final fw.values.BooleanMatcher BE_TRUE;
  protected static final fw.values.BooleanMatcher BE_FALSE;
  protected static final fw.values.NullMatcher BE_NULL;
  public fw.SyntaxicTestCase();
  public final <V> void should(V, fw.Matcher<V>);
  public final <V> void shouldNot(V, fw.Matcher<V>);
  public final void should(byte, fw.Matcher<java.lang.Byte>);
  public final void should(boolean, fw.Matcher<java.lang.Boolean>);
  public final void should(char, fw.Matcher<java.lang.Character>);
  public final void should(short, fw.Matcher<java.lang.Short>);
  public final void should(int, fw.Matcher<java.lang.Integer>);
  public final void should(long, fw.Matcher<java.lang.Long>);
  public final void should(float, fw.Matcher<java.lang.Float>);
  public final void should(double, fw.Matcher<java.lang.Double>);
  public final void shouldNot(byte, fw.Matcher<java.lang.Byte>);
  public final void shouldNot(boolean, fw.Matcher<java.lang.Boolean>);
  public final void shouldNot(char, fw.Matcher<java.lang.Character>);
  public final void shouldNot(short, fw.Matcher<java.lang.Short>);
  public final void shouldNot(int, fw.Matcher<java.lang.Integer>);
  public final void shouldNot(long, fw.Matcher<java.lang.Long>);
  public final void shouldNot(float, fw.Matcher<java.lang.Float>);
  public final void shouldNot(double, fw.Matcher<java.lang.Double>);
  public final fw.Matcher<java.lang.Object> eql(java.lang.Object);
  public final fw.Matcher<java.lang.Object> equal(java.lang.Object);
  public final fw.types.TypeMatcher beInstanceOf(java.lang.Class<?>);
  public final fw.Matcher<java.lang.String> match(java.lang.String);
  public final fw.collections.SizeMatcher have(int);
  public final fw.collections.IncludeMatcher include(java.lang.Object);
  public final fw.collections.IncludeMatcher include(byte);
  public final fw.collections.IncludeMatcher include(boolean);
  public final fw.collections.IncludeMatcher include(char);
  public final fw.collections.IncludeMatcher include(short);
  public final fw.collections.IncludeMatcher include(int);
  public final fw.collections.IncludeMatcher include(long);
  public final fw.collections.IncludeMatcher include(float);
  public final fw.collections.IncludeMatcher include(double);
  public final <T> void should(T[], fw.Matcher<java.util.Collection<?>>);
  public final void should(byte[], fw.Matcher<java.util.Collection<?>>);
  public final void should(boolean[], fw.Matcher<java.util.Collection<?>>);
  public final void should(char[], fw.Matcher<java.util.Collection<?>>);
  public final void should(short[], fw.Matcher<java.util.Collection<?>>);
  public final void should(int[], fw.Matcher<java.util.Collection<?>>);
  public final void should(long[], fw.Matcher<java.util.Collection<?>>);
  public final void should(float[], fw.Matcher<java.util.Collection<?>>);
  public final void should(double[], fw.Matcher<java.util.Collection<?>>);
  public final <T> void shouldNot(T[], fw.Matcher<java.util.Collection<?>>);
  public final void shouldNot(byte[], fw.Matcher<java.util.Collection<?>>);
  public final void shouldNot(boolean[], fw.Matcher<java.util.Collection<?>>);
  public final void shouldNot(char[], fw.Matcher<java.util.Collection<?>>);
  public final void shouldNot(short[], fw.Matcher<java.util.Collection<?>>);
  public final void shouldNot(int[], fw.Matcher<java.util.Collection<?>>);
  public final void shouldNot(long[], fw.Matcher<java.util.Collection<?>>);
  public final void shouldNot(double[], fw.Matcher<java.util.Collection<?>>);
  public final void shouldNot(float[], fw.Matcher<java.util.Collection<?>>);
  public fw.numbers.NumberMatcher<java.lang.Integer> be(int);
  public fw.numbers.NumberMatcher<java.lang.Integer> beEqual(int);
  public fw.numbers.NumberMatcher<java.lang.Integer> beGreateThan(int);
  public fw.numbers.NumberMatcher<java.lang.Integer> beLower(int);
  public fw.numbers.NumberMatcher<java.lang.Double> be(double);
  public fw.numbers.NumberMatcher<java.lang.Double> beEqual(double);
  public fw.numbers.NumberMatcher<java.lang.Double> beGreateThan(double);
  public fw.numbers.NumberMatcher<java.lang.Double> beLower(double);
  public fw.numbers.NumberMatcher<java.lang.Float> be(float);
  public fw.numbers.NumberMatcher<java.lang.Float> beEqual(float);
  public fw.numbers.NumberMatcher<java.lang.Float> beGreateThan(float);
  public fw.numbers.NumberMatcher<java.lang.Float> beLower(float);
  public fw.numbers.NumberMatcher<java.lang.Long> be(long);
  public fw.numbers.NumberMatcher<java.lang.Long> beEqual(long);
  public fw.numbers.NumberMatcher<java.lang.Long> beGreateThan(long);
  public fw.numbers.NumberMatcher<java.lang.Long> beLower(long);
  public fw.numbers.NumberMatcher<java.lang.Short> be(short);
  public fw.numbers.NumberMatcher<java.lang.Short> beEqual(short);
  public fw.numbers.NumberMatcher<java.lang.Short> beGreateThan(short);
  public fw.numbers.NumberMatcher<java.lang.Short> beLower(short);
  static {};
}
Compiled from "Test.java"
public class fw.Test extends fw.SyntaxicTestCase {
  public fw.Test();
  public void run();
}
Compiled from "IncludeMatcher.java"
public class fw.collections.IncludeMatcher implements fw.Matcher<java.util.Collection<?>> {
  public fw.collections.IncludeMatcher(java.lang.Object);
  public boolean evaluate(java.util.Collection<?>);
  public void printSuccess(java.util.Collection<?>);
  public void raiseFailure(java.util.Collection<?>);
  public void printNegationSuccess(java.util.Collection<?>);
  public void raiseNegationFailure(java.util.Collection<?>);
  public void raiseNegationFailure(java.lang.Object);
  public void raiseFailure(java.lang.Object);
  public void printNegationSuccess(java.lang.Object);
  public void printSuccess(java.lang.Object);
  public boolean evaluate(java.lang.Object);
}
Compiled from "SizeMatcher.java"
public final class fw.collections.SizeMatcher implements fw.Matcher<java.util.Collection<?>> {
  public fw.collections.SizeMatcher(int);
  public fw.collections.SizeMatcher atLeast();
  public fw.collections.SizeMatcher atMost();
  public boolean evaluate(java.util.Collection<?>);
  public void printSuccess(java.util.Collection<?>);
  public void raiseFailure(java.util.Collection<?>);
  public void printNegationSuccess(java.util.Collection<?>);
  public void raiseNegationFailure(java.util.Collection<?>);
  public void raiseNegationFailure(java.lang.Object);
  public void raiseFailure(java.lang.Object);
  public void printNegationSuccess(java.lang.Object);
  public void printSuccess(java.lang.Object);
  public boolean evaluate(java.lang.Object);
}
Compiled from "SizeMatcher.java"
class fw.collections.SizeMatcher$1 {
}
Compiled from "SizeMatcher.java"
abstract class fw.collections.SizeMatcher$Comparator extends java.lang.Enum<fw.collections.SizeMatcher$Comparator> {
  public static final fw.collections.SizeMatcher$Comparator EQUAL;
  public static final fw.collections.SizeMatcher$Comparator GREATER_THAN;
  public static final fw.collections.SizeMatcher$Comparator LOWER_THAN;
  public static fw.collections.SizeMatcher$Comparator[] values();
  public static fw.collections.SizeMatcher$Comparator valueOf(java.lang.String);
  abstract boolean compare(int, int);
  public java.lang.String toString();
  fw.collections.SizeMatcher$Comparator(java.lang.String, int, java.lang.String, fw.collections.SizeMatcher$1);
  static {};
}
Compiled from "SizeMatcher.java"
final class fw.collections.SizeMatcher$Comparator$1 extends fw.collections.SizeMatcher$Comparator {
  fw.collections.SizeMatcher$Comparator$1(java.lang.String, int, java.lang.String);
  boolean compare(int, int);
}
Compiled from "SizeMatcher.java"
final class fw.collections.SizeMatcher$Comparator$2 extends fw.collections.SizeMatcher$Comparator {
  fw.collections.SizeMatcher$Comparator$2(java.lang.String, int, java.lang.String);
  boolean compare(int, int);
}
Compiled from "SizeMatcher.java"
final class fw.collections.SizeMatcher$Comparator$3 extends fw.collections.SizeMatcher$Comparator {
  fw.collections.SizeMatcher$Comparator$3(java.lang.String, int, java.lang.String);
  boolean compare(int, int);
}
Compiled from "ReferenceMatcher.java"
public class fw.equality.ReferenceMatcher implements fw.Matcher<java.lang.Object> {
  public fw.equality.ReferenceMatcher(java.lang.Object);
  public boolean evaluate(java.lang.Object);
  public void printSuccess(java.lang.Object);
  public void raiseFailure(java.lang.Object);
  public void printNegationSuccess(java.lang.Object);
  public void raiseNegationFailure(java.lang.Object);
}
Compiled from "ValueMatcher.java"
public class fw.equality.ValueMatcher implements fw.Matcher<java.lang.Object> {
  public fw.equality.ValueMatcher(java.lang.Object);
  public boolean evaluate(java.lang.Object);
  public void printSuccess(java.lang.Object);
  public void raiseFailure(java.lang.Object);
  public void printNegationSuccess(java.lang.Object);
  public void raiseNegationFailure(java.lang.Object);
}
Compiled from "BaseNumberMatcher.java"
public class fw.numbers.BaseNumberMatcher<T extends java.lang.Number> extends fw.numbers.NumberMatcher<T> {
  public fw.numbers.BaseNumberMatcher(T);
  public T getValue();
  public boolean evaluate(T);
  public java.lang.String toString();
  public boolean evaluate(java.lang.Object);
}
Compiled from "ComparisonLayer.java"
public abstract class fw.numbers.ComparisonLayer<T extends java.lang.Number> extends fw.numbers.NumberMatcher<T> {
  protected fw.numbers.ComparisonLayer(fw.numbers.NumberMatcher<T>);
  public T getValue();
  protected fw.numbers.NumberMatcher<T> getBase();
  protected abstract boolean evaluateLayer(T, T);
  protected abstract java.lang.String getSign();
  public boolean evaluate(T);
  public java.lang.String toString();
  public boolean evaluate(java.lang.Object);
}
Compiled from "EqualMatcher.java"
public class fw.numbers.EqualMatcher<T extends java.lang.Number> extends fw.numbers.ComparisonLayer<T> {
  public fw.numbers.EqualMatcher(fw.numbers.NumberMatcher<T>);
  protected boolean evaluateLayer(T, T);
  protected java.lang.String getSign();
}
Compiled from "GreaterMatcher.java"
public class fw.numbers.GreaterMatcher<T extends java.lang.Number> extends fw.numbers.ComparisonLayer<T> {
  public fw.numbers.GreaterMatcher(fw.numbers.NumberMatcher<T>);
  protected boolean evaluateLayer(T, T);
  protected java.lang.String getSign();
}
Compiled from "LowerMatcher.java"
public class fw.numbers.LowerMatcher<T extends java.lang.Number> extends fw.numbers.ComparisonLayer<T> {
  public fw.numbers.LowerMatcher(fw.numbers.NumberMatcher<T>);
  protected boolean evaluateLayer(T, T);
  protected java.lang.String getSign();
}
Compiled from "NumberMatcher.java"
public abstract class fw.numbers.NumberMatcher<T extends java.lang.Number> implements fw.Matcher<T> {
  public fw.numbers.NumberMatcher();
  public abstract T getValue();
  public fw.numbers.NumberMatcher<T> equal();
  public fw.numbers.NumberMatcher<T> greaterThan();
  public fw.numbers.NumberMatcher<T> lowerThan();
  public fw.numbers.NumberMatcher<T> orEqual();
  public fw.numbers.NumberMatcher<T> orGreater();
  public fw.numbers.NumberMatcher<T> orLower();
  public abstract boolean evaluate(T);
  public void printSuccess(T);
  public void printNegationSuccess(T);
  public void raiseFailure(T);
  public void raiseNegationFailure(T);
  public abstract java.lang.String toString();
  public void raiseNegationFailure(java.lang.Object);
  public void raiseFailure(java.lang.Object);
  public void printNegationSuccess(java.lang.Object);
  public void printSuccess(java.lang.Object);
  public boolean evaluate(java.lang.Object);
}
Compiled from "RegExpMatcher.java"
public class fw.string.RegExpMatcher implements fw.Matcher<java.lang.String> {
  public fw.string.RegExpMatcher(java.lang.String);
  public boolean evaluate(java.lang.String);
  public void printSuccess(java.lang.String);
  public void raiseFailure(java.lang.String);
  public void printNegationSuccess(java.lang.String);
  public void raiseNegationFailure(java.lang.String);
  public void raiseNegationFailure(java.lang.Object);
  public void raiseFailure(java.lang.Object);
  public void printNegationSuccess(java.lang.Object);
  public void printSuccess(java.lang.Object);
  public boolean evaluate(java.lang.Object);
}
Compiled from "TypeMatcher.java"
public class fw.types.TypeMatcher implements fw.Matcher<java.lang.Object> {
  public fw.types.TypeMatcher(java.lang.Class<?>);
  public boolean evaluate(java.lang.Object);
  public void printSuccess(java.lang.Object);
  public void raiseFailure(java.lang.Object);
  public void printNegationSuccess(java.lang.Object);
  public void raiseNegationFailure(java.lang.Object);
}
Compiled from "Converter.java"
public class fw.utils.Converter {
  public fw.utils.Converter();
  public static <T> java.util.Collection<T> toCollection(T[]);
  public static java.util.Collection<java.lang.Byte> toCollection(byte[]);
  public static java.util.Collection<java.lang.Boolean> toCollection(boolean[]);
  public static java.util.Collection<java.lang.Character> toCollection(char[]);
  public static java.util.Collection<java.lang.Short> toCollection(short[]);
  public static java.util.Collection<java.lang.Integer> toCollection(int[]);
  public static java.util.Collection<java.lang.Long> toCollection(long[]);
  public static java.util.Collection<java.lang.Float> toCollection(float[]);
  public static java.util.Collection<java.lang.Double> toCollection(double[]);
}
Compiled from "BooleanMatcher.java"
public class fw.values.BooleanMatcher implements fw.Matcher<java.lang.Boolean> {
  public static final fw.values.BooleanMatcher TRUE;
  public static final fw.values.BooleanMatcher FALSE;
  public boolean evaluate(java.lang.Boolean);
  public void printSuccess(java.lang.Boolean);
  public void raiseFailure(java.lang.Boolean);
  public void printNegationSuccess(java.lang.Boolean);
  public void raiseNegationFailure(java.lang.Boolean);
  public void raiseNegationFailure(java.lang.Object);
  public void raiseFailure(java.lang.Object);
  public void printNegationSuccess(java.lang.Object);
  public void printSuccess(java.lang.Object);
  public boolean evaluate(java.lang.Object);
  static {};
}
Compiled from "NullMatcher.java"
public class fw.values.NullMatcher implements fw.Matcher<java.lang.Object> {
  public static final fw.values.NullMatcher INSTANCE;
  public boolean evaluate(java.lang.Object);
  public void printSuccess(java.lang.Object);
  public void raiseFailure(java.lang.Object);
  public void printNegationSuccess(java.lang.Object);
  public void raiseNegationFailure(java.lang.Object);
  static {};
}
