Compiled from "Dvfs_example_more_complex.java"
public class Examples.Dvfs_example_more_complex {
  public Examples.Dvfs_example_more_complex();
  public static void main(java.lang.String[]);
  public static void UpdateCloudletList(java.util.List<org.cloudbus.cloudsim.Cloudlet>);
  public static void UpdateVmList(java.util.List<org.cloudbus.cloudsim.Vm>);
  static org.cloudbus.cloudsim.power.PowerDatacenterBroker access$000(java.lang.String, org.cloudbus.cloudsim.core.EventPostBroker);
  static org.cloudbus.cloudsim.power.PowerDatacenterBroker access$100(java.lang.String);
  static java.util.List access$200(int, int, int, int);
  static java.util.List access$300(int, int, int, int);
  static {};
}
Compiled from "Dvfs_example_more_complex.java"
public class Examples.Dvfs_example_more_complex$GlobalBroker extends org.cloudbus.cloudsim.core.SimEntity {
  org.cloudbus.cloudsim.power.PowerDatacenterBroker broker;
  int no_broker;
  public Examples.Dvfs_example_more_complex$GlobalBroker(java.lang.String);
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  public void startEntity();
  public void shutdownEntity();
  public java.util.List<org.cloudbus.cloudsim.Vm> getVmList();
  protected void setVmList(java.util.List<org.cloudbus.cloudsim.Vm>);
  public java.util.List<org.cloudbus.cloudsim.Cloudlet> getCloudletList();
  protected void setCloudletList(java.util.List<org.cloudbus.cloudsim.Cloudlet>);
  public org.cloudbus.cloudsim.power.PowerDatacenterBroker getLastBroker(int);
  public org.cloudbus.cloudsim.power.PowerDatacenterBroker getBroker();
  public java.util.List<org.cloudbus.cloudsim.power.PowerDatacenterBroker> getListBroker();
  protected void setBroker(org.cloudbus.cloudsim.power.PowerDatacenterBroker);
}
Compiled from "Dvfs_example_simple.java"
public class Examples.Dvfs_example_simple {
  public Examples.Dvfs_example_simple();
  public static void main(java.lang.String[]);
  public static void UpdateCloudletList(java.util.List<org.cloudbus.cloudsim.Cloudlet>);
  public static void UpdateVmList(java.util.List<org.cloudbus.cloudsim.Vm>);
  static {};
}
Compiled from "Simple_DVFS.java"
public class Examples.Simple_DVFS {
  public Examples.Simple_DVFS();
  public static void main(java.lang.String[]);
  public static void UpdateCloudletList(java.util.List<org.cloudbus.cloudsim.Cloudlet>);
  public static void UpdateVmList(java.util.List<org.cloudbus.cloudsim.Vm>);
  static org.cloudbus.cloudsim.power.PowerDatacenterBroker access$000(java.lang.String, org.cloudbus.cloudsim.core.EventPostBroker);
  static org.cloudbus.cloudsim.power.PowerDatacenterBroker access$100(java.lang.String);
  static java.util.List access$200(int, int, int, int);
  static java.util.List access$300(int, int, int, int);
  static {};
}
Compiled from "Simple_DVFS.java"
public class Examples.Simple_DVFS$GlobalBroker extends org.cloudbus.cloudsim.core.SimEntity {
  org.cloudbus.cloudsim.power.PowerDatacenterBroker broker;
  int no_broker;
  public Examples.Simple_DVFS$GlobalBroker(java.lang.String);
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  public void startEntity();
  public void shutdownEntity();
  public java.util.List<org.cloudbus.cloudsim.Vm> getVmList();
  protected void setVmList(java.util.List<org.cloudbus.cloudsim.Vm>);
  public java.util.List<org.cloudbus.cloudsim.Cloudlet> getCloudletList();
  protected void setCloudletList(java.util.List<org.cloudbus.cloudsim.Cloudlet>);
  public org.cloudbus.cloudsim.power.PowerDatacenterBroker getLastBroker(int);
  public org.cloudbus.cloudsim.power.PowerDatacenterBroker getBroker();
  public java.util.List<org.cloudbus.cloudsim.power.PowerDatacenterBroker> getListBroker();
  protected void setBroker(org.cloudbus.cloudsim.power.PowerDatacenterBroker);
}
Compiled from "TLM_dvfs.java"
public class Examples.TLM_dvfs {
  public Examples.TLM_dvfs();
  public static void main(java.lang.String[]);
  public static void UpdateCloudletList(java.util.List<org.cloudbus.cloudsim.Cloudlet>);
  public static void UpdateVmList(java.util.List<org.cloudbus.cloudsim.Vm>);
  static org.cloudbus.cloudsim.power.PowerDatacenterBroker access$000(java.lang.String, org.cloudbus.cloudsim.core.EventPostBroker);
  static int access$100();
  static java.util.List access$200(int, int, int, int);
  static java.util.List access$300(int, int, int, int);
  static org.cloudbus.cloudsim.power.PowerDatacenterBroker access$400(java.lang.String);
  static {};
}
Compiled from "TLM_dvfs.java"
public class Examples.TLM_dvfs$GlobalBroker extends org.cloudbus.cloudsim.core.SimEntity {
  org.cloudbus.cloudsim.power.PowerDatacenterBroker broker;
  int no_broker;
  public Examples.TLM_dvfs$GlobalBroker(java.lang.String);
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  public void startEntity();
  public void shutdownEntity();
  public java.util.List<org.cloudbus.cloudsim.Vm> getVmList();
  protected void setVmList(java.util.List<org.cloudbus.cloudsim.Vm>);
  public java.util.List<org.cloudbus.cloudsim.Cloudlet> getCloudletList();
  protected void setCloudletList(java.util.List<org.cloudbus.cloudsim.Cloudlet>);
  public org.cloudbus.cloudsim.power.PowerDatacenterBroker getLastBroker(int);
  public org.cloudbus.cloudsim.power.PowerDatacenterBroker getBroker();
  public java.util.List<org.cloudbus.cloudsim.power.PowerDatacenterBroker> getListBroker();
  protected void setBroker(org.cloudbus.cloudsim.power.PowerDatacenterBroker);
  static {};
}
Compiled from "Cloudlet.java"
public class org.cloudbus.cloudsim.Cloudlet {
  public static final int CREATED;
  public static final int READY;
  public static final int QUEUED;
  public static final int INEXEC;
  public static final int SUCCESS;
  public static final int FAILED;
  public static final int CANCELED;
  public static final int PAUSED;
  public static final int RESUMED;
  public static final int FAILED_RESOURCE_UNAVAILABLE;
  protected int vmId;
  protected double costPerBw;
  protected double accumulatedBwCost;
  public org.cloudbus.cloudsim.Cloudlet(int, long, int, long, long, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel);
  public org.cloudbus.cloudsim.Cloudlet(int, long, int, long, long, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel, boolean, java.util.List<java.lang.String>);
  public org.cloudbus.cloudsim.Cloudlet(int, long, int, long, long, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel, java.util.List<java.lang.String>);
  public org.cloudbus.cloudsim.Cloudlet(int, long, int, long, long, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel, boolean);
  public boolean setReservationId(int);
  public int getReservationId();
  public boolean hasReserved();
  public boolean setCloudletLength(long);
  public boolean setNetServiceLevel(int);
  public int getNetServiceLevel();
  public double getWaitingTime();
  public boolean setClassType(int);
  public int getClassType();
  public boolean setNumberOfPes(int);
  public int getNumberOfPes();
  public java.lang.String getCloudletHistory();
  public long getCloudletFinishedSoFar();
  public boolean isFinished();
  public void setCloudletFinishedSoFar(long);
  public void setUserId(int);
  public int getUserId();
  public int getResourceId();
  public long getCloudletFileSize();
  public long getCloudletOutputSize();
  public void setResourceParameter(int, double);
  public void setSubmissionTime(double);
  public double getSubmissionTime();
  public void setExecStartTime(double);
  public double getExecStartTime();
  public void setExecParam(double, double);
  public void setCloudletStatus(int) throws java.lang.Exception;
  public int getCloudletStatus();
  public java.lang.String getCloudletStatusString();
  public static java.lang.String getStatusString(int);
  public long getCloudletLength();
  public long getCloudletTotalLength();
  public double getCostPerSec();
  public double getWallClockTime();
  public java.lang.String[] getAllResourceName();
  public int[] getAllResourceId();
  public double getActualCPUTime(int);
  public double getCostPerSec(int);
  public long getCloudletFinishedSoFar(int);
  public double getSubmissionTime(int);
  public double getWallClockTime(int);
  public java.lang.String getResourceName(int);
  public org.cloudbus.cloudsim.Cloudlet$Resource getResourceById(int);
  public double getFinishTime();
  protected void write(java.lang.String);
  public int getStatus();
  public int getCloudletId();
  public int getVmId();
  public void setVmId(int);
  public double getActualCPUTime();
  public void setResourceParameter(int, double, double);
  public double getProcessingCost();
  public java.util.List<java.lang.String> getRequiredFiles();
  protected void setRequiredFiles(java.util.List<java.lang.String>);
  public boolean addRequiredFile(java.lang.String);
  public boolean deleteRequiredFile(java.lang.String);
  public boolean requiresFiles();
  public org.cloudbus.cloudsim.UtilizationModel getUtilizationModelCpu();
  public void setUtilizationModelCpu(org.cloudbus.cloudsim.UtilizationModel);
  public org.cloudbus.cloudsim.UtilizationModel getUtilizationModelRam();
  public void setUtilizationModelRam(org.cloudbus.cloudsim.UtilizationModel);
  public org.cloudbus.cloudsim.UtilizationModel getUtilizationModelBw();
  public void setUtilizationModelBw(org.cloudbus.cloudsim.UtilizationModel);
  public double getUtilizationOfCpu(double);
  public double getUtilizationOfRam(double);
  public double getUtilizationOfBw(double);
}
Compiled from "Cloudlet.java"
class org.cloudbus.cloudsim.Cloudlet$1 {
}
Compiled from "Cloudlet.java"
class org.cloudbus.cloudsim.Cloudlet$Resource {
  public double submissionTime;
  public double wallClockTime;
  public double actualCPUTime;
  public double costPerSec;
  public long finishedSoFar;
  public int resourceId;
  public java.lang.String resourceName;
  org.cloudbus.cloudsim.Cloudlet$Resource(org.cloudbus.cloudsim.Cloudlet$1);
}
Compiled from "CloudletScheduler.java"
public abstract class org.cloudbus.cloudsim.CloudletScheduler {
  public org.cloudbus.cloudsim.CloudletScheduler();
  public abstract double updateVmProcessing(double, java.util.List<java.lang.Double>);
  public abstract double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet, double);
  public abstract double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet);
  public abstract org.cloudbus.cloudsim.Cloudlet cloudletCancel(int);
  public abstract boolean cloudletPause(int);
  public abstract double cloudletResume(int);
  public abstract void cloudletFinish(org.cloudbus.cloudsim.ResCloudlet);
  public abstract int getCloudletStatus(int);
  public abstract boolean isFinishedCloudlets();
  public abstract org.cloudbus.cloudsim.Cloudlet getNextFinishedCloudlet();
  public abstract int runningCloudlets();
  public abstract org.cloudbus.cloudsim.Cloudlet migrateCloudlet();
  public abstract double getTotalUtilizationOfCpu(double);
  public abstract java.util.List<java.lang.Double> getCurrentRequestedMips();
  public abstract double getTotalCurrentAvailableMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, java.util.List<java.lang.Double>);
  public abstract double getTotalCurrentRequestedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public abstract double getTotalCurrentAllocatedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public abstract double getCurrentRequestedUtilizationOfRam();
  public abstract double getCurrentRequestedUtilizationOfBw();
  public double getPreviousTime();
  protected void setPreviousTime(double);
  protected void setCurrentMipsShare(java.util.List<java.lang.Double>);
  public java.util.List<java.lang.Double> getCurrentMipsShare();
}
Compiled from "CloudletSchedulerDynamicWorkload.java"
public class org.cloudbus.cloudsim.CloudletSchedulerDynamicWorkload extends org.cloudbus.cloudsim.CloudletSchedulerTimeShared {
  public org.cloudbus.cloudsim.CloudletSchedulerDynamicWorkload(double, int);
  public double updateVmProcessing(double, java.util.List<java.lang.Double>);
  public double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet);
  public double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet, double);
  public void cloudletFinish(org.cloudbus.cloudsim.ResCloudlet);
  public double getTotalUtilizationOfCpu(double);
  public java.util.List<java.lang.Double> getCurrentRequestedMips();
  public double getTotalCurrentRequestedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public double getTotalCurrentAvailableMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, java.util.List<java.lang.Double>);
  public double getTotalCurrentAllocatedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public void updateUnderAllocatedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public double getEstimatedFinishTime(org.cloudbus.cloudsim.ResCloudlet, double);
  public int getTotalCurrentMips();
  public void setTotalMips(double);
  public double getTotalMips();
  public void setNumberOfPes(int);
  public int getNumberOfPes();
  public void setMips(double);
  public double getMips();
  public void setUnderAllocatedMips(java.util.Map<java.lang.String, java.lang.Double>);
  public java.util.Map<java.lang.String, java.lang.Double> getUnderAllocatedMips();
  protected double getCachePreviousTime();
  protected void setCachePreviousTime(double);
  protected java.util.List<java.lang.Double> getCacheCurrentRequestedMips();
  protected void setCacheCurrentRequestedMips(java.util.List<java.lang.Double>);
}
Compiled from "CloudletSchedulerSpaceShared.java"
public class org.cloudbus.cloudsim.CloudletSchedulerSpaceShared extends org.cloudbus.cloudsim.CloudletScheduler {
  protected int currentCpus;
  protected int usedPes;
  public org.cloudbus.cloudsim.CloudletSchedulerSpaceShared();
  public double updateVmProcessing(double, java.util.List<java.lang.Double>);
  public org.cloudbus.cloudsim.Cloudlet cloudletCancel(int);
  public boolean cloudletPause(int);
  public void cloudletFinish(org.cloudbus.cloudsim.ResCloudlet);
  public double cloudletResume(int);
  public double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet, double);
  public double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet);
  public int getCloudletStatus(int);
  public double getTotalUtilizationOfCpu(double);
  public boolean isFinishedCloudlets();
  public org.cloudbus.cloudsim.Cloudlet getNextFinishedCloudlet();
  public int runningCloudlets();
  public org.cloudbus.cloudsim.Cloudlet migrateCloudlet();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletWaitingList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void cloudletWaitingList(java.util.List<T>);
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletExecList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void setCloudletExecList(java.util.List<T>);
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletPausedList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void setCloudletPausedList(java.util.List<T>);
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletFinishedList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void setCloudletFinishedList(java.util.List<T>);
  public java.util.List<java.lang.Double> getCurrentRequestedMips();
  public double getTotalCurrentAvailableMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, java.util.List<java.lang.Double>);
  public double getTotalCurrentAllocatedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public double getTotalCurrentRequestedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public double getCurrentRequestedUtilizationOfRam();
  public double getCurrentRequestedUtilizationOfBw();
}
Compiled from "CloudletSchedulerTimeShared.java"
public class org.cloudbus.cloudsim.CloudletSchedulerTimeShared extends org.cloudbus.cloudsim.CloudletScheduler {
  protected int currentCPUs;
  public org.cloudbus.cloudsim.CloudletSchedulerTimeShared();
  public double updateVmProcessing(double, java.util.List<java.lang.Double>);
  public org.cloudbus.cloudsim.Cloudlet cloudletCancel(int);
  public boolean cloudletPause(int);
  public void cloudletFinish(org.cloudbus.cloudsim.ResCloudlet);
  public double cloudletResume(int);
  public double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet, double);
  public double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet);
  public int getCloudletStatus(int);
  public double getTotalUtilizationOfCpu(double);
  public boolean isFinishedCloudlets();
  public org.cloudbus.cloudsim.Cloudlet getNextFinishedCloudlet();
  public int runningCloudlets();
  public org.cloudbus.cloudsim.Cloudlet migrateCloudlet();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletExecList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void setCloudletExecList(java.util.List<T>);
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletPausedList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void setCloudletPausedList(java.util.List<T>);
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletFinishedList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void setCloudletFinishedList(java.util.List<T>);
  public java.util.List<java.lang.Double> getCurrentRequestedMips();
  public double getTotalCurrentAvailableMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, java.util.List<java.lang.Double>);
  public double getTotalCurrentAllocatedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public double getTotalCurrentRequestedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public double getCurrentRequestedUtilizationOfRam();
  public double getCurrentRequestedUtilizationOfBw();
}
Compiled from "DataCloudTags.java"
public final class org.cloudbus.cloudsim.DataCloudTags {
  public static final int DEFAULT_MTU;
  public static final int PKT_SIZE;
  public static final int DEFAULT_STORAGE_SIZE;
  public static final int REGISTER_REPLICA_CTLG;
  public static final int INQUIRY_LOCAL_RC_LIST;
  public static final int INQUIRY_GLOBAL_RC_LIST;
  public static final int INQUIRY_RC_LIST;
  public static final int INQUIRY_RC_RESULT;
  public static final int DATAcloudlet_SUBMIT;
  public static final int FILE_REQUEST;
  public static final int FILE_DELIVERY;
  public static final int FILE_ADD_MASTER;
  public static final int FILE_ADD_MASTER_RESULT;
  public static final int FILE_ADD_REPLICA;
  public static final int FILE_ADD_REPLICA_RESULT;
  public static final int FILE_ADD_SUCCESSFUL;
  public static final int FILE_ADD_ERROR_STORAGE_FULL;
  public static final int FILE_ADD_ERROR_EMPTY;
  public static final int FILE_ADD_ERROR_EXIST_READ_ONLY;
  public static final int FILE_ADD_ERROR;
  public static final int FILE_ADD_ERROR_ACCESS_DENIED;
  public static final int FILE_DELETE_MASTER;
  public static final int FILE_DELETE_MASTER_RESULT;
  public static final int FILE_DELETE_REPLICA;
  public static final int FILE_DELETE_REPLICA_RESULT;
  public static final int FILE_DELETE_SUCCESSFUL;
  public static final int FILE_DELETE_ERROR;
  public static final int FILE_DELETE_ERROR_READ_ONLY;
  public static final int FILE_DELETE_ERROR_DOESNT_EXIST;
  public static final int FILE_DELETE_ERROR_IN_USE;
  public static final int FILE_DELETE_ERROR_ACCESS_DENIED;
  public static final int FILE_MODIFY;
  public static final int FILE_MODIFY_RESULT;
  public static final int FILE_MODIFY_SUCCESSFUL;
  public static final int FILE_MODIFY_ERROR;
  public static final int FILE_MODIFY_ERROR_READ_ONLY;
  public static final int FILE_MODIFY_ERROR_DOESNT_EXIST;
  public static final int FILE_MODIFY_ERROR_IN_USE;
  public static final int FILE_MODIFY_ERROR_ACCESS_DENIED;
  public static final int CTLG_GET_REPLICA;
  public static final int CTLG_REPLICA_DELIVERY;
  public static final int CTLG_GET_REPLICA_LIST;
  public static final int CTLG_REPLICA_LIST_DELIVERY;
  public static final int CTLG_GET_FILE_ATTR;
  public static final int CTLG_FILE_ATTR_DELIVERY;
  public static final int CTLG_FILTER;
  public static final int CTLG_FILTER_DELIVERY;
  public static final int CTLG_ADD_MASTER;
  public static final int CTLG_ADD_MASTER_RESULT;
  public static final int CTLG_ADD_MASTER_SUCCESSFUL;
  public static final int CTLG_ADD_MASTER_ERROR;
  public static final int CTLG_ADD_MASTER_ERROR_FULL;
  public static final int CTLG_DELETE_MASTER;
  public static final int CTLG_DELETE_MASTER_RESULT;
  public static final int CTLG_DELETE_MASTER_SUCCESSFUL;
  public static final int CTLG_DELETE_MASTER_ERROR;
  public static final int CTLG_DELETE_MASTER_DOESNT_EXIST;
  public static final int CTLG_DELETE_MASTER_REPLICAS_EXIST;
  public static final int CTLG_ADD_REPLICA;
  public static final int CTLG_ADD_REPLICA_RESULT;
  public static final int CTLG_ADD_REPLICA_SUCCESSFUL;
  public static final int CTLG_ADD_REPLICA_ERROR;
  public static final int CTLG_ADD_REPLICA_ERROR_DOESNT_EXIST;
  public static final int CTLG_ADD_REPLICA_ERROR_FULL;
  public static final int CTLG_DELETE_REPLICA;
  public static final int CTLG_DELETE_REPLICA_RESULT;
  public static final int CTLG_DELETE_REPLICA_SUCCESSFUL;
  public static final int CTLG_DELETE_REPLICA_ERROR;
  public static final int CTLG_DELETE_REPLICA_ERROR_DOESNT_EXIST;
  public static final int CTLG_MODIFY_MASTER;
  public static final int CTLG_MODIFY_MASTER_RESULT;
  public static final int CTLG_MODIFY_MASTER_SUCCESSFUL;
  public static final int CTLG_MODIFY_MASTER_ERROR;
  public static final int CTLG_MODIFY_MASTER_ERROR_DOESNT_EXIST;
  public static final int CTLG_MODIFY_MASTER_ERROR_READ_ONLY;
}
Compiled from "Datacenter.java"
public class org.cloudbus.cloudsim.Datacenter extends org.cloudbus.cloudsim.core.SimEntity {
  public org.cloudbus.cloudsim.Datacenter(java.lang.String, org.cloudbus.cloudsim.DatacenterCharacteristics, org.cloudbus.cloudsim.VmAllocationPolicy, java.util.List<org.cloudbus.cloudsim.Storage>, double) throws java.lang.Exception;
  protected void registerOtherEntity();
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void processDataDelete(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected void processDataAdd(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected void processPingRequest(org.cloudbus.cloudsim.core.SimEvent);
  protected void processCloudletStatus(org.cloudbus.cloudsim.core.SimEvent);
  protected void processOtherEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void processVmCreate(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected void processVmDestroy(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected void processVmMigrate(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected void processCloudlet(org.cloudbus.cloudsim.core.SimEvent, int);
  protected void processCloudletMove(int[], int);
  protected void processCloudletSubmit(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected double predictFileTransferTime(java.util.List<java.lang.String>);
  protected void processCloudletResume(int, int, int, boolean);
  protected void processCloudletPause(int, int, int, boolean);
  protected void processCloudletCancel(int, int, int);
  protected void updateCloudletProcessing();
  protected void checkCloudletCompletion();
  public int addFile(org.cloudbus.cloudsim.File);
  protected boolean contains(org.cloudbus.cloudsim.File);
  protected boolean contains(java.lang.String);
  public void printDebts();
  public void shutdownEntity();
  public void startEntity();
  public <T extends org.cloudbus.cloudsim.Host> java.util.List<T> getHostList();
  protected org.cloudbus.cloudsim.DatacenterCharacteristics getCharacteristics();
  protected void setCharacteristics(org.cloudbus.cloudsim.DatacenterCharacteristics);
  protected java.lang.String getRegionalCisName();
  protected void setRegionalCisName(java.lang.String);
  public org.cloudbus.cloudsim.VmAllocationPolicy getVmAllocationPolicy();
  protected void setVmAllocationPolicy(org.cloudbus.cloudsim.VmAllocationPolicy);
  protected double getLastProcessTime();
  protected void setLastProcessTime(double);
  protected java.util.Map<java.lang.Integer, java.lang.Double> getDebts();
  protected void setDebts(java.util.Map<java.lang.Integer, java.lang.Double>);
  protected java.util.List<org.cloudbus.cloudsim.Storage> getStorageList();
  protected void setStorageList(java.util.List<org.cloudbus.cloudsim.Storage>);
  public <T extends org.cloudbus.cloudsim.Vm> java.util.List<T> getVmList();
  protected <T extends org.cloudbus.cloudsim.Vm> void setVmList(java.util.List<T>);
  protected double getSchedulingInterval();
  protected void setSchedulingInterval(double);
}
Compiled from "DatacenterBroker.java"
public class org.cloudbus.cloudsim.DatacenterBroker extends org.cloudbus.cloudsim.core.SimEntity {
  protected java.util.List<? extends org.cloudbus.cloudsim.Vm> vmList;
  protected java.util.List<? extends org.cloudbus.cloudsim.Vm> vmsCreatedList;
  protected java.util.List<? extends org.cloudbus.cloudsim.Cloudlet> cloudletList;
  protected java.util.List<? extends org.cloudbus.cloudsim.Cloudlet> cloudletSubmittedList;
  protected java.util.List<? extends org.cloudbus.cloudsim.Cloudlet> cloudletReceivedList;
  protected int cloudletsSubmitted;
  protected int vmsRequested;
  protected int vmsAcks;
  protected int vmsDestroyed;
  protected java.util.List<java.lang.Integer> datacenterIdsList;
  protected java.util.List<java.lang.Integer> datacenterRequestedIdsList;
  protected java.util.Map<java.lang.Integer, java.lang.Integer> vmsToDatacentersMap;
  protected java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.DatacenterCharacteristics> datacenterCharacteristicsList;
  protected org.cloudbus.cloudsim.core.EventPostBroker Postevt;
  public org.cloudbus.cloudsim.DatacenterBroker(java.lang.String) throws java.lang.Exception;
  public org.cloudbus.cloudsim.DatacenterBroker(java.lang.String, org.cloudbus.cloudsim.core.EventPostBroker) throws java.lang.Exception;
  public void submitVmList(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
  public void submitCloudletList(java.util.List<? extends org.cloudbus.cloudsim.Cloudlet>);
  public void bindCloudletToVm(int, int);
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void processResourceCharacteristics(org.cloudbus.cloudsim.core.SimEvent);
  protected void processResourceCharacteristicsRequest(org.cloudbus.cloudsim.core.SimEvent);
  protected void processVmCreate(org.cloudbus.cloudsim.core.SimEvent);
  protected void processCloudletReturn(org.cloudbus.cloudsim.core.SimEvent);
  protected void processPostEvent();
  protected void processOtherEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void createVmsInDatacenter(int);
  protected void submitCloudlets();
  protected void clearDatacenters();
  protected void finishExecution();
  public void shutdownEntity();
  public void startEntity();
  public <T extends org.cloudbus.cloudsim.Vm> java.util.List<T> getVmList();
  protected <T extends org.cloudbus.cloudsim.Vm> void setVmList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Cloudlet> java.util.List<T> getCloudletList();
  protected <T extends org.cloudbus.cloudsim.Cloudlet> void setCloudletList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Cloudlet> java.util.List<T> getCloudletSubmittedList();
  protected <T extends org.cloudbus.cloudsim.Cloudlet> void setCloudletSubmittedList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Cloudlet> java.util.List<T> getCloudletReceivedList();
  protected <T extends org.cloudbus.cloudsim.Cloudlet> void setCloudletReceivedList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Vm> java.util.List<T> getVmsCreatedList();
  protected <T extends org.cloudbus.cloudsim.Vm> void setVmsCreatedList(java.util.List<T>);
  protected int getVmsRequested();
  protected void setVmsRequested(int);
  protected int getVmsAcks();
  protected void setVmsAcks(int);
  protected void incrementVmsAcks();
  protected int getVmsDestroyed();
  protected void setVmsDestroyed(int);
  protected java.util.List<java.lang.Integer> getDatacenterIdsList();
  protected void setDatacenterIdsList(java.util.List<java.lang.Integer>);
  protected java.util.Map<java.lang.Integer, java.lang.Integer> getVmsToDatacentersMap();
  protected void setVmsToDatacentersMap(java.util.Map<java.lang.Integer, java.lang.Integer>);
  protected java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.DatacenterCharacteristics> getDatacenterCharacteristicsList();
  protected void setDatacenterCharacteristicsList(java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.DatacenterCharacteristics>);
  protected java.util.List<java.lang.Integer> getDatacenterRequestedIdsList();
  protected void setDatacenterRequestedIdsList(java.util.List<java.lang.Integer>);
  public org.cloudbus.cloudsim.core.EventPostBroker getPostevt();
  public void setPostevt(org.cloudbus.cloudsim.core.EventPostBroker);
}
Compiled from "DatacenterCharacteristics.java"
public class org.cloudbus.cloudsim.DatacenterCharacteristics {
  public static final int TIME_SHARED;
  public static final int SPACE_SHARED;
  public static final int OTHER_POLICY_SAME_RATING;
  public static final int OTHER_POLICY_DIFFERENT_RATING;
  public static final int ADVANCE_RESERVATION;
  public org.cloudbus.cloudsim.DatacenterCharacteristics(java.lang.String, java.lang.String, java.lang.String, java.util.List<? extends org.cloudbus.cloudsim.Host>, double, double, double, double, double);
  public java.lang.String getResourceName();
  public org.cloudbus.cloudsim.Host getHostWithFreePe();
  public org.cloudbus.cloudsim.Host getHostWithFreePe(int);
  public int getMipsOfOnePe();
  public int getMipsOfOnePe(int, int);
  public int getMips();
  public double getCpuTime(double, double);
  public int getNumberOfPes();
  public int getNumberOfFreePes();
  public int getNumberOfBusyPes();
  public boolean setPeStatus(int, int, int);
  public double getCostPerMi();
  public int getNumberOfHosts();
  public int getNumberOfFailedHosts();
  public boolean isWorking();
  public double getCostPerMem();
  public void setCostPerMem(double);
  public double getCostPerStorage();
  public void setCostPerStorage(double);
  public double getCostPerBw();
  public void setCostPerBw(double);
  public java.lang.String getVmm();
  public int getId();
  protected void setId(int);
  protected java.lang.String getArchitecture();
  protected void setArchitecture(java.lang.String);
  protected java.lang.String getOs();
  protected void setOs(java.lang.String);
  public <T extends org.cloudbus.cloudsim.Host> java.util.List<T> getHostList();
  protected <T extends org.cloudbus.cloudsim.Host> void setHostList(java.util.List<T>);
  protected double getTimeZone();
  protected void setTimeZone(double);
  public double getCostPerSecond();
  protected void setCostPerSecond(double);
  protected int getAllocationPolicy();
  protected void setAllocationPolicy(int);
  protected void setVmm(java.lang.String);
}
Compiled from "File.java"
public class org.cloudbus.cloudsim.File {
  public static final int NOT_REGISTERED;
  public static final int TYPE_UNKOWN;
  public static final int TYPE_RAW_DATA;
  public static final int TYPE_RECONSTRUCTED_DATA;
  public static final int TYPE_TAG_DATA;
  public org.cloudbus.cloudsim.File(java.lang.String, int) throws org.cloudbus.cloudsim.ParameterException;
  public org.cloudbus.cloudsim.File(org.cloudbus.cloudsim.File) throws org.cloudbus.cloudsim.ParameterException;
  public org.cloudbus.cloudsim.File makeReplica();
  public org.cloudbus.cloudsim.File makeMasterCopy();
  public org.cloudbus.cloudsim.FileAttribute getFileAttribute();
  public int getAttributeSize();
  public boolean setResourceID(int);
  public int getResourceID();
  public java.lang.String getName();
  public void setName(java.lang.String);
  public boolean setOwnerName(java.lang.String);
  public java.lang.String getOwnerName();
  public int getSize();
  public int getSizeInByte();
  public boolean setFileSize(int);
  public boolean setUpdateTime(double);
  public double getLastUpdateTime();
  public boolean setRegistrationID(int);
  public int getRegistrationID();
  public boolean setType(int);
  public int getType();
  public boolean setChecksum(int);
  public int getChecksum();
  public boolean setCost(double);
  public double getCost();
  public long getCreationTime();
  public boolean isRegistered();
  public void setMasterCopy(boolean);
  public boolean isMasterCopy();
  public void setReadOnly(boolean);
  public boolean isReadOnly();
  public boolean setTransactionTime(double);
  public double getTransactionTime();
}
Compiled from "FileAttribute.java"
public class org.cloudbus.cloudsim.FileAttribute {
  public org.cloudbus.cloudsim.FileAttribute(java.lang.String, int) throws org.cloudbus.cloudsim.ParameterException;
  public boolean copyValue(org.cloudbus.cloudsim.FileAttribute);
  public boolean setCreationTime(long);
  public long getCreationTime();
  public boolean setResourceID(int);
  public int getResourceID();
  public boolean setOwnerName(java.lang.String);
  public java.lang.String getOwnerName();
  public int getAttributeSize();
  public boolean setFileSize(int);
  public int getFileSize();
  public int getFileSizeInByte();
  public boolean setUpdateTime(double);
  public double getLastUpdateTime();
  public boolean setRegistrationId(int);
  public int getRegistrationID();
  public boolean setType(int);
  public int getType();
  public boolean setChecksum(int);
  public int getChecksum();
  public boolean setCost(double);
  public double getCost();
  public boolean isRegistered();
  public void setMasterCopy(boolean);
  public boolean isMasterCopy();
  public void setReadOnly(boolean);
  public boolean isReadOnly();
  public void setName(java.lang.String);
  public java.lang.String getName();
}
Compiled from "HarddriveStorage.java"
public class org.cloudbus.cloudsim.HarddriveStorage implements org.cloudbus.cloudsim.Storage {
  public org.cloudbus.cloudsim.HarddriveStorage(java.lang.String, double) throws org.cloudbus.cloudsim.ParameterException;
  public org.cloudbus.cloudsim.HarddriveStorage(double) throws org.cloudbus.cloudsim.ParameterException;
  public double getAvailableSpace();
  public boolean isFull();
  public int getNumStoredFile();
  public boolean reserveSpace(int);
  public double addReservedFile(org.cloudbus.cloudsim.File);
  public boolean hasPotentialAvailableSpace(int);
  public double getCapacity();
  public double getCurrentSize();
  public java.lang.String getName();
  public boolean setLatency(double);
  public double getLatency();
  public boolean setMaxTransferRate(int);
  public double getMaxTransferRate();
  public boolean setAvgSeekTime(double);
  public boolean setAvgSeekTime(double, org.cloudbus.cloudsim.distributions.ContinuousDistribution);
  public double getAvgSeekTime();
  public org.cloudbus.cloudsim.File getFile(java.lang.String);
  public java.util.List<java.lang.String> getFileNameList();
  public double addFile(org.cloudbus.cloudsim.File);
  public double addFile(java.util.List<org.cloudbus.cloudsim.File>);
  public org.cloudbus.cloudsim.File deleteFile(java.lang.String);
  public double deleteFile(java.lang.String, org.cloudbus.cloudsim.File);
  public double deleteFile(org.cloudbus.cloudsim.File);
  public boolean contains(java.lang.String);
  public boolean contains(org.cloudbus.cloudsim.File);
  public boolean renameFile(org.cloudbus.cloudsim.File, java.lang.String);
}
Compiled from "Host.java"
public class org.cloudbus.cloudsim.Host {
  public org.cloudbus.cloudsim.Host(int, org.cloudbus.cloudsim.provisioners.RamProvisioner, org.cloudbus.cloudsim.provisioners.BwProvisioner, long, java.util.List<? extends org.cloudbus.cloudsim.Pe>, org.cloudbus.cloudsim.VmScheduler);
  public double updateVmsProcessing(double);
  public void addMigratingInVm(org.cloudbus.cloudsim.Vm);
  public void removeMigratingInVm(org.cloudbus.cloudsim.Vm);
  public void reallocateMigratingInVms();
  public boolean isSuitableForVm(org.cloudbus.cloudsim.Vm);
  public boolean MakeSuitableHostForVm(org.cloudbus.cloudsim.Vm);
  public boolean decreaseVMMipsToHostNewVm(org.cloudbus.cloudsim.Vm);
  public void decreaseVmMips();
  public void regrowVmMipsAfterVmEnd(org.cloudbus.cloudsim.Vm);
  public void regrowVmMips();
  public boolean vmCreate(org.cloudbus.cloudsim.Vm);
  public void vmDestroy(org.cloudbus.cloudsim.Vm);
  public void vmDestroyAll();
  protected void vmDeallocate(org.cloudbus.cloudsim.Vm);
  protected void vmDeallocateAll();
  public org.cloudbus.cloudsim.Vm getVm(int, int);
  public int getNumberOfPes();
  public int getNumberOfFreePes();
  public int getTotalMips();
  public int getTotalMaxMips();
  public boolean allocatePesForVm(org.cloudbus.cloudsim.Vm, java.util.List<java.lang.Double>);
  public void deallocatePesForVm(org.cloudbus.cloudsim.Vm);
  public java.util.List<java.lang.Double> getAllocatedMipsForVm(org.cloudbus.cloudsim.Vm);
  public double getTotalAllocatedMipsForVm(org.cloudbus.cloudsim.Vm);
  public double getMaxAvailableMips();
  public double getAvailableMips();
  public void setAvailableMips(double);
  public long getBw();
  public int getRam();
  public long getStorage();
  public int getId();
  protected void setId(int);
  public org.cloudbus.cloudsim.provisioners.RamProvisioner getRamProvisioner();
  protected void setRamProvisioner(org.cloudbus.cloudsim.provisioners.RamProvisioner);
  public org.cloudbus.cloudsim.provisioners.BwProvisioner getBwProvisioner();
  protected void setBwProvisioner(org.cloudbus.cloudsim.provisioners.BwProvisioner);
  public org.cloudbus.cloudsim.VmScheduler getVmScheduler();
  protected void setVmScheduler(org.cloudbus.cloudsim.VmScheduler);
  public <T extends org.cloudbus.cloudsim.Pe> java.util.List<T> getPeList();
  protected <T extends org.cloudbus.cloudsim.Pe> void setPeList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Vm> java.util.List<T> getVmList();
  protected void setStorage(long);
  public boolean isFailed();
  public boolean setFailed(java.lang.String, boolean);
  public boolean setFailed(boolean);
  public boolean setPeStatus(int, int);
  public java.util.List<org.cloudbus.cloudsim.Vm> getVmsMigratingIn();
  public org.cloudbus.cloudsim.Datacenter getDatacenter();
  public void setDatacenter(org.cloudbus.cloudsim.Datacenter);
  public boolean isEnableDVFS();
  protected void setEnableDVFS(boolean);
  public boolean isEnableONOFF();
  public void setEnableONOFF(boolean);
}
Compiled from "HostDynamicWorkload.java"
public class org.cloudbus.cloudsim.HostDynamicWorkload extends org.cloudbus.cloudsim.Host {
  public org.cloudbus.cloudsim.HostDynamicWorkload(int, org.cloudbus.cloudsim.provisioners.RamProvisioner, org.cloudbus.cloudsim.provisioners.BwProvisioner, long, java.util.List<? extends org.cloudbus.cloudsim.Pe>, org.cloudbus.cloudsim.VmScheduler);
  public double updateVmsProcessing(double);
  public void isDvfsActivatedOnHost();
  public java.util.List<org.cloudbus.cloudsim.Vm> getCompletedVms();
  public double getMaxUtilization();
  public double getMaxUtilizationAmongVmsPes(org.cloudbus.cloudsim.Vm);
  public double getUtilizationOfRam();
  public double getUtilizationOfBw();
  public double getUtilizationOfCpu();
  public double getPreviousUtilizationOfCpu();
  public double getUtilizationOfCpuMips();
  public double getUtilizationMips();
  protected void setUtilizationMips(double);
  public double getPreviousUtilizationMips();
  protected void setPreviousUtilizationMips(double);
  public java.util.List<org.cloudbus.cloudsim.HostStateHistoryEntry> getStateHistory();
  public void addStateHistoryEntry(double, double, double, boolean);
}
Compiled from "HostStateHistoryEntry.java"
public class org.cloudbus.cloudsim.HostStateHistoryEntry {
  public org.cloudbus.cloudsim.HostStateHistoryEntry(double, double, double, boolean);
  protected void setTime(double);
  public double getTime();
  protected void setAllocatedMips(double);
  public double getAllocatedMips();
  protected void setRequestedMips(double);
  public double getRequestedMips();
  public void setActive(boolean);
  public boolean isActive();
}
Compiled from "InfoPacket.java"
public class org.cloudbus.cloudsim.InfoPacket implements org.cloudbus.cloudsim.Packet {
  public org.cloudbus.cloudsim.InfoPacket(java.lang.String, int, long, int, int, int);
  public int getId();
  public void setOriginalPingSize(long);
  public long getOriginalPingSize();
  public java.lang.String toString();
  public long getSize();
  public boolean setSize(long);
  public int getDestId();
  public int getSrcId();
  public int getNumHop();
  public double getTotalResponseTime();
  public double getBaudRate();
  public void addHop(int);
  public void addEntryTime(double);
  public void addExitTime(double);
  public void addBaudRate(double);
  public java.lang.Object[] getDetailBaudRate();
  public java.lang.Object[] getDetailHops();
  public java.lang.Object[] getDetailEntryTimes();
  public java.lang.Object[] getDetailExitTimes();
  public int getLast();
  public void setLast(int);
  public int getNetServiceType();
  public void setNetServiceType(int);
  public int getTag();
  public boolean setTag(int);
  public void setDestId(int);
}
Compiled from "Log.java"
public class org.cloudbus.cloudsim.Log {
  public org.cloudbus.cloudsim.Log();
  public static void print(java.lang.String);
  public static void print(java.lang.Object);
  public static void printLine(java.lang.String);
  public static void printLine();
  public static void printLine(java.lang.Object);
  public static void format(java.lang.String, java.lang.Object...);
  public static void formatLine(java.lang.String, java.lang.Object...);
  public static void setOutput(java.io.OutputStream);
  public static java.io.OutputStream getOutput();
  public static void setDisabled(boolean);
  public static boolean isDisabled();
  public static void disable();
  public static void enable();
  static {};
}
Compiled from "NetworkTopology.java"
public class org.cloudbus.cloudsim.NetworkTopology {
  protected static int nextIdx;
  protected static org.cloudbus.cloudsim.network.DelayMatrix_Float delayMatrix;
  protected static double[][] bwMatrix;
  protected static org.cloudbus.cloudsim.network.TopologicalGraph graph;
  protected static java.util.Map<java.lang.Integer, java.lang.Integer> map;
  public org.cloudbus.cloudsim.NetworkTopology();
  public static void buildNetworkTopology(java.lang.String);
  public static void addLink(int, int, double, double);
  public static void mapNode(int, int);
  public static void unmapNode(int);
  public static double getDelay(int, int);
  public static boolean isNetworkEnabled();
  static {};
}
Compiled from "Packet.java"
public interface org.cloudbus.cloudsim.Packet {
  public abstract java.lang.String toString();
  public abstract long getSize();
  public abstract boolean setSize(long);
  public abstract int getDestId();
  public abstract int getId();
  public abstract int getSrcId();
  public abstract int getNetServiceType();
  public abstract void setNetServiceType(int);
  public abstract int getLast();
  public abstract void setLast(int);
  public abstract int getTag();
}
Compiled from "ParameterException.java"
public class org.cloudbus.cloudsim.ParameterException extends java.lang.Exception {
  public org.cloudbus.cloudsim.ParameterException();
  public org.cloudbus.cloudsim.ParameterException(java.lang.String);
  public java.lang.String toString();
}
Compiled from "Pe.java"
public class org.cloudbus.cloudsim.Pe {
  public static final int FREE;
  public static final int BUSY;
  public static final int FAILED;
  org.cloudbus.cloudsim.power.dvfs.AbstractGovernor gov;
  public org.cloudbus.cloudsim.Pe(int, org.cloudbus.cloudsim.provisioners.PeProvisioner);
  public org.cloudbus.cloudsim.Pe(int, org.cloudbus.cloudsim.provisioners.PeProvisioner, java.util.ArrayList<java.lang.Double>, java.lang.String, org.cloudbus.cloudsim.xml.DvfsDatas);
  public void setId(int);
  public int getId();
  public void setMips(double);
  public int getMips();
  public int getMaxMips();
  public int getStatus();
  public void setStatusFree();
  public void setStatusBusy();
  public void setStatusFailed();
  public void setStatus(int);
  public org.cloudbus.cloudsim.provisioners.PeProvisioner getPeProvisioner();
  public int getIndexFreq();
  protected boolean changeToMaxFrequency();
  protected int changeFrequency();
}
Compiled from "ResCloudlet.java"
public class org.cloudbus.cloudsim.ResCloudlet {
  public org.cloudbus.cloudsim.ResCloudlet(org.cloudbus.cloudsim.Cloudlet);
  public org.cloudbus.cloudsim.ResCloudlet(org.cloudbus.cloudsim.Cloudlet, long, int, int);
  public long getStartTime();
  public int getDurationTime();
  public int getNumberOfPes();
  public int getReservationID();
  public boolean hasReserved();
  public int getCloudletId();
  public int getUserId();
  public long getCloudletLength();
  public long getCloudletTotalLength();
  public int getCloudletClassType();
  public boolean setCloudletStatus(int);
  public double getExecStartTime();
  public void setExecParam(double, double);
  public void setMachineAndPeId(int, int);
  public int getMachineId();
  public int getPeId();
  public int[] getPeIdList();
  public int[] getMachineIdList();
  public long getRemainingCloudletLength();
  public void finalizeCloudlet();
  public void updateCloudletFinishedSoFar(long);
  public double getCloudletArrivalTime();
  public void setFinishTime(double);
  public double getClouddletFinishTime();
  public org.cloudbus.cloudsim.Cloudlet getCloudlet();
  public int getCloudletStatus();
  public java.lang.String getUid();
}
Compiled from "SanStorage.java"
public class org.cloudbus.cloudsim.SanStorage extends org.cloudbus.cloudsim.HarddriveStorage {
  double bandwidth;
  double networkLatency;
  public org.cloudbus.cloudsim.SanStorage(double, double, double) throws org.cloudbus.cloudsim.ParameterException;
  public org.cloudbus.cloudsim.SanStorage(java.lang.String, double, double, double) throws org.cloudbus.cloudsim.ParameterException;
  public double addReservedFile(org.cloudbus.cloudsim.File);
  public double getMaxTransferRate();
  public double addFile(org.cloudbus.cloudsim.File);
  public double addFile(java.util.List<org.cloudbus.cloudsim.File>);
  public double deleteFile(java.lang.String, org.cloudbus.cloudsim.File);
  public double deleteFile(org.cloudbus.cloudsim.File);
}
Compiled from "Storage.java"
public interface org.cloudbus.cloudsim.Storage {
  public abstract java.lang.String getName();
  public abstract double getCapacity();
  public abstract double getCurrentSize();
  public abstract double getMaxTransferRate();
  public abstract double getAvailableSpace();
  public abstract boolean setMaxTransferRate(int);
  public abstract boolean isFull();
  public abstract int getNumStoredFile();
  public abstract boolean reserveSpace(int);
  public abstract double addReservedFile(org.cloudbus.cloudsim.File);
  public abstract boolean hasPotentialAvailableSpace(int);
  public abstract org.cloudbus.cloudsim.File getFile(java.lang.String);
  public abstract java.util.List<java.lang.String> getFileNameList();
  public abstract double addFile(org.cloudbus.cloudsim.File);
  public abstract double addFile(java.util.List<org.cloudbus.cloudsim.File>);
  public abstract org.cloudbus.cloudsim.File deleteFile(java.lang.String);
  public abstract double deleteFile(java.lang.String, org.cloudbus.cloudsim.File);
  public abstract double deleteFile(org.cloudbus.cloudsim.File);
  public abstract boolean contains(java.lang.String);
  public abstract boolean contains(org.cloudbus.cloudsim.File);
  public abstract boolean renameFile(org.cloudbus.cloudsim.File, java.lang.String);
}
Compiled from "UtilizationModel.java"
public interface org.cloudbus.cloudsim.UtilizationModel {
  public abstract double getUtilization(double);
}
Compiled from "UtilizationModelFull.java"
public class org.cloudbus.cloudsim.UtilizationModelFull implements org.cloudbus.cloudsim.UtilizationModel {
  public org.cloudbus.cloudsim.UtilizationModelFull();
  public double getUtilization(double);
}
Compiled from "UtilizationModelNull.java"
public class org.cloudbus.cloudsim.UtilizationModelNull implements org.cloudbus.cloudsim.UtilizationModel {
  public org.cloudbus.cloudsim.UtilizationModelNull();
  public double getUtilization(double);
}
Compiled from "UtilizationModelPlanetLabInMemory.java"
public class org.cloudbus.cloudsim.UtilizationModelPlanetLabInMemory implements org.cloudbus.cloudsim.UtilizationModel {
  public org.cloudbus.cloudsim.UtilizationModelPlanetLabInMemory(java.lang.String, double) throws java.lang.NumberFormatException, java.io.IOException;
  public double getUtilization(double);
  public void setSchedulingInterval(double);
  public double getSchedulingInterval();
}
Compiled from "UtilizationModelStochastic.java"
public class org.cloudbus.cloudsim.UtilizationModelStochastic implements org.cloudbus.cloudsim.UtilizationModel {
  public org.cloudbus.cloudsim.UtilizationModelStochastic();
  public org.cloudbus.cloudsim.UtilizationModelStochastic(long);
  public double getUtilization(double);
  protected java.util.Map<java.lang.Double, java.lang.Double> getHistory();
  protected void setHistory(java.util.Map<java.lang.Double, java.lang.Double>);
  public void saveHistory(java.lang.String) throws java.lang.Exception;
  public void loadHistory(java.lang.String) throws java.lang.Exception;
  public void setRandomGenerator(java.util.Random);
  public java.util.Random getRandomGenerator();
}
Compiled from "Vm.java"
public class org.cloudbus.cloudsim.Vm {
  public org.cloudbus.cloudsim.Vm(int, int, double, int, int, long, long, java.lang.String, org.cloudbus.cloudsim.CloudletScheduler);
  public org.cloudbus.cloudsim.Vm();
  public double updateVmProcessing(double, java.util.List<java.lang.Double>);
  public java.util.List<java.lang.Double> getCurrentRequestedMips();
  public double getCurrentRequestedTotalMips();
  public double getCurrentRequestedMaxMips();
  public long getCurrentRequestedBw();
  public int getCurrentRequestedRam();
  public double getTotalUtilizationOfCpu(double);
  public double getTotalUtilizationOfCpuMips(double);
  public void setUid(java.lang.String);
  public java.lang.String getUid();
  public static java.lang.String getUid(int, int);
  public int getId();
  protected void setId(int);
  protected void setUserId(int);
  public int getUserId();
  public double getMips();
  protected void setMips(double);
  public int getNumberOfPes();
  protected void setNumberOfPes(int);
  public int getRam();
  public void setRam(int);
  public long getBw();
  public void setBw(long);
  public long getSize();
  public void setSize(long);
  public java.lang.String getVmm();
  protected void setVmm(java.lang.String);
  public void setHost(org.cloudbus.cloudsim.Host);
  public org.cloudbus.cloudsim.Host getHost();
  public org.cloudbus.cloudsim.CloudletScheduler getCloudletScheduler();
  protected void setCloudletScheduler(org.cloudbus.cloudsim.CloudletScheduler);
  public boolean isInMigration();
  public void setInMigration(boolean);
  public long getCurrentAllocatedSize();
  protected void setCurrentAllocatedSize(long);
  public int getCurrentAllocatedRam();
  public void setCurrentAllocatedRam(int);
  public long getCurrentAllocatedBw();
  public void setCurrentAllocatedBw(long);
  public java.util.List<java.lang.Double> getCurrentAllocatedMips();
  public void setCurrentAllocatedMips(java.util.List<java.lang.Double>);
  public boolean isBeingInstantiated();
  public void setBeingInstantiated(boolean);
  public java.util.List<org.cloudbus.cloudsim.VmStateHistoryEntry> getStateHistory();
  public void addStateHistoryEntry(double, double, double, boolean);
  public double getMaxMips();
  protected boolean isSizeHasBeenModified();
  protected void setSizeHasBeenModified(boolean);
}
Compiled from "VmAllocationPolicy.java"
public abstract class org.cloudbus.cloudsim.VmAllocationPolicy {
  public org.cloudbus.cloudsim.VmAllocationPolicy(java.util.List<? extends org.cloudbus.cloudsim.Host>);
  public abstract boolean allocateHostForVm(org.cloudbus.cloudsim.Vm);
  public abstract boolean allocateHostForVm(org.cloudbus.cloudsim.Vm, org.cloudbus.cloudsim.Host);
  public abstract java.util.List<java.util.Map<java.lang.String, java.lang.Object>> optimizeAllocation(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
  public abstract void deallocateHostForVm(org.cloudbus.cloudsim.Vm);
  public abstract org.cloudbus.cloudsim.Host getHost(org.cloudbus.cloudsim.Vm);
  public abstract org.cloudbus.cloudsim.Host getHost(int, int);
  protected void setHostList(java.util.List<? extends org.cloudbus.cloudsim.Host>);
  public <T extends org.cloudbus.cloudsim.Host> java.util.List<T> getHostList();
}
Compiled from "VmAllocationPolicySimple.java"
public class org.cloudbus.cloudsim.VmAllocationPolicySimple extends org.cloudbus.cloudsim.VmAllocationPolicy {
  public org.cloudbus.cloudsim.VmAllocationPolicySimple(java.util.List<? extends org.cloudbus.cloudsim.Host>);
  public boolean allocateHostForVm(org.cloudbus.cloudsim.Vm);
  public void deallocateHostForVm(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.Host getHost(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.Host getHost(int, int);
  public java.util.Map<java.lang.String, org.cloudbus.cloudsim.Host> getVmTable();
  protected void setVmTable(java.util.Map<java.lang.String, org.cloudbus.cloudsim.Host>);
  protected java.util.Map<java.lang.String, java.lang.Integer> getUsedPes();
  protected void setUsedPes(java.util.Map<java.lang.String, java.lang.Integer>);
  protected java.util.List<java.lang.Integer> getFreePes();
  protected void setFreePes(java.util.List<java.lang.Integer>);
  public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> optimizeAllocation(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
  public boolean allocateHostForVm(org.cloudbus.cloudsim.Vm, org.cloudbus.cloudsim.Host);
}
Compiled from "VmScheduler.java"
public abstract class org.cloudbus.cloudsim.VmScheduler {
  public org.cloudbus.cloudsim.VmScheduler(java.util.List<? extends org.cloudbus.cloudsim.Pe>);
  public abstract boolean allocatePesForVm(org.cloudbus.cloudsim.Vm, java.util.List<java.lang.Double>);
  public abstract void deallocatePesForVm(org.cloudbus.cloudsim.Vm);
  public void deallocatePesForAllVms();
  public java.util.List<org.cloudbus.cloudsim.Pe> getPesAllocatedForVM(org.cloudbus.cloudsim.Vm);
  public java.util.List<java.lang.Double> getAllocatedMipsForVm(org.cloudbus.cloudsim.Vm);
  public double getTotalAllocatedMipsForVm(org.cloudbus.cloudsim.Vm);
  public double getMaxAvailableMips();
  public double getPeCapacity();
  public double getMaxPeCapacity();
  public <T extends org.cloudbus.cloudsim.Pe> java.util.List<T> getPeList();
  protected <T extends org.cloudbus.cloudsim.Pe> void setPeList(java.util.List<T>);
  protected java.util.Map<java.lang.String, java.util.List<java.lang.Double>> getMipsMap();
  protected void setMipsMap(java.util.Map<java.lang.String, java.util.List<java.lang.Double>>);
  public double getAvailableMips();
  protected void setAvailableMips(double);
  public java.util.List<java.lang.String> getVmsMigratingOut();
  protected void setVmsMigratingOut(java.util.List<java.lang.String>);
  public java.util.List<java.lang.String> getVmsMigratingIn();
  protected void setVmsMigratingIn(java.util.List<java.lang.String>);
  public java.util.Map<java.lang.String, java.util.List<org.cloudbus.cloudsim.Pe>> getPeMap();
  protected void setPeMap(java.util.Map<java.lang.String, java.util.List<org.cloudbus.cloudsim.Pe>>);
}
Compiled from "VmSchedulerSpaceShared.java"
public class org.cloudbus.cloudsim.VmSchedulerSpaceShared extends org.cloudbus.cloudsim.VmScheduler {
  public org.cloudbus.cloudsim.VmSchedulerSpaceShared(java.util.List<? extends org.cloudbus.cloudsim.Pe>);
  public boolean allocatePesForVm(org.cloudbus.cloudsim.Vm, java.util.List<java.lang.Double>);
  public void deallocatePesForVm(org.cloudbus.cloudsim.Vm);
  protected void setPeAllocationMap(java.util.Map<java.lang.String, java.util.List<org.cloudbus.cloudsim.Pe>>);
  protected java.util.Map<java.lang.String, java.util.List<org.cloudbus.cloudsim.Pe>> getPeAllocationMap();
  protected void setFreePes(java.util.List<org.cloudbus.cloudsim.Pe>);
  protected java.util.List<org.cloudbus.cloudsim.Pe> getFreePes();
}
Compiled from "VmSchedulerTimeShared.java"
public class org.cloudbus.cloudsim.VmSchedulerTimeShared extends org.cloudbus.cloudsim.VmScheduler {
  public org.cloudbus.cloudsim.VmSchedulerTimeShared(java.util.List<? extends org.cloudbus.cloudsim.Pe>);
  public boolean allocatePesForVm(org.cloudbus.cloudsim.Vm, java.util.List<java.lang.Double>);
  protected boolean allocatePesForVm(java.lang.String, java.util.List<java.lang.Double>);
  protected void updatePeProvisioning();
  public void deallocatePesForVm(org.cloudbus.cloudsim.Vm);
  public void deallocatePesForAllVms();
  public double getMaxAvailableMips();
  protected void setPesInUse(int);
  protected int getPesInUse();
  protected java.util.Map<java.lang.String, java.util.List<java.lang.Double>> getMipsMapRequested();
  protected void setMipsMapRequested(java.util.Map<java.lang.String, java.util.List<java.lang.Double>>);
}
Compiled from "VmSchedulerTimeSharedOverSubscription.java"
public class org.cloudbus.cloudsim.VmSchedulerTimeSharedOverSubscription extends org.cloudbus.cloudsim.VmSchedulerTimeShared {
  public org.cloudbus.cloudsim.VmSchedulerTimeSharedOverSubscription(java.util.List<? extends org.cloudbus.cloudsim.Pe>);
  protected boolean allocatePesForVm(java.lang.String, java.util.List<java.lang.Double>);
  protected void redistributeMipsDueToOverSubscription();
}
Compiled from "VmStateHistoryEntry.java"
public class org.cloudbus.cloudsim.VmStateHistoryEntry {
  public org.cloudbus.cloudsim.VmStateHistoryEntry(double, double, double, boolean);
  protected void setTime(double);
  public double getTime();
  protected void setAllocatedMips(double);
  public double getAllocatedMips();
  protected void setRequestedMips(double);
  public double getRequestedMips();
  protected void setInMigration(boolean);
  public boolean isInMigration();
}
Compiled from "CloudInformationService.java"
public class org.cloudbus.cloudsim.core.CloudInformationService extends org.cloudbus.cloudsim.core.SimEntity {
  public org.cloudbus.cloudsim.core.CloudInformationService(java.lang.String) throws java.lang.Exception;
  public void startEntity();
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  public void shutdownEntity();
  public java.util.List<java.lang.Integer> getList();
  public java.util.List<java.lang.Integer> getAdvReservList();
  public boolean resourceSupportAR(java.lang.Integer);
  public boolean resourceSupportAR(int);
  public boolean resourceExist(int);
  public boolean resourceExist(java.lang.Integer);
  protected void processOtherEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void processEndSimulation();
  protected void signalShutdown(java.util.Collection<java.lang.Integer>);
}
Compiled from "CloudSim.java"
public class org.cloudbus.cloudsim.core.CloudSim {
  protected static org.cloudbus.cloudsim.core.FutureQueue future;
  protected static org.cloudbus.cloudsim.core.DeferredQueue deferred;
  public static final org.cloudbus.cloudsim.core.predicates.PredicateAny SIM_ANY;
  public static final org.cloudbus.cloudsim.core.predicates.PredicateNone SIM_NONE;
  public org.cloudbus.cloudsim.core.CloudSim();
  public static void init(int, java.util.Calendar, boolean);
  public static double startSimulation() throws java.lang.NullPointerException;
  public static void stopSimulation() throws java.lang.NullPointerException;
  public static boolean terminateSimulation();
  public static boolean terminateSimulation(double);
  public static java.util.Calendar getSimulationCalendar();
  public static int getCloudInfoServiceEntityId();
  public static java.util.List<java.lang.Integer> getCloudResourceList();
  protected static void initialize();
  public static double clock();
  public static int getNumEntities();
  public static org.cloudbus.cloudsim.core.SimEntity getEntity(int);
  public static org.cloudbus.cloudsim.core.SimEntity getEntity(java.lang.String);
  public static int getEntityId(java.lang.String);
  public static java.lang.String getEntityName(int);
  public static java.lang.String getEntityName(java.lang.Integer);
  public static java.util.List<org.cloudbus.cloudsim.core.SimEntity> getEntityList();
  public static void addEntity(org.cloudbus.cloudsim.core.SimEntity);
  protected static void addEntityDynamically(org.cloudbus.cloudsim.core.SimEntity);
  public static boolean runClockTick();
  public static void runStop();
  public static void hold(int, long);
  public static void pause(int, double);
  public static void send(int, int, double, int, java.lang.Object);
  public static void sendFirst(int, int, double, int, java.lang.Object);
  public static void wait(int, org.cloudbus.cloudsim.core.predicates.Predicate);
  public static int waiting(int, org.cloudbus.cloudsim.core.predicates.Predicate);
  public static org.cloudbus.cloudsim.core.SimEvent select(int, org.cloudbus.cloudsim.core.predicates.Predicate);
  public static org.cloudbus.cloudsim.core.SimEvent findFirstDeferred(int, org.cloudbus.cloudsim.core.predicates.Predicate);
  public static org.cloudbus.cloudsim.core.SimEvent cancel(int, org.cloudbus.cloudsim.core.predicates.Predicate);
  public static boolean cancelAll(int, org.cloudbus.cloudsim.core.predicates.Predicate);
  public static void runStart();
  public static boolean running();
  public static boolean pauseSimulation();
  public static boolean pauseSimulation(long);
  public static boolean resumeSimulation();
  public static double run();
  public static void finishSimulation();
  public static void abruptallyTerminate();
  public static boolean isPaused();
  static {};
}
Compiled from "CloudSimShutdown.java"
public class org.cloudbus.cloudsim.core.CloudSimShutdown extends org.cloudbus.cloudsim.core.SimEntity {
  public org.cloudbus.cloudsim.core.CloudSimShutdown(java.lang.String, int) throws java.lang.Exception;
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  public void startEntity();
  public void shutdownEntity();
}
Compiled from "CloudSimTags.java"
public class org.cloudbus.cloudsim.core.CloudSimTags {
  public static final int TRUE;
  public static final int FALSE;
  public static final int DEFAULT_BAUD_RATE;
  public static final double SCHEDULE_NOW;
  public static final int END_OF_SIMULATION;
  public static final int ABRUPT_END_OF_SIMULATION;
  public static final int INSIGNIFICANT;
  public static final int EXPERIMENT;
  public static final int REGISTER_RESOURCE;
  public static final int REGISTER_RESOURCE_AR;
  public static final int RESOURCE_LIST;
  public static final int RESOURCE_AR_LIST;
  public static final int RESOURCE_CHARACTERISTICS;
  public static final int RESOURCE_DYNAMICS;
  public static final int RESOURCE_NUM_PE;
  public static final int RESOURCE_NUM_FREE_PE;
  public static final int RECORD_STATISTICS;
  public static final int RETURN_STAT_LIST;
  public static final int RETURN_ACC_STATISTICS_BY_CATEGORY;
  public static final int REGISTER_REGIONAL_GIS;
  public static final int REQUEST_REGIONAL_GIS;
  public static final int RESOURCE_CHARACTERISTICS_REQUEST;
  public static final int INFOPKT_SUBMIT;
  public static final int INFOPKT_RETURN;
  public static final int CLOUDLET_RETURN;
  public static final int CLOUDLET_SUBMIT;
  public static final int CLOUDLET_SUBMIT_ACK;
  public static final int CLOUDLET_CANCEL;
  public static final int CLOUDLET_STATUS;
  public static final int CLOUDLET_PAUSE;
  public static final int CLOUDLET_PAUSE_ACK;
  public static final int CLOUDLET_RESUME;
  public static final int CLOUDLET_RESUME_ACK;
  public static final int CLOUDLET_MOVE;
  public static final int CLOUDLET_MOVE_ACK;
  public static final int VM_CREATE;
  public static final int VM_CREATE_ACK;
  public static final int VM_DESTROY;
  public static final int VM_DESTROY_ACK;
  public static final int VM_MIGRATE;
  public static final int VM_MIGRATE_ACK;
  public static final int VM_DATA_ADD;
  public static final int VM_DATA_ADD_ACK;
  public static final int VM_DATA_DEL;
  public static final int VM_DATA_DEL_ACK;
  public static final int VM_DATACENTER_EVENT;
  public static final int VM_BROKER_EVENT;
  public static final int Network_Event_UP;
  public static final int Network_Event_send;
  public static final int RESOURCE_Register;
  public static final int Network_Event_DOWN;
  public static final int Network_Event_Host;
  public static final int NextCycle;
}
Compiled from "DeferredQueue.java"
public class org.cloudbus.cloudsim.core.DeferredQueue {
  public org.cloudbus.cloudsim.core.DeferredQueue();
  public void addEvent(org.cloudbus.cloudsim.core.SimEvent);
  public java.util.Iterator<org.cloudbus.cloudsim.core.SimEvent> iterator();
  public int size();
  public void clear();
}
Compiled from "EventPostBroker.java"
public class org.cloudbus.cloudsim.core.EventPostBroker {
  int dest;
  int tag;
  public org.cloudbus.cloudsim.core.EventPostBroker(int, int);
  public int getDest();
  public void setDest(int);
  public int getTag();
  public void setTag(int);
}
Compiled from "FutureQueue.java"
public class org.cloudbus.cloudsim.core.FutureQueue {
  public org.cloudbus.cloudsim.core.FutureQueue();
  public void addEvent(org.cloudbus.cloudsim.core.SimEvent);
  public void addEventFirst(org.cloudbus.cloudsim.core.SimEvent);
  public java.util.Iterator<org.cloudbus.cloudsim.core.SimEvent> iterator();
  public int size();
  public boolean remove(org.cloudbus.cloudsim.core.SimEvent);
  public boolean removeAll(java.util.Collection<org.cloudbus.cloudsim.core.SimEvent>);
  public void clear();
}
Compiled from "SimEntity.java"
public abstract class org.cloudbus.cloudsim.core.SimEntity implements java.lang.Cloneable {
  public static final int RUNNABLE;
  public static final int WAITING;
  public static final int HOLDING;
  public static final int FINISHED;
  public org.cloudbus.cloudsim.core.SimEntity(java.lang.String);
  public java.lang.String getName();
  public int getId();
  public void schedule(int, double, int, java.lang.Object);
  public void schedule(int, double, int);
  public void schedule(java.lang.String, double, int, java.lang.Object);
  public void schedule(java.lang.String, double, int);
  public void scheduleNow(int, int, java.lang.Object);
  public void scheduleNow(int, int);
  public void scheduleNow(java.lang.String, int, java.lang.Object);
  public void scheduleNow(java.lang.String, int);
  public void scheduleFirst(int, double, int, java.lang.Object);
  public void scheduleFirst(int, double, int);
  public void scheduleFirst(java.lang.String, double, int, java.lang.Object);
  public void scheduleFirst(java.lang.String, double, int);
  public void scheduleFirstNow(int, int, java.lang.Object);
  public void scheduleFirstNow(int, int);
  public void scheduleFirstNow(java.lang.String, int, java.lang.Object);
  public void scheduleFirstNow(java.lang.String, int);
  public void pause(double);
  public int numEventsWaiting(org.cloudbus.cloudsim.core.predicates.Predicate);
  public int numEventsWaiting();
  public org.cloudbus.cloudsim.core.SimEvent selectEvent(org.cloudbus.cloudsim.core.predicates.Predicate);
  public org.cloudbus.cloudsim.core.SimEvent cancelEvent(org.cloudbus.cloudsim.core.predicates.Predicate);
  public org.cloudbus.cloudsim.core.SimEvent getNextEvent(org.cloudbus.cloudsim.core.predicates.Predicate);
  public void waitForEvent(org.cloudbus.cloudsim.core.predicates.Predicate);
  public org.cloudbus.cloudsim.core.SimEvent getNextEvent();
  public abstract void startEntity();
  public abstract void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  public abstract void shutdownEntity();
  public void run();
  protected final java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  protected int getState();
  protected org.cloudbus.cloudsim.core.SimEvent getEventBuffer();
  protected void setState(int);
  protected void setId(int);
  protected void setEventBuffer(org.cloudbus.cloudsim.core.SimEvent);
  protected void send(int, double, int, java.lang.Object);
  protected void send(int, double, int);
  protected void send(java.lang.String, double, int, java.lang.Object);
  protected void send(java.lang.String, double, int);
  protected void sendNow(int, int, java.lang.Object);
  protected void sendNow(int, int);
  protected void sendNow(java.lang.String, int, java.lang.Object);
  protected void sendNow(java.lang.String, int);
}
Compiled from "SimEvent.java"
public class org.cloudbus.cloudsim.core.SimEvent implements java.lang.Cloneable, java.lang.Comparable<org.cloudbus.cloudsim.core.SimEvent> {
  public static final int ENULL;
  public static final int SEND;
  public static final int HOLD_DONE;
  public static final int CREATE;
  public org.cloudbus.cloudsim.core.SimEvent();
  org.cloudbus.cloudsim.core.SimEvent(int, double, int, int, int, java.lang.Object);
  org.cloudbus.cloudsim.core.SimEvent(int, double, int);
  protected void setSerial(long);
  protected void setEndWaitingTime(double);
  public java.lang.String toString();
  public int getType();
  public int compareTo(org.cloudbus.cloudsim.core.SimEvent);
  public int getDestination();
  public int getSource();
  public double eventTime();
  public double endWaitingTime();
  public int type();
  public int scheduledBy();
  public int getTag();
  public java.lang.Object getData();
  public java.lang.Object clone();
  public void setSource(int);
  public void setDestination(int);
  public int compareTo(java.lang.Object);
}
Compiled from "Predicate.java"
public abstract class org.cloudbus.cloudsim.core.predicates.Predicate {
  public org.cloudbus.cloudsim.core.predicates.Predicate();
  public abstract boolean match(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "PredicateAny.java"
public class org.cloudbus.cloudsim.core.predicates.PredicateAny extends org.cloudbus.cloudsim.core.predicates.Predicate {
  public org.cloudbus.cloudsim.core.predicates.PredicateAny();
  public boolean match(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "PredicateFrom.java"
public class org.cloudbus.cloudsim.core.predicates.PredicateFrom extends org.cloudbus.cloudsim.core.predicates.Predicate {
  public org.cloudbus.cloudsim.core.predicates.PredicateFrom(int);
  public org.cloudbus.cloudsim.core.predicates.PredicateFrom(int[]);
  public boolean match(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "PredicateNone.java"
public class org.cloudbus.cloudsim.core.predicates.PredicateNone extends org.cloudbus.cloudsim.core.predicates.Predicate {
  public org.cloudbus.cloudsim.core.predicates.PredicateNone();
  public boolean match(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "PredicateNotFrom.java"
public class org.cloudbus.cloudsim.core.predicates.PredicateNotFrom extends org.cloudbus.cloudsim.core.predicates.Predicate {
  public org.cloudbus.cloudsim.core.predicates.PredicateNotFrom(int);
  public org.cloudbus.cloudsim.core.predicates.PredicateNotFrom(int[]);
  public boolean match(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "PredicateNotType.java"
public class org.cloudbus.cloudsim.core.predicates.PredicateNotType extends org.cloudbus.cloudsim.core.predicates.Predicate {
  public org.cloudbus.cloudsim.core.predicates.PredicateNotType(int);
  public org.cloudbus.cloudsim.core.predicates.PredicateNotType(int[]);
  public boolean match(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "PredicateType.java"
public class org.cloudbus.cloudsim.core.predicates.PredicateType extends org.cloudbus.cloudsim.core.predicates.Predicate {
  public org.cloudbus.cloudsim.core.predicates.PredicateType(int);
  public org.cloudbus.cloudsim.core.predicates.PredicateType(int[]);
  public boolean match(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "ContinuousDistribution.java"
public interface org.cloudbus.cloudsim.distributions.ContinuousDistribution {
  public abstract double sample();
}
Compiled from "ExponentialDistr.java"
public class org.cloudbus.cloudsim.distributions.ExponentialDistr implements org.cloudbus.cloudsim.distributions.ContinuousDistribution {
  public org.cloudbus.cloudsim.distributions.ExponentialDistr(long, double);
  public org.cloudbus.cloudsim.distributions.ExponentialDistr(double);
  public double sample();
}
Compiled from "GammaDistr.java"
public class org.cloudbus.cloudsim.distributions.GammaDistr implements org.cloudbus.cloudsim.distributions.ContinuousDistribution {
  public org.cloudbus.cloudsim.distributions.GammaDistr(java.util.Random, int, double);
  public org.cloudbus.cloudsim.distributions.GammaDistr(int, double);
  public double sample();
}
Compiled from "LognormalDistr.java"
public class org.cloudbus.cloudsim.distributions.LognormalDistr implements org.cloudbus.cloudsim.distributions.ContinuousDistribution {
  public org.cloudbus.cloudsim.distributions.LognormalDistr(java.util.Random, double, double);
  public org.cloudbus.cloudsim.distributions.LognormalDistr(double, double);
  public double sample();
}
Compiled from "LomaxDistribution.java"
public class org.cloudbus.cloudsim.distributions.LomaxDistribution extends org.cloudbus.cloudsim.distributions.ParetoDistr implements org.cloudbus.cloudsim.distributions.ContinuousDistribution {
  public org.cloudbus.cloudsim.distributions.LomaxDistribution(double, double, double);
  public org.cloudbus.cloudsim.distributions.LomaxDistribution(java.util.Random, double, double, double);
  public double sample();
}
Compiled from "ParetoDistr.java"
public class org.cloudbus.cloudsim.distributions.ParetoDistr implements org.cloudbus.cloudsim.distributions.ContinuousDistribution {
  public org.cloudbus.cloudsim.distributions.ParetoDistr(java.util.Random, double, double);
  public org.cloudbus.cloudsim.distributions.ParetoDistr(double, double);
  public double sample();
}
Compiled from "UniformDistr.java"
public class org.cloudbus.cloudsim.distributions.UniformDistr implements org.cloudbus.cloudsim.distributions.ContinuousDistribution {
  public org.cloudbus.cloudsim.distributions.UniformDistr(double, double);
  public org.cloudbus.cloudsim.distributions.UniformDistr(double, double, long);
  public double sample();
  public static double sample(java.util.Random, double, double);
  public void setSeed(long);
}
Compiled from "WeibullDistr.java"
public class org.cloudbus.cloudsim.distributions.WeibullDistr implements org.cloudbus.cloudsim.distributions.ContinuousDistribution {
  public org.cloudbus.cloudsim.distributions.WeibullDistr(java.util.Random, double, double);
  public org.cloudbus.cloudsim.distributions.WeibullDistr(double, double);
  public double sample();
}
Compiled from "ZipfDistr.java"
public class org.cloudbus.cloudsim.distributions.ZipfDistr implements org.cloudbus.cloudsim.distributions.ContinuousDistribution {
  public org.cloudbus.cloudsim.distributions.ZipfDistr(long, double, int);
  public org.cloudbus.cloudsim.distributions.ZipfDistr(double, int);
  public double sample();
}
Compiled from "CloudletList.java"
public class org.cloudbus.cloudsim.lists.CloudletList {
  public org.cloudbus.cloudsim.lists.CloudletList();
  public static <T extends org.cloudbus.cloudsim.Cloudlet> T getById(java.util.List<T>, int);
  public static <T extends org.cloudbus.cloudsim.Cloudlet> void sort(java.util.List<T>);
}
Compiled from "CloudletList.java"
final class org.cloudbus.cloudsim.lists.CloudletList$1 implements java.util.Comparator<T> {
  org.cloudbus.cloudsim.lists.CloudletList$1();
  public int compare(T, T) throws java.lang.ClassCastException;
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "HostList.java"
public class org.cloudbus.cloudsim.lists.HostList {
  public org.cloudbus.cloudsim.lists.HostList();
  public static <T extends org.cloudbus.cloudsim.Host> T getById(java.util.List<T>, int);
  public static <T extends org.cloudbus.cloudsim.Host> int getNumberOfPes(java.util.List<T>);
  public static <T extends org.cloudbus.cloudsim.Host> int getNumberOfFreePes(java.util.List<T>);
  public static <T extends org.cloudbus.cloudsim.Host> int getNumberOfBusyPes(java.util.List<T>);
  public static <T extends org.cloudbus.cloudsim.Host> T getHostWithFreePe(java.util.List<T>);
  public static <T extends org.cloudbus.cloudsim.Host> T getHostWithFreePe(java.util.List<T>, int);
  public static <T extends org.cloudbus.cloudsim.Host> boolean setPeStatus(java.util.List<T>, int, int, int);
}
Compiled from "PeList.java"
public class org.cloudbus.cloudsim.lists.PeList {
  public org.cloudbus.cloudsim.lists.PeList();
  public static <T extends org.cloudbus.cloudsim.Pe> org.cloudbus.cloudsim.Pe getById(java.util.List<org.cloudbus.cloudsim.Pe>, int);
  public static <T extends org.cloudbus.cloudsim.Pe> int getMips(java.util.List<org.cloudbus.cloudsim.Pe>, int);
  public static <T extends org.cloudbus.cloudsim.Pe> int getTotalMips(java.util.List<org.cloudbus.cloudsim.Pe>);
  public static <T extends org.cloudbus.cloudsim.Pe> int getTotalMaxMips(java.util.List<org.cloudbus.cloudsim.Pe>);
  public static <T extends org.cloudbus.cloudsim.Pe> double getMaxUtilization(java.util.List<org.cloudbus.cloudsim.Pe>);
  public static <T extends org.cloudbus.cloudsim.Pe> double getMaxUtilizationAmongVmsPes(java.util.List<org.cloudbus.cloudsim.Pe>, org.cloudbus.cloudsim.Vm);
  public static <T extends org.cloudbus.cloudsim.Pe> org.cloudbus.cloudsim.Pe getFreePe(java.util.List<org.cloudbus.cloudsim.Pe>);
  public static <T extends org.cloudbus.cloudsim.Pe> int getNumberOfFreePes(java.util.List<org.cloudbus.cloudsim.Pe>);
  public static <T extends org.cloudbus.cloudsim.Pe> boolean setPeStatus(java.util.List<org.cloudbus.cloudsim.Pe>, int, int);
  public static <T extends org.cloudbus.cloudsim.Pe> int getNumberOfBusyPes(java.util.List<org.cloudbus.cloudsim.Pe>);
  public static <T extends org.cloudbus.cloudsim.Pe> void setStatusFailed(java.util.List<org.cloudbus.cloudsim.Pe>, java.lang.String, int, boolean);
  public static <T extends org.cloudbus.cloudsim.Pe> void setStatusFailed(java.util.List<org.cloudbus.cloudsim.Pe>, boolean);
}
Compiled from "ResCloudletList.java"
public class org.cloudbus.cloudsim.lists.ResCloudletList {
  public org.cloudbus.cloudsim.lists.ResCloudletList();
  public static <T extends org.cloudbus.cloudsim.ResCloudlet> org.cloudbus.cloudsim.ResCloudlet getByIdAndUserId(java.util.List<T>, int, int);
  public static <T extends org.cloudbus.cloudsim.ResCloudlet> int indexOf(java.util.List<T>, int, int);
  public static <T extends org.cloudbus.cloudsim.ResCloudlet> boolean move(java.util.List<T>, java.util.List<T>, T);
}
Compiled from "VmList.java"
public class org.cloudbus.cloudsim.lists.VmList {
  public org.cloudbus.cloudsim.lists.VmList();
  public static <T extends org.cloudbus.cloudsim.Vm> T getById(java.util.List<T>, int);
  public static <T extends org.cloudbus.cloudsim.Vm> T getByIdAndUserId(java.util.List<T>, int, int);
}
Compiled from "DelayMatrix_Float.java"
public class org.cloudbus.cloudsim.network.DelayMatrix_Float {
  protected float[][] mDelayMatrix;
  protected int mTotalNodeNum;
  public org.cloudbus.cloudsim.network.DelayMatrix_Float(org.cloudbus.cloudsim.network.TopologicalGraph, boolean);
  public float getDelay(int, int);
  public java.lang.String toString();
}
Compiled from "FloydWarshall_Float.java"
public class org.cloudbus.cloudsim.network.FloydWarshall_Float {
  public org.cloudbus.cloudsim.network.FloydWarshall_Float();
  public void initialize(int);
  public float[][] allPairsShortestPaths(float[][]);
  public int[][] getPK();
}
Compiled from "GraphReaderBrite.java"
public class org.cloudbus.cloudsim.network.GraphReaderBrite implements org.cloudbus.cloudsim.network.GraphReaderIF {
  public org.cloudbus.cloudsim.network.GraphReaderBrite();
  public org.cloudbus.cloudsim.network.TopologicalGraph readGraphFile(java.lang.String) throws java.io.IOException;
}
Compiled from "GraphReaderIF.java"
public interface org.cloudbus.cloudsim.network.GraphReaderIF {
  public abstract org.cloudbus.cloudsim.network.TopologicalGraph readGraphFile(java.lang.String) throws java.io.IOException;
}
Compiled from "TopologicalGraph.java"
public class org.cloudbus.cloudsim.network.TopologicalGraph {
  public org.cloudbus.cloudsim.network.TopologicalGraph();
  public void addLink(org.cloudbus.cloudsim.network.TopologicalLink);
  public void addNode(org.cloudbus.cloudsim.network.TopologicalNode);
  public int getNumberOfNodes();
  public int getNumberOfLinks();
  public java.util.Iterator<org.cloudbus.cloudsim.network.TopologicalLink> getLinkIterator();
  public java.util.Iterator<org.cloudbus.cloudsim.network.TopologicalNode> getNodeIterator();
  public java.lang.String toString();
}
Compiled from "TopologicalLink.java"
public class org.cloudbus.cloudsim.network.TopologicalLink {
  public org.cloudbus.cloudsim.network.TopologicalLink(int, int, float, float);
  public int getSrcNodeID();
  public int getDestNodeID();
  public float getLinkDelay();
  public float getLinkBw();
}
Compiled from "TopologicalNode.java"
public class org.cloudbus.cloudsim.network.TopologicalNode {
  public org.cloudbus.cloudsim.network.TopologicalNode(int);
  public org.cloudbus.cloudsim.network.TopologicalNode(int, int, int);
  public org.cloudbus.cloudsim.network.TopologicalNode(int, java.lang.String, int, int);
  public int getNodeID();
  public java.lang.String getNodeLabel();
  public int getCoordinateX();
  public int getCoordinateY();
}
Compiled from "AggregateSwitch.java"
public class org.cloudbus.cloudsim.network.datacenter.AggregateSwitch extends org.cloudbus.cloudsim.network.datacenter.Switch {
  public org.cloudbus.cloudsim.network.datacenter.AggregateSwitch(java.lang.String, int, org.cloudbus.cloudsim.network.datacenter.NetworkDatacenter);
  protected void processpacket_down(org.cloudbus.cloudsim.core.SimEvent);
  protected void processpacket_up(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "AppCloudlet.java"
public class org.cloudbus.cloudsim.network.datacenter.AppCloudlet {
  public static final int APP_MC;
  public static final int APP_Workflow;
  public int type;
  public int appID;
  public java.util.ArrayList<org.cloudbus.cloudsim.network.datacenter.NetworkCloudlet> clist;
  public double deadline;
  public double accuracy;
  public int numbervm;
  public int userId;
  public double exeTime;
  public int requestclass;
  public org.cloudbus.cloudsim.network.datacenter.AppCloudlet(int, int, double, int, int);
  public void createCloudletList(java.util.List<java.lang.Integer>);
  public java.util.ArrayList<org.cloudbus.cloudsim.network.datacenter.NetworkCloudlet> getClist();
}
Compiled from "EdgeSwitch.java"
public class org.cloudbus.cloudsim.network.datacenter.EdgeSwitch extends org.cloudbus.cloudsim.network.datacenter.Switch {
  public org.cloudbus.cloudsim.network.datacenter.EdgeSwitch(java.lang.String, int, org.cloudbus.cloudsim.network.datacenter.NetworkDatacenter);
  protected void processpacket_up(org.cloudbus.cloudsim.core.SimEvent);
  protected void processpacketforward(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "HostPacket.java"
public class org.cloudbus.cloudsim.network.datacenter.HostPacket {
  int sender;
  int virtualrecvid;
  int virtualsendid;
  int reciever;
  double data;
  double sendtime;
  double recievetime;
  public org.cloudbus.cloudsim.network.datacenter.HostPacket(int, int, double, double, double, int, int);
}
Compiled from "NetworkCloudlet.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkCloudlet extends org.cloudbus.cloudsim.Cloudlet implements java.lang.Comparable<java.lang.Object> {
  long memory;
  public double submittime;
  public double finishtime;
  public double exetime;
  public double numStage;
  public int currStagenum;
  public double timetostartStage;
  public double timespentInStage;
  public java.util.Map<java.lang.Double, org.cloudbus.cloudsim.network.datacenter.HostPacket> timeCommunicate;
  public java.util.ArrayList<org.cloudbus.cloudsim.network.datacenter.TaskStage> stages;
  public double starttime;
  public org.cloudbus.cloudsim.network.datacenter.NetworkCloudlet(int, long, int, long, long, long, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel, org.cloudbus.cloudsim.UtilizationModel);
  public int compareTo(java.lang.Object);
  public double getSubmittime();
}
Compiled from "NetworkCloudletSpaceSharedScheduler.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkCloudletSpaceSharedScheduler extends org.cloudbus.cloudsim.CloudletScheduler {
  protected int currentCpus;
  protected int usedPes;
  public java.util.Map<java.lang.Integer, java.util.List<org.cloudbus.cloudsim.network.datacenter.HostPacket>> pkttosend;
  public java.util.Map<java.lang.Integer, java.util.List<org.cloudbus.cloudsim.network.datacenter.HostPacket>> pktrecv;
  public org.cloudbus.cloudsim.network.datacenter.NetworkCloudletSpaceSharedScheduler();
  public org.cloudbus.cloudsim.network.datacenter.NetworkCloudletSpaceSharedScheduler(org.cloudbus.cloudsim.Datacenter);
  public double updateVmProcessing(double, java.util.List<java.lang.Double>);
  public org.cloudbus.cloudsim.Cloudlet cloudletCancel(int);
  public boolean cloudletPause(int);
  public void cloudletFinish(org.cloudbus.cloudsim.ResCloudlet);
  public double cloudletResume(int);
  public double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet, double);
  public double cloudletSubmit(org.cloudbus.cloudsim.Cloudlet);
  public int getCloudletStatus(int);
  public double getTotalUtilizationOfCpu(double);
  public boolean isFinishedCloudlets();
  public org.cloudbus.cloudsim.Cloudlet getNextFinishedCloudlet();
  public int runningCloudlets();
  public org.cloudbus.cloudsim.Cloudlet migrateCloudlet();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletWaitingList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void cloudletWaitingList(java.util.List<T>);
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletExecList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void setCloudletExecList(java.util.List<T>);
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletPausedList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void setCloudletPausedList(java.util.List<T>);
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> java.util.List<T> getCloudletFinishedList();
  protected <T extends org.cloudbus.cloudsim.ResCloudlet> void setCloudletFinishedList(java.util.List<T>);
  public java.util.List<java.lang.Double> getCurrentRequestedMips();
  public double getTotalCurrentAvailableMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, java.util.List<java.lang.Double>);
  public double getTotalCurrentAllocatedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public double getTotalCurrentRequestedMipsForCloudlet(org.cloudbus.cloudsim.ResCloudlet, double);
  public double getCurrentRequestedUtilizationOfBw();
  public double getCurrentRequestedUtilizationOfRam();
}
Compiled from "NetworkConstants.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkConstants {
  public static int maxhostVM;
  public static int HOST_PEs;
  public static double maxMemperVM;
  public static int currentCloudletId;
  public static int currentAppId;
  public static final int EXECUTION;
  public static final int WAIT_SEND;
  public static final int WAIT_RECV;
  public static final int FINISH;
  public static final int ROOT_LEVEL;
  public static final int Agg_LEVEL;
  public static final int EDGE_LEVEL;
  public static final int PES_NUMBER;
  public static final int FILE_SIZE;
  public static final int OUTPUT_SIZE;
  public static final int COMMUNICATION_LENGTH;
  public static boolean BASE;
  public static long BandWidthEdgeAgg;
  public static long BandWidthEdgeHost;
  public static long BandWidthAggRoot;
  public static double SwitchingDelayRoot;
  public static double SwitchingDelayAgg;
  public static double SwitchingDelayEdge;
  public static double EdgeSwitchPort;
  public static double AggSwitchPort;
  public static double RootSwitchPort;
  public static double seed;
  public static boolean logflag;
  public static int iteration;
  public static int nexttime;
  public static int totaldatatransfer;
  public org.cloudbus.cloudsim.network.datacenter.NetworkConstants();
  static {};
}
Compiled from "NetworkDatacenter.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkDatacenter extends org.cloudbus.cloudsim.Datacenter {
  public java.util.Map<java.lang.Integer, java.lang.Integer> VmToSwitchid;
  public java.util.Map<java.lang.Integer, java.lang.Integer> HostToSwitchid;
  public java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.network.datacenter.Switch> Switchlist;
  public java.util.Map<java.lang.Integer, java.lang.Integer> VmtoHostlist;
  public org.cloudbus.cloudsim.network.datacenter.NetworkDatacenter(java.lang.String, org.cloudbus.cloudsim.DatacenterCharacteristics, org.cloudbus.cloudsim.VmAllocationPolicy, java.util.List<org.cloudbus.cloudsim.Storage>, double) throws java.lang.Exception;
  public java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.network.datacenter.Switch> getEdgeSwitch();
  public boolean processVmCreateNetwork(org.cloudbus.cloudsim.Vm);
  protected void processCloudletSubmit(org.cloudbus.cloudsim.core.SimEvent, boolean);
}
Compiled from "NetworkDatacenterBroker.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkDatacenterBroker extends org.cloudbus.cloudsim.core.SimEntity {
  public static org.cloudbus.cloudsim.Datacenter linkDC;
  public boolean createvmflag;
  public static int cachedcloudlet;
  public org.cloudbus.cloudsim.network.datacenter.NetworkDatacenterBroker(java.lang.String) throws java.lang.Exception;
  public void submitVmList(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
  public void submitCloudletList(java.util.List<? extends org.cloudbus.cloudsim.network.datacenter.NetworkCloudlet>);
  public void setLinkDC(org.cloudbus.cloudsim.Datacenter);
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void processResourceCharacteristics(org.cloudbus.cloudsim.core.SimEvent);
  protected void processResourceCharacteristicsRequest(org.cloudbus.cloudsim.core.SimEvent);
  protected void processCloudletReturn(org.cloudbus.cloudsim.core.SimEvent);
  protected void processOtherEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void createVmsInDatacenterBase(int);
  protected void clearDatacenters();
  public void shutdownEntity();
  public void startEntity();
  public <T extends org.cloudbus.cloudsim.Vm> java.util.List<T> getVmList();
  protected <T extends org.cloudbus.cloudsim.Vm> void setVmList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.network.datacenter.NetworkCloudlet> java.util.List<T> getCloudletList();
  protected <T extends org.cloudbus.cloudsim.network.datacenter.NetworkCloudlet> void setCloudletList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.network.datacenter.AppCloudlet> java.util.List<T> getAppCloudletList();
  public <T extends org.cloudbus.cloudsim.network.datacenter.AppCloudlet> void setAppCloudletList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Cloudlet> java.util.List<T> getCloudletSubmittedList();
  protected <T extends org.cloudbus.cloudsim.Cloudlet> void setCloudletSubmittedList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Cloudlet> java.util.List<T> getCloudletReceivedList();
  protected <T extends org.cloudbus.cloudsim.Cloudlet> void setCloudletReceivedList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Vm> java.util.List<T> getVmsCreatedList();
  protected <T extends org.cloudbus.cloudsim.Vm> void setVmsCreatedList(java.util.List<T>);
  protected int getVmsRequested();
  protected void setVmsRequested(int);
  protected int getVmsAcks();
  protected void setVmsAcks(int);
  protected void incrementVmsAcks();
  protected int getVmsDestroyed();
  protected void setVmsDestroyed(int);
  protected java.util.List<java.lang.Integer> getDatacenterIdsList();
  protected void setDatacenterIdsList(java.util.List<java.lang.Integer>);
  protected java.util.Map<java.lang.Integer, java.lang.Integer> getVmsToDatacentersMap();
  protected void setVmsToDatacentersMap(java.util.Map<java.lang.Integer, java.lang.Integer>);
  protected java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.DatacenterCharacteristics> getDatacenterCharacteristicsList();
  protected void setDatacenterCharacteristicsList(java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.DatacenterCharacteristics>);
  protected java.util.List<java.lang.Integer> getDatacenterRequestedIdsList();
  protected void setDatacenterRequestedIdsList(java.util.List<java.lang.Integer>);
  static {};
}
Compiled from "NetworkDatacenterBrokerExtends.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkDatacenterBrokerExtends extends org.cloudbus.cloudsim.DatacenterBroker {
  public static org.cloudbus.cloudsim.Datacenter linkDC;
  public boolean createvmflag;
  public static int cachedcloudlet;
  public org.cloudbus.cloudsim.network.datacenter.NetworkDatacenterBrokerExtends(java.lang.String) throws java.lang.Exception;
  protected void processVmCreate(org.cloudbus.cloudsim.core.SimEvent);
  public void setLinkDC(org.cloudbus.cloudsim.Datacenter);
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void processResourceCharacteristicsRequest(org.cloudbus.cloudsim.core.SimEvent);
  protected void processOtherEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void createVmsInDatacenterBase(int);
  protected void clearDatacenters();
  public void shutdownEntity();
  public void startEntity();
  public <T extends org.cloudbus.cloudsim.Vm> java.util.List<T> getVmList();
  protected <T extends org.cloudbus.cloudsim.Vm> void setVmList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.network.datacenter.AppCloudlet> java.util.List<T> getAppCloudletList();
  public <T extends org.cloudbus.cloudsim.network.datacenter.AppCloudlet> void setAppCloudletList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Cloudlet> java.util.List<T> getCloudletSubmittedList();
  protected <T extends org.cloudbus.cloudsim.Cloudlet> void setCloudletSubmittedList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Cloudlet> java.util.List<T> getCloudletReceivedList();
  protected <T extends org.cloudbus.cloudsim.Cloudlet> void setCloudletReceivedList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Vm> java.util.List<T> getVmsCreatedList();
  protected <T extends org.cloudbus.cloudsim.Vm> void setVmsCreatedList(java.util.List<T>);
  protected int getVmsRequested();
  protected void setVmsRequested(int);
  protected int getVmsAcks();
  protected void setVmsAcks(int);
  protected void incrementVmsAcks();
  protected int getVmsDestroyed();
  protected void setVmsDestroyed(int);
  protected java.util.List<java.lang.Integer> getDatacenterIdsList();
  protected void setDatacenterIdsList(java.util.List<java.lang.Integer>);
  protected java.util.Map<java.lang.Integer, java.lang.Integer> getVmsToDatacentersMap();
  protected void setVmsToDatacentersMap(java.util.Map<java.lang.Integer, java.lang.Integer>);
  protected java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.DatacenterCharacteristics> getDatacenterCharacteristicsList();
  protected void setDatacenterCharacteristicsList(java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.DatacenterCharacteristics>);
  protected java.util.List<java.lang.Integer> getDatacenterRequestedIdsList();
  protected void setDatacenterRequestedIdsList(java.util.List<java.lang.Integer>);
  static {};
}
Compiled from "NetworkHost.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkHost extends org.cloudbus.cloudsim.Host {
  public java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkPacket> packetTosendLocal;
  public java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkPacket> packetTosendGlobal;
  public java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkPacket> packetrecieved;
  public double memory;
  public org.cloudbus.cloudsim.network.datacenter.Switch sw;
  public double bandwidth;
  public java.util.List<java.lang.Double> CPUfinTimeCPU;
  public double fintime;
  public org.cloudbus.cloudsim.network.datacenter.NetworkHost(int, org.cloudbus.cloudsim.provisioners.RamProvisioner, org.cloudbus.cloudsim.provisioners.BwProvisioner, long, java.util.List<? extends org.cloudbus.cloudsim.Pe>, org.cloudbus.cloudsim.VmScheduler);
  public double updateVmsProcessing(double);
  public double getMaxUtilizationAmongVmsPes(org.cloudbus.cloudsim.Vm);
}
Compiled from "NetworkPacket.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkPacket {
  org.cloudbus.cloudsim.network.datacenter.HostPacket pkt;
  int senderhostid;
  int recieverhostid;
  int sendervmid;
  int recievervmid;
  int cloudletid;
  double stime;
  double rtime;
  public org.cloudbus.cloudsim.network.datacenter.NetworkPacket(int, org.cloudbus.cloudsim.network.datacenter.HostPacket, int, int);
}
Compiled from "NetworkVm.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkVm extends org.cloudbus.cloudsim.Vm implements java.lang.Comparable<java.lang.Object> {
  public java.util.ArrayList<org.cloudbus.cloudsim.network.datacenter.NetworkCloudlet> cloudletlist;
  int type;
  public java.util.ArrayList<org.cloudbus.cloudsim.network.datacenter.HostPacket> recvPktlist;
  public double memory;
  public boolean flagfree;
  public double finishtime;
  public org.cloudbus.cloudsim.network.datacenter.NetworkVm(int, int, double, int, int, long, long, java.lang.String, org.cloudbus.cloudsim.CloudletScheduler);
  public boolean isFree();
  public int compareTo(java.lang.Object);
}
Compiled from "NetworkVmAllocationPolicy.java"
public class org.cloudbus.cloudsim.network.datacenter.NetworkVmAllocationPolicy extends org.cloudbus.cloudsim.VmAllocationPolicy {
  public org.cloudbus.cloudsim.network.datacenter.NetworkVmAllocationPolicy(java.util.List<? extends org.cloudbus.cloudsim.Host>);
  public boolean allocateHostForVm(org.cloudbus.cloudsim.Vm);
  protected double getMaxUtilizationAfterAllocation(org.cloudbus.cloudsim.network.datacenter.NetworkHost, org.cloudbus.cloudsim.Vm);
  public void deallocateHostForVm(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.Host getHost(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.Host getHost(int, int);
  public java.util.Map<java.lang.String, org.cloudbus.cloudsim.Host> getVmTable();
  protected void setVmTable(java.util.Map<java.lang.String, org.cloudbus.cloudsim.Host>);
  protected java.util.Map<java.lang.String, java.lang.Integer> getUsedPes();
  protected void setUsedPes(java.util.Map<java.lang.String, java.lang.Integer>);
  protected java.util.List<java.lang.Integer> getFreePes();
  protected void setFreePes(java.util.List<java.lang.Integer>);
  public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> optimizeAllocation(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
  public boolean allocateHostForVm(org.cloudbus.cloudsim.Vm, org.cloudbus.cloudsim.Host);
}
Compiled from "RootSwitch.java"
public class org.cloudbus.cloudsim.network.datacenter.RootSwitch extends org.cloudbus.cloudsim.network.datacenter.Switch {
  public org.cloudbus.cloudsim.network.datacenter.RootSwitch(java.lang.String, int, org.cloudbus.cloudsim.network.datacenter.NetworkDatacenter);
  protected void processpacket_up(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "Switch.java"
public class org.cloudbus.cloudsim.network.datacenter.Switch extends org.cloudbus.cloudsim.core.SimEntity {
  public int id;
  public int level;
  public int datacenterid;
  public java.util.Map<java.lang.Integer, java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkPacket>> uplinkswitchpktlist;
  public java.util.Map<java.lang.Integer, java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkPacket>> downlinkswitchpktlist;
  public java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.network.datacenter.NetworkHost> hostlist;
  public java.util.List<org.cloudbus.cloudsim.network.datacenter.Switch> uplinkswitches;
  public java.util.List<org.cloudbus.cloudsim.network.datacenter.Switch> downlinkswitches;
  public java.util.Map<java.lang.Integer, java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkPacket>> packetTohost;
  int type;
  public double uplinkbandwidth;
  public double downlinkbandwidth;
  public double latency;
  public double numport;
  public org.cloudbus.cloudsim.network.datacenter.NetworkDatacenter dc;
  public java.util.SortedMap<java.lang.Double, java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkHost>> fintimelistHost;
  public java.util.SortedMap<java.lang.Double, java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkVm>> fintimelistVM;
  public java.util.ArrayList<org.cloudbus.cloudsim.network.datacenter.NetworkPacket> pktlist;
  public java.util.List<org.cloudbus.cloudsim.Vm> BagofTaskVm;
  public double switching_delay;
  public java.util.Map<java.lang.Integer, org.cloudbus.cloudsim.network.datacenter.NetworkVm> Vmlist;
  public org.cloudbus.cloudsim.network.datacenter.Switch(java.lang.String, int, org.cloudbus.cloudsim.network.datacenter.NetworkDatacenter);
  public void startEntity();
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void processhostpacket(org.cloudbus.cloudsim.core.SimEvent);
  protected void processpacket_down(org.cloudbus.cloudsim.core.SimEvent);
  protected void processpacket_up(org.cloudbus.cloudsim.core.SimEvent);
  protected void processpacket(org.cloudbus.cloudsim.core.SimEvent);
  protected void processpacketforward(org.cloudbus.cloudsim.core.SimEvent);
  protected org.cloudbus.cloudsim.network.datacenter.NetworkHost getHostwithVM(int);
  protected java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkVm> getfreeVmlist(int);
  protected java.util.List<org.cloudbus.cloudsim.network.datacenter.NetworkHost> getfreehostlist(int);
  public void shutdownEntity();
}
Compiled from "TaskStage.java"
public class org.cloudbus.cloudsim.network.datacenter.TaskStage {
  int vpeer;
  int type;
  double data;
  double time;
  double stageid;
  long memory;
  int peer;
  public org.cloudbus.cloudsim.network.datacenter.TaskStage(int, double, double, double, long, int, int);
}
Compiled from "WorkflowApp.java"
public class org.cloudbus.cloudsim.network.datacenter.WorkflowApp extends org.cloudbus.cloudsim.network.datacenter.AppCloudlet {
  public org.cloudbus.cloudsim.network.datacenter.WorkflowApp(int, int, double, int, int);
  public void createCloudletList(java.util.List<java.lang.Integer>);
}
Compiled from "PowerDatacenter.java"
public class org.cloudbus.cloudsim.power.PowerDatacenter extends org.cloudbus.cloudsim.Datacenter {
  public org.cloudbus.cloudsim.power.PowerDatacenter(java.lang.String, org.cloudbus.cloudsim.DatacenterCharacteristics, org.cloudbus.cloudsim.VmAllocationPolicy, java.util.List<org.cloudbus.cloudsim.Storage>, double) throws java.lang.Exception;
  protected void updateCloudletProcessing();
  protected double updateCloudetProcessingWithoutSchedulingFutureEvents();
  protected double updateCloudetProcessingWithoutSchedulingFutureEventsForce();
  protected void processVmMigrate(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected void processCloudletSubmit(org.cloudbus.cloudsim.core.SimEvent, boolean);
  public double getPower();
  protected void setPower(double);
  protected boolean isInMigration();
  public boolean isDisableMigrations();
  public void setDisableMigrations(boolean);
  protected double getCloudletSubmitted();
  protected void setCloudletSubmitted(double);
  public int getMigrationCount();
  protected void setMigrationCount(int);
  protected void incrementMigrationCount();
}
Compiled from "PowerDatacenterBroker.java"
public class org.cloudbus.cloudsim.power.PowerDatacenterBroker extends org.cloudbus.cloudsim.DatacenterBroker {
  public org.cloudbus.cloudsim.power.PowerDatacenterBroker(java.lang.String) throws java.lang.Exception;
  public org.cloudbus.cloudsim.power.PowerDatacenterBroker(java.lang.String, org.cloudbus.cloudsim.core.EventPostBroker) throws java.lang.Exception;
  protected void processVmCreate(org.cloudbus.cloudsim.core.SimEvent);
}
Compiled from "PowerDatacenterNonPowerAware.java"
public class org.cloudbus.cloudsim.power.PowerDatacenterNonPowerAware extends org.cloudbus.cloudsim.power.PowerDatacenter {
  public org.cloudbus.cloudsim.power.PowerDatacenterNonPowerAware(java.lang.String, org.cloudbus.cloudsim.DatacenterCharacteristics, org.cloudbus.cloudsim.VmAllocationPolicy, java.util.List<org.cloudbus.cloudsim.Storage>, double) throws java.lang.Exception;
  protected void updateCloudletProcessing();
}
Compiled from "PowerHost.java"
public class org.cloudbus.cloudsim.power.PowerHost extends org.cloudbus.cloudsim.HostDynamicWorkload {
  public org.cloudbus.cloudsim.power.PowerHost(int, org.cloudbus.cloudsim.provisioners.RamProvisioner, org.cloudbus.cloudsim.provisioners.BwProvisioner, long, java.util.List<? extends org.cloudbus.cloudsim.Pe>, org.cloudbus.cloudsim.VmScheduler, org.cloudbus.cloudsim.power.models.PowerModel);
  public org.cloudbus.cloudsim.power.PowerHost(int, org.cloudbus.cloudsim.provisioners.RamProvisioner, org.cloudbus.cloudsim.provisioners.BwProvisioner, long, java.util.List<? extends org.cloudbus.cloudsim.Pe>, org.cloudbus.cloudsim.VmScheduler, org.cloudbus.cloudsim.power.models.PowerModel, boolean, boolean);
  public double getPower();
  protected double getPower(double);
  public double getMaxPower();
  public double getEnergyLinearInterpolation(double, double, double);
  public org.cloudbus.cloudsim.power.models.PowerModel getPowerModel();
  public double getPMax(int);
  public double getPMin(int);
}
Compiled from "PowerHostUtilizationHistory.java"
public class org.cloudbus.cloudsim.power.PowerHostUtilizationHistory extends org.cloudbus.cloudsim.power.PowerHost {
  public org.cloudbus.cloudsim.power.PowerHostUtilizationHistory(int, org.cloudbus.cloudsim.provisioners.RamProvisioner, org.cloudbus.cloudsim.provisioners.BwProvisioner, long, java.util.List<? extends org.cloudbus.cloudsim.Pe>, org.cloudbus.cloudsim.VmScheduler, org.cloudbus.cloudsim.power.models.PowerModel);
  protected double[] getUtilizationHistory();
}
Compiled from "PowerVm.java"
public class org.cloudbus.cloudsim.power.PowerVm extends org.cloudbus.cloudsim.Vm {
  public static final int HISTORY_LENGTH;
  public org.cloudbus.cloudsim.power.PowerVm(int, int, double, int, int, long, long, int, java.lang.String, org.cloudbus.cloudsim.CloudletScheduler, double);
  public double updateVmProcessing(double, java.util.List<java.lang.Double>);
  public double getUtilizationMad();
  public double getUtilizationMean();
  public double getUtilizationVariance();
  public void addUtilizationHistoryValue(double);
  protected java.util.List<java.lang.Double> getUtilizationHistory();
  public double getPreviousTime();
  public void setPreviousTime(double);
  public double getSchedulingInterval();
  protected void setSchedulingInterval(double);
}
Compiled from "PowerVmAllocationPolicyAbstract.java"
public abstract class org.cloudbus.cloudsim.power.PowerVmAllocationPolicyAbstract extends org.cloudbus.cloudsim.VmAllocationPolicy {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyAbstract(java.util.List<? extends org.cloudbus.cloudsim.Host>);
  public boolean allocateHostForVm(org.cloudbus.cloudsim.Vm, org.cloudbus.cloudsim.Host);
  public boolean allocateHostForVm(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.power.PowerHost findHostForVm(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.power.PowerHost TryDVFSEnableHost(org.cloudbus.cloudsim.power.PowerHost, org.cloudbus.cloudsim.Vm);
  public void deallocateHostForVm(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.Host getHost(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.Host getHost(int, int);
  public java.util.Map<java.lang.String, org.cloudbus.cloudsim.Host> getVmTable();
}
Compiled from "PowerVmAllocationPolicyDVFSDedicateNetworkDiskHost.java"
public class org.cloudbus.cloudsim.power.PowerVmAllocationPolicyDVFSDedicateNetworkDiskHost extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyAbstract {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyDVFSDedicateNetworkDiskHost(java.util.List<org.cloudbus.cloudsim.power.PowerHost>);
  public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> optimizeAllocation(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
  public org.cloudbus.cloudsim.power.PowerHost findHostForVm(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.power.PowerHost findNETHostforVm(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.power.PowerHost findDISKHostforVm(org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.power.PowerHost findCPUHostforVm(org.cloudbus.cloudsim.Vm);
}
Compiled from "PowerVmAllocationPolicyDVFSMinimumUsedHost.java"
public class org.cloudbus.cloudsim.power.PowerVmAllocationPolicyDVFSMinimumUsedHost extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyAbstract {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyDVFSMinimumUsedHost(java.util.List<? extends org.cloudbus.cloudsim.Host>);
  public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> optimizeAllocation(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
  public org.cloudbus.cloudsim.power.PowerHost findHostForVm(org.cloudbus.cloudsim.Vm);
}
Compiled from "PowerVmAllocationPolicyMigrationAbstract.java"
public abstract class org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyAbstract {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy);
  public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> optimizeAllocation(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
  protected java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getMigrationMapFromUnderUtilizedHosts(java.util.List<org.cloudbus.cloudsim.power.PowerHostUtilizationHistory>);
  protected void printOverUtilizedHosts(java.util.List<org.cloudbus.cloudsim.power.PowerHostUtilizationHistory>);
  public org.cloudbus.cloudsim.power.PowerHost findHostForVm(org.cloudbus.cloudsim.Vm, java.util.Set<? extends org.cloudbus.cloudsim.Host>);
  protected boolean isHostOverUtilizedAfterAllocation(org.cloudbus.cloudsim.power.PowerHost, org.cloudbus.cloudsim.Vm);
  public org.cloudbus.cloudsim.power.PowerHost findHostForVm(org.cloudbus.cloudsim.Vm);
  protected java.util.List<org.cloudbus.cloudsim.power.PowerHost> extractHostListFromMigrationMap(java.util.List<java.util.Map<java.lang.String, java.lang.Object>>);
  protected java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getNewVmPlacement(java.util.List<? extends org.cloudbus.cloudsim.Vm>, java.util.Set<? extends org.cloudbus.cloudsim.Host>);
  protected java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getNewVmPlacementFromUnderUtilizedHost(java.util.List<? extends org.cloudbus.cloudsim.Vm>, java.util.Set<? extends org.cloudbus.cloudsim.Host>);
  protected java.util.List<? extends org.cloudbus.cloudsim.Vm> getVmsToMigrateFromHosts(java.util.List<org.cloudbus.cloudsim.power.PowerHostUtilizationHistory>);
  protected java.util.List<? extends org.cloudbus.cloudsim.Vm> getVmsToMigrateFromUnderUtilizedHost(org.cloudbus.cloudsim.power.PowerHost);
  protected java.util.List<org.cloudbus.cloudsim.power.PowerHostUtilizationHistory> getOverUtilizedHosts();
  protected java.util.List<org.cloudbus.cloudsim.power.PowerHost> getSwitchedOffHosts();
  protected org.cloudbus.cloudsim.power.PowerHost getUnderUtilizedHost(java.util.Set<? extends org.cloudbus.cloudsim.Host>);
  protected boolean areAllVmsMigratingOutOrAnyVmMigratingIn(org.cloudbus.cloudsim.power.PowerHost);
  protected abstract boolean isHostOverUtilized(org.cloudbus.cloudsim.power.PowerHost);
  protected void addHistoryEntry(org.cloudbus.cloudsim.HostDynamicWorkload, double);
  protected void saveAllocation();
  protected void restoreAllocation();
  protected double getPowerAfterAllocation(org.cloudbus.cloudsim.power.PowerHost, org.cloudbus.cloudsim.Vm);
  protected double getMaxUtilizationAfterAllocation(org.cloudbus.cloudsim.power.PowerHost, org.cloudbus.cloudsim.Vm);
  protected java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getSavedAllocation();
  protected void setVmSelectionPolicy(org.cloudbus.cloudsim.power.PowerVmSelectionPolicy);
  protected org.cloudbus.cloudsim.power.PowerVmSelectionPolicy getVmSelectionPolicy();
  public java.util.Map<java.lang.Integer, java.util.List<java.lang.Double>> getUtilizationHistory();
  public java.util.Map<java.lang.Integer, java.util.List<java.lang.Double>> getMetricHistory();
  public java.util.Map<java.lang.Integer, java.util.List<java.lang.Double>> getTimeHistory();
  public java.util.List<java.lang.Double> getExecutionTimeHistoryVmSelection();
  public java.util.List<java.lang.Double> getExecutionTimeHistoryHostSelection();
  public java.util.List<java.lang.Double> getExecutionTimeHistoryVmReallocation();
  public java.util.List<java.lang.Double> getExecutionTimeHistoryTotal();
}
Compiled from "PowerVmAllocationPolicyMigrationInterQuartileRange.java"
public class org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationInterQuartileRange extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationInterQuartileRange(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy, double, org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract, double);
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationInterQuartileRange(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy, double, org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract);
  protected boolean isHostOverUtilized(org.cloudbus.cloudsim.power.PowerHost);
  protected double getHostUtilizationIqr(org.cloudbus.cloudsim.power.PowerHostUtilizationHistory) throws java.lang.IllegalArgumentException;
  protected void setSafetyParameter(double);
  protected double getSafetyParameter();
  public void setFallbackVmAllocationPolicy(org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract);
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract getFallbackVmAllocationPolicy();
}
Compiled from "PowerVmAllocationPolicyMigrationLocalRegression.java"
public class org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationLocalRegression extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationLocalRegression(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy, double, double, org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract, double);
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationLocalRegression(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy, double, double, org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract);
  protected boolean isHostOverUtilized(org.cloudbus.cloudsim.power.PowerHost);
  protected double[] getParameterEstimates(double[]);
  protected double getMaximumVmMigrationTime(org.cloudbus.cloudsim.power.PowerHost);
  protected void setSchedulingInterval(double);
  protected double getSchedulingInterval();
  public void setFallbackVmAllocationPolicy(org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract);
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract getFallbackVmAllocationPolicy();
  public double getSafetyParameter();
  public void setSafetyParameter(double);
}
Compiled from "PowerVmAllocationPolicyMigrationLocalRegressionRobust.java"
public class org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationLocalRegressionRobust extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationLocalRegression {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationLocalRegressionRobust(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy, double, double, org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract, double);
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationLocalRegressionRobust(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy, double, double, org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract);
  protected double[] getParameterEstimates(double[]);
}
Compiled from "PowerVmAllocationPolicyMigrationMedianAbsoluteDeviation.java"
public class org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationMedianAbsoluteDeviation extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationMedianAbsoluteDeviation(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy, double, org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract, double);
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationMedianAbsoluteDeviation(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy, double, org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract);
  protected boolean isHostOverUtilized(org.cloudbus.cloudsim.power.PowerHost);
  protected double getHostUtilizationMad(org.cloudbus.cloudsim.power.PowerHostUtilizationHistory) throws java.lang.IllegalArgumentException;
  protected void setSafetyParameter(double);
  protected double getSafetyParameter();
  public void setFallbackVmAllocationPolicy(org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract);
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract getFallbackVmAllocationPolicy();
}
Compiled from "PowerVmAllocationPolicyMigrationStaticThreshold.java"
public class org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationStaticThreshold extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationAbstract {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicyMigrationStaticThreshold(java.util.List<? extends org.cloudbus.cloudsim.Host>, org.cloudbus.cloudsim.power.PowerVmSelectionPolicy, double);
  protected boolean isHostOverUtilized(org.cloudbus.cloudsim.power.PowerHost);
  protected void setUtilizationThreshold(double);
  protected double getUtilizationThreshold();
}
Compiled from "PowerVmAllocationPolicySimple.java"
public class org.cloudbus.cloudsim.power.PowerVmAllocationPolicySimple extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyAbstract {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicySimple(java.util.List<? extends org.cloudbus.cloudsim.Host>);
  public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> optimizeAllocation(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
}
Compiled from "PowerVmAllocationPolicySimpleWattPerMipsMetric.java"
public class org.cloudbus.cloudsim.power.PowerVmAllocationPolicySimpleWattPerMipsMetric extends org.cloudbus.cloudsim.power.PowerVmAllocationPolicyAbstract {
  public org.cloudbus.cloudsim.power.PowerVmAllocationPolicySimpleWattPerMipsMetric(java.util.List<? extends org.cloudbus.cloudsim.Host>);
  public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> optimizeAllocation(java.util.List<? extends org.cloudbus.cloudsim.Vm>);
  public boolean allocateHostForVm(org.cloudbus.cloudsim.Vm);
}
Compiled from "PowerVmSelectionPolicy.java"
public abstract class org.cloudbus.cloudsim.power.PowerVmSelectionPolicy {
  public org.cloudbus.cloudsim.power.PowerVmSelectionPolicy();
  public abstract org.cloudbus.cloudsim.Vm getVmToMigrate(org.cloudbus.cloudsim.power.PowerHost);
  protected java.util.List<org.cloudbus.cloudsim.power.PowerVm> getMigratableVms(org.cloudbus.cloudsim.power.PowerHost);
}
Compiled from "PowerVmSelectionPolicyMaximumCorrelation.java"
public class org.cloudbus.cloudsim.power.PowerVmSelectionPolicyMaximumCorrelation extends org.cloudbus.cloudsim.power.PowerVmSelectionPolicy {
  public org.cloudbus.cloudsim.power.PowerVmSelectionPolicyMaximumCorrelation(org.cloudbus.cloudsim.power.PowerVmSelectionPolicy);
  public org.cloudbus.cloudsim.Vm getVmToMigrate(org.cloudbus.cloudsim.power.PowerHost);
  protected double[][] getUtilizationMatrix(java.util.List<org.cloudbus.cloudsim.power.PowerVm>);
  protected int getMinUtilizationHistorySize(java.util.List<org.cloudbus.cloudsim.power.PowerVm>);
  protected java.util.List<java.lang.Double> getCorrelationCoefficients(double[][]);
  public org.cloudbus.cloudsim.power.PowerVmSelectionPolicy getFallbackPolicy();
  public void setFallbackPolicy(org.cloudbus.cloudsim.power.PowerVmSelectionPolicy);
}
Compiled from "PowerVmSelectionPolicyMinimumMigrationTime.java"
public class org.cloudbus.cloudsim.power.PowerVmSelectionPolicyMinimumMigrationTime extends org.cloudbus.cloudsim.power.PowerVmSelectionPolicy {
  public org.cloudbus.cloudsim.power.PowerVmSelectionPolicyMinimumMigrationTime();
  public org.cloudbus.cloudsim.Vm getVmToMigrate(org.cloudbus.cloudsim.power.PowerHost);
}
Compiled from "PowerVmSelectionPolicyMinimumUtilization.java"
public class org.cloudbus.cloudsim.power.PowerVmSelectionPolicyMinimumUtilization extends org.cloudbus.cloudsim.power.PowerVmSelectionPolicy {
  public org.cloudbus.cloudsim.power.PowerVmSelectionPolicyMinimumUtilization();
  public org.cloudbus.cloudsim.Vm getVmToMigrate(org.cloudbus.cloudsim.power.PowerHost);
}
Compiled from "PowerVmSelectionPolicyRandomSelection.java"
public class org.cloudbus.cloudsim.power.PowerVmSelectionPolicyRandomSelection extends org.cloudbus.cloudsim.power.PowerVmSelectionPolicy {
  public org.cloudbus.cloudsim.power.PowerVmSelectionPolicyRandomSelection();
  public org.cloudbus.cloudsim.Vm getVmToMigrate(org.cloudbus.cloudsim.power.PowerHost);
}
Compiled from "AbstractGovernor.java"
public abstract class org.cloudbus.cloudsim.power.dvfs.AbstractGovernor {
  protected int defautIndexFreq;
  public org.cloudbus.cloudsim.power.dvfs.AbstractGovernor();
  public int SpecificDecision(double);
  protected int decision(double);
  protected void setDownThreshold(int);
  protected void setUpThreshold(int);
  protected void setName(java.lang.String);
  public java.lang.String getName();
  public int getDefautIndexFreq();
  public void setDefautIndexFreq(int);
}
Compiled from "ConservativeGovernor.java"
public class org.cloudbus.cloudsim.power.dvfs.ConservativeGovernor extends org.cloudbus.cloudsim.power.dvfs.AbstractGovernor {
  public org.cloudbus.cloudsim.power.dvfs.ConservativeGovernor(java.util.HashMap<java.lang.String, java.lang.Integer>);
  public int SpecificDecision(double);
  public boolean isEnable_freq_step();
}
Compiled from "OnDemandGovernor.java"
public class org.cloudbus.cloudsim.power.dvfs.OnDemandGovernor extends org.cloudbus.cloudsim.power.dvfs.AbstractGovernor {
  public org.cloudbus.cloudsim.power.dvfs.OnDemandGovernor(java.util.HashMap<java.lang.String, java.lang.Integer>);
  public int SpecificDecision(double);
}
Compiled from "PerformanceGovernor.java"
public class org.cloudbus.cloudsim.power.dvfs.PerformanceGovernor extends org.cloudbus.cloudsim.power.dvfs.AbstractGovernor {
  public org.cloudbus.cloudsim.power.dvfs.PerformanceGovernor();
  public void setDefautIndexFreq(int);
}
Compiled from "PowerSaveGovernor.java"
public class org.cloudbus.cloudsim.power.dvfs.PowerSaveGovernor extends org.cloudbus.cloudsim.power.dvfs.AbstractGovernor {
  public org.cloudbus.cloudsim.power.dvfs.PowerSaveGovernor();
}
Compiled from "UserSpaceGovernor.java"
public class org.cloudbus.cloudsim.power.dvfs.UserSpaceGovernor extends org.cloudbus.cloudsim.power.dvfs.AbstractGovernor {
  int userFreq;
  public org.cloudbus.cloudsim.power.dvfs.UserSpaceGovernor(java.util.HashMap<java.lang.String, java.lang.Integer>);
  public void setDefautIndexFreq(int);
}
Compiled from "PowerVmList.java"
public class org.cloudbus.cloudsim.power.lists.PowerVmList extends org.cloudbus.cloudsim.lists.VmList {
  public org.cloudbus.cloudsim.power.lists.PowerVmList();
  public static <T extends org.cloudbus.cloudsim.Vm> void sortByCpuUtilization(java.util.List<T>);
}
Compiled from "PowerVmList.java"
final class org.cloudbus.cloudsim.power.lists.PowerVmList$1 implements java.util.Comparator<T> {
  org.cloudbus.cloudsim.power.lists.PowerVmList$1();
  public int compare(T, T) throws java.lang.ClassCastException;
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "PowerModel.java"
public interface org.cloudbus.cloudsim.power.models.PowerModel {
  public abstract double getPower(double) throws java.lang.IllegalArgumentException;
}
Compiled from "PowerModelCubic.java"
public class org.cloudbus.cloudsim.power.models.PowerModelCubic implements org.cloudbus.cloudsim.power.models.PowerModel {
  public org.cloudbus.cloudsim.power.models.PowerModelCubic(double, double);
  public double getPower(double) throws java.lang.IllegalArgumentException;
  protected double getMaxPower();
  protected void setMaxPower(double);
  protected double getConstant();
  protected void setConstant(double);
  protected double getStaticPower();
  protected void setStaticPower(double);
}
Compiled from "PowerModelLinear.java"
public class org.cloudbus.cloudsim.power.models.PowerModelLinear implements org.cloudbus.cloudsim.power.models.PowerModel {
  public org.cloudbus.cloudsim.power.models.PowerModelLinear(double, double);
  public double getPower(double) throws java.lang.IllegalArgumentException;
  protected double getMaxPower();
  protected void setMaxPower(double);
  protected double getConstant();
  protected void setConstant(double);
  protected double getStaticPower();
  protected void setStaticPower(double);
}
Compiled from "PowerModelSpecPower.java"
public abstract class org.cloudbus.cloudsim.power.models.PowerModelSpecPower implements org.cloudbus.cloudsim.power.models.PowerModel {
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPower();
  public double getPower(double) throws java.lang.IllegalArgumentException;
  protected abstract double getPowerData(int);
}
Compiled from "PowerModelSpecPowerDVFS.java"
public abstract class org.cloudbus.cloudsim.power.models.PowerModelSpecPowerDVFS implements org.cloudbus.cloudsim.power.models.PowerModel {
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPowerDVFS();
  public double getPower(double) throws java.lang.IllegalArgumentException;
  public abstract double getPMin(int);
  public abstract double getPMax(int);
}
Compiled from "PowerModelSpecPowerHpProLiantMl110G3PentiumD930.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPowerHpProLiantMl110G3PentiumD930 extends org.cloudbus.cloudsim.power.models.PowerModelSpecPower {
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPowerHpProLiantMl110G3PentiumD930();
  protected double getPowerData(int);
}
Compiled from "PowerModelSpecPowerHpProLiantMl110G4Xeon3040.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPowerHpProLiantMl110G4Xeon3040 extends org.cloudbus.cloudsim.power.models.PowerModelSpecPower {
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPowerHpProLiantMl110G4Xeon3040();
  protected double getPowerData(int);
}
Compiled from "PowerModelSpecPowerHpProLiantMl110G5Xeon3075.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPowerHpProLiantMl110G5Xeon3075 extends org.cloudbus.cloudsim.power.models.PowerModelSpecPower {
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPowerHpProLiantMl110G5Xeon3075();
  protected double getPowerData(int);
}
Compiled from "PowerModelSpecPowerIbmX3250XeonX3470.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPowerIbmX3250XeonX3470 extends org.cloudbus.cloudsim.power.models.PowerModelSpecPower {
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPowerIbmX3250XeonX3470();
  protected double getPowerData(int);
}
Compiled from "PowerModelSpecPowerIbmX3250XeonX3480.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPowerIbmX3250XeonX3480 extends org.cloudbus.cloudsim.power.models.PowerModelSpecPower {
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPowerIbmX3250XeonX3480();
  protected double getPowerData(int);
}
Compiled from "PowerModelSpecPowerIbmX3550XeonX5670.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPowerIbmX3550XeonX5670 extends org.cloudbus.cloudsim.power.models.PowerModelSpecPower {
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPowerIbmX3550XeonX5670();
  protected double getPowerData(int);
}
Compiled from "PowerModelSpecPowerIbmX3550XeonX5675.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPowerIbmX3550XeonX5675 extends org.cloudbus.cloudsim.power.models.PowerModelSpecPower {
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPowerIbmX3550XeonX5675();
  protected double getPowerData(int);
}
Compiled from "PowerModelSpecPower_BAZAR.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPower_BAZAR extends org.cloudbus.cloudsim.power.models.PowerModelSpecPowerDVFS {
  double[] Tab_Power_idle;
  double[] Tab_Power_full;
  java.util.List<org.cloudbus.cloudsim.Pe> peList;
  org.cloudbus.cloudsim.Pe tmp_pe;
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPower_BAZAR(java.util.List<org.cloudbus.cloudsim.Pe>);
  public double getPower(double) throws java.lang.IllegalArgumentException;
  public double getPMin(int);
  public double getPMax(int);
}
Compiled from "PowerModelSpecPower_REIMS.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS extends org.cloudbus.cloudsim.power.models.PowerModelSpecPowerDVFS {
  double[] Tab_Power_idle;
  double[] Tab_Power_full;
  java.util.List<org.cloudbus.cloudsim.Pe> peList;
  org.cloudbus.cloudsim.Pe tmp_pe;
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS();
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS(java.util.List<org.cloudbus.cloudsim.Pe>);
  public double getPower(double) throws java.lang.IllegalArgumentException;
  public double getPMin(int);
  public double getPMax(int);
  public int getnbFreq();
}
Compiled from "PowerModelSpecPower_REIMS_Disk.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS_Disk extends org.cloudbus.cloudsim.power.models.PowerModelSpecPowerDVFS {
  double[] Tab_Power_idle;
  double[] Tab_Power_full;
  java.util.List<org.cloudbus.cloudsim.Pe> peList;
  org.cloudbus.cloudsim.Pe tmp_pe;
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS_Disk();
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS_Disk(java.util.List<org.cloudbus.cloudsim.Pe>);
  public double getPower(double) throws java.lang.IllegalArgumentException;
  public double getPMin(int);
  public double getPMax(int);
  public int getnbFreq();
}
Compiled from "PowerModelSpecPower_REIMS_Net.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS_Net extends org.cloudbus.cloudsim.power.models.PowerModelSpecPowerDVFS {
  double[] Tab_Power_idle;
  double[] Tab_Power_full;
  java.util.List<org.cloudbus.cloudsim.Pe> peList;
  org.cloudbus.cloudsim.Pe tmp_pe;
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS_Net();
  public org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS_Net(java.util.List<org.cloudbus.cloudsim.Pe>);
  public double getPower(double) throws java.lang.IllegalArgumentException;
  public double getPMin(int);
  public double getPMax(int);
  public int getnbFreq();
}
Compiled from "PowerModelSqrt.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSqrt implements org.cloudbus.cloudsim.power.models.PowerModel {
  public org.cloudbus.cloudsim.power.models.PowerModelSqrt(double, double);
  public double getPower(double) throws java.lang.IllegalArgumentException;
  protected double getMaxPower();
  protected void setMaxPower(double);
  protected double getConstant();
  protected void setConstant(double);
  protected double getStaticPower();
  protected void setStaticPower(double);
}
Compiled from "PowerModelSquare.java"
public class org.cloudbus.cloudsim.power.models.PowerModelSquare implements org.cloudbus.cloudsim.power.models.PowerModel {
  public org.cloudbus.cloudsim.power.models.PowerModelSquare(double, double);
  public double getPower(double) throws java.lang.IllegalArgumentException;
  protected double getMaxPower();
  protected void setMaxPower(double);
  protected double getConstant();
  protected void setConstant(double);
  protected double getStaticPower();
  protected void setStaticPower(double);
}
Compiled from "BwProvisioner.java"
public abstract class org.cloudbus.cloudsim.provisioners.BwProvisioner {
  public org.cloudbus.cloudsim.provisioners.BwProvisioner(long);
  public abstract boolean allocateBwForVm(org.cloudbus.cloudsim.Vm, long);
  public abstract long getAllocatedBwForVm(org.cloudbus.cloudsim.Vm);
  public abstract void deallocateBwForVm(org.cloudbus.cloudsim.Vm);
  public void deallocateBwForAllVms();
  public abstract boolean isSuitableForVm(org.cloudbus.cloudsim.Vm, long);
  public long getBw();
  protected void setBw(long);
  public long getAvailableBw();
  public long getUsedBw();
  protected void setAvailableBw(long);
}
Compiled from "BwProvisionerSimple.java"
public class org.cloudbus.cloudsim.provisioners.BwProvisionerSimple extends org.cloudbus.cloudsim.provisioners.BwProvisioner {
  public org.cloudbus.cloudsim.provisioners.BwProvisionerSimple(long);
  public boolean allocateBwForVm(org.cloudbus.cloudsim.Vm, long);
  public long getAllocatedBwForVm(org.cloudbus.cloudsim.Vm);
  public void deallocateBwForVm(org.cloudbus.cloudsim.Vm);
  public void deallocateBwForAllVms();
  public boolean isSuitableForVm(org.cloudbus.cloudsim.Vm, long);
  protected java.util.Map<java.lang.String, java.lang.Long> getBwTable();
  protected void setBwTable(java.util.Map<java.lang.String, java.lang.Long>);
}
Compiled from "PeProvisioner.java"
public abstract class org.cloudbus.cloudsim.provisioners.PeProvisioner {
  public org.cloudbus.cloudsim.provisioners.PeProvisioner(double);
  public abstract boolean allocateMipsForVm(org.cloudbus.cloudsim.Vm, double);
  public abstract boolean allocateMipsForVm(java.lang.String, double);
  public abstract boolean allocateMipsForVm(org.cloudbus.cloudsim.Vm, java.util.List<java.lang.Double>);
  public abstract java.util.List<java.lang.Double> getAllocatedMipsForVm(org.cloudbus.cloudsim.Vm);
  public abstract double getTotalAllocatedMipsForVm(org.cloudbus.cloudsim.Vm);
  public abstract double getAllocatedMipsForVmByVirtualPeId(org.cloudbus.cloudsim.Vm, int);
  public abstract void deallocateMipsForVm(org.cloudbus.cloudsim.Vm);
  public void deallocateMipsForAllVms();
  public double getMips();
  public void setMips(double);
  public double getAvailableMips();
  protected void setAvailableMips(double);
  public double getTotalAllocatedMips();
  public double getUtilization();
  public double getMaxMips();
  public void setMaxMips(double);
  public abstract void updateAvailableMips(double);
}
Compiled from "PeProvisionerSimple.java"
public class org.cloudbus.cloudsim.provisioners.PeProvisionerSimple extends org.cloudbus.cloudsim.provisioners.PeProvisioner {
  public org.cloudbus.cloudsim.provisioners.PeProvisionerSimple(double);
  public boolean allocateMipsForVm(org.cloudbus.cloudsim.Vm, double);
  public boolean allocateMipsForVm(java.lang.String, double);
  public boolean allocateMipsForVm(org.cloudbus.cloudsim.Vm, java.util.List<java.lang.Double>);
  public void deallocateMipsForAllVms();
  public double getAllocatedMipsForVmByVirtualPeId(org.cloudbus.cloudsim.Vm, int);
  public java.util.List<java.lang.Double> getAllocatedMipsForVm(org.cloudbus.cloudsim.Vm);
  public double getTotalAllocatedMipsForVm(org.cloudbus.cloudsim.Vm);
  public void deallocateMipsForVm(org.cloudbus.cloudsim.Vm);
  protected java.util.Map<java.lang.String, java.util.List<java.lang.Double>> getPeTable();
  protected void setPeTable(java.util.Map<java.lang.String, ? extends java.util.List<java.lang.Double>>);
  public void updateAvailableMips(double);
}
Compiled from "RamProvisioner.java"
public abstract class org.cloudbus.cloudsim.provisioners.RamProvisioner {
  public org.cloudbus.cloudsim.provisioners.RamProvisioner(int);
  public abstract boolean allocateRamForVm(org.cloudbus.cloudsim.Vm, int);
  public abstract int getAllocatedRamForVm(org.cloudbus.cloudsim.Vm);
  public abstract void deallocateRamForVm(org.cloudbus.cloudsim.Vm);
  public void deallocateRamForAllVms();
  public abstract boolean isSuitableForVm(org.cloudbus.cloudsim.Vm, int);
  public int getRam();
  protected void setRam(int);
  public int getUsedRam();
  public int getAvailableRam();
  protected void setAvailableRam(int);
}
Compiled from "RamProvisionerSimple.java"
public class org.cloudbus.cloudsim.provisioners.RamProvisionerSimple extends org.cloudbus.cloudsim.provisioners.RamProvisioner {
  public org.cloudbus.cloudsim.provisioners.RamProvisionerSimple(int);
  public boolean allocateRamForVm(org.cloudbus.cloudsim.Vm, int);
  public int getAllocatedRamForVm(org.cloudbus.cloudsim.Vm);
  public void deallocateRamForVm(org.cloudbus.cloudsim.Vm);
  public void deallocateRamForAllVms();
  public boolean isSuitableForVm(org.cloudbus.cloudsim.Vm, int);
  protected java.util.Map<java.lang.String, java.lang.Integer> getRamTable();
  protected void setRamTable(java.util.Map<java.lang.String, java.lang.Integer>);
}
Compiled from "ExecutionTimeMeasurer.java"
public class org.cloudbus.cloudsim.util.ExecutionTimeMeasurer {
  public org.cloudbus.cloudsim.util.ExecutionTimeMeasurer();
  public static void start(java.lang.String);
  public static double end(java.lang.String);
  public static java.util.Map<java.lang.String, java.lang.Long> getExecutionTimes();
  static {};
}
Compiled from "MathUtil.java"
public class org.cloudbus.cloudsim.util.MathUtil {
  public org.cloudbus.cloudsim.util.MathUtil();
  public static double sum(java.util.List<? extends java.lang.Number>);
  public static double[] listToArray(java.util.List<? extends java.lang.Number>);
  public static double median(java.util.List<java.lang.Double>);
  public static double mean(java.util.List<java.lang.Double>);
  public static double variance(java.util.List<java.lang.Double>);
  public static double stDev(java.util.List<java.lang.Double>);
  public static double mad(double[]);
  public static double iqr(double[]);
  public static int countNonZeroBeginning(double[]);
  public static int countShortestRow(double[][]);
  public static double[] trimZeroTail(double[]);
  public static double[] getLoessParameterEstimates(double[]);
  public static double[] getRobustLoessParameterEstimates(double[]);
  public static double[] getTricubeWeigts(int);
  public static double[] getTricubeBisquareWeigts(double[]);
  public static double[] abs(double[]);
}
Compiled from "WorkloadFileReader.java"
public class org.cloudbus.cloudsim.util.WorkloadFileReader implements org.cloudbus.cloudsim.util.WorkloadModel {
  public org.cloudbus.cloudsim.util.WorkloadFileReader(java.lang.String, int) throws java.io.FileNotFoundException;
  public java.util.ArrayList<org.cloudbus.cloudsim.Cloudlet> generateWorkload();
  public boolean setComment(java.lang.String);
  public boolean setField(int, int, int, int, int);
  public java.util.List generateWorkload();
}
Compiled from "WorkloadModel.java"
public interface org.cloudbus.cloudsim.util.WorkloadModel {
  public abstract java.util.List<org.cloudbus.cloudsim.Cloudlet> generateWorkload();
}
Compiled from "BaselinePolicy.java"
public class org.cloudbus.cloudsim.workflow.BaselinePolicy extends org.cloudbus.cloudsim.workflow.Policy {
  java.util.List<org.cloudbus.cloudsim.Vm> vmOffersList;
  java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> CP;
  int vmId;
  public org.cloudbus.cloudsim.workflow.BaselinePolicy();
  public void doScheduling(long, org.cloudbus.cloudsim.workflow.VMOffers);
  public java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> findCriticalPath();
  public org.cloudbus.cloudsim.workflow.Task analyseParent(org.cloudbus.cloudsim.workflow.Task);
  public void getCriticalPath();
}
Compiled from "Channel.java"
public class org.cloudbus.cloudsim.workflow.Channel {
  double bandwidth;
  java.util.LinkedList<org.cloudbus.cloudsim.workflow.Transmission> inTransmission;
  java.util.LinkedList<org.cloudbus.cloudsim.workflow.Transmission> completed;
  public org.cloudbus.cloudsim.workflow.Channel(double);
  public double updateTransmission(double);
  public double addTransmission(org.cloudbus.cloudsim.workflow.Transmission);
  public void removeTransmission(org.cloudbus.cloudsim.workflow.Transmission);
  public java.util.LinkedList<org.cloudbus.cloudsim.workflow.Transmission> getArrivedDataItems();
  public double getLastUpdateTime();
}
Compiled from "Configuration.java"
public final class org.cloudbus.cloudsim.workflow.Configuration extends java.lang.Enum<org.cloudbus.cloudsim.workflow.Configuration> {
  public static final org.cloudbus.cloudsim.workflow.Configuration INSTANCE;
  public static org.cloudbus.cloudsim.workflow.Configuration[] values();
  public static org.cloudbus.cloudsim.workflow.Configuration valueOf(java.lang.String);
  public java.lang.String getProperty(java.lang.String);
  public void setProperty(java.lang.String, java.lang.String);
  static {};
}
Compiled from "CostComparator.java"
public class org.cloudbus.cloudsim.workflow.CostComparator implements java.util.Comparator<org.cloudbus.cloudsim.workflow.ProvisionedVm> {
  public org.cloudbus.cloudsim.workflow.CostComparator();
  public int compare(org.cloudbus.cloudsim.workflow.ProvisionedVm, org.cloudbus.cloudsim.workflow.ProvisionedVm);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "DataItem.java"
public class org.cloudbus.cloudsim.workflow.DataItem {
  int ownerId;
  int id;
  java.lang.String name;
  long size;
  java.util.HashSet<java.lang.Integer> locations;
  public org.cloudbus.cloudsim.workflow.DataItem(int, int, java.lang.String, long);
  public int getId();
  public int getOwnerId();
  public java.lang.String getName();
  public long getSize();
  public void addLocation(int);
  public void removeLocation(int);
  public boolean isAvailableAt(int);
}
Compiled from "DvfsPolicy.java"
public class org.cloudbus.cloudsim.workflow.DvfsPolicy extends org.cloudbus.cloudsim.workflow.Policy {
  java.util.List<org.cloudbus.cloudsim.Vm> vmOffersList;
  org.cloudbus.cloudsim.workflow.OneCriticalPath TheCP;
  int vmId;
  public org.cloudbus.cloudsim.workflow.DvfsPolicy();
  public void doScheduling(long, org.cloudbus.cloudsim.workflow.VMOffers);
  public org.cloudbus.cloudsim.Vm findBestAvailableVm(org.cloudbus.cloudsim.workflow.Task);
  public org.cloudbus.cloudsim.workflow.OneCriticalPath findLongestCriticalPath();
  public java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> findLeefOfGraph();
  public org.cloudbus.cloudsim.workflow.OneCriticalPath computeOnePotentialCriticalPath(org.cloudbus.cloudsim.workflow.Task);
  public double computeTimeCP(java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task>, double);
  public org.cloudbus.cloudsim.workflow.Task longestParent(org.cloudbus.cloudsim.workflow.Task);
  public org.cloudbus.cloudsim.workflow.Task longestChild(org.cloudbus.cloudsim.workflow.Task);
}
Compiled from "DvfsPolicy_2.java"
public class org.cloudbus.cloudsim.workflow.DvfsPolicy_2 extends org.cloudbus.cloudsim.workflow.Policy {
  java.util.List<org.cloudbus.cloudsim.Vm> vmOffersList;
  org.cloudbus.cloudsim.workflow.OneCriticalPath TheCP;
  int vmId;
  java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> optimzedTasks;
  public org.cloudbus.cloudsim.workflow.DvfsPolicy_2();
  public void doScheduling(long, org.cloudbus.cloudsim.workflow.VMOffers);
  public boolean allTaskDefined();
  public java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> OptimizeGraph(org.cloudbus.cloudsim.workflow.VMOffers);
  public org.cloudbus.cloudsim.Vm findBestAvailableVm(org.cloudbus.cloudsim.workflow.Task);
  public org.cloudbus.cloudsim.workflow.OneCriticalPath findLongestCriticalPath();
  public java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> findStartTaskOfGraph();
  public java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> findLeefOfGraph();
  public org.cloudbus.cloudsim.workflow.OneCriticalPath computeOnePotentialCriticalPath(org.cloudbus.cloudsim.workflow.Task);
  public double computeTimeCP(java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task>, double);
}
Compiled from "OffersComparator.java"
public class org.cloudbus.cloudsim.workflow.OffersComparator implements java.util.Comparator<java.util.Map$Entry<org.cloudbus.cloudsim.Vm, java.lang.Integer>> {
  public org.cloudbus.cloudsim.workflow.OffersComparator();
  public int compare(java.util.Map$Entry<org.cloudbus.cloudsim.Vm, java.lang.Integer>, java.util.Map$Entry<org.cloudbus.cloudsim.Vm, java.lang.Integer>);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "OneCriticalPath.java"
public class org.cloudbus.cloudsim.workflow.OneCriticalPath {
  public org.cloudbus.cloudsim.workflow.OneCriticalPath(java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task>, double);
  public java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> getTasks();
  public double getTime();
}
Compiled from "Policy.java"
public abstract class org.cloudbus.cloudsim.workflow.Policy extends org.xml.sax.helpers.DefaultHandler {
  protected int ownerId;
  protected org.cloudbus.cloudsim.workflow.VMOffers vmOffers;
  protected boolean optimizeScheduling;
  protected java.lang.String modedvfs;
  java.util.ArrayList<org.cloudbus.cloudsim.workflow.DataItem> originalDataItems;
  java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> entryTasks;
  java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> exitTasks;
  java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task> tasks;
  java.util.Hashtable<java.lang.Integer, java.util.HashSet<java.lang.Integer>> dataRequiredLocation;
  java.util.Hashtable<java.lang.Integer, java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task>> schedulingTable;
  java.util.ArrayList<org.cloudbus.cloudsim.workflow.ProvisionedVm> provisioningInfo;
  static org.cloudbus.cloudsim.workflow.Task currentTask;
  static int taskCont;
  static int dataItemCont;
  static java.util.Hashtable<java.lang.String, org.cloudbus.cloudsim.workflow.Task> taskMap;
  static java.util.Hashtable<java.lang.String, org.cloudbus.cloudsim.workflow.DataItem> dataItems;
  java.util.ArrayList<org.cloudbus.cloudsim.workflow.DataItem> generatedDataItems;
  public abstract void doScheduling(long, org.cloudbus.cloudsim.workflow.VMOffers);
  public org.cloudbus.cloudsim.workflow.Policy();
  public void processDagFile(java.lang.String, int, long, long, org.cloudbus.cloudsim.workflow.VMOffers);
  public java.util.Hashtable<java.lang.Integer, java.util.HashSet<java.lang.Integer>> getDataRequiredLocation();
  public java.util.Hashtable<java.lang.Integer, java.util.ArrayList<org.cloudbus.cloudsim.workflow.Task>> getScheduling();
  public java.util.ArrayList<org.cloudbus.cloudsim.workflow.ProvisionedVm> getProvisioning();
  public void printScheduling(long);
  public void startDocument();
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes);
  public void endDocument();
}
Compiled from "Properties.java"
public final class org.cloudbus.cloudsim.workflow.Properties extends java.lang.Enum<org.cloudbus.cloudsim.workflow.Properties> {
  public static final org.cloudbus.cloudsim.workflow.Properties EXPERIMENT_ROUNDS;
  public static final org.cloudbus.cloudsim.workflow.Properties HOSTS_PERDATACENTER;
  public static final org.cloudbus.cloudsim.workflow.Properties VM_DELAY;
  public static final org.cloudbus.cloudsim.workflow.Properties VM_OFFERS;
  public static final org.cloudbus.cloudsim.workflow.Properties CORES_PERHOST;
  public static final org.cloudbus.cloudsim.workflow.Properties MEMORY_PERHOST;
  public static final org.cloudbus.cloudsim.workflow.Properties STORAGE_PERHOST;
  public static final org.cloudbus.cloudsim.workflow.Properties MIPS_PERCORE;
  public static final org.cloudbus.cloudsim.workflow.Properties NETWORK_LATENCY;
  public static final org.cloudbus.cloudsim.workflow.Properties INTERNAL_LATENCY;
  public static final org.cloudbus.cloudsim.workflow.Properties INTERNAL_BANDWIDTH;
  public static final org.cloudbus.cloudsim.workflow.Properties SCHEDULING_POLICY;
  public static final org.cloudbus.cloudsim.workflow.Properties DAG_FILE;
  public static final org.cloudbus.cloudsim.workflow.Properties DAG_DEADLINE;
  public static final org.cloudbus.cloudsim.workflow.Properties OPTIMIZE;
  public static final org.cloudbus.cloudsim.workflow.Properties MODEDVFS;
  public static final org.cloudbus.cloudsim.workflow.Properties POOLING;
  public static org.cloudbus.cloudsim.workflow.Properties[] values();
  public static org.cloudbus.cloudsim.workflow.Properties valueOf(java.lang.String);
  public java.lang.String getKey();
  public java.lang.String getProperty();
  public void setProperty(java.lang.String);
  static {};
}
Compiled from "ProvisionedVm.java"
public class org.cloudbus.cloudsim.workflow.ProvisionedVm {
  org.cloudbus.cloudsim.Vm vm;
  long startTime;
  long endTime;
  int cost;
  public org.cloudbus.cloudsim.workflow.ProvisionedVm(org.cloudbus.cloudsim.Vm, long, long, int);
  public org.cloudbus.cloudsim.Vm getVm();
  public long getStartTime();
  public void setStartTime(long);
  public long getEndTime();
  public void setEndTime(long);
  public int getCost();
}
Compiled from "SeedGenerator.java"
public class org.cloudbus.cloudsim.workflow.SeedGenerator {
  static long[] seed;
  public org.cloudbus.cloudsim.workflow.SeedGenerator();
  public static long getSeed(int);
  static {};
}
Compiled from "Simulation.java"
public class org.cloudbus.cloudsim.workflow.Simulation {
  public org.cloudbus.cloudsim.workflow.Simulation();
  public static void main(java.lang.String[]);
}
Compiled from "SlotComparator.java"
public class org.cloudbus.cloudsim.workflow.SlotComparator implements java.util.Comparator<org.cloudbus.cloudsim.workflow.TimeSlot> {
  public org.cloudbus.cloudsim.workflow.SlotComparator();
  public int compare(org.cloudbus.cloudsim.workflow.TimeSlot, org.cloudbus.cloudsim.workflow.TimeSlot);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "Task.java"
public class org.cloudbus.cloudsim.workflow.Task {
  org.cloudbus.cloudsim.Cloudlet cloudlet;
  java.util.List<org.cloudbus.cloudsim.workflow.Task> parents;
  java.util.List<org.cloudbus.cloudsim.workflow.Task> replicas;
  java.util.List<org.cloudbus.cloudsim.workflow.Task> children;
  java.util.List<org.cloudbus.cloudsim.workflow.DataItem> dataDependencies;
  java.util.List<org.cloudbus.cloudsim.workflow.DataItem> output;
  java.util.HashSet<org.cloudbus.cloudsim.workflow.Task> antecessors;
  java.util.HashSet<org.cloudbus.cloudsim.workflow.Task> successors;
  boolean critical;
  double earliestStart;
  double latestEnd;
  double slackTime;
  double ratioSlackExec;
  int optIndexFreq;
  double optExecTime;
  double BasicExecTime;
  boolean defined;
  public org.cloudbus.cloudsim.workflow.Task(org.cloudbus.cloudsim.Cloudlet, int, double);
  public void computeEarlieststart();
  public void computeLatestEnd(double);
  public void computeSlackTime();
  public org.cloudbus.cloudsim.workflow.Task longestParent();
  public org.cloudbus.cloudsim.workflow.Task longestChild();
  public int getId();
  public void addParent(org.cloudbus.cloudsim.workflow.Task);
  public java.util.List<org.cloudbus.cloudsim.workflow.Task> getParents();
  public void addChild(org.cloudbus.cloudsim.workflow.Task);
  public java.util.List<org.cloudbus.cloudsim.workflow.Task> getChildren();
  public java.util.HashSet<org.cloudbus.cloudsim.workflow.Task> getAntecessors();
  public void addAntecessors(java.util.HashSet<org.cloudbus.cloudsim.workflow.Task>);
  public void addAntecessors(org.cloudbus.cloudsim.workflow.Task);
  public java.util.HashSet<org.cloudbus.cloudsim.workflow.Task> getSuccessors();
  public void addSuccessors(java.util.HashSet<org.cloudbus.cloudsim.workflow.Task>);
  public void addSuccessors(org.cloudbus.cloudsim.workflow.Task);
  public void addDataDependency(org.cloudbus.cloudsim.workflow.DataItem);
  public java.util.List<org.cloudbus.cloudsim.workflow.DataItem> getDataDependencies();
  public org.cloudbus.cloudsim.Cloudlet getCloudlet();
  public void addOutput(org.cloudbus.cloudsim.workflow.DataItem);
  public java.util.List<org.cloudbus.cloudsim.workflow.DataItem> getOutput();
  public void setVmId(int);
  public int getVmId();
  public boolean isReady();
  public boolean hasReplicas();
  public void addReplica(org.cloudbus.cloudsim.workflow.Task);
  public java.util.List<org.cloudbus.cloudsim.workflow.Task> getReplicas();
  public void hasFinished();
  public boolean isFinished();
  public double getExecTime();
  public boolean isCritical();
  public void setCritical(boolean);
  public double getEarliestStart();
  public void setEarliestStart(double);
  public double getLatestEnd();
  public void setLatestEnd(double);
  public double getSlackTime();
  public void setSlackTime(double);
  public double getOptExecTime();
  public void setOptExecTime(double);
  public boolean isDefined();
  public void setDefined(boolean);
  public double getRatioSlackExec();
  public int getOptIndexFreq();
  public void setOptIndexFreq(int);
  public double getBasicExecTime();
}
Compiled from "TestEstimationEnergy.java"
public class org.cloudbus.cloudsim.workflow.TestEstimationEnergy {
  org.cloudbus.cloudsim.power.models.PowerModelSpecPower_REIMS model;
  boolean pooling;
  public org.cloudbus.cloudsim.workflow.TestEstimationEnergy();
  public double getTaskEnergyConsumed(org.cloudbus.cloudsim.workflow.Task, double, boolean, java.lang.String);
  public boolean isPooling();
}
Compiled from "TestPolicy.java"
public class org.cloudbus.cloudsim.workflow.TestPolicy extends org.cloudbus.cloudsim.workflow.Policy {
  public org.cloudbus.cloudsim.workflow.TestPolicy();
  public static void main(java.lang.String[]);
  public void doScheduling(long, org.cloudbus.cloudsim.workflow.VMOffers);
  static {};
}
Compiled from "TimeSlot.java"
public class org.cloudbus.cloudsim.workflow.TimeSlot {
  org.cloudbus.cloudsim.Vm vm;
  long startTime;
  long endTime;
  boolean alreadyPaid;
  public org.cloudbus.cloudsim.workflow.TimeSlot(org.cloudbus.cloudsim.Vm, long, long, boolean);
  public org.cloudbus.cloudsim.Vm getVm();
  public long getStartTime();
  public void setStartTime(long);
  public long getEndTime();
  public void setEndTime(long);
  public void setAlreadyPaid(boolean);
  public boolean isAlreadyPaid();
}
Compiled from "TransferDataEvent.java"
public class org.cloudbus.cloudsim.workflow.TransferDataEvent {
  org.cloudbus.cloudsim.workflow.DataItem dataItem;
  int sourceId;
  int destinationId;
  public org.cloudbus.cloudsim.workflow.TransferDataEvent(org.cloudbus.cloudsim.workflow.DataItem, int, int);
  public org.cloudbus.cloudsim.workflow.DataItem getDataItem();
  public int getSourceId();
  public int getDestinationId();
}
Compiled from "Transmission.java"
public class org.cloudbus.cloudsim.workflow.Transmission {
  int sourceId;
  int destinationId;
  long totalLength;
  double leftLength;
  org.cloudbus.cloudsim.workflow.DataItem data;
  public org.cloudbus.cloudsim.workflow.Transmission(org.cloudbus.cloudsim.workflow.DataItem, int, int);
  public void addCompletedLength(double);
  public int getSourceId();
  public int getDestinationId();
  public org.cloudbus.cloudsim.workflow.DataItem getDataItem();
  public double getLength();
  public boolean isCompleted();
}
Compiled from "VMOffers.java"
public abstract class org.cloudbus.cloudsim.workflow.VMOffers {
  java.util.Hashtable<org.cloudbus.cloudsim.Vm, java.lang.Integer> vmOffersTable;
  public abstract java.util.Hashtable<org.cloudbus.cloudsim.Vm, java.lang.Integer> getVmOffers();
  public abstract int getCost(double, int, long);
  public abstract long getTimeSlot();
  public abstract double valuePerf(int);
  public abstract long getBootTime();
  public org.cloudbus.cloudsim.workflow.VMOffers();
}
Compiled from "VmOffersSimple.java"
public class org.cloudbus.cloudsim.workflow.VmOffersSimple extends org.cloudbus.cloudsim.workflow.VMOffers {
  int baseMem;
  int baseCost;
  long baseStorage;
  double[] perf;
  public org.cloudbus.cloudsim.workflow.VmOffersSimple();
  public java.util.Hashtable<org.cloudbus.cloudsim.Vm, java.lang.Integer> getVmOffers();
  public int getCost(double, int, long);
  public long getTimeSlot();
  public long getBootTime();
  public double valuePerf(int);
}
Compiled from "WorkflowEngine.java"
class org.cloudbus.cloudsim.workflow.WETransmission {
  org.cloudbus.cloudsim.workflow.Task task;
  int originId;
  int destId;
  int dataId;
  public org.cloudbus.cloudsim.workflow.WETransmission(org.cloudbus.cloudsim.workflow.Task, int, int, int);
  public org.cloudbus.cloudsim.workflow.Task getTask();
  public int getOriginId();
  public int getDestId();
  public int getDataId();
  public boolean equals(java.lang.Object);
  public int hashCode();
}
Compiled from "WorkflowDatacenter.java"
public class org.cloudbus.cloudsim.workflow.WorkflowDatacenter extends org.cloudbus.cloudsim.Datacenter {
  public static final int UPDATE_NETWORK;
  public static final int TRANSFER_DATA_ITEM;
  public static final int DATA_ITEM_AVAILABLE;
  public static final long BILLING_INTERVAL;
  protected static final double QUANTUM;
  java.util.Hashtable<java.lang.Integer, org.cloudbus.cloudsim.Vm> vmTable;
  java.util.Hashtable<java.lang.Long, org.cloudbus.cloudsim.workflow.Channel> vmChannelTable;
  java.util.Hashtable<org.cloudbus.cloudsim.Vm, java.lang.Long> vmCreationTime;
  java.util.Hashtable<org.cloudbus.cloudsim.Vm, java.lang.Long> vmPrice;
  java.util.Random random;
  long basicCpuUnit;
  double bandwidth;
  double latency;
  double cohostedLatency;
  long averageCreationDelay;
  long budget;
  org.cloudbus.cloudsim.workflow.VMOffers vmOffers;
  public org.cloudbus.cloudsim.workflow.WorkflowDatacenter(java.lang.String, org.cloudbus.cloudsim.DatacenterCharacteristics, org.cloudbus.cloudsim.VmAllocationPolicy, double, double, int, long, org.cloudbus.cloudsim.workflow.VMOffers, long) throws java.lang.Exception;
  protected void processOtherEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void processVmCreate(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected void processVmDestroy(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected void processCloudletSubmit(org.cloudbus.cloudsim.core.SimEvent, boolean);
  protected void updateCloudletProcessing();
  public void printSummary();
}
Compiled from "WorkflowEngine.java"
public class org.cloudbus.cloudsim.workflow.WorkflowEngine extends org.cloudbus.cloudsim.core.SimEntity {
  public org.cloudbus.cloudsim.workflow.WorkflowEngine(java.lang.String, long, long, org.cloudbus.cloudsim.workflow.Policy, org.cloudbus.cloudsim.workflow.VMOffers);
  public void processEvent(org.cloudbus.cloudsim.core.SimEvent);
  protected void doProvisioning();
  protected void processVmCreate(org.cloudbus.cloudsim.core.SimEvent);
  protected void processCloudletReturn(org.cloudbus.cloudsim.core.SimEvent);
  public void shutdownEntity();
  public void startEntity();
  protected <T extends org.cloudbus.cloudsim.Cloudlet> void setCloudletReceivedList(java.util.List<T>);
  public <T extends org.cloudbus.cloudsim.Cloudlet> java.util.List<T> getCloudletReceivedList();
  public void printExecutionSummary();
  public boolean hasPendingTransmissions(int);
  public void computeEnergy();
}
Compiled from "CloudletDatas.java"
public class org.cloudbus.cloudsim.xml.CloudletDatas {
  public org.cloudbus.cloudsim.xml.CloudletDatas();
  public int getFilesize();
  public void setFilesize(int);
  public int getLength();
  public void setLength(int);
  public int getOutputsize();
  public void setOutputsize(int);
  public int getPes();
  public void setPes(int);
}
Compiled from "DatacenterDatas.java"
public class org.cloudbus.cloudsim.xml.DatacenterDatas {
  java.util.ArrayList<org.cloudbus.cloudsim.xml.HostDatas> vect_hosts;
  java.lang.String arch;
  java.lang.String os;
  java.lang.String vmm;
  double timezone;
  double cost;
  double costPerMem;
  double costPerStorage;
  double costPerbW;
  public org.cloudbus.cloudsim.xml.DatacenterDatas();
  public java.lang.String getArch();
  public void setArch(java.lang.String);
  public double getCost();
  public void setCost(double);
  public double getCostPerMem();
  public void setCostPerMem(double);
  public double getCostPerStorage();
  public void setCostPerStorage(double);
  public java.lang.String getOs();
  public void setOs(java.lang.String);
  public double getTimezone();
  public void setTimezone(double);
  public java.lang.String getVmm();
  public void setVmm(java.lang.String);
  public double getCostPerbW();
  public void setCostPerbW(double);
  public void addHost(org.cloudbus.cloudsim.xml.HostDatas);
  public org.cloudbus.cloudsim.xml.HostDatas getHost(int);
  public java.util.ArrayList<org.cloudbus.cloudsim.xml.HostDatas> getArrayListHosts();
}
Compiled from "DvfsDatas.java"
public class org.cloudbus.cloudsim.xml.DvfsDatas {
  public org.cloudbus.cloudsim.xml.DvfsDatas();
  public java.util.HashMap<java.lang.String, java.lang.Integer> getHashMapConservative();
  public void setHashMapConservative(java.util.HashMap<java.lang.String, java.lang.Integer>);
  public java.util.HashMap<java.lang.String, java.lang.Integer> getHashMapOnDemand();
  public void setHashMapOnDemand(java.util.HashMap<java.lang.String, java.lang.Integer>);
  public java.util.HashMap<java.lang.String, java.lang.Integer> getHashMapUserSpace();
  public void setHashMapUserSpace(java.util.HashMap<java.lang.String, java.lang.Integer>);
}
Compiled from "HostDatas.java"
public class org.cloudbus.cloudsim.xml.HostDatas {
  public org.cloudbus.cloudsim.xml.HostDatas();
  public org.cloudbus.cloudsim.xml.DvfsDatas getDvfsDatas();
  public void setDvfsDatas(org.cloudbus.cloudsim.xml.DvfsDatas);
  public void setCpuFrequencies(java.util.ArrayList<java.lang.Double>);
  public java.util.ArrayList<java.lang.Double> getCpuFrequencies();
  public boolean isOnoffEnable();
  public void setOnoffEnable(boolean);
  public boolean isDvfsEnable();
  public void setDvfsEnable(boolean);
  public java.util.HashMap<java.lang.Integer, java.lang.String> getHTGovs();
  public void putHtGovKeys(int, java.lang.String);
  public java.lang.String getHtGovValue(int);
  public int getBw();
  public void setBw(int);
  public int getCpus();
  public void setCpus(int);
  public int getMaxP();
  public void setMaxP(int);
  public int getMips();
  public void setMips(int);
  public int getRam();
  public void setRam(int);
  public double getStaticPP();
  public void setStaticPP(double);
  public int getStorage();
  public void setStorage(int);
}
Compiled from "SimulationXMLParse.java"
public class org.cloudbus.cloudsim.xml.SimulationXMLParse {
  java.util.ArrayList<org.cloudbus.cloudsim.xml.DatacenterDatas> vect_dcs;
  java.util.ArrayList<org.cloudbus.cloudsim.xml.VmDatas> vect_vms;
  java.util.ArrayList<org.cloudbus.cloudsim.xml.CloudletDatas> vect_cls;
  org.jdom.Document document;
  org.jdom.Element Root;
  java.util.List listRoot;
  public org.cloudbus.cloudsim.xml.SimulationXMLParse(java.lang.String);
  public org.cloudbus.cloudsim.xml.HostDatas HOSTS_Parse(org.jdom.Element);
  public java.util.ArrayList<java.lang.Double> CPUFrequencies_PARSE(org.jdom.Element);
  public org.cloudbus.cloudsim.xml.DvfsDatas DVFSModes_PARSE(org.jdom.Element);
  public void PrintList(java.util.List, java.lang.String);
  public void ReturnError(java.lang.String);
  public java.util.ArrayList<org.cloudbus.cloudsim.xml.CloudletDatas> getArrayListCLS();
  public java.util.ArrayList<org.cloudbus.cloudsim.xml.DatacenterDatas> getArrayListDCS();
  public java.util.ArrayList<org.cloudbus.cloudsim.xml.VmDatas> getArrayListVMS();
  public static void main(java.lang.String[]);
}
Compiled from "VmDatas.java"
public class org.cloudbus.cloudsim.xml.VmDatas {
  int mips;
  int cpu;
  int ram;
  int bw;
  int size;
  java.lang.String vmm;
  public org.cloudbus.cloudsim.xml.VmDatas();
  public int getBw();
  public void setBw(int);
  public int getCpu();
  public void setCpu(int);
  public int getMips();
  public void setMips(int);
  public int getRam();
  public void setRam(int);
  public int getSize();
  public void setSize(int);
  public java.lang.String getVmm();
  public void setVmm(java.lang.String);
}
