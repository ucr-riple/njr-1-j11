Compiled from "Contact.java"
public class Contact {
  public Contact(int, java.lang.String);
  public long getTimestamp();
  public void setTimestamp(long);
  public java.lang.String getIp();
  public void setIp(java.lang.String);
  public int getId();
}
Compiled from "Controller.java"
public final class Controller implements java.lang.Runnable {
  static final boolean $assertionsDisabled;
  public Controller(java.util.concurrent.BlockingQueue, java.util.concurrent.BlockingQueue);
  public void run();
  public void sendJoin(java.net.InetSocketAddress, int, int);
  public void leaveNetwork(long);
  public void sendIndex(java.lang.String, java.lang.String[]);
  public java.util.Vector<SearchResponse> sendSearch(java.lang.String[]);
  static java.util.Map access$100(Controller);
  static int access$200(Controller);
  static Indexer access$300(Controller);
  static java.util.Vector access$400(Controller);
  static Contact access$500(Controller, int);
  static java.net.DatagramPacket access$600(Controller, org.json.simple.JSONObject, java.net.InetSocketAddress);
  static java.util.concurrent.BlockingQueue access$700(Controller);
  static Controller$Waiter access$800(Controller);
  static java.util.concurrent.BlockingQueue access$900(Controller);
  static org.json.simple.JSONObject access$1000(Controller, Contact);
  static java.util.Map access$1100(Controller);
  static {};
}
Compiled from "Controller.java"
class Controller$1 extends java.util.TimerTask {
  final Contact val$contact;
  final Controller this$0;
  Controller$1(Controller, Contact);
  public void run();
}
Compiled from "Controller.java"
class Controller$2 extends java.lang.Thread {
  final java.lang.String[] val$words;
  final Controller this$0;
  Controller$2(Controller, java.lang.String[]);
  public void run();
}
Compiled from "Controller.java"
class Controller$3 {
  static final int[] $SwitchMap$MessageType;
  static {};
}
Compiled from "Controller.java"
class Controller$RefreshRoutingTable extends java.util.TimerTask {
  final Controller this$0;
  public void run();
  Controller$RefreshRoutingTable(Controller, Controller$1);
}
Compiled from "Controller.java"
class Controller$Waiter {
  java.util.Map<java.lang.String, java.util.Timer> wordTimers;
  final Controller this$0;
  public boolean transactionFinalized();
  public Controller$Waiter(Controller);
  public void stopWait(java.lang.String);
  public void startWait(java.lang.String, int);
}
Compiled from "Controller.java"
class Controller$Waiter$1 extends java.util.TimerTask {
  final int val$targetHash;
  final Controller$Waiter this$1;
  Controller$Waiter$1(Controller$Waiter, int);
  public void run();
}
Compiled from "Controller.java"
class Controller$Waiter$1$1 extends java.util.TimerTask {
  final Controller$Waiter$1 this$2;
  Controller$Waiter$1$1(Controller$Waiter$1);
  public void run();
}
Compiled from "Indexer.java"
public class Indexer {
  public Indexer();
  public void index(SearchResponse);
  public SearchResponse getSearchResponse(java.lang.String);
}
Compiled from "Main.java"
public class Main {
  public Main();
  public static void main(java.lang.String[]);
}
Compiled from "MessageType.java"
public final class MessageType extends java.lang.Enum<MessageType> {
  public static final MessageType PING;
  public static final MessageType ACK;
  public static final MessageType ACK_INDEX;
  public static final MessageType LEAVING_NETWORK;
  public static final MessageType SEARCH;
  public static final MessageType SEARCH_RESPONSE;
  public static final MessageType INDEX;
  public static final MessageType ROUTING_INFO;
  public static final MessageType JOINING_NETWORK_RELAY_SIMPLIFIED;
  public static final MessageType JOINING_NETWORK_SIMPLIFIED;
  public static final MessageType REFRESH_ROUTING_TABLE;
  public static MessageType[] values();
  public static MessageType valueOf(java.lang.String);
  static {};
}
Compiled from "NetworkProperties.java"
public class NetworkProperties {
  public static final int MTU;
  public static final int nPort;
  public static java.lang.String nAddress;
  public static int refreshTime;
  public static int staleTime;
  public static int responseWait;
  public static int pingWait;
  public NetworkProperties();
  public static int hashCode(java.lang.String);
  static {};
}
Compiled from "Node.java"
public class Node implements PeerSearchSimplified {
  public Node();
  public void init(java.net.DatagramSocket);
  public long joinNetwork(java.net.InetSocketAddress, java.lang.String, java.lang.String);
  public boolean leaveNetwork(long);
  public void indexPage(java.lang.String, java.lang.String[]);
  public SearchResult[] search(java.lang.String[]);
}
Compiled from "Node.java"
class Node$ResultPart implements java.lang.Comparable<Node$ResultPart> {
  java.lang.String word;
  java.lang.String url;
  int rank;
  final Node this$0;
  Node$ResultPart(Node, java.lang.String, java.lang.String, int);
  public int compareTo(Node$ResultPart);
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
}
Compiled from "PeerSearchSimplified.java"
interface PeerSearchSimplified {
  public abstract void init(java.net.DatagramSocket);
  public abstract long joinNetwork(java.net.InetSocketAddress, java.lang.String, java.lang.String);
  public abstract boolean leaveNetwork(long);
  public abstract void indexPage(java.lang.String, java.lang.String[]);
  public abstract SearchResult[] search(java.lang.String[]);
}
Compiled from "Receiver.java"
public class Receiver implements java.lang.Runnable {
  public Receiver(java.net.DatagramSocket, java.util.concurrent.BlockingQueue);
  public void run();
}
Compiled from "SearchResponse.java"
public class SearchResponse {
  java.lang.String word;
  java.util.ArrayList<Url> urls;
  public SearchResponse();
  public static SearchResponse fromResponseJson(org.json.simple.JSONObject);
  public static SearchResponse fromIndexJson(org.json.simple.JSONObject);
  public org.json.simple.JSONObject toJson();
}
Compiled from "SearchResult.java"
class SearchResult {
  java.lang.String[] words;
  java.lang.String url;
  long frequency;
  SearchResult();
}
Compiled from "Sender.java"
public class Sender implements java.lang.Runnable {
  java.net.DatagramPacket message;
  java.util.concurrent.BlockingQueue sendQueue;
  public Sender(java.util.concurrent.BlockingQueue);
  public void run();
}
Compiled from "Url.java"
public class Url implements java.lang.Comparable<Url> {
  public java.lang.String url;
  public int rank;
  public Url(java.lang.String, int);
  public int compareTo(Url);
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
}
