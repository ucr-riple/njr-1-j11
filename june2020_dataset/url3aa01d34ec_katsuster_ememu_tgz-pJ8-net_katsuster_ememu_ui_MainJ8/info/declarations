Compiled from "AACI.java"
public class net.katsuster.ememu.arm.AACI implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_AACIRXCR1;
  public static final int REG_AACITXCR1;
  public static final int REG_AACISR1;
  public static final int REG_AACIISR1;
  public static final int REG_AACIIE1;
  public static final int REG_AACIRXCR2;
  public static final int REG_AACITXCR2;
  public static final int REG_AACISR2;
  public static final int REG_AACIISR2;
  public static final int REG_AACIIE2;
  public static final int REG_AACIRXCR3;
  public static final int REG_AACITXCR3;
  public static final int REG_AACISR3;
  public static final int REG_AACIISR3;
  public static final int REG_AACIIE3;
  public static final int REG_AACIRXCR4;
  public static final int REG_AACITXCR4;
  public static final int REG_AACISR4;
  public static final int REG_AACIISR4;
  public static final int REG_AACIIE4;
  public static final int REG_AACISL1RX;
  public static final int REG_AACISL1TX;
  public static final int REG_AACISL2RX;
  public static final int REG_AACISL2TX;
  public static final int REG_AACISL12RX;
  public static final int REG_AACISL12TX;
  public static final int REG_AACISLFR;
  public static final int REG_AACISLISTAT;
  public static final int REG_AACISLIEN;
  public static final int REG_AACIINTCLR;
  public static final int REG_AACIMAINCR;
  public static final int REG_AACIRESET;
  public static final int REG_AACISYNC;
  public static final int REG_AACIALLINTS;
  public static final int REG_AACIMAINFR;
  public static final int REG_AACIPERIPHID0;
  public static final int REG_AACIPERIPHID1;
  public static final int REG_AACIPERIPHID2;
  public static final int REG_AACIPERIPHID3;
  public static final int REG_AACIPCELLID0;
  public static final int REG_AACIPCELLID1;
  public static final int REG_AACIPCELLID2;
  public static final int REG_AACIPCELLID3;
  public net.katsuster.ememu.arm.AACI();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "AACI.java"
class net.katsuster.ememu.arm.AACI$AACISlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.AACI this$0;
  public net.katsuster.ememu.arm.AACI$AACISlave(net.katsuster.ememu.arm.AACI);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "DMAC.java"
public class net.katsuster.ememu.arm.DMAC implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_DMACIntStatus;
  public static final int REG_DMACIntTCStatus;
  public static final int REG_DMACIntTCClear;
  public static final int REG_DMACIntErrorStatus;
  public static final int REG_DMACIntErrClr;
  public static final int REG_DMACRawIntTCStatus;
  public static final int REG_DMACRawIntErrorStatus;
  public static final int REG_DMACEnbldChns;
  public static final int REG_DMACSoftBReq;
  public static final int REG_DMACSoftSReq;
  public static final int REG_DMACSoftLBReq;
  public static final int REG_DMACSoftLSReq;
  public static final int REG_DMACConfiguration;
  public static final int REG_DMACSync;
  public static final int REG_DMACC0SrcAddr;
  public static final int REG_DMACC0DestAddr;
  public static final int REG_DMACC0LLI;
  public static final int REG_DMACC0Control;
  public static final int REG_DMACC0Configuration;
  public static final int REG_DMACC1SrcAddr;
  public static final int REG_DMACC1DestAddr;
  public static final int REG_DMACC1LLI;
  public static final int REG_DMACC1Control;
  public static final int REG_DMACC1Configuration;
  public static final int REG_DMACC2SrcAddr;
  public static final int REG_DMACC2DestAddr;
  public static final int REG_DMACC2LLI;
  public static final int REG_DMACC2Control;
  public static final int REG_DMACC2Configuration;
  public static final int REG_DMACC3SrcAddr;
  public static final int REG_DMACC3DestAddr;
  public static final int REG_DMACC3LLI;
  public static final int REG_DMACC3Control;
  public static final int REG_DMACC3Configuration;
  public static final int REG_DMACC4SrcAddr;
  public static final int REG_DMACC4DestAddr;
  public static final int REG_DMACC4LLI;
  public static final int REG_DMACC4Control;
  public static final int REG_DMACC4Configuration;
  public static final int REG_DMACC5SrcAddr;
  public static final int REG_DMACC5DestAddr;
  public static final int REG_DMACC5LLI;
  public static final int REG_DMACC5Control;
  public static final int REG_DMACC5Configuration;
  public static final int REG_DMACC6SrcAddr;
  public static final int REG_DMACC6DestAddr;
  public static final int REG_DMACC6LLI;
  public static final int REG_DMACC6Control;
  public static final int REG_DMACC6Configuration;
  public static final int REG_DMACC7SrcAddr;
  public static final int REG_DMACC7DestAddr;
  public static final int REG_DMACC7LLI;
  public static final int REG_DMACC7Control;
  public static final int REG_DMACC7Configuration;
  public static final int REG_DMACITCR;
  public static final int REG_DMACITOP1;
  public static final int REG_DMACITOP2;
  public static final int REG_DMACITOP3;
  public static final int REG_DMACPeriphID0;
  public static final int REG_DMACPeriphID1;
  public static final int REG_DMACPeriphID2;
  public static final int REG_DMACPeriphID3;
  public static final int REG_DMACPCellID0;
  public static final int REG_DMACPCellID1;
  public static final int REG_DMACPCellID2;
  public static final int REG_DMACPCellID3;
  public net.katsuster.ememu.arm.DMAC();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "DMAC.java"
class net.katsuster.ememu.arm.DMAC$DMACSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.DMAC this$0;
  public net.katsuster.ememu.arm.DMAC$DMACSlave(net.katsuster.ememu.arm.DMAC);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "DualTimer.java"
public class net.katsuster.ememu.arm.DualTimer implements net.katsuster.ememu.generic.INTSource,net.katsuster.ememu.generic.BusSlave {
  public static final int REG_Timer1Load;
  public static final int REG_Timer1Value;
  public static final int REG_Timer1Control;
  public static final int REG_Timer1IntClr;
  public static final int REG_Timer1RIS;
  public static final int REG_Timer1MIS;
  public static final int REG_Timer1BGLoad;
  public static final int REG_Timer2Load;
  public static final int REG_Timer2Value;
  public static final int REG_Timer2Control;
  public static final int REG_Timer2IntClr;
  public static final int REG_Timer2RIS;
  public static final int REG_Timer2MIS;
  public static final int REG_Timer2BGLoad;
  public static final int REG_TimerITCR;
  public static final int REG_TimerITOP;
  public static final int REG_TimerPeriphID0;
  public static final int REG_TimerPeriphID1;
  public static final int REG_TimerPeriphID2;
  public static final int REG_TimerPeriphID3;
  public static final int REG_TimerPCellID0;
  public static final int REG_TimerPCellID1;
  public static final int REG_TimerPCellID2;
  public static final int REG_TimerPCellID3;
  public net.katsuster.ememu.arm.DualTimer();
  public net.katsuster.ememu.arm.DualTimer(int);
  public net.katsuster.ememu.generic.INTDestination getINTDestination();
  public void connectINTDestination(net.katsuster.ememu.generic.INTDestination);
  public void disconnectINTDestination();
  public boolean isAssert();
  public java.lang.String getIRQMessage();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
  static boolean[] access$000(net.katsuster.ememu.arm.DualTimer);
  static boolean[] access$100(net.katsuster.ememu.arm.DualTimer);
  static int[] access$200(net.katsuster.ememu.arm.DualTimer);
  static int[] access$300(net.katsuster.ememu.arm.DualTimer);
  static boolean[] access$400(net.katsuster.ememu.arm.DualTimer);
  static boolean[] access$500(net.katsuster.ememu.arm.DualTimer);
  static int[] access$600(net.katsuster.ememu.arm.DualTimer);
  static int[] access$700(net.katsuster.ememu.arm.DualTimer);
  static int[] access$800(net.katsuster.ememu.arm.DualTimer);
  static int access$900(net.katsuster.ememu.arm.DualTimer);
  static net.katsuster.ememu.generic.INTDestination access$1000(net.katsuster.ememu.arm.DualTimer);
}
Compiled from "DualTimer.java"
class net.katsuster.ememu.arm.DualTimer$DualTimerSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.DualTimer this$0;
  public net.katsuster.ememu.arm.DualTimer$DualTimerSlave(net.katsuster.ememu.arm.DualTimer);
  public void updateControl(int, long, int);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "GPIO.java"
public class net.katsuster.ememu.arm.GPIO implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_GPIODIR;
  public static final int REG_GPIOIS;
  public static final int REG_GPIOIBE;
  public static final int REG_GPIOIEV;
  public static final int REG_GPIOIE;
  public static final int REG_GPIORIS;
  public static final int REG_GPIOMIS;
  public static final int REG_GPIOIC;
  public static final int REG_GPIOAFSEL;
  public static final int REG_GPIOPeriphID0;
  public static final int REG_GPIOPeriphID1;
  public static final int REG_GPIOPeriphID2;
  public static final int REG_GPIOPeriphID3;
  public static final int REG_GPIOPCellID0;
  public static final int REG_GPIOPCellID1;
  public static final int REG_GPIOPCellID2;
  public static final int REG_GPIOPCellID3;
  public net.katsuster.ememu.arm.GPIO();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "GPIO.java"
class net.katsuster.ememu.arm.GPIO$GPIOSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.GPIO this$0;
  public net.katsuster.ememu.arm.GPIO$GPIOSlave(net.katsuster.ememu.arm.GPIO);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "KMI.java"
public class net.katsuster.ememu.arm.KMI implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_KMICR;
  public static final int REG_KMISTAT;
  public static final int REG_KMIDATA;
  public static final int REG_KMICLKDIV;
  public static final int REG_KMIIR;
  public static final int REG_KMITCR;
  public static final int REG_KMITMR;
  public static final int REG_KMITISR;
  public static final int REG_KMITOCR;
  public static final int REG_KMISTG1;
  public static final int REG_KMISTG2;
  public static final int REG_KMISTG3;
  public static final int REG_KMISTATE;
  public static final int REG_KMIPeriphID0;
  public static final int REG_KMIPeriphID1;
  public static final int REG_KMIPeriphID2;
  public static final int REG_KMIPeriphID3;
  public static final int REG_KMIPCellID0;
  public static final int REG_KMIPCellID1;
  public static final int REG_KMIPCellID2;
  public static final int REG_KMIPCellID3;
  public net.katsuster.ememu.arm.KMI();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "KMI.java"
class net.katsuster.ememu.arm.KMI$KMISlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.KMI this$0;
  public net.katsuster.ememu.arm.KMI$KMISlave(net.katsuster.ememu.arm.KMI);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "LCDC.java"
public class net.katsuster.ememu.arm.LCDC implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_LCDTiming0;
  public static final int REG_LCDTiming1;
  public static final int REG_LCDTiming2;
  public static final int REG_LCDTiming3;
  public static final int REG_LCDUPBASE;
  public static final int REG_LCDLPBASE;
  public static final int REG_LCDINTRENABLE;
  public static final int REG_LCDControl;
  public static final int REG_LCDStatus;
  public static final int REG_LCDInterrupt;
  public static final int REG_LCDUPCURR;
  public static final int REG_LCDLPCURR;
  public static final int REG_CLCDPERIPHID0;
  public static final int REG_CLCDPERIPHID1;
  public static final int REG_CLCDPERIPHID2;
  public static final int REG_CLCDPERIPHID3;
  public static final int REG_CLCDPCELLID0;
  public static final int REG_CLCDPCELLID1;
  public static final int REG_CLCDPCELLID2;
  public static final int REG_CLCDPCELLID3;
  public net.katsuster.ememu.arm.LCDC();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "LCDC.java"
class net.katsuster.ememu.arm.LCDC$LCDCSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.LCDC this$0;
  public net.katsuster.ememu.arm.LCDC$LCDCSlave(net.katsuster.ememu.arm.LCDC);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "MMCI.java"
public class net.katsuster.ememu.arm.MMCI implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_MCIPower;
  public static final int REG_MCIClock;
  public static final int REG_MCIArgument;
  public static final int REG_MMCCommand;
  public static final int REG_MCIRepCmd;
  public static final int REG_MCIResponse0;
  public static final int REG_MCIResponse1;
  public static final int REG_MCIResponse2;
  public static final int REG_MCIResponse3;
  public static final int REG_MCIDataTimer;
  public static final int REG_MCIDataLength;
  public static final int REG_MCIDataCtrl;
  public static final int REG_MCIDataCnt;
  public static final int REG_MCIStatus;
  public static final int REG_MCIClear;
  public static final int REG_MCIMask0;
  public static final int REG_MCIMask1;
  public static final int REG_MCISelect;
  public static final int REG_MCIFifoCnt;
  public static final int REG_MCIPeriphID0;
  public static final int REG_MCIPeriphID1;
  public static final int REG_MCIPeriphID2;
  public static final int REG_MCIPeriphID3;
  public static final int REG_MCIPCellID0;
  public static final int REG_MCIPCellID1;
  public static final int REG_MCIPCellID2;
  public static final int REG_MCIPCellID3;
  public net.katsuster.ememu.arm.MMCI();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "MMCI.java"
class net.katsuster.ememu.arm.MMCI$MMCISlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.MMCI this$0;
  public net.katsuster.ememu.arm.MMCI$MMCISlave(net.katsuster.ememu.arm.MMCI);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "MPMC.java"
public class net.katsuster.ememu.arm.MPMC implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_MPMCControl;
  public static final int REG_MPMCStatus;
  public static final int REG_MPMCConfig;
  public static final int REG_MPMCDynamicControl;
  public static final int REG_MPMCDynamicRefresh;
  public static final int REG_MPMCDynamicReadConfig;
  public static final int REG_MPMCDynamictRP;
  public static final int REG_MPMCDynamictRAS;
  public static final int REG_MPMCDynamictSREX;
  public static final int REG_MPMCDynamictWR;
  public static final int REG_MPMCDynamictRC;
  public static final int REG_MPMCDynamictRFC;
  public static final int REG_MPMCDynamictXSR;
  public static final int REG_MPMCDynamictRRD;
  public static final int REG_MPMCDynamictMRD;
  public static final int REG_MPMCDynamictCDLR;
  public static final int REG_MPMCStaticExtendedWait;
  public static final int REG_MPMCDynamicConfig0;
  public static final int REG_MPMCDynamicRasCas0;
  public static final int REG_MPMCDynamicConfig1;
  public static final int REG_MPMCDynamicRasCas1;
  public static final int REG_MPMCDynamicConfig2;
  public static final int REG_MPMCDynamicRasCas2;
  public static final int REG_MPMCDynamicConfig3;
  public static final int REG_MPMCDynamicRasCas3;
  public static final int REG_MPMCStaticConfig0;
  public static final int REG_MPMCStaticWaitWen0;
  public static final int REG_MPMCStaticWaitOen0;
  public static final int REG_MPMCStaticWaitRd0;
  public static final int REG_MPMCStaticWaitPage0;
  public static final int REG_MPMCStaticWaitWr0;
  public static final int REG_MPMCStaticWaitTurn0;
  public static final int REG_MPMCStaticConfig1;
  public static final int REG_MPMCStaticWaitWen1;
  public static final int REG_MPMCStaticWaitOen1;
  public static final int REG_MPMCStaticWaitRd1;
  public static final int REG_MPMCStaticWaitPage1;
  public static final int REG_MPMCStaticWaitWr1;
  public static final int REG_MPMCStaticWaitTurn1;
  public static final int REG_MPMCStaticConfig2;
  public static final int REG_MPMCStaticWaitWen2;
  public static final int REG_MPMCStaticWaitOen2;
  public static final int REG_MPMCStaticWaitRd2;
  public static final int REG_MPMCStaticWaitPage2;
  public static final int REG_MPMCStaticWaitWr2;
  public static final int REG_MPMCStaticWaitTurn2;
  public static final int REG_MPMCStaticConfig3;
  public static final int REG_MPMCStaticWaitWen3;
  public static final int REG_MPMCStaticWaitOen3;
  public static final int REG_MPMCStaticWaitRd3;
  public static final int REG_MPMCStaticWaitPage3;
  public static final int REG_MPMCStaticWaitWr3;
  public static final int REG_MPMCStaticWaitTurn3;
  public static final int REG_MPMCAHBControl0;
  public static final int REG_MPMCAHBStatus0;
  public static final int REG_MPMCAHBTimeOut0;
  public static final int REG_MPMCAHBControl1;
  public static final int REG_MPMCAHBStatus1;
  public static final int REG_MPMCAHBTimeOut1;
  public static final int REG_MPMCAHBControl2;
  public static final int REG_MPMCAHBStatus2;
  public static final int REG_MPMCAHBTimeOut2;
  public static final int REG_MPMCAHBControl3;
  public static final int REG_MPMCAHBStatus3;
  public static final int REG_MPMCAHBTimeOut3;
  public static final int REG_MPMCAHBControl4;
  public static final int REG_MPMCAHBStatus4;
  public static final int REG_MPMCAHBTimeOut4;
  public static final int REG_MPMCITCR;
  public static final int REG_MPMCITIP0;
  public static final int REG_MPMCITIP1;
  public static final int REG_MPMCITOP;
  public static final int REG_MPMCPeriphID4;
  public static final int REG_MPMCPeriphID5;
  public static final int REG_MPMCPeriphID6;
  public static final int REG_MPMCPeriphID7;
  public static final int REG_MPMCPeriphID0;
  public static final int REG_MPMCPeriphID1;
  public static final int REG_MPMCPeriphID2;
  public static final int REG_MPMCPeriphID3;
  public static final int REG_MPMCPCellID0;
  public static final int REG_MPMCPCellID1;
  public static final int REG_MPMCPCellID2;
  public static final int REG_MPMCPCellID3;
  public net.katsuster.ememu.arm.MPMC();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "MPMC.java"
class net.katsuster.ememu.arm.MPMC$MPMCSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.MPMC this$0;
  public net.katsuster.ememu.arm.MPMC$MPMCSlave(net.katsuster.ememu.arm.MPMC);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "PrimaryINTC.java"
public class net.katsuster.ememu.arm.PrimaryINTC extends net.katsuster.ememu.generic.Controller32 implements net.katsuster.ememu.generic.INTDestination {
  public static final int MAX_INTSRCS;
  public static final int REG_VICIRQSTATUS;
  public static final int REG_VICFIQSTATUS;
  public static final int REG_VICRAWINTR;
  public static final int REG_VICINTSELECT;
  public static final int REG_VICINTENABLE;
  public static final int REG_VICINTENCLEAR;
  public static final int REG_VICSOFTINT;
  public static final int REG_VICSOFTINTCLEAR;
  public static final int REG_VICPROTECTION;
  public static final int REG_VICVECTADDR;
  public static final int REG_VICDEFVECTADDR;
  public static final int REG_VICVECTADDR0;
  public static final int REG_VICVECTADDR1;
  public static final int REG_VICVECTADDR2;
  public static final int REG_VICVECTADDR3;
  public static final int REG_VICVECTADDR4;
  public static final int REG_VICVECTADDR5;
  public static final int REG_VICVECTADDR6;
  public static final int REG_VICVECTADDR7;
  public static final int REG_VICVECTADDR8;
  public static final int REG_VICVECTADDR9;
  public static final int REG_VICVECTADDR10;
  public static final int REG_VICVECTADDR11;
  public static final int REG_VICVECTADDR12;
  public static final int REG_VICVECTADDR13;
  public static final int REG_VICVECTADDR14;
  public static final int REG_VICVECTADDR15;
  public static final int REG_VICVECTCNTL0;
  public static final int REG_VICVECTCNTL1;
  public static final int REG_VICVECTCNTL2;
  public static final int REG_VICVECTCNTL3;
  public static final int REG_VICVECTCNTL4;
  public static final int REG_VICVECTCNTL5;
  public static final int REG_VICVECTCNTL6;
  public static final int REG_VICVECTCNTL7;
  public static final int REG_VICVECTCNTL8;
  public static final int REG_VICVECTCNTL9;
  public static final int REG_VICVECTCNTL10;
  public static final int REG_VICVECTCNTL11;
  public static final int REG_VICVECTCNTL12;
  public static final int REG_VICVECTCNTL13;
  public static final int REG_VICVECTCNTL14;
  public static final int REG_VICVECTCNTL15;
  public static final int REG_VICITCR;
  public static final int REG_VICITIP1;
  public static final int REG_VICITIP2;
  public static final int REG_VICITOP1;
  public static final int REG_VICITOP2;
  public static final int REG_VICPERIPHID0;
  public static final int REG_VICPERIPHID1;
  public static final int REG_VICPERIPHID2;
  public static final int REG_VICPERIPHID3;
  public static final int REG_VICPCELLID0;
  public static final int REG_VICPCELLID1;
  public static final int REG_VICPCELLID2;
  public static final int REG_VICPCELLID3;
  public net.katsuster.ememu.arm.PrimaryINTC();
  public void connectINTSource(int, net.katsuster.ememu.generic.INTSource);
  public void disconnectINTSource(int);
  public int getIRQStatus();
  public int getFIQStatus();
  public int getRawHardInt();
  public int readWord(long);
  public void writeWord(long, int);
  public net.katsuster.ememu.generic.INTSource getIRQSource();
  public net.katsuster.ememu.generic.INTSource getFIQSource();
  public boolean isRaisedInterrupt();
  public void setRaisedInterrupt(boolean);
  public void run();
}
Compiled from "PrimaryINTC.java"
public class net.katsuster.ememu.arm.PrimaryINTC$INTSourceFIQ implements net.katsuster.ememu.generic.INTSource,net.katsuster.ememu.generic.INTDestination {
  final net.katsuster.ememu.arm.PrimaryINTC this$0;
  public net.katsuster.ememu.arm.PrimaryINTC$INTSourceFIQ(net.katsuster.ememu.arm.PrimaryINTC, net.katsuster.ememu.arm.PrimaryINTC);
  public net.katsuster.ememu.generic.INTDestination getINTDestination();
  public void connectINTDestination(net.katsuster.ememu.generic.INTDestination);
  public void disconnectINTDestination();
  public boolean isAssert();
  public java.lang.String getIRQMessage();
  public boolean isRaisedInterrupt();
  public void setRaisedInterrupt(boolean);
}
Compiled from "PrimaryINTC.java"
public class net.katsuster.ememu.arm.PrimaryINTC$INTSourceIRQ implements net.katsuster.ememu.generic.INTSource,net.katsuster.ememu.generic.INTDestination {
  final net.katsuster.ememu.arm.PrimaryINTC this$0;
  public net.katsuster.ememu.arm.PrimaryINTC$INTSourceIRQ(net.katsuster.ememu.arm.PrimaryINTC, net.katsuster.ememu.arm.PrimaryINTC);
  public net.katsuster.ememu.generic.INTDestination getINTDestination();
  public void connectINTDestination(net.katsuster.ememu.generic.INTDestination);
  public void disconnectINTDestination();
  public boolean isAssert();
  public java.lang.String getIRQMessage();
  public boolean isRaisedInterrupt();
  public void setRaisedInterrupt(boolean);
}
Compiled from "RTC.java"
public class net.katsuster.ememu.arm.RTC implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_RTCDR;
  public static final int REG_RTCMR;
  public static final int REG_RTCLR;
  public static final int REG_RTCCR;
  public static final int REG_RTCIMSC;
  public static final int REG_RTCRIS;
  public static final int REG_RTCMIS;
  public static final int REG_RTCICR;
  public static final int REG_RTCPeriphID0;
  public static final int REG_RTCPeriphID1;
  public static final int REG_RTCPeriphID2;
  public static final int REG_RTCPeriphID3;
  public static final int REG_RTCPCellID0;
  public static final int REG_RTCPCellID1;
  public static final int REG_RTCPCellID2;
  public static final int REG_RTCPCellID3;
  public net.katsuster.ememu.arm.RTC();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "RTC.java"
class net.katsuster.ememu.arm.RTC$RTCSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.RTC this$0;
  public net.katsuster.ememu.arm.RTC$RTCSlave(net.katsuster.ememu.arm.RTC);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "SCard.java"
public class net.katsuster.ememu.arm.SCard implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_SCIDATA;
  public static final int REG_SCICR0;
  public static final int REG_SCICR1;
  public static final int REG_SCICR2;
  public static final int REG_SCICLKICC;
  public static final int REG_SCIVALUE;
  public static final int REG_SCIBAUDE;
  public static final int REG_SCITIDE;
  public static final int REG_SCIDMACR;
  public static final int REG_SCISTABLE;
  public static final int REG_SCIATIME;
  public static final int REG_SCIDTIME;
  public static final int REG_SCIATRSTIME;
  public static final int REG_SCIATRDTIME;
  public static final int REG_SCISTOPTIME;
  public static final int REG_SCISTARTTIME;
  public static final int REG_SCIRETRY;
  public static final int REG_SCICHTIMELS;
  public static final int REG_SCICHTIMEMS;
  public static final int REG_SCIBLKTIMELS;
  public static final int REG_SCIBLKTIMEMS;
  public static final int REG_SCICHGUARD;
  public static final int REG_SCIBLKGUARD;
  public static final int REG_SCIRXTIME;
  public static final int REG_SCIFIFOSTATUS;
  public static final int REG_SCITXCOUNT;
  public static final int REG_SCIRXCOUNT;
  public static final int REG_SCIIMSC;
  public static final int REG_SCIRIS;
  public static final int REG_SCIMIS;
  public static final int REG_SCIICR;
  public static final int REG_SCISYNCACT;
  public static final int REG_SCISYNCTX;
  public static final int REG_SCISYNCRX;
  public static final int REG_SCIPeriphID0;
  public static final int REG_SCIPeriphID1;
  public static final int REG_SCIPeriphID2;
  public static final int REG_SCIPeriphID3;
  public static final int REG_SCIPCellID0;
  public static final int REG_SCIPCellID1;
  public static final int REG_SCIPCellID2;
  public static final int REG_SCIPCellID3;
  public net.katsuster.ememu.arm.SCard();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "SCard.java"
class net.katsuster.ememu.arm.SCard$SCardSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.SCard this$0;
  public net.katsuster.ememu.arm.SCard$SCardSlave(net.katsuster.ememu.arm.SCard);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "SSMC.java"
public class net.katsuster.ememu.arm.SSMC implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_SMBIDCYR0;
  public static final int REG_SMBWSTRDR0;
  public static final int REG_SMBWSTWRR0;
  public static final int REG_SMBWSTOENR0;
  public static final int REG_SMBWSTWENR0;
  public static final int REG_SMBCR0;
  public static final int REG_SMBSR0;
  public static final int REG_SMBWSTBRDR0;
  public static final int REG_SMBIDCYR1;
  public static final int REG_SMBWSTRDR1;
  public static final int REG_SMBWSTWRR1;
  public static final int REG_SMBWSTOENR1;
  public static final int REG_SMBWSTWENR1;
  public static final int REG_SMBCR1;
  public static final int REG_SMBSR1;
  public static final int REG_SMBWSTBRDR1;
  public static final int REG_SMBIDCYR2;
  public static final int REG_SMBWSTRDR2;
  public static final int REG_SMBWSTWRR2;
  public static final int REG_SMBWSTOENR2;
  public static final int REG_SMBWSTWENR2;
  public static final int REG_SMBCR2;
  public static final int REG_SMBSR2;
  public static final int REG_SMBWSTBRDR2;
  public static final int REG_SMBIDCYR3;
  public static final int REG_SMBWSTRDR3;
  public static final int REG_SMBWSTWRR3;
  public static final int REG_SMBWSTOENR3;
  public static final int REG_SMBWSTWENR3;
  public static final int REG_SMBCR3;
  public static final int REG_SMBSR3;
  public static final int REG_SMBWSTBRDR3;
  public static final int REG_SMBIDCYR4;
  public static final int REG_SMBWSTRDR4;
  public static final int REG_SMBWSTWRR4;
  public static final int REG_SMBWSTOENR4;
  public static final int REG_SMBWSTWENR4;
  public static final int REG_SMBCR4;
  public static final int REG_SMBSR4;
  public static final int REG_SMBWSTBRDR4;
  public static final int REG_SMBIDCYR5;
  public static final int REG_SMBWSTRDR5;
  public static final int REG_SMBWSTWRR5;
  public static final int REG_SMBWSTOENR5;
  public static final int REG_SMBWSTWENR5;
  public static final int REG_SMBCR5;
  public static final int REG_SMBSR5;
  public static final int REG_SMBWSTBRDR5;
  public static final int REG_SMBIDCYR6;
  public static final int REG_SMBWSTRDR6;
  public static final int REG_SMBWSTWRR6;
  public static final int REG_SMBWSTOENR6;
  public static final int REG_SMBWSTWENR6;
  public static final int REG_SMBCR6;
  public static final int REG_SMBSR6;
  public static final int REG_SMBWSTBRDR6;
  public static final int REG_SMBIDCYR7;
  public static final int REG_SMBWSTRDR7;
  public static final int REG_SMBWSTWRR7;
  public static final int REG_SMBWSTOENR7;
  public static final int REG_SMBWSTWENR7;
  public static final int REG_SMBCR7;
  public static final int REG_SMBSR7;
  public static final int REG_SMBWSTBRDR7;
  public static final int REG_SSMCSR;
  public static final int REG_SSMCCR;
  public static final int REG_SSMCITCR;
  public static final int REG_SSMCITIP;
  public static final int REG_SSMCITOP;
  public static final int REG_SSMCPeriphID0;
  public static final int REG_SSMCPeriphID1;
  public static final int REG_SSMCPeriphID2;
  public static final int REG_SSMCPeriphID3;
  public static final int REG_SSMCPCellID0;
  public static final int REG_SSMCPCellID1;
  public static final int REG_SSMCPCellID2;
  public static final int REG_SSMCPCellID3;
  public net.katsuster.ememu.arm.SSMC();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "SSMC.java"
class net.katsuster.ememu.arm.SSMC$SSMCSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.SSMC this$0;
  public net.katsuster.ememu.arm.SSMC$SSMCSlave(net.katsuster.ememu.arm.SSMC);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "SSP.java"
public class net.katsuster.ememu.arm.SSP implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_SSPCR0;
  public static final int REG_SSPCR1;
  public static final int REG_SSPDR;
  public static final int REG_SSPSR;
  public static final int REG_SSPCPSR;
  public static final int REG_SSPIMSC;
  public static final int REG_SSPRIS;
  public static final int REG_SSPMIS;
  public static final int REG_SSPICR;
  public static final int REG_SSPDMACR;
  public static final int REG_SSPPeriphID0;
  public static final int REG_SSPPeriphID1;
  public static final int REG_SSPPeriphID2;
  public static final int REG_SSPPeriphID3;
  public static final int REG_SSPPCellID0;
  public static final int REG_SSPPCellID1;
  public static final int REG_SSPPCellID2;
  public static final int REG_SSPPCellID3;
  public net.katsuster.ememu.arm.SSP();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "SSP.java"
class net.katsuster.ememu.arm.SSP$SSPSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.SSP this$0;
  public net.katsuster.ememu.arm.SSP$SSPSlave(net.katsuster.ememu.arm.SSP);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "SecondaryINTC.java"
public class net.katsuster.ememu.arm.SecondaryINTC extends net.katsuster.ememu.generic.Controller32 implements net.katsuster.ememu.generic.INTDestination {
  public static final int MAX_INTSRCS;
  public static final int REG_SIC_STATUS;
  public static final int REG_SIC_RAWSTAT;
  public static final int REG_SIC_ENABLE;
  public static final int REG_SIC_ENSET;
  public static final int REG_SIC_ENCLR;
  public static final int REG_SIC_SOFTINTSET;
  public static final int REG_SIC_SOFTINTCLR;
  public static final int REG_SIC_PICENABLE;
  public static final int REG_SIC_PICENSET;
  public static final int REG_SIC_PICENCLR;
  public net.katsuster.ememu.arm.SecondaryINTC();
  public void connectINTSource(int, net.katsuster.ememu.generic.INTSource);
  public void disconnectINTSource(int);
  public int readWord(long);
  public void writeWord(long, int);
  public boolean isRaisedInterrupt();
  public void setRaisedInterrupt(boolean);
  public void run();
}
Compiled from "SysBaseboard.java"
public class net.katsuster.ememu.arm.SysBaseboard implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_SYS_ID;
  public static final int REG_SYS_SW;
  public static final int REG_SYS_LED;
  public static final int REG_SYS_OSC0;
  public static final int REG_SYS_OSC1;
  public static final int REG_SYS_OSC2;
  public static final int REG_SYS_OSC3;
  public static final int REG_SYS_OSC4;
  public static final int REG_SYS_LOCK;
  public static final int REG_SYS_100HZ;
  public static final int REG_SYS_CFGDATA1;
  public static final int REG_SYS_CFGDATA2;
  public static final int REG_SYS_FLAGS;
  public static final int REG_SYS_FLAGSSET;
  public static final int REG_SYS_FLAGSCLR;
  public static final int REG_SYS_NVFLAGS;
  public static final int REG_SYS_NVFLAGSSET;
  public static final int REG_SYS_NVFLAGSCLR;
  public static final int REG_SYS_RESETCTL;
  public static final int REG_SYS_PCICTL;
  public static final int REG_SYS_MCI;
  public static final int REG_SYS_FLASH;
  public static final int REG_SYS_CLCD;
  public static final int REG_SYS_24MHz;
  public static final int REG_SYS_MISC;
  public static final int REG_SYS_DMAPSR0;
  public static final int REG_SYS_DMAPSR1;
  public static final int REG_SYS_DMAPSR2;
  public static final int REG_SYS_OSCRESET0;
  public static final int REG_SYS_OSCRESET1;
  public static final int REG_SYS_OSCRESET2;
  public static final int REG_SYS_OSCRESET3;
  public static final int REG_SYS_OSCRESET4;
  public static final int REG_SYS_TEST_OSC0;
  public static final int REG_SYS_TEST_OSC1;
  public static final int REG_SYS_TEST_OSC2;
  public static final int REG_SYS_TEST_OSC3;
  public static final int REG_SYS_TEST_OSC4;
  public net.katsuster.ememu.arm.SysBaseboard();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
  static long access$000(net.katsuster.ememu.arm.SysBaseboard);
}
Compiled from "SysBaseboard.java"
class net.katsuster.ememu.arm.SysBaseboard$SysBaseboardSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.SysBaseboard this$0;
  public net.katsuster.ememu.arm.SysBaseboard$SysBaseboardSlave(net.katsuster.ememu.arm.SysBaseboard);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "SysController.java"
public class net.katsuster.ememu.arm.SysController implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_SCCTRL;
  public static final int REG_SCSYSSTAT;
  public static final int REG_SCIMCTRL;
  public static final int REG_SCIMSTAT;
  public static final int REG_SCXTALCTRL;
  public static final int REG_SCPLLCTRL;
  public static final int REG_SCPLLFCTRL;
  public static final int REG_SCPERCTRL0;
  public static final int REG_SCPERCTRL1;
  public static final int REG_SCPEREN;
  public static final int REG_SCPERDIS;
  public static final int REG_SCPERCLKEN;
  public static final int REG_SCPERSTAT;
  public static final int REG_SCSysID0;
  public static final int REG_SCSysID1;
  public static final int REG_SCSysID2;
  public static final int REG_SCSysID3;
  public static final int REG_SCITCR;
  public static final int REG_SCITIR0;
  public static final int REG_SCITIR1;
  public static final int REG_SCITOR;
  public static final int REG_SCCNTCTRL;
  public static final int REG_SCCNTDATA;
  public static final int REG_SCCNTSTEP;
  public static final int REG_SCPeriphID0;
  public static final int REG_SCPeriphID1;
  public static final int REG_SCPeriphID2;
  public static final int REG_SCPeriphID3;
  public static final int REG_SCPCellID0;
  public static final int REG_SCPCellID1;
  public static final int REG_SCPCellID2;
  public static final int REG_SCPCellID3;
  public net.katsuster.ememu.arm.SysController();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "SysController.java"
class net.katsuster.ememu.arm.SysController$SysControllerSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.SysController this$0;
  public net.katsuster.ememu.arm.SysController$SysControllerSlave(net.katsuster.ememu.arm.SysController);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "UART.java"
public class net.katsuster.ememu.arm.UART implements net.katsuster.ememu.generic.INTSource,net.katsuster.ememu.generic.BusSlave {
  public static final int REG_UARTDR;
  public static final int REG_UARTRSR;
  public static final int REG_UARTFR;
  public static final int REG_UARTILPR;
  public static final int REG_UARTIBRD;
  public static final int REG_UARTFBRD;
  public static final int REG_UARTLCR_H;
  public static final int REG_UARTCR;
  public static final int REG_UARTIFLS;
  public static final int REG_UARTIMSC;
  public static final int REG_UARTRIS;
  public static final int REG_UARTMIS;
  public static final int REG_UARTICR;
  public static final int REG_UARTDMACR;
  public static final int REG_UARTPeriphID0;
  public static final int REG_UARTPeriphID1;
  public static final int REG_UARTPeriphID2;
  public static final int REG_UARTPeriphID3;
  public static final int REG_UARTPCellID0;
  public static final int REG_UARTPCellID1;
  public static final int REG_UARTPCellID2;
  public static final int REG_UARTPCellID3;
  public static final int FR_RI;
  public static final int FR_TXFE;
  public static final int FR_RXFF;
  public static final int FR_TXFF;
  public static final int FR_RXFE;
  public static final int FR_BUSY;
  public static final int FR_DCD;
  public static final int FR_DSR;
  public static final int FR_CTS;
  public static final int INTR_OE;
  public static final int INTR_BE;
  public static final int INTR_PE;
  public static final int INTR_FE;
  public static final int INTR_RT;
  public static final int INTR_TX;
  public static final int INTR_RX;
  public static final int INTR_DSR;
  public static final int INTR_DCD;
  public static final int INTR_CTS;
  public static final int INTR_RII;
  public net.katsuster.ememu.arm.UART(java.io.InputStream, java.io.OutputStream);
  public int getRawInt();
  public int getMaskedInt();
  public net.katsuster.ememu.generic.INTDestination getINTDestination();
  public void connectINTDestination(net.katsuster.ememu.generic.INTDestination);
  public void disconnectINTDestination();
  public boolean isAssert();
  public java.lang.String getIRQMessage();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
  static java.lang.StringBuffer access$000(net.katsuster.ememu.arm.UART);
  static int access$100(net.katsuster.ememu.arm.UART);
  static java.io.OutputStream access$200(net.katsuster.ememu.arm.UART);
  static int access$102(net.katsuster.ememu.arm.UART, int);
  static int access$300(net.katsuster.ememu.arm.UART);
  static int access$302(net.katsuster.ememu.arm.UART, int);
  static java.io.InputStream access$400(net.katsuster.ememu.arm.UART);
  static net.katsuster.ememu.generic.INTDestination access$500(net.katsuster.ememu.arm.UART);
}
Compiled from "UART.java"
class net.katsuster.ememu.arm.UART$UARTSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.UART this$0;
  public net.katsuster.ememu.arm.UART$UARTSlave(net.katsuster.ememu.arm.UART);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "Watchdog.java"
public class net.katsuster.ememu.arm.Watchdog implements net.katsuster.ememu.generic.BusSlave {
  public static final int REG_WdogLoad;
  public static final int REG_WdogValue;
  public static final int REG_WdogControl;
  public static final int REG_WdogIntClr;
  public static final int REG_WdogRIS;
  public static final int REG_WdogMIS;
  public static final int REG_WdogLock;
  public static final int REG_WdogITCR;
  public static final int REG_WdogITOP;
  public static final int REG_WdogPeriphID0;
  public static final int REG_WdogPeriphID1;
  public static final int REG_WdogPeriphID2;
  public static final int REG_WdogPeriphID3;
  public static final int REG_WdogPCellID0;
  public static final int REG_WdogPCellID1;
  public static final int REG_WdogPCellID2;
  public static final int REG_WdogPCellID3;
  public net.katsuster.ememu.arm.Watchdog();
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "Watchdog.java"
class net.katsuster.ememu.arm.Watchdog$WatchdogSlave extends net.katsuster.ememu.generic.Controller32 {
  final net.katsuster.ememu.arm.Watchdog this$0;
  public net.katsuster.ememu.arm.Watchdog$WatchdogSlave(net.katsuster.ememu.arm.Watchdog);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "APSR.java"
public class net.katsuster.ememu.arm.core.APSR extends net.katsuster.ememu.arm.core.PSR {
  public net.katsuster.ememu.arm.core.APSR(net.katsuster.ememu.arm.core.PSR);
  public net.katsuster.ememu.arm.core.APSR(java.lang.String, net.katsuster.ememu.arm.core.PSR);
  public int getValue();
  public void setValue(int);
}
Compiled from "ARMRegFile.java"
public class net.katsuster.ememu.arm.core.ARMRegFile implements net.katsuster.ememu.generic.Reg32File {
  public static final int ARM_REGFILE_SIZE;
  public static final int ARM_REG_SPSR;
  public net.katsuster.ememu.arm.core.ARMRegFile();
  public net.katsuster.ememu.generic.Reg32 getReg(int);
  protected net.katsuster.ememu.generic.Reg32[] getRegSet(int);
  public void notifyChangedPSR();
  public net.katsuster.ememu.arm.core.PSR getCPSR();
  public net.katsuster.ememu.arm.core.SPSR getSPSR();
  public java.lang.String toString();
}
Compiled from "ARMv5.java"
public class net.katsuster.ememu.arm.core.ARMv5 extends net.katsuster.ememu.generic.CPU {
  public static final int MAX_INTSRCS;
  public static final int INTSRC_IRQ;
  public static final int INTSRC_FIQ;
  public static final int EXCEPT_RST;
  public static final int EXCEPT_ABT_DATA;
  public static final int EXCEPT_FIQ;
  public static final int EXCEPT_IRQ;
  public static final int EXCEPT_ABT_INST;
  public static final int EXCEPT_UND;
  public static final int EXCEPT_SVC;
  public net.katsuster.ememu.arm.core.ARMv5();
  public java.lang.String instructionToString(net.katsuster.ememu.generic.Instruction, java.lang.String, java.lang.String);
  public java.lang.String regsToString();
  public int getPC();
  public void setPC(int);
  public void nextPC(net.katsuster.ememu.generic.Instruction);
  public void jumpRel(int);
  public int getReg(int);
  public void setReg(int, int);
  public int getRegRaw(int);
  public void setRegRaw(int, int);
  public java.lang.String getRegName(int);
  public net.katsuster.ememu.arm.core.PSR getCPSR();
  public net.katsuster.ememu.arm.core.APSR getAPSR();
  public net.katsuster.ememu.arm.core.PSR getSPSR();
  public net.katsuster.ememu.arm.core.CoProc getCoproc(int);
  public static java.lang.String getCoprocRegName(int, int);
  public net.katsuster.ememu.arm.core.MMUv5 getMMU();
  public net.katsuster.ememu.generic.Instruction fetch();
  public net.katsuster.ememu.arm.core.Opcode decode(net.katsuster.ememu.generic.Instruction);
  public void disasm(net.katsuster.ememu.arm.core.Opcode);
  public void execute(net.katsuster.ememu.arm.core.Opcode);
  public void executeInst(net.katsuster.ememu.arm.core.Opcode, boolean);
  public void raiseException(int, java.lang.String);
  public void doImportantException();
  public void doExceptionReset(java.lang.String);
  public void doExceptionUndefined(java.lang.String);
  public void doExceptionSoftware(java.lang.String);
  public void doExceptionPrefetch(java.lang.String);
  public void doExceptionData(java.lang.String);
  public void doExceptionIRQ(java.lang.String);
  public void doExceptionFIQ(java.lang.String);
  public void connectINTSource(int, net.katsuster.ememu.generic.INTSource);
  public void disconnectINTSource(int);
  public void acceptIRQ();
  public void acceptFIQ();
  public boolean isRaisedException();
  public void setRaisedException(boolean);
  public boolean isJumped();
  public void setJumped(boolean);
  public boolean isHighVector();
  public void setHighVector(boolean);
  public void step();
}
Compiled from "ARMv5.java"
class net.katsuster.ememu.arm.core.ARMv5$1 {
  static final int[] $SwitchMap$net$katsuster$ememu$arm$core$OpType;
  static {};
}
Compiled from "CoProc.java"
public class net.katsuster.ememu.arm.core.CoProc {
  public net.katsuster.ememu.arm.core.CoProc(int, net.katsuster.ememu.arm.core.ARMv5);
  public int getNumber();
  public net.katsuster.ememu.arm.core.ARMv5 getCPU();
  public void addCReg(int, java.lang.String);
  public void addCReg(int, java.lang.String, int);
  public static int getCRegID(int, int, int, int);
  public boolean isValidCRegNumber(int);
  public int getCReg(int);
  public void setCReg(int, int);
  public java.lang.String toString();
}
Compiled from "CoProcDebugv1.java"
public class net.katsuster.ememu.arm.core.CoProcDebugv1 extends net.katsuster.ememu.arm.core.CoProc {
  public static final int OP_DIDR;
  public static final int OP_DSCR;
  public static final int OP_DTR;
  public static final int OP_WFAR;
  public static final int OP_VCR;
  public static final int OP_BVR00;
  public static final int OP_BVR01;
  public static final int OP_BCR00;
  public static final int OP_BCR01;
  public static final int OP_WVR00;
  public static final int OP_WVR01;
  public static final int OP_WCR00;
  public static final int OP_WCR01;
  public static final int OP_DRAR;
  public static final int OP_DSAR;
  public net.katsuster.ememu.arm.core.CoProcDebugv1(int, net.katsuster.ememu.arm.core.ARMv5);
  public void setCReg(int, int);
}
Compiled from "CoProcStdv5.java"
public class net.katsuster.ememu.arm.core.CoProcStdv5 extends net.katsuster.ememu.arm.core.CoProc {
  public static final int CR00_MIDR;
  public static final int CR00_CTR;
  public static final int CR00_TCMTR;
  public static final int CR00_TLBTR;
  public static final int CR00_MPIDR;
  public static final int CR01_MMU_SCTLR;
  public static final int CR02_MMU_TTBR0;
  public static final int CR03_MMU_DACR;
  public static final int CR05_MMU_FSR;
  public static final int CR06_MMU_FAR;
  public static final int CR07_INTWAIT;
  public static final int CR07_ICH_INVALL;
  public static final int CR07_ICH_INVV;
  public static final int CR07_ICH_INVS;
  public static final int CR07_PRE_FLU;
  public static final int CR07_BTC_FLU;
  public static final int CR07_BTC_FLU2;
  public static final int CR07_DCH_INVALL;
  public static final int CR07_DCH_INVV;
  public static final int CR07_DCH_INVS;
  public static final int CR07_UCH_INVALL;
  public static final int CR07_UCH_INVV;
  public static final int CR07_UCH_INVS;
  public static final int CR07_DCH_CLNV;
  public static final int CR07_DCH_CLNS;
  public static final int CR07_DCH_TSTCLN;
  public static final int CR07_WB_PUR;
  public static final int CR07_UCH_CLNV;
  public static final int CR07_UCH_CLNS;
  public static final int CR07_ICH_PREV;
  public static final int CR07_DCH_CLNINVV;
  public static final int CR07_DCH_CLNINVS;
  public static final int CR07_DCH_TSTCLNINV;
  public static final int CR07_UCH_CLNINVV;
  public static final int CR07_UCH_CLNINVS;
  public static final int CR08_UTLB_INVALL;
  public static final int CR08_UTLB_INVV;
  public static final int CR08_ITLB_INVALL;
  public static final int CR08_ITLB_INVV;
  public static final int CR08_DTLB_INVALL;
  public static final int CR08_DTLB_INVV;
  public net.katsuster.ememu.arm.core.CoProcStdv5(int, net.katsuster.ememu.arm.core.ARMv5);
  public void setCReg(int, int);
  public void setSCTLR(int);
  public void setTTBR0(int);
  public void setDACR(int);
  public void waitInt(int);
}
Compiled from "CoProcVFPv2.java"
public class net.katsuster.ememu.arm.core.CoProcVFPv2 extends net.katsuster.ememu.arm.core.CoProc {
  public static final int OP_FMR_FPSID;
  public static final int OP_FMR_FPSCR;
  public static final int OP_FMR_FPEXC;
  public net.katsuster.ememu.arm.core.CoProcVFPv2(int, net.katsuster.ememu.arm.core.ARMv5);
  public void setCReg(int, int);
}
Compiled from "DecodeStageARMv5.java"
public class net.katsuster.ememu.arm.core.DecodeStageARMv5 extends net.katsuster.ememu.generic.Stage {
  public net.katsuster.ememu.arm.core.DecodeStageARMv5(net.katsuster.ememu.arm.core.ARMv5);
  public net.katsuster.ememu.arm.core.OpIndex decode(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeALU(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUShiftImm(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUShiftReg(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeExtALU(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeExtLdrStr(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUImm(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUOther(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUCommon(net.katsuster.ememu.arm.core.InstructionARM, int);
  public net.katsuster.ememu.arm.core.OpIndex decodeLdrStr(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeLdmStm(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeLdm(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeStm(net.katsuster.ememu.arm.core.InstructionARM);
  public net.katsuster.ememu.arm.core.OpIndex decodeCopSwi(net.katsuster.ememu.arm.core.InstructionARM);
}
Compiled from "DecodeStageThumb.java"
public class net.katsuster.ememu.arm.core.DecodeStageThumb extends net.katsuster.ememu.generic.Stage {
  public net.katsuster.ememu.arm.core.DecodeStageThumb(net.katsuster.ememu.arm.core.ARMv5);
  public net.katsuster.ememu.arm.core.OpIndex decode(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeAddSub(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUImm(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUReg(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeALURegData(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeALURegSpecial(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeALURegOffset(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeLdWord(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeLdHalf(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeOthers(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeLdmult(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeBlBlx(net.katsuster.ememu.arm.core.InstructionThumb);
}
Compiled from "DecodeStageThumb2.java"
public class net.katsuster.ememu.arm.core.DecodeStageThumb2 extends net.katsuster.ememu.generic.Stage {
  public net.katsuster.ememu.arm.core.DecodeStageThumb2(net.katsuster.ememu.arm.core.ARMv5);
  public net.katsuster.ememu.arm.core.OpIndex decode(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeLdmStmT2(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeDualLdSt(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUShiftRegT2(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeCoproc(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUModimmT2(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeALUImmT2(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeBlBlxT2(net.katsuster.ememu.arm.core.InstructionThumb);
  public net.katsuster.ememu.arm.core.OpIndex decodeBlBlxMsrT2(net.katsuster.ememu.arm.core.InstructionThumb);
}
Compiled from "ExecStageARMv5.java"
public class net.katsuster.ememu.arm.core.ExecStageARMv5 extends net.katsuster.ememu.generic.Stage {
  public net.katsuster.ememu.arm.core.ExecStageARMv5(net.katsuster.ememu.arm.core.ARMv5);
  public net.katsuster.ememu.arm.core.ARMv5 getCore();
  public net.katsuster.ememu.arm.core.PSR getCPSR();
  public net.katsuster.ememu.arm.core.APSR getAPSR();
  public net.katsuster.ememu.arm.core.PSR getSPSR();
  public net.katsuster.ememu.arm.core.CoProc getCoproc(int);
  public java.lang.String getCoprocRegName(int, int);
  public net.katsuster.ememu.arm.core.MMUv5 getMMU();
  public void raiseException(int, java.lang.String);
  public int getAddrMode1(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode1Imm(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode1ImmShift(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode1RegShift(net.katsuster.ememu.arm.core.InstructionARM);
  public boolean getAddrMode1Carry(net.katsuster.ememu.arm.core.InstructionARM);
  public boolean getAddrMode1CarryImm(net.katsuster.ememu.arm.core.InstructionARM);
  public boolean getAddrMode1CarryImmShift(net.katsuster.ememu.arm.core.InstructionARM);
  public boolean getAddrMode1CarryRegShift(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode1Name(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode1ImmName(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode1ImmShiftName(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode1RegShiftName(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode2(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode2Imm(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode2Reg(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode2Scaled(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode2Name(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode2ImmName(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode2RegName(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode2ScaledName(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode3(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode3Imm(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode3Reg(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode3Name(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode3ImmName(net.katsuster.ememu.arm.core.InstructionARM);
  public java.lang.String getAddrMode3RegName(net.katsuster.ememu.arm.core.InstructionARM);
  public int getAddrMode4StartAddress(int, int, int);
  public int getAddrMode4Length(int, int);
  public void executeMrs(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeMsr(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void printALUDisasm(net.katsuster.ememu.arm.core.InstructionARM, int);
  public void executeALUAnd(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUEor(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUSub(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALURsb(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUAdd(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUAdc(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUSbc(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALURsc(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUTst(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUTeq(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUCmp(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUCmn(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUOrr(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUMov(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUBic(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeALUMvn(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeMla(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeMul(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSmlal(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSmull(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeUmlal(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeUmull(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSmlalxy(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSmlaxy(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSmlawy(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSmulxy(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSmulwy(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeQdsub(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeQdadd(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeQsub(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeQadd(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeBkpt(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSwp(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSwpb(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdrt(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdrbt(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdrb(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdr(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdrh(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdrsb(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdrsh(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdrd(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executePld(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeStrt(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeStrbt(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeStrb(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeStr(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeStrh(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeStrd(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdm1(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdm2(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeLdm3(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeStm1(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeStm2(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeBl(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeBlx1(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeBlx2(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeBx(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeClz(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeCdp(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeMcr(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeMrc(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeSwi(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void executeUnd(net.katsuster.ememu.arm.core.InstructionARM, boolean);
  public void execute(net.katsuster.ememu.arm.core.Opcode, boolean);
  public net.katsuster.ememu.generic.CPU getCore();
}
Compiled from "ExecStageARMv5.java"
class net.katsuster.ememu.arm.core.ExecStageARMv5$1 {
  static final int[] $SwitchMap$net$katsuster$ememu$arm$core$OpIndex;
  static {};
}
Compiled from "ExecStageThumb.java"
public class net.katsuster.ememu.arm.core.ExecStageThumb extends net.katsuster.ememu.generic.Stage {
  public net.katsuster.ememu.arm.core.ExecStageThumb(net.katsuster.ememu.arm.core.ARMv5);
  public net.katsuster.ememu.arm.core.ARMv5 getCore();
  public net.katsuster.ememu.arm.core.PSR getCPSR();
  public net.katsuster.ememu.arm.core.APSR getAPSR();
  public net.katsuster.ememu.arm.core.PSR getSPSR();
  public net.katsuster.ememu.arm.core.CoProc getCoproc(int);
  public java.lang.String getCoprocRegName(int, int);
  public net.katsuster.ememu.arm.core.MMUv5 getMMU();
  public void raiseException(int, java.lang.String);
  public void executeAnd(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeEor(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLsl2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLsr2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAsr2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAdc(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeSbc(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeRor(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeTst(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeNeg(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeCmp2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeCmn(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeOrr(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeMul(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeBic(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeMvn(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAdd1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAdd2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAdd3(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAdd4(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAdd5(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAdd6(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAdd7(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeSub1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeSub2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeSub3(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeSub4(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeCmp1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeCmp3(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeMov1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeMov3(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLsl1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLsr1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeAsr1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdr1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdr2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdr3(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdr4(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdrb1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdrb2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdrh1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdrh2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdrsb(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdrsh(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeStr1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeStr2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeStr3(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeStrb1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeStrb2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeStrh1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeStrh2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executePush(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executePop(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeLdmia(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeStmia(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeBkpt(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeUnd(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeSwi(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeB1(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeB2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeBlx2(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeBx(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void execute(net.katsuster.ememu.arm.core.Opcode, boolean);
  public net.katsuster.ememu.generic.CPU getCore();
}
Compiled from "ExecStageThumb.java"
class net.katsuster.ememu.arm.core.ExecStageThumb$1 {
  static final int[] $SwitchMap$net$katsuster$ememu$arm$core$OpIndex;
  static {};
}
Compiled from "ExecStageThumb2.java"
public class net.katsuster.ememu.arm.core.ExecStageThumb2 extends net.katsuster.ememu.generic.Stage {
  public net.katsuster.ememu.arm.core.ExecStageThumb2(net.katsuster.ememu.arm.core.ARMv5);
  public net.katsuster.ememu.arm.core.ARMv5 getCore();
  public net.katsuster.ememu.arm.core.PSR getCPSR();
  public void executeB(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeBl(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeBlx(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeSmc(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void executeUnd(net.katsuster.ememu.arm.core.InstructionThumb, boolean);
  public void execute(net.katsuster.ememu.arm.core.Opcode, boolean);
  public net.katsuster.ememu.generic.CPU getCore();
}
Compiled from "ExecStageThumb2.java"
class net.katsuster.ememu.arm.core.ExecStageThumb2$1 {
  static final int[] $SwitchMap$net$katsuster$ememu$arm$core$OpIndex;
  static {};
}
Compiled from "InstructionARM.java"
public class net.katsuster.ememu.arm.core.InstructionARM extends net.katsuster.ememu.generic.Instruction {
  public static final int COND_EQ;
  public static final int COND_NE;
  public static final int COND_CS;
  public static final int COND_HS;
  public static final int COND_CC;
  public static final int COND_LO;
  public static final int COND_MI;
  public static final int COND_PL;
  public static final int COND_VS;
  public static final int COND_VC;
  public static final int COND_HI;
  public static final int COND_LS;
  public static final int COND_GE;
  public static final int COND_LT;
  public static final int COND_GT;
  public static final int COND_LE;
  public static final int COND_AL;
  public static final int COND_NV;
  public static final int SUBCODE_USEALU;
  public static final int SUBCODE_LDRSTR;
  public static final int SUBCODE_LDMSTM;
  public static final int SUBCODE_COPSWI;
  public static final int OPCODE_AND;
  public static final int OPCODE_EOR;
  public static final int OPCODE_SUB;
  public static final int OPCODE_RSB;
  public static final int OPCODE_ADD;
  public static final int OPCODE_ADC;
  public static final int OPCODE_SBC;
  public static final int OPCODE_RSC;
  public static final int OPCODE_TST;
  public static final int OPCODE_TEQ;
  public static final int OPCODE_CMP;
  public static final int OPCODE_CMN;
  public static final int OPCODE_ORR;
  public static final int OPCODE_MOV;
  public static final int OPCODE_BIC;
  public static final int OPCODE_MVN;
  public static final int OPCODE_S_AND;
  public static final int OPCODE_S_EOR;
  public static final int OPCODE_S_SUB;
  public static final int OPCODE_S_RSB;
  public static final int OPCODE_S_ADD;
  public static final int OPCODE_S_ADC;
  public static final int OPCODE_S_SBC;
  public static final int OPCODE_S_RSC;
  public static final int OPCODE_S_OTH;
  public static final int OPCODE_S_TST;
  public static final int OPCODE_S_MSR;
  public static final int OPCODE_S_TEQ;
  public static final int OPCODE_S_CMP;
  public static final int OPCODE_S_CMN;
  public static final int OPCODE_S_ORR;
  public static final int OPCODE_S_MOV;
  public static final int OPCODE_S_BIC;
  public static final int OPCODE_S_MVN;
  public static final int OPCODE_S_UND;
  public static final int[] opcodeSBitShiftTable;
  public static final int[] opcodeSBitImmTable;
  public static final int PU_ADDR4_IA;
  public static final int PU_ADDR4_IB;
  public static final int PU_ADDR4_DA;
  public static final int PU_ADDR4_DB;
  public net.katsuster.ememu.arm.core.InstructionARM(int);
  public int getCondField();
  public static int getCondField(int);
  public java.lang.String getCondFieldName();
  public static java.lang.String getCondFieldName(int);
  public boolean satisfiesCond(net.katsuster.ememu.arm.core.PSR);
  public static boolean satisfiesCond(int, net.katsuster.ememu.arm.core.PSR);
  public int getSubCodeField();
  public static int getSubCodeField(int);
  public boolean getIBit();
  public static boolean getIBit(int);
  public int getOpcodeField();
  public static int getOpcodeField(int);
  public java.lang.String getOpcodeFieldName();
  public static java.lang.String getOpcodeFieldName(int);
  public int getOpcodeSBitShiftID();
  public static int getOpcodeSBitShiftID(int);
  public int getOpcodeSBitImmID();
  public static int getOpcodeSBitImmID(int);
  public int getPUField();
  public static int getPUField(int);
  public java.lang.String getPUFieldName();
  public static java.lang.String getPUFieldName(int);
  public boolean getSBit();
  public static boolean getSBit(int);
  public boolean getLBit();
  public static boolean getLBit(int);
  public int getRnField();
  public static int getRnField(int);
  public int getRdField();
  public static int getRdField(int);
  public int getRmField();
  public static int getRmField(int);
  public int getRegListField();
  public static int getRegListField(int);
  public java.lang.String getRegListFieldName();
  public static java.lang.String getRegListFieldName(int, int);
  public java.lang.String toHex();
  static {};
}
Compiled from "InstructionThumb.java"
public class net.katsuster.ememu.arm.core.InstructionThumb extends net.katsuster.ememu.generic.Instruction {
  public static final int SUBCODE_ADDSUB;
  public static final int SUBCODE_ALUIMM;
  public static final int SUBCODE_ALUREG;
  public static final int SUBCODE_LDWORD;
  public static final int SUBCODE_LDHALF;
  public static final int SUBCODE_OTHERS;
  public static final int SUBCODE_LDMULT;
  public static final int SUBCODE_BL_BLX;
  public static final int OPCODE5_AND;
  public static final int OPCODE5_EOR;
  public static final int OPCODE5_LSL;
  public static final int OPCODE5_LSR;
  public static final int OPCODE5_ASR;
  public static final int OPCODE5_ADC;
  public static final int OPCODE5_SBC;
  public static final int OPCODE5_ROR;
  public static final int OPCODE5_TST;
  public static final int OPCODE5_NEG;
  public static final int OPCODE5_CMP;
  public static final int OPCODE5_CMN;
  public static final int OPCODE5_ORR;
  public static final int OPCODE5_MUL;
  public static final int OPCODE5_BIC;
  public static final int OPCODE5_MVN;
  public net.katsuster.ememu.arm.core.InstructionThumb(int);
  public int getSubCodeField();
  public static int getSubCodeField(int);
  public int getOpcode5Field();
  public static int getOpcode5Field(int);
  public java.lang.String getOpcode5FieldName();
  public static java.lang.String getOpcode5FieldName(int);
  public int getRmField();
  public static int getRmField(int);
  public int getRdField();
  public static int getRdField(int);
  public int getRegListField();
  public static int getRegListField(int);
  public java.lang.String getRegListFieldName();
  public static java.lang.String getRegListFieldName(int, int);
  public java.lang.String toHex();
}
Compiled from "MMUv5.java"
public class net.katsuster.ememu.arm.core.MMUv5 {
  public static final int FS_TERM;
  public static final int FS_VECT;
  public static final int FS_ALIGN1;
  public static final int FS_ALIGN2;
  public static final int FS_TRANS_L1;
  public static final int FS_TRANS_L2;
  public static final int FS_TRANS_SEC;
  public static final int FS_TRANS_PAGE;
  public static final int FS_DOM_SEC;
  public static final int FS_DOM_PAGE;
  public static final int FS_PERM_SEC;
  public static final int FS_PERM_PAGE;
  public static final int FS_LINE_SEC;
  public static final int FS_LINE_PAGE;
  public static final int FS_ABORT_SEC;
  public static final int FS_ABORT_PAGE;
  public static final int DOMACC_INVALID;
  public static final int DOMACC_CLIENT;
  public static final int DOMACC_RESERVED;
  public static final int DOMACC_MANAGER;
  public net.katsuster.ememu.arm.core.MMUv5(net.katsuster.ememu.arm.core.ARMv5, net.katsuster.ememu.arm.core.CoProcStdv5);
  public boolean isAlignmentCheck();
  public void setAlignmentCheck(boolean);
  public boolean isEnable();
  public void setEnable(boolean);
  public boolean isFault();
  public void setFault(boolean);
  public void clearFault();
  public void faultMMU(int, int, int, boolean, boolean, boolean, java.lang.String);
  public int getTableBase();
  public void setTableBase(int);
  public int getDomainAccess(int);
  public void setDomainAccess(int, int);
  public boolean isSystemProtect();
  public void setSystemProtect(boolean);
  public boolean isROMProtect();
  public void setROMProtect(boolean);
  public net.katsuster.ememu.arm.core.ARMv5 getCPU();
  public net.katsuster.ememu.arm.core.CoProcStdv5 getCoProcStd();
  public int translate(int, int, boolean, boolean, boolean);
  protected int getL1Address(int);
  protected int getL2AddressCoarse(int, int);
  protected int getL2AddressFine(int, int);
  protected int getPageAddressLarge(int, boolean, boolean, boolean, int, int);
  protected int getPageAddressSmall(int, boolean, boolean, boolean, int, int);
  protected int getPageAddressTiny(int, boolean, boolean, boolean, int, int);
  protected boolean isPermitted(boolean, boolean, int);
  protected int translateSection(int, boolean, boolean, boolean, int);
  protected int translateCoarse(int, boolean, boolean, boolean, int);
  protected int translateFine(int, boolean, boolean, boolean, int);
}
Compiled from "OpIndex.java"
public final class net.katsuster.ememu.arm.core.OpIndex extends java.lang.Enum<net.katsuster.ememu.arm.core.OpIndex> {
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUADC;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUADD;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUAND;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUBIC;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUCMN;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUCMP;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUEOR;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUMOV;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUMVN;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUORR;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALURSB;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALURSC;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUSBC;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUSUB;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUTEQ;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_ALUTST;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_BKPT;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_BL;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_BLX1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_BLX2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_BX;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_CDP;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_CLZ;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDM1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDM2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDM3;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDR;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDRB;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDRBT;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDRD;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDRH;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDRSB;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDRSH;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_LDRT;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_MCR;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_MLA;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_MRC;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_MRS;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_MSR;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_MUL;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_PLD;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_QADD;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_QDADD;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_QDSUB;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_QSUB;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SMLAL;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SMLALXY;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SMLAWY;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SMLAXY;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SMULL;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SMULWY;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SMULXY;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_STM1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_STM2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_STR;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_STRB;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_STRBT;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_STRD;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_STRH;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_STRT;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SWI;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SWP;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_SWPB;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_UMLAL;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_UMULL;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_ARM_UND;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ADC;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ADD1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ADD2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ADD3;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ADD4;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ADD5;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ADD6;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ADD7;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_AND;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ASR1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ASR2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_B1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_B2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_BIC;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_BKPT;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_BLX2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_BX;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_CMN;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_CMP1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_CMP2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_CMP3;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_EOR;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDMIA;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDR1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDR2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDR3;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDR4;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDRB1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDRB2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDRH1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDRH2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDRSB;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LDRSH;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LSL1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LSL2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LSR1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_LSR2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_MOV1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_MOV3;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_MUL;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_MVN;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_NEG;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ORR;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_POP;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_PUSH;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_ROR;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_SBC;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_STMIA;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_STR1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_STR2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_STR3;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_STRB1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_STRB2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_STRH1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_STRH2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_SUB1;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_SUB2;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_SUB3;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_SUB4;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_SWI;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_TST;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB_UND;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB2_B;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB2_BL;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB2_BLX;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB2_SMC;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_THUMB2_UND;
  public static final net.katsuster.ememu.arm.core.OpIndex INS_UNKNOWN;
  public static net.katsuster.ememu.arm.core.OpIndex[] values();
  public static net.katsuster.ememu.arm.core.OpIndex valueOf(java.lang.String);
  static {};
}
Compiled from "OpType.java"
public final class net.katsuster.ememu.arm.core.OpType extends java.lang.Enum<net.katsuster.ememu.arm.core.OpType> {
  public static final net.katsuster.ememu.arm.core.OpType INS_TYPE_ARM;
  public static final net.katsuster.ememu.arm.core.OpType INS_TYPE_THUMB;
  public static final net.katsuster.ememu.arm.core.OpType INS_TYPE_THUMB2;
  public static final net.katsuster.ememu.arm.core.OpType INS_TYPE_UNKNOWN;
  public static net.katsuster.ememu.arm.core.OpType[] values();
  public static net.katsuster.ememu.arm.core.OpType valueOf(java.lang.String);
  static {};
}
Compiled from "Opcode.java"
public class net.katsuster.ememu.arm.core.Opcode {
  public net.katsuster.ememu.arm.core.Opcode(net.katsuster.ememu.generic.Instruction, net.katsuster.ememu.arm.core.OpType, net.katsuster.ememu.arm.core.OpIndex);
  public void reuse(net.katsuster.ememu.generic.Instruction, net.katsuster.ememu.arm.core.OpType, net.katsuster.ememu.arm.core.OpIndex);
  public net.katsuster.ememu.generic.Instruction getInstruction();
  public net.katsuster.ememu.arm.core.OpType getType();
  public net.katsuster.ememu.arm.core.OpIndex getIndex();
}
Compiled from "PSR.java"
public class net.katsuster.ememu.arm.core.PSR extends net.katsuster.ememu.generic.Reg32 {
  public static final int BIT_N;
  public static final int BIT_Z;
  public static final int BIT_C;
  public static final int BIT_V;
  public static final int BIT_I;
  public static final int BIT_F;
  public static final int BIT_T;
  public static final int MODE_USR;
  public static final int MODE_FIQ;
  public static final int MODE_IRQ;
  public static final int MODE_SVC;
  public static final int MODE_ABT;
  public static final int MODE_UND;
  public static final int MODE_SYS;
  net.katsuster.ememu.arm.core.ARMRegFile regfile;
  public net.katsuster.ememu.arm.core.PSR();
  public net.katsuster.ememu.arm.core.PSR(java.lang.String, int, net.katsuster.ememu.arm.core.ARMRegFile);
  public void setValue(int);
  public void setValue(net.katsuster.ememu.arm.core.PSR);
  public int getMode();
  public static int getMode(int);
  public void setMode(int);
  public static int setMode(int, int);
  public java.lang.String getModeName();
  public static java.lang.String getModeName(int);
  public java.lang.String getStatusName();
  public static java.lang.String getStatusName(int);
  public boolean getNBit();
  public void setNBit(boolean);
  public boolean getZBit();
  public void setZBit(boolean);
  public boolean getCBit();
  public void setCBit(boolean);
  public boolean getVBit();
  public void setVBit(boolean);
  public boolean getIBit();
  public void setIBit(boolean);
  public boolean getFBit();
  public void setFBit(boolean);
  public boolean getTBit();
  public void setTBit(boolean);
  public boolean isPrivMode();
  public net.katsuster.ememu.arm.core.APSR getAPSR();
  public java.lang.String toString();
}
Compiled from "SPSR.java"
public class net.katsuster.ememu.arm.core.SPSR extends net.katsuster.ememu.arm.core.PSR {
  public net.katsuster.ememu.arm.core.SPSR(net.katsuster.ememu.generic.Reg32);
  public net.katsuster.ememu.arm.core.SPSR(java.lang.String, net.katsuster.ememu.generic.Reg32);
  public int getValue();
  public void setValue(int);
}
Compiled from "ARMVersatile.java"
public class net.katsuster.ememu.board.ARMVersatile {
  public net.katsuster.ememu.board.ARMVersatile();
  public java.io.InputStream getUARTInputStream(int);
  public void setUARTInputStream(int, java.io.InputStream);
  public java.io.OutputStream getUARTOutputStream(int);
  public void setUARTOutputStream(int, java.io.OutputStream);
  public void setup(net.katsuster.ememu.arm.core.ARMv5, net.katsuster.ememu.generic.Bus, net.katsuster.ememu.generic.RAM);
}
Compiled from "AbstractCore.java"
public abstract class net.katsuster.ememu.generic.AbstractCore extends java.lang.Thread implements net.katsuster.ememu.generic.Core {
  public net.katsuster.ememu.generic.AbstractCore();
  public boolean shouldHalt();
  public void halt();
}
Compiled from "BankedFlush16_16.java"
public class net.katsuster.ememu.generic.BankedFlush16_16 extends net.katsuster.ememu.generic.SlaveCore {
  public static final int LEN_WORD;
  public static final int LEN_WORD_BITS;
  public net.katsuster.ememu.generic.BankedFlush16_16(net.katsuster.ememu.generic.Flush16, net.katsuster.ememu.generic.Flush16);
  public int getSize();
  protected void checkAddress(long);
  public boolean tryRead(long, int);
  public boolean tryWrite(long, int);
  public boolean tryAccess(long, int);
  public byte read8(long);
  public short read16(long);
  public int read32(long);
  public long read64(long);
  public void write8(long, byte);
  public void write16(long, short);
  public void write32(long, int);
  public void write64(long, long);
  public int readWord(long);
  public void writeWord(long, int);
  public void run();
}
Compiled from "BitOp.java"
public class net.katsuster.ememu.generic.BitOp {
  public net.katsuster.ememu.generic.BitOp();
  public static boolean getBit32(int, int);
  public static int setBit32(int, int, boolean);
  public static int getField32(int, int, int);
  public static int setField32(int, int, int, int);
  public static int toInt(boolean);
  public static long signExt64(long, int);
}
Compiled from "Bus.java"
public class net.katsuster.ememu.generic.Bus implements net.katsuster.ememu.generic.RWCore {
  public net.katsuster.ememu.generic.Bus();
  public void addMasterCore(net.katsuster.ememu.generic.MasterCore);
  public void removeMasterCore(net.katsuster.ememu.generic.MasterCore);
  public void startAllMasterCores();
  public void haltAllMasterCores();
  public boolean tryRead(long, int);
  public byte read8(long);
  public short read16(long);
  public int read32(long);
  public long read64(long);
  public boolean tryWrite(long, int);
  public void write8(long, byte);
  public void write16(long, short);
  public void write32(long, int);
  public void write64(long, long);
  public void addSlaveCore(net.katsuster.ememu.generic.SlaveCore, long, long);
  public net.katsuster.ememu.generic.SlaveCore getSlaveCore(long, long);
  public boolean removeSlaveCore(net.katsuster.ememu.generic.SlaveCore);
  protected net.katsuster.ememu.generic.Bus$SlaveCoreAddress findSlaveCoreAddress(long, long);
  public void startAllSlaveCores();
  public void haltAllSlaveCores();
}
Compiled from "Bus.java"
class net.katsuster.ememu.generic.Bus$InvalidSlaveCoreAddress extends net.katsuster.ememu.generic.Bus$SlaveCoreAddress {
  final net.katsuster.ememu.generic.Bus this$0;
  public net.katsuster.ememu.generic.Bus$InvalidSlaveCoreAddress(net.katsuster.ememu.generic.Bus);
  public net.katsuster.ememu.generic.SlaveCore getCore();
  public boolean contains(long, long);
}
Compiled from "Bus.java"
class net.katsuster.ememu.generic.Bus$SlaveCoreAddress {
  final net.katsuster.ememu.generic.Bus this$0;
  public net.katsuster.ememu.generic.Bus$SlaveCoreAddress(net.katsuster.ememu.generic.Bus, net.katsuster.ememu.generic.SlaveCore, long, long);
  public net.katsuster.ememu.generic.SlaveCore getCore();
  public long getStartAddress();
  public long getEndAddress();
  public long length();
  public boolean contains(long, long);
}
Compiled from "BusMaster.java"
public interface net.katsuster.ememu.generic.BusMaster {
  public abstract net.katsuster.ememu.generic.MasterCore getMasterCore();
}
Compiled from "BusSlave.java"
public interface net.katsuster.ememu.generic.BusSlave {
  public abstract net.katsuster.ememu.generic.SlaveCore getSlaveCore();
}
Compiled from "CPU.java"
public abstract class net.katsuster.ememu.generic.CPU extends net.katsuster.ememu.generic.MasterCore implements net.katsuster.ememu.generic.INTDestination {
  public net.katsuster.ememu.generic.CPU();
  public boolean isEnabledDisasm();
  public void setEnabledDisasm(boolean);
  public boolean isPrintInstruction();
  public void setPrintInstruction(boolean);
  public boolean isPrintRegs();
  public void setPrintRegs(boolean);
  public boolean isRaisedInterrupt();
  public void setRaisedInterrupt(boolean);
  public boolean tryRead_a32(int, int);
  public byte read8_a32(int);
  public short read16_a32(int);
  public int read32_a32(int);
  public long read64_a32(int);
  public boolean tryWrite_a32(int, int);
  public void write8_a32(int, byte);
  public void write16_a32(int, short);
  public void write32_a32(int, int);
  public void write64_a32(int, long);
  public void printDisasm(net.katsuster.ememu.generic.Instruction, java.lang.String, java.lang.String);
  public void printInstruction(net.katsuster.ememu.generic.Instruction, java.lang.String, java.lang.String);
  public void printRegs();
  public abstract java.lang.String instructionToString(net.katsuster.ememu.generic.Instruction, java.lang.String, java.lang.String);
  public abstract java.lang.String regsToString();
  public abstract int getPC();
  public abstract void setPC(int);
  public abstract void nextPC(net.katsuster.ememu.generic.Instruction);
  public abstract void jumpRel(int);
  public abstract int getReg(int);
  public abstract void setReg(int, int);
  public abstract int getRegRaw(int);
  public abstract void setRegRaw(int, int);
  public abstract java.lang.String getRegName(int);
  public abstract void step();
  public void run();
}
Compiled from "Controller32.java"
public abstract class net.katsuster.ememu.generic.Controller32 extends net.katsuster.ememu.generic.SlaveCore {
  public static final int LEN_WORD;
  public static final int LEN_WORD_BITS;
  public net.katsuster.ememu.generic.Controller32();
  public void addReg(long, java.lang.String);
  public void addReg(long, java.lang.String, int);
  public void removeReg(long);
  public net.katsuster.ememu.generic.Reg32 getReg(long);
  public boolean isValidReg(long);
  public boolean tryRead(long, int);
  public boolean tryWrite(long, int);
  public boolean tryAccess(long, int);
  public int readWord(long);
  public void writeWord(long, int);
  public byte read8(long);
  public short read16(long);
  public int read32(long);
  public long read64(long);
  public void write8(long, byte);
  public void write16(long, short);
  public void write32(long, int);
  public void write64(long, long);
}
Compiled from "Core.java"
public interface net.katsuster.ememu.generic.Core extends java.lang.Runnable {
  public abstract boolean shouldHalt();
  public abstract void halt();
}
Compiled from "Flush16.java"
public class net.katsuster.ememu.generic.Flush16 extends net.katsuster.ememu.generic.SlaveCore {
  public static final int LEN_WORD;
  public static final int LEN_WORD_BITS;
  public static final int LEN_BLOCK;
  public net.katsuster.ememu.generic.Flush16(int);
  public int getSize();
  protected void checkAddress(long);
  public boolean tryRead(long, int);
  public boolean tryWrite(long, int);
  public boolean tryAccess(long, int);
  public byte read8(long);
  public short read16(long);
  public int read32(long);
  public long read64(long);
  public void write8(long, byte);
  public void write16(long, short);
  public void write32(long, int);
  public void write64(long, long);
  public short readWord(long);
  public void writeWord(long, short);
  protected net.katsuster.ememu.generic.Flush16$StateMachine getStateMachine();
  protected void setStateMachine(net.katsuster.ememu.generic.Flush16$StateMachine);
  protected int getBlockIndex(long);
  protected int getBlockAddress(long);
  protected void setupCFI();
  public void writeBuffer(long, int, short[]);
  public void eraseBlock(long);
  public void run();
  static net.katsuster.ememu.generic.Flush16$StateMachine access$000(net.katsuster.ememu.generic.Flush16);
  static net.katsuster.ememu.generic.Flush16$StateMachine access$100(net.katsuster.ememu.generic.Flush16);
  static net.katsuster.ememu.generic.Flush16$StateMachine access$200(net.katsuster.ememu.generic.Flush16);
  static int access$302(net.katsuster.ememu.generic.Flush16, int);
  static net.katsuster.ememu.generic.Flush16$StateMachine access$400(net.katsuster.ememu.generic.Flush16);
  static net.katsuster.ememu.generic.Flush16$StateMachine access$500(net.katsuster.ememu.generic.Flush16);
  static net.katsuster.ememu.generic.Flush16$StateMachine access$600(net.katsuster.ememu.generic.Flush16);
  static short[] access$702(net.katsuster.ememu.generic.Flush16, short[]);
  static short[] access$800(net.katsuster.ememu.generic.Flush16);
  static int access$902(net.katsuster.ememu.generic.Flush16, int);
  static int access$1000(net.katsuster.ememu.generic.Flush16);
  static short[] access$1100(net.katsuster.ememu.generic.Flush16);
  static int access$1200(net.katsuster.ememu.generic.Flush16);
  static int access$300(net.katsuster.ememu.generic.Flush16);
}
Compiled from "Flush16.java"
public abstract class net.katsuster.ememu.generic.Flush16$AbstractStateMachine implements net.katsuster.ememu.generic.Flush16$StateMachine {
  final net.katsuster.ememu.generic.Flush16 this$0;
  protected net.katsuster.ememu.generic.Flush16$AbstractStateMachine(net.katsuster.ememu.generic.Flush16);
  public void setup();
  public short readWord(long, int);
  public void writeWord(long, int, short);
  public void acceptCommand(long, int, short);
}
Compiled from "Flush16.java"
public class net.katsuster.ememu.generic.Flush16$SMEraseBlock extends net.katsuster.ememu.generic.Flush16$AbstractStateMachine {
  final net.katsuster.ememu.generic.Flush16 this$0;
  protected net.katsuster.ememu.generic.Flush16$SMEraseBlock(net.katsuster.ememu.generic.Flush16);
  public void setup();
  public short readWord(long, int);
  public void writeWord(long, int, short);
}
Compiled from "Flush16.java"
public class net.katsuster.ememu.generic.Flush16$SMReadArray extends net.katsuster.ememu.generic.Flush16$AbstractStateMachine {
  final net.katsuster.ememu.generic.Flush16 this$0;
  protected net.katsuster.ememu.generic.Flush16$SMReadArray(net.katsuster.ememu.generic.Flush16);
  public void setup();
  public short readWord(long, int);
  public void writeWord(long, int, short);
}
Compiled from "Flush16.java"
public class net.katsuster.ememu.generic.Flush16$SMReadCFI extends net.katsuster.ememu.generic.Flush16$AbstractStateMachine {
  final net.katsuster.ememu.generic.Flush16 this$0;
  protected net.katsuster.ememu.generic.Flush16$SMReadCFI(net.katsuster.ememu.generic.Flush16);
  public void setup();
  public short readWord(long, int);
  public void writeWord(long, int, short);
}
Compiled from "Flush16.java"
public class net.katsuster.ememu.generic.Flush16$SMReadStatus extends net.katsuster.ememu.generic.Flush16$AbstractStateMachine {
  final net.katsuster.ememu.generic.Flush16 this$0;
  protected net.katsuster.ememu.generic.Flush16$SMReadStatus(net.katsuster.ememu.generic.Flush16);
  public short readWord(long, int);
  public void writeWord(long, int, short);
}
Compiled from "Flush16.java"
public class net.katsuster.ememu.generic.Flush16$SMWriteBuffer extends net.katsuster.ememu.generic.Flush16$AbstractStateMachine {
  public static final int STATE_SETUP;
  public static final int STATE_WORD_COUNT;
  public static final int STATE_WRITE_START;
  public static final int STATE_WRITE_DATA;
  public static final int STATE_WRITE_CONFIRM;
  public static final int STATE_RETURN_STATUS;
  final net.katsuster.ememu.generic.Flush16 this$0;
  protected net.katsuster.ememu.generic.Flush16$SMWriteBuffer(net.katsuster.ememu.generic.Flush16);
  public void setup();
  public short readWord(long, int);
  public void writeWord(long, int, short);
}
Compiled from "Flush16.java"
public interface net.katsuster.ememu.generic.Flush16$StateMachine {
  public abstract void setup();
  public abstract short readWord(long, int);
  public abstract void writeWord(long, int, short);
}
Compiled from "INTC.java"
public interface net.katsuster.ememu.generic.INTC extends net.katsuster.ememu.generic.INTDestination {
  public abstract int getMaxINTSources();
  public abstract void setMaxINTSources(int);
  public abstract void connectINTSource(int, net.katsuster.ememu.generic.INTSource);
  public abstract void disconnectINTSource(int);
  public abstract net.katsuster.ememu.generic.INTSource getINTSource(int);
  public abstract int getSourcesStatus();
}
Compiled from "INTDestination.java"
public interface net.katsuster.ememu.generic.INTDestination {
  public abstract boolean isRaisedInterrupt();
  public abstract void setRaisedInterrupt(boolean);
}
Compiled from "INTSource.java"
public interface net.katsuster.ememu.generic.INTSource {
  public abstract net.katsuster.ememu.generic.INTDestination getINTDestination();
  public abstract void connectINTDestination(net.katsuster.ememu.generic.INTDestination);
  public abstract void disconnectINTDestination();
  public abstract boolean isAssert();
  public abstract java.lang.String getIRQMessage();
}
Compiled from "Instruction.java"
public abstract class net.katsuster.ememu.generic.Instruction {
  public net.katsuster.ememu.generic.Instruction(int, int);
  public void reuse(int, int);
  public int getInst();
  public boolean getBit(int);
  public int getField(int, int);
  public int getLength();
  public abstract java.lang.String toHex();
}
Compiled from "IntegerExt.java"
public class net.katsuster.ememu.generic.IntegerExt {
  public net.katsuster.ememu.generic.IntegerExt();
  public static boolean carryFrom(int, int);
  public static boolean borrowFrom(int, int);
  public static boolean overflowFrom(int, int, boolean);
  public static int compareUnsigned(int, int);
}
Compiled from "MasterCore.java"
public abstract class net.katsuster.ememu.generic.MasterCore extends net.katsuster.ememu.generic.AbstractCore implements net.katsuster.ememu.generic.RWCore {
  public net.katsuster.ememu.generic.MasterCore();
  public net.katsuster.ememu.generic.Bus getSlaveBus();
  public void setSlaveBus(net.katsuster.ememu.generic.Bus);
  public boolean tryRead(long, int);
  public byte read8(long);
  public short read16(long);
  public int read32(long);
  public long read64(long);
  public boolean tryWrite(long, int);
  public void write8(long, byte);
  public void write16(long, short);
  public void write32(long, int);
  public void write64(long, long);
}
Compiled from "NormalINTC.java"
public class net.katsuster.ememu.generic.NormalINTC implements net.katsuster.ememu.generic.INTSource,net.katsuster.ememu.generic.INTC {
  public net.katsuster.ememu.generic.NormalINTC();
  public net.katsuster.ememu.generic.NormalINTC(int);
  public net.katsuster.ememu.generic.INTDestination getINTDestination();
  public void connectINTDestination(net.katsuster.ememu.generic.INTDestination);
  public void disconnectINTDestination();
  public boolean isAssert();
  public java.lang.String getIRQMessage();
  public int getMaxINTSources();
  public void setMaxINTSources(int);
  public void connectINTSource(int, net.katsuster.ememu.generic.INTSource);
  public void disconnectINTSource(int);
  public net.katsuster.ememu.generic.INTSource getINTSource(int);
  public int getSourcesStatus();
  public boolean isRaisedInterrupt();
  public void setRaisedInterrupt(boolean);
}
Compiled from "NullINTDestination.java"
public class net.katsuster.ememu.generic.NullINTDestination implements net.katsuster.ememu.generic.INTDestination {
  public net.katsuster.ememu.generic.NullINTDestination();
  public boolean isRaisedInterrupt();
  public void setRaisedInterrupt(boolean);
}
Compiled from "NullINTSource.java"
public class net.katsuster.ememu.generic.NullINTSource implements net.katsuster.ememu.generic.INTSource {
  public net.katsuster.ememu.generic.NullINTSource();
  public net.katsuster.ememu.generic.INTDestination getINTDestination();
  public void connectINTDestination(net.katsuster.ememu.generic.INTDestination);
  public void disconnectINTDestination();
  public boolean isAssert();
  public java.lang.String getIRQMessage();
}
Compiled from "RAM.java"
public abstract class net.katsuster.ememu.generic.RAM extends net.katsuster.ememu.generic.SlaveCore {
  public net.katsuster.ememu.generic.RAM(int);
  public int getSize();
  protected abstract int getWordAddress(long);
  protected abstract int getWords();
  protected void checkAddress(long, int);
  public boolean tryRead(long, int);
  public boolean tryWrite(long, int);
  public boolean tryAccess(long, int);
  public void run();
}
Compiled from "RAM16.java"
public class net.katsuster.ememu.generic.RAM16 extends net.katsuster.ememu.generic.RAM {
  public static final int LEN_WORD;
  public static final int LEN_WORD_BITS;
  public net.katsuster.ememu.generic.RAM16(int);
  protected int getWordAddress(long);
  protected int getWords();
  public byte read8(long);
  public short read16(long);
  public int read32(long);
  public long read64(long);
  public void write8(long, byte);
  public void write16(long, short);
  public void write32(long, int);
  public void write64(long, long);
  public short readWord(long);
  public void writeWord(long, short);
}
Compiled from "RAM32.java"
public class net.katsuster.ememu.generic.RAM32 extends net.katsuster.ememu.generic.RAM {
  public static final int LEN_WORD;
  public static final int LEN_WORD_BITS;
  public net.katsuster.ememu.generic.RAM32(int);
  protected int getWordAddress(long);
  protected int getWords();
  public byte read8(long);
  public short read16(long);
  public int read32(long);
  public long read64(long);
  public void write8(long, byte);
  public void write16(long, short);
  public void write32(long, int);
  public void write64(long, long);
  public int readWord(long);
  public void writeWord(long, int);
}
Compiled from "RAM64.java"
public class net.katsuster.ememu.generic.RAM64 extends net.katsuster.ememu.generic.RAM {
  public static final int LEN_WORD;
  public static final int LEN_WORD_BITS;
  public net.katsuster.ememu.generic.RAM64(int);
  protected int getWordAddress(long);
  protected int getWords();
  public byte read8(long);
  public short read16(long);
  public int read32(long);
  public long read64(long);
  public void write8(long, byte);
  public void write16(long, short);
  public void write32(long, int);
  public void write64(long, long);
  public long readWord(long);
  public void writeWord(long, long);
}
Compiled from "RWCore.java"
public interface net.katsuster.ememu.generic.RWCore {
  public abstract boolean tryRead(long, int);
  public abstract byte read8(long);
  public abstract short read16(long);
  public abstract int read32(long);
  public abstract long read64(long);
  public abstract boolean tryWrite(long, int);
  public abstract void write8(long, byte);
  public abstract void write16(long, short);
  public abstract void write32(long, int);
  public abstract void write64(long, long);
}
Compiled from "Reg32.java"
public class net.katsuster.ememu.generic.Reg32 {
  public net.katsuster.ememu.generic.Reg32();
  public net.katsuster.ememu.generic.Reg32(java.lang.String, int);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public int getValue();
  public void setValue(int);
  public java.lang.String toString();
}
Compiled from "Reg32File.java"
public interface net.katsuster.ememu.generic.Reg32File {
  public abstract net.katsuster.ememu.generic.Reg32 getReg(int);
}
Compiled from "SlaveCore.java"
public abstract class net.katsuster.ememu.generic.SlaveCore extends net.katsuster.ememu.generic.AbstractCore implements net.katsuster.ememu.generic.RWCore {
  public static final long ADDR_MASK_8;
  public static final long ADDR_MASK_16;
  public static final long ADDR_MASK_32;
  public static final long ADDR_MASK_64;
  public static final long DATA_MASK_8;
  public static final long DATA_MASK_16;
  public static final long DATA_MASK_32;
  public static final long DATA_MASK_64;
  public net.katsuster.ememu.generic.SlaveCore();
  public net.katsuster.ememu.generic.Bus getMasterBus();
  public void setMasterBus(net.katsuster.ememu.generic.Bus);
  public static long getAddressMask(int);
  public static long getDataMask(int);
  public static long readMasked(long, long, int, int);
  public static long writeMasked(long, long, long, int, int);
}
Compiled from "Stage.java"
public class net.katsuster.ememu.generic.Stage {
  public net.katsuster.ememu.generic.Stage(net.katsuster.ememu.generic.CPU);
  public net.katsuster.ememu.generic.CPU getCore();
  public boolean tryRead_a32(int, int);
  public byte read8_a32(int);
  public short read16_a32(int);
  public int read32_a32(int);
  public long read64_a32(int);
  public boolean tryWrite_a32(int, int);
  public void write8_a32(int, byte);
  public void write16_a32(int, short);
  public void write32_a32(int, int);
  public void write64_a32(int, long);
  public void printDisasm(net.katsuster.ememu.generic.Instruction, java.lang.String, java.lang.String);
  public int getPC();
  public void setPC(int);
  public void nextPC(net.katsuster.ememu.generic.Instruction);
  public void jumpRel(int);
  public int getReg(int);
  public void setReg(int, int);
  public int getRegRaw(int);
  public void setRegRaw(int, int);
  public java.lang.String getRegName(int);
}
Compiled from "AllTest.java"
public class net.katsuster.ememu.test.AllTest {
  protected net.katsuster.ememu.test.AllTest();
  public static void main(java.lang.String[]);
}
Compiled from "BitOpTest.java"
public class net.katsuster.ememu.test.BitOpTest {
  public net.katsuster.ememu.test.BitOpTest();
  public void testGetField32() throws java.lang.Exception;
  public void testSetField32() throws java.lang.Exception;
  public void testToInt() throws java.lang.Exception;
  public void testSignExt64() throws java.lang.Exception;
}
Compiled from "IntegerExtTest.java"
public class net.katsuster.ememu.test.IntegerExtTest {
  public net.katsuster.ememu.test.IntegerExtTest();
  public void testCarryFrom() throws java.lang.Exception;
  public void testBorrowFrom() throws java.lang.Exception;
  public void testOverflowFrom() throws java.lang.Exception;
  public void testCompareUnsigned() throws java.lang.Exception;
}
Compiled from "RAMTest.java"
public class net.katsuster.ememu.test.RAMTest {
  public net.katsuster.ememu.test.RAMTest();
  public void testAlignedAccessRAM() throws java.lang.Exception;
  public void alignedAccess(long, net.katsuster.ememu.generic.SlaveCore) throws java.lang.Exception;
  public void alignedAccess8(long, net.katsuster.ememu.generic.SlaveCore) throws java.lang.Exception;
  public void alignedAccess16(long, net.katsuster.ememu.generic.SlaveCore) throws java.lang.Exception;
  public void alignedAccess32(long, net.katsuster.ememu.generic.SlaveCore) throws java.lang.Exception;
  public void alignedAccess64(long, net.katsuster.ememu.generic.SlaveCore) throws java.lang.Exception;
}
Compiled from "SlaveCoreTest.java"
public class net.katsuster.ememu.test.SlaveCoreTest {
  public net.katsuster.ememu.test.SlaveCoreTest();
  public void testReadMasked() throws java.lang.Exception;
  public void testWriteMasked() throws java.lang.Exception;
}
Compiled from "ARMLinuxLoader.java"
public class net.katsuster.ememu.ui.ARMLinuxLoader {
  public static final int ATAG_NONE;
  public static final int ATAG_CORE;
  public static final int ATAG_MEM;
  public static final int ATAG_VIDEOTEXT;
  public static final int ATAG_RAMDISK;
  public static final int ATAG_INITRD2;
  public static final int ATAG_SERIAL;
  public static final int ATAG_REVISION;
  public static final int ATAG_VIDEOLFB;
  public static final int ATAG_CMDLINE;
  public net.katsuster.ememu.ui.ARMLinuxLoader();
  public static int loadURIResource(java.net.URI, net.katsuster.ememu.generic.CPU, int);
  public static void bootFromURI(net.katsuster.ememu.arm.core.ARMv5, net.katsuster.ememu.generic.RAM, java.lang.String, java.lang.String, java.lang.String);
  public static void bootFromURIWithDT(net.katsuster.ememu.arm.core.ARMv5, net.katsuster.ememu.generic.RAM, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
}
Compiled from "ContentBox.java"
public class net.katsuster.ememu.ui.ContentBox {
  public net.katsuster.ememu.ui.ContentBox();
  public net.katsuster.ememu.ui.ContentBox(int, int, int, int);
  public net.katsuster.ememu.ui.ContentBox(int, int, int, int, int, int, int, int);
  public net.katsuster.ememu.ui.ContentBox(int, int, int, int, int, int, int, int, int, int, int, int);
  public int getX();
  public void setX(int);
  public int getY();
  public void setY(int);
  public int getWidth();
  public void setWidth(int);
  public int getHeight();
  public void setHeight(int);
  public java.awt.Rectangle getBounds();
  public void setBounds(int, int, int, int);
  public void setBounds(java.awt.Rectangle);
  public net.katsuster.ememu.ui.Space getMargin();
  public void setMargin(int, int, int, int);
  public void setMargin(net.katsuster.ememu.ui.Space);
  public java.awt.Rectangle getBorder();
  public net.katsuster.ememu.ui.Space getPadding();
  public void setPadding(int, int, int, int);
  public void setPadding(net.katsuster.ememu.ui.Space);
  public java.awt.Rectangle getContents();
}
Compiled from "DecoratedChar.java"
public class net.katsuster.ememu.ui.DecoratedChar {
  public static final java.awt.Color DEFAULT_FOREGROUND;
  public static final java.awt.Color DEFAULT_BACKGROUND;
  public static final java.awt.Font DEFAULT_FONT;
  public net.katsuster.ememu.ui.DecoratedChar();
  public net.katsuster.ememu.ui.DecoratedChar(char, java.awt.Color, java.awt.Color, java.awt.Font);
  public void copy(net.katsuster.ememu.ui.DecoratedChar);
  public void copyAttributes(net.katsuster.ememu.ui.DecoratedChar);
  public char getChar();
  public void setChar(char);
  public java.awt.Color getForeground();
  public void setForeground(java.awt.Color);
  public java.awt.Color getBackground();
  public void setBackground(java.awt.Color);
  public boolean getNegaMode();
  public void setNegaMode(boolean);
  public java.awt.Font getFont();
  public void setFont(java.awt.Font);
  static {};
}
Compiled from "Emulator.java"
public class net.katsuster.ememu.ui.Emulator extends java.lang.Thread {
  public net.katsuster.ememu.ui.Emulator();
  public net.katsuster.ememu.generic.CPU getMainCPU();
  public net.katsuster.ememu.generic.Bus getMainBus();
  public net.katsuster.ememu.generic.RAM getMainRAM();
  public net.katsuster.ememu.board.ARMVersatile getBoard();
  public net.katsuster.ememu.ui.LinuxOption getOption();
  public void setOption(net.katsuster.ememu.ui.LinuxOption);
  public void run();
  public void halt();
}
Compiled from "ForkedPrintStream.java"
public class net.katsuster.ememu.ui.ForkedPrintStream extends java.io.PrintStream {
  public net.katsuster.ememu.ui.ForkedPrintStream(java.io.PrintStream, java.io.PrintStream);
  public java.io.PrintStream append(char);
  public java.io.PrintStream append(java.lang.CharSequence);
  public java.io.PrintStream append(java.lang.CharSequence, int, int);
  public boolean checkError();
  public void close();
  public void flush();
  public java.io.PrintStream format(java.util.Locale, java.lang.String, java.lang.Object...);
  public java.io.PrintStream format(java.lang.String, java.lang.Object...);
  public void print(boolean);
  public void print(char);
  public void print(char[]);
  public void print(double);
  public void print(float);
  public void print(int);
  public void print(long);
  public void print(java.lang.Object);
  public void print(java.lang.String);
  public java.io.PrintStream printf(java.util.Locale, java.lang.String, java.lang.Object...);
  public java.io.PrintStream printf(java.lang.String, java.lang.Object...);
  public void println();
  public void println(boolean);
  public void println(char);
  public void println(char[]);
  public void println(double);
  public void println(float);
  public void println(int);
  public void println(long);
  public void println(java.lang.Object);
  public void println(java.lang.String);
  public void write(byte[], int, int);
  public void write(int);
  public java.lang.Appendable append(char) throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException;
}
Compiled from "GridBagLayoutHelper.java"
public class net.katsuster.ememu.ui.GridBagLayoutHelper {
  public static void add(javax.swing.JPanel, java.awt.GridBagLayout, javax.swing.JComponent, int, int, int, int);
}
Compiled from "LinuxOption.java"
public class net.katsuster.ememu.ui.LinuxOption {
  public net.katsuster.ememu.ui.LinuxOption();
  public java.net.URI getDeviceTreeImage();
  public void setDeviceTreeImage(java.io.File);
  public void setDeviceTreeImage(java.net.URI);
  public java.net.URI getKernelImage();
  public void setKernelImage(java.io.File);
  public void setKernelImage(java.net.URI);
  public java.net.URI getInitrdImage();
  public void setInitrdImage(java.io.File);
  public void setInitrdImage(java.net.URI);
  public java.lang.String getCommandLine();
  public void setCommandLine(java.lang.String);
  public java.lang.String toString();
}
Compiled from "LinuxOptionPanel.java"
public class net.katsuster.ememu.ui.LinuxOptionPanel extends javax.swing.JPanel {
  public net.katsuster.ememu.ui.LinuxOptionPanel();
  public net.katsuster.ememu.ui.LinuxOptionPanel(net.katsuster.ememu.ui.LinuxOption);
  public net.katsuster.ememu.ui.LinuxOption getOption();
  protected void updateOption();
  static java.io.File access$000(net.katsuster.ememu.ui.LinuxOptionPanel);
  static javax.swing.JTextField access$100(net.katsuster.ememu.ui.LinuxOptionPanel);
  static javax.swing.JTextField access$200(net.katsuster.ememu.ui.LinuxOptionPanel);
  static javax.swing.JTextField access$300(net.katsuster.ememu.ui.LinuxOptionPanel);
  static java.io.File access$002(net.katsuster.ememu.ui.LinuxOptionPanel, java.io.File);
}
Compiled from "LinuxOptionPanel.java"
class net.katsuster.ememu.ui.LinuxOptionPanel$ButtonListener implements java.awt.event.ActionListener {
  net.katsuster.ememu.ui.LinuxOptionPanel parent;
  final net.katsuster.ememu.ui.LinuxOptionPanel this$0;
  public net.katsuster.ememu.ui.LinuxOptionPanel$ButtonListener(net.katsuster.ememu.ui.LinuxOptionPanel, net.katsuster.ememu.ui.LinuxOptionPanel);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Main.java"
public class net.katsuster.ememu.ui.Main {
  public net.katsuster.ememu.ui.Main();
  public static void usage(java.lang.String[]);
  public static void main(java.lang.String[]);
  public static void mainConsole(net.katsuster.ememu.ui.LinuxOption);
}
Compiled from "MainApplet.java"
public class net.katsuster.ememu.ui.MainApplet extends javax.swing.JApplet {
  public static final java.lang.String PARAM_PROXY_HOST;
  public static final java.lang.String PARAM_PROXY_PORT;
  public static final java.lang.String PARAM_KERNEL_IMAGE;
  public static final java.lang.String PARAM_INITRD_IMAGE;
  public static final java.lang.String PARAM_COMMAND_LINE;
  public net.katsuster.ememu.ui.MainApplet();
  public void init();
  public void start();
  public void stop();
  public void destroy();
  static net.katsuster.ememu.ui.StdoutPanel access$000(net.katsuster.ememu.ui.MainApplet);
  static {};
}
Compiled from "MainApplet.java"
class net.katsuster.ememu.ui.MainApplet$ButtonListener implements java.awt.event.ActionListener {
  final net.katsuster.ememu.ui.MainApplet this$0;
  public net.katsuster.ememu.ui.MainApplet$ButtonListener(net.katsuster.ememu.ui.MainApplet);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "MainMenuBar.java"
public class net.katsuster.ememu.ui.MainMenuBar extends javax.swing.JMenuBar {
  public net.katsuster.ememu.ui.MainMenuBar(java.awt.event.ActionListener);
}
Compiled from "MainWindow.java"
public class net.katsuster.ememu.ui.MainWindow extends javax.swing.JFrame {
  public net.katsuster.ememu.ui.MainWindow(net.katsuster.ememu.ui.LinuxOption);
  public void start();
  public void stop();
  static net.katsuster.ememu.ui.StdoutPanel access$000(net.katsuster.ememu.ui.MainWindow);
}
Compiled from "MainWindow.java"
class net.katsuster.ememu.ui.MainWindow$ButtonListener implements java.awt.event.ActionListener {
  final net.katsuster.ememu.ui.MainWindow this$0;
  public net.katsuster.ememu.ui.MainWindow$ButtonListener(net.katsuster.ememu.ui.MainWindow);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ProxyOption.java"
public class net.katsuster.ememu.ui.ProxyOption {
  public net.katsuster.ememu.ui.ProxyOption();
  public java.net.URI getProxyHost();
  public void setProxyHost(java.net.URI);
  public void setProxyHost(java.lang.String);
  public int getProxyPort();
  public void setProxyPort(int);
  public void setProxyPort(java.lang.String);
  public java.lang.String toString();
}
Compiled from "ProxyOptionPanel.java"
public class net.katsuster.ememu.ui.ProxyOptionPanel extends javax.swing.JPanel {
  public net.katsuster.ememu.ui.ProxyOptionPanel();
  public net.katsuster.ememu.ui.ProxyOptionPanel(net.katsuster.ememu.ui.ProxyOption);
  public net.katsuster.ememu.ui.ProxyOption getOption();
  protected void updateOption();
  protected java.awt.Dimension calcPreferredSize(int);
}
Compiled from "Space.java"
public class net.katsuster.ememu.ui.Space {
  public int left;
  public int top;
  public int right;
  public int bottom;
  public net.katsuster.ememu.ui.Space();
  public net.katsuster.ememu.ui.Space(int);
  public net.katsuster.ememu.ui.Space(net.katsuster.ememu.ui.Space);
  public net.katsuster.ememu.ui.Space(int, int, int, int);
}
Compiled from "StdoutPanel.java"
public class net.katsuster.ememu.ui.StdoutPanel extends javax.swing.JPanel {
  public net.katsuster.ememu.ui.StdoutPanel(java.awt.event.ActionListener);
  public void clear();
  public void close();
  static {};
}
Compiled from "SystemPane.java"
public class net.katsuster.ememu.ui.SystemPane extends javax.swing.JPanel {
  public net.katsuster.ememu.ui.SystemPane(java.io.PrintStream);
  public java.io.PrintStream getOutputStream();
  public void clear();
  public void close();
  static javax.swing.JTextArea access$000(net.katsuster.ememu.ui.SystemPane);
  static java.io.InputStreamReader access$100(net.katsuster.ememu.ui.SystemPane);
}
Compiled from "SystemPane.java"
class net.katsuster.ememu.ui.SystemPane$1 implements java.lang.Runnable {
  final net.katsuster.ememu.ui.SystemPane this$0;
  net.katsuster.ememu.ui.SystemPane$1(net.katsuster.ememu.ui.SystemPane);
  public void run();
}
Compiled from "SystemPane.java"
class net.katsuster.ememu.ui.SystemPane$TextDrainer implements java.lang.Runnable {
  final net.katsuster.ememu.ui.SystemPane this$0;
  public net.katsuster.ememu.ui.SystemPane$TextDrainer(net.katsuster.ememu.ui.SystemPane);
  public void run();
}
Compiled from "SystemPane.java"
class net.katsuster.ememu.ui.SystemPane$TextDrainer$StringAppender implements java.lang.Runnable {
  final net.katsuster.ememu.ui.SystemPane$TextDrainer this$1;
  public net.katsuster.ememu.ui.SystemPane$TextDrainer$StringAppender(net.katsuster.ememu.ui.SystemPane$TextDrainer, java.lang.String);
  public void run();
}
Compiled from "VTInnerPane.java"
public class net.katsuster.ememu.ui.VTInnerPane extends javax.swing.JComponent implements javax.swing.event.ChangeListener,java.awt.event.ComponentListener {
  public net.katsuster.ememu.ui.VTInnerPane(net.katsuster.ememu.ui.VirtualTerminal);
  public void setForeground(java.awt.Color);
  public void setBackground(java.awt.Color);
  public void setFont(java.awt.Font);
  public net.katsuster.ememu.ui.ContentBox getBoxScreen();
  public net.katsuster.ememu.ui.ContentBox getBoxChar();
  public int getColumns();
  public void setColumns(int);
  public int getLines();
  protected void setLines(int);
  public int getMaxLines();
  protected void setMaxLines(int);
  public int getCurrentLine();
  protected void setCurrentLine(int);
  public int getScreenTopLine();
  public int getScreenBottomLine();
  public int getCursorX();
  public void setCursorX(int);
  public int getCursorY();
  public void setCursorY(int);
  public void setCursorLocation(int, int);
  public void previousLine();
  public void nextLine();
  public void scrollLine();
  public net.katsuster.ememu.ui.DecoratedChar getCurrentDecoration();
  public net.katsuster.ememu.ui.DecoratedChar getDecoratedChar(int, int);
  public char getChar(int, int);
  public void setChar(int, int, char);
  public void eraseChar(int, int);
  public java.awt.Color[] getCurrentPalette();
  public void setCurrentPalette(java.awt.Color[]);
  protected char readNext(java.io.InputStream) throws java.io.IOException;
  protected void writeBack(char);
  protected int readParam(java.io.InputStream, int) throws java.io.IOException;
  protected int getParameter(java.util.List<java.lang.Integer>, int, int);
  protected boolean layoutEscape(java.io.InputStream) throws java.io.IOException;
  protected boolean layoutEscapeCSI(java.io.InputStream) throws java.io.IOException;
  protected boolean layoutEscapeCSIDEC(java.io.InputStream) throws java.io.IOException;
  protected void layoutNormalChar(java.io.InputStream) throws java.io.IOException;
  public void layoutChars(java.io.InputStream) throws java.io.IOException;
  protected void drawAll(java.awt.Graphics2D, int);
  public void paint(java.awt.Graphics);
  public void stateChanged(javax.swing.event.ChangeEvent);
  public void componentResized(java.awt.event.ComponentEvent);
  public void componentMoved(java.awt.event.ComponentEvent);
  public void componentShown(java.awt.event.ComponentEvent);
  public void componentHidden(java.awt.event.ComponentEvent);
  static net.katsuster.ememu.ui.VirtualTerminal access$000(net.katsuster.ememu.ui.VTInnerPane);
  static int access$100(net.katsuster.ememu.ui.VTInnerPane);
}
Compiled from "VTInnerPane.java"
class net.katsuster.ememu.ui.VTInnerPane$1 implements java.lang.Runnable {
  final net.katsuster.ememu.ui.VTInnerPane this$0;
  net.katsuster.ememu.ui.VTInnerPane$1(net.katsuster.ememu.ui.VTInnerPane);
  public void run();
}
Compiled from "VirtualTerminal.java"
public class net.katsuster.ememu.ui.VirtualTerminal extends javax.swing.JPanel implements java.awt.event.MouseListener,java.awt.event.MouseMotionListener,java.awt.event.MouseWheelListener,java.awt.event.KeyListener {
  public net.katsuster.ememu.ui.VirtualTerminal();
  public javax.swing.JScrollBar getScrollBar();
  public java.io.InputStream getInputStream();
  public java.io.OutputStream getOutputStream();
  public boolean shouldHalt();
  public void setHalt(boolean);
  public void close();
  public int getStartLine();
  public void setStartLine(int);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mouseWheelMoved(java.awt.event.MouseWheelEvent);
  public void keyTyped(java.awt.event.KeyEvent);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  static java.io.BufferedInputStream access$000(net.katsuster.ememu.ui.VirtualTerminal);
  static net.katsuster.ememu.ui.VTInnerPane access$100(net.katsuster.ememu.ui.VirtualTerminal);
}
Compiled from "VirtualTerminal.java"
class net.katsuster.ememu.ui.VirtualTerminal$TextDrainer implements java.lang.Runnable {
  final net.katsuster.ememu.ui.VirtualTerminal this$0;
  public net.katsuster.ememu.ui.VirtualTerminal$TextDrainer(net.katsuster.ememu.ui.VirtualTerminal);
  public void run();
}
Compiled from "VirtualTerminal.java"
class net.katsuster.ememu.ui.VirtualTerminal$TextDrainer$Painter implements java.lang.Runnable {
  net.katsuster.ememu.ui.VTInnerPane pane;
  final net.katsuster.ememu.ui.VirtualTerminal$TextDrainer this$1;
  public net.katsuster.ememu.ui.VirtualTerminal$TextDrainer$Painter(net.katsuster.ememu.ui.VirtualTerminal$TextDrainer, net.katsuster.ememu.ui.VTInnerPane);
  public void run();
}
