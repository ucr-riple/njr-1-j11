/**
 * Copyright 2010 Andy Turner, The University of Leeds, UK
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package uk.ac.leeds.ccg.andyt.generic.math;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.Map.Entry;
import java.util.TreeMap;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Andy
 */
public class Generic_BigIntegerTest {

    public Generic_BigIntegerTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

//    /**
//     * Test of init_Factorial_TreeMap method, of class Generic_BigInteger.
//     */
//    @Test
//    public void testInit_Factorial_TreeMap() {
//        System.out.println("init_Factorial_TreeMap");
//        Generic_BigInteger instance = new Generic_BigInteger();
//        instance.init_Factorial_TreeMap();
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
    /**
     * Test of ceiling method, of class Generic_BigInteger.
     */
    @Test
    public void testCeiling() {
        System.out.println("ceiling");
        System.out.println("ceiling(x)");
        BigDecimal x = null;
        BigInteger expResult = null;
        BigInteger result = null;
        // Test 1
        System.out.println("Test 1");
        x = new BigDecimal("1.0000000000000000000000000000000000000000000001");
        expResult = new BigInteger("2");
        result = Generic_BigInteger.ceiling(x);
        printTestFloor(x, result);
        assertEquals(expResult, result);
        // Test 1
        System.out.println("Test 1");
        x = new BigDecimal("-1.0000000000000000000000000000000000000000000001");
        expResult = new BigInteger("-2");
        result = Generic_BigInteger.ceiling(x);
        printTestFloor(x, result);
        assertEquals(expResult, result);
    }

    /**
     * For printing out individual tests of testCeiling()
     * @param x
     * @param result
     */
    private void printTestCeiling(
            BigDecimal x,
            BigInteger result) {
        System.out.println("x " + x);
        System.out.println("result " + result);
    }

    /**
     * Test of floor method, of class Generic_BigInteger.
     */
    @Test
    public void testFloor() {
        System.out.println("floor");
        System.out.println("floor(x)");
        BigDecimal x = null;
        BigInteger expResult = null;
        BigInteger result = null;
        // Test 1
        System.out.println("Test 1");
        x = new BigDecimal("1");
        result = Generic_BigInteger.floor(x);
        expResult = new BigInteger("1");
        printTestFloor(x, result);
        assertEquals(expResult, result);
        // Test 2
        System.out.println("Test 2");
        x = new BigDecimal("-1");
        result = Generic_BigInteger.floor(x);
        expResult = new BigInteger("-1");
        printTestFloor(x, result);
        assertEquals(expResult, result);
        // Test 3
        System.out.println("Test 3");
        x = new BigDecimal("1.00000000000000000000000000000000000000000000001");
        result = Generic_BigInteger.floor(x);
        expResult = new BigInteger("1");
        printTestFloor(x, result);
        assertEquals(expResult, result);
        // Test 4
        System.out.println("Test 4");
        x = new BigDecimal("-1.0000000000000000000000000000000000000000000001");
        result = Generic_BigInteger.floor(x);
        expResult = new BigInteger("-1");
        printTestFloor(x, result);
        assertEquals(expResult, result);
    }

    /**
     * For printing out individual tests of testFloor()
     * @param x
     * @param result
     */
    private void printTestFloor(
            BigDecimal x,
            BigInteger result) {
        System.out.println("x " + x);
        System.out.println("result " + result);
    }

    /**
     * Test of max method, of class Generic_BigInteger.
     */
    @Test
    public void testMax() {
        System.out.println("max");
        BigInteger x = null;
        BigInteger y = null;
        BigInteger expResult = null;
        BigInteger result = null;
        // Test 1
        System.out.println("Test 1");
        x = new BigInteger("1000000000000000000000000000000000000000000000001");
        y = new BigInteger("1000000000000000000000000000000000000000000000002");
        expResult = new BigInteger(
                "1000000000000000000000000000000000000000000000002");
        result = Generic_BigInteger.max(x, y);
        printTestMax(x, y, result);
        assertEquals(expResult, result);
        // Test 2
        System.out.println("Test 2");
        x = new BigInteger("1000000000000000000000000000000000000000000000001");
        y = new BigInteger("-100000000000000000000000000000000000000000000002");
        expResult = new BigInteger(
                "1000000000000000000000000000000000000000000000001");
        result = Generic_BigInteger.max(x, y);
        printTestMax(x, y, result);
        assertEquals(expResult, result);
    }

    /**
     * For printing out individual tests of testGetMax()
     * @param x
     * @param y
     * @param result
     */
    private void printTestMax(
            BigInteger x,
            BigInteger y,
            BigInteger result) {
        System.out.println("x " + x);
        System.out.println("y " + y);
        System.out.println("result " + result);
    }

    /**
     * Test of min method, of class Generic_BigInteger.
     */
    @Test
    public void testMin() {
        System.out.println("min");
        BigInteger x = null;
        BigInteger y = null;
        BigInteger expResult = null;
        BigInteger result = null;
        // Test 1
        System.out.println("Test 1");
        x = new BigInteger("1000000000000000000000000000000000000000000000001");
        y = new BigInteger("1000000000000000000000000000000000000000000000002");
        expResult = new BigInteger(
                "1000000000000000000000000000000000000000000000001");
        result = Generic_BigInteger.min(x, y);
        printTestMin(x, y, result);
        assertEquals(expResult, result);
        // Test 2
        System.out.println("Test 2");
        x = new BigInteger("1000000000000000000000000000000000000000000000001");
        y = new BigInteger("-100000000000000000000000000000000000000000000002");
        expResult = new BigInteger(
                "-100000000000000000000000000000000000000000000002");
        result = Generic_BigInteger.min(x, y);
        printTestMin(x, y, result);
        assertEquals(expResult, result);
    }

    /**
     * For printing out individual tests of testGetMin()
     * @param x
     * @param y
     * @param result
     */
    private void printTestMin(
            BigInteger x,
            BigInteger y,
            BigInteger result) {
        System.out.println("x " + x);
        System.out.println("y " + y);
        System.out.println("result " + result);
    }

    /**
     * Test of factorial method, of class Generic_BigInteger.
     */
    @Test
    public void testFactorial() {
        System.out.println("factorial");
        System.out.println("factorial(x)");
        Integer x = null;
        Generic_BigInteger a_Generic_BigInteger;
        BigInteger expResult = null;
        // Test 1
        System.out.println("Test 1");
        x = 123;
        a_Generic_BigInteger = new Generic_BigInteger();
        BigInteger result = a_Generic_BigInteger.factorial(x);
        expResult = new BigInteger(
                "12146304367025329675766243241881295855454217088483382315328918"
                + "161829235892362167668831156960612640202170735835221294047782"
                + "591091570411651472186029519906261646730733907419814952960000"
                + "000000000000000000000000");
        printTestFactorial(x, result);
        assertEquals(expResult, result);
    }

    /**
     * For printing out individual tests of testFactorial()
     * @param x
     * @param result
     */
    private void printTestFactorial(
            int x,
            BigInteger result) {
        System.out.println("x " + x);
        System.out.println("result " + result);
    }

    /**
     * Test of power method, of class Generic_BigInteger.
     */
    @Test
    public void testPower_4args_1() {
        System.out.println("power");
        System.out.println("power(x,y,decimalPlaces,a_RoundingMode)");
        BigInteger x = null;
        int y = 0;
        int decimalPlaces = 0;
        RoundingMode a_RoundingMode = null;
        BigDecimal expResult = null;
        BigDecimal result = null;
        int comp;
        // Test 1
        System.out.println("Test 1");
        x = new BigInteger("100");
        y = 20;
        decimalPlaces = 0;
        a_RoundingMode = RoundingMode.HALF_UP;
        expResult = new BigDecimal("10000000000000000000000000000000000000000");
        result = Generic_BigInteger.power(x, y, decimalPlaces, a_RoundingMode);
        printTestPower_4args_1(x, y, decimalPlaces, a_RoundingMode, result);
        comp = expResult.compareTo(result);
        assertEquals(comp, 0);
        // Test 2
        System.out.println("Test 2");
        x = new BigInteger("100");
        y = -20;
        decimalPlaces = 100;
        a_RoundingMode = RoundingMode.HALF_UP;
        expResult = new BigDecimal(
                "0.0000000000000000000000000000000000000001");
        result = Generic_BigInteger.power(x, y, decimalPlaces, a_RoundingMode);
        printTestPower_4args_1(x, y, decimalPlaces, a_RoundingMode, result);
        comp = expResult.compareTo(result);
        assertEquals(comp, 0);
    }

    /**
     * For printing out individual tests of testPower_4args_1()
     * @param x
     * @param y
     * @param decimalPlaces
     * @param a_RoundingMode
     * @param result
     */
    private void printTestPower_4args_1(
            BigInteger x,
            int y,
            int decimalPlaces,
            RoundingMode a_RoundingMode,
            BigDecimal result) {
        System.out.println("x " + x);
        System.out.println("y " + y);
        System.out.println("decimalPlaces " + decimalPlaces);
        System.out.println("a_RoundingMode " + a_RoundingMode);
        System.out.println("result " + result);
    }

    /**
     * Test of power method, of class Generic_BigInteger.
     * Currently this is testing powers of 2:
     * 2^4096
     * 2^65536
     */
    @Test
    public void testPower_4args_2() {
        System.out.println("power");
        System.out.println("power(x,y,decimalPlaces,a_RoundingMode)");
        BigInteger x = null;
        long y;
        int decimalPlaces;
        RoundingMode a_RoundingMode = null;
        BigDecimal expResult = null;
        BigDecimal result = null;
        // Test 1
        System.out.println("Test 1");
        decimalPlaces = 0;
        a_RoundingMode = RoundingMode.HALF_UP;
        x = new BigInteger("2");
        y = 4096;
        expResult = new BigDecimal(
                "10443888814131525066917527107166243825799642490473837803842334"
                + "832839539079715574568488268119349975583408901067144392628379"
                + "875734381857936072632360878513652779459569765437099983403615"
                + "901343837183144280700118559462263763188393977127456723346843"
                + "445866174968079087058037040712840487401186091144679777835980"
                + "290066869389768817877859469056301902609405995794534328234693"
                + "030266964430590250159723998677142155416938355598852914863182"
                + "379144344967340878118726394964751001890413490084170616750936"
                + "683338505510329720882695507699836163694119330152137968258371"
                + "880918336567512213184928463681255502259983004123447848625956"
                + "744921946170238065059132456108257318353800876086221028342701"
                + "976982023131690176780066751954850799216364193702853751247840"
                + "149071591354599827905133996115517942711068311340905842728842"
                + "797915548497829543235345170652232690613949059876930021229633"
                + "956877828789484406160074129456749198230505716423771548163213"
                + "806310459029161369267083428564407304478999719017814657634732"
                + "238502672530598997959960907994692017746248177184498674556592"
                + "501783290704731194331655508075682218465717463732968849128195"
                + "203174570024409266169108741483850784119298045229818573389776"
                + "481031260859030013024134671897266732164915111316029207817380"
                + "33436090243804708340403154190336");
        result = Generic_BigInteger.power(x, y, decimalPlaces, a_RoundingMode);
        printTestPower_4args_2(x, y, decimalPlaces, a_RoundingMode, result);
        assertEquals(expResult, result);
        // Test 2
        System.out.println("Test 2");
        x = new BigInteger("2");
        y = 65536;
        expResult = new BigDecimal(
                "20035299304068464649790723515602557504478254755697514192650169"
                + "737108940595563114530895061308809333481010382343429072631818"
                + "229493821188126688695063647615470291650418719163515879663472"
                + "194429309279820843091048559905701593189596395248633723672030"
                + "029169695921561087649488892540908059114570376752085002066715"
                + "637023661263597471448071117748158809141357427209671901518362"
                + "825606180914588526998261414250301233911082736038437678764490"
                + "432059603791244909057075603140350761625624760318637931264847"
                + "037437829549756137709816046144133086921181024859591523801953"
                + "310302921628001605686701056516467505680387415294638422448452"
                + "925373614425336143737290883037946012747249584148649159306472"
                + "520151556939226281806916507963810641322753072671439981585088"
                + "112926289011342377827055674210800700652839633221550778312142"
                + "885516755540733451072131124273995629827197691500548839052238"
                + "043570458481979563931578535100189920000241419637068135598404"
                + "640394721940160695176901561197269823378900176415171900511334"
                + "663068981402193834814354263873065395529696913880241581618595"
                + "611006403621197961018595348027871672001226046424923851113934"
                + "004643516238675670787452594646709038865477434832178970127644"
                + "555294090920219595857516229733335761595523948852975799540284"
                + "719435299135437637059869289137571537400019863943324648900525"
                + "431066296691652434191746913896324765602894151997754777031380"
                + "647813423095961909606545913008901888875880847336259560654448"
                + "885014473357060588170901621084997145295683440619796905654698"
                + "136311620535793697914032363284962330464210661362002201757878"
                + "518574091620504897117818204001872829399434461862243280098373"
                + "237649318147898481194527130074402207656809103762039992034920"
                + "239066262644919091679854615157788390603977207592793788522412"
                + "943010174580868622633692847258514030396155585643303854506886"
                + "522131148136384083847782637904596071868767285097634712719888"
                + "906804782432303947186505256609781507298611414303058169279249"
                + "714091610594171853522758875044775922183011587807019755357222"
                + "414000195481020056617735897814995323252085897534635470077866"
                + "904064290167638081617405504051176700936732028045493390279924"
                + "918673065399316407204922384748152806191669009338057321208163"
                + "507076343516698696250209690231628593500718741905791612415368"
                + "975148082619048479465717366010058924766554458408383347905441"
                + "448176842553272073155863493476051374197795251903650321980201"
                + "087647383686825310251833775339088614261848003740080822381040"
                + "764688784716475529453269476617004244610633112380211345886945"
                + "322001165640763270230742924260515828110703870183453245676356"
                + "259514300320374327407808790562836634069650308442258559670392"
                + "718694611585137933864756997485686700798239606043934788508616"
                + "492603049450617434123658283521448067266768418070837548622114"
                + "082365798029612000274413244384324023312574035450193524287764"
                + "308802328508558860899627744581646808578751158070147437638679"
                + "769550499916439982843572904153781434388473034842619033888414"
                + "940313661398542576355771053355802066221855770600825512888933"
                + "322264362819848386132395706761914096385338323743437588308592"
                + "337222846442879962456054769324289984326526773783731732880632"
                + "107532112386806046747084280511664887090847702912081611049125"
                + "555983223662448685566514026846412096949825905655192161881043"
                + "412268389962830716548685255369148502995396755039549383718534"
                + "059000961874894739928804324963731657538036735867101757839948"
                + "184717984982469480605320819960661834340124760966395197780214"
                + "411997525467040806084993441782562850927265237098986515394621"
                + "930046073645079262129759176982938923670151709920915315678144"
                + "397912484757062378046000099182933213068805700465914583872080"
                + "880168874458355579262584651247630871485663135289341661174906"
                + "175266714926721761283308452739364692445828925713888778390563"
                + "004824837998396920292222154861459023734782226825216399574408"
                + "017271441461795592261750838890200741699262383002822862492841"
                + "826712434057514241885699942723316069987129868827718206172144"
                + "531425749440150661394631691976291815065797455262361912248480"
                + "638900336690743659892263495641146655030629659601997206362026"
                + "035219177767406687774635493753188995878662821254697971020657"
                + "472327213729181446666594218720034745089428309115351892711142"
                + "871083761592223802766053278233516615551493693757784666701457"
                + "179719012271178127804502400263847587883393968179629506907988"
                + "171216906869295382485298300234760684541141781391106485602365"
                + "497542274972310076151318700240539105109138178437217914225285"
                + "874320985249578780346837033378184214440171386881242499844186"
                + "181292711985333153825673218704215306311977485352146709553346"
                + "263366108646673322924098798492566911095161436186015489097402"
                + "419135096230436121961281659505186660220307156136847323646608"
                + "689050142639139065150639081993788523183650598972991254044794"
                + "434251667742996598118492331515552728832740283526884424087528"
                + "112832899806259126736995462473415433335001472314306127503903"
                + "073971352520693381738433229507010490618675394331307847980156"
                + "551303847581556852362180104196502555961819349863159132330360"
                + "964619059902361126811960234418433633345949276319461017166529"
                + "138237171823942992162725384617760656945422978770713831988170"
                + "369645886898118632109769003557358846244648357062914530527571"
                + "012788720279653644797240254054481327483917941288264238351719"
                + "491972097971459368875371987291308317380339110161285474153773"
                + "777159517280841116275971863849242228023734419254699919836721"
                + "921312870355853079669427134163910338827543186136434901009431"
                + "974090473310144762998617254244233556122374357158259333828049"
                + "862438924982227807159517627578471094751190334822414120251826"
                + "887137281931042534781961284401764795315050571107229743145699"
                + "152234516431218486575757865281975648435089583847229235345594"
                + "645212158316577514712987082259092926556388366511206819438369"
                + "041162526687100445602437042006637090019411855571604720446436"
                + "969328500600469281405071190692613939939027355345455674703149"
                + "038860220246399482605017624319693056406663666260902070488874"
                + "388989074981528654443818629173829010518208699363826618683039"
                + "152732645812867828066013375000965933646251460917231803129303"
                + "478774212346791184547913111098977946482169225056293999567934"
                + "838016991574397005375421344858745868560472867510654233418938"
                + "390991105864655951136460610551568385412174598018071331636125"
                + "730796111683438637676673073545834947897883163301292408008363"
                + "568259391571131309780305164417166825183465736759341980849589"
                + "479409832925000863897785634946932124734261030627137450772861"
                + "569225966285738579055332406418490184513282846327092697538308"
                + "673084091422476594744399733481308109863994173797896570106870"
                + "267341619671965915995885378348229882701256058423655895396903"
                + "064749655841479813109971575420432563957760704851008815782914"
                + "082507777385597901291294073094627859445058594122731948127532"
                + "251523248015034665190482289614066468903051025109162377704484"
                + "862302294889667113805556079566207324493733740278367673002030"
                + "116152270089218435156521213792157482068593569207902145022771"
                + "330999877294595969528170445821819560809658117027980626698912"
                + "050615607423256868422713062950098644218534708104071289176469"
                + "065508361299166947780238225027896678434891994096573617045867"
                + "862425540069425166939792926247145249454088584227261537552600"
                + "719043363291963757775021760051958006938476357895868784895368"
                + "721228985578068265181927036320994801558744555751753127364714"
                + "212955364940843855866152080121150790750685533444892586932838"
                + "596530132720469706945715469593536585717888948623332924652027"
                + "358531885333709484554033365653569881725825289180566354883637"
                + "437933484118455801683318276768346462919956055134700391478768"
                + "086403226296166415606675081537106467231084619642475374905537"
                + "448053182260027102164009805844975260230356400380834720531499"
                + "411729657367850664214008426964971032419191821212132069397691"
                + "439233683747092282677387081322366800869247034915868409911530"
                + "983154120635661231875043054675369832308279664574176208065931"
                + "772656858416818379661061449634325441117069417002226578173583"
                + "512598210807691019610522292638797450490192543119006205619065"
                + "774524161919131875339840493439768233102984658933183730158095"
                + "925228292068208622303325852801192664963144413164427730032377"
                + "922747123306964171499455322610354751456312906688543454268697"
                + "884477429817774937101176146516241836166802548152963353084908"
                + "499430067636548061029400946937506098455885580439704859144495"
                + "844450799784970455835506854087451633164641180831230797043898"
                + "491905065875864258107384224205911919416741824904527002882639"
                + "830579500573417114870311871428341844991534567029152801044851"
                + "451760553069714417613685823841027876593246626899784183196203"
                + "122624211773914772080048835783335692045339359532545648970285"
                + "585897355057512351295365405028420810227852487766035742463666"
                + "731486802794860524457826736262308529782650571146248465959142"
                + "102781227889414481639949738818846227682448516220518170767221"
                + "698632657016543169197426512300417573299044735376725368457927"
                + "543654128265535818580468400693677186050200705472475484008055"
                + "304249518544952672472613473181747421800785746934654471360369"
                + "758841180294080396167469462885406791721386012254195038197045"
                + "384172680063988206563287928395827085109199588394482977756471"
                + "520261328710895261634177071516428994879535648545535531487549"
                + "781340099648544986358248476905900331169613037661279234643231"
                + "297066284113074270462020320133683503854253603136367635752126"
                + "047074253112092334028374829494531047274189692872755720276152"
                + "722682833767413934256526532830684699975970977500055608899326"
                + "850250492128840682741398816315404564903507758716800740556857"
                + "240217586854390532281337707074158307562696283169556874240605"
                + "277264858530506113563848519659189686495963355682169754376214"
                + "307786659347304501648224329648912707098980766766256715172690"
                + "620588155496663825738292741820822789606844882229833948166709"
                + "840390242835143068137672534601260072692629694686727507943461"
                + "904399966189796119287505194423564026443032717373415912814960"
                + "561683539881885694840453423114246135599252723300648816274667"
                + "235237512343118934421188850850793581638489944875447563316892"
                + "138696755743027379537852625423290248810471819390372206668947"
                + "022042588368958409399984535609488699468338525796751618821594"
                + "109816249187418133647269651239806775619479125579574464714278"
                + "686240537505761042042671493660849802382746805759825913310069"
                + "199419046519065311719089260779491192179464073551296338645230"
                + "356733455880333131970803654571847915504326548995597058628882"
                + "868666066180218822486021449999731221641381706534801755104384"
                + "066244128228036166489042573776409563264828252584076690456084"
                + "394903252905263375323165090876813366142423983095308065496618"
                + "793819491200339194894940651323988166420800883955549422370967"
                + "348400726427057011650890751961553701862647974563811878561754"
                + "571134004738107627630149533097351741806554791126609380343113"
                + "785325328835333520249343659791293412848549709468263290758301"
                + "930726653377825593143311109638480539408592839889077962104798"
                + "479196868765399874770959127887274758744398067798249682782722"
                + "009264499445593804146087706419418104407582698056880389496546"
                + "165879839046605876453418102899071942930217745199761044950431"
                + "968415034555140448209289333786573630528306199900777487269229"
                + "986082790531716918765788609089418170579934048902184415597910"
                + "926768627965975839524839267348836347456516870161662406424242"
                + "412289611180106156823425393921800524834547237792199112285959"
                + "141918774917938233400100781283265067102817813960291209147201"
                + "009478787525512633728842223538694900679276645116347581011938"
                + "753196572421214760382847747745717045786104173857479113019085"
                + "838778901523343430130052827970385803598151829296003056826120"
                + "919509437373254541710563838870475289505639610298436413609356"
                + "416325894081379815116933386197973398216707610046079800960160"
                + "248230969430438069566201232136501405495862506152825880330229"
                + "083858124784693157203232336018994694376477267218793768264318"
                + "283826035645206994686302160488745284243635935586223335062359"
                + "450028905585816112753417837504559361261308526408280512138731"
                + "774902002495527387345859564051608305830537707325339715526204"
                + "447054295735383611136775231699727402929416742044232481138750"
                + "756313190782721888640533746942138421699288629404796353051505"
                + "607881263662064972312575790195988730411956262273437289005165"
                + "611110941117452779654827904712505819990774980638215593768855"
                + "464988229389854082913251290764783863224947810167534916934892"
                + "881042030156102833861438273781609463413353835783407653143214"
                + "171506558775478202524547806573013422774706167442419689526131"
                + "642741046954746214837562882997718041867850845469656191509086"
                + "958742511844358373065909514609804512474094113738999278224929"
                + "833677960110153870961297497055663016373072027507347599229437"
                + "923938244274211861582361613178863925530951171884212985083072"
                + "382597291441422515794038830113590833316518582349672212596218"
                + "125070581137594955250227472746743698871319266707692991990844"
                + "671612287388584575846227265733307537355728239516169641751986"
                + "750126817454293237382941438248143771398619067166575729458078"
                + "048205595118816871880752129718326364421553367877512747669407"
                + "901170575098195750845635652173895441798750745238544552001335"
                + "720333323798950743939053129182122552598337909094636302021853"
                + "538488548250628977156169638607123827717256213134605494017704"
                + "135817319317633701363322528191275471914434509207118488383668"
                + "181742633429496118700915030491653394647637177664391207983474"
                + "946273978221715020906701903024697621512785219561420708064616"
                + "313732365178539762920920255002889620129701413796400380557349"
                + "492690735351459612086747965477336929587736286356601437679640"
                + "384307968641385634478013282612845891848985280480488441808216"
                + "394239740143629034816654581144543664600324906187630395023564"
                + "020445307482102413668951966442213392007574791286838051751506"
                + "346625693919377402835120756662608298904918772878338521785227"
                + "920457718469658552787904475621926639920084093020756739253637"
                + "356283908298175779021532021064096173732835984940666521411981"
                + "838108845154597728951645721318977979074919410131483685446396"
                + "169046070301075968189337412175759881651270007612627891695104"
                + "063158576375347874200702220510708912576123616580268068158584"
                + "998526314658780866168007332646768302063916972030648944056281"
                + "954061906852420030534631566218913273090696873531816410945142"
                + "880366059952202482488867115544291047219291342483464387053685"
                + "086487490991788126705656653871910497218200423714927401644609"
                + "434598453925367061322106165330856620211889682340057526754861"
                + "014769936887382095845522115719234796868881608536316158628801"
                + "503959494185294892270744108282071693033878180849362040182552"
                + "222710109856534448172074707560192459155994310729495781978785"
                + "905789400525401228675171425111843564371840535630241812254732"
                + "660933027103979680910649392727226830354104676325913552796838"
                + "377050198552346212228584105571199217317179698043393177077507"
                + "556270560478317798444476375602546370333692471142208155199736"
                + "913719751632413027487121998634045482485245701185533426752647"
                + "159783107312456634298052214554941562527240289153333543493412"
                + "178620370072603152798707718724912344944771479095207347613854"
                + "254853115527733010303424768358654960937223240071545181297326"
                + "920810584240905577256458036814622344931897081388971432998313"
                + "476177996797124537823107037391514738786921191875667003193212"
                + "818968033226965944592862106074388274169194651622676325406650"
                + "708810710303941788605648937698167341590259251946118236429456"
                + "526693722031555047002135988462927580125277154220166299548631"
                + "303249123110296279237238997664168034971412265279319076363261"
                + "368141455163766565598397884893817330826687799019628869322965"
                + "973799519316211872154552873941702436698855938887933167445333"
                + "631195415184040882838151934212341228200309503133410507047601"
                + "599879854725291906652224793197154403317948368373732208218857"
                + "733416238564413807005419135302459439135025545318864547962522"
                + "602517629283743304651023610575835145507394433396102162296754"
                + "614157811271970017386114942795014112532806212547758105129720"
                + "884652631580948066336876701473107335407177108766159358568140"
                + "982129677307591973829734414452566887708553245708889583209938"
                + "234321027182241147637327913575686154212528496579033350931527"
                + "769255058456440105521926445053120737562877449981636463328358"
                + "161403301758139673594273276904489203618803867549557518068900"
                + "585329272014939235005258451467069826285482578832673987352204"
                + "572282392902071448222198855871028969919358730742778151597576"
                + "207640239512438602020325965962502125783499577100856263861182"
                + "338133185090146865770640106762786175837727728958927460394039"
                + "303372718738505369129571267150668966884938808851429436099620"
                + "129667590792250822753138128498515269029317002631363289420957"
                + "975779593276355311620667534886513173238724387480635133145126"
                + "448899675898288129254800764251865864902411111273013571971813"
                + "816025831785069322440079986566353715440884548663931817083957"
                + "357807990597308390948818040609359591909074739609044101505163"
                + "217496814121007657191774837673557510007336169223865374290794"
                + "578032000423374528075661530429290144957806296341383835517835"
                + "997647088513490048569736979652386958459945955920907090589568"
                + "914511414126845054621179450266117501669282602509507707782119"
                + "504326173832235624376017767993627960993689751913949650333585"
                + "071554184364568526166742436889203710374953284259271316105378"
                + "349807407391586338179676584252580367372064693512486522384813"
                + "416638080615057048290598906964519364400185971204257230073164"
                + "100099169875242603773621777634306216167448849308109299010095"
                + "179745415642512048220867145868492551324442667771278637282113"
                + "315362243010918243912433802140462422233491535595168908162884"
                + "879899882736304453724321742802157557779670216663170479697281"
                + "724833928410156422745072717792693999297403080727703950135815"
                + "451424940490265361058254093731146531049433824843797186069372"
                + "144446008267980024712294894057618538922034256083026970528766"
                + "213773735943942241147070740729027254613073585417456914194464"
                + "876243576823970657031841684675407334663462936739836200040414"
                + "007140542776324801327422026853936988697876070095900486846506"
                + "267713630709798210065572851013066010107806337433447730734786"
                + "538817426812307437660666433127753564665786037151929227684404"
                + "582732832438082128412187761320424604649008010547314267492608"
                + "269221556374054862417170310279199969426456209556198164545476"
                + "620450224114494047493498322068071913527679867478134582038595"
                + "704134661779372285349400316315995440936840895725334387029867"
                + "178297703733328068017646395020900239419314991150091052768211"
                + "195109990631661503115855828355826071794100525285836113699613"
                + "034427901738117874120612881820620232638498615156564512300477"
                + "929675636183457681050433417695430675380411139285537925292413"
                + "473394810505320257087281863072911589113359420147618726642915"
                + "640363719276023062838406504254417423354645499870553187268879"
                + "264241021473636986254637471597443549434438997300517425251108"
                + "773578863909468120966734281525859199248576404880550713298142"
                + "993599114632399191139599267525763590074465728101918058418073"
                + "422277347213977232182317717169164001088261125490933611867805"
                + "757223910181861685491085008852722743742120865248523724562486"
                + "976622453848192986711294529455154970305859193071984971054141"
                + "816369689761311267440270096486675459345670599369954645005589"
                + "216280479763656861333165639073957032720343891754152675009150"
                + "111988568727088481955316769316812728921430313768180164454773"
                + "675183534978579242764633541624336011259602521095016122641103"
                + "460834656482355979342740568688492244587454937767521203247038"
                + "030354911575448312952758919398936808763276854387695576948814"
                + "228443119985957007275213931768378317703391304230609589991373"
                + "146845690104220951619670705064202567338734461156552761759927"
                + "271518776600102389447605397895169457088027287362251210762240"
                + "918100667008834747376051562855339435658437562712412444576516"
                + "630640859395079475509204639322452025354636344447917556617259"
                + "621871992791865754908578529500128402290350615149373101070094"
                + "461510116137124237614267225417320559592027821293257259471464"
                + "172249773213163818453265552796042705418714962365852524586489"
                + "332541450626423378856514646706042985647819684615936632889542"
                + "997807225422647904006160197519750074605451500602918066382714"
                + "970161109879513366337713784344161940531214452918551801365755"
                + "586676150193730296919320761200092550650815832755084993407687"
                + "972523699870235679310268041367457189566414318526790547171699"
                + "629903630155456450900448027890557019683283136307189976991531"
                + "666792089587685722906009154729196363816735966739599757103260"
                + "155719202373485805211281174586100651525988838431145118948805"
                + "521291457756991465775300413847171245779650481758563950728953"
                + "37539755822087777506072339445587895905719156736");
        result = Generic_BigInteger.power(x, y, decimalPlaces, a_RoundingMode);
        printTestPower_4args_2(x, y, decimalPlaces, a_RoundingMode, result);
        assertEquals(expResult, result);
        // Test 3
        System.out.println("Test 3");
        decimalPlaces = 100000;
        a_RoundingMode = RoundingMode.HALF_UP;
        x = new BigInteger("2");
        y = -4096;
//        expResult = new BigDecimal(
//                "9.574977460952185357946731012280420242059741741351498149130846"
//                + "498773150482263322338330135503513494117545124789504255225975"
//                + "580207887571963711592962520008249519012665586996578219236321"
//                + "122840477298024886368507375347072341775313284323105080705950"
//                + "168045496823511677548416079807607670397432414593450514049678"
//                + "678567199422638269408552861629351864094434838370589028791680"
//                + "755464670201093200802646988642047110338897893387354475424916"
//                + "274316911954604209688228527160200156301528569230362063835232"
//                + "858280326293914389750767893540482111943019404104439359839412"
//                + "510067121590320451314367307755586759451334411692198098236114"
//                + "513745620688967653563567466556124243670979571804655502955121"
//                + "252421928409759720082475031487764067316030672946791506067208"
//                + "856384754533379434122037921309717470828325707676029249132450"
//                + "399508686937498122610567114620714241540060458924843770886296"
//                + "231407542957213757251430001641021135485420852542243238747600"
//                + "474790584106047254016846353253675872505438490298227630559593"
//                + "294481026697636959242684765086210701452271878091925212412589"
//                + "157603381822130330441211543609057570589685404073953134943833"
//                + "702539721493517211443802240254880933122518666942142277033512"
//                + "242954875187941497397629544654835514559810161700023660202674"
//                + "919968089516611867830125924296468851329573073069810869696243"
//                + "433377776172422039903583480653495493912268932644954039187054"
//                + "725153316695057712222424997056404222355007813370563970844282"
//                + "562208156428794615186278062981925048800493977149345982001813"
//                + "767911127137376856859026830639188971819510109755946439748258"
//                + "317301181899076438130205110935043157475171592533009485969689"
//                + "440192167496845677048562410867234889740856791224725585123157"
//                + "176832183019193266426666561576110717064528038063430632804563"
//                + "325391288765773988540388782693194054890114018844041489738255"
//                + "805195081844425223136614236126476987600747434499821094990704"
//                + "570590538619935293747336109986883677202617435622690976455680"
//                + "466915213153701221066139390356444736371868103235458167825993"
//                + "541129613801056278358009209548858638162461817120138885236910"
//                + "609877301861280830349183017656972885546865942554484350278654"
//                + "026917410365832883059100285944285029060305746231647119098865"
//                + "047581812890042156968341069954600308723604472081575012650038"
//                + "345628359309775791898788898994489966063412570370855160068423"
//                + "090974658022330207844604537206114675940113661281832785913341"
//                + "693015684241353353137299725224655455697468931269230580623983"
//                + "287881545086020250969773358102571600826272501370832534840266"
//                + "702556864711147043497732403984079492227000723086642360053508"
//                + "784823797477261606944519420418351973327408297647550642577916"
//                + "756559434877758480224285613512027782537120441777670686122242"
//                + "991920240020322297758868759816307646900884713475423313078837"
//                + "128678948445618795531660294773597716407125540615985591170140"
//                + "019826211141099186640634821791835097540859958946721504130779"
//                + "495901833547503340972214189518612052295402875892864309609873"
//                + "486872633208122351788915693759918212890625E-1234");
        result = Generic_BigInteger.power(x, y, decimalPlaces, a_RoundingMode);
        printTestPower_4args_2(x, y, decimalPlaces, a_RoundingMode, result);
//        assertEquals(expResult, result);
    }

    /**
     * For printing out individual tests of testPower_4args_2()
     * @param x
     * @param y
     * @param decimalPlaces
     * @param a_RoundingMode
     * @param result
     */
    private void printTestPower_4args_2(
            BigInteger x,
            long y,
            int decimalPlaces,
            RoundingMode a_RoundingMode,
            BigDecimal result) {
        System.out.println("x " + x);
        System.out.println("y " + y);
        System.out.println("decimalPlaces " + decimalPlaces);
        System.out.println("a_RoundingMode " + a_RoundingMode);
        System.out.println("result " + result);
    }

    /**
     * Test of reciprocal method, of class Generic_BigInteger.
     */
    @Test
    public void testReciprocal() {
        System.out.println("reciprocal");
        System.out.println("reciprocal(x,decimalPlaces,a_RoundingMode)");
        BigInteger x = null;
        int decimalPlaces = 0;
        RoundingMode a_RoundingMode = null;
        BigDecimal expResult = null;
        BigDecimal result = null;
        // Test 1
        System.out.println("Test 1");
        decimalPlaces = 100;
        a_RoundingMode = RoundingMode.HALF_UP;
        x = new BigInteger("12345678910");
        expResult = new BigDecimal(
                "8.100000067149000556665214614754629156315875705858609601567873"
                + "59699767211911070186742771848E-11");
        result =
                Generic_BigInteger.reciprocal(x, decimalPlaces, a_RoundingMode);
        printTestReciprocal(x, decimalPlaces, a_RoundingMode, result);
        assertEquals(expResult, result);
    }

    /**
     * For printing out individual tests of testReciprocal()
     * @param x
     * @param y
     * @param decimalPlaces
     * @param a_RoundingMode
     * @param result
     */
    private void printTestReciprocal(
            BigInteger x,
            int decimalPlaces,
            RoundingMode a_RoundingMode,
            BigDecimal result) {
        System.out.println("x " + x);
        System.out.println("decimalPlaces " + decimalPlaces);
        System.out.println("a_RoundingMode " + a_RoundingMode);
        System.out.println("result " + result);
    }

    /**
     * Test of getRandom method, of class Generic_BigInteger.
     */
    @Test
    public void testGetRandom() {
        System.out.println("getRandom");
        System.out.println("getRandom(a_Generic_BigInteger,upperLimit)");
        BigInteger upperLimit = null;
        BigInteger result = null;
        BigInteger expResult = null;
        Generic_BigInteger a_Generic_BigInteger;
        int length;
        long seed;
        // Test 1
        System.out.println("Test 1");
        a_Generic_BigInteger = new Generic_BigInteger();
        length = 100;
        seed = 0L;
        a_Generic_BigInteger.init_RandomArrayMinLength(length, seed);
        upperLimit = new BigInteger("10000");
        expResult = new BigInteger("4402");
        result = a_Generic_BigInteger.getRandom(
                upperLimit);
        printTestGetRandom(a_Generic_BigInteger, upperLimit, result);
        assertEquals(expResult, result);
        // Test 2
        System.out.println("Test 2");
        a_Generic_BigInteger = new Generic_BigInteger();
        length = 100;
        seed = 0L;
        a_Generic_BigInteger.init_RandomArrayMinLength(length, seed);
        upperLimit = new BigInteger("1000000000000000000000000000000000000000");
        expResult = new BigInteger("588790721835422051177695086341165922385");
        result = a_Generic_BigInteger.getRandom(
                upperLimit);
        printTestGetRandom(a_Generic_BigInteger, upperLimit, result);
        assertEquals(expResult, result);
        // Test 3
        System.out.println("Test 3");
        a_Generic_BigInteger = new Generic_BigInteger();
        length = 100;
        seed = 1234567L;
        a_Generic_BigInteger.init_RandomArrayMinLength(length, seed);
        upperLimit = new BigInteger("10000");
        expResult = new BigInteger("8804");
        result = a_Generic_BigInteger.getRandom(
                upperLimit);
        printTestGetRandom(a_Generic_BigInteger, upperLimit, result);
        assertEquals(expResult, result);
        // Test 4
        System.out.println("Test 4");
        a_Generic_BigInteger = new Generic_BigInteger();
        length = 100;
        seed = 1234567L;
        a_Generic_BigInteger.init_RandomArrayMinLength(length, seed);
        upperLimit = new BigInteger("1000000000000000000000000000000000000000");
        expResult = new BigInteger("313418162951880306579594022452043428003");
        result = a_Generic_BigInteger.getRandom(
                upperLimit);
        printTestGetRandom(a_Generic_BigInteger, upperLimit, result);
        assertEquals(expResult, result);
    }

    /**
     * For printing out individual tests of testGetRandom()
     * @param a_Generic_BigInteger
     * @param upperLimit
     * @param result
     */
    private void printTestGetRandom(
            Generic_BigInteger a_Generic_BigInteger,
            BigInteger upperLimit,
            BigInteger result) {
        System.out.println("a_Generic_BigInteger " + a_Generic_BigInteger);
        System.out.println("upperLimit " + upperLimit);
        System.out.println("result " + result);
    }

    /**
     * 
     */
    @Test
    public void test_getPowersOfTwoDecomposition_1args() {
        System.out.println("test_getPowersOfTwoDecomposition_1args");
        test_getPowersOfTwoDecomposition_1args_test1();
        test_getPowersOfTwoDecomposition_1args_test2();
        test_getPowersOfTwoDecomposition_1args_test3();
    }

    @Test
    public void test_getPowersOfTwoDecomposition_1args_test1() {
        Generic_BigInteger a_Generic_BigInteger = new Generic_BigInteger();
        BigInteger x;
        TreeMap<Integer, Integer> x_PowersOfTwoDecomposition;
        Integer key;
        Integer value;
        BigInteger x_Recomposed;
        x = new BigInteger("67");
        x_PowersOfTwoDecomposition = a_Generic_BigInteger.getPowersOfTwoDecomposition(x);
        x_Recomposed = BigInteger.ZERO;
        for (Entry<Integer, Integer> entry : x_PowersOfTwoDecomposition.entrySet()) {
            key = entry.getKey();
            value = entry.getValue();
            x_Recomposed = x_Recomposed.add(
                    a_Generic_BigInteger.powerOfTwo(key).multiply(new BigInteger(value.toString())));
        }
        assertEquals(x, x_Recomposed);
    }

    @Test
    public void test_getPowersOfTwoDecomposition_1args_test2() {
        Generic_BigInteger a_Generic_BigInteger = new Generic_BigInteger();
        BigInteger x;
        TreeMap<Integer, Integer> x_PowersOfTwoDecomposition;
        Integer key;
        Integer value;
        BigInteger x_Recomposed;
        x = new BigInteger("6734517348951454718534151347888542719004873129054");
        x_PowersOfTwoDecomposition = a_Generic_BigInteger.getPowersOfTwoDecomposition(x);
        x_Recomposed = BigInteger.ZERO;
        for (Entry<Integer, Integer> entry : x_PowersOfTwoDecomposition.entrySet()) {
            key = entry.getKey();
            value = entry.getValue();
            x_Recomposed = x_Recomposed.add(
                    a_Generic_BigInteger.powerOfTwo(key).multiply(new BigInteger(value.toString())));
        }
        assertEquals(x, x_Recomposed);
    }

    @Test
    public void test_getPowersOfTwoDecomposition_1args_test3() {
        Generic_BigInteger a_Generic_BigInteger = new Generic_BigInteger();
        BigInteger x;
        TreeMap<Integer, Integer> x_PowersOfTwoDecomposition;
        Integer key;
        Integer value;
        BigInteger x_Recomposed;
        x = new BigInteger("0");
        x_PowersOfTwoDecomposition = a_Generic_BigInteger.getPowersOfTwoDecomposition(x);
        x_Recomposed = BigInteger.ZERO;
        if (x_PowersOfTwoDecomposition != null) {
            // Code not executed as a_Generic_BigInteger.getPowersOfTwoDecomposition(BigInteger.ZERO) is null;
            for (Entry<Integer, Integer> entry : x_PowersOfTwoDecomposition.entrySet()) {
                key = entry.getKey();
                value = entry.getValue();
                x_Recomposed = x_Recomposed.add(
                        a_Generic_BigInteger.powerOfTwo(key).multiply(new BigInteger(value.toString())));
            }
        }
        assertEquals(x, x_Recomposed);

    }
}
