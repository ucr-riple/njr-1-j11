Compiled from "Generic_ErrorAndExceptionHandler.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.core.Generic_ErrorAndExceptionHandler {
  public static int Error;
  public static int Exception;
  public static int IOException;
  public static int FileNotFoundException;
  public static int ClassNotFoundException;
  public static int NumberFormatException;
  public static int MPIException;
  public uk.ac.leeds.ccg.andyt.generic.core.Generic_ErrorAndExceptionHandler();
  static {};
}
Compiled from "Generic_UKPostcode_Handler.java"
public class uk.ac.leeds.ccg.andyt.generic.data.Generic_UKPostcode_Handler {
  protected static java.util.TreeSet<java.lang.String> _NAA;
  protected static java.util.TreeSet<java.lang.String> _AtoZ_not_CIKMOV;
  protected static java.util.TreeSet<java.lang.String> _AtoZ_not_QVX;
  protected static java.util.TreeSet<java.lang.String> _AtoZ_not_IJZ;
  protected static java.util.TreeSet<java.lang.String> _ABCDEFGHJKSTUW;
  protected static java.util.TreeSet<java.lang.String> _ABEHMNPRVWXY;
  protected static java.util.TreeSet<java.lang.String> _0to9;
  protected static final java.lang.String s;
  protected static final java.lang.String sSpace;
  protected static final java.lang.String sNAA;
  protected static final java.lang.String sNA;
  protected static final java.lang.String sN;
  protected static final java.lang.String sAANN;
  protected static final java.lang.String sAANA;
  protected static final java.lang.String sANN;
  protected static final java.lang.String sANA;
  protected static final java.lang.String sAAN;
  protected static final java.lang.String sAN;
  public java.util.HashSet<java.lang.String> firstPartPostcodeTypes;
  public uk.ac.leeds.ccg.andyt.generic.data.Generic_UKPostcode_Handler();
  public static void main(java.lang.String[]);
  public void run();
  public boolean isValidPostcodeForm(java.lang.String);
  public java.lang.Object[] getPostcodeForm(java.lang.String);
  public java.lang.String getSecondPartPostcodeType(java.lang.String);
  public java.util.HashSet<java.lang.String> getFirstPartPostcodeTypes();
  public java.lang.String getFirstPartPostcodeType(java.lang.String);
  protected java.util.TreeSet<java.lang.String> get_NAA();
  protected java.util.TreeSet<java.lang.String> get_AtoZ_not_QVX();
  protected java.util.TreeSet<java.lang.String> get_AtoZ_not_IJZ();
  protected java.util.TreeSet<java.lang.String> get_ABCDEFGHJKSTUW();
  protected java.util.TreeSet<java.lang.String> get_ABEHMNPRVWXY();
  protected java.util.TreeSet<java.lang.String> get_AtoZ_not_CIKMOV();
  protected java.util.TreeSet<java.lang.String> get_0to9();
}
Compiled from "Generic_XYNumericalData.java"
public class uk.ac.leeds.ccg.andyt.generic.data.Generic_XYNumericalData {
  public java.math.BigDecimal x;
  public java.math.BigDecimal y;
  public uk.ac.leeds.ccg.andyt.generic.data.Generic_XYNumericalData();
  public uk.ac.leeds.ccg.andyt.generic.data.Generic_XYNumericalData(java.math.BigDecimal, java.math.BigDecimal);
  public java.math.BigDecimal getX();
  public void setX(java.math.BigDecimal);
  public java.math.BigDecimal getY();
  public void setY(java.math.BigDecimal);
  public boolean equals(java.lang.Object);
  public int hashCode();
}
Compiled from "AgeConverter.java"
public class uk.ac.leeds.ccg.andyt.generic.execution.AgeConverter {
  public uk.ac.leeds.ccg.andyt.generic.execution.AgeConverter();
  public static short getAgeClass1(int);
  public static short getAgeClass2(int);
  public static short getAgeClass3(int);
  public static short getAgeClass4(int);
  public static short getAgeClassHSARDataRecord(int);
  public static short getAgeClassISARDataRecord(int);
  public static int getAge1(int, java.util.Random);
  public static int getAge2(int, java.util.Random);
  public static int getAge3(int, java.util.Random);
  public static int getAge4(int, java.util.Random);
  public static int getAge5(int, java.util.Random);
  public static int getAge7(int, java.util.Random);
  public static int getAge6(int, java.util.Random);
}
Compiled from "Generic_EventListener.java"
public interface uk.ac.leeds.ccg.andyt.generic.execution.Generic_EventListener extends java.util.EventListener {
  public abstract void renderingComplete(uk.ac.leeds.ccg.andyt.generic.execution.Generic_RenderingCompleteEvent);
}
Compiled from "Generic_EventListenerImpl.java"
public class uk.ac.leeds.ccg.andyt.generic.execution.Generic_EventListenerImpl implements uk.ac.leeds.ccg.andyt.generic.execution.Generic_EventListener {
  boolean renderingComplete;
  public uk.ac.leeds.ccg.andyt.generic.execution.Generic_EventListenerImpl();
  public void renderingComplete(uk.ac.leeds.ccg.andyt.generic.execution.Generic_RenderingCompleteEvent);
}
Compiled from "Generic_Executor.java"
public class uk.ac.leeds.ccg.andyt.generic.execution.Generic_Executor {
  public uk.ac.leeds.ccg.andyt.generic.execution.Generic_ImageWriter i;
  public uk.ac.leeds.ccg.andyt.generic.execution.Generic_Executor();
  public uk.ac.leeds.ccg.andyt.generic.execution.Generic_Executor(uk.ac.leeds.ccg.andyt.generic.execution.Generic_ImageWriter);
  public static void main(java.lang.String[]);
  public void run();
}
Compiled from "Generic_Executor.java"
class uk.ac.leeds.ccg.andyt.generic.execution.Generic_Executor$1 implements java.lang.Runnable {
  final uk.ac.leeds.ccg.andyt.generic.execution.Generic_Runnable val$r;
  final uk.ac.leeds.ccg.andyt.generic.execution.Generic_Executor this$0;
  uk.ac.leeds.ccg.andyt.generic.execution.Generic_Executor$1(uk.ac.leeds.ccg.andyt.generic.execution.Generic_Executor, uk.ac.leeds.ccg.andyt.generic.execution.Generic_Runnable);
  public void run();
}
Compiled from "Generic_ImageWriter.java"
public class uk.ac.leeds.ccg.andyt.generic.execution.Generic_ImageWriter extends uk.ac.leeds.ccg.andyt.generic.execution.Generic_Executor {
  public uk.ac.leeds.ccg.andyt.generic.execution.Generic_ImageWriter();
  public static void main(java.lang.String[]);
  public void addGeneric_EventListener(uk.ac.leeds.ccg.andyt.generic.execution.Generic_EventListener);
  public void removeGeneric_EventListener(uk.ac.leeds.ccg.andyt.generic.execution.Generic_EventListener);
  public void start();
}
Compiled from "Generic_PropertyChangedListener.java"
public interface uk.ac.leeds.ccg.andyt.generic.execution.Generic_PropertyChangedListener extends java.beans.PropertyChangeListener {
  public abstract void renderingComplete(uk.ac.leeds.ccg.andyt.generic.execution.Generic_PropertyChangedListener);
}
Compiled from "Generic_PropertyChangedListenerImpl.java"
public class uk.ac.leeds.ccg.andyt.generic.execution.Generic_PropertyChangedListenerImpl implements uk.ac.leeds.ccg.andyt.generic.execution.Generic_PropertyChangedListener {
  boolean renderingComplete;
  public uk.ac.leeds.ccg.andyt.generic.execution.Generic_PropertyChangedListenerImpl();
  public void propertyChange(java.beans.PropertyChangeEvent);
  public void renderingComplete(uk.ac.leeds.ccg.andyt.generic.execution.Generic_PropertyChangedListener);
}
Compiled from "Generic_RenderingCompleteEvent.java"
public class uk.ac.leeds.ccg.andyt.generic.execution.Generic_RenderingCompleteEvent extends java.util.EventObject {
  public uk.ac.leeds.ccg.andyt.generic.execution.Generic_RenderingCompleteEvent(java.lang.Object);
}
Compiled from "Generic_Runnable.java"
public class uk.ac.leeds.ccg.andyt.generic.execution.Generic_Runnable extends java.lang.Thread implements java.lang.Runnable {
  uk.ac.leeds.ccg.andyt.generic.execution.Generic_EventListenerImpl listener;
  public uk.ac.leeds.ccg.andyt.generic.execution.Generic_Runnable();
  public static void main(java.lang.String[]);
  public void run();
}
Compiled from "NewMain.java"
public class uk.ac.leeds.ccg.andyt.generic.execution.NewMain {
  public uk.ac.leeds.ccg.andyt.generic.execution.NewMain();
  public static void main(java.lang.String[]);
}
Compiled from "AbstractDataHandler.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.io.AbstractDataHandler extends uk.ac.leeds.ccg.andyt.generic.logging.AbstractLog implements java.io.Serializable {
  protected long _RecordLength;
  protected java.io.File _File;
  protected java.io.File _Directory;
  protected transient java.io.RandomAccessFile _RandomAccessFile;
  public uk.ac.leeds.ccg.andyt.generic.io.AbstractDataHandler();
  public long get_RecordLength();
  public java.io.File get_Directory();
  public void init(java.util.logging.Level, java.io.File);
  public void init(java.io.File);
  protected void load(java.io.File);
  public long getNDataRecords();
  public abstract uk.ac.leeds.ccg.andyt.generic.io.AbstractDataRecord getDataRecord(long);
  protected void print(int, java.util.Random) throws java.io.IOException;
}
Compiled from "AbstractDataRecord.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.io.AbstractDataRecord implements java.io.Serializable,java.lang.Comparable {
  protected long _RecordID;
  public uk.ac.leeds.ccg.andyt.generic.io.AbstractDataRecord();
  public int hashCode();
  public static long getNumberOfBitsInByte();
  public long get_RecordID();
  protected void _Init(uk.ac.leeds.ccg.andyt.generic.io.AbstractDataRecord);
  protected void _Init();
  public java.lang.String toString();
  public java.lang.String toCSVString();
  public java.lang.String toCSVStringFields();
  public void write(java.io.RandomAccessFile) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
  public long getSizeInBytes();
}
Compiled from "Generic_ReadCSV.java"
public class uk.ac.leeds.ccg.andyt.generic.io.Generic_ReadCSV {
  public uk.ac.leeds.ccg.andyt.generic.io.Generic_ReadCSV();
  public static boolean testRead(java.io.File, java.io.File, int);
}
Compiled from "Generic_StaticIO.java"
public class uk.ac.leeds.ccg.andyt.generic.io.Generic_StaticIO {
  public static final java.lang.String CLASSNAME;
  public uk.ac.leeds.ccg.andyt.generic.io.Generic_StaticIO();
  public static java.util.TreeSet<java.lang.String> recursiveFileList(java.io.File);
  public static java.util.TreeSet<java.lang.String> recursiveFileList(java.io.File, int);
  public static void writeObject(java.lang.Object, java.io.File);
  public static java.lang.Object readObject(java.io.File);
  public static void copyFile(java.io.File, java.io.File, java.lang.String);
  public static java.io.BufferedInputStream getBufferedInputStream(java.io.File);
  public static java.io.FileInputStream getFileInputStream(java.io.File);
  public static java.io.FileInputStream getFileInputStream(java.io.File, long);
  public static java.io.FileOutputStream getFileOutputStream(java.io.File);
  public static java.io.BufferedOutputStream getBufferedOutputStream(java.io.File);
  public static java.io.ObjectInputStream getObjectInputStream(java.io.File);
  public static java.io.ObjectOutputStream getObjectOutputStream(java.io.File);
  public static void copy(java.io.File, java.io.File);
  public static boolean fileExistsAndCanBeRead(java.io.File);
  public static long[] delete(java.io.File);
  public static java.io.File createTempFile();
  public static java.io.File createTempFile(java.io.File);
  public static java.io.File createTempFile(java.io.File, java.lang.String, java.lang.String);
  public static java.io.File createNewFile();
  public static java.io.File createNewFile(java.io.File);
  public static java.io.File createNewFile(java.io.File, java.lang.String, java.lang.String);
  public static java.io.File createNewFile(java.io.File, java.lang.String);
  public static java.io.BufferedReader getBufferedReader(java.io.File);
  public static java.io.PrintWriter getPrintWriter(java.io.File, boolean);
  public static int getFileDepth(java.io.File);
  public static int getFileDepth(java.lang.String);
  public static java.lang.String getRelativeFilePath(int);
  public static java.lang.String getRelativeFilePath(int, java.io.File);
  public static java.lang.String getRelativeFilePath(int, java.lang.String);
  public static void skipline(java.io.StreamTokenizer);
  public static void setStreamTokenizerSyntaxNumbersAsWords1(java.io.StreamTokenizer);
  public static void setStreamTokenizerSyntax1(java.io.StreamTokenizer);
  public static void setStreamTokenizerSyntax2(java.io.StreamTokenizer);
  public static void setStreamTokenizerSyntax3(java.io.StreamTokenizer);
  public static void setStreamTokenizerSyntax4(java.io.StreamTokenizer);
  public static void setStreamTokenizerSyntax5(java.io.StreamTokenizer);
  public static void setStreamTokenizerSyntax6(java.io.StreamTokenizer);
  public static java.io.File getObjectDirectory(java.io.File, long, long, long);
  public static java.io.File initialiseArchive(java.io.File, long);
  public static void initialiseArchive(java.io.File, long, long) throws java.io.IOException;
  public static java.util.TreeMap<java.lang.Long, java.io.File> initialiseArchiveReturnTreeMapLongFile(java.io.File, long, long) throws java.io.IOException;
  public static java.lang.Long getArchiveHighestLeaf(java.io.File, java.lang.String);
  public static long getArchiveRange(java.io.File, java.lang.String);
  public static java.util.HashSet<java.io.File> getArchiveLeafFiles(java.io.File, java.lang.String);
  public static java.util.TreeMap<java.lang.Long, java.io.File> getArchiveLeafFiles_TreeMap(java.io.File, java.lang.String);
  public static java.util.TreeMap<java.lang.Long, java.io.File> getArchiveLeafFiles_TreeMap(java.io.File, java.lang.String, long, long);
  public static java.io.File getArchiveHighestLeafFile(java.io.File, java.lang.String);
  public static java.io.File growArchiveBase(java.io.File, long);
  public static java.io.File growArchiveBase(java.io.File, long, long);
  public static java.io.File addToArchive(java.io.File, long);
  public static java.io.File addToArchive(java.io.File, long, long);
  public static java.io.File getFileThatExists(java.io.File, java.lang.String) throws java.io.FileNotFoundException;
  public static java.lang.String getFilename(java.io.File, java.io.File);
  public static java.util.TreeMap<java.lang.Long, java.io.File> getNumericalOrderFilesWithNumericalFilenames_TreeMap(java.io.File[]);
  public static java.util.TreeMap<java.lang.Long, java.io.File> getNumericalOrderFilesWithNumericalUnderscoreFilenames_TreeMap(java.io.File[], java.lang.String);
  public static java.util.HashMap<java.lang.Integer, java.lang.String> getNumericalAndNumericalUnderscoreFilenames_HashMap(java.io.File, java.lang.String);
  public static int getFilePathLength(java.io.File);
  public static int getFilePathLength(java.io.File, java.io.File);
}
Compiled from "Generic_StaticIOTest.java"
public class uk.ac.leeds.ccg.andyt.generic.io.Generic_StaticIOTest {
  public uk.ac.leeds.ccg.andyt.generic.io.Generic_StaticIOTest();
  public static void setUpClass() throws java.lang.Exception;
  public static void tearDownClass() throws java.lang.Exception;
  public void setUp();
  public void tearDown();
  public void tests();
  public void testRecursiveFileList();
  public void testRecursiveFileList_2args();
  public void testGetArchiveLeafFiles();
}
Compiled from "Generic_XMLDOMReader.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.io.Generic_XMLDOMReader {
  protected java.io.File file;
  protected org.w3c.dom.NodeList nodeList;
  protected java.lang.String nodeName;
  protected javax.xml.parsers.DocumentBuilderFactory aDocumentBuilderFactory;
  protected javax.xml.parsers.DocumentBuilder aDocumentBuilder;
  protected org.w3c.dom.Document aDocument;
  public uk.ac.leeds.ccg.andyt.generic.io.Generic_XMLDOMReader();
  protected void init(java.io.File, java.lang.String);
  protected void initDocumentBuilderFactory();
  protected void initDocumentBuilder();
  protected void initDocument();
  protected void initNodeList(java.lang.String);
  protected void readNodeListElements();
  protected void readNodeListElements(org.w3c.dom.NodeList, int);
  protected abstract void parseNodeList();
}
Compiled from "Generic_StaticString.java"
public class uk.ac.leeds.ccg.andyt.generic.lang.Generic_StaticString {
  public uk.ac.leeds.ccg.andyt.generic.lang.Generic_StaticString();
  public static java.util.HashSet<java.lang.String> getNumeralsHashSet();
  public static java.util.TreeSet<java.lang.String> getNumeralsTreeSet();
  public static java.util.TreeSet<java.lang.String> getUpperCaseStringAlphabet_TreeSet();
  public static java.util.TreeSet<java.lang.String> getLowerCaseStringAlphabet_TreeSet();
  public static java.lang.String getLowerCase(java.lang.String);
  public static java.lang.String getUpperCase(java.lang.String);
  public static java.lang.String getCapitalFirstLetter(java.lang.String);
}
Compiled from "AbstractLog.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.logging.AbstractLog {
  protected transient java.util.logging.FileHandler _Logger_FileHandler;
  protected transient java.util.logging.Logger _Logger;
  public uk.ac.leeds.ccg.andyt.generic.logging.AbstractLog();
  public void init_Logger(java.util.logging.Level, java.io.File, java.lang.String, java.lang.String);
  public void init_Logger(java.util.logging.Level, java.io.File, java.lang.String);
  public void init_Logger(java.util.logging.Level, java.io.File);
  public void log(java.lang.String);
  public void log(java.util.logging.Level, java.lang.String);
}
Compiled from "Generic_Log.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.logging.Generic_Log implements java.util.logging.LoggingMXBean {
  public static java.util.logging.Logger logger;
  public static final java.lang.String Generic_DefaultLoggerName;
  public static final java.lang.String Generic_DefaultLogDirectoryName;
  public static final int Generic_DefaultLogFileSizeLimit;
  public static final int Generic_DefaultLogFileCount;
  public static final boolean Generic_DefaultLogFileAppend;
  public static java.util.logging.Level Generic_DefaultLogLevel;
  public uk.ac.leeds.ccg.andyt.generic.logging.Generic_Log();
  public static void parseLoggingProperties(java.io.File, java.io.File, java.io.File, java.lang.String);
  public static void parseLoggingProperties(java.io.File, java.io.File, java.lang.String);
  public static java.util.logging.FileHandler getFileHandler(java.util.logging.Level, java.io.File, java.lang.String);
  public static java.util.logging.FileHandler getFileHandler(java.util.logging.Level, java.io.File, java.lang.String, int, int);
  public static void reset();
  public java.util.List<java.lang.String> getLoggerNames();
  public java.lang.String getLoggerLevel(java.lang.String);
  public void setLoggerLevel(java.lang.String, java.lang.String);
  public java.lang.String getParentLoggerName(java.lang.String);
  static {};
}
Compiled from "Generic_BigDecimal.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal extends uk.ac.leeds.ccg.andyt.generic.math.Generic_Number implements java.io.Serializable {
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_BigInteger _Generic_BigInteger;
  public static final java.math.BigDecimal TWO;
  public static final java.math.BigDecimal HALF;
  public static final java.math.BigDecimal ELEVEN;
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal();
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal(uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal);
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal(int);
  public java.math.RoundingMode get_RoundingMode();
  public void set_RoundingMode(java.math.RoundingMode);
  public static void main(java.lang.String[]);
  public static int magnitude(java.math.BigDecimal);
  public static java.math.BigDecimal multiplyRoundIfNecessary(java.math.BigDecimal, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal multiplyRoundIfNecessary(java.math.BigDecimal, java.math.BigDecimal, java.math.MathContext, int, java.math.RoundingMode);
  protected static java.math.BigDecimal multiplyRoundIfNecessaryNoSpecialCaseCheck(java.math.BigDecimal, java.math.BigDecimal, java.math.MathContext, int, java.math.RoundingMode);
  protected static java.math.BigDecimal multiplyRoundIfNecessaryNoSpecialCaseCheck(java.math.BigDecimal, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal multiplyRoundToFixedDecimalPlaces(java.math.BigDecimal, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal multiplyRoundIfNecessary(java.math.BigDecimal, java.math.BigInteger, int, java.math.RoundingMode);
  public static java.math.BigDecimal multiplyRoundIfNecessary(java.math.BigDecimal, java.math.BigInteger, java.math.MathContext, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideRoundIfNecessary(java.math.BigDecimal, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideRoundIfNecessary(java.math.BigDecimal, java.math.BigDecimal, java.math.MathContext);
  public static java.math.BigDecimal divideRoundToFixedDecimalPlaces(java.math.BigDecimal, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideNoRounding(java.math.BigDecimal, java.math.BigDecimal);
  public static java.util.ArrayList<java.math.BigDecimal> divideRoundIfNecessary(java.util.ArrayList<java.math.BigDecimal>, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideRoundIfNecessary(java.math.BigDecimal, java.math.BigInteger, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideRoundToFixedDecimalPlaces(java.math.BigDecimal, java.math.BigInteger, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideNoRounding(java.math.BigDecimal, java.math.BigInteger);
  public static java.math.BigDecimal divideRoundIfNecessary(java.math.BigInteger, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideRoundToFixedDecimalPlaces(java.math.BigInteger, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideNoRounding(java.math.BigInteger, java.math.BigDecimal);
  public static java.math.BigDecimal divideRoundIfNecessary(java.math.BigInteger, java.math.BigInteger, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideRoundToFixedDecimalPlaces(java.math.BigInteger, java.math.BigInteger, int, java.math.RoundingMode);
  public static java.math.BigDecimal divideNoRounding(java.math.BigInteger, java.math.BigInteger);
  public static boolean powerTestAbove(java.math.BigDecimal, java.math.BigDecimal, java.math.BigInteger, int, int, java.math.RoundingMode);
  public static boolean powerTestAboveNoRounding(java.math.BigDecimal, java.math.BigDecimal, java.math.BigInteger, int);
  public static boolean powerTestBelow(java.math.BigDecimal, java.math.BigDecimal, java.math.BigInteger, int, int, java.math.RoundingMode);
  public static boolean powerTestBelowNoRounding(java.math.BigDecimal, java.math.BigDecimal, java.math.BigInteger, int);
  public static boolean powerTestAbove(java.math.BigDecimal, java.math.BigDecimal, int, int, int, java.math.RoundingMode);
  public static boolean powerTestBelow(java.math.BigDecimal, java.math.BigDecimal, int, int, int, java.math.RoundingMode);
  public static java.math.BigDecimal power(java.math.BigDecimal, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal powerNoRounding(java.math.BigDecimal, java.math.BigDecimal);
  public static java.math.BigDecimal power(java.math.BigDecimal, long, int, java.math.RoundingMode);
  public static java.math.BigDecimal power(java.math.BigDecimal, int, int, int, java.math.RoundingMode);
  public static java.math.BigDecimal powerNoRounding(java.math.BigDecimal, int, int);
  public static java.math.BigDecimal powerUnscaled1Precision1(java.math.BigDecimal, int);
  public static java.math.BigDecimal rootUnscaled1Precision1(java.math.BigDecimal, int, int);
  public static java.math.BigDecimal power(java.math.BigDecimal, java.math.BigInteger, int, int, java.math.RoundingMode);
  public static java.math.BigDecimal powerNoRounding(java.math.BigDecimal, java.math.BigInteger, int);
  public static java.math.BigDecimal powerNoSpecialCaseCheck(java.math.BigDecimal, java.math.BigInteger, int, int, java.math.RoundingMode);
  public static java.math.BigDecimal powerNoSpecialCaseCheckNoRounding(java.math.BigDecimal, java.math.BigInteger, int);
  public static java.math.BigDecimal powerNoRounding(java.math.BigDecimal, int);
  public static java.math.BigDecimal reciprocal(java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigInteger reciprocalWillBeIntegerReturnBigInteger(java.math.BigDecimal);
  public static java.math.BigDecimal reciprocalWillBeIntegerReturnBigDecimal(java.math.BigDecimal);
  public static java.math.BigDecimal log(int, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal log(java.math.BigDecimal, java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal roundToAndSetDecimalPlaces(java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal roundStrippingTrailingZeros(java.math.BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal roundIfNecessary(java.math.BigDecimal, int, java.math.RoundingMode);
  public static int getDecimalPlacePrecision(java.math.BigDecimal, int);
  public java.math.BigDecimal get_PI();
  public java.math.BigDecimal getEulerConstantToAMinimumDecimalPlacePrecision(int);
  public java.math.BigDecimal getEulerConstantToAFixedDecimalPlacePrecision(int, java.math.RoundingMode);
  public static java.math.BigDecimal exp(java.math.BigDecimal, uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal ln(java.math.BigDecimal, uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal max(java.math.BigDecimal, java.math.BigDecimal);
  public static java.math.BigDecimal max(java.util.ArrayList<java.math.BigDecimal>);
  public static java.math.BigDecimal max(java.math.BigDecimal, java.math.BigInteger);
  public static java.math.BigDecimal min(java.math.BigDecimal, java.math.BigDecimal);
  public static java.math.BigDecimal min(java.math.BigDecimal, java.math.BigInteger);
  public static int positionSignificantDigit(java.math.BigDecimal);
  public static java.math.BigDecimal floorSignificantDigit(java.math.BigDecimal);
  public static java.math.BigDecimal ceilingSignificantDigit(java.math.BigDecimal);
  public static java.math.BigDecimal rootRoundIfNecessary(java.math.BigDecimal, java.math.BigInteger, int, java.math.RoundingMode);
  public static java.math.BigDecimal rootNoRounding(java.math.BigDecimal, java.math.BigInteger);
  public static java.math.BigDecimal rootRoundIfNecessary(java.math.BigDecimal, int, int, java.math.RoundingMode);
  public static java.math.BigDecimal rootNoRounding(java.math.BigDecimal, int);
  public static java.math.BigDecimal sqrt(java.math.BigDecimal, int, java.math.RoundingMode);
  public static boolean randomUniformTest(java.util.Random, java.math.BigDecimal, java.math.RoundingMode);
  public static boolean randomUniformTest(java.util.Random, java.math.BigDecimal, int, java.math.RoundingMode);
  public static boolean randomUniformTest(java.util.Random, java.math.BigDecimal, java.math.MathContext);
  public static java.math.BigDecimal getRandom(uk.ac.leeds.ccg.andyt.generic.math.Generic_BigInteger, int, java.math.BigDecimal, java.math.BigDecimal);
  public static java.math.BigDecimal getRandom(uk.ac.leeds.ccg.andyt.generic.math.Generic_BigInteger, java.util.Random, int, java.math.BigDecimal, java.math.BigDecimal);
  public static java.math.BigDecimal getRandom(uk.ac.leeds.ccg.andyt.generic.math.Generic_Number, int);
  public static boolean isEven(java.math.BigDecimal);
  public static java.math.BigDecimal cos(java.math.BigDecimal, uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal sin(java.math.BigDecimal, uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal, int, java.math.RoundingMode);
  protected static java.math.BigDecimal sinNoCaseCheck(java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal, int, java.math.RoundingMode);
  protected static java.math.BigDecimal sinAngleBetweenZeroAndPI(java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal, int, java.math.RoundingMode);
  public static java.math.BigDecimal tan(java.math.BigDecimal, uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal, int, java.math.RoundingMode);
  static {};
}
Compiled from "Generic_BigDecimalTest.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimalTest {
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimalTest();
  public static void setUpClass() throws java.lang.Exception;
  public static void tearDownClass() throws java.lang.Exception;
  public void setUp();
  public void tearDown();
  public void testAll();
  public void testPowerUnscaled1Precision1_2args();
  public void testPowerUnscaled1Precision1_2args_test1();
  public void testPowerUnscaled1Precision1_2args_test2();
  public void testPowerUnscaled1Precision1_2args_test3();
  public void testPowerUnscaled1Precision1_2args_test4();
  public void testPowerUnscaled1Precision1_2args_test5();
  public void testMultiply();
  public void testMultiplyRoundIfNecessary_5args_1();
  public void testMultiplyRoundIfNecessary_5args_1_test1();
  public void testMultiplyRoundIfNecessary_5args_1_test2();
  public void testMultiplyRoundIfNecessary_4args_1();
  public void testMultiplyRoundIfNecessary_4args_1_test1();
  public void testMultiplyRoundIfNecessary_4args_1_test2();
  public void testMultiplyRoundIfNecessary_4args_1_test3();
  public void testMultiplyRoundIfNecessary_4args_1_test4();
  public void testMultiplyRoundIfNecessary_4args_1_test5();
  public void testMultiplyRoundIfNecessary_4args_2();
  public void testMultiplyRoundIfNecessary_4args_2_test1();
  public void testMultiplyRoundIfNecessary_4args_2_test2();
  public void testMultiplyRoundIfNecessary_4args_2_test3();
  public void testMultiplyRoundIfNecessary_4args_2_test4();
  public void testMultiplyRoundIfNecessary_4args_2_test10();
  public void testDivide();
  public void testDivideRoundIfNecessary_4args_1();
  public void testDivideRoundIfNecessary_4args_1_test1();
  public void testDivideRoundIfNecessary_4args_1_test2();
  public void testDivideRoundIfNecessary_4args_1_test3();
  public void testDivideRoundIfNecessary_4args_1_test4();
  public void testDivideRoundIfNecessary_4args_1_test5();
  public void testDivideRoundIfNecessary_4args_1_test6();
  public void testDivideRoundIfNecessary_4args_1_test7();
  public void testDivideRoundIfNecessary_4args_2();
  public void testDivideRoundIfNecessary_4args_2_test1();
  public void testDivideRoundIfNecessary_4args_3();
  public void testDivideRoundIfNecessary_4args_3_test1();
  public void testDivideRoundIfNecessary_4args_4();
  public void testDivideRoundIfNecessary_4args_4_test1();
  public void testPowerTestAbove_6args_1();
  public void testPowerTestAbove_6args_1_test1();
  public void testPowerTestBelow_6args_1();
  public void testPowerTestBelow_6args_1_test1();
  public void testPowerTestBelow_6args_1_test2();
  public void testPowerTestAbove_6args_2();
  public void testPowerTestAbove_6args_2_test1();
  public void testPowerTestAbove_6args_2_test2();
  public void testPowerTestBelow_6args_2();
  public void testPowerTestBelow_6args_2_test1();
  public void testPowerTestBelow_6args_2_test2();
  public void testPower();
  public void testPowerNoRounding_3args();
  public void testPowerNoRounding_3args_test1();
  public void testPowerNoRounding_3args_test2();
  public void testPowerNoRounding_3args_test3();
  public void testPowerNoRounding_3args_test4();
  public void testPowerNoRounding_2args();
  public void testPowerNoRounding_2args_test1();
  public void testPowerNoRounding_2args_test2();
  public void testPowerNoRounding_2args_test3();
  public void testPowerNoRounding_2args_test4();
  public void testPowerNoRounding_2args_test5();
  public void testPowerNoRounding_2args_test6();
  public void testPowerNoRounding_2args_test7();
  public void testPowerNoRounding_2args_test8();
  public void testPowerNoRounding_2args_test9();
  public void testPowerNoRounding_2args_test10();
  public void testPowerNoRounding_2args_test11();
  public void testPowerNoRounding_2args_test12();
  public void testPower_6args();
  public void testPower_6args_test1();
  public void testPower_6args_test2();
  public void testPower_6args_test3();
  public void testPower_6args_test4();
  public void testPower_6args_test5();
  public void testPower_6args_test6();
  public void testPower_6args_test7();
  public void testPower_6args_test8();
  public void testPower_6args_test9();
  public void testPower_6args_test10();
  public void testPower_6args_test11();
  public void testPower_6args_test12();
  public void testPower_6args_test13();
  public void testPower_6args_test14();
  public void testPower_6args_test15();
  public void testPower_6args_test16();
  public void testPower_6args_test17();
  public void testPower_6args_test18();
  public void testPower_6args_test19();
  public void testPower_6args_test20();
  public void testPower_6args_test21();
  public void testPower_6args_test22();
  public void testPower_6args_test23();
  public void testPower_6args_test24();
  public void testPowerLessThanOne_4args();
  public void testPower_5args_1();
  public void testPower_5args_1_test1();
  public void testPower_5args_1_test2();
  public void testPower_5args_1_test3();
  public void testPower_5args_1_test4();
  public void testPower_5args_1_test5();
  public void testPower_5args_1_test6();
  public void testPower_5args_1_test7();
  public void testPower_5args_1_test8();
  public void testPower_5args_1_test9();
  public void testPower_5args_1_test10();
  public void testPower_5args_1_test11();
  public void testPower_5args_1_test12();
  public void testPower_5args_2();
  public void testPower_5args_2_test1();
  public void testPower_5args_2_test2();
  public void testPower_5args_2_test3();
  public void testPower_5args_2_test4();
  public void testPower_5args_2_test5();
  public void testPower_5args_2_test6();
  public void testPower_5args_2_test7();
  public void testPower_5args_2_test8();
  public void testPower_5args_2_test9();
  public void testPower_5args_2_test10();
  public void testPower_5args_2_test11();
  public void testPower_5args_2_test12();
  public void testPower_5args_2_test13();
  public void testPower_5args_2_test14();
  public void testPower_5args_2_test15();
  public void testPower_5args_2_test16();
  public void testPower_5args_2_test17();
  public void testPower_5args_2_test18();
  public void testPower_5args_2_test19();
  public void testPower_5args_2_test20();
  public void testGetDecimalPlacePrecision();
  public void testReciprocal();
  public void testReciprocal_test1();
  public void testReciprocal_test2();
  public void testReciprocal_test3();
  public void testReciprocal_test4();
  public void testReciprocalWillBeInteger();
  public void testReciprocalWillBeInteger_test1();
  public void testReciprocalWillBeInteger_test2();
  public void testReciprocalWillBeInteger_test3();
  public void testLog();
  public void testLog_4args_1();
  public void testLog_4args_1_test1();
  public void testLog_4args_1_test2();
  public void testLog_4args_1_test3();
  public void testLog_4args_2();
  public void testLog_4args_2_test1();
  public void testLog_4args_2_test2();
  public void testLog_4args_2_test3();
  public void testLog_4args_2_test4();
  public void testRoundToAndSetDecimalPlaces_3args();
  public void testRoundToAndSetDecimalPlaces_3args_test1();
  public void testRoundToAndSetDecimalPlaces_3args_test2();
  public void testRoundToAndSetDecimalPlaces_3args_test3();
  public void testRoundToAndSetDecimalPlaces_3args_test4();
  public void testRoundToAndSetDecimalPlaces_3args_test5();
  public void testRoundToAndSetDecimalPlaces_3args_test6();
  public void testRoundToAndSetDecimalPlaces_3args_test7();
  public void testRoundToAndSetDecimalPlaces_3args_test8();
  public void testRoundToAndSetDecimalPlaces_3args_test9();
  public void testGetEulerConstantToAMinimumDecimalPlacePrecision();
  public void testGetEulerConstantToAMinimumDecimalPlacePrecision_test1();
  public void testGetEulerConstant();
  public void testGetEulerConstantToAFixedDecimalPlacePrecision();
  public void testGetEulerConstantToAFixedDecimalPlacePrecision_test1();
  public void testGetEulerConstantToAFixedDecimalPlacePrecision_test2();
  public void testMax();
  public void testMax_test1();
  public void testMax_test2();
  public void testMin();
  public void testMin_test1();
  public void testMin_test2();
  public void testPositionSignificantDigit();
  public void testPositionSignificantDigit_test1();
  public void testPositionSignificantDigit_test2();
  public void testPositionSignificantDigit_test3();
  public void testPositionSignificantDigit_test4();
  public void testPositionSignificantDigit_test5();
  public void testPositionSignificantDigit_test6();
  public void testPositionSignificantDigit_test7();
  public void testPositionSignificantDigit_test8();
  public void testFloorSignificantDigit();
  public void testFloorSignificantDigit_test1();
  public void testFloorSignificantDigit_test2();
  public void testFloorSignificantDigit_test3();
  public void testFloorSignificantDigit_test4();
  public void testFloorSignificantDigit_test5();
  public void testFloorSignificantDigit_test6();
  public void testFloorSignificantDigit_test7();
  public void testFloorSignificantDigit_test8();
  public void testFloorSignificantDigit_test9();
  public void testCeilingSignificantDigit();
  public void testCeilingSignificantDigit_test1();
  public void testCeilingSignificantDigit_test2();
  public void testCeilingSignificantDigit_test3();
  public void testCeilingSignificantDigit_test4();
  public void testCeilingSignificantDigit_test5();
  public void testCeilingSignificantDigit_test6();
  public void testCeilingSignificantDigit_test7();
  public void testCeilingSignificantDigit_test8();
  public void testCeilingSignificantDigit_test9();
  public void testRoot();
  public void testRootUnscaled1Precision1_2args();
  public void testRootUnscaled1Precision1_2args_test1();
  public void testRoot_4args_1();
  public void testRoot_4args_1_test1();
  public void testRoot_4args_1_test2();
  public void testRoot_4args_1_test3();
  public void testRoot_4args_1_test4();
  public void testRoot_4args_1_test5();
  public void testRoot_4args_1_test6();
  public void testRoot_4args_1_test7();
  public void testRoot_4args_1_test8();
  public void testRoot_4args_1_test9();
  public void printTestRoot_4args_1(java.math.BigDecimal, java.math.BigInteger, int, java.math.RoundingMode, java.math.BigDecimal);
  public void testRoot_4args_2();
  public void testRoot_4args_2_test1();
  public void testRoot_4args_2_test2();
  public void testRoot_4args_2_test3();
  public void testRoot_4args_2_test4();
  public void testRoot_4args_2_test5();
  public void testRoot_4args_2_test6();
  public void testRoot_4args_2_test7();
  public void testRoot_4args_2_test8();
  public void testRoot_4args_2_test9();
  public void testRoot_4args_2_test10();
  public void testRoot_4args_2_test11();
  public void testRoot_4args_2_test12();
  public void printTestRoot_4args_2(java.math.BigDecimal, int, int, java.math.RoundingMode, java.math.BigDecimal);
  public void testExp();
  public void testExp_test1();
  public void testExp_test2();
  public void testExp_test3();
  public void testExp_test4();
  public void testExp_test5();
  public void testExp_test6();
  public void testExp_test7();
  public void testExp_test8();
  public void testExp_test9();
  public void testExp_test10();
  public void testExp_test11();
  public void testLn();
  public void testLn_test1();
  public void testLn_test2();
  public void testLn_test3();
  public void testLn_test4();
  public void testLn_test5();
  public void testLn_test6();
  public void testTan();
  public void testCos();
  public void testSin();
  public void testSqrt();
  public void testSqrt_test1();
  public void testSqrt_test2();
  public void testSqrt_test3();
  public void testSqrt_test4();
  public void testRandomUniformTest();
  public void testRandomUniformTest_test1();
  public void testRandomUniformTest_test2();
  public void testRandomUniformTest_test3();
  public void testRandomUniformTest_test4();
  public void test_getRandom();
  public void test_getRandom_test1();
  public void test_getRandom_test2();
}
Compiled from "Generic_BigInteger.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_BigInteger extends uk.ac.leeds.ccg.andyt.generic.math.Generic_Number implements java.io.Serializable {
  public static final java.math.BigInteger Two;
  public static final java.math.BigInteger Three;
  public static final java.math.BigInteger Hundred;
  public static final java.math.BigInteger Integer_MIN_VALUE;
  public static final java.math.BigInteger Integer_MAX_VALUE;
  public static final java.math.BigInteger Long_MIN_VALUE;
  public static final java.math.BigInteger Long_MAX_VALUE;
  public transient java.util.TreeMap<java.lang.Integer, java.math.BigInteger> _Factorial_TreeMap;
  public transient java.util.TreeMap<java.lang.Integer, java.math.BigInteger> _PowersOfTwo_TreeMap;
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_BigInteger();
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_BigInteger(uk.ac.leeds.ccg.andyt.generic.math.Generic_BigInteger);
  public static void main(java.lang.String[]);
  protected void init_Factorial_TreeMap();
  protected void init_PowersOfTwo_TreeMap();
  public static java.math.BigInteger ceiling(java.math.BigDecimal);
  public static java.math.BigInteger floor(java.math.BigDecimal);
  public static java.math.BigInteger max(java.math.BigInteger, java.math.BigInteger);
  public static java.math.BigInteger min(java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger factorial(java.lang.Integer);
  public java.math.BigInteger powerOfTwo(java.lang.Integer);
  protected java.math.BigInteger addPowerOfTwo();
  public java.util.TreeMap<java.lang.Integer, java.math.BigInteger> get_PowersOfTwo_TreeMap();
  public java.util.TreeMap<java.lang.Integer, java.math.BigInteger> getPowersOfTwo(java.math.BigInteger);
  public java.util.TreeMap<java.lang.Integer, java.lang.Integer> getPowersOfTwoDecomposition(java.math.BigInteger);
  public static java.math.BigDecimal power(java.math.BigInteger, int, int, java.math.RoundingMode);
  public static java.math.BigDecimal power(java.math.BigInteger, long, int, java.math.RoundingMode);
  public static java.math.BigDecimal reciprocal(java.math.BigInteger, int, java.math.RoundingMode);
  protected static java.math.BigDecimal exp(java.math.BigInteger, uk.ac.leeds.ccg.andyt.generic.math.Generic_BigDecimal, int, java.math.RoundingMode);
  public java.math.BigInteger getRandom(java.math.BigInteger);
  public java.math.BigInteger getRandom(java.util.Random, java.math.BigInteger);
  public static boolean isEven(java.math.BigInteger);
  public java.math.BigInteger getFactorial(int);
  static {};
}
Compiled from "Generic_BigIntegerTest.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_BigIntegerTest {
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_BigIntegerTest();
  public static void setUpClass() throws java.lang.Exception;
  public static void tearDownClass() throws java.lang.Exception;
  public void setUp();
  public void tearDown();
  public void testCeiling();
  public void testFloor();
  public void testMax();
  public void testMin();
  public void testFactorial();
  public void testPower_4args_1();
  public void testPower_4args_2();
  public void testReciprocal();
  public void testGetRandom();
  public void test_getPowersOfTwoDecomposition_1args();
  public void test_getPowersOfTwoDecomposition_1args_test1();
  public void test_getPowersOfTwoDecomposition_1args_test2();
  public void test_getPowersOfTwoDecomposition_1args_test3();
}
Compiled from "Generic_Number.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.math.Generic_Number implements java.io.Serializable {
  static final long serialVersionUID;
  protected java.util.Random[] _RandomArray;
  java.lang.Long _InitialRandomSeed;
  java.lang.Long _NextRandomSeed;
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_Number();
  protected long timeReport(long);
  protected void init_RandomArrayMinLength(int, long);
  protected java.util.Random[] get_RandomArrayMinLength(int);
  protected java.util.Random[] get_RandomArray();
  protected java.util.Random[] get_RandomArray(int);
}
Compiled from "Generic_double.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_double extends uk.ac.leeds.ccg.andyt.generic.math.Generic_Number implements java.io.Serializable {
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_double();
  public static void main(java.lang.String[]);
  public void testDoubleRepresentations();
  public java.math.BigDecimal testRepresentation(java.math.BigDecimal);
  public void testDoubleRepresentations0();
  public static void print();
  public static void print(java.util.Random, int, int);
  public static void print(java.util.Random, int);
  public static java.lang.String toPlainString(double);
  public static java.math.BigInteger getNumberOfDoublesInRange(double, double);
  public static int roundUpToNearestInt(double);
}
Compiled from "Generic_float.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_float extends uk.ac.leeds.ccg.andyt.generic.math.Generic_Number implements java.io.Serializable {
  static final long serialVersionUID;
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_float();
  public static void main(java.lang.String[]);
  public static void print();
  public static void print(java.util.Random, int, int);
  public static void print(java.util.Random, int);
  public static java.lang.String toPlainString(float);
  public static java.math.BigInteger getNumberOfFloatsInRange(float, float);
  public static boolean isAddSignificant(float, float);
  public static boolean isSubtractSignificant(float, float);
  public static float next(float, float, float);
  public static float next(float);
  public static float previous(float);
}
Compiled from "Generic_int.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_int extends uk.ac.leeds.ccg.andyt.generic.math.Generic_Number implements java.io.Serializable {
  static final long serialVersionUID;
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_int();
  public static void main(java.lang.String[]);
  public static boolean isEven(int);
}
Compiled from "Generic_intTest.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_intTest {
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_intTest();
  public static void setUpClass() throws java.lang.Exception;
  public static void tearDownClass() throws java.lang.Exception;
  public void setUp();
  public void tearDown();
  public void testIsEven();
}
Compiled from "Generic_long.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_long extends uk.ac.leeds.ccg.andyt.generic.math.Generic_Number implements java.io.Serializable {
  static final long serialVersionUID;
  public static final long Integer_MAX_VALUE;
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_long();
  public static void main(java.lang.String[]);
  public static boolean isEven(long);
}
Compiled from "Generic_longTest.java"
public class uk.ac.leeds.ccg.andyt.generic.math.Generic_longTest {
  public uk.ac.leeds.ccg.andyt.generic.math.Generic_longTest();
  public static void setUpClass() throws java.lang.Exception;
  public static void tearDownClass() throws java.lang.Exception;
  public void setUp();
  public void tearDown();
  public void testIsEven();
}
Compiled from "StaticConverter.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.math.StaticConverter {
  public uk.ac.leeds.ccg.andyt.generic.math.StaticConverter();
  public static int to_int(java.lang.String);
  public static boolean to_boolean(java.lang.String);
  public static short to_short(java.lang.String);
  public static long to_long(java.lang.String);
}
Compiled from "StaticMath.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.math.StaticMath {
  public uk.ac.leeds.ccg.andyt.generic.math.StaticMath();
  public static double getValueALittleBitLarger(double);
  public static double getValueALittleBitSmaller(double);
}
Compiled from "Generic_Statistics.java"
public class uk.ac.leeds.ccg.andyt.generic.math.statistics.Generic_Statistics {
  public uk.ac.leeds.ccg.andyt.generic.math.statistics.Generic_Statistics();
  public static java.math.BigDecimal getSum(java.util.List<java.math.BigDecimal>);
  public static void printStatistics(java.math.BigDecimal[]);
  public static java.lang.Object[] getSummaryStatistics_1(java.util.ArrayList<java.math.BigDecimal>, int, java.math.RoundingMode);
  public static java.math.BigDecimal[] getSummaryStatistics_0(java.util.ArrayList<java.math.BigDecimal>, int, java.math.RoundingMode);
  public static java.lang.Object[] getFirstOrderStatistics0(java.util.TreeMap<java.lang.Integer, java.math.BigDecimal>, java.util.TreeMap<java.lang.Integer, java.math.BigDecimal>, java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.Object[] getFirstOrderStatistics1(java.util.TreeMap<java.lang.Integer, java.math.BigDecimal>, java.util.TreeMap<java.lang.Integer, java.math.BigDecimal>, java.lang.String, java.lang.String, java.lang.String);
}
Compiled from "Generic_StatisticsTest.java"
public class uk.ac.leeds.ccg.andyt.generic.math.statistics.Generic_StatisticsTest {
  public uk.ac.leeds.ccg.andyt.generic.math.statistics.Generic_StatisticsTest();
  public static void setUpClass() throws java.lang.Exception;
  public static void tearDownClass() throws java.lang.Exception;
  public void setUp();
  public void tearDown();
  public void testGetSum();
  public void testGetBoxPlotStatistics();
}
Compiled from "Generic_OutOfMemoryErrorHandler.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.memory.Generic_OutOfMemoryErrorHandler implements uk.ac.leeds.ccg.andyt.generic.memory.Generic_OutOfMemoryErrorHandlerInterface,java.io.Serializable {
  public transient uk.ac.leeds.ccg.andyt.generic.memory.Generic_TestMemory _Generic_TestMemory;
  public boolean _HandleOutOfMemoryError_boolean;
  public static final int Default_Memory_Threshold;
  public static final boolean HandleOutOfMemoryErrorFalse;
  public static final boolean HandleOutOfMemoryErrorTrue;
  protected transient int[] _MemoryReserve;
  public uk.ac.leeds.ccg.andyt.generic.memory.Generic_OutOfMemoryErrorHandler();
  public abstract boolean swapToFile_DataAny();
  public abstract boolean swapToFile_DataAny(boolean);
  public java.lang.Runtime getRuntime();
  protected final void init_MemoryReserve(int);
  public int[] get_MemoryReserve();
  public void set_MemoryReserve(int[]);
  public void init_MemoryReserve(boolean);
  protected void init_MemoryReserve();
  public final void clear_MemoryReserve();
  protected abstract boolean tryToEnsureThereIsEnoughMemoryToContinue();
  protected uk.ac.leeds.ccg.andyt.generic.memory.Generic_TestMemory get_Generic_TestMemory();
  public abstract boolean tryToEnsureThereIsEnoughMemoryToContinue(boolean);
  protected long getTotalFreeMemory();
  public long getTotalFreeMemory(boolean);
  public java.lang.String initString(int, boolean);
  public java.lang.String initString(java.lang.String, java.lang.String, boolean);
  public java.io.File initFile(java.lang.String, boolean) throws java.io.IOException;
  public java.io.File initFile(java.io.File, java.lang.String, boolean) throws java.io.IOException;
  public java.io.File initFileDirectory(java.io.File, java.lang.String, boolean) throws java.io.IOException;
  public java.lang.String println(java.lang.String, java.lang.String, boolean);
  public double sin(double, boolean);
  public java.lang.String toString(double, boolean);
}
Compiled from "Generic_OutOfMemoryErrorHandlerInterface.java"
public interface uk.ac.leeds.ccg.andyt.generic.memory.Generic_OutOfMemoryErrorHandlerInterface {
  public static final long serialVersionUID;
  public abstract boolean tryToEnsureThereIsEnoughMemoryToContinue(boolean);
  public abstract void init_MemoryReserve(boolean);
}
Compiled from "Generic_TestMemory.java"
public class uk.ac.leeds.ccg.andyt.generic.memory.Generic_TestMemory {
  protected transient java.lang.Runtime _Runtime;
  public uk.ac.leeds.ccg.andyt.generic.memory.Generic_TestMemory();
  public uk.ac.leeds.ccg.andyt.generic.memory.Generic_TestMemory(java.lang.Runtime);
  public long getTotalFreeMemory();
}
Compiled from "Generic_Collections.java"
public class uk.ac.leeds.ccg.andyt.generic.utilities.Generic_Collections {
  public uk.ac.leeds.ccg.andyt.generic.utilities.Generic_Collections();
  public static java.lang.Object getKeyFromValue(java.util.Map, java.lang.Object);
  public static java.lang.Object[] getIntervalCountsLabelsMins(java.math.BigDecimal, java.math.BigDecimal, java.util.TreeMap<?, java.math.BigDecimal>, java.math.MathContext);
  public static java.math.BigDecimal getIntervalMin(java.math.BigDecimal, java.math.BigDecimal, int);
  public static java.math.BigDecimal getIntervalMax(java.math.BigDecimal, java.math.BigDecimal);
  public static int getInterval(java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, java.math.MathContext);
  public static java.math.BigDecimal[] getMinMaxBigDecimal(java.util.Map<?, java.math.BigDecimal>);
  public static int[] getMinMaxInteger(java.util.Map<?, java.lang.Integer>);
  public static java.util.HashSet getRandomIndexes_HashSet(java.util.Vector, int, java.util.Random);
  public static java.util.HashSet<java.lang.Integer> getCompleteKeySet_HashSet(java.util.Set<java.lang.Integer>, java.util.Set<java.lang.Integer>);
  public static void addToTreeMapIntegerInteger(java.util.TreeMap<java.lang.Integer, java.lang.Integer>, java.lang.Integer, java.lang.Integer);
  public static void addToTreeMapIntegerInteger(java.util.TreeMap<java.lang.Integer, java.lang.Integer>, java.util.TreeMap<java.lang.Integer, java.lang.Integer>);
  public static void addToTreeMapIntegerLong(java.util.TreeMap<java.lang.Integer, java.lang.Long>, java.lang.Integer, java.lang.Long);
  public static void addToTreeMapStringLong(java.util.TreeMap<java.lang.String, java.lang.Long>, java.lang.String, java.lang.Long);
  public static void addToTreeMapStringInteger(java.util.TreeMap<java.lang.String, java.lang.Integer>, java.lang.String, java.lang.Integer);
  public static java.util.TreeMap<java.lang.String, java.lang.Integer> addToTreeMapStringInteger(java.util.TreeMap<java.lang.String, java.lang.Integer>, java.util.TreeMap<java.lang.String, java.lang.Integer>);
  public static void setMaxValueTreeMapStringInteger(java.util.TreeMap<java.lang.String, java.lang.Integer>, java.lang.String, java.lang.Integer);
  public static void setMinValueTreeMapStringInteger(java.util.TreeMap<java.lang.String, java.lang.Integer>, java.lang.String, java.lang.Integer);
  public static void addToTreeMapIntegerBigInteger(java.util.TreeMap<java.lang.Integer, java.math.BigInteger>, java.lang.Integer, java.math.BigInteger);
  public static void addToTreeMapIntegerBigDecimal(java.util.TreeMap<java.lang.Integer, java.math.BigDecimal>, java.lang.Integer, java.math.BigDecimal);
  public static long[] getCounts(java.util.HashSet, java.util.HashSet);
  public static java.lang.Object[] getUnionAndCounts(java.util.HashSet, java.util.HashSet);
  public static java.lang.Object[] getUnionAndUniques(java.util.HashSet, java.util.HashSet);
  public static java.util.TreeMap<java.lang.Integer, java.math.BigInteger> deepCopy_Integer_BigInteger(java.util.TreeMap<java.lang.Integer, java.math.BigInteger>);
  public static java.util.HashMap<java.lang.Long, java.lang.String> deepCopy_Long_String(java.util.HashMap<java.lang.Long, java.lang.String>);
  public static java.util.HashMap<java.lang.String, java.lang.String> deepCopyHashMapStringString(java.util.HashMap<java.lang.String, java.lang.String>);
  public static java.util.HashMap<java.lang.String, java.lang.Integer> deepCopyHashMapStringInteger(java.util.HashMap<java.lang.String, java.lang.Integer>);
  public static java.util.TreeMap<java.lang.String, java.lang.Integer> deepCopyTreeMapStringInteger(java.util.TreeMap<java.lang.String, java.lang.Integer>);
  public static java.util.TreeMap<java.lang.Integer, java.math.BigDecimal> deepCopy_Integer_BigDecimal(java.util.TreeMap<java.lang.Integer, java.math.BigDecimal>);
  public static java.util.TreeMap<java.lang.Integer, java.lang.Long> deepCopy_Integer_Long(java.util.TreeMap<java.lang.Integer, java.lang.Long>);
  public static void addToTreeMapIntegerLong(java.util.TreeMap<java.lang.Integer, java.lang.Long>, java.util.TreeMap<java.lang.Integer, java.lang.Long>);
  public static void addToTreeMapIntegerBigDecimal(java.util.TreeMap<java.lang.Integer, java.math.BigDecimal>, java.util.TreeMap<java.lang.Integer, java.math.BigDecimal>);
  public static void addToTreeMapIntegerBigInteger(java.util.TreeMap<java.lang.Integer, java.math.BigInteger>, java.util.TreeMap<java.lang.Integer, java.math.BigInteger>);
  public static java.lang.Integer getMaxKey_Integer(java.util.TreeMap<java.lang.Integer, ?>, java.lang.Integer);
  public static java.lang.Integer getMinKey_Integer(java.util.TreeMap<java.lang.Integer, ?>, java.lang.Integer);
  public static java.math.BigDecimal getMaxValue_BigDecimal(java.util.TreeMap<?, java.math.BigDecimal>, java.math.BigDecimal);
  public static java.math.BigDecimal getMinValue_BigDecimal(java.util.TreeMap<?, java.math.BigDecimal>, java.math.BigDecimal);
  public static java.math.BigInteger getMaxValue_BigInteger(java.util.TreeMap<?, java.math.BigInteger>, java.math.BigInteger);
  public static java.math.BigInteger getMinValue_BigInteger(java.util.TreeMap<?, java.math.BigInteger>, java.math.BigInteger);
}
Compiled from "Generic_Execution.java"
public class uk.ac.leeds.ccg.andyt.generic.utilities.Generic_Execution {
  public uk.ac.leeds.ccg.andyt.generic.utilities.Generic_Execution();
  public static void shutdownExecutorService(java.util.concurrent.ExecutorService, java.util.HashSet<java.util.concurrent.Future>, java.lang.Object);
  public static void shutdownExecutorService(java.util.concurrent.ExecutorService, java.util.HashSet<java.util.concurrent.Future>, java.lang.Object, long, long);
  public static void shutdownExecutorService(java.util.concurrent.ExecutorService, java.util.concurrent.Future, java.lang.Object);
  public static void shutdownExecutorService(java.util.concurrent.ExecutorService, java.util.concurrent.Future, java.lang.Object, long, long);
  public static void waitSychronized(java.lang.Object, long);
}
Compiled from "Generic_LogTest.java"
public class uk.ac.leeds.ccg.andyt.generic.utilities.Generic_LogTest {
  public uk.ac.leeds.ccg.andyt.generic.utilities.Generic_LogTest();
  public static void setUpClass() throws java.lang.Exception;
  public static void tearDownClass() throws java.lang.Exception;
  public void setUp();
  public void tearDown();
}
Compiled from "Generic_LogTest.java"
public class uk.ac.leeds.ccg.andyt.generic.utilities.Generic_LogTest$Generic_LogImpl extends uk.ac.leeds.ccg.andyt.generic.logging.Generic_Log {
  final uk.ac.leeds.ccg.andyt.generic.utilities.Generic_LogTest this$0;
  public uk.ac.leeds.ccg.andyt.generic.utilities.Generic_LogTest$Generic_LogImpl(uk.ac.leeds.ccg.andyt.generic.utilities.Generic_LogTest);
}
Compiled from "Generic_TestMemory.java"
public class uk.ac.leeds.ccg.andyt.generic.utilities.Generic_TestMemory {
  protected transient java.lang.Runtime _Runtime;
  public uk.ac.leeds.ccg.andyt.generic.utilities.Generic_TestMemory();
  protected final void init_Runtime();
  public long getTotalFreeMemory();
}
Compiled from "Generic_Time.java"
public class uk.ac.leeds.ccg.andyt.generic.utilities.Generic_Time {
  public static final int SecondsInMinute;
  public static final int MinutesInHour;
  public static final int SecondsInHour;
  public static final int MilliSecondsInSecond;
  public static final int MilliSecondsInHour;
  public uk.ac.leeds.ccg.andyt.generic.utilities.Generic_Time();
  public uk.ac.leeds.ccg.andyt.generic.utilities.Generic_Time(int, int, int);
  public static int getAgeInYears(uk.ac.leeds.ccg.andyt.generic.utilities.Generic_Time, uk.ac.leeds.ccg.andyt.generic.utilities.Generic_Time);
  public static void printTime(long);
  public static java.util.ArrayList<java.lang.String> getMonths3Letters();
  public static int getMonth(java.lang.String, java.util.ArrayList<java.lang.String>);
  public static java.lang.String getMonth3Letters(java.lang.String);
  public static java.lang.String getMonthNumber(java.lang.String);
  public static int getMonthDiff(int, int, int, int);
  public static java.lang.String getDate();
}
Compiled from "Generic_Canvas.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Canvas extends java.awt.Canvas {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_Plot _Generic_Plot;
  public java.awt.Graphics2D _Graphics2D;
  public java.awt.image.BufferedImage _BufferedImage;
  public java.awt.Rectangle _Rectangle;
  public uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Canvas();
  public java.awt.Graphics getGraphics();
  public java.awt.image.BufferedImage getBufferedImage();
  public void paint(java.awt.Graphics);
  public void draw();
  public void drawOutline();
  public void setDimension(java.awt.Dimension);
}
Compiled from "Generic_Drawable_Interface.java"
public interface uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Drawable_Interface {
  public abstract java.awt.Dimension draw();
  public abstract java.awt.Dimension draw(java.awt.Graphics2D);
}
Compiled from "Generic_Printable.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Printable implements java.awt.print.Printable {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Canvas c;
  public uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Printable(uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Canvas);
  public int print(java.awt.Graphics, java.awt.print.PageFormat, int);
}
Compiled from "Generic_Visualisation.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Visualisation {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Visualisation();
  public static java.awt.image.BufferedImage loadImage(java.io.File);
  public static void saveImage(java.awt.image.BufferedImage, java.lang.String, java.io.File);
  public static java.util.concurrent.Future saveImage(java.util.concurrent.ExecutorService, java.lang.Object, java.awt.image.BufferedImage, long, java.lang.String, java.io.File);
  public static java.lang.Object[] getHeadlessEnvironment();
  public static void print_headless_check(java.awt.GraphicsEnvironment);
  public static java.awt.Font getDefaultFont();
}
Compiled from "Generic_Visualisation.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Visualisation$ImageSaver implements java.lang.Runnable {
  java.lang.Object obj;
  java.awt.image.BufferedImage bi;
  long timeInMilliseconds;
  java.lang.String format;
  java.io.File file;
  public uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Visualisation$ImageSaver();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Visualisation$ImageSaver(java.lang.Object, java.awt.image.BufferedImage, long, java.lang.String, java.io.File);
  public void run();
}
Compiled from "Abstract_Generic_AgeGenderPlot.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_AgeGenderPlot extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_Plot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_AgeGenderPlot();
  protected final void init(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, java.lang.Integer, int, int, java.math.RoundingMode);
  public void initialiseParameters(java.lang.Object[]);
  public void setOriginCol();
  public int[] drawYAxis(int, int, int, int, int, int, int);
  public int[] drawXAxis(int, int, int, int, int);
}
Compiled from "Abstract_Generic_BarChart.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_BarChart extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_Plot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_BarChart();
  protected final void init(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, java.lang.Integer, int, int, java.math.RoundingMode);
  public void initialiseParameters(java.lang.Object[]);
  public void setOriginCol();
  public int[] drawYAxis(int, int, int, int, int);
  public int[] drawXAxis(int, int, int, int, int);
  public int getxIncrement();
  public void setxIncrement(int);
  public int getnumberOfYAxisTicks();
  public void setnumberOfYAxisTicks(int);
  public java.math.BigDecimal getyPin();
  public void setyPin(java.math.BigDecimal);
  public java.math.BigDecimal getyIncrement();
  public void setyIncrement(java.math.BigDecimal);
  public int getBarWidth();
  public void setBarWidth(int);
  public int getBarGap();
  public void setBarGap(int);
  public java.math.BigDecimal getyMax();
  public void setyMax(java.math.BigDecimal);
}
Compiled from "Abstract_Generic_JApplet_AgeGenderPlot.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_AgeGenderPlot extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_Plot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_AgeGenderPlot();
  protected final void init(java.lang.String, int, int, java.lang.String, java.lang.String, int, int, int, int, java.math.RoundingMode);
  public void initialiseParameters(java.lang.Object[]);
  public void setOriginCol();
  public int[] drawYAxis(int, int, int, int, int, int, int);
  public int[] drawXAxis(int, int, int, int, int);
}
Compiled from "Abstract_Generic_JApplet_Plot.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_Plot extends javax.swing.JApplet {
  uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_Plot _Generic_Plot;
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_Plot();
  public void run(javax.swing.JFrame);
  public void init();
  protected void initPaint(javax.swing.JFrame);
  protected void resize(javax.swing.JFrame);
  public void paint(java.awt.Graphics);
  public void initG2();
  public void initG2Image();
  public void draw(java.awt.geom.Line2D);
  public void drawTitle(java.lang.String);
  public void drawOutline();
  public void setPaint(java.awt.Color);
  public void drawAxes(int, int);
  public java.lang.Object[] getData();
  protected void setData(java.lang.Object[]);
  protected static javax.swing.JFrame getJFrame(java.lang.String);
  public abstract void setOriginCol();
  public abstract int[] drawXAxis(int, int, int, int, int);
  public abstract int[] drawYAxis(int, int, int, int, int, int, int);
  public void initialiseParameters(java.lang.Object[]);
  public void fillRect(int, int, int, int);
  public void draw(java.awt.geom.Rectangle2D);
  public void draw(java.awt.geom.Point2D);
  public void drawString(java.lang.String, int, int);
  public int getTextWidth(java.lang.String);
  public int getTextHeight();
  public void writeText(java.lang.String, double, int, int);
  public java.awt.Graphics2D getG2image();
  public void setG2image(java.awt.Graphics2D);
  public java.awt.Graphics2D getG2();
  public void setG2(java.awt.Graphics2D);
  public java.awt.FontMetrics getFontMetrics();
  public void setFontMetrics(java.awt.FontMetrics);
  public java.lang.String getTitle();
  protected void setTitle(java.lang.String);
  public int getImageWidth();
  protected void setImageWidth(int);
  public int getImageHeight();
  protected void setImageHeight(int);
  public int getDataWidth();
  protected void setDataWidth(int);
  public int getDataHeight();
  protected void setDataHeight(int);
  public int getDataStartRow();
  protected void setDataStartRow(int);
  public int getDataMiddleRow();
  protected void setDataMiddleRow(int);
  public int getDataEndRow();
  protected void setDataEndRow(int);
  public int getDataStartCol();
  protected void setDataStartCol(int);
  public int getDataEndCol();
  protected void setDataEndCol(int);
  public int getxAxisHeight();
  protected void setxAxisHeight(int);
  public int getyAxisWidth();
  protected void setyAxisWidth(int);
  public java.lang.String getxAxisLabel();
  protected void setxAxisLabel(java.lang.String);
  public java.lang.String getyAxisLabel();
  protected void setyAxisLabel(java.lang.String);
  public int getExtraWidthLeft();
  protected void setExtraWidthLeft(int);
  public int getExtraWidthRight();
  protected void setExtraWidthRight(int);
  public int getExtraHeightTop();
  protected void setExtraHeightTop(int);
  public int getExtraHeightBottom();
  protected void setExtraHeightBottom(int);
  public java.math.BigDecimal getMaxX();
  protected void setMaxX(java.math.BigDecimal);
  public java.math.BigDecimal getMinX();
  protected void setMinX(java.math.BigDecimal);
  public java.math.BigDecimal getMaxY();
  protected void setMaxY(java.math.BigDecimal);
  public java.math.BigDecimal getMinY();
  protected void setMinY(java.math.BigDecimal);
  public int getDecimalPlacePrecisionForCalculations();
  protected void setDecimalPlacePrecisionForCalculations(int);
  public int getDecimalPlacePrecisionForDisplay();
  protected void setDecimalPlacePrecisionForDisplay(int);
  public int getSignificantDigits();
  protected void setSignificantDigits(int);
  public java.math.RoundingMode getRoundingMode();
  protected void setRoundingMode(java.math.RoundingMode);
  public java.math.BigDecimal getCellHeight();
  protected void setCellHeight(java.math.BigDecimal);
  protected void setCellHeight();
  public java.math.BigDecimal getCellWidth();
  protected void setCellWidth(java.math.BigDecimal);
  public void setCellWidth();
  protected int getOriginRow();
  public void setOriginRow(int);
  protected void setOriginRow();
  public int getOriginCol();
  protected void setOriginCol(int);
  public boolean isAddLegend();
  public void setAddLegend(boolean);
  public int getLegendHeight();
  protected void setLegendHeight(int);
  public int getLegendWidth();
  protected void setLegendWidth(int);
  public int getAgeInterval();
  protected void setAgeInterval(int);
  public int getStartAgeOfEndYearInterval();
  protected void setStartAgeOfEndYearInterval(int);
}
Compiled from "Abstract_Generic_JApplet_Plot.java"
final class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_Plot$1 extends java.awt.event.WindowAdapter {
  uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_Plot$1();
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "Abstract_Generic_LineGraph.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_LineGraph extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_Plot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_LineGraph();
  protected final void init(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, java.lang.Integer, int, int, java.math.RoundingMode);
  public void initialiseParameters(java.lang.Object[]);
  public void setOriginCol();
  public int[] drawYAxis(int, int, int, int, int);
  public int[] drawXAxis(int, int, int, int, int);
  public java.math.BigDecimal getyMax();
  public void setyMax(java.math.BigDecimal);
  public java.math.BigDecimal getyPin();
  public void setyPin(java.math.BigDecimal);
  public java.math.BigDecimal getyIncrement();
  public void setyIncrement(java.math.BigDecimal);
  public int getNumberOfYAxisTicks();
  public void setNumberOfYAxisTicks(int);
  public java.math.BigDecimal getxMax();
  public void setxMax(java.math.BigDecimal);
  public java.math.BigDecimal getxPin();
  public void setxPin(java.math.BigDecimal);
  public java.math.BigDecimal getxIncrement();
  public void setxIncrement(java.math.BigDecimal);
  public int getNumberOfXAxisTicks();
  public void setNumberOfXAxisTicks(int);
  public java.awt.Color[] getColours();
  public void setColours(java.awt.Color[]);
  public void initColours();
  public java.util.ArrayList<java.lang.String> getLabels();
  public void setLabels(java.util.ArrayList<java.lang.String>);
  public java.util.TreeMap<java.math.BigDecimal, java.lang.String> getxAxisLabels();
  public void setxAxisLabels(java.util.TreeMap<java.math.BigDecimal, java.lang.String>);
}
Compiled from "Abstract_Generic_Plot.java"
public abstract class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_Plot extends uk.ac.leeds.ccg.andyt.generic.execution.Generic_Runnable implements uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Drawable_Interface,java.lang.Runnable {
  protected transient java.util.concurrent.ExecutorService executorService;
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_Plot();
  protected java.util.concurrent.ExecutorService getExecutorService();
  public java.lang.Object[] getData();
  public void setData(java.lang.Object[]);
  public void initData(java.lang.Object[]);
  public java.lang.String getFormat();
  public void setFormat(java.lang.String);
  public java.io.File getFile();
  public void setFile(java.io.File);
  protected abstract void initialiseParameters(java.lang.Object[]);
  public java.awt.Graphics2D getG2image();
  protected void setG2image(java.awt.Graphics2D);
  public java.awt.Graphics2D getG2();
  protected void setG2(java.awt.Graphics2D);
  public java.awt.image.BufferedImage getBufferedImage();
  public void setBufferedImage(java.awt.image.BufferedImage);
  public boolean isDrawOriginLinesOnPlot();
  public void setDrawOriginLinesOnPlot(boolean);
  public java.awt.FontMetrics getFontMetrics();
  protected void setFontMetrics(java.awt.FontMetrics);
  public java.lang.String getTitle();
  public void setTitle(java.lang.String);
  public int getImageWidth();
  protected void setImageWidth(int);
  public int getImageHeight();
  protected void setImageHeight(int);
  public int getDataWidth();
  protected void setDataWidth(int);
  public int getDataHeight();
  protected void setDataHeight(int);
  public int getDataStartRow();
  protected void setDataStartRow(int);
  public int getDataMiddleRow();
  protected void setDataMiddleRow(int);
  public int getDataEndRow();
  protected void setDataEndRow(int);
  public int getDataStartCol();
  protected void setDataStartCol(int);
  public int getDataEndCol();
  protected void setDataEndCol(int);
  public int getxAxisHeight();
  protected void setxAxisHeight(int);
  public int getyAxisWidth();
  protected void setyAxisWidth(int);
  public java.lang.String getxAxisLabel();
  protected void setxAxisLabel(java.lang.String);
  public java.lang.String getyAxisLabel();
  protected void setyAxisLabel(java.lang.String);
  public int getExtraWidthLeft();
  protected void setExtraWidthLeft(int);
  public int getExtraWidthRight();
  protected void setExtraWidthRight(int);
  public int getExtraHeightTop();
  protected void setExtraHeightTop(int);
  public int getExtraHeightBottom();
  protected void setExtraHeightBottom(int);
  public final java.math.BigDecimal getMaxX();
  protected void setMaxX(java.math.BigDecimal);
  public final java.math.BigDecimal getMinX();
  protected void setMinX(java.math.BigDecimal);
  public java.math.BigDecimal getMaxY();
  protected void setMaxY(java.math.BigDecimal);
  public java.math.BigDecimal getMinY();
  protected void setMinY(java.math.BigDecimal);
  public int getDecimalPlacePrecisionForCalculations();
  protected void setDecimalPlacePrecisionForCalculations(int);
  public int getDecimalPlacePrecisionForDisplay();
  protected void setDecimalPlacePrecisionForDisplay(int);
  public int getSignificantDigits();
  protected void setSignificantDigits(int);
  protected java.math.RoundingMode getDefaultRoundingMode();
  public java.math.RoundingMode getRoundingMode();
  protected void setRoundingMode(java.math.RoundingMode);
  public java.math.BigDecimal getCellHeight();
  protected void setCellHeight(java.math.BigDecimal);
  public java.math.BigDecimal getCellWidth();
  protected void setCellWidth(java.math.BigDecimal);
  public int getOriginRow();
  protected void setOriginRow(int);
  public int getOriginCol();
  protected void setOriginCol(int);
  public boolean isAddLegend();
  public void setAddLegend(boolean);
  public int getLegendHeight();
  protected void setLegendHeight(int);
  public int getLegendWidth();
  protected void setLegendWidth(int);
  public int getAgeInterval();
  protected void setAgeInterval(int);
  public int getStartAgeOfEndYearInterval();
  protected void setStartAgeOfEndYearInterval(java.lang.Integer);
  protected void init(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, java.math.RoundingMode);
  public abstract java.lang.Object[] getDefaultData();
  protected void resize(javax.swing.JFrame);
  public void initG2(java.awt.Graphics);
  public void initFontMetrics();
  public void initG2Image();
  public java.math.BigDecimal imageRowToYCoordinate(double);
  public java.math.BigDecimal imageColToXCoordinate(double);
  public java.math.BigDecimal dataRowToYCoordinate(double);
  public java.math.BigDecimal dataColToXCoordinate(double);
  public uk.ac.leeds.ccg.andyt.generic.data.Generic_XYNumericalData dataPointToCoordinate(java.awt.geom.Point2D);
  public int coordinateToScreenCol(java.math.BigDecimal);
  public int coordinateToScreenCol(java.math.BigDecimal, java.math.RoundingMode);
  public int coordinateToScreenRow(java.math.BigDecimal);
  public int coordinateToScreenRow(java.math.BigDecimal, java.math.RoundingMode);
  public java.awt.geom.Point2D coordinateToScreen(java.math.BigDecimal, java.math.BigDecimal);
  public void setCellHeight();
  public void setCellWidth();
  public void setOriginRow();
  public abstract void setOriginCol();
  public void setYAxisWidth(int);
  public void setXAxisHeight(int);
  public void setPaint(java.awt.Color);
  public void draw(java.awt.geom.Line2D);
  public void draw(java.awt.geom.Point2D);
  public void drawString(java.lang.String, int, int);
  public void fillRect(int, int, int, int);
  public void draw(java.awt.geom.Rectangle2D);
  public void transform(java.awt.geom.AffineTransform);
  public void setTransform(java.awt.geom.AffineTransform);
  public int getDefaultScaleTickLength();
  public int getDefaultScaleTickAndTextSeparation();
  public int getDefaultPartTitleGap();
  public void drawAxes(int, int);
  public void drawAxes(uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_Plot, int, int);
  public abstract int[] drawXAxis(int, int, int, int, int);
  public abstract int[] drawYAxis(int, int, int, int, int, int, int);
  public void drawOutline();
  public void drawTitle(java.lang.String);
  public int getTextWidth(java.lang.String);
  public int getTextHeight();
  public void writeText(java.lang.String, double, int, int);
  public java.awt.Dimension draw();
  public abstract void drawData();
  public java.awt.Dimension draw(java.awt.Graphics2D);
}
Compiled from "Generic_AgeGenderBarChart.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_AgeGenderBarChart extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_AgeGenderPlot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_AgeGenderBarChart();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_AgeGenderBarChart(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, int, int, java.math.RoundingMode);
  public void drawData();
  public void drawBarChart(java.lang.Object[], int);
  public static void main(java.lang.String[]);
  public java.lang.Object[] getDefaultData();
  public static java.lang.Object[] getDefaultData(int, int, int, int);
  public void drawTitle(java.lang.String);
}
Compiled from "Generic_AgeGenderBoxPlot.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_AgeGenderBoxPlot extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_AgeGenderPlot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_AgeGenderBoxPlot();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_AgeGenderBoxPlot(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, int, int, java.math.RoundingMode);
  public static void main(java.lang.String[]);
  public void drawData();
  public void drawBoxplots();
  public java.lang.Object[] getDefaultData();
  public static java.lang.Object[] getDefaultData(int, int, int, java.math.RoundingMode);
  public void drawTitle(java.lang.String);
}
Compiled from "Generic_AgeGenderLineChart.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_AgeGenderLineChart extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_AgeGenderPlot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_AgeGenderLineChart();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_AgeGenderLineChart(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, int, int, java.math.RoundingMode);
  public static void main(java.lang.String[]);
  public void drawData();
  public void drawLineChartUsingMeanAndStandardDeviation();
  public void drawLineChartUsingMinQ1MedianQ3Max();
  public java.lang.Object[] getDefaultData();
  public static java.lang.Object[] getDefaultData(int, int, int, java.math.RoundingMode);
  public static java.lang.Object[] getData(int, java.math.RoundingMode);
}
Compiled from "Generic_BarChart.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_BarChart extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_BarChart {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_BarChart();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_BarChart(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, int, int, int, java.math.RoundingMode);
  public void drawData();
  public static void main(java.lang.String[]);
  public java.awt.Dimension draw();
  public void drawAxes(int);
  public java.lang.Object[] getDefaultData();
  public void drawTitle(java.lang.String);
}
Compiled from "Generic_JApplet_AgeGenderBarChart.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_AgeGenderBarChart extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_AgeGenderPlot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_AgeGenderBarChart();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_AgeGenderBarChart(java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, int, int, java.math.RoundingMode);
  public static void main(java.lang.String[]);
  public void setOriginCol();
}
Compiled from "Generic_JApplet_AgeGenderBoxPlot.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_AgeGenderBoxPlot extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_AgeGenderPlot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_AgeGenderBoxPlot();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_AgeGenderBoxPlot(java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, int, int, java.math.RoundingMode);
  public static void main(java.lang.String[]);
  public void setOriginCol();
}
Compiled from "Generic_JApplet_AgeGenderLineChart.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_AgeGenderLineChart extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_AgeGenderPlot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_AgeGenderLineChart();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_AgeGenderLineChart(java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, int, int, java.math.RoundingMode);
  public static void main(java.lang.String[]);
  public void setOriginCol();
}
Compiled from "Generic_JApplet_ScatterPlot.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_ScatterPlot extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_JApplet_Plot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_ScatterPlot();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_ScatterPlot(java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, java.math.RoundingMode);
  public static void main(java.lang.String[]);
  public int[] drawXAxis(int, int, int, int, int);
  public int[] drawYAxis(int, int, int, int, int, int, int);
  public void setOriginCol();
}
Compiled from "Generic_JApplet_ScatterPlotAndLinearRegression.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_ScatterPlotAndLinearRegression extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_ScatterPlot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_ScatterPlotAndLinearRegression();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_JApplet_ScatterPlotAndLinearRegression(java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, java.math.RoundingMode);
  public static void main(java.lang.String[]);
}
Compiled from "Generic_LineGraph.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_LineGraph extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_LineGraph {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_LineGraph();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_LineGraph(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, int, int, int, java.math.RoundingMode);
  public void drawData();
  public void drawMap(java.util.TreeMap<java.math.BigDecimal, java.math.BigDecimal>, java.awt.Color);
  public void drawPlus(int, int, int);
  public void drawCross(int, int, int);
  public static void main(java.lang.String[]);
  public java.awt.Dimension draw();
  public void drawAxes();
  public java.lang.Object[] getDefaultData();
  public void drawTitle(java.lang.String);
  protected void drawLegend();
}
Compiled from "Generic_Plot.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_Plot extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Abstract_Generic_Plot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.Generic_Canvas _Generic_Canvas;
  public java.util.concurrent.Future future;
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_Plot();
  public void run();
  public void initialiseParameters(java.lang.Object[]);
  public java.lang.Object[] getDefaultData();
  public void drawData();
  public void setOriginCol();
  public int[] drawXAxis(int, int, int, int, int);
  public int[] drawYAxis(int, int, int, int, int, int, int);
}
Compiled from "Generic_ScatterPlot.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_ScatterPlot extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_Plot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_ScatterPlot();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_ScatterPlot(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, java.math.RoundingMode);
  public static void main(java.lang.String[]);
  public void drawData();
  public int[] drawXAxis(int, int, int, int, int);
  public int[] drawYAxis(int, int, int, int, int, int, int);
  protected void drawPoints(java.awt.Color, java.lang.Object[]);
  public void setOriginCol();
  public java.lang.Object[] getDefaultData();
  public static java.lang.Object[] getDefaultData(boolean);
}
Compiled from "Generic_ScatterPlotAndLinearRegression.java"
public class uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_ScatterPlotAndLinearRegression extends uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_ScatterPlot {
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_ScatterPlotAndLinearRegression();
  public uk.ac.leeds.ccg.andyt.generic.visualisation.charts.Generic_ScatterPlotAndLinearRegression(java.util.concurrent.ExecutorService, java.io.File, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, boolean, int, int, java.math.RoundingMode);
  public static void main(java.lang.String[]);
  public void drawData();
  public java.lang.Object[] getDefaultData();
  public java.awt.Dimension draw();
  protected void drawLegend(double[]);
  protected double[][] getDataAsDoubleArray(java.util.ArrayList<uk.ac.leeds.ccg.andyt.generic.data.Generic_XYNumericalData>);
  protected void drawYEqualsXLineData(double[][]);
  protected void drawRegressionLine(double[], double[][]);
  public static double[] getSimpleRegressionParameters(double[][]);
  public static double[][] getXYLineData(double[][], double[]);
  public static double[][] getYEqualsXLineData(double[][]);
  public static java.lang.String[] getSimpleRegressionParametersStrings(double[]);
}
