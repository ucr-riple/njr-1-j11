Compiled from "ArgsParser.java"
public class sudoku.ArgsParser {
  public sudoku.ArgsParser(java.lang.String[]);
  public sudoku.generate.SudokuGenerator getGenerator();
  public int getSmallWidth();
  public int getSmallHeight();
  public int getNumToCreate();
  public java.lang.String getPath();
  public boolean isVerbose();
  public void usage();
}
Compiled from "CandidateSet.java"
public class sudoku.CandidateSet implements java.lang.Iterable<java.lang.Integer> {
  public sudoku.CandidateSet(int);
  public sudoku.CandidateSet(sudoku.CandidateSet);
  public boolean has(int);
  public void put(int);
  public void remove(int);
  public int getLowestValue();
  public int getRandomValue();
  public int getSize();
  public int cardinality();
  public boolean isEmpty();
  public java.lang.String toString();
  public java.util.Iterator<java.lang.Integer> iterator();
  static {};
}
Compiled from "CandidateSet.java"
class sudoku.CandidateSet$CandidateIterator implements java.util.Iterator<java.lang.Integer> {
  final java.util.BitSet set;
  int next;
  final sudoku.CandidateSet this$0;
  sudoku.CandidateSet$CandidateIterator(sudoku.CandidateSet, java.util.BitSet);
  public boolean hasNext();
  public java.lang.Integer next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "Main.java"
public class sudoku.Main {
  public sudoku.Main();
  public static void main(java.lang.String[]);
  public static void writeFile(java.util.List<sudoku.SudokuBoard>, java.lang.String);
  public static void run(sudoku.generate.SudokuGenerator, int, java.lang.String, boolean);
}
Compiled from "SolverService.java"
public class sudoku.SolverService {
  public sudoku.SolverService();
  public static int getFormity(sudoku.SudokuBoard);
  public static long getLastTime();
  public static java.lang.Class getLastWinner();
  public static int getTotalRuns();
  public static long getTotalTime();
  public static java.util.Map<java.lang.Class, java.lang.Integer> getWinMap();
  static sudoku.SudokuBoard access$000();
  static sudoku.SudokuSolver access$100();
  static void access$200(java.lang.Class, long);
  static sudoku.SudokuSolver access$300();
  static sudoku.SudokuSolver access$400();
  static {};
}
Compiled from "SolverService.java"
final class sudoku.SolverService$1 extends java.util.LinkedList<java.util.concurrent.Callable<java.lang.Integer>> {
  sudoku.SolverService$1();
}
Compiled from "SolverService.java"
class sudoku.SolverService$1$1 implements java.util.concurrent.Callable<java.lang.Integer> {
  final sudoku.SolverService$1 this$0;
  sudoku.SolverService$1$1(sudoku.SolverService$1);
  public java.lang.Integer call();
  public java.lang.Object call() throws java.lang.Exception;
}
Compiled from "SolverService.java"
class sudoku.SolverService$1$2 implements java.util.concurrent.Callable<java.lang.Integer> {
  final sudoku.SolverService$1 this$0;
  sudoku.SolverService$1$2(sudoku.SolverService$1);
  public java.lang.Integer call();
  public java.lang.Object call() throws java.lang.Exception;
}
Compiled from "SolverService.java"
class sudoku.SolverService$1$3 implements java.util.concurrent.Callable<java.lang.Integer> {
  final sudoku.SolverService$1 this$0;
  sudoku.SolverService$1$3(sudoku.SolverService$1);
  public java.lang.Integer call();
  public java.lang.Object call() throws java.lang.Exception;
}
Compiled from "SudokuBoard.java"
public class sudoku.SudokuBoard {
  protected final int[] board;
  protected final int p;
  protected final int q;
  protected final int n;
  protected static final java.util.Map<java.lang.Integer, java.util.Set<java.lang.Integer>> peers;
  protected static final java.util.Map<java.lang.Integer, java.util.List<java.util.List<java.lang.Integer>>> units;
  protected final java.lang.String LINE;
  protected final int CELL_WIDTH;
  public sudoku.SudokuBoard(int, int);
  public sudoku.SudokuBoard(int, int, java.lang.String);
  public sudoku.SudokuBoard(sudoku.SudokuBoard);
  public boolean isSet(int);
  public boolean isSet(int, int);
  public void setCell(int, int);
  public void setCell(int, int, int);
  public int getCell(int);
  public int getCell(int, int);
  public void clearCell(int);
  public void clearCell(int, int);
  public int getSmallWidth();
  public int getSmallHeight();
  public int getSize();
  public int getNumCells();
  public int getRow(int);
  public int getCol(int);
  public int getBoxRow(int, int);
  public int getBoxRow(int);
  public int getBoxRow(java.awt.Point);
  public int getBoxCol(int, int);
  public int getBoxCol(int);
  public int getBoxCol(java.awt.Point);
  public java.awt.Point getBoxCorner(int, int);
  public java.awt.Point getBoxCorner(int);
  public java.awt.Point getBoxCorner(java.awt.Point);
  public int pointToCell(int, int);
  public int pointToCell(java.awt.Point);
  public java.awt.Point cellToPoint(int);
  public int getNumClues();
  public java.util.Set<java.lang.Integer> getPeers(int, int);
  public java.util.Set<java.lang.Integer> getPeers(int);
  public java.util.Set<java.lang.Integer> getPeers(java.awt.Point);
  public java.util.List<java.util.List<java.lang.Integer>> getUnits(int, int);
  public java.util.List<java.util.List<java.lang.Integer>> getUnits(int);
  public java.util.List<java.util.List<java.lang.Integer>> getUnits(java.awt.Point);
  public sudoku.CandidateSet getOptions(int, int);
  public sudoku.CandidateSet getOptions(int);
  public sudoku.CandidateSet getOptions(java.awt.Point);
  public boolean isAcceptable(int, int, int);
  public boolean isAcceptable(int, int);
  public boolean isAcceptable(java.awt.Point, int);
  public boolean isSolved();
  public java.lang.String toString();
  public void fromString(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  static {};
}
Compiled from "SudokuSolver.java"
public interface sudoku.SudokuSolver {
  public static final int NO_SOLUTIONS;
  public static final int MULTIPLE_SOLUTIONS;
  public static final int UNIQUE_SOLUTION;
  public abstract sudoku.SudokuBoard solve(sudoku.SudokuBoard);
  public abstract java.util.List<sudoku.SudokuBoard> enumerate(sudoku.SudokuBoard);
  public abstract boolean isWellFormed(sudoku.SudokuBoard);
  public abstract int getFormity(sudoku.SudokuBoard);
}
Compiled from "Test.java"
public class sudoku.Test {
  public sudoku.Test();
  public static void main(java.lang.String[]);
}
Compiled from "Top95.java"
public class sudoku.Top95 {
  public static final java.util.List<sudoku.SudokuBoard> TOP95;
  public sudoku.Top95();
  public static long solve(sudoku.SudokuSolver);
  public static long formity(sudoku.SudokuSolver);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "Top95.java"
final class sudoku.Top95$1 extends java.util.ArrayList<sudoku.SudokuBoard> {
  sudoku.Top95$1();
}
Compiled from "Top95.java"
final class sudoku.Top95$2 extends java.util.ArrayList<sudoku.SudokuSolver> {
  sudoku.Top95$2();
}
Compiled from "BacktrackSolver.java"
public class sudoku.backtrack.BacktrackSolver implements sudoku.SudokuSolver {
  public sudoku.backtrack.BacktrackSolver();
  public sudoku.SudokuBoard solve(sudoku.SudokuBoard);
  public java.util.List<sudoku.SudokuBoard> enumerate(sudoku.SudokuBoard);
  public boolean isWellFormed(sudoku.SudokuBoard);
  public int getFormity(sudoku.SudokuBoard);
}
Compiled from "CLPBoard.java"
class sudoku.clp.CLPBoard {
  sudoku.clp.CLPBoard(sudoku.SudokuBoard);
  sudoku.clp.CLPBoard(sudoku.clp.CLPBoard);
  sudoku.CandidateSet getCandidateSet(int);
  sudoku.SudokuBoard getBoard();
  boolean assign(int, int);
  boolean eliminate(int, int);
  int getConstrainedCell();
  sudoku.SudokuBoard getSolvedBoard();
}
Compiled from "CLPBoardGenerator.java"
public class sudoku.clp.CLPBoardGenerator extends sudoku.clp.CLPBoard {
  sudoku.clp.CLPBoardGenerator(sudoku.clp.CLPBoard);
  int getConstrainedCell();
  public static sudoku.SudokuBoard getRandomBoard(int, int);
  public static sudoku.SudokuBoard getRandomBoard(sudoku.SudokuBoard);
}
Compiled from "ConstraintSolver.java"
public class sudoku.clp.ConstraintSolver implements sudoku.SudokuSolver {
  public sudoku.clp.ConstraintSolver();
  public sudoku.SudokuBoard solve(sudoku.SudokuBoard);
  public java.util.List<sudoku.SudokuBoard> enumerate(sudoku.SudokuBoard);
  public boolean isWellFormed(sudoku.SudokuBoard);
  public int getFormity(sudoku.SudokuBoard);
}
Compiled from "BoxConstraint.java"
class sudoku.dlx.BoxConstraint implements sudoku.dlx.Constraint {
  final int x;
  final int y;
  final int value;
  sudoku.dlx.BoxConstraint(int, int, int);
}
Compiled from "CellConstraint.java"
class sudoku.dlx.CellConstraint implements sudoku.dlx.Constraint {
  final int x;
  final int y;
  sudoku.dlx.CellConstraint(int, int);
}
Compiled from "ColumnConstraint.java"
class sudoku.dlx.ColumnConstraint implements sudoku.dlx.Constraint {
  final int column;
  final int value;
  sudoku.dlx.ColumnConstraint(int, int);
}
Compiled from "ColumnHeader.java"
class sudoku.dlx.ColumnHeader extends sudoku.dlx.Node {
  sudoku.dlx.Constraint constraint;
  int size;
  sudoku.dlx.ColumnHeader(sudoku.dlx.Constraint, int);
  sudoku.dlx.ColumnHeader();
  sudoku.dlx.ColumnHeader(sudoku.dlx.Constraint);
}
Compiled from "Constraint.java"
interface sudoku.dlx.Constraint {
}
Compiled from "DLXGenerator.java"
class sudoku.dlx.DLXGenerator {
  sudoku.dlx.DLXGenerator();
  static sudoku.dlx.DancingLinks generate(sudoku.SudokuBoard);
}
Compiled from "DancingLinks.java"
class sudoku.dlx.DancingLinks {
  sudoku.dlx.DancingLinks(sudoku.SudokuBoard);
  boolean isSolved();
  sudoku.SudokuBoard getBoard();
  void addColumn(sudoku.dlx.Constraint);
  void addRow(java.util.List<java.lang.Integer>);
  sudoku.dlx.ColumnHeader findBestColumn();
  void cover(sudoku.dlx.ColumnHeader);
  void uncover(sudoku.dlx.ColumnHeader);
  java.util.List<sudoku.dlx.Constraint> getRowName(sudoku.dlx.Node);
}
Compiled from "ExactCoverSolver.java"
public class sudoku.dlx.ExactCoverSolver implements sudoku.SudokuSolver {
  public sudoku.dlx.ExactCoverSolver();
  public sudoku.SudokuBoard solve(sudoku.SudokuBoard);
  public java.util.List<sudoku.SudokuBoard> enumerate(sudoku.SudokuBoard);
  public boolean isWellFormed(sudoku.SudokuBoard);
  public int getFormity(sudoku.SudokuBoard);
}
Compiled from "Node.java"
class sudoku.dlx.Node {
  sudoku.dlx.Node left;
  sudoku.dlx.Node right;
  sudoku.dlx.Node up;
  sudoku.dlx.Node down;
  sudoku.dlx.ColumnHeader head;
  sudoku.dlx.Node();
  sudoku.dlx.Node(sudoku.dlx.Node, sudoku.dlx.Node, sudoku.dlx.Node, sudoku.dlx.Node, sudoku.dlx.ColumnHeader);
  sudoku.dlx.Node setLeft(sudoku.dlx.Node);
  sudoku.dlx.Node setRight(sudoku.dlx.Node);
  sudoku.dlx.Node setUp(sudoku.dlx.Node);
  sudoku.dlx.Node setDown(sudoku.dlx.Node);
  sudoku.dlx.Node setHead(sudoku.dlx.ColumnHeader);
  void coverLeft();
  void coverUp();
  void uncoverLeft();
  void uncoverUp();
}
Compiled from "RowConstraint.java"
class sudoku.dlx.RowConstraint implements sudoku.dlx.Constraint {
  final int row;
  final int value;
  sudoku.dlx.RowConstraint(int, int);
}
Compiled from "BottomUpGenerator.java"
public class sudoku.generate.BottomUpGenerator implements sudoku.generate.SudokuGenerator {
  public sudoku.generate.BottomUpGenerator(int, int);
  public sudoku.generate.BottomUpGenerator(sudoku.SudokuBoard);
  public sudoku.SudokuBoard getProblem();
}
Compiled from "DeductionGenerator.java"
public class sudoku.generate.DeductionGenerator implements sudoku.generate.SudokuGenerator {
  public sudoku.generate.DeductionGenerator(int, int);
  public sudoku.generate.DeductionGenerator(sudoku.SudokuBoard);
  public sudoku.SudokuBoard getProblem();
}
Compiled from "SlowGenerator.java"
public class sudoku.generate.SlowGenerator implements sudoku.generate.SudokuGenerator {
  public sudoku.generate.SlowGenerator(int, int);
  public sudoku.generate.SlowGenerator(sudoku.SudokuBoard);
  public sudoku.SudokuBoard getProblem();
}
Compiled from "SlowGenerator.java"
class sudoku.generate.SlowGenerator$Cell implements java.lang.Comparable<sudoku.generate.SlowGenerator$Cell> {
  final int cell;
  final int value;
  final int card;
  final sudoku.generate.SlowGenerator this$0;
  sudoku.generate.SlowGenerator$Cell(sudoku.generate.SlowGenerator, int, int, int);
  public int compareTo(sudoku.generate.SlowGenerator$Cell);
  public int compareTo(java.lang.Object);
}
Compiled from "SudokuGenerator.java"
public interface sudoku.generate.SudokuGenerator {
  public abstract sudoku.SudokuBoard getProblem();
}
Compiled from "TargetGenerator.java"
public class sudoku.generate.TargetGenerator implements sudoku.generate.SudokuGenerator {
  public sudoku.generate.TargetGenerator(int, int, int, long);
  public sudoku.generate.TargetGenerator(sudoku.SudokuBoard, int, long);
  public sudoku.SudokuBoard getProblem();
}
Compiled from "TopDownGenerator.java"
public class sudoku.generate.TopDownGenerator implements sudoku.generate.SudokuGenerator {
  public sudoku.generate.TopDownGenerator(int, int);
  public sudoku.generate.TopDownGenerator(sudoku.SudokuBoard);
  public sudoku.SudokuBoard getProblem();
}
Compiled from "ArrayUtil.java"
public class sudoku.util.ArrayUtil {
  public static int[] range(int, int);
  public static void shuffle(int[]);
  public static <T> boolean contains(T[], T);
  static {};
}
Compiled from "ListUtil.java"
public class sudoku.util.ListUtil {
  public static java.util.List<java.lang.Integer> rangeInc(int, int);
  public static java.util.List<java.lang.Integer> range(int, int);
}
Compiled from "MapUtil.java"
public class sudoku.util.MapUtil {
  public static <K, V> V maybeGet(java.util.Map<K, V>, K, V);
}
Compiled from "StringUtil.java"
public final class sudoku.util.StringUtil {
  public static java.lang.String repeat(java.lang.String, int);
  public static java.lang.String join(java.util.Collection<?>, java.lang.String);
  public static java.lang.String join(java.util.ArrayList<?>, java.lang.String);
  public static java.lang.String join(java.lang.Object[], java.lang.String);
  public static java.lang.String padRight(java.lang.String, char, int);
  public static java.lang.String padLeft(java.lang.String, char, int);
  public static java.lang.String replaceAll(java.lang.String, java.lang.String[], java.lang.String[]);
  public static java.lang.String replaceAll(java.lang.String, java.lang.String[], java.lang.String);
}
