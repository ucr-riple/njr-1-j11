Compiled from "DirkExpLexer.java"
public class expression.DirkExpLexer extends org.antlr.runtime.Lexer {
  public static final int LT;
  public static final int RBRACE;
  public static final int MOD;
  public static final int LETTER;
  public static final int LBRACE;
  public static final int LTEQ;
  public static final int Exponent;
  public static final int POWER;
  public static final int NOTEQUALS;
  public static final int EQUALS;
  public static final int DATETIME_LITERAL;
  public static final int NOT;
  public static final int GTEQ;
  public static final int MINUS;
  public static final int Digit;
  public static final int AND;
  public static final int EOF;
  public static final int MUL;
  public static final int LPAREN;
  public static final int LBRACKET;
  public static final int INDEX;
  public static final int RPAREN;
  public static final int STRING_LITERAL;
  public static final int WS;
  public static final int VARIABLE;
  public static final int BRACKETEXP;
  public static final int COMMA;
  public static final int INTEGER_LITERAL;
  public static final int IDENTIFIER;
  public static final int OR;
  public static final int GT;
  public static final int PLUS;
  public static final int MEMBERACCESS;
  public static final int CALL;
  public static final int DIV;
  public static final int RBRACKET;
  public static final int DECIMAL_LITERAL;
  protected expression.DirkExpLexer$DFA8 dfa8;
  static final java.lang.String DFA8_eotS;
  static final java.lang.String DFA8_eofS;
  static final java.lang.String DFA8_minS;
  static final java.lang.String DFA8_maxS;
  static final java.lang.String DFA8_acceptS;
  static final java.lang.String DFA8_specialS;
  static final java.lang.String[] DFA8_transitionS;
  static final short[] DFA8_eot;
  static final short[] DFA8_eof;
  static final char[] DFA8_min;
  static final char[] DFA8_max;
  static final short[] DFA8_accept;
  static final short[] DFA8_special;
  static final short[][] DFA8_transition;
  public expression.DirkExpLexer();
  public expression.DirkExpLexer(org.antlr.runtime.CharStream);
  public expression.DirkExpLexer(org.antlr.runtime.CharStream, org.antlr.runtime.RecognizerSharedState);
  public java.lang.String getGrammarFileName();
  public final void mAND() throws org.antlr.runtime.RecognitionException;
  public final void mOR() throws org.antlr.runtime.RecognitionException;
  public final void mNOT() throws org.antlr.runtime.RecognitionException;
  public final void mCOMMA() throws org.antlr.runtime.RecognitionException;
  public final void mPLUS() throws org.antlr.runtime.RecognitionException;
  public final void mMINUS() throws org.antlr.runtime.RecognitionException;
  public final void mMUL() throws org.antlr.runtime.RecognitionException;
  public final void mDIV() throws org.antlr.runtime.RecognitionException;
  public final void mMOD() throws org.antlr.runtime.RecognitionException;
  public final void mPOWER() throws org.antlr.runtime.RecognitionException;
  public final void mEQUALS() throws org.antlr.runtime.RecognitionException;
  public final void mNOTEQUALS() throws org.antlr.runtime.RecognitionException;
  public final void mLT() throws org.antlr.runtime.RecognitionException;
  public final void mLTEQ() throws org.antlr.runtime.RecognitionException;
  public final void mGT() throws org.antlr.runtime.RecognitionException;
  public final void mGTEQ() throws org.antlr.runtime.RecognitionException;
  public final void mLPAREN() throws org.antlr.runtime.RecognitionException;
  public final void mRPAREN() throws org.antlr.runtime.RecognitionException;
  public final void mLBRACE() throws org.antlr.runtime.RecognitionException;
  public final void mRBRACE() throws org.antlr.runtime.RecognitionException;
  public final void mLBRACKET() throws org.antlr.runtime.RecognitionException;
  public final void mRBRACKET() throws org.antlr.runtime.RecognitionException;
  public final void mDATETIME_LITERAL() throws org.antlr.runtime.RecognitionException;
  public final void mSTRING_LITERAL() throws org.antlr.runtime.RecognitionException;
  public final void mIDENTIFIER() throws org.antlr.runtime.RecognitionException;
  public final void mLETTER() throws org.antlr.runtime.RecognitionException;
  public final void mDECIMAL_LITERAL() throws org.antlr.runtime.RecognitionException;
  public final void mExponent() throws org.antlr.runtime.RecognitionException;
  public final void mINTEGER_LITERAL() throws org.antlr.runtime.RecognitionException;
  public final void mDigit() throws org.antlr.runtime.RecognitionException;
  public final void mWS() throws org.antlr.runtime.RecognitionException;
  public void mTokens() throws org.antlr.runtime.RecognitionException;
  static {};
}
Compiled from "DirkExpLexer.java"
class expression.DirkExpLexer$DFA8 extends org.antlr.runtime.DFA {
  final expression.DirkExpLexer this$0;
  public expression.DirkExpLexer$DFA8(expression.DirkExpLexer, org.antlr.runtime.BaseRecognizer);
  public java.lang.String getDescription();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser extends org.antlr.runtime.Parser {
  public static final java.lang.String[] tokenNames;
  public static final int LT;
  public static final int RBRACE;
  public static final int LETTER;
  public static final int MOD;
  public static final int LBRACE;
  public static final int LTEQ;
  public static final int Exponent;
  public static final int POWER;
  public static final int NOTEQUALS;
  public static final int EQUALS;
  public static final int DATETIME_LITERAL;
  public static final int NOT;
  public static final int GTEQ;
  public static final int MINUS;
  public static final int Digit;
  public static final int AND;
  public static final int EOF;
  public static final int MUL;
  public static final int LPAREN;
  public static final int LBRACKET;
  public static final int INDEX;
  public static final int RPAREN;
  public static final int WS;
  public static final int STRING_LITERAL;
  public static final int VARIABLE;
  public static final int COMMA;
  public static final int BRACKETEXP;
  public static final int IDENTIFIER;
  public static final int INTEGER_LITERAL;
  public static final int OR;
  public static final int GT;
  public static final int PLUS;
  public static final int MEMBERACCESS;
  public static final int CALL;
  public static final int RBRACKET;
  public static final int DIV;
  public static final int DECIMAL_LITERAL;
  protected org.antlr.runtime.tree.TreeAdaptor adaptor;
  public static final org.antlr.runtime.BitSet FOLLOW_logicalOrExpr_in_expr97;
  public static final org.antlr.runtime.BitSet FOLLOW_logicalAndExpr_in_logicalOrExpr118;
  public static final org.antlr.runtime.BitSet FOLLOW_OR_in_logicalOrExpr121;
  public static final org.antlr.runtime.BitSet FOLLOW_logicalAndExpr_in_logicalOrExpr123;
  public static final org.antlr.runtime.BitSet FOLLOW_equalityExpr_in_logicalAndExpr170;
  public static final org.antlr.runtime.BitSet FOLLOW_AND_in_logicalAndExpr173;
  public static final org.antlr.runtime.BitSet FOLLOW_equalityExpr_in_logicalAndExpr175;
  public static final org.antlr.runtime.BitSet FOLLOW_relationalExpr_in_equalityExpr227;
  public static final org.antlr.runtime.BitSet FOLLOW_set_in_equalityExpr230;
  public static final org.antlr.runtime.BitSet FOLLOW_relationalExpr_in_equalityExpr237;
  public static final org.antlr.runtime.BitSet FOLLOW_additiveExpr_in_relationalExpr263;
  public static final org.antlr.runtime.BitSet FOLLOW_set_in_relationalExpr266;
  public static final org.antlr.runtime.BitSet FOLLOW_additiveExpr_in_relationalExpr277;
  public static final org.antlr.runtime.BitSet FOLLOW_multiplyExpr_in_additiveExpr302;
  public static final org.antlr.runtime.BitSet FOLLOW_set_in_additiveExpr305;
  public static final org.antlr.runtime.BitSet FOLLOW_multiplyExpr_in_additiveExpr312;
  public static final org.antlr.runtime.BitSet FOLLOW_powExpr_in_multiplyExpr334;
  public static final org.antlr.runtime.BitSet FOLLOW_set_in_multiplyExpr337;
  public static final org.antlr.runtime.BitSet FOLLOW_powExpr_in_multiplyExpr349;
  public static final org.antlr.runtime.BitSet FOLLOW_unaryExpr_in_powExpr375;
  public static final org.antlr.runtime.BitSet FOLLOW_POWER_in_powExpr378;
  public static final org.antlr.runtime.BitSet FOLLOW_unaryExpr_in_powExpr380;
  public static final org.antlr.runtime.BitSet FOLLOW_set_in_unaryExpr406;
  public static final org.antlr.runtime.BitSet FOLLOW_unaryExpr_in_unaryExpr418;
  public static final org.antlr.runtime.BitSet FOLLOW_memberExpr_in_unaryExpr432;
  public static final org.antlr.runtime.BitSet FOLLOW_basicExpr_in_memberExpr460;
  public static final org.antlr.runtime.BitSet FOLLOW_parenExpr_in_basicExpr482;
  public static final org.antlr.runtime.BitSet FOLLOW_literal_in_basicExpr486;
  public static final org.antlr.runtime.BitSet FOLLOW_memberFunctionExpr_in_basicExpr491;
  public static final org.antlr.runtime.BitSet FOLLOW_LPAREN_in_parenExpr519;
  public static final org.antlr.runtime.BitSet FOLLOW_expr_in_parenExpr521;
  public static final org.antlr.runtime.BitSet FOLLOW_RPAREN_in_parenExpr524;
  public static final org.antlr.runtime.BitSet FOLLOW_numbericLiteral_in_literal559;
  public static final org.antlr.runtime.BitSet FOLLOW_stringLiteral_in_literal569;
  public static final org.antlr.runtime.BitSet FOLLOW_set_in_numbericLiteral0;
  public static final org.antlr.runtime.BitSet FOLLOW_STRING_LITERAL_in_stringLiteral642;
  public static final org.antlr.runtime.BitSet FOLLOW_variableExpr_in_stringLiteral650;
  public static final org.antlr.runtime.BitSet FOLLOW_fieldPropertyExpr_in_memberFunctionExpr680;
  public static final org.antlr.runtime.BitSet FOLLOW_methodExpr_in_memberFunctionExpr684;
  public static final org.antlr.runtime.BitSet FOLLOW_IDENTIFIER_in_fieldPropertyExpr708;
  public static final org.antlr.runtime.BitSet FOLLOW_IDENTIFIER_in_methodExpr736;
  public static final org.antlr.runtime.BitSet FOLLOW_LPAREN_in_methodExpr738;
  public static final org.antlr.runtime.BitSet FOLLOW_argument_in_methodExpr741;
  public static final org.antlr.runtime.BitSet FOLLOW_COMMA_in_methodExpr744;
  public static final org.antlr.runtime.BitSet FOLLOW_argument_in_methodExpr746;
  public static final org.antlr.runtime.BitSet FOLLOW_RPAREN_in_methodExpr752;
  public static final org.antlr.runtime.BitSet FOLLOW_expr_in_argument800;
  public static final org.antlr.runtime.BitSet FOLLOW_LBRACKET_in_variableExpr820;
  public static final org.antlr.runtime.BitSet FOLLOW_IDENTIFIER_in_variableExpr822;
  public static final org.antlr.runtime.BitSet FOLLOW_RBRACKET_in_variableExpr824;
  public expression.DirkExpParser(org.antlr.runtime.TokenStream);
  public expression.DirkExpParser(org.antlr.runtime.TokenStream, org.antlr.runtime.RecognizerSharedState);
  public void setTreeAdaptor(org.antlr.runtime.tree.TreeAdaptor);
  public org.antlr.runtime.tree.TreeAdaptor getTreeAdaptor();
  public java.lang.String[] getTokenNames();
  public java.lang.String getGrammarFileName();
  public final expression.DirkExpParser$expr_return expr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$logicalOrExpr_return logicalOrExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$logicalAndExpr_return logicalAndExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$equalityExpr_return equalityExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$relationalExpr_return relationalExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$additiveExpr_return additiveExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$multiplyExpr_return multiplyExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$powExpr_return powExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$unaryExpr_return unaryExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$memberExpr_return memberExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$basicExpr_return basicExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$parenExpr_return parenExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$literal_return literal() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$numbericLiteral_return numbericLiteral() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$stringLiteral_return stringLiteral() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$memberFunctionExpr_return memberFunctionExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$fieldPropertyExpr_return fieldPropertyExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$methodExpr_return methodExpr() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$argument_return argument() throws org.antlr.runtime.RecognitionException;
  public final expression.DirkExpParser$variableExpr_return variableExpr() throws org.antlr.runtime.RecognitionException;
  static {};
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$additiveExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$additiveExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$argument_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$argument_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$basicExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$basicExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$equalityExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$equalityExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$expr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$expr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$fieldPropertyExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$fieldPropertyExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$literal_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$literal_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$logicalAndExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$logicalAndExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$logicalOrExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$logicalOrExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$memberExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$memberExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$memberFunctionExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$memberFunctionExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$methodExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$methodExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$multiplyExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$multiplyExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$numbericLiteral_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$numbericLiteral_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$parenExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$parenExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$powExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$powExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$relationalExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$relationalExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$stringLiteral_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$stringLiteral_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$unaryExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$unaryExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpParser.java"
public class expression.DirkExpParser$variableExpr_return extends org.antlr.runtime.ParserRuleReturnScope {
  org.antlr.runtime.tree.CommonTree tree;
  public expression.DirkExpParser$variableExpr_return();
  public java.lang.Object getTree();
}
Compiled from "DirkExpTest.java"
public class expression.DirkExpTest {
  public expression.DirkExpTest();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "ExpressionHelper.java"
public class expression.ExpressionHelper {
  public expression.ExpressionHelper();
  public static expression.bean.IExpression createTree(org.antlr.runtime.tree.CommonTree) throws java.lang.Exception;
}
Compiled from "SQLWriter.java"
public class expression.SQLWriter extends java.io.StringWriter {
  int indent;
  boolean atBeginningOfLine;
  public static final java.lang.String newLine;
  public expression.SQLWriter();
  public void resetIndent();
  public void addIndent();
  public void subIndent();
  public void newLineAddIndent();
  public void newLineSubIndent();
  public void write(java.lang.String);
  public void writeLine();
  static {};
}
Compiled from "BinaryExpression.java"
public abstract class expression.bean.BinaryExpression implements expression.bean.IExpression {
  protected expression.bean.IExpression leftExpression;
  protected expression.bean.IExpression rightExpression;
  public expression.bean.BinaryExpression(expression.bean.IExpression, expression.bean.IExpression);
  public expression.bean.IExpression getLeftExpression();
  public void setLeftExpression(expression.bean.IExpression);
  public expression.bean.IExpression getRightExpression();
  public void setRightExpression(expression.bean.IExpression);
  public abstract java.lang.String getStrExpression();
}
Compiled from "IExpression.java"
public interface expression.bean.IExpression {
  public abstract void accept(expression.bean.IExpressionVisitor);
}
Compiled from "IExpressionVisitor.java"
public interface expression.bean.IExpressionVisitor {
  public abstract void visit(expression.bean.arithmetic.Addition);
  public abstract void visit(expression.bean.arithmetic.BitwiseAnd);
  public abstract void visit(expression.bean.arithmetic.BitwiseOr);
  public abstract void visit(expression.bean.arithmetic.BitwiseXor);
  public abstract void visit(expression.bean.arithmetic.Concat);
  public abstract void visit(expression.bean.arithmetic.Division);
  public abstract void visit(expression.bean.arithmetic.Multi);
  public abstract void visit(expression.bean.arithmetic.Subtract);
  public abstract void visit(expression.bean.condition.AndExpression);
  public abstract void visit(expression.bean.condition.OrExpression);
  public abstract void visit(expression.bean.relation.Between);
  public abstract void visit(expression.bean.relation.EqualsTo);
  public abstract void visit(expression.bean.relation.GreaterThan);
  public abstract void visit(expression.bean.relation.GreaterThanEquals);
  public abstract void visit(expression.bean.relation.InExpression);
  public abstract void visit(expression.bean.relation.LikeExpression);
  public abstract void visit(expression.bean.relation.MinorThan);
  public abstract void visit(expression.bean.relation.MinorThanEquals);
  public abstract void visit(expression.bean.relation.NotEqualsTo);
  public abstract void visit(expression.bean.value.FinalValue);
  public abstract void visit(expression.bean.value.ParamValue);
  public abstract void visit(expression.bean.value.IdentifierValue);
  public abstract void visit(expression.bean.arithmetic.Module);
  public abstract void visit(expression.bean.func.FunctionExpression);
  public abstract void visit(expression.bean.value.BracketValue);
}
Compiled from "Addition.java"
public class expression.bean.arithmetic.Addition extends expression.bean.BinaryExpression {
  public expression.bean.arithmetic.Addition(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "BitwiseAnd.java"
public class expression.bean.arithmetic.BitwiseAnd extends expression.bean.BinaryExpression {
  public expression.bean.arithmetic.BitwiseAnd(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "BitwiseOr.java"
public class expression.bean.arithmetic.BitwiseOr extends expression.bean.BinaryExpression {
  public expression.bean.arithmetic.BitwiseOr(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "BitwiseXor.java"
public class expression.bean.arithmetic.BitwiseXor extends expression.bean.BinaryExpression {
  public expression.bean.arithmetic.BitwiseXor(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "Concat.java"
public class expression.bean.arithmetic.Concat extends expression.bean.BinaryExpression {
  public expression.bean.arithmetic.Concat(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "Division.java"
public class expression.bean.arithmetic.Division extends expression.bean.BinaryExpression {
  public expression.bean.arithmetic.Division(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "Module.java"
public class expression.bean.arithmetic.Module extends expression.bean.BinaryExpression {
  public expression.bean.arithmetic.Module(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "Multi.java"
public class expression.bean.arithmetic.Multi extends expression.bean.BinaryExpression {
  public expression.bean.arithmetic.Multi(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "Subtract.java"
public class expression.bean.arithmetic.Subtract extends expression.bean.BinaryExpression {
  public expression.bean.arithmetic.Subtract(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "AndExpression.java"
public class expression.bean.condition.AndExpression extends expression.bean.BinaryExpression {
  public expression.bean.condition.AndExpression(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "OrExpression.java"
public class expression.bean.condition.OrExpression extends expression.bean.BinaryExpression {
  public expression.bean.condition.OrExpression(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "FunctionExpression.java"
public class expression.bean.func.FunctionExpression implements expression.bean.IExpression {
  public java.util.List<expression.bean.IExpression> getArguments();
  public void setArguments(java.util.List<expression.bean.IExpression>);
  public java.lang.String getFuncName();
  public void setFuncName(java.lang.String);
  public expression.bean.func.FunctionExpression(java.lang.String, java.util.List<expression.bean.IExpression>);
  public void accept(expression.bean.IExpressionVisitor);
}
Compiled from "UnaryExpression.java"
public class expression.bean.func.UnaryExpression implements expression.bean.IExpression {
  public expression.bean.func.UnaryExpression();
  public void accept(expression.bean.IExpressionVisitor);
}
Compiled from "Between.java"
public class expression.bean.relation.Between implements expression.bean.IExpression {
  public expression.bean.relation.Between(expression.bean.IExpression, expression.bean.IExpression, expression.bean.IExpression);
  public expression.bean.IExpression getLeftExpression();
  public void setLeftExpression(expression.bean.IExpression);
  public expression.bean.IExpression getBetweenExpressionBegin();
  public void setBetweenExpressionBegin(expression.bean.IExpression);
  public expression.bean.IExpression getBetweenExpressionEnd();
  public void setBetweenExpressionEnd(expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
}
Compiled from "EqualsTo.java"
public class expression.bean.relation.EqualsTo extends expression.bean.BinaryExpression {
  public expression.bean.relation.EqualsTo(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "GreaterThan.java"
public class expression.bean.relation.GreaterThan extends expression.bean.BinaryExpression {
  public expression.bean.relation.GreaterThan(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "GreaterThanEquals.java"
public class expression.bean.relation.GreaterThanEquals extends expression.bean.BinaryExpression {
  public expression.bean.relation.GreaterThanEquals(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "InExpression.java"
public class expression.bean.relation.InExpression implements expression.bean.IExpression {
  public expression.bean.relation.InExpression(expression.bean.IExpression, java.util.List<expression.bean.IExpression>);
  public expression.bean.IExpression getLeftExpression();
  public void setLeftExpression(expression.bean.IExpression);
  public java.util.List<expression.bean.IExpression> getExpItemList();
  public void setExpItemList(java.util.List<expression.bean.IExpression>);
  public void accept(expression.bean.IExpressionVisitor);
}
Compiled from "LikeExpression.java"
public class expression.bean.relation.LikeExpression extends expression.bean.BinaryExpression {
  public expression.bean.relation.LikeExpression(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "MinorThan.java"
public class expression.bean.relation.MinorThan extends expression.bean.BinaryExpression {
  public expression.bean.relation.MinorThan(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "MinorThanEquals.java"
public class expression.bean.relation.MinorThanEquals extends expression.bean.BinaryExpression {
  public expression.bean.relation.MinorThanEquals(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "NotEqualsTo.java"
public class expression.bean.relation.NotEqualsTo extends expression.bean.BinaryExpression {
  public expression.bean.relation.NotEqualsTo(expression.bean.IExpression, expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
  public java.lang.String getStrExpression();
}
Compiled from "BracketValue.java"
public class expression.bean.value.BracketValue implements expression.bean.IExpression {
  public expression.bean.IExpression getExpression();
  public void setExpression(expression.bean.IExpression);
  public expression.bean.value.BracketValue(expression.bean.IExpression);
  public void accept(expression.bean.IExpressionVisitor);
}
Compiled from "FinalValue.java"
public class expression.bean.value.FinalValue implements expression.bean.IExpression {
  public void accept(expression.bean.IExpressionVisitor);
  public expression.bean.value.FinalValue(java.lang.String, expression.bean.value.FinalValue$ValueType);
  public java.lang.String getText();
  public void setText(java.lang.String);
  public expression.bean.value.FinalValue$ValueType getType();
  public void setType(expression.bean.value.FinalValue$ValueType);
}
Compiled from "FinalValue.java"
public final class expression.bean.value.FinalValue$ValueType extends java.lang.Enum<expression.bean.value.FinalValue$ValueType> {
  public static final expression.bean.value.FinalValue$ValueType Integer;
  public static final expression.bean.value.FinalValue$ValueType Decimal;
  public static final expression.bean.value.FinalValue$ValueType DateTime;
  public static final expression.bean.value.FinalValue$ValueType Boolean;
  public static final expression.bean.value.FinalValue$ValueType String;
  public static expression.bean.value.FinalValue$ValueType[] values();
  public static expression.bean.value.FinalValue$ValueType valueOf(java.lang.String);
  static {};
}
Compiled from "IdentifierValue.java"
public class expression.bean.value.IdentifierValue implements expression.bean.IExpression {
  public expression.bean.value.IdentifierValue(java.lang.String);
  public java.lang.String getIdentifier();
  public void setIdentifier(java.lang.String);
  public void accept(expression.bean.IExpressionVisitor);
}
Compiled from "ParamValue.java"
public class expression.bean.value.ParamValue implements expression.bean.IExpression {
  public expression.bean.value.ParamValue(java.lang.String);
  public java.lang.String getConvertStr();
  public void setConvertStr(java.lang.String);
  public java.lang.String getParam();
  public void setParam(java.lang.String);
  public java.lang.String getTransformParam();
  public void accept(expression.bean.IExpressionVisitor);
}
Compiled from "SQLExpressionVisitor.java"
public class expression.visitor.SQLExpressionVisitor implements expression.bean.IExpressionVisitor {
  expression.SQLWriter sqlWriter;
  public expression.visitor.SQLExpressionVisitor();
  public java.lang.String getResult();
  public void visit(expression.bean.arithmetic.Addition);
  public void visit(expression.bean.arithmetic.BitwiseAnd);
  public void visit(expression.bean.arithmetic.BitwiseOr);
  public void visit(expression.bean.arithmetic.BitwiseXor);
  public void visit(expression.bean.arithmetic.Concat);
  public void visit(expression.bean.arithmetic.Division);
  public void visit(expression.bean.arithmetic.Multi);
  public void visit(expression.bean.arithmetic.Subtract);
  public void visit(expression.bean.condition.AndExpression);
  public void visit(expression.bean.condition.OrExpression);
  public void visit(expression.bean.relation.Between);
  public void visit(expression.bean.relation.EqualsTo);
  public void visit(expression.bean.relation.GreaterThan);
  public void visit(expression.bean.relation.GreaterThanEquals);
  public void visit(expression.bean.relation.InExpression);
  public void visit(expression.bean.relation.LikeExpression);
  public void visit(expression.bean.relation.MinorThan);
  public void visit(expression.bean.relation.MinorThanEquals);
  public void visit(expression.bean.relation.NotEqualsTo);
  public void visit(expression.bean.value.FinalValue);
  public void visit(expression.bean.value.ParamValue);
  public void visit(expression.bean.value.IdentifierValue);
  public void visit(expression.bean.arithmetic.Module);
  public void visit(expression.bean.func.FunctionExpression);
  public void visit(expression.bean.value.BracketValue);
}
