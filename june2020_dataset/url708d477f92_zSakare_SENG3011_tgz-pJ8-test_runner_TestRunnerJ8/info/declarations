Compiled from "Runner.java"
public class main.engine.Runner {
  public main.engine.Runner();
  public static void main(java.lang.String[]);
}
Compiled from "TradeStrategyEvaluator.java"
public class main.evaluator.TradeStrategyEvaluator {
  public main.evaluator.TradeStrategyEvaluator(java.util.List<main.implementations.order.AlgorithmicTrade>);
  public double calculateProfitLoss();
  public void setTradePairs();
  public java.util.Map<main.implementations.order.AlgorithmicTrade, main.implementations.order.AlgorithmicTrade> getTradePair();
}
Compiled from "TradeSignalGenerator.java"
public class main.generator.TradeSignalGenerator {
  public main.generator.TradeSignalGenerator(java.util.List<main.implementations.order.Order>, java.util.List<main.implementations.order.Order>, java.util.List<main.implementations.order.Order>);
  public java.util.List<main.implementations.order.Order> getBidList();
  public void setBidList(java.util.List<main.implementations.order.Order>);
  public java.util.List<main.implementations.order.Order> getAskList();
  public void setAskList(java.util.List<main.implementations.order.Order>);
  public java.util.List<main.implementations.order.Order> getTradeList();
  public void setTradeList(java.util.List<main.implementations.order.Order>);
  public java.util.List<main.implementations.order.Order> newRandomBid(java.lang.String);
  public java.util.List<main.implementations.order.Order> newRandomAsk(java.lang.String);
  public java.util.List<main.implementations.order.Order> newMomentumOrders(java.lang.String, java.lang.Integer, java.lang.Double);
  public java.util.List<main.implementations.order.Order> newMeanReversionOrders(java.lang.String, java.lang.Integer, java.lang.Double);
}
Compiled from "Controller.java"
public class main.gui.controller.Controller {
  public main.gui.controller.Controller();
  public void setOrderbook(java.lang.String);
  public void setStrategy(java.lang.String);
  public main.utils.Strategy getStrategy();
  public void runStrategy();
  public void setVolume(java.lang.String);
  public void evaluate();
  public java.lang.Integer getLookbackPeriod();
  public void setLookbackPeriod(java.lang.String) throws java.lang.NumberFormatException;
  public java.lang.Double getThreshold();
  public void setThreshold(java.lang.String) throws java.lang.NumberFormatException;
  public main.evaluator.TradeStrategyEvaluator getEvaluator();
}
Compiled from "RunnerGUI.java"
public class main.gui.view.RunnerGUI {
  public static void main(java.lang.String[]);
  public main.gui.view.RunnerGUI();
  static javax.swing.JFrame access$000(main.gui.view.RunnerGUI);
  static main.gui.controller.Controller access$100(main.gui.view.RunnerGUI);
  static java.lang.String access$200(java.awt.ItemSelectable);
  static void access$300(main.gui.view.RunnerGUI, java.lang.String, javax.swing.JTextArea);
}
Compiled from "RunnerGUI.java"
final class main.gui.view.RunnerGUI$1 implements java.lang.Runnable {
  main.gui.view.RunnerGUI$1();
  public void run();
}
Compiled from "RunnerGUI.java"
class main.gui.view.RunnerGUI$2 extends java.awt.event.MouseAdapter {
  final main.gui.view.RunnerGUI this$0;
  main.gui.view.RunnerGUI$2(main.gui.view.RunnerGUI);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "RunnerGUI.java"
class main.gui.view.RunnerGUI$3 implements java.awt.event.ActionListener {
  final main.gui.view.RunnerGUI this$0;
  main.gui.view.RunnerGUI$3(main.gui.view.RunnerGUI);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RunnerGUI.java"
class main.gui.view.RunnerGUI$4 extends java.awt.event.MouseAdapter {
  final main.gui.view.RunnerGUI this$0;
  main.gui.view.RunnerGUI$4(main.gui.view.RunnerGUI);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "RunnerGUI.java"
class main.gui.view.RunnerGUI$5 extends java.awt.event.MouseAdapter {
  final main.gui.view.RunnerGUI this$0;
  main.gui.view.RunnerGUI$5(main.gui.view.RunnerGUI);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "RunnerGUI.java"
class main.gui.view.RunnerGUI$6 extends java.awt.event.MouseAdapter {
  final main.gui.view.RunnerGUI this$0;
  main.gui.view.RunnerGUI$6(main.gui.view.RunnerGUI);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "RunnerGUI.java"
class main.gui.view.RunnerGUI$7 implements java.lang.Runnable {
  final javax.swing.JTextArea val$textArea;
  final java.lang.String val$text;
  final main.gui.view.RunnerGUI this$0;
  main.gui.view.RunnerGUI$7(main.gui.view.RunnerGUI, javax.swing.JTextArea, java.lang.String);
  public void run();
}
Compiled from "RunnerGUI.java"
class main.gui.view.RunnerGUI$8 extends java.io.OutputStream {
  final javax.swing.JTextArea val$textArea;
  final main.gui.view.RunnerGUI this$0;
  main.gui.view.RunnerGUI$8(main.gui.view.RunnerGUI, javax.swing.JTextArea);
  public void write(int) throws java.io.IOException;
  public void write(byte[], int, int) throws java.io.IOException;
  public void write(byte[]) throws java.io.IOException;
}
Compiled from "TradeGraphPlotter.java"
public class main.gui.view.TradeGraphPlotter extends javax.swing.JDialog {
  public main.gui.view.TradeGraphPlotter(java.lang.String, java.lang.String, java.util.Map<main.implementations.order.AlgorithmicTrade, main.implementations.order.AlgorithmicTrade>);
}
Compiled from "OrderBuilderImpl.java"
public class main.implementations.OrderBuilderImpl implements main.interfaces.OrderBuilder {
  public main.implementations.OrderBuilderImpl(java.lang.String, java.util.Date, double, java.lang.String, java.lang.String, java.lang.String);
  public main.implementations.OrderBuilderImpl(main.parser.SircaOrder);
  public main.implementations.OrderBuilderImpl(java.lang.String, java.util.Date, double, java.lang.String, java.lang.String);
  public main.implementations.order.Order build();
  public void setSecurity(java.lang.String);
  public void setBuyerBrokerId(java.lang.String);
  public void setSellerBrokerId(java.lang.String);
  public void setDateTime(java.lang.String, java.lang.String);
  public void setPrice(java.lang.String);
  public void setBid(java.lang.String);
  public void setVolume(java.lang.String);
  public void setDateTime(java.util.Date);
  public void setRecordType(java.lang.String);
  public void setPrice(double);
  public void setVolume(int);
  public void setUndisclosedVolume(java.lang.String);
  public void setValue(double);
  public void setQualifiers(java.lang.String);
  public void setTransactionId(java.lang.String);
  public void setBidId(java.lang.String);
  public void setAskId(java.lang.String);
  public void setBid(boolean);
  public void setEntryTime(java.util.Date);
  public void setOldPrice(java.lang.String);
  public void setOldVolume(java.lang.String);
}
Compiled from "OrderbookImpl.java"
public class main.implementations.OrderbookImpl implements main.interfaces.Orderbook {
  public main.implementations.OrderbookImpl(java.util.List<main.implementations.order.Order>, java.util.List<main.implementations.order.Order>, java.util.List<main.implementations.order.Order>);
  public void setBidList(java.util.List<main.implementations.order.Order>);
  public void setAskList(java.util.List<main.implementations.order.Order>);
  public void setTradeList(java.util.List<main.implementations.order.Order>);
  public java.util.List<main.implementations.order.Order> getBidList();
  public java.util.List<main.implementations.order.Order> getAskList();
  public java.util.List<main.implementations.order.Order> getTradeList();
  public java.util.List<main.implementations.order.AlgorithmicTrade> runStrategy(main.utils.Strategy, java.lang.String, java.lang.Integer, java.lang.Double);
  public main.implementations.order.AlgorithmicTrade tradeMatcher(main.implementations.order.Order);
  public java.util.List<main.implementations.order.AlgorithmicTrade> matchTrades(java.util.List<main.implementations.order.Order>);
}
Compiled from "AlgorithmicTrade.java"
public class main.implementations.order.AlgorithmicTrade {
  public main.implementations.order.AlgorithmicTrade(main.implementations.order.Order, main.implementations.order.Order);
  public main.implementations.order.Order getBidOrder();
  public main.implementations.order.Order getAskOrder();
  public double evaluateTrade();
  public boolean equals(java.lang.Object);
  public int hashCode();
}
Compiled from "Order.java"
public class main.implementations.order.Order {
  public main.implementations.order.Order(java.lang.String, java.util.Date, java.lang.String, double, int, int, double, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.util.Date, double, int, java.lang.String, java.lang.String);
  public java.lang.String getInstrument();
  public void setInstrument(java.lang.String);
  public java.util.Date getDateTime();
  public void setDateTime(java.util.Date);
  public java.lang.String getRecordType();
  public void setRecordType(java.lang.String);
  public double getPrice();
  public void setPrice(double);
  public int getVolume();
  public void setVolume(int);
  public int getUndisclosedVolume();
  public void setUndisclosedVolume(int);
  public double getValue();
  public void setValue(double);
  public java.lang.String getQualifiers();
  public void setQualifiers(java.lang.String);
  public java.lang.String getTransactionId();
  public void setTransactionId(java.lang.String);
  public java.lang.String getBidId();
  public void setBidId(java.lang.String);
  public java.lang.String getAskId();
  public void setAskId(java.lang.String);
  public boolean isBid();
  public void setBid(boolean);
  public java.util.Date getEntryTime();
  public void setEntryTime(java.util.Date);
  public double getOldPrice();
  public void setOldPrice(double);
  public int getOldVolume();
  public void setOldVolume(int);
  public java.lang.String getBuyerBrokerId();
  public void setBuyerBrokerId(java.lang.String);
  public java.lang.String getSellerBrokerId();
  public void setSellerBrokerId(java.lang.String);
  public boolean equals(java.lang.Object);
}
Compiled from "OrderBuilder.java"
public interface main.interfaces.OrderBuilder {
  public static final java.lang.String DEFAULT_INSTRUMENT;
  public static final java.lang.String DEFAULT_DATE;
  public static final java.lang.String DEFAULT_TIME;
  public static final java.lang.String DEFAULT_RECORD_TYPE;
  public static final double DEFAULT_PRICE;
  public static final int DEFAULT_VOLUME;
  public static final java.lang.String DEFAULT_UNDISCLOSED_VOLUME;
  public static final double DEFAULT_VALUE;
  public static final java.lang.String DEFAULT_QUALIFIERS;
  public static final java.lang.String DEFAULT_TRANSACTIONID;
  public static final java.lang.String DEFAULT_BIDID;
  public static final java.lang.String DEFAULT_ASKID;
  public static final java.lang.String DEFAULT_BID_OR_ASK;
  public static final java.util.Date DEFAULT_ENTRY_TIME;
  public static final java.lang.String DEFAULT_OLD_PRICE;
  public static final java.lang.String DEFAULT_OLD_VOLUME;
  public static final java.lang.String DEFAULT_BUYER_BROKER_ID;
  public static final java.lang.String DEFAULT_SELLER_BROKER_ID;
  public abstract main.implementations.order.Order build();
  static {};
}
Compiled from "Orderbook.java"
public interface main.interfaces.Orderbook {
  public abstract void setBidList(java.util.List<main.implementations.order.Order>);
  public abstract void setAskList(java.util.List<main.implementations.order.Order>);
  public abstract void setTradeList(java.util.List<main.implementations.order.Order>);
  public abstract java.util.List<main.implementations.order.Order> getBidList();
  public abstract java.util.List<main.implementations.order.Order> getAskList();
  public abstract java.util.List<main.implementations.order.Order> getTradeList();
  public abstract java.util.List<main.implementations.order.AlgorithmicTrade> runStrategy(main.utils.Strategy, java.lang.String, java.lang.Integer, java.lang.Double);
}
Compiled from "SircaCSVParser.java"
public class main.parser.SircaCSVParser {
  public main.parser.SircaCSVParser();
  public static main.interfaces.Orderbook input(java.lang.String);
}
Compiled from "SircaOrder.java"
public class main.parser.SircaOrder {
  public main.parser.SircaOrder();
  public java.lang.String getInstrument();
  public void setInstrument(java.lang.String);
  public java.lang.String getDate();
  public void setDate(java.lang.String);
  public java.lang.String getTime();
  public void setTime(java.lang.String);
  public java.lang.String getRecordType();
  public void setRecordType(java.lang.String);
  public java.lang.String getPrice();
  public void setPrice(java.lang.String);
  public java.lang.String getVolume();
  public void setVolume(java.lang.String);
  public java.lang.String getUndisclosedVolume();
  public void setUndisclosedVolume(java.lang.String);
  public java.lang.String getValue();
  public void setValue(java.lang.String);
  public java.lang.String getQualifiers();
  public void setQualifiers(java.lang.String);
  public java.lang.String getTransactionId();
  public void setTransactionId(java.lang.String);
  public java.lang.String getBidId();
  public void setBidId(java.lang.String);
  public java.lang.String getAskId();
  public void setAskId(java.lang.String);
  public java.lang.String getBidOrAsk();
  public void setBidOrAsk(java.lang.String);
  public java.lang.String getEntryTime();
  public void setEntryTime(java.lang.String);
  public java.lang.String getOldPrice();
  public void setOldPrice(java.lang.String);
  public java.lang.String getOldVolume();
  public void setOldVolume(java.lang.String);
  public java.lang.String getBuyerBrokerId();
  public void setBuyerBrokerId(java.lang.String);
  public java.lang.String getSellerBrokerId();
  public void setSellerBrokerId(java.lang.String);
}
Compiled from "Strategy.java"
public final class main.utils.Strategy extends java.lang.Enum<main.utils.Strategy> {
  public static final main.utils.Strategy RANDOM;
  public static final main.utils.Strategy MOMENTUM;
  public static final main.utils.Strategy MEAN_REVERSION;
  public static main.utils.Strategy[] values();
  public static main.utils.Strategy valueOf(java.lang.String);
  static {};
}
Compiled from "TimeUtil.java"
public class main.utils.TimeUtil {
  public main.utils.TimeUtil();
  public static java.sql.Time generateTime();
  public static int generateHour();
  public static int generateMinute();
  public static int generateSeconds();
  public static int generateMillis();
}
Compiled from "TradeStrategyEvaluatorTest.java"
public class test.evaluator.TradeStrategyEvaluatorTest {
  static final boolean $assertionsDisabled;
  public test.evaluator.TradeStrategyEvaluatorTest();
  public void setUp() throws java.lang.Exception;
  public void tearDown() throws java.lang.Exception;
  public void testCalculateProfitLoss();
  public void testCalculateBreakEven();
  public void testCalculatePositive();
  public void testCalculateNegative();
  static {};
}
Compiled from "TradeSignalGeneratorTest.java"
public class test.generator.TradeSignalGeneratorTest {
  static final boolean $assertionsDisabled;
  public test.generator.TradeSignalGeneratorTest();
  public void setUp() throws java.lang.Exception;
  public void tearDown() throws java.lang.Exception;
  public void testRandomAskSignal();
  public void testRandomBidSignal();
  public void testMomentumSignal();
  public void testMeanReversionSignal();
  static {};
}
Compiled from "ListGenerator.java"
public class test.helper.ListGenerator {
  public test.helper.ListGenerator();
  public static java.util.List<main.implementations.order.Order> generateRandomBidList();
  public static java.util.List<main.implementations.order.Order> generateMomentumBidList();
  public static java.util.List<main.implementations.order.Order> generateMeanRevBidList();
  public static java.util.List<main.implementations.order.Order> generateRandomAskList();
  public static java.util.List<main.implementations.order.Order> generateAskMomentumList();
  public static java.util.List<main.implementations.order.Order> generateMeanRevAskList();
  public static java.util.List<main.implementations.order.Order> generatePositiveMomentumTradeList();
  public static java.util.List<main.implementations.order.Order> generateNegativeMomentumTradeList();
  public static java.util.List<main.implementations.order.Order> generatePositiveMeanRevTradeList();
  public static java.util.List<main.implementations.order.Order> generateNegativeMeanRevTradeList();
  static {};
}
Compiled from "OrderbookImplTest.java"
public class test.implementations.OrderbookImplTest {
  static final boolean $assertionsDisabled;
  public test.implementations.OrderbookImplTest();
  public void printList();
  public void setUp() throws java.lang.Exception;
  public void tearDown() throws java.lang.Exception;
  public void testRunRandomStrategy();
  public void testPosMomentumStrategy();
  public void testNegMomentumStrategy();
  public void testPosMeanRevStrategy();
  public void testNegMeanRevStrategy();
  public void testTradeMatcher();
  public void testTradeMatcherFails();
  public void testTradeMatcherManyTrades();
  public void testTradeMatcherManyTradesWithSomeNonMatches();
  static {};
}
Compiled from "AlgorithmicTradeTest.java"
public class test.implementations.order.AlgorithmicTradeTest {
  static final boolean $assertionsDisabled;
  public test.implementations.order.AlgorithmicTradeTest();
  public void setUp() throws java.lang.Exception;
  public void tearDown() throws java.lang.Exception;
  public void testEvaluateTradeLowerAskVolume();
  public void testEvaluateTradeLowerBidVolume();
  public void testEvaluateTradeSameVolume();
  static {};
}
Compiled from "AlgorithmicTradeTestRunner.java"
public class test.runner.AlgorithmicTradeTestRunner {
  public test.runner.AlgorithmicTradeTestRunner();
  public static void main(java.lang.String[]);
  public static void run();
}
Compiled from "OrderbookTestRunner.java"
public class test.runner.OrderbookTestRunner {
  public test.runner.OrderbookTestRunner();
  public static void main(java.lang.String[]);
  public static void run();
}
Compiled from "StrategyEvaluatorTestRunner.java"
public class test.runner.StrategyEvaluatorTestRunner {
  public test.runner.StrategyEvaluatorTestRunner();
  public static void main(java.lang.String[]);
  public static void run();
}
Compiled from "TestRunner.java"
public class test.runner.TestRunner {
  public test.runner.TestRunner();
  public static void main(java.lang.String[]);
}
Compiled from "TradeSignalGeneratorTestRunner.java"
public class test.runner.TradeSignalGeneratorTestRunner {
  public test.runner.TradeSignalGeneratorTestRunner();
  public static void main(java.lang.String[]);
  public static void run();
}
