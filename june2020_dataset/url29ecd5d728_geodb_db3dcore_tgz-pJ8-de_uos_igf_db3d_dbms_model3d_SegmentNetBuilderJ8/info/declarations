Compiled from "Constants.java"
public interface de.uos.igf.db3d.dbms.api.Constants {
  public static final int READ_ONLY;
  public static final int READ_WRITE;
}
Compiled from "ContainmentException.java"
public class de.uos.igf.db3d.dbms.api.ContainmentException extends de.uos.igf.db3d.dbms.api.UpdateException {
  public de.uos.igf.db3d.dbms.api.ContainmentException();
  public de.uos.igf.db3d.dbms.api.ContainmentException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.ContainmentException(java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.ContainmentException(java.lang.String, java.lang.Throwable);
}
Compiled from "DB3DException.java"
public class de.uos.igf.db3d.dbms.api.DB3DException extends org.apache.commons.lang.exception.NestableException {
  public de.uos.igf.db3d.dbms.api.DB3DException();
  public de.uos.igf.db3d.dbms.api.DB3DException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.DB3DException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.DB3DException(java.lang.Throwable);
}
Compiled from "DB3DRuntimeException.java"
public class de.uos.igf.db3d.dbms.api.DB3DRuntimeException extends org.apache.commons.lang.exception.NestableRuntimeException {
  public de.uos.igf.db3d.dbms.api.DB3DRuntimeException();
  public de.uos.igf.db3d.dbms.api.DB3DRuntimeException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.DB3DRuntimeException(java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.DB3DRuntimeException(java.lang.String, java.lang.Throwable);
}
Compiled from "DBMSException.java"
public class de.uos.igf.db3d.dbms.api.DBMSException extends de.uos.igf.db3d.dbms.api.DB3DException {
  public de.uos.igf.db3d.dbms.api.DBMSException();
  public de.uos.igf.db3d.dbms.api.DBMSException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.DBMSException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.DBMSException(java.lang.Throwable);
}
Compiled from "DataException.java"
public class de.uos.igf.db3d.dbms.api.DataException extends de.uos.igf.db3d.dbms.api.DB3DException {
  public de.uos.igf.db3d.dbms.api.DataException();
  public de.uos.igf.db3d.dbms.api.DataException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.DataException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.DataException(java.lang.Throwable);
}
Compiled from "DatabaseClosedException.java"
public final class de.uos.igf.db3d.dbms.api.DatabaseClosedException extends de.uos.igf.db3d.dbms.api.DBMSException {
  public de.uos.igf.db3d.dbms.api.DatabaseClosedException();
  public de.uos.igf.db3d.dbms.api.DatabaseClosedException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.DatabaseClosedException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.DatabaseClosedException(java.lang.Throwable);
}
Compiled from "DatabaseNotFoundException.java"
public final class de.uos.igf.db3d.dbms.api.DatabaseNotFoundException extends de.uos.igf.db3d.dbms.api.DBMSException {
  public de.uos.igf.db3d.dbms.api.DatabaseNotFoundException();
  public de.uos.igf.db3d.dbms.api.DatabaseNotFoundException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.DatabaseNotFoundException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.DatabaseNotFoundException(java.lang.Throwable);
}
Compiled from "DatabaseOpenException.java"
public final class de.uos.igf.db3d.dbms.api.DatabaseOpenException extends de.uos.igf.db3d.dbms.api.DBMSException {
  public de.uos.igf.db3d.dbms.api.DatabaseOpenException();
  public de.uos.igf.db3d.dbms.api.DatabaseOpenException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.DatabaseOpenException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.DatabaseOpenException(java.lang.Throwable);
}
Compiled from "Db3dSimpleResourceBundle.java"
public class de.uos.igf.db3d.dbms.api.Db3dSimpleResourceBundle {
  public de.uos.igf.db3d.dbms.api.Db3dSimpleResourceBundle();
  public static java.lang.String getString(java.lang.String);
  static {};
}
Compiled from "DimensionNotClassifiedException.java"
public final class de.uos.igf.db3d.dbms.api.DimensionNotClassifiedException extends de.uos.igf.db3d.dbms.api.DataException {
  public de.uos.igf.db3d.dbms.api.DimensionNotClassifiedException();
  public de.uos.igf.db3d.dbms.api.DimensionNotClassifiedException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.DimensionNotClassifiedException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.DimensionNotClassifiedException(java.lang.Throwable);
}
Compiled from "FactoryException.java"
public final class de.uos.igf.db3d.dbms.api.FactoryException extends de.uos.igf.db3d.dbms.api.DBMSException {
  public de.uos.igf.db3d.dbms.api.FactoryException();
  public de.uos.igf.db3d.dbms.api.FactoryException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.FactoryException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.FactoryException(java.lang.Throwable);
}
Compiled from "GeometryException.java"
public class de.uos.igf.db3d.dbms.api.GeometryException extends de.uos.igf.db3d.dbms.api.UpdateException {
  public de.uos.igf.db3d.dbms.api.GeometryException();
  public de.uos.igf.db3d.dbms.api.GeometryException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.GeometryException(java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.GeometryException(java.lang.String, java.lang.Throwable);
}
Compiled from "NameNotFoundException.java"
public final class de.uos.igf.db3d.dbms.api.NameNotFoundException extends de.uos.igf.db3d.dbms.api.DataException {
  public de.uos.igf.db3d.dbms.api.NameNotFoundException();
  public de.uos.igf.db3d.dbms.api.NameNotFoundException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.NameNotFoundException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.NameNotFoundException(java.lang.Throwable);
}
Compiled from "NameNotUniqueException.java"
public final class de.uos.igf.db3d.dbms.api.NameNotUniqueException extends de.uos.igf.db3d.dbms.api.DataException {
  public de.uos.igf.db3d.dbms.api.NameNotUniqueException();
  public de.uos.igf.db3d.dbms.api.NameNotUniqueException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.NameNotUniqueException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.NameNotUniqueException(java.lang.Throwable);
}
Compiled from "NotYetImplementedException.java"
public class de.uos.igf.db3d.dbms.api.NotYetImplementedException extends org.apache.commons.lang.exception.NestableRuntimeException {
  public de.uos.igf.db3d.dbms.api.NotYetImplementedException();
  public de.uos.igf.db3d.dbms.api.NotYetImplementedException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.NotYetImplementedException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.NotYetImplementedException(java.lang.Throwable);
}
Compiled from "PropertiesException.java"
public final class de.uos.igf.db3d.dbms.api.PropertiesException extends de.uos.igf.db3d.dbms.api.DBMSException {
  public de.uos.igf.db3d.dbms.api.PropertiesException();
  public de.uos.igf.db3d.dbms.api.PropertiesException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.PropertiesException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.PropertiesException(java.lang.Throwable);
}
Compiled from "SRID.java"
public final class de.uos.igf.db3d.dbms.api.SRID {
  public de.uos.igf.db3d.dbms.api.SRID();
  public static java.lang.String getSridDescription(int);
  static {};
}
Compiled from "TopologyException.java"
public class de.uos.igf.db3d.dbms.api.TopologyException extends de.uos.igf.db3d.dbms.api.UpdateException {
  public de.uos.igf.db3d.dbms.api.TopologyException();
  public de.uos.igf.db3d.dbms.api.TopologyException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.TopologyException(java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.TopologyException(java.lang.String, java.lang.Throwable);
}
Compiled from "TransactionException.java"
public class de.uos.igf.db3d.dbms.api.TransactionException extends de.uos.igf.db3d.dbms.api.DB3DRuntimeException {
  public de.uos.igf.db3d.dbms.api.TransactionException();
  public de.uos.igf.db3d.dbms.api.TransactionException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.TransactionException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.TransactionException(java.lang.Throwable);
}
Compiled from "TransactionInProgressException.java"
public final class de.uos.igf.db3d.dbms.api.TransactionInProgressException extends de.uos.igf.db3d.dbms.api.TransactionException {
  public de.uos.igf.db3d.dbms.api.TransactionInProgressException();
  public de.uos.igf.db3d.dbms.api.TransactionInProgressException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.TransactionInProgressException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.TransactionInProgressException(java.lang.Throwable);
}
Compiled from "TransactionNotInProgressException.java"
public final class de.uos.igf.db3d.dbms.api.TransactionNotInProgressException extends de.uos.igf.db3d.dbms.api.TransactionException {
  public de.uos.igf.db3d.dbms.api.TransactionNotInProgressException();
  public de.uos.igf.db3d.dbms.api.TransactionNotInProgressException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.TransactionNotInProgressException(java.lang.String, java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.TransactionNotInProgressException(java.lang.Throwable);
}
Compiled from "UpdateException.java"
public class de.uos.igf.db3d.dbms.api.UpdateException extends org.apache.commons.lang.exception.NestableException {
  public de.uos.igf.db3d.dbms.api.UpdateException();
  public de.uos.igf.db3d.dbms.api.UpdateException(java.lang.String);
  public de.uos.igf.db3d.dbms.api.UpdateException(java.lang.Throwable);
  public de.uos.igf.db3d.dbms.api.UpdateException(java.lang.String, java.lang.Throwable);
}
Compiled from "Equivalentable.java"
public interface de.uos.igf.db3d.dbms.geom.Equivalentable {
  public static final byte STRICT_EQUAL;
  public static final byte GEOMETRY_EQUIVALENT;
  public abstract boolean isEqual(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public abstract int isEqualHC(int);
  public abstract boolean isGeometryEquivalent(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public abstract int isGeometryEquivalentHC(int);
  public abstract boolean isEqualClass(java.lang.Object);
}
Compiled from "GeomUtils.java"
public final class de.uos.igf.db3d.dbms.geom.GeomUtils {
  public static final de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator POINT_COMP;
  public static final de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator POINT_X_COMP;
  public static final de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator POINT_Y_COMP;
  public static final de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator POINT_Z_COMP;
  public static int addDimensions(int...);
  public static int doubleCompare(double, double);
  static double affineDistance(double[][], double[][], double[], double[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public static double simplexDistance(double[][], double[][], double[], double[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public static int simplexVertexRelation(double[][], double[], double[], de.uos.igf.db3d.dbms.geom.ScalarOperator, boolean);
  public static final double getMin(double...);
  public static final double getMax(double...);
  public static final double getMin(double, double);
  public static final double getMin(double, double, double);
  public static final double getMin(double, double, double, double);
  public static final double getMax(double, double);
  public static final double getMax(double, double, double);
  public static final double getMax(double, double, double, double);
  public static final de.uos.igf.db3d.dbms.geom.Point3D[] getSorted(de.uos.igf.db3d.dbms.geom.Point3D[]);
  public static final de.uos.igf.db3d.dbms.geom.Point3D[] getSorted(de.uos.igf.db3d.dbms.geom.Point3D[], de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator);
  public static final de.uos.igf.db3d.dbms.geom.Point3D[] getSorted(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D);
  public static final de.uos.igf.db3d.dbms.geom.Point3D[] getSorted(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D);
  public static final de.uos.igf.db3d.dbms.geom.Point3D[] getSorted(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D);
  public static final de.uos.igf.db3d.dbms.geom.MBB3D getExtendedMBB(de.uos.igf.db3d.dbms.geom.Tetrahedron3D, double);
  public static final de.uos.igf.db3d.dbms.geom.MBB3D getExtendedMBB(de.uos.igf.db3d.dbms.geom.Triangle3D, double);
  public static final de.uos.igf.db3d.dbms.geom.MBB3D getExtendedMBB(de.uos.igf.db3d.dbms.geom.Segment3D, double);
  public static final de.uos.igf.db3d.dbms.geom.MBB3D getExtendedMBB(de.uos.igf.db3d.dbms.geom.Point3D, double);
  public static final de.uos.igf.db3d.dbms.geom.Point3D[] getPointsWithMaxDistance(de.uos.igf.db3d.dbms.geom.Point3D[]);
  public static final de.uos.igf.db3d.dbms.geom.Point3D[] getPointsWithMinDistance(de.uos.igf.db3d.dbms.geom.Point3D[]);
  public static final boolean isOrientationEquivalentTriangle(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  static {};
}
Compiled from "GeomUtils.java"
class de.uos.igf.db3d.dbms.geom.GeomUtils$1 {
}
Compiled from "GeomUtils.java"
interface de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator extends java.util.Comparator {
}
Compiled from "GeomUtils.java"
final class de.uos.igf.db3d.dbms.geom.GeomUtils$Point3D_XYZ_Comparator implements de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator {
  public int compare(java.lang.Object, java.lang.Object);
  de.uos.igf.db3d.dbms.geom.GeomUtils$Point3D_XYZ_Comparator(de.uos.igf.db3d.dbms.geom.GeomUtils$1);
}
Compiled from "GeomUtils.java"
final class de.uos.igf.db3d.dbms.geom.GeomUtils$Point3D_X_Comparator implements de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator {
  public int compare(java.lang.Object, java.lang.Object);
  de.uos.igf.db3d.dbms.geom.GeomUtils$Point3D_X_Comparator(de.uos.igf.db3d.dbms.geom.GeomUtils$1);
}
Compiled from "GeomUtils.java"
final class de.uos.igf.db3d.dbms.geom.GeomUtils$Point3D_Y_Comparator implements de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator {
  public int compare(java.lang.Object, java.lang.Object);
  de.uos.igf.db3d.dbms.geom.GeomUtils$Point3D_Y_Comparator(de.uos.igf.db3d.dbms.geom.GeomUtils$1);
}
Compiled from "GeomUtils.java"
final class de.uos.igf.db3d.dbms.geom.GeomUtils$Point3D_Z_Comparator implements de.uos.igf.db3d.dbms.geom.GeomUtils$Point3DComparator {
  public int compare(java.lang.Object, java.lang.Object);
  de.uos.igf.db3d.dbms.geom.GeomUtils$Point3D_Z_Comparator(de.uos.igf.db3d.dbms.geom.GeomUtils$1);
}
Compiled from "LA.java"
public class de.uos.igf.db3d.dbms.geom.LA {
  public static final double DOUBLE_EPSILON;
  public static final double FLOAT_EPSILON;
  public static final double DOUBLE_MIN_UNIT;
  public de.uos.igf.db3d.dbms.geom.LA();
  public static java.lang.String toString(double);
  public static int digits(double) throws java.lang.IllegalArgumentException;
  public static double[] project(java.util.Collection<java.lang.Integer>, double[]);
  public static double[] inject(int, java.util.Collection<java.lang.Integer>, double[]);
  public static void inject(double[], java.util.Collection<java.lang.Integer>, double[]);
  public static double[] project(int[], double[]);
  public static double[][] project(int[], int[], double[][]);
  public static double[][] project(java.util.Collection<java.lang.Integer>, double[][]);
  public static double[][] project(java.util.Collection<java.lang.Integer>, java.util.Collection<java.lang.Integer>, double[][]);
  public static double[][] project(int[], double[][]);
  public static double[] inject(int, int[], double[]);
  public static void inject(double[], int[], double[]);
  public static double[] solve(double[][], double[]) throws java.lang.Exception;
  public static double[] laPacksolve(double[][], double[]) throws de.uos.igf.db3d.dbms.geom.LA$SingularException;
  public static double[] laPacksolveSym(double[][], double[]) throws de.uos.igf.db3d.dbms.geom.LA$SingularException;
  public static double[] solveInplace(double[][]) throws de.uos.igf.db3d.dbms.geom.LA$SingularException;
  public static double[] solveInplace(double[][], boolean) throws de.uos.igf.db3d.dbms.geom.LA$SingularException;
  public static void minor(int, int, double[][], double[][]);
  public static double[][] minor(int, int, double[][]);
  public static double[][] identity(int);
  public static java.math.BigDecimal[][] identity(int, java.lang.Object);
  public static double[] plus(double[]);
  public static java.math.BigDecimal[] plus(java.math.BigDecimal[]);
  public static double[] plus(double[], double[]);
  public static java.math.BigDecimal[] plus(java.math.BigDecimal[], java.math.BigDecimal[]);
  public static double[] minus(double[]);
  public static java.math.BigDecimal[] minus(java.math.BigDecimal[]);
  public static double[][] minus(double[][]);
  public static java.math.BigDecimal[][] minus(java.math.BigDecimal[][]);
  public static double[] minus(double[], double[]);
  public static java.math.BigDecimal[] minus(java.math.BigDecimal[], java.math.BigDecimal[]);
  public static double[] mul(double, double[]);
  public static java.math.BigDecimal[] mul(java.math.BigDecimal, java.math.BigDecimal[]);
  public static double dot(double[], double[]);
  public static double[] cross(double[]...);
  public static boolean isUnit(double);
  public static boolean isZero(double[]);
  public static java.math.BigDecimal dot(java.math.BigDecimal[], java.math.BigDecimal[]);
  public static double[][] gramnian(double[][]);
  public static java.math.BigDecimal[][] gramnian(java.math.BigDecimal[][]);
  public static double[][] mul(double[][], double[][]);
  public static double[] mul(double[][], double[]);
  public static double[] mul(double[], double[][]);
  public static java.math.BigDecimal[][] mul(java.math.BigDecimal[][], java.math.BigDecimal[][]);
  public static double[] solve(int[], double[][], double[]) throws java.lang.Exception;
  public static double[] solveSym(int[], double[][], double[]) throws java.lang.Exception;
  public static double[] solve(int[], int[], double[][], double[]) throws java.lang.Exception;
  public static double[] solveSym(int[], int[], double[][], double[]) throws java.lang.Exception;
  public static double[][] transpose(double[][]);
  static {};
}
Compiled from "LA.java"
public class de.uos.igf.db3d.dbms.geom.LA$MatrixString {
  double[][] m;
  public java.lang.String toString();
  public de.uos.igf.db3d.dbms.geom.LA$MatrixString(double[][]);
}
Compiled from "LA.java"
public class de.uos.igf.db3d.dbms.geom.LA$SingularException extends java.lang.Exception {
  public de.uos.igf.db3d.dbms.geom.LA$SingularException();
}
Compiled from "Line3D.java"
public class de.uos.igf.db3d.dbms.geom.Line3D implements de.uos.igf.db3d.dbms.geom.SimpleGeoObj,java.io.Serializable {
  public de.uos.igf.db3d.dbms.geom.Line3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Line3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Line3D(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Point3D getOrigin();
  public de.uos.igf.db3d.dbms.geom.Vector3D getDVector();
  public boolean isParallel(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isParallel(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isSkew(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isOrthogonal(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double distance(de.uos.igf.db3d.dbms.geom.Point3D);
  public double distance(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double distance(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.geom.Point3D intersectionOPT(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Line3D copy();
  public byte getType();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public boolean isEqual(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isGeometryEquivalent(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public java.lang.String toString();
  public int hashCode();
}
Compiled from "MBB3D.java"
public class de.uos.igf.db3d.dbms.geom.MBB3D implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.geom.SimpleGeoObj,java.io.Externalizable {
  public de.uos.igf.db3d.dbms.geom.MBB3D();
  public de.uos.igf.db3d.dbms.geom.MBB3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D);
  public double computeVolume();
  public boolean contains(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean containsStrict(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean containsStrict(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.MBB3D copy();
  public boolean isEqual(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public java.util.Set<de.uos.igf.db3d.dbms.geom.Segment3D> getSegments(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Rectangle3D[] getFaces(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Point3D getCenter();
  public de.uos.igf.db3d.dbms.geom.Point3D[] getCorners();
  public de.uos.igf.db3d.dbms.geom.Point3D getPMax();
  public de.uos.igf.db3d.dbms.geom.Point3D getPMin();
  public double getDiagonalLength();
  public byte getType();
  public boolean inside(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean insideStrict(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsStrict(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.MBB3D intersection(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double margin();
  public double minDist(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double minDistSquare(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void setPMax(de.uos.igf.db3d.dbms.geom.Point3D);
  public void setPMin(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.MBB3D union(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected boolean testMaxPoint(de.uos.igf.db3d.dbms.geom.Point3D);
  protected boolean testMinPoint(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public static de.uos.igf.db3d.dbms.geom.MBB3D getMBB(java.util.List<de.uos.igf.db3d.dbms.geom.MBB3D>);
  public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "Matrix3x3.java"
public class de.uos.igf.db3d.dbms.geom.Matrix3x3 implements java.io.Externalizable {
  public de.uos.igf.db3d.dbms.geom.Matrix3x3();
  public de.uos.igf.db3d.dbms.geom.Matrix3x3(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.Vector3D);
  public de.uos.igf.db3d.dbms.geom.Matrix3x3(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.Matrix3x3(double[]);
  public double computeDeterminante();
  public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
}
Compiled from "Matrix4x4.java"
public class de.uos.igf.db3d.dbms.geom.Matrix4x4 implements java.io.Serializable {
  public de.uos.igf.db3d.dbms.geom.Matrix4x4();
  public de.uos.igf.db3d.dbms.geom.Matrix4x4(double[]);
  public de.uos.igf.db3d.dbms.geom.Matrix4x4 copy();
  public double[][] getValues();
  public double computeDeterminante();
  public double getMatrixEntry(int, int);
  public de.uos.igf.db3d.dbms.geom.Matrix4x4 mult(double);
  public de.uos.igf.db3d.dbms.geom.Matrix4x4 mult(de.uos.igf.db3d.dbms.geom.Matrix4x4, double);
  public de.uos.igf.db3d.dbms.geom.Matrix4x4 mult(de.uos.igf.db3d.dbms.geom.Matrix4x4);
  public de.uos.igf.db3d.dbms.geom.Matrix4x4 mult(de.uos.igf.db3d.dbms.geom.Matrix4x4, de.uos.igf.db3d.dbms.geom.Matrix4x4);
  public de.uos.igf.db3d.dbms.geom.Point3D transformPoint(de.uos.igf.db3d.dbms.geom.Point3D);
  public void transformThisPoint(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.Matrix4x4 getInverseMatrix();
  public static de.uos.igf.db3d.dbms.geom.Matrix4x4 getSimpleTranslationMatrix(double, double, double);
  public static de.uos.igf.db3d.dbms.geom.Matrix4x4 getTransformationMatrix(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
}
Compiled from "Plane3D.java"
public class de.uos.igf.db3d.dbms.geom.Plane3D implements de.uos.igf.db3d.dbms.geom.SimpleGeoObj,java.io.Serializable {
  public de.uos.igf.db3d.dbms.geom.Plane3D(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Plane3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Plane3D(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Vector3D getNormalVector();
  public de.uos.igf.db3d.dbms.geom.Vector3D getPositionVector();
  public double getDParameter();
  public boolean isParallel(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isParallel(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isOrthogonal(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double distance(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double distance(de.uos.igf.db3d.dbms.geom.Plane3D);
  public double distance(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Plane3D copy();
  public byte getType();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public boolean isEqual(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isGeometryEquivalent(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "Point3D.java"
public class de.uos.igf.db3d.dbms.geom.Point3D implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.geom.SimpleGeoObj,de.uos.igf.db3d.dbms.geom.Equivalentable,java.io.Externalizable {
  public int id;
  public java.lang.String getAttributeValue(java.lang.String);
  public boolean setAttribute(java.lang.String, java.lang.String);
  public java.lang.String[][] getAttributes();
  public de.uos.igf.db3d.dbms.geom.Point3D(double, double, double, int, java.lang.String[][]);
  public de.uos.igf.db3d.dbms.geom.Point3D(double[], int, java.lang.String[][]);
  public de.uos.igf.db3d.dbms.geom.Point3D(double, double, double, int);
  public de.uos.igf.db3d.dbms.geom.Point3D(double[], int);
  public de.uos.igf.db3d.dbms.geom.Point3D();
  public de.uos.igf.db3d.dbms.geom.Point3D(double, double, double);
  public de.uos.igf.db3d.dbms.geom.Point3D(double[]);
  public de.uos.igf.db3d.dbms.geom.Point3D(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public de.uos.igf.db3d.dbms.geom.Vector3D getVector();
  public double getCoord(int);
  public void setCoord(int, double);
  public de.uos.igf.db3d.dbms.geom.Point3D getPoint(int);
  public de.uos.igf.db3d.dbms.geom.Point3D[] getPoints();
  public double getX();
  public void setX(double);
  public double getY();
  public void setY(double);
  public double getZ();
  public void setZ(double);
  public double[] getCoordinates();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projection(de.uos.igf.db3d.dbms.geom.Plane3D);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projection(de.uos.igf.db3d.dbms.geom.Line3D);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projection(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double euclideanDistanceSQR(de.uos.igf.db3d.dbms.geom.Point3D);
  public double euclideanDistance(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean isEqual(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isGeometryEquivalent(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int isEqualHC(int);
  public int isGeometryEquivalentHC(int);
  public boolean isEqualClass(java.lang.Object);
  public byte getType();
  public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "PointSet3D.java"
public class de.uos.igf.db3d.dbms.geom.PointSet3D implements de.uos.igf.db3d.dbms.geom.SimpleGeoObj {
  public de.uos.igf.db3d.dbms.geom.PointSet3D(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.PointSet3D(int, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.PointSet3D(java.util.Set, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.PointSet3D(de.uos.igf.db3d.dbms.util.EquivalentableHashSet);
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public int size();
  public boolean isEmpty();
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.Point3D[] toArray();
  public boolean add(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean add(de.uos.igf.db3d.dbms.geom.Point3D[]);
  public boolean remove(de.uos.igf.db3d.dbms.geom.Point3D);
  public void clear();
  public boolean addAll(de.uos.igf.db3d.dbms.geom.PointSet3D);
  public boolean removeAll(de.uos.igf.db3d.dbms.geom.PointSet3D);
  public boolean retainAll(de.uos.igf.db3d.dbms.geom.PointSet3D);
  public java.util.Iterator<de.uos.igf.db3d.dbms.geom.Point3D> iterator();
  public java.util.Set<de.uos.igf.db3d.dbms.geom.Point3D> getAsSet();
  public byte getType();
}
Compiled from "Rectangle3D.java"
public class de.uos.igf.db3d.dbms.geom.Rectangle3D {
  public de.uos.igf.db3d.dbms.geom.Rectangle3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.Point3D getPoint(int);
  public de.uos.igf.db3d.dbms.geom.Point3D[] getPoints();
  public de.uos.igf.db3d.dbms.geom.Segment3D getSegment(int);
  public de.uos.igf.db3d.dbms.geom.Segment3D[] getSegments();
  public void setPoint(int, de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersectionInPlane(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public java.lang.String toString();
}
Compiled from "ScalarOperator.java"
public class de.uos.igf.db3d.dbms.geom.ScalarOperator implements de.uos.igf.db3d.dbms.structure.PersistentObject,java.io.Externalizable {
  public de.uos.igf.db3d.dbms.geom.ScalarOperator();
  public de.uos.igf.db3d.dbms.geom.ScalarOperator(double);
  public boolean equal(double, double);
  public boolean lessThan(double, double);
  public boolean greaterThan(double, double);
  public boolean lessOrEqual(double, double);
  public boolean greaterOrEqual(double, double);
  public de.uos.igf.db3d.dbms.geom.ScalarOperator copy();
  public double getEpsilon();
  public double getEpsilonNeg();
  public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "Segment3D.java"
public class de.uos.igf.db3d.dbms.geom.Segment3D implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.geom.SimpleGeoObj,de.uos.igf.db3d.dbms.geom.Equivalentable,java.io.Serializable {
  public de.uos.igf.db3d.dbms.geom.Segment3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Segment3D(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Segment3D(de.uos.igf.db3d.dbms.geom.Segment3D);
  public de.uos.igf.db3d.dbms.geom.Point3D[] getPoints();
  public de.uos.igf.db3d.dbms.geom.Point3D getPoint(int);
  public void setPoints(de.uos.igf.db3d.dbms.geom.Point3D[]);
  public void setPoint(int, de.uos.igf.db3d.dbms.geom.Point3D);
  public double getLength();
  public double getLengthSQR();
  public de.uos.igf.db3d.dbms.geom.Point3D getCenter();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public de.uos.igf.db3d.dbms.geom.Vector3D[] getVectors();
  public de.uos.igf.db3d.dbms.geom.Vector3D getDirectionVector(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Line3D getLine(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsStrict(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean projectsRegular(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersectionOnLine(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean containsOnLine(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isValid(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isRegular(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isCompleteValidated(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void invertOrientation();
  public void setOrientation(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isEqual(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isGeometryEquivalent(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int isEqualHC(int);
  public int isGeometryEquivalentHC(int);
  public boolean isEqualClass(java.lang.Object);
  public byte getType();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "SegmentSet3D.java"
public class de.uos.igf.db3d.dbms.geom.SegmentSet3D implements de.uos.igf.db3d.dbms.geom.SimpleGeoObj {
  public static final int STRICT_EQUAL;
  public static final int GEOMETRY_EQUAL;
  public de.uos.igf.db3d.dbms.geom.SegmentSet3D(de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.SegmentSet3D(int, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.SegmentSet3D(java.util.Set, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.SegmentSet3D(de.uos.igf.db3d.dbms.util.EquivalentableHashSet);
  public int size();
  public boolean isEmpty();
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
  public de.uos.igf.db3d.dbms.geom.Segment3D[] toArray();
  public boolean add(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean add(de.uos.igf.db3d.dbms.geom.Segment3D[]);
  public boolean remove(de.uos.igf.db3d.dbms.geom.Segment3D);
  public void clear();
  public boolean addAll(de.uos.igf.db3d.dbms.geom.SegmentSet3D);
  public boolean removeAll(de.uos.igf.db3d.dbms.geom.SegmentSet3D);
  public boolean retainAll(de.uos.igf.db3d.dbms.geom.SegmentSet3D);
  public java.util.Iterator<de.uos.igf.db3d.dbms.geom.Segment3D> iterator();
  public java.util.Set getAsSet();
  public byte getType();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
}
Compiled from "SimpleGeoObj.java"
public interface de.uos.igf.db3d.dbms.geom.SimpleGeoObj extends de.uos.igf.db3d.dbms.structure.GeoObj {
  public static final byte POINT3D;
  public static final byte SEGMENT3D;
  public static final byte TRIANGLE3D;
  public static final byte TETRAHEDRON3D;
  public static final byte POINT_ELT_3D;
  public static final byte SEGMENT_ELT_3D;
  public static final byte TRIANGLE_ELT_3D;
  public static final byte TETRAHEDRON_ELT_3D;
  public static final byte POINT4DELEMENT;
  public static final byte SEGMENT4DELEMENT;
  public static final byte TRIANGLE4DELEMENT;
  public static final byte TETRAHEDRON4DELEMENT;
  public static final byte POINT4DTUBE;
  public static final byte POINTSET3D;
  public static final byte SEGMENTSET3D;
  public static final byte TRIANGLESET3D;
  public static final byte TETRAHEDRONSET3D;
  public static final byte VECTOR3D;
  public static final byte LINE3D;
  public static final byte PLANE3D;
  public static final byte MBB3D;
  public static final byte WIREFRAME3D;
  public static final int MIN_LENGTH_EPSILON_FACTOR;
  public static final int MIN_AREA_EPSILON_FACTOR;
  public static final int MIN_VOLUME_EPSILON_FACTOR;
}
Compiled from "SimpleGeoObjIterator.java"
public interface de.uos.igf.db3d.dbms.geom.SimpleGeoObjIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract de.uos.igf.db3d.dbms.geom.SimpleGeoObj nextElt();
  public abstract void remove();
}
Compiled from "Tetrahedron3D.java"
public class de.uos.igf.db3d.dbms.geom.Tetrahedron3D implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.geom.SimpleGeoObj,de.uos.igf.db3d.dbms.geom.Equivalentable,java.io.Serializable {
  public de.uos.igf.db3d.dbms.geom.Tetrahedron3D(de.uos.igf.db3d.dbms.geom.Point3D[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Tetrahedron3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Tetrahedron3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Tetrahedron3D(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Tetrahedron3D(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public de.uos.igf.db3d.dbms.geom.Point3D[] getPoints();
  public void setPoints(de.uos.igf.db3d.dbms.geom.Point3D[]);
  public de.uos.igf.db3d.dbms.geom.Point3D getPoint(int);
  public void setPoint(int, de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean hasCorner(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean hasEdge(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double[] getAngles(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Vector3D[] getVectors();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public de.uos.igf.db3d.dbms.geom.Triangle3D[] getTriangles();
  public de.uos.igf.db3d.dbms.geom.Triangle3D getTriangle(int);
  public int getTriangleIndex(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double getVolume();
  public double getDiameter();
  public de.uos.igf.db3d.dbms.geom.Point3D getCenter();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsStrict(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Tetrahedron3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Tetrahedron3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Tetrahedron3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean containsStrict(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Tetrahedron3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Tetrahedron3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projection(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isEqual(de.uos.igf.db3d.dbms.geom.Tetrahedron3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isValid(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isRegular(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isBeautiful(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isCompleteValidated(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isEqual(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isGeometryEquivalent(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int isEqualHC(int);
  public int isGeometryEquivalentHC(int);
  public boolean isEqualClass(java.lang.Object);
  public byte getType();
  public java.lang.String toString();
  public int hashCode();
}
Compiled from "TetrahedronSet3D.java"
public class de.uos.igf.db3d.dbms.geom.TetrahedronSet3D implements de.uos.igf.db3d.dbms.geom.SimpleGeoObj {
  public static final int STRICT_EQUAL;
  public static final int GEOMETRY_EQUAL;
  public de.uos.igf.db3d.dbms.geom.TetrahedronSet3D(de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.TetrahedronSet3D(int, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.TetrahedronSet3D(java.util.Set, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.TetrahedronSet3D(de.uos.igf.db3d.dbms.util.EquivalentableHashSet);
  public int size();
  public boolean isEmpty();
  public boolean contains(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public de.uos.igf.db3d.dbms.geom.Tetrahedron3D[] toArray();
  public boolean add(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public boolean add(de.uos.igf.db3d.dbms.geom.Tetrahedron3D[]);
  public boolean remove(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public void clear();
  public boolean addAll(de.uos.igf.db3d.dbms.geom.TetrahedronSet3D);
  public boolean removeAll(de.uos.igf.db3d.dbms.geom.TetrahedronSet3D);
  public boolean retainAll(de.uos.igf.db3d.dbms.geom.TetrahedronSet3D);
  public java.util.Iterator iterator();
  public java.util.Set getAsSet();
  public byte getType();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
}
Compiled from "Triangle3D.java"
public class de.uos.igf.db3d.dbms.geom.Triangle3D implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.geom.SimpleGeoObj,de.uos.igf.db3d.dbms.geom.Equivalentable,java.io.Serializable {
  public java.lang.String getAttributeValue(java.lang.String);
  public boolean setAttribute(java.lang.String, java.lang.String);
  public java.lang.String[][] getAttributes();
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Point3D[], de.uos.igf.db3d.dbms.geom.ScalarOperator, int, java.lang.String[][]) throws java.lang.IllegalArgumentException;
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator, int, java.lang.String[][]);
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator, int, java.lang.String[][]);
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Point3D[], de.uos.igf.db3d.dbms.geom.ScalarOperator, int) throws java.lang.IllegalArgumentException;
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Point3D[], de.uos.igf.db3d.dbms.geom.ScalarOperator) throws java.lang.IllegalArgumentException;
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Triangle3D(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public de.uos.igf.db3d.dbms.geom.Point3D[] getPoints();
  public void setPoints(de.uos.igf.db3d.dbms.geom.Point3D[]);
  public de.uos.igf.db3d.dbms.geom.Point3D getPoint(int);
  public void setPoint(int, de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean hasCorner(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public de.uos.igf.db3d.dbms.geom.Vector3D getNormal(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double[] getAngles(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Vector3D[] getVectors();
  public de.uos.igf.db3d.dbms.geom.Plane3D getPlane(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Segment3D[] getSegments();
  public de.uos.igf.db3d.dbms.geom.Segment3D getSegment(int);
  public int getSegmentIndex(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double getArea();
  public int getOrientation(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double getDiameter(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Point3D getCenter();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsStrict(de.uos.igf.db3d.dbms.geom.MBB3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int intersectsInt(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersectsRegular(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean projectsRegular(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean containsInPlane(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected boolean containsInPlane(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected boolean containsInPlane(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean containsInBorder(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean containsProjection(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean containsProjection(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean containsProjection(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersectionInPlane(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersectionInPlane(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersectionInPlane(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projection(de.uos.igf.db3d.dbms.geom.Plane3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projectionOf(de.uos.igf.db3d.dbms.geom.Line3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projectionOf(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projectionOf(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projectionOf(de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void invertOrientation();
  public boolean setOrientation(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isValid(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isRegular(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isBeautiful(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isCompleteValidated(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isEqual(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isGeometryEquivalent(de.uos.igf.db3d.dbms.geom.Equivalentable, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int isEqualHC(int);
  public int isGeometryEquivalentHC(int);
  public boolean isEqualClass(java.lang.Object);
  public byte getType();
  public java.lang.String toString();
  public int hashCode();
}
Compiled from "TriangleSet3D.java"
public class de.uos.igf.db3d.dbms.geom.TriangleSet3D implements de.uos.igf.db3d.dbms.geom.SimpleGeoObj {
  public static final int STRICT_EQUAL;
  public static final int GEOMETRY_EQUAL;
  public de.uos.igf.db3d.dbms.geom.TriangleSet3D(de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.TriangleSet3D(int, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.TriangleSet3D(java.util.Set, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.geom.TriangleSet3D(de.uos.igf.db3d.dbms.util.EquivalentableHashSet);
  public int size();
  public boolean isEmpty();
  public boolean contains(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public de.uos.igf.db3d.dbms.geom.Triangle3D[] toArray();
  public boolean add(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean add(de.uos.igf.db3d.dbms.geom.Triangle3D[]);
  public boolean remove(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public void clear();
  public boolean addAll(de.uos.igf.db3d.dbms.geom.TriangleSet3D);
  public boolean removeAll(de.uos.igf.db3d.dbms.geom.TriangleSet3D);
  public boolean retainAll(de.uos.igf.db3d.dbms.geom.TriangleSet3D);
  public java.util.Iterator<de.uos.igf.db3d.dbms.geom.Triangle3D> iterator();
  public java.util.Set getAsSet();
  public byte getType();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
}
Compiled from "ValidationException.java"
public final class de.uos.igf.db3d.dbms.geom.ValidationException extends org.apache.commons.lang.exception.NestableRuntimeException {
  public de.uos.igf.db3d.dbms.geom.ValidationException();
  public de.uos.igf.db3d.dbms.geom.ValidationException(java.lang.String);
  public de.uos.igf.db3d.dbms.geom.ValidationException(java.lang.String, de.uos.igf.db3d.dbms.geom.SimpleGeoObj);
  public de.uos.igf.db3d.dbms.geom.ValidationException(java.lang.Throwable);
  public de.uos.igf.db3d.dbms.geom.ValidationException(java.lang.Throwable, de.uos.igf.db3d.dbms.geom.SimpleGeoObj);
  public de.uos.igf.db3d.dbms.geom.ValidationException(java.lang.String, java.lang.Throwable, de.uos.igf.db3d.dbms.geom.SimpleGeoObj);
  public de.uos.igf.db3d.dbms.geom.ValidationException(java.lang.String, java.lang.Throwable);
  public java.lang.String getMessage();
}
Compiled from "Vector3D.java"
public class de.uos.igf.db3d.dbms.geom.Vector3D implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.geom.SimpleGeoObj,java.io.Externalizable {
  public de.uos.igf.db3d.dbms.geom.Vector3D();
  public de.uos.igf.db3d.dbms.geom.Vector3D(double, double, double);
  public de.uos.igf.db3d.dbms.geom.Vector3D(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.geom.Vector3D(de.uos.igf.db3d.dbms.geom.Vector3D);
  public de.uos.igf.db3d.dbms.geom.Vector3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D);
  public static de.uos.igf.db3d.dbms.geom.Vector3D add(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.Vector3D);
  public de.uos.igf.db3d.dbms.geom.Vector3D add(de.uos.igf.db3d.dbms.geom.Vector3D);
  public static de.uos.igf.db3d.dbms.geom.Vector3D sub(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.Vector3D);
  public de.uos.igf.db3d.dbms.geom.Vector3D sub(de.uos.igf.db3d.dbms.geom.Vector3D);
  public de.uos.igf.db3d.dbms.geom.Vector3D mult(double);
  public static de.uos.igf.db3d.dbms.geom.Vector3D mult(de.uos.igf.db3d.dbms.geom.Vector3D, double);
  public de.uos.igf.db3d.dbms.geom.Vector3D div(double, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double scalarproduct(de.uos.igf.db3d.dbms.geom.Vector3D);
  public de.uos.igf.db3d.dbms.geom.Vector3D crossproduct(de.uos.igf.db3d.dbms.geom.Vector3D);
  public double spatproduct(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.Vector3D);
  public double getNorm();
  public de.uos.igf.db3d.dbms.geom.Vector3D getNormalized(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void normalize(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double getX();
  public double getY();
  public double getZ();
  public de.uos.igf.db3d.dbms.geom.Point3D getAsPoint3D();
  public double[] getScalars();
  public double getScalar(int);
  public void setX(double);
  public void setY(double);
  public void setZ(double);
  public boolean isNullVector(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int isCollinear(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isOrthogonal(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double cosinus(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean isEqual(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.geom.Vector3D copy();
  public byte getType();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "Wireframe3D.java"
public class de.uos.igf.db3d.dbms.geom.Wireframe3D implements de.uos.igf.db3d.dbms.geom.SimpleGeoObj,de.uos.igf.db3d.dbms.structure.PersistentObject {
  public de.uos.igf.db3d.dbms.geom.Wireframe3D(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void postInitializeContents();
  public de.uos.igf.db3d.dbms.geom.Wireframe3D copy();
  public void add(de.uos.igf.db3d.dbms.geom.Point3D);
  public void add(de.uos.igf.db3d.dbms.geom.Point3D[]);
  public void add(de.uos.igf.db3d.dbms.geom.Segment3D);
  public void add(de.uos.igf.db3d.dbms.geom.Segment3D[]);
  public void add(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public void add(de.uos.igf.db3d.dbms.geom.Triangle3D[]);
  public void add(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public void add(de.uos.igf.db3d.dbms.geom.Tetrahedron3D[]);
  public void add(de.uos.igf.db3d.dbms.geom.Wireframe3D);
  public boolean isEmpty();
  public int getID();
  public void setID(int);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj projection(de.uos.igf.db3d.dbms.geom.Plane3D);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj intersection(de.uos.igf.db3d.dbms.geom.Plane3D);
  public int countNodes();
  public de.uos.igf.db3d.dbms.geom.Point3D[] getPoints();
  public de.uos.igf.db3d.dbms.geom.Point3D getCentroid();
  public de.uos.igf.db3d.dbms.geom.Segment3D[] getSegments();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public int getDimension();
  public de.uos.igf.db3d.dbms.geom.Triangle3D[] getTriangulated();
  public java.util.List<de.uos.igf.db3d.dbms.geom.Triangle3D> getTriangulatedInPlane();
  public byte getType();
  public java.lang.String toString();
  static de.uos.igf.db3d.dbms.geom.ScalarOperator access$700(de.uos.igf.db3d.dbms.geom.Wireframe3D);
}
Compiled from "Wireframe3D.java"
class de.uos.igf.db3d.dbms.geom.Wireframe3D$1 {
}
Compiled from "Wireframe3D.java"
final class de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode implements de.uos.igf.db3d.dbms.structure.PersistentObject {
  final de.uos.igf.db3d.dbms.geom.Wireframe3D this$0;
  static de.uos.igf.db3d.dbms.geom.Point3D access$000(de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode);
  static boolean access$100(de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode);
  static java.util.ArrayList access$200(de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode);
  static java.util.Set access$300(de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode);
  de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode(de.uos.igf.db3d.dbms.geom.Wireframe3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Wireframe3D$1);
  static boolean access$500(de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode, de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode);
  static void access$600(de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode, de.uos.igf.db3d.dbms.geom.Wireframe3D$Wireframe3DNode);
}
Compiled from "Object3DImpl.java"
public class de.uos.igf.db3d.dbms.impl.Object3DImpl implements de.uos.igf.db3d.dbms.model3d.Object3D,de.uos.igf.db3d.dbms.structure.PersistentObject {
  public de.uos.igf.db3d.dbms.impl.Object3DImpl();
  public boolean hasSpatialPart();
  public boolean hasThematicPart();
  public java.lang.Object getThematic3D();
  public void setThematicPart(java.lang.Object);
  public de.uos.igf.db3d.dbms.structure.Space3D getEnclosingSpace();
  public de.uos.igf.db3d.dbms.model3d.Spatial3D getSpatial3D();
  public long getTimestamp();
  public de.uos.igf.db3d.dbms.structure.OID getOID();
  public boolean isRegisteredInSpace();
  public void setOID(de.uos.igf.db3d.dbms.structure.OID);
  public void setSpace(de.uos.igf.db3d.dbms.structure.Space3D);
  public void setSpatialPart(de.uos.igf.db3d.dbms.model3d.Spatial3D);
  public void setTimestamp(long);
  public java.util.LinkedHashMap<java.lang.String, java.lang.String> getThematicinfos();
  public java.lang.String getThematicinfo(java.lang.String);
  public void setThematicinfo(java.lang.String, java.lang.String);
  public void setThematicinfos(java.util.LinkedHashMap<java.lang.String, java.lang.String>);
}
Compiled from "ClosedHull3D.java"
public class de.uos.igf.db3d.dbms.model3d.ClosedHull3D extends de.uos.igf.db3d.dbms.model3d.SpatialObject3D implements de.uos.igf.db3d.dbms.model3d.Hull3D,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj {
  protected de.uos.igf.db3d.dbms.model3d.ClosedHull3D(de.uos.igf.db3d.dbms.model3d.TriangleNet3D);
  public de.uos.igf.db3d.dbms.model3d.ClosedHull3D(de.uos.igf.db3d.dbms.model3d.ClosedHull3D);
  public boolean isClosed();
  public int countElements();
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public int countBorderEdges();
  public int countBorderFaces();
  public int countBorderVertices();
  public de.uos.igf.db3d.dbms.model3d.ClosedHull3DComp getComponent(int);
  public de.uos.igf.db3d.dbms.model3d.ClosedHull3DComp[] getComponents();
  public int countEdges();
  public int countFaces();
  public int countVertices();
  public double getArea();
  public double getVolume();
  public int countComponents();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D);
  public byte getType();
  public byte getSpatial3DType();
  public void endUpdate();
  protected void updateMBB();
  public void addComponent(de.uos.igf.db3d.dbms.model3d.ClosedHull3DComp);
  public void removeComponent(de.uos.igf.db3d.dbms.model3d.ClosedHull3DComp);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  public de.uos.igf.db3d.dbms.model3d.ComplexGeoObj getComponent(int);
}
Compiled from "ClosedHull3DComp.java"
public class de.uos.igf.db3d.dbms.model3d.ClosedHull3DComp implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj,java.io.Serializable {
  protected de.uos.igf.db3d.dbms.model3d.ClosedHull3DComp(de.uos.igf.db3d.dbms.model3d.ClosedHull3D, de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp);
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D addElt(de.uos.igf.db3d.dbms.geom.Triangle3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D removeElt(de.uos.igf.db3d.dbms.geom.Triangle3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean containsStrictInside(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public void buildNetTopology(de.uos.igf.db3d.dbms.model3d.TriangleElt3D[]);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public int countElements();
  public int countEdges();
  public int countFaces();
  public int countVertices();
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$TriangleElt3DIterator getElementsIterator();
  public java.util.Set getElementsViaRecursion();
  public java.util.Set getElementsViaSAM();
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D getEntryElement();
  public int getEuler();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public de.uos.igf.db3d.dbms.model3d.ClosedHull3D getNet();
  public java.util.Set getPoints();
  public de.uos.igf.db3d.dbms.util.SAM getSAM();
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public java.util.Set getSegments();
  public byte getType();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D);
  public boolean isConnected();
  public boolean checkClosed();
  public boolean isClosed();
  public boolean isEmpty();
  public boolean isOrientationConsistent();
  public boolean isOriented();
  public void makeOrientationConsistent(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void setOriented(boolean);
  protected void updateEntryElement();
  protected void updateEulerStatistics();
  protected void updateMBB();
  public double getVolume();
  protected de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp getTNetComp();
  public int getComponentID();
  protected void setComponentID(int);
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
}
Compiled from "ComplexGeoObj.java"
public interface de.uos.igf.db3d.dbms.model3d.ComplexGeoObj extends de.uos.igf.db3d.dbms.structure.GeoObj {
  public static final short MAX_SAM;
  public static final byte POINT_NET_3D;
  public static final byte SEGMENT_NET_3D;
  public static final byte TRIANGLE_NET_3D;
  public static final byte CLOSED_HULL_3D;
  public static final byte TETRAHEDRON_NET_3D;
  public static final byte REGULAR_DEFORMED_GRID_3D;
  public static final byte POINTNET4D;
  public static final byte SEGMENTNET4D;
  public static final byte TRIANGLENET4D;
  public static final byte TETRAHEDRONNET4D;
  public static final byte RESULT_OBJECT_3D;
  public static final byte COMP_POINT_NET_3D;
  public static final byte COMP_SEGMENT_NET_3D;
  public static final byte COMP_TRIANGLE_NET_3D;
  public static final byte COMP_TETRAHEDRON_NET_3D;
  public static final byte COMP_CLOSED_HULL_3D;
  public static final byte POINTNET4DCOMPONENT;
  public static final byte SEGMENTNET4DCOMPONENT;
  public static final byte TRIANGLENET4DCOMPONENT;
  public static final byte TETRAHEDRONNET4DCOMPONENT;
  public static final byte CLOSEDHULL4DCOMPONENT;
  public static final byte POINT4DSEQUENCE;
  public static final byte SEGMENT4DSEQUENCE;
  public static final byte TRIANGLE4DSEQUENCE;
  public static final byte TETRAHEDRON4DSEQUENCE;
  public static final byte POINT_NET_4D;
  public static final byte SEGMENT_NET_4D;
  public static final byte TRIANGLE_NET_4D;
  public static final byte TETRAHEDRON_NET_4D;
  public abstract int countElements();
  public abstract de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
}
Compiled from "Curve3D.java"
public interface de.uos.igf.db3d.dbms.model3d.Curve3D extends de.uos.igf.db3d.dbms.model3d.Spatial3D {
  public abstract double getLength();
  public abstract int countVertices();
  public abstract int countEdges();
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
}
Compiled from "Curve3DIterator.java"
public interface de.uos.igf.db3d.dbms.model3d.Curve3DIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract de.uos.igf.db3d.dbms.model3d.Curve3D nextElt();
  public abstract void remove();
}
Compiled from "Hull3D.java"
public interface de.uos.igf.db3d.dbms.model3d.Hull3D extends de.uos.igf.db3d.dbms.model3d.Volume3D {
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.Triangle3D);
}
Compiled from "NetElement3D.java"
public interface de.uos.igf.db3d.dbms.model3d.NetElement3D {
  public abstract int getID();
  public abstract void setID(int);
  public abstract boolean hasNeighbour(int);
  public abstract boolean hasNeighbours();
  public abstract boolean isInterior();
  public abstract byte getType();
  public abstract de.uos.igf.db3d.dbms.geom.Point3D getPoint(int);
  public abstract de.uos.igf.db3d.dbms.geom.Point3D[] getPoints();
}
Compiled from "Object3D.java"
public interface de.uos.igf.db3d.dbms.model3d.Object3D {
  public abstract boolean hasSpatialPart();
  public abstract boolean hasThematicPart();
  public abstract de.uos.igf.db3d.dbms.model3d.Spatial3D getSpatial3D();
  public abstract void setThematicPart(java.lang.Object);
  public abstract long getTimestamp();
  public abstract boolean isRegisteredInSpace();
  public abstract de.uos.igf.db3d.dbms.structure.Space3D getEnclosingSpace();
  public abstract de.uos.igf.db3d.dbms.structure.OID getOID();
  public abstract java.lang.Object getThematic3D();
  public abstract java.util.LinkedHashMap<java.lang.String, java.lang.String> getThematicinfos();
  public abstract java.lang.String getThematicinfo(java.lang.String);
  public abstract void setThematicinfo(java.lang.String, java.lang.String);
  public abstract void setThematicinfos(java.util.LinkedHashMap<java.lang.String, java.lang.String>);
}
Compiled from "Object3DBuilder.java"
public class de.uos.igf.db3d.dbms.model3d.Object3DBuilder {
  public de.uos.igf.db3d.dbms.model3d.Object3DBuilder(de.uos.igf.db3d.dbms.structure.Space3D);
  public de.uos.igf.db3d.dbms.model3d.Object3DBuilder(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.Object3DBuilder(de.uos.igf.db3d.dbms.geom.ScalarOperator, de.uos.igf.db3d.dbms.structure.Space3D);
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public de.uos.igf.db3d.dbms.model3d.PointNetBuilder getPointNetBuilder();
  public de.uos.igf.db3d.dbms.model3d.SegmentNetBuilder getSegmentNetBuilder();
  public de.uos.igf.db3d.dbms.model3d.TriangleNetBuilder getTriangleNetBuilder();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNetBuilder getTetrahedronNetBuilder();
  public void setSpatialPart(de.uos.igf.db3d.dbms.model3d.Spatial3D);
  public void setTimestamp(long);
  public void setOID(de.uos.igf.db3d.dbms.structure.OID);
  public void reset();
  public de.uos.igf.db3d.dbms.model3d.Object3D getObject3D();
  protected de.uos.igf.db3d.dbms.structure.Space3D getSpace3D();
  protected de.uos.igf.db3d.dbms.model3d.SpatialObject3D getSpatial();
  protected long getTime();
}
Compiled from "Object3DIterator.java"
public interface de.uos.igf.db3d.dbms.model3d.Object3DIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract de.uos.igf.db3d.dbms.model3d.Object3D nextElt();
  public abstract void remove();
}
Compiled from "PointElt3D.java"
public class de.uos.igf.db3d.dbms.model3d.PointElt3D extends de.uos.igf.db3d.dbms.geom.Point3D implements de.uos.igf.db3d.dbms.model3d.NetElement3D {
  public de.uos.igf.db3d.dbms.model3d.PointElt3D();
  public de.uos.igf.db3d.dbms.model3d.PointElt3D(double, double, double);
  public de.uos.igf.db3d.dbms.model3d.PointElt3D(double[]);
  public de.uos.igf.db3d.dbms.model3d.PointElt3D(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.model3d.PointElt3D(double, double, double, int);
  public int getID();
  public boolean hasNeighbour(int);
  public boolean hasNeighbours();
  public boolean isInterior();
  public de.uos.igf.db3d.dbms.model3d.PointNet3DComp getNetComponent();
  public de.uos.igf.db3d.dbms.model3d.PointNet3D getNet();
  public void setID(int);
  protected void setNetComponent(de.uos.igf.db3d.dbms.model3d.PointNet3DComp);
  public byte getType();
  public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
}
Compiled from "PointNet3D.java"
public class de.uos.igf.db3d.dbms.model3d.PointNet3D extends de.uos.igf.db3d.dbms.model3d.SpatialObject3D implements de.uos.igf.db3d.dbms.model3d.Sample3D,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj {
  public de.uos.igf.db3d.dbms.model3d.PointNet3D(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.model3d.PointNet3D(de.uos.igf.db3d.dbms.model3d.PointNet3DComp[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.PointNet3D(de.uos.igf.db3d.dbms.model3d.PointNet3D);
  public int countComponents();
  public int countElements();
  public de.uos.igf.db3d.dbms.model3d.PointNet3DComp[] getComponents();
  public de.uos.igf.db3d.dbms.model3d.PointNet3DComp getComponent(int);
  public void addComponent(de.uos.igf.db3d.dbms.model3d.PointNet3DComp);
  public void removeComponent(de.uos.igf.db3d.dbms.model3d.PointNet3DComp);
  public de.uos.igf.db3d.dbms.model3d.PointNet3DComp createComponent();
  public de.uos.igf.db3d.dbms.model3d.PointNet3D splitPointNet(int[]);
  public int getEuler();
  public int countVertices();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public byte getType();
  public byte getSpatial3DType();
  public void endUpdate();
  protected void setComponents(de.uos.igf.db3d.dbms.model3d.PointNet3DComp[]);
  protected void updateMBB();
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  public de.uos.igf.db3d.dbms.model3d.ComplexGeoObj getComponent(int);
}
Compiled from "PointNet3DComp.java"
public class de.uos.igf.db3d.dbms.model3d.PointNet3DComp implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj,java.io.Serializable {
  public de.uos.igf.db3d.dbms.model3d.PointNet3DComp(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.model3d.PointNet3DComp(de.uos.igf.db3d.dbms.model3d.PointElt3D[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.model3d.PointElt3D addElt(de.uos.igf.db3d.dbms.geom.Point3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public de.uos.igf.db3d.dbms.model3d.PointElt3D removeElt(de.uos.igf.db3d.dbms.geom.Point3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Point3D);
  public int countElements();
  public int countVertices();
  public boolean isEmpty();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public int getEuler();
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public java.util.Set getElementsViaSAM();
  public de.uos.igf.db3d.dbms.model3d.PointNet3D getNet();
  public de.uos.igf.db3d.dbms.model3d.PointNet3DComp serializationCopy();
  public de.uos.igf.db3d.dbms.util.SAM getSAM();
  public byte getType();
  public int getComponentID();
  protected void setComponentID(int);
  protected void setNet(de.uos.igf.db3d.dbms.model3d.PointNet3D);
  protected void updateEulerStatistics();
  protected void updateMBB();
  protected void updateEntryElement();
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  static {};
}
Compiled from "PointNetBuilder.java"
public class de.uos.igf.db3d.dbms.model3d.PointNetBuilder {
  public de.uos.igf.db3d.dbms.model3d.PointNetBuilder(de.uos.igf.db3d.dbms.structure.Space3D);
  public de.uos.igf.db3d.dbms.model3d.PointNetBuilder(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void setComponentIDCounter(int);
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public void addComponent(de.uos.igf.db3d.dbms.model3d.PointElt3D[]);
  public void addComponent(de.uos.igf.db3d.dbms.model3d.PointElt3D[], int);
  public de.uos.igf.db3d.dbms.model3d.PointNet3D getPointNet();
}
Compiled from "RegularDeformableGrid3D.java"
public class de.uos.igf.db3d.dbms.model3d.RegularDeformableGrid3D extends de.uos.igf.db3d.dbms.model3d.SpatialObject3D implements de.uos.igf.db3d.dbms.model3d.ComplexGeoObj {
  public java.lang.String name;
  public java.lang.String propertyName;
  public java.lang.String propertyClass;
  public java.lang.String propertyOriginalUnit;
  public java.lang.String propertyUnit;
  public long propertyNrDataValue;
  public boolean isThematicDataAtPoints;
  public de.uos.igf.db3d.dbms.model3d.RegularDeformableGrid3D();
  public de.uos.igf.db3d.dbms.model3d.RegularDeformableGrid3D(int, int, int, boolean);
  public de.uos.igf.db3d.dbms.model3d.RegularDeformableGrid3D(de.uos.igf.db3d.dbms.geom.Point3D[][][], boolean);
  public void addGridPoint(de.uos.igf.db3d.dbms.geom.Point3D, int, int, int);
  public de.uos.igf.db3d.dbms.geom.Point3D getGridPoint(int, int, int);
  public de.uos.igf.db3d.dbms.geom.Point3D[][][] getGrid();
  public int getDimX();
  public int getDimY();
  public int getDimZ();
  public byte getType();
  public int countElements();
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public int countComponents();
  public byte getSpatial3DType();
  public de.uos.igf.db3d.dbms.model3d.ComplexGeoObj getComponent(int);
  public void endUpdate();
  protected void updateMBB();
}
Compiled from "ResultGeometry3D.java"
public interface de.uos.igf.db3d.dbms.model3d.ResultGeometry3D {
  public abstract int size();
  public abstract boolean isEmpty();
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.SimpleGeoObj);
  public abstract de.uos.igf.db3d.dbms.geom.SimpleGeoObj[] toArray();
  public abstract boolean add(de.uos.igf.db3d.dbms.geom.SimpleGeoObj) throws java.lang.IllegalArgumentException;
  public abstract boolean remove(de.uos.igf.db3d.dbms.geom.SimpleGeoObj);
  public abstract void clear();
  public abstract de.uos.igf.db3d.dbms.geom.MBB3D computeMBB();
  public abstract boolean addAll(de.uos.igf.db3d.dbms.model3d.ResultGeometry3D);
  public abstract boolean removeAll(de.uos.igf.db3d.dbms.model3d.ResultGeometry3D);
  public abstract boolean hasPoint3D();
  public abstract boolean hasSegment3D();
  public abstract boolean hasTriangle3D();
  public abstract boolean hasTetrahedron3D();
  public abstract boolean hasWireframe3D();
  public abstract int countPoint3D();
  public abstract int countSegment3D();
  public abstract int countTriangle3D();
  public abstract int countTetrahedron3D();
  public abstract int countWireframe3D();
  public abstract java.util.Set filterPoint3D();
  public abstract java.util.Set filterSegment3D();
  public abstract java.util.Set filterTriangle3D();
  public abstract java.util.Set filterTetrahedron3D();
  public abstract java.util.Set filterWireframe3D();
  public abstract de.uos.igf.db3d.dbms.geom.SimpleGeoObjIterator iteratorObjects();
  public abstract java.util.Iterator iteratorPoint3D();
  public abstract java.util.Iterator iteratorSegment3D();
  public abstract java.util.Iterator iteratorTriangle3D();
  public abstract java.util.Iterator iteratorTetrahedron3D();
  public abstract java.util.Iterator iteratorWireframe3D();
  public abstract de.uos.igf.db3d.dbms.geom.SimpleGeoObjIterator iteratorFilter(de.uos.igf.db3d.dbms.model3d.ResultGeometry3D$Predicate);
}
Compiled from "ResultGeometry3D.java"
public interface de.uos.igf.db3d.dbms.model3d.ResultGeometry3D$Predicate {
  public abstract boolean evaluate(de.uos.igf.db3d.dbms.geom.SimpleGeoObj);
}
Compiled from "Sample3D.java"
public interface de.uos.igf.db3d.dbms.model3d.Sample3D extends de.uos.igf.db3d.dbms.model3d.Spatial3D {
  public abstract int countVertices();
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
}
Compiled from "Sample3DIterator.java"
public interface de.uos.igf.db3d.dbms.model3d.Sample3DIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract de.uos.igf.db3d.dbms.model3d.Sample3D nextElt();
  public abstract void remove();
}
Compiled from "SegmentElt3D.java"
public class de.uos.igf.db3d.dbms.model3d.SegmentElt3D extends de.uos.igf.db3d.dbms.geom.Segment3D implements de.uos.igf.db3d.dbms.model3d.NetElement3D {
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D(de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.Vector3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D(de.uos.igf.db3d.dbms.geom.Segment3D);
  public int getID();
  public boolean hasNeighbour(int);
  public boolean hasNeighbours();
  public boolean isInterior();
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D getNeighbour(int);
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D[] getNeighbours();
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp getNetComponent();
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3D getNet();
  public void setID(int);
  protected void setNeighbour(int, de.uos.igf.db3d.dbms.model3d.SegmentElt3D);
  protected void setNetComponent(de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp);
  public byte getType();
  public void invertOrientation();
}
Compiled from "SegmentNet3D.java"
public class de.uos.igf.db3d.dbms.model3d.SegmentNet3D extends de.uos.igf.db3d.dbms.model3d.SpatialObject3D implements de.uos.igf.db3d.dbms.model3d.Curve3D,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj {
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3D(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.model3d.SegmentNet3D(de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3D(de.uos.igf.db3d.dbms.model3d.SegmentNet3D);
  public int countComponents();
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp[] getComponents();
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp getComponent(int);
  public void addComponent(de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp);
  public void removeComponent(de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp);
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp createComponent();
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3D splitSegmentNet(int[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int getEuler();
  public double getLength();
  public int countElements();
  public int countVertices();
  public int countEdges();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean isOrientationConsistent();
  public byte getType();
  public byte getSpatial3DType();
  public void endUpdate();
  protected void setComponents(de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp[]);
  protected void updateMBB();
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  public de.uos.igf.db3d.dbms.model3d.ComplexGeoObj getComponent(int);
}
Compiled from "SegmentNet3DComp.java"
public class de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj,java.io.Serializable {
  protected de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp(de.uos.igf.db3d.dbms.geom.ScalarOperator, de.uos.igf.db3d.dbms.model3d.SegmentElt3D[]);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D getEndElement();
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D addElt(de.uos.igf.db3d.dbms.geom.Segment3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D addElt(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D removeElt(de.uos.igf.db3d.dbms.geom.Segment3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Point3D);
  public int countElements();
  public boolean isEmpty();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public int countVertices();
  public int countEdges();
  public int getEuler();
  public double getLength();
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D getEntryElement();
  public java.util.Set getElementsViaSAM();
  public java.util.Set getElementsViaRecursion();
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp$SegmentElt3DIterator getElementsIterator();
  public java.util.Set getPoints();
  public boolean isOrientationConsistent();
  public void makeOrientationConsistent();
  public boolean isBorderVertex(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean isBorderEdge(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean isConnected();
  public boolean isClosed();
  public byte getType();
  public int getComponentID();
  protected void setComponentID(int);
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3D getNet();
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp serializationCopy();
  protected void setNet(de.uos.igf.db3d.dbms.model3d.SegmentNet3D);
  public void buildNetTopology(de.uos.igf.db3d.dbms.model3d.SegmentElt3D[]);
  public de.uos.igf.db3d.dbms.util.SAM getSAM();
  protected void updateMBB();
  protected void updateEntryElement();
  protected void updateEulerStatistics();
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  public int getID();
  static {};
}
Compiled from "SegmentNet3DComp.java"
class de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp$1 {
}
Compiled from "SegmentNet3DComp.java"
public class de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp$SegmentElt3DIterator {
  public boolean hasNext();
  public de.uos.igf.db3d.dbms.model3d.SegmentElt3D next();
  public void terminate();
  de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp$SegmentElt3DIterator(de.uos.igf.db3d.dbms.model3d.SegmentElt3D, de.uos.igf.db3d.dbms.model3d.SegmentNet3DComp$1);
}
Compiled from "SegmentNetBuilder.java"
public class de.uos.igf.db3d.dbms.model3d.SegmentNetBuilder {
  public static void main(java.lang.String[]);
  public de.uos.igf.db3d.dbms.model3d.SegmentNetBuilder(de.uos.igf.db3d.dbms.structure.Space3D);
  public de.uos.igf.db3d.dbms.model3d.SegmentNetBuilder(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void setComponentIDCounter(int);
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public void addComponent(de.uos.igf.db3d.dbms.model3d.SegmentElt3D[]);
  public void addComponent(de.uos.igf.db3d.dbms.model3d.SegmentElt3D[], int);
  public de.uos.igf.db3d.dbms.model3d.SegmentNet3D getSegmentNet();
}
Compiled from "Solid3D.java"
public interface de.uos.igf.db3d.dbms.model3d.Solid3D extends de.uos.igf.db3d.dbms.model3d.Volume3D {
  public abstract int countTetras();
  public abstract int countBorderTetras();
}
Compiled from "SpaceConstraint.java"
public abstract class de.uos.igf.db3d.dbms.model3d.SpaceConstraint implements de.uos.igf.db3d.dbms.structure.PersistentObject {
  public de.uos.igf.db3d.dbms.model3d.SpaceConstraint();
  public abstract boolean validateConstraint(de.uos.igf.db3d.dbms.structure.Space3D, de.uos.igf.db3d.dbms.model3d.Object3D);
}
Compiled from "SpaceDefinition.java"
public class de.uos.igf.db3d.dbms.model3d.SpaceDefinition implements de.uos.igf.db3d.dbms.structure.PersistentObject {
  public de.uos.igf.db3d.dbms.model3d.SpaceDefinition(double, int);
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public int getSRID();
  public java.lang.String getSridDescription();
}
Compiled from "Spatial3D.java"
public interface de.uos.igf.db3d.dbms.model3d.Spatial3D {
  public static final byte SAMPLE_3D;
  public static final byte CURVE_3D;
  public static final byte SURFACE_3D;
  public static final byte HULL_3D;
  public static final byte SOLID_3D;
  public static final byte GRID_3D;
  public abstract de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public abstract de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public abstract de.uos.igf.db3d.dbms.model3d.Object3D getObject3D();
  public abstract boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public abstract boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public abstract boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract int countComponents();
  public abstract int countElements();
  public abstract void beginUpdate();
  public abstract void endUpdate();
  public abstract boolean isUpdate();
  public abstract byte getSpatial3DType();
  public abstract de.uos.igf.db3d.dbms.model3d.ComplexGeoObj getComponent(int);
}
Compiled from "Spatial3DIterator.java"
public interface de.uos.igf.db3d.dbms.model3d.Spatial3DIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract de.uos.igf.db3d.dbms.model3d.Spatial3D nextElt();
  public abstract void remove();
}
Compiled from "SpatialObject3D.java"
public abstract class de.uos.igf.db3d.dbms.model3d.SpatialObject3D implements de.uos.igf.db3d.dbms.model3d.Spatial3D,de.uos.igf.db3d.dbms.structure.PersistentObject {
  protected de.uos.igf.db3d.dbms.model3d.SpatialObject3D();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public de.uos.igf.db3d.dbms.model3d.Object3D getObject3D();
  public void beginUpdate();
  public abstract void endUpdate();
  public boolean isUpdate();
  protected void setObject3D(de.uos.igf.db3d.dbms.model3d.Object3D);
  public boolean isEqualID(de.uos.igf.db3d.dbms.model3d.NetElement3D, de.uos.igf.db3d.dbms.model3d.NetElement3D);
  protected void setMBB(de.uos.igf.db3d.dbms.geom.MBB3D);
  protected void setScalarOperator(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.util.SAM getSAM();
  protected void setSAM(de.uos.igf.db3d.dbms.util.SAM);
  protected abstract void updateMBB();
  protected void setUpdate(boolean);
  protected int nextElementID();
  public int nextComponentID();
  public void setElementID(int);
  public void setComponentID(int);
  public int getComponentIDCounter();
}
Compiled from "SpatialObject3D.java"
public class de.uos.igf.db3d.dbms.model3d.SpatialObject3D$HoldNeighbourStructure {
  public de.uos.igf.db3d.dbms.model3d.SpatialObject3D$HoldNeighbourStructure();
  public de.uos.igf.db3d.dbms.model3d.SpatialObject3D$HoldNeighbourStructure(de.uos.igf.db3d.dbms.model3d.NetElement3D, int, de.uos.igf.db3d.dbms.model3d.NetElement3D, int);
  public void setParameters(de.uos.igf.db3d.dbms.model3d.NetElement3D, int, de.uos.igf.db3d.dbms.model3d.NetElement3D, int);
  public de.uos.igf.db3d.dbms.model3d.NetElement3D getObject(int);
  public int getIndex(int);
}
Compiled from "Surface3D.java"
public interface de.uos.igf.db3d.dbms.model3d.Surface3D extends de.uos.igf.db3d.dbms.model3d.Spatial3D {
  public abstract double getArea();
  public abstract int countVertices();
  public abstract int countEdges();
  public abstract int countFaces();
  public abstract int countBorderVertices();
  public abstract int countBorderEdges();
  public abstract int countBorderFaces();
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
  public abstract boolean contains(de.uos.igf.db3d.dbms.geom.Triangle3D);
}
Compiled from "Surface3DIterator.java"
public interface de.uos.igf.db3d.dbms.model3d.Surface3DIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract de.uos.igf.db3d.dbms.model3d.Surface3D nextElt();
  public abstract void remove();
}
Compiled from "TetrahedronElt3D.java"
public class de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D extends de.uos.igf.db3d.dbms.geom.Tetrahedron3D implements de.uos.igf.db3d.dbms.model3d.NetElement3D {
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D(de.uos.igf.db3d.dbms.geom.Point3D[], de.uos.igf.db3d.dbms.geom.ScalarOperator) throws java.lang.IllegalArgumentException;
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Triangle3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D(de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public int getID();
  public boolean hasNeighbour(int);
  public int countNeighbours();
  public boolean hasNeighbours();
  public boolean isInterior();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D getNeighbour(int);
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D[] getNeighbours();
  public boolean isBorderElement();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp getNetComponent();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D getNet();
  public void setNeighbour(int, de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public int setNeighbourNull(de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void setID(int);
  public void setNetComponent(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp);
  public byte getType();
}
Compiled from "TetrahedronNet3D.java"
public class de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D extends de.uos.igf.db3d.dbms.model3d.SpatialObject3D implements de.uos.igf.db3d.dbms.model3d.Solid3D,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj {
  protected de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp[] components;
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D);
  public int countComponents();
  public int countElements();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp[] getComponents();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp getComponent(int);
  public void addComponent(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp);
  public void removeComponent(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp);
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp createComponent();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D splitTetrahedronNet(int[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public double getArea();
  public double getVolume();
  public int getEuler();
  public int countVertices();
  public int countEdges();
  public int countFaces();
  public int countTetras();
  public int countBorderVertices();
  public int countBorderEdges();
  public int countBorderFaces();
  public int countBorderTetras();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public byte getType();
  public byte getSpatial3DType();
  public void endUpdate();
  protected void setComponents(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp[]);
  protected void updateMBB();
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  public de.uos.igf.db3d.dbms.model3d.ComplexGeoObj getComponent(int);
}
Compiled from "TetrahedronNet3DComp.java"
public class de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj,java.io.Serializable {
  protected de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp(de.uos.igf.db3d.dbms.geom.ScalarOperator, de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D[]) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D addElt(de.uos.igf.db3d.dbms.geom.Tetrahedron3D) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D removeElt(de.uos.igf.db3d.dbms.geom.Tetrahedron3D) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public boolean isConnectedWith(de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D, de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Point3D);
  public int countElements();
  public int countVertices();
  public int countEdges();
  public int countFaces();
  public int countTetras();
  public int countBorderVertices();
  public int countBorderEdges();
  public int countBorderFaces();
  public int countBorderTetras();
  public java.util.Set getBorderVertices();
  public java.util.Set getBorderEdges();
  public java.util.Set getBorderFaces();
  public java.util.Set getBorderTetras();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public double getArea();
  public double getVolume();
  public int getEuler();
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D getEntryElement();
  public java.util.Set getElementsViaSAM();
  public java.util.Set getElementsViaRecursion();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$TetrahedronElt3DIterator getElementsIterator();
  public java.util.Set getPoints();
  public java.util.Set getSegments();
  public java.util.Set getTriangles();
  public boolean isEmpty();
  public boolean isBorderVertex(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean isBorderEdge(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean isBorderFace(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean isBorderElement(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public boolean isConnected();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean containsInside(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
  public byte getType();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D getNet();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp serializationCopy();
  public void setNet(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D);
  public void buildNetTopology(de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D[]) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public de.uos.igf.db3d.dbms.util.SAM getSAM();
  public int getComponentID();
  public void setComponentID(int);
  protected void updateMBB();
  protected void updateEntryElement();
  protected void updateEulerStatistics();
  public java.util.Set<de.uos.igf.db3d.dbms.geom.Triangle3D> findTinBorder1();
  public java.util.Set<de.uos.igf.db3d.dbms.geom.Triangle3D> findTinBorder2();
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  public int getID();
  static {};
}
Compiled from "TetrahedronNet3DComp.java"
class de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$1 {
}
Compiled from "TetrahedronNet3DComp.java"
public class de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$TetrahedronElt3DIterator {
  public boolean hasNext();
  public de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D next();
  public void terminate();
  de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$TetrahedronElt3DIterator(de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D, de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$1);
}
Compiled from "TetrahedronNet3DComp.java"
class de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$TetrahedronElt3DIterator$Actual {
  de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$TetrahedronElt3DIterator$Actual(de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D, de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$1);
  static byte access$200(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$TetrahedronElt3DIterator$Actual);
  static void access$300(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$TetrahedronElt3DIterator$Actual);
  static de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D access$400(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3DComp$TetrahedronElt3DIterator$Actual);
}
Compiled from "TetrahedronNetBuilder.java"
public class de.uos.igf.db3d.dbms.model3d.TetrahedronNetBuilder {
  protected java.util.List components;
  protected int counter;
  protected int compIDCounter;
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNetBuilder(de.uos.igf.db3d.dbms.structure.Space3D);
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNetBuilder(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void setComponentIDCounter(int);
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public boolean addComponent(de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D[]);
  public boolean addComponent(de.uos.igf.db3d.dbms.model3d.TetrahedronElt3D[], int) throws de.uos.igf.db3d.dbms.api.DB3DException;
  public de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D getTetrahedronNet();
}
Compiled from "TriangleElt3D.java"
public class de.uos.igf.db3d.dbms.model3d.TriangleElt3D extends de.uos.igf.db3d.dbms.geom.Triangle3D implements de.uos.igf.db3d.dbms.model3d.NetElement3D {
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D(de.uos.igf.db3d.dbms.geom.Point3D[], de.uos.igf.db3d.dbms.geom.ScalarOperator) throws java.lang.IllegalArgumentException;
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D(de.uos.igf.db3d.dbms.geom.Point3D, de.uos.igf.db3d.dbms.geom.Segment3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public int getID();
  public boolean hasNeighbour(int);
  public int countNeighbours();
  public boolean hasNeighbours();
  public boolean isInterior();
  public boolean setNeighbour(int, de.uos.igf.db3d.dbms.model3d.TriangleElt3D);
  public int setNeighbourNull(de.uos.igf.db3d.dbms.model3d.TriangleElt3D, de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D getNeighbour(int);
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D[] getNeighbours();
  de.uos.igf.db3d.dbms.model3d.TriangleNet3D getNet();
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp getNetComponent();
  public void setNetComponent(de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp);
  public void setID(int);
  public byte getType();
  public void makeNeighboursOrientationConsistent(de.uos.igf.db3d.dbms.geom.ScalarOperator, de.uos.igf.db3d.dbms.util.FlagMap);
  public void invertOrientation();
}
Compiled from "TriangleNet3D.java"
public class de.uos.igf.db3d.dbms.model3d.TriangleNet3D extends de.uos.igf.db3d.dbms.model3d.SpatialObject3D implements de.uos.igf.db3d.dbms.model3d.Surface3D,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj {
  protected de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp[] components;
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3D(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  protected de.uos.igf.db3d.dbms.model3d.TriangleNet3D(de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3D(de.uos.igf.db3d.dbms.model3d.TriangleNet3D);
  public int countComponents();
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp[] getComponents();
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp getComponent(int);
  public void addComponent(de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp);
  public void removeComponent(de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp);
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp createComponent();
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3D splitTriangleNet(int[], de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public int getEuler();
  public double getArea();
  public int countElements();
  public int countVertices();
  public int countEdges();
  public int countFaces();
  public int countBorderVertices();
  public int countBorderEdges();
  public int countBorderFaces();
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean isOrientationConsistent();
  public byte getType();
  public byte getSpatial3DType();
  public void endUpdate();
  protected void setComponents(de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp[]);
  protected void updateMBB();
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  public de.uos.igf.db3d.dbms.model3d.ComplexGeoObj getComponent(int);
}
Compiled from "TriangleNet3DComp.java"
public class de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp implements de.uos.igf.db3d.dbms.structure.PersistentObject,de.uos.igf.db3d.dbms.model3d.ComplexGeoObj,java.io.Serializable {
  protected de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp(de.uos.igf.db3d.dbms.geom.ScalarOperator, de.uos.igf.db3d.dbms.model3d.TriangleElt3D[]);
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D addElt(de.uos.igf.db3d.dbms.geom.Triangle3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D removeElt(de.uos.igf.db3d.dbms.geom.Triangle3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D removeEltWithoutTopologyCheck(de.uos.igf.db3d.dbms.geom.Triangle3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D addEltWithoutTopologyCheck(de.uos.igf.db3d.dbms.geom.Triangle3D) throws de.uos.igf.db3d.dbms.api.UpdateException;
  public boolean isConnectedWith(de.uos.igf.db3d.dbms.model3d.TriangleElt3D, de.uos.igf.db3d.dbms.model3d.TriangleElt3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean containsElt(de.uos.igf.db3d.dbms.geom.Point3D);
  public int countElements();
  public boolean isEmpty();
  public int countVertices();
  public int countEdges();
  public int countBorderVertices();
  public int countBorderEdges();
  public int countBorderFaces();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public int getEuler();
  public double getArea();
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D getEntryElement();
  public java.util.Set<?> getElementsViaSAM();
  public java.util.Set getElementsViaRecursion();
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$TriangleElt3DIterator getElementsIterator();
  public java.util.Set<de.uos.igf.db3d.dbms.geom.Equivalentable> getPoints();
  public java.util.Set<de.uos.igf.db3d.dbms.geom.Equivalentable> getSegments();
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3D getNet();
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp serializationCopy();
  public void setNet(de.uos.igf.db3d.dbms.model3d.TriangleNet3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Plane3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Line3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean contains(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean isOrientationConsistent();
  public void makeOrientationConsistent(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void invertOrientation();
  public boolean isBorderVertex(de.uos.igf.db3d.dbms.geom.Point3D);
  public boolean isBorderEdge(de.uos.igf.db3d.dbms.geom.Segment3D);
  public boolean isBorderFace(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public boolean isConnected();
  public byte getType();
  public void setOriented(boolean);
  public de.uos.igf.db3d.dbms.util.SAM getSAM();
  public int getComponentID();
  public void setComponentID(int);
  public void buildNetTopology(de.uos.igf.db3d.dbms.model3d.TriangleElt3D[]);
  public void checkNetTopology(de.uos.igf.db3d.dbms.model3d.TriangleElt3D[]);
  protected void updateMBB();
  protected void updateEntryElement();
  protected void updateEulerStatistics();
  public java.util.Set<de.uos.igf.db3d.dbms.geom.Segment3D> findTinBorder1();
  public java.util.Set<de.uos.igf.db3d.dbms.geom.Segment3D> findTinBorder2();
  public java.util.Collection<de.uos.igf.db3d.dbms.geom.Segment3D> getAllSegmentsWithPoint(de.uos.igf.db3d.dbms.geom.Point3D);
  public java.util.Set<de.uos.igf.db3d.dbms.model3d.TriangleElt3D> getAllTrianglesWithPoint(de.uos.igf.db3d.dbms.geom.Point3D);
  public java.util.Collection<de.uos.igf.db3d.dbms.model3d.TriangleElt3D> getAllTrianglesWithPoint2(de.uos.igf.db3d.dbms.geom.Point3D);
  public java.util.Collection<de.uos.igf.db3d.dbms.geom.Triangle3D> getAllTrianglesWithPoint3(de.uos.igf.db3d.dbms.geom.Point3D);
  public java.util.Map<de.uos.igf.db3d.dbms.geom.Point3D, java.util.List<de.uos.igf.db3d.dbms.geom.Point3D>> createPointIndex();
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D getElement(int);
  public java.util.Set inside(de.uos.igf.db3d.dbms.geom.MBB3D);
  public int getID();
  public de.uos.igf.db3d.dbms.geom.SimpleGeoObj getElement(int);
  static {};
}
Compiled from "TriangleNet3DComp.java"
class de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$1 {
}
Compiled from "TriangleNet3DComp.java"
public final class de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$TriangleElt3DIterator {
  public boolean hasNext();
  public de.uos.igf.db3d.dbms.model3d.TriangleElt3D next();
  public void terminate();
  de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$TriangleElt3DIterator(de.uos.igf.db3d.dbms.model3d.TriangleElt3D, de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$1);
}
Compiled from "TriangleNet3DComp.java"
public final class de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$TriangleElt3DIterator$Actual {
  de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$TriangleElt3DIterator$Actual(de.uos.igf.db3d.dbms.model3d.TriangleElt3D, de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$1);
  static byte access$200(de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$TriangleElt3DIterator$Actual);
  static void access$300(de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$TriangleElt3DIterator$Actual);
  static de.uos.igf.db3d.dbms.model3d.TriangleElt3D access$400(de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp$TriangleElt3DIterator$Actual);
}
Compiled from "TriangleNetBuilder.java"
public class de.uos.igf.db3d.dbms.model3d.TriangleNetBuilder {
  protected java.util.List<de.uos.igf.db3d.dbms.model3d.TriangleNet3DComp> components;
  protected int counter;
  protected int compIDCounter;
  public de.uos.igf.db3d.dbms.model3d.TriangleNetBuilder(de.uos.igf.db3d.dbms.structure.Space3D);
  public de.uos.igf.db3d.dbms.model3d.TriangleNetBuilder(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public void setComponentIDCounter(int);
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public void addComponent(de.uos.igf.db3d.dbms.model3d.TriangleElt3D[]);
  public void addComponent(de.uos.igf.db3d.dbms.model3d.TriangleElt3D[], int);
  public de.uos.igf.db3d.dbms.model3d.TriangleNet3D getTriangleNet();
}
Compiled from "Volume3D.java"
public interface de.uos.igf.db3d.dbms.model3d.Volume3D extends de.uos.igf.db3d.dbms.model3d.Spatial3D {
  public abstract double getVolume();
  public abstract double getArea();
  public abstract int countVertices();
  public abstract int countEdges();
  public abstract int countFaces();
  public abstract int countBorderVertices();
  public abstract int countBorderEdges();
  public abstract int countBorderFaces();
  public abstract boolean containsInside(de.uos.igf.db3d.dbms.geom.Point3D);
  public abstract boolean containsInside(de.uos.igf.db3d.dbms.geom.Segment3D);
  public abstract boolean containsInside(de.uos.igf.db3d.dbms.geom.Triangle3D);
  public abstract boolean containsInside(de.uos.igf.db3d.dbms.geom.Tetrahedron3D);
}
Compiled from "Volume3DIterator.java"
public interface de.uos.igf.db3d.dbms.model3d.Volume3DIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract de.uos.igf.db3d.dbms.model3d.Volume3D nextElt();
  public abstract void remove();
}
Compiled from "Component4D.java"
public interface de.uos.igf.db3d.dbms.newModel4d.Component4D {
  public abstract de.uos.igf.db3d.dbms.newModel4d.Net4D getNet();
  public abstract java.util.Map<java.lang.Integer, java.util.List<de.uos.igf.db3d.dbms.geom.Point3D>> getPointTubes();
  public abstract de.uos.igf.db3d.dbms.newModel4d.TimeInterval getTimeInterval();
  public abstract java.util.LinkedList<java.util.Date> getTimesteps();
}
Compiled from "Element4D.java"
public interface de.uos.igf.db3d.dbms.newModel4d.Element4D {
}
Compiled from "Net4D.java"
public interface de.uos.igf.db3d.dbms.newModel4d.Net4D {
  public abstract void addChangeTimestep(java.util.Date);
  public abstract de.uos.igf.db3d.dbms.newModel4d.Component4D getComponent(int);
  public abstract java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Component4D> getComponents();
  public abstract java.util.List<java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>> getElements();
  public abstract java.util.Date getEnd();
  public abstract java.util.Date getLastChangeDate();
  public abstract java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D> getNetElements(java.util.Date);
  public abstract java.util.Date getStart();
  public abstract byte getType();
  public abstract java.util.List<de.uos.igf.db3d.dbms.newModel4d.Component4D> getValidComponents(java.util.Date);
  public abstract void preparePostObject(java.util.Date);
}
Compiled from "Object4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.Object4D {
  public de.uos.igf.db3d.dbms.newModel4d.Object4D();
  public de.uos.igf.db3d.dbms.newModel4d.SpatialObject4D getSpatial();
  public void setSpatial(de.uos.igf.db3d.dbms.newModel4d.SpatialObject4D);
  public void setID(de.uos.igf.db3d.dbms.structure.OID);
  public java.lang.String getName();
  public void setName(java.lang.String);
}
Compiled from "Point4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.Point4D implements de.uos.igf.db3d.dbms.newModel4d.Element4D {
  public de.uos.igf.db3d.dbms.newModel4d.Point4D(int, int);
  public int getID();
}
Compiled from "PointComponent4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.PointComponent4D implements de.uos.igf.db3d.dbms.newModel4d.Component4D {
  int id;
  de.uos.igf.db3d.dbms.newModel4d.Net4D net;
  de.uos.igf.db3d.dbms.newModel4d.TimeInterval timeInterval;
  protected java.util.LinkedList<java.util.Date> timesteps;
  public de.uos.igf.db3d.dbms.newModel4d.PointComponent4D(de.uos.igf.db3d.dbms.newModel4d.PointNet4D, int);
  public int getID();
  public void setID(int);
  public java.util.Map<java.lang.Integer, java.util.List<de.uos.igf.db3d.dbms.geom.Point3D>> getPointTubes();
  public java.util.LinkedList<java.util.Date> getTimesteps();
  public de.uos.igf.db3d.dbms.newModel4d.Net4D getNet();
  public de.uos.igf.db3d.dbms.newModel4d.TimeInterval getTimeInterval();
}
Compiled from "PointNet4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.PointNet4D implements de.uos.igf.db3d.dbms.newModel4d.Net4D {
  java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Component4D> components;
  java.util.Map<de.uos.igf.db3d.dbms.newModel4d.TimeInterval, java.util.List<java.lang.Integer>> timeIntervals;
  java.util.LinkedList<java.util.Date> changeDates;
  java.util.Date start;
  java.util.Date end;
  de.uos.igf.db3d.dbms.newModel4d.TimeInterval currentInterval;
  java.util.List<java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>> elements;
  public de.uos.igf.db3d.dbms.newModel4d.PointNet4D(java.util.Date);
  public void addPointComponent(de.uos.igf.db3d.dbms.newModel4d.PointComponent4D);
  public void createEndOfExistenceInterval(java.util.Date);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Component4D> getComponents();
  public de.uos.igf.db3d.dbms.newModel4d.Component4D getComponent(int);
  public void addPoint(de.uos.igf.db3d.dbms.newModel4d.Point4D);
  public java.util.List<java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>> getElements();
  public void addTimestep(de.uos.igf.db3d.dbms.newModel4d.Component4D, java.util.HashMap<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>, java.util.Date);
  public void addChangeTimestep(java.util.Date);
  public java.util.LinkedList<java.util.Date> getChangeDates();
  public java.util.Date getLastChangeDate();
  public void preparePostObject(java.util.Date);
  public java.util.Date getStart();
  public java.util.Date getEnd();
  public java.util.List<de.uos.igf.db3d.dbms.newModel4d.Component4D> getValidComponents(java.util.Date);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D> getNetElements(java.util.Date);
  public byte getType();
}
Compiled from "Segment4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.Segment4D implements de.uos.igf.db3d.dbms.newModel4d.Element4D {
  public int hashCode();
  public boolean equals(java.lang.Object);
  public de.uos.igf.db3d.dbms.newModel4d.Segment4D(int, int, int);
  public de.uos.igf.db3d.dbms.newModel4d.Segment4D(int[], java.lang.Integer);
  public int getIDstart();
  public int getIDend();
  public int getID();
  public void setID(int);
  public java.lang.String toString();
}
Compiled from "SegmentComponent4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.SegmentComponent4D implements de.uos.igf.db3d.dbms.newModel4d.Component4D {
  int id;
  de.uos.igf.db3d.dbms.newModel4d.Net4D net;
  de.uos.igf.db3d.dbms.newModel4d.TimeInterval timeInterval;
  protected java.util.LinkedList<java.util.Date> timesteps;
  public de.uos.igf.db3d.dbms.newModel4d.SegmentComponent4D(de.uos.igf.db3d.dbms.newModel4d.SegmentNet4D, int);
  public int getID();
  public void setID(int);
  public java.util.Map<java.lang.Integer, java.util.List<de.uos.igf.db3d.dbms.geom.Point3D>> getPointTubes();
  public java.util.LinkedList<java.util.Date> getTimesteps();
  public de.uos.igf.db3d.dbms.newModel4d.Net4D getNet();
  public de.uos.igf.db3d.dbms.newModel4d.TimeInterval getTimeInterval();
}
Compiled from "SegmentNet4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.SegmentNet4D implements de.uos.igf.db3d.dbms.newModel4d.Net4D {
  java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Component4D> components;
  java.util.Map<de.uos.igf.db3d.dbms.newModel4d.TimeInterval, java.util.List<java.lang.Integer>> timeIntervals;
  java.util.LinkedList<java.util.Date> changeDates;
  java.util.Date start;
  java.util.Date end;
  de.uos.igf.db3d.dbms.newModel4d.TimeInterval currentInterval;
  java.util.List<java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>> elements;
  public de.uos.igf.db3d.dbms.newModel4d.SegmentNet4D(java.util.Date);
  public void addSegmentComponent(de.uos.igf.db3d.dbms.newModel4d.SegmentComponent4D);
  public void createEndOfExistenceInterval(java.util.Date);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Component4D> getComponents();
  public de.uos.igf.db3d.dbms.newModel4d.Component4D getComponent(int);
  public void addSegment(de.uos.igf.db3d.dbms.newModel4d.Segment4D);
  public java.util.List<java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>> getElements();
  public void addTimestep(de.uos.igf.db3d.dbms.newModel4d.Component4D, java.util.HashMap<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>, java.util.Date);
  public void addChangeTimestep(java.util.Date);
  public java.util.LinkedList<java.util.Date> getChangeDates();
  public java.util.Date getLastChangeDate();
  public void preparePostObject(java.util.Date);
  public java.util.Date getStart();
  public java.util.Date getEnd();
  public java.util.List<de.uos.igf.db3d.dbms.newModel4d.Component4D> getValidComponents(java.util.Date);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D> getNetElements(java.util.Date);
  public byte getType();
}
Compiled from "ServicesFor4DObjects.java"
public class de.uos.igf.db3d.dbms.newModel4d.ServicesFor4DObjects {
  public de.uos.igf.db3d.dbms.newModel4d.ServicesFor4DObjects();
  public static de.uos.igf.db3d.dbms.model3d.Object3D getInstanceAt(de.uos.igf.db3d.dbms.newModel4d.Object4D, java.util.Date);
  public static double getAverageSpeed(de.uos.igf.db3d.dbms.newModel4d.Object4D, java.util.Date);
}
Compiled from "SpatialObject4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.SpatialObject4D {
  public de.uos.igf.db3d.dbms.newModel4d.SpatialObject4D();
  public de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public de.uos.igf.db3d.dbms.newModel4d.Object4D getObject4D();
  protected void setObject4D(de.uos.igf.db3d.dbms.newModel4d.Object4D);
  public void setScalarOperator(de.uos.igf.db3d.dbms.geom.ScalarOperator);
  public de.uos.igf.db3d.dbms.newModel4d.Net4D getNet();
  public void setNet(de.uos.igf.db3d.dbms.newModel4d.Net4D);
}
Compiled from "Tetrahedron4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.Tetrahedron4D implements de.uos.igf.db3d.dbms.newModel4d.Element4D {
  public de.uos.igf.db3d.dbms.newModel4d.Tetrahedron4D(int, int, int, int, java.lang.Integer);
  public de.uos.igf.db3d.dbms.newModel4d.Tetrahedron4D(int[], java.lang.Integer) throws java.lang.IllegalArgumentException;
  public int getID();
  public int getIDone();
  public int getIDthree();
  public int getIDtwo();
  public int getIDzero();
  public int[] getSegments();
  public int[] getTriangles();
  public void setSegments(int[]);
  public void setTriangles(int[]);
}
Compiled from "TetrahedronComponent4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.TetrahedronComponent4D implements de.uos.igf.db3d.dbms.newModel4d.Component4D {
  public de.uos.igf.db3d.dbms.newModel4d.TetrahedronComponent4D(de.uos.igf.db3d.dbms.newModel4d.TetrahedronNet4D, int);
  public int getID();
  public de.uos.igf.db3d.dbms.newModel4d.Net4D getNet();
  public java.util.Map<java.lang.Integer, java.util.List<de.uos.igf.db3d.dbms.geom.Point3D>> getPointTubes();
  public de.uos.igf.db3d.dbms.newModel4d.TimeInterval getTimeInterval();
  public java.util.LinkedList<java.util.Date> getTimesteps();
  public void setID(int);
}
Compiled from "TetrahedronNet4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.TetrahedronNet4D implements de.uos.igf.db3d.dbms.newModel4d.Net4D {
  public de.uos.igf.db3d.dbms.newModel4d.TetrahedronNet4D(java.util.Date);
  public void addBoundaryElement(de.uos.igf.db3d.dbms.newModel4d.Segment4D);
  public void addBoundaryElement(de.uos.igf.db3d.dbms.newModel4d.Triangle4D);
  public void addChangeTimestep(java.util.Date);
  public void addTetrahedron(de.uos.igf.db3d.dbms.newModel4d.Tetrahedron4D);
  public void addTetrahedronComponent(de.uos.igf.db3d.dbms.newModel4d.TetrahedronComponent4D);
  public void addTimestep(de.uos.igf.db3d.dbms.newModel4d.Component4D, java.util.HashMap<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>, java.util.Date);
  public void createEndOfExistenceInterval(java.util.Date);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D> getBoundaryElements1D(java.util.Date);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D> getBoundaryElements2D(java.util.Date);
  public java.util.LinkedList<java.util.Date> getChangeDates();
  public de.uos.igf.db3d.dbms.newModel4d.Component4D getComponent(int);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Component4D> getComponents();
  public java.util.List<java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>> getElements();
  public java.util.Date getEnd();
  public java.util.Date getLastChangeDate();
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D> getNetElements(java.util.Date);
  public java.util.Date getStart();
  public byte getType();
  public java.util.List<de.uos.igf.db3d.dbms.newModel4d.Component4D> getValidComponents(java.util.Date);
  public boolean isBoundaryElements();
  public void preparePostObject(java.util.Date);
  public void setBoundaryElements(boolean);
}
Compiled from "TimeInterval.java"
public class de.uos.igf.db3d.dbms.newModel4d.TimeInterval {
  java.util.Date start;
  java.util.Date end;
  public de.uos.igf.db3d.dbms.newModel4d.TimeInterval(java.util.Date, java.util.Date);
  public java.util.Date getStart();
  public void setStart(java.util.Date);
  public java.util.Date getEnd();
  public void setEnd(java.util.Date);
}
Compiled from "TimeStepBuilder.java"
public class de.uos.igf.db3d.dbms.newModel4d.TimeStepBuilder {
  public de.uos.igf.db3d.dbms.newModel4d.TimeStepBuilder();
  public static void addTimestep(de.uos.igf.db3d.dbms.newModel4d.Component4D, java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>, java.util.Date);
  public static java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D> getPointTubesAtInstance(de.uos.igf.db3d.dbms.newModel4d.Component4D, java.util.Date);
  static {};
}
Compiled from "Triangle4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.Triangle4D implements de.uos.igf.db3d.dbms.newModel4d.Element4D {
  public de.uos.igf.db3d.dbms.newModel4d.Triangle4D(int, int, int, java.lang.Integer);
  public de.uos.igf.db3d.dbms.newModel4d.Triangle4D(int[], java.lang.Integer) throws java.lang.IllegalArgumentException;
  public boolean equals(java.lang.Object);
  public int getID();
  public int getIDone();
  public int getIDtwo();
  public int getIDzero();
  public int[] getSegments();
  public int hashCode();
  public void setID(int);
  public void setSegments(int[]);
}
Compiled from "TriangleComponent4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.TriangleComponent4D implements de.uos.igf.db3d.dbms.newModel4d.Component4D {
  int id;
  de.uos.igf.db3d.dbms.newModel4d.Net4D net;
  de.uos.igf.db3d.dbms.newModel4d.TimeInterval timeInterval;
  protected java.util.LinkedList<java.util.Date> timesteps;
  public de.uos.igf.db3d.dbms.newModel4d.TriangleComponent4D(de.uos.igf.db3d.dbms.newModel4d.TriangleNet4D, int);
  public int getID();
  public void setID(int);
  public java.util.Map<java.lang.Integer, java.util.List<de.uos.igf.db3d.dbms.geom.Point3D>> getPointTubes();
  public java.util.LinkedList<java.util.Date> getTimesteps();
  public de.uos.igf.db3d.dbms.newModel4d.Net4D getNet();
  public de.uos.igf.db3d.dbms.newModel4d.TimeInterval getTimeInterval();
}
Compiled from "TriangleNet4D.java"
public class de.uos.igf.db3d.dbms.newModel4d.TriangleNet4D implements de.uos.igf.db3d.dbms.newModel4d.Net4D {
  java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Component4D> components;
  java.util.Map<de.uos.igf.db3d.dbms.newModel4d.TimeInterval, java.util.List<java.lang.Integer>> timeIntervals;
  java.util.LinkedList<java.util.Date> changeDates;
  java.util.Date start;
  java.util.Date end;
  de.uos.igf.db3d.dbms.newModel4d.TimeInterval currentInterval;
  java.util.List<java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>> elements;
  boolean boundaryElements;
  java.util.List<java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>> boundaryElements1D;
  public de.uos.igf.db3d.dbms.newModel4d.TriangleNet4D(java.util.Date);
  public void addTriangleComponent(de.uos.igf.db3d.dbms.newModel4d.TriangleComponent4D);
  public void createEndOfExistenceInterval(java.util.Date);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Component4D> getComponents();
  public de.uos.igf.db3d.dbms.newModel4d.Component4D getComponent(int);
  public void addTriangle(de.uos.igf.db3d.dbms.newModel4d.Triangle4D);
  public java.util.List<java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>> getElements();
  public void addTimestep(de.uos.igf.db3d.dbms.newModel4d.Component4D, java.util.HashMap<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>, java.util.Date);
  public void addChangeTimestep(java.util.Date);
  public java.util.LinkedList<java.util.Date> getChangeDates();
  public java.util.Date getLastChangeDate();
  public void preparePostObject(java.util.Date);
  public java.util.Date getStart();
  public java.util.Date getEnd();
  public java.util.List<de.uos.igf.db3d.dbms.newModel4d.Component4D> getValidComponents(java.util.Date);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D> getNetElements(java.util.Date);
  public boolean isBoundaryElements();
  public void setBoundaryElements(boolean);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D> getBoundaryElements1D(java.util.Date);
  public void addBoundaryElement(de.uos.igf.db3d.dbms.newModel4d.Segment4D);
  public byte getType();
}
Compiled from "GeoObj.java"
public interface de.uos.igf.db3d.dbms.structure.GeoObj {
  public abstract byte getType();
  public abstract de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
}
Compiled from "OID.java"
public interface de.uos.igf.db3d.dbms.structure.OID {
  public abstract int getProject();
  public abstract int getSpace();
  public abstract int getObject();
  public abstract boolean isDBObject();
}
Compiled from "PersistentObject.java"
public interface de.uos.igf.db3d.dbms.structure.PersistentObject {
}
Compiled from "Space3D.java"
public interface de.uos.igf.db3d.dbms.structure.Space3D {
  public abstract int getCount();
  public abstract de.uos.igf.db3d.dbms.model3d.SpaceDefinition getSpaceDefinition();
  public abstract de.uos.igf.db3d.dbms.geom.ScalarOperator getScalarOperator();
  public abstract void setDescription(java.lang.String);
  public abstract java.lang.String getDescription();
  public abstract java.lang.String getName();
  public abstract de.uos.igf.db3d.dbms.model3d.Object3DIterator iteratorObject3D();
  public abstract de.uos.igf.db3d.dbms.model3d.Object3D[] getObjects();
  public abstract java.util.List getObjectsAsList();
  public abstract de.uos.igf.db3d.dbms.model3d.Object3D getObjectByID(int);
  public abstract de.uos.igf.db3d.dbms.model3d.Object3D getObjectByName(java.lang.String);
  public abstract void addSpaceConstraint(de.uos.igf.db3d.dbms.model3d.SpaceConstraint);
  public abstract de.uos.igf.db3d.dbms.structure.Space3D$SpatialPart getSpatialPart();
  public abstract int getSpaceID();
  public abstract boolean insert(de.uos.igf.db3d.dbms.model3d.Object3D);
  public abstract boolean update(de.uos.igf.db3d.dbms.model3d.Object3D);
  public abstract java.util.Set getSpaceConstraints();
  public abstract void persistentInitialization();
}
Compiled from "Space3D.java"
public interface de.uos.igf.db3d.dbms.structure.Space3D$SpatialPart {
  public abstract int getCount();
  public abstract de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public abstract java.util.Set intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract java.util.Set contains(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract java.util.Set inside(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract java.util.Set contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public abstract de.uos.igf.db3d.dbms.util.SAM$NNResult[] nearest(int, de.uos.igf.db3d.dbms.geom.Point3D);
  public abstract de.uos.igf.db3d.dbms.model3d.Spatial3DIterator iteratorSpatial3D();
  public abstract de.uos.igf.db3d.dbms.structure.Space3D getSpace();
}
Compiled from "AbstractHashMap.java"
public abstract class de.uos.igf.db3d.dbms.util.AbstractHashMap implements java.util.Map,java.lang.Cloneable {
  public de.uos.igf.db3d.dbms.util.AbstractHashMap(int, float);
  public de.uos.igf.db3d.dbms.util.AbstractHashMap(int);
  public de.uos.igf.db3d.dbms.util.AbstractHashMap();
  public de.uos.igf.db3d.dbms.util.AbstractHashMap(java.util.Map);
  public int size();
  public boolean isEmpty();
  public boolean containsValue(java.lang.Object);
  protected abstract int hashOfObject(java.lang.Object);
  protected abstract boolean equalityTest(java.lang.Object, java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public void putAll(java.util.Map);
  public void clear();
  public java.lang.Object clone();
  public java.util.Set keySet();
  public java.util.Collection values();
  public java.util.Set entrySet();
  int capacity();
  float loadFactor();
  static java.util.Iterator access$000(de.uos.igf.db3d.dbms.util.AbstractHashMap, int);
  static int access$100(de.uos.igf.db3d.dbms.util.AbstractHashMap);
  static de.uos.igf.db3d.dbms.util.AbstractHashMap$Entry[] access$200(de.uos.igf.db3d.dbms.util.AbstractHashMap);
  static int access$308(de.uos.igf.db3d.dbms.util.AbstractHashMap);
  static int access$110(de.uos.igf.db3d.dbms.util.AbstractHashMap);
  static int access$300(de.uos.igf.db3d.dbms.util.AbstractHashMap);
  static {};
}
Compiled from "AbstractHashMap.java"
class de.uos.igf.db3d.dbms.util.AbstractHashMap$1 extends java.util.AbstractSet {
  final de.uos.igf.db3d.dbms.util.AbstractHashMap this$0;
  de.uos.igf.db3d.dbms.util.AbstractHashMap$1(de.uos.igf.db3d.dbms.util.AbstractHashMap);
  public java.util.Iterator iterator();
  public int size();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public void clear();
}
Compiled from "AbstractHashMap.java"
class de.uos.igf.db3d.dbms.util.AbstractHashMap$2 extends java.util.AbstractCollection {
  final de.uos.igf.db3d.dbms.util.AbstractHashMap this$0;
  de.uos.igf.db3d.dbms.util.AbstractHashMap$2(de.uos.igf.db3d.dbms.util.AbstractHashMap);
  public java.util.Iterator iterator();
  public int size();
  public boolean contains(java.lang.Object);
  public void clear();
}
Compiled from "AbstractHashMap.java"
class de.uos.igf.db3d.dbms.util.AbstractHashMap$3 extends java.util.AbstractSet {
  final de.uos.igf.db3d.dbms.util.AbstractHashMap this$0;
  de.uos.igf.db3d.dbms.util.AbstractHashMap$3(de.uos.igf.db3d.dbms.util.AbstractHashMap);
  public java.util.Iterator iterator();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public int size();
  public void clear();
}
Compiled from "AbstractHashMap.java"
class de.uos.igf.db3d.dbms.util.AbstractHashMap$EmptyHashIterator implements java.util.Iterator {
  public boolean hasNext();
  public java.lang.Object next();
  public void remove();
  de.uos.igf.db3d.dbms.util.AbstractHashMap$EmptyHashIterator(de.uos.igf.db3d.dbms.util.AbstractHashMap$1);
}
Compiled from "AbstractHashMap.java"
class de.uos.igf.db3d.dbms.util.AbstractHashMap$Entry implements java.util.Map$Entry {
  int hash;
  java.lang.Object key;
  java.lang.Object value;
  de.uos.igf.db3d.dbms.util.AbstractHashMap$Entry next;
  de.uos.igf.db3d.dbms.util.AbstractHashMap$Entry(int, java.lang.Object, java.lang.Object, de.uos.igf.db3d.dbms.util.AbstractHashMap$Entry);
  protected java.lang.Object clone();
  public java.lang.Object getKey();
  public java.lang.Object getValue();
  public java.lang.Object setValue(java.lang.Object);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "AbstractHashMap.java"
class de.uos.igf.db3d.dbms.util.AbstractHashMap$HashIterator implements java.util.Iterator {
  de.uos.igf.db3d.dbms.util.AbstractHashMap$Entry[] internal_table;
  int index;
  de.uos.igf.db3d.dbms.util.AbstractHashMap$Entry entry;
  de.uos.igf.db3d.dbms.util.AbstractHashMap$Entry lastReturned;
  int type;
  final de.uos.igf.db3d.dbms.util.AbstractHashMap this$0;
  de.uos.igf.db3d.dbms.util.AbstractHashMap$HashIterator(de.uos.igf.db3d.dbms.util.AbstractHashMap, int);
  public boolean hasNext();
  public java.lang.Object next();
  public void remove();
}
Compiled from "AbstractHashSet.java"
public abstract class de.uos.igf.db3d.dbms.util.AbstractHashSet extends java.util.AbstractCollection implements java.util.Set,java.lang.Cloneable {
  public de.uos.igf.db3d.dbms.util.AbstractHashSet();
  public de.uos.igf.db3d.dbms.util.AbstractHashSet(java.util.Collection);
  public de.uos.igf.db3d.dbms.util.AbstractHashSet(int, float);
  public de.uos.igf.db3d.dbms.util.AbstractHashSet(int);
  protected abstract int hashOfObject(java.lang.Object);
  protected abstract boolean equalityTest(java.lang.Object, java.lang.Object);
  public java.util.Iterator iterator();
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public boolean add(java.lang.Object);
  public boolean remove(java.lang.Object);
  public void clear();
  public java.lang.Object clone();
  static {};
}
Compiled from "AbstractHashSet.java"
final class de.uos.igf.db3d.dbms.util.AbstractHashSet$DelegateAbstractHashMap extends de.uos.igf.db3d.dbms.util.AbstractHashMap {
  public de.uos.igf.db3d.dbms.util.AbstractHashSet$DelegateAbstractHashMap(int, float, de.uos.igf.db3d.dbms.util.AbstractHashSet);
  public de.uos.igf.db3d.dbms.util.AbstractHashSet$DelegateAbstractHashMap(int, de.uos.igf.db3d.dbms.util.AbstractHashSet);
  public de.uos.igf.db3d.dbms.util.AbstractHashSet$DelegateAbstractHashMap(de.uos.igf.db3d.dbms.util.AbstractHashSet);
  public de.uos.igf.db3d.dbms.util.AbstractHashSet$DelegateAbstractHashMap(java.util.Map, de.uos.igf.db3d.dbms.util.AbstractHashSet);
  protected boolean equalityTest(java.lang.Object, java.lang.Object);
  protected int hashOfObject(java.lang.Object);
}
Compiled from "EquivalentableHashMap.java"
public final class de.uos.igf.db3d.dbms.util.EquivalentableHashMap extends de.uos.igf.db3d.dbms.util.AbstractHashMap {
  public de.uos.igf.db3d.dbms.util.EquivalentableHashMap(de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.util.EquivalentableHashMap(int, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.util.EquivalentableHashMap(int, float, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.util.EquivalentableHashMap(java.util.Map, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  protected boolean equalityTest(java.lang.Object, java.lang.Object);
  protected int hashOfObject(java.lang.Object);
}
Compiled from "EquivalentableHashSet.java"
public final class de.uos.igf.db3d.dbms.util.EquivalentableHashSet extends de.uos.igf.db3d.dbms.util.AbstractHashSet {
  public de.uos.igf.db3d.dbms.util.EquivalentableHashSet(de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.util.EquivalentableHashSet(int, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.util.EquivalentableHashSet(int, float, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  public de.uos.igf.db3d.dbms.util.EquivalentableHashSet(java.util.Collection, de.uos.igf.db3d.dbms.geom.ScalarOperator, int);
  protected boolean equalityTest(java.lang.Object, java.lang.Object);
  protected int hashOfObject(java.lang.Object);
  public byte getEquivalentableConstant();
}
Compiled from "FlagMap.java"
public final class de.uos.igf.db3d.dbms.util.FlagMap {
  public static final short F1;
  public static final short F2;
  public static final short F3;
  public static final short F4;
  public static final short F5;
  public static final short F6;
  public static final short F7;
  public static final short F8;
  public static final short F9;
  public static final short F10;
  public static final short F11;
  public static final short F12;
  public static final short F13;
  public static final short F14;
  public static final short F15;
  public de.uos.igf.db3d.dbms.util.FlagMap();
  public void setFlag(java.lang.Object, short);
  public void clearFlag(java.lang.Object, short);
  public boolean checkFlag(java.lang.Object, short);
  public void add(java.lang.Object);
  public boolean check(java.lang.Object);
  public void remove(java.lang.Object);
  public void clearFlagMap();
  public int size();
}
Compiled from "FlagMap.java"
class de.uos.igf.db3d.dbms.util.FlagMap$1 {
}
Compiled from "FlagMap.java"
final class de.uos.igf.db3d.dbms.util.FlagMap$ShortValue {
  final de.uos.igf.db3d.dbms.util.FlagMap this$0;
  static void access$000(de.uos.igf.db3d.dbms.util.FlagMap$ShortValue, short);
  de.uos.igf.db3d.dbms.util.FlagMap$ShortValue(de.uos.igf.db3d.dbms.util.FlagMap, de.uos.igf.db3d.dbms.util.FlagMap$1);
  static void access$200(de.uos.igf.db3d.dbms.util.FlagMap$ShortValue, short);
  static boolean access$300(de.uos.igf.db3d.dbms.util.FlagMap$ShortValue, short);
}
Compiled from "IdentityHashSet.java"
public final class de.uos.igf.db3d.dbms.util.IdentityHashSet extends de.uos.igf.db3d.dbms.util.AbstractHashSet {
  public de.uos.igf.db3d.dbms.util.IdentityHashSet();
  public de.uos.igf.db3d.dbms.util.IdentityHashSet(java.util.Collection);
  public de.uos.igf.db3d.dbms.util.IdentityHashSet(int, float);
  public de.uos.igf.db3d.dbms.util.IdentityHashSet(int);
  protected int hashOfObject(java.lang.Object);
  protected boolean equalityTest(java.lang.Object, java.lang.Object);
}
Compiled from "JoinResult.java"
public final class de.uos.igf.db3d.dbms.util.JoinResult {
  public de.uos.igf.db3d.dbms.util.JoinResult(java.lang.Object, java.lang.Object);
  public java.lang.Object getFirst();
  public java.lang.Object getSecond();
}
Compiled from "RStar.java"
public final class de.uos.igf.db3d.dbms.util.RStar implements de.uos.igf.db3d.dbms.util.SAM,de.uos.igf.db3d.dbms.structure.PersistentObject {
  public de.uos.igf.db3d.dbms.util.RStar(int, de.uos.igf.db3d.dbms.geom.ScalarOperator) throws java.lang.IllegalArgumentException;
  public synchronized boolean insert(de.uos.igf.db3d.dbms.structure.GeoObj);
  public synchronized boolean remove(de.uos.igf.db3d.dbms.structure.GeoObj);
  protected java.util.Set retrieve(de.uos.igf.db3d.dbms.geom.MBB3D, int);
  protected de.uos.igf.db3d.dbms.util.SAM$NNResult[] nNNSearch(int, de.uos.igf.db3d.dbms.geom.Point3D) throws java.lang.IllegalArgumentException;
  protected int getMMax();
  protected short getMMin();
  protected de.uos.igf.db3d.dbms.util.RStar$Node getRoot();
  protected void setRoot(de.uos.igf.db3d.dbms.util.RStar$Node, int);
  protected void adjustHeightDiff(int);
  protected int getHeight();
  protected int getHeightDiff();
  protected int getForcedReInsertCount();
  public void print(java.io.PrintStream);
  public int getCount();
  public de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public java.util.Set getEntries();
  public java.util.Set intersectsStrict(de.uos.igf.db3d.dbms.geom.MBB3D);
  public java.util.Set intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public java.util.Set containsStrict(de.uos.igf.db3d.dbms.geom.MBB3D);
  public java.util.Set contains(de.uos.igf.db3d.dbms.geom.MBB3D);
  public java.util.Set insideStrict(de.uos.igf.db3d.dbms.geom.MBB3D);
  public java.util.Set inside(de.uos.igf.db3d.dbms.geom.MBB3D);
  public java.util.Set contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.util.SAM$NNResult[] nearest(int, de.uos.igf.db3d.dbms.geom.Point3D);
  public de.uos.igf.db3d.dbms.util.JoinResult[] intersectionJoin(de.uos.igf.db3d.dbms.util.RStar);
  public de.uos.igf.db3d.dbms.util.JoinResult[] equalsJoin(de.uos.igf.db3d.dbms.util.RStar);
  protected de.uos.igf.db3d.dbms.geom.ScalarOperator getSOP();
  public java.lang.String toString();
}
Compiled from "RStar.java"
class de.uos.igf.db3d.dbms.util.RStar$1 {
}
Compiled from "RStar.java"
final class de.uos.igf.db3d.dbms.util.RStar$Entry implements de.uos.igf.db3d.dbms.structure.PersistentObject,java.io.Serializable {
  protected de.uos.igf.db3d.dbms.util.RStar$Entry(de.uos.igf.db3d.dbms.geom.MBB3D, java.lang.Object);
  protected de.uos.igf.db3d.dbms.util.RStar$Entry(de.uos.igf.db3d.dbms.util.RStar$Entry, int);
  protected de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  protected java.lang.Object getSon();
  protected void setMBB(de.uos.igf.db3d.dbms.geom.MBB3D);
  protected int getHeight();
  protected void putHeight(int);
  public java.lang.String toString();
}
Compiled from "RStar.java"
final class de.uos.igf.db3d.dbms.util.RStar$NNResultImpl implements java.lang.Comparable,de.uos.igf.db3d.dbms.util.SAM$NNResult {
  final de.uos.igf.db3d.dbms.util.RStar this$0;
  protected de.uos.igf.db3d.dbms.util.RStar$NNResultImpl(de.uos.igf.db3d.dbms.util.RStar);
  protected void setNNResult(double, java.lang.Object);
  public double getDistance();
  public java.lang.Object getObjectRef();
  public int compareTo(java.lang.Object);
}
Compiled from "RStar.java"
final class de.uos.igf.db3d.dbms.util.RStar$Node implements de.uos.igf.db3d.dbms.structure.PersistentObject,java.io.Serializable {
  final de.uos.igf.db3d.dbms.util.RStar this$0;
  protected de.uos.igf.db3d.dbms.util.RStar$Node(de.uos.igf.db3d.dbms.util.RStar);
  protected java.util.List join(de.uos.igf.db3d.dbms.util.RStar$Node, java.util.List, int);
  protected void retrieve(de.uos.igf.db3d.dbms.geom.MBB3D, int, java.util.Set);
  protected de.uos.igf.db3d.dbms.util.SAM$NNResult[] nNNSearch(int, de.uos.igf.db3d.dbms.geom.Point3D);
  protected void retrieveAll(java.util.Set);
  protected int findEntryIndex(java.lang.Object);
  protected de.uos.igf.db3d.dbms.util.RStar$Node findNode(java.lang.Object, de.uos.igf.db3d.dbms.geom.MBB3D);
  protected de.uos.igf.db3d.dbms.util.RStar$Node chooseSubtree(de.uos.igf.db3d.dbms.geom.MBB3D, int, int);
  protected boolean append(de.uos.igf.db3d.dbms.util.RStar$Entry);
  protected java.util.List remove(int);
  protected void adjustNode_4remove(java.util.List, java.util.Set);
  protected boolean adjustNode(boolean[]);
  protected de.uos.igf.db3d.dbms.geom.MBB3D computeNodeMBB();
  protected boolean isLeaf();
  public void printRec(java.io.PrintStream, int);
  public java.lang.String toString();
}
Compiled from "RStar.java"
final class de.uos.igf.db3d.dbms.util.RStar$Node$ABL implements java.lang.Comparable {
  final de.uos.igf.db3d.dbms.util.RStar$Node this$1;
  public int compareTo(java.lang.Object);
  de.uos.igf.db3d.dbms.util.RStar$Node$ABL(de.uos.igf.db3d.dbms.util.RStar$Node, de.uos.igf.db3d.dbms.util.RStar$Node, double, de.uos.igf.db3d.dbms.util.RStar$1);
  static double access$100(de.uos.igf.db3d.dbms.util.RStar$Node$ABL);
  static de.uos.igf.db3d.dbms.util.RStar$Node access$200(de.uos.igf.db3d.dbms.util.RStar$Node$ABL);
}
Compiled from "SAM.java"
public interface de.uos.igf.db3d.dbms.util.SAM extends java.io.Serializable {
  public abstract int getCount();
  public abstract de.uos.igf.db3d.dbms.geom.MBB3D getMBB();
  public abstract java.util.Set getEntries();
  public abstract boolean insert(de.uos.igf.db3d.dbms.structure.GeoObj);
  public abstract boolean remove(de.uos.igf.db3d.dbms.structure.GeoObj);
  public abstract java.util.Set intersectsStrict(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract java.util.Set intersects(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract java.util.Set containsStrict(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract java.util.Set contains(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract java.util.Set insideStrict(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract java.util.Set inside(de.uos.igf.db3d.dbms.geom.MBB3D);
  public abstract java.util.Set contains(de.uos.igf.db3d.dbms.geom.Point3D);
  public abstract de.uos.igf.db3d.dbms.util.SAM$NNResult[] nearest(int, de.uos.igf.db3d.dbms.geom.Point3D);
}
Compiled from "SAM.java"
public interface de.uos.igf.db3d.dbms.util.SAM$NNResult {
  public abstract double getDistance();
  public abstract java.lang.Object getObjectRef();
}
Compiled from "SegmentServices.java"
public class de.uos.igf.db3d.dbms.util.SegmentServices {
  java.util.HashMap<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D> points;
  java.util.HashMap<de.uos.igf.db3d.dbms.geom.Point3D, java.lang.Integer> pointIDs;
  java.util.HashMap<java.lang.Integer, int[]> segments;
  java.util.HashMap<java.lang.Integer, java.lang.Integer> components;
  public de.uos.igf.db3d.dbms.util.SegmentServices();
  public void initForPointClouds(de.uos.igf.db3d.dbms.model3d.SegmentNet3D);
  public void initFor4DPointClouds(java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>, java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>);
  public java.util.HashMap<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D> getPoints();
  public java.util.HashMap<de.uos.igf.db3d.dbms.geom.Point3D, java.lang.Integer> getPointIDs();
  public java.util.HashMap<java.lang.Integer, int[]> getSegments();
  public java.util.HashMap<java.lang.Integer, java.lang.Integer> getComponents();
  public java.util.HashMap<java.lang.Integer, java.lang.String> getAttributeAsColor(java.lang.String);
}
Compiled from "TetrahedronServices.java"
public class de.uos.igf.db3d.dbms.util.TetrahedronServices {
  java.util.HashMap<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D> points;
  java.util.HashMap<de.uos.igf.db3d.dbms.geom.Point3D, java.lang.Integer> pointIDs;
  java.util.HashMap<java.lang.Integer, int[]> tetrahedrons;
  java.util.HashMap<java.lang.Integer, java.lang.Integer> components;
  public de.uos.igf.db3d.dbms.util.TetrahedronServices();
  public void initForPointClouds(de.uos.igf.db3d.dbms.model3d.TetrahedronNet3D);
  public void initFor4DPointClouds(java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>, java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>);
  public java.util.HashMap<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D> getPoints();
  public java.util.HashMap<de.uos.igf.db3d.dbms.geom.Point3D, java.lang.Integer> getPointIDs();
  public java.util.HashMap<java.lang.Integer, int[]> getTetrahedrons();
  public java.util.HashMap<java.lang.Integer, java.lang.Integer> getComponents();
  public java.util.HashMap<java.lang.Integer, java.lang.String> getAttributeAsColor(java.lang.String);
  public void createBoundaryElements(de.uos.igf.db3d.dbms.newModel4d.TetrahedronNet4D, java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>, java.util.Date);
}
Compiled from "TriangleServices.java"
public class de.uos.igf.db3d.dbms.util.TriangleServices {
  java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D> points;
  java.util.Map<de.uos.igf.db3d.dbms.geom.Point3D, java.lang.Integer> pointIDs;
  java.util.Map<java.lang.Integer, int[]> triangles;
  java.util.Map<java.lang.Integer, java.lang.Integer> components;
  java.util.Map<java.lang.Integer, java.util.LinkedList<de.uos.igf.db3d.dbms.geom.Triangle3D>> pointToTriangle;
  java.util.HashSet<de.uos.igf.db3d.dbms.geom.Segment3D> segments;
  public de.uos.igf.db3d.dbms.util.TriangleServices();
  public void initForPointClouds(de.uos.igf.db3d.dbms.model3d.TriangleNet3D);
  public void initForProgressiveMeshes(de.uos.igf.db3d.dbms.model3d.TriangleNet3D);
  public void initFor4DPointCloud(java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.newModel4d.Element4D>, java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>);
  public void createBoundaryElements(de.uos.igf.db3d.dbms.newModel4d.TriangleNet4D, java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D>, java.util.Date);
  public java.util.Map<java.lang.Integer, de.uos.igf.db3d.dbms.geom.Point3D> getPoints();
  public java.util.Map<de.uos.igf.db3d.dbms.geom.Point3D, java.lang.Integer> getPointIDs();
  public java.util.Map<java.lang.Integer, int[]> getTriangles();
  public java.util.Map<java.lang.Integer, java.lang.Integer> getComponents();
  public java.util.Map<java.lang.Integer, java.util.LinkedList<de.uos.igf.db3d.dbms.geom.Triangle3D>> getpointToTriangles();
  public java.util.Set<de.uos.igf.db3d.dbms.geom.Segment3D> getSegments();
  public java.util.HashMap<java.lang.Integer, java.lang.String> getAttributeAsColor(java.lang.String);
}
Compiled from "AllCoreApiDb3dTestCases.java"
public class de.uos.igf.db3d.junittests.AllCoreApiDb3dTestCases {
  public de.uos.igf.db3d.junittests.AllCoreApiDb3dTestCases();
  public static junit.framework.Test suite();
}
Compiled from "TestConstants.java"
public interface de.uos.igf.db3d.junittests.dbms.TestConstants {
  public static final double EPSILON;
  public static final java.lang.String USERPATH;
}
Compiled from "Utils.java"
public class de.uos.igf.db3d.junittests.dbms.Utils {
  public de.uos.igf.db3d.junittests.dbms.Utils();
  public static java.lang.String getText(de.uos.igf.db3d.dbms.geom.SimpleGeoObj);
  public static java.lang.String getText(de.uos.igf.db3d.dbms.geom.Rectangle3D);
  static {};
}
Compiled from "Point3DTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.geom.Point3DTestCase extends junit.framework.TestCase {
  public static final de.uos.igf.db3d.dbms.geom.Point3D P;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P1;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P2;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P3;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P4;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P5;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P6;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P7;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P8;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P9;
  public static final java.lang.String[][] attributesArray;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P11;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P12;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P13;
  de.uos.igf.db3d.dbms.geom.ScalarOperator scalarOp;
  de.uos.igf.db3d.dbms.geom.Line3D LINE1;
  de.uos.igf.db3d.dbms.geom.Plane3D PLANE1;
  de.uos.igf.db3d.dbms.geom.Plane3D PLANE2;
  de.uos.igf.db3d.dbms.geom.Segment3D SEG1;
  public de.uos.igf.db3d.junittests.dbms.geom.Point3DTestCase();
  public void setUp() throws java.lang.Exception;
  public void testIntersectsPlane3D();
  public void testIntersectsLine3D();
  public void testIntersectionPlane3D();
  public void testIntersectionLine3D();
  public void testProjectionPlane3D();
  public void testProjectionLine3D();
  public void testProjectionSegment3D();
  public void testEuclideanDistanceSqrPoint3D();
  public void testEuclideanDistancePoint3D();
  public void testIsEqualEquivalentable();
  public void testSetAttribute();
  public void testGetAttributeValue();
  public void testAttributesConstructor();
  public void tearDown() throws java.lang.Exception;
  static {};
}
Compiled from "SegmentTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.geom.SegmentTestCase extends junit.framework.TestCase {
  public de.uos.igf.db3d.junittests.dbms.geom.SegmentTestCase();
  public void testEquals();
  public void testIntersection();
  public void testDisjunctNetComponent() throws de.uos.igf.db3d.dbms.api.UpdateException;
}
Compiled from "Tetrahedron3DTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.geom.Tetrahedron3DTestCase extends junit.framework.TestCase {
  public de.uos.igf.db3d.junittests.dbms.geom.Tetrahedron3DTestCase();
  public void setUp() throws java.lang.Exception;
  public void testIntersectionResult();
  public void tearDown() throws java.lang.Exception;
}
Compiled from "TetrahedronTriangle3DTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.geom.TetrahedronTriangle3DTestCase extends junit.framework.TestCase {
  public de.uos.igf.db3d.junittests.dbms.geom.TetrahedronTriangle3DTestCase();
  public void setUp() throws java.lang.Exception;
  public void testIntersectionResult();
  public void tearDown() throws java.lang.Exception;
}
Compiled from "Triangle3DTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.geom.Triangle3DTestCase extends junit.framework.TestCase {
  public static final de.uos.igf.db3d.dbms.geom.Point3D P1;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P2;
  public static final de.uos.igf.db3d.dbms.geom.Point3D P3;
  public static final de.uos.igf.db3d.dbms.geom.ScalarOperator sop;
  public static final de.uos.igf.db3d.dbms.geom.Triangle3D T1;
  public static final de.uos.igf.db3d.dbms.geom.Triangle3D T2;
  public static final java.lang.String[][] attributesArray;
  public static final de.uos.igf.db3d.dbms.geom.Triangle3D T3;
  public static final de.uos.igf.db3d.dbms.geom.Triangle3D T4;
  public static final de.uos.igf.db3d.dbms.geom.Triangle3D T5;
  public static final de.uos.igf.db3d.dbms.geom.Triangle3D T6;
  public de.uos.igf.db3d.junittests.dbms.geom.Triangle3DTestCase();
  public void setUp() throws java.lang.Exception;
  public void testIntersectionTriangleSegment();
  public void testIntersectionTriangleTriangle();
  public void tearDown() throws java.lang.Exception;
  public void testSetAttribute();
  public void testGetAttributeValue();
  public void testAttributesConstructor();
  static {};
}
Compiled from "Vector3DTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.geom.Vector3DTestCase extends junit.framework.TestCase {
  public de.uos.igf.db3d.junittests.dbms.geom.Vector3DTestCase();
  public void testCosine1();
  public void testCosine2();
  public void testCosine3();
  public void testCosine4();
  public void testCosine5();
  public void testCosine6();
  public void testCosine7();
  public void testCosine8();
  public void testCosine9();
  public void testCosine10();
  public void testCosine11();
}
Compiled from "Wireframe3DTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.geom.Wireframe3DTestCase extends junit.framework.TestCase {
  public de.uos.igf.db3d.junittests.dbms.geom.Wireframe3DTestCase();
  public void testGetTriangulated();
}
Compiled from "SegmentElt3DTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.model3d.SegmentElt3DTestCase extends junit.framework.TestCase {
  public de.uos.igf.db3d.junittests.dbms.model3d.SegmentElt3DTestCase();
  public void setUp() throws java.lang.Exception;
  public void testNeighbourshipSimple();
  public void tearDown() throws java.lang.Exception;
  static {};
}
Compiled from "SegmentNet3DCompTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.model3d.SegmentNet3DCompTestCase extends junit.framework.TestCase {
  public de.uos.igf.db3d.junittests.dbms.model3d.SegmentNet3DCompTestCase();
  public void testAddSegmentElt() throws de.uos.igf.db3d.dbms.api.NameNotUniqueException, de.uos.igf.db3d.dbms.api.UpdateException;
}
Compiled from "TriangleElt3DTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.model3d.TriangleElt3DTestCase extends junit.framework.TestCase {
  public de.uos.igf.db3d.junittests.dbms.model3d.TriangleElt3DTestCase();
  public void setUp() throws java.lang.Exception;
  public void tearDown() throws java.lang.Exception;
  static {};
}
Compiled from "TriangleNet3DCompTestCase.java"
public class de.uos.igf.db3d.junittests.dbms.model3d.TriangleNet3DCompTestCase extends junit.framework.TestCase {
  public de.uos.igf.db3d.junittests.dbms.model3d.TriangleNet3DCompTestCase();
  public void testElementReferences() throws de.uos.igf.db3d.dbms.api.NameNotUniqueException;
}
Compiled from "DB3DLogger.java"
public final class de.uos.igf.db3d.resources.DB3DLogger {
  public static java.util.logging.Logger logger;
  public static final java.lang.String logFolderString;
  public de.uos.igf.db3d.resources.DB3DLogger();
  public static void reactivateConsoleOutput();
  public static void setQuiet();
  static {};
}
Compiled from "DB3DProperties.java"
public final class de.uos.igf.db3d.resources.DB3DProperties {
  public static void store(java.lang.String) throws java.io.IOException;
  public static void store() throws java.io.IOException;
  public static java.lang.String getProperty(java.lang.String);
  public static java.lang.Object setProperty(java.lang.String, java.lang.String);
  static {};
}
Compiled from "DB3DLang.java"
public final class de.uos.igf.db3d.resources.i18n.DB3DLang {
  public static final java.lang.String qualClassName;
  public static boolean setFromPropertyFile();
  public static void setLocale(java.util.Locale);
  public static java.util.ResourceBundle getBundle();
  public static java.lang.String getString(java.lang.String);
  static {};
}
