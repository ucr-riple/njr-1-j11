Compiled from "Color.java"
public class nz.net.initial3d.Color {
  public static final nz.net.initial3d.Color WHITE;
  public static final nz.net.initial3d.Color BLACK;
  public static final nz.net.initial3d.Color RED;
  public static final nz.net.initial3d.Color GREEN;
  public static final nz.net.initial3d.Color BLUE;
  public static final nz.net.initial3d.Color YELLOW;
  public static final nz.net.initial3d.Color CYAN;
  public static final nz.net.initial3d.Color MAGENTA;
  public static final nz.net.initial3d.Color ORANGE;
  public final float a;
  public final float r;
  public final float g;
  public final float b;
  public static nz.net.initial3d.Color fromHSB(double, double, double);
  public static nz.net.initial3d.Color fromHSL(double, double, double);
  public nz.net.initial3d.Color(float, float, float, float);
  public nz.net.initial3d.Color(float, float, float);
  public nz.net.initial3d.Color(double, double, double, double);
  public nz.net.initial3d.Color(double, double, double);
  public nz.net.initial3d.Color(int);
  public int toARGB();
  public nz.net.initial3d.Color withAlpha(float);
  public nz.net.initial3d.Color withAlpha(double);
  public nz.net.initial3d.Color withRed(float);
  public nz.net.initial3d.Color withRed(double);
  public nz.net.initial3d.Color withGreen(float);
  public nz.net.initial3d.Color withGreen(double);
  public nz.net.initial3d.Color withBlue(float);
  public nz.net.initial3d.Color withBlue(double);
  static {};
}
Compiled from "FrameBuffer.java"
public abstract class nz.net.initial3d.FrameBuffer {
  public nz.net.initial3d.FrameBuffer();
  public abstract void attachBuffer(int, nz.net.initial3d.Texture2D);
  public abstract void attachBuffer(int, int[], int, int);
  public void attachBuffer(int, java.awt.image.BufferedImage);
  public abstract void detachBuffer(int);
  public abstract boolean hasBuffer(int);
}
Compiled from "GeometryBuffer.java"
public abstract class nz.net.initial3d.GeometryBuffer {
  public static final int POINTS;
  public static final int LINE_STRIPS;
  public static final int POLYGONS;
  public nz.net.initial3d.GeometryBuffer();
  public abstract int mode();
  public abstract int count();
  public abstract void clear();
  public abstract void add(int, int, int, int, int);
  public abstract void add(int[], int[], int[], int[], int[]);
}
Compiled from "I3DException.java"
public class nz.net.initial3d.I3DException extends java.lang.RuntimeException {
  public nz.net.initial3d.I3DException();
  public nz.net.initial3d.I3DException(java.lang.String);
  public nz.net.initial3d.I3DException(java.lang.Throwable);
  public nz.net.initial3d.I3DException(java.lang.String, java.lang.Throwable);
}
Compiled from "Initial3D.java"
public abstract class nz.net.initial3d.Initial3D {
  public static final int ZERO;
  public static final int NONE;
  public static final int ONE;
  public static final int SCISSOR_TEST;
  public static final int ALPHA_TEST;
  public static final int DEPTH_TEST;
  public static final int STENCIL_TEST;
  public static final int CULL_FACE;
  public static final int BLEND;
  public static final int FOG;
  public static final int LIGHTING;
  public static final int TWO_SIDED_LIGHTING;
  public static final int TEXTURE_2D;
  public static final int MIPMAPS;
  public static final int COLOR_SUM;
  public static final int SEPARATE_SPECULAR;
  public static final int LIGHT0;
  public static final int LIGHT1;
  public static final int LIGHT2;
  public static final int LIGHT3;
  public static final int LIGHT4;
  public static final int LIGHT5;
  public static final int LIGHT6;
  public static final int LIGHT7;
  public static final int LIGHT_MAX;
  public static final int CLIP_PLANE0;
  public static final int CLIP_PLANE1;
  public static final int CLIP_PLANE2;
  public static final int CLIP_PLANE3;
  public static final int CLIP_PLANE_MAX;
  public static final int BUFFER_COLOR0;
  public static final int BUFFER_COLOR1;
  public static final int BUFFER_Z;
  public static final int BUFFER_STENCIL;
  public static final int BUFFER_ID;
  public static final int FLAT;
  public static final int SMOOTH;
  public static final int PHONG;
  public static final int SRC_COLOR;
  public static final int ONE_MINUS_SRC_COLOR;
  public static final int DST_COLOR;
  public static final int ONE_MINUS_DST_COLOR;
  public static final int SRC_ALPHA;
  public static final int ONE_MINUS_SRC_ALPHA;
  public static final int DST_ALPHA;
  public static final int ONE_MINUS_DST_ALPHA;
  public static final int FUNC_ADD;
  public static final int FUNC_SUBTRACT;
  public static final int FUNC_REVERSE_SUBTRACT;
  public static final int FUNC_MIN;
  public static final int FUNC_MAX;
  public static final int NEVER;
  public static final int LESS;
  public static final int LEQUAL;
  public static final int GREATER;
  public static final int GEQUAL;
  public static final int EQUAL;
  public static final int NOTEQUAL;
  public static final int ALWAYS;
  public static final int KEEP;
  public static final int REPLACE;
  public static final int INCR;
  public static final int INCR_WRAP;
  public static final int DECR;
  public static final int DECR_WRAP;
  public static final int INVERT;
  public static final int FRONT;
  public static final int BACK;
  public static final int FRONT_AND_BACK;
  public static final int AMBIENT;
  public static final int DIFFUSE;
  public static final int SPECULAR;
  public static final int EMISSION;
  public static final int SHININESS;
  public static final int OPACITY;
  public static final int POSITION;
  public static final int SPOT_DIRECTION;
  public static final int CONSTANT_ATTENUATION;
  public static final int LINEAR_ATTENUATION;
  public static final int QUADRATIC_ATTENUATION;
  public static final int SPOT_CUTOFF;
  public static final int SPOT_EXPONENT;
  public static final int EFFECT_RADIUS;
  public static final int TEXTURE_2D_KD;
  public static final int TEXTURE_2D_KS;
  public static final int TEXTURE_2D_KE;
  public static final int POINT;
  public static final int LINE;
  public static final int FILL;
  public static final int ORTHOGRAPHIC;
  public static final int PERSPECTIVE;
  public static final int VERTEX_POSITION;
  public static final int VERTEX_NORMAL;
  public static final int VERTEX_COLOR0;
  public static final int VERTEX_COLOR1;
  public static final int VERTEX_TEXCOORD;
  public static final int FOG_COLOR;
  public static final int MODELVIEW;
  public static final int PROJECTION;
  public static final int POINTS;
  public static final int LINES;
  public static final int LINE_STRIP;
  public static final int LINE_LOOP;
  public static final int TRIANGLES;
  public static final int TRIANGLE_STRIP;
  public static final int TRIANGLE_FAN;
  public static final int QUADS;
  public static final int QUAD_STRIP;
  public static final int POLYGON;
  public nz.net.initial3d.Initial3D();
  public abstract void pushState();
  public abstract void popState();
  public int queryEnum(java.lang.String);
  public nz.net.initial3d.Initial3D$Method queryMethod(java.lang.String, java.lang.Class<?>...);
  public abstract nz.net.initial3d.VectorBuffer createVectorBuffer();
  public abstract nz.net.initial3d.GeometryBuffer createGeometryBuffer(int);
  public abstract nz.net.initial3d.FrameBuffer createFrameBuffer();
  public abstract void bindFrameBuffer(nz.net.initial3d.FrameBuffer);
  public abstract nz.net.initial3d.FrameBuffer getFrameBuffer();
  public abstract nz.net.initial3d.Texture2D createTexture2D(int, int);
  public abstract void bindTexture(int, nz.net.initial3d.Texture2D);
  public abstract void enable(int...);
  public abstract void disable(int...);
  public abstract boolean isEnabled(int);
  public abstract void projectionMode(int);
  public abstract void polygonMode(int, int);
  public abstract void shadeModel(int);
  public abstract void viewport(int, int, int, int);
  public abstract void clear(int...);
  public abstract void bindVertexBuffer(int, nz.net.initial3d.VectorBuffer);
  public abstract void drawGeometry(nz.net.initial3d.GeometryBuffer, int, int);
  public abstract void begin(int);
  public abstract void vertex(double, double, double);
  public void vertex(nz.net.initial3d.Vec3);
  public abstract void normal(double, double, double);
  public void normal(nz.net.initial3d.Vec3);
  public abstract void color(double, double, double, double);
  public void color(double, double, double);
  public void color(nz.net.initial3d.Color);
  public void color(nz.net.initial3d.Color, double);
  public abstract void secondaryColor(double, double, double, double);
  public void secondaryColor(double, double, double);
  public void secondaryColor(nz.net.initial3d.Color);
  public void secondaryColor(nz.net.initial3d.Color, double);
  public void texCoord(double);
  public void texCoord(double, double);
  public void texCoord(double, double, double);
  public abstract void texCoord(double, double, double, double);
  public void texCoord(nz.net.initial3d.Vec3);
  public void texCoord(nz.net.initial3d.Vec3, double);
  public void texCoord(nz.net.initial3d.Vec4);
  public abstract void end();
  public abstract void material(int, int, double);
  public abstract void material(int, int, double, double, double, double);
  public void material(int, int, double, double, double);
  public void material(int, int, nz.net.initial3d.Color);
  public abstract void blendFunc(int, int, int);
  public abstract void alphaFunc(int, double);
  public abstract void depthFunc(int);
  public void stencilFunc(int, int, int);
  public abstract void stencilFuncSeparate(int, int, int, int);
  public void stencilOp(int, int, int);
  public abstract void stencilOpSeparate(int, int, int, int);
  public abstract void light(int, int, double);
  public abstract void light(int, int, double, double, double, double);
  public void light(int, int, double, double, double);
  public void light(int, int, nz.net.initial3d.Color);
  public void light(int, int, nz.net.initial3d.Vec4);
  public void light(int, int, nz.net.initial3d.Vec3);
  public abstract void sceneAmbient(double, double, double, double);
  public void sceneAmbient(double, double, double);
  public void sceneAmbient(nz.net.initial3d.Color);
  public abstract void fog(int, double);
  public abstract void fog(int, double, double, double, double);
  public void fog(int, double, double, double);
  public void fog(int, nz.net.initial3d.Color);
  public abstract void cullFace(int);
  public abstract void nearClip(double);
  public abstract void farCull(double);
  public abstract void finish();
  public abstract void matrixMode(int);
  public abstract nz.net.initial3d.Vec3 transformOne(nz.net.initial3d.Vec3);
  public abstract nz.net.initial3d.Vec4 transformOne(nz.net.initial3d.Vec4);
  public abstract void pushMatrix();
  public abstract void popMatrix();
  public void loadIdentity();
  public void pushIdentity();
  public abstract void loadMatrix(nz.net.initial3d.Mat4);
  public abstract void multMatrix(nz.net.initial3d.Mat4);
  public abstract nz.net.initial3d.Mat4 getMatrix();
  public void translate(nz.net.initial3d.Vec3);
  public void translate(double, double, double);
  public void scale(double);
  public void scale(nz.net.initial3d.Vec3);
  public void scale(double, double, double);
  public void rotate(nz.net.initial3d.Quat);
  public void rotate(double, nz.net.initial3d.Vec3);
  public void rotate(double, double, double, double);
}
Compiled from "Initial3D.java"
class nz.net.initial3d.Initial3D$1 implements nz.net.initial3d.Initial3D$Method {
  final java.lang.reflect.Method val$m;
  final nz.net.initial3d.Initial3D this$0;
  nz.net.initial3d.Initial3D$1(nz.net.initial3d.Initial3D, java.lang.reflect.Method);
  public java.lang.Object call(java.lang.Object...);
}
Compiled from "Initial3D.java"
public interface nz.net.initial3d.Initial3D$Method {
  public abstract java.lang.Object call(java.lang.Object...);
}
Compiled from "Mat4.java"
public final class nz.net.initial3d.Mat4 implements java.lang.Cloneable {
  public nz.net.initial3d.Mat4();
  public nz.net.initial3d.Mat4(double);
  public nz.net.initial3d.Mat4 clone();
  public double get(int, int);
  public nz.net.initial3d.Mat4 set(int, int, double);
  public nz.net.initial3d.Mat4 set(nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 setZero();
  public nz.net.initial3d.Mat4 setIden();
  public nz.net.initial3d.Mat4 rowSwap(int, int);
  public nz.net.initial3d.Mat4 rowAdd(int, int, double);
  public nz.net.initial3d.Mat4 rowSub(int, int, double);
  public nz.net.initial3d.Mat4 rowMul(int, double);
  public nz.net.initial3d.Mat4 rowDiv(int, double);
  public static nz.net.initial3d.Mat4 add(nz.net.initial3d.Mat4, nz.net.initial3d.Mat4, nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 add(nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 setAdd(nz.net.initial3d.Mat4);
  public static nz.net.initial3d.Mat4 neg(nz.net.initial3d.Mat4, nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 neg();
  public nz.net.initial3d.Mat4 setNeg();
  public static nz.net.initial3d.Mat4 sub(nz.net.initial3d.Mat4, nz.net.initial3d.Mat4, nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 sub(nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 setSub(nz.net.initial3d.Mat4);
  public static nz.net.initial3d.Mat4 mul(nz.net.initial3d.Mat4, nz.net.initial3d.Mat4, double);
  public nz.net.initial3d.Mat4 mul(double);
  public nz.net.initial3d.Mat4 setMul(double);
  public static nz.net.initial3d.Mat4 mul(nz.net.initial3d.Mat4, nz.net.initial3d.Mat4, nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 mul(nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 setMul(nz.net.initial3d.Mat4);
  public nz.net.initial3d.Vec4 mul(nz.net.initial3d.Vec4);
  public nz.net.initial3d.Vec3 mul(nz.net.initial3d.Vec3);
  public double det();
  public static nz.net.initial3d.Mat4 xpose(nz.net.initial3d.Mat4, nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 xpose();
  public nz.net.initial3d.Mat4 setXpose();
  public static nz.net.initial3d.Mat4 invGJ(nz.net.initial3d.Mat4, nz.net.initial3d.Mat4, nz.net.initial3d.Mat4);
  public static nz.net.initial3d.Mat4 inv(nz.net.initial3d.Mat4, nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 inv();
  public nz.net.initial3d.Mat4 setInv();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public static nz.net.initial3d.Mat4 perspectiveFOV(double, double, double, double);
  public static nz.net.initial3d.Mat4 shear(int, int, double);
  public static nz.net.initial3d.Mat4 translate(double, double, double);
  public static nz.net.initial3d.Mat4 translate(nz.net.initial3d.Vec3);
  public static nz.net.initial3d.Mat4 scale(double, double, double);
  public static nz.net.initial3d.Mat4 scale(nz.net.initial3d.Vec3);
  public static nz.net.initial3d.Mat4 scale(double);
  public static nz.net.initial3d.Mat4 rotateX(double);
  public static nz.net.initial3d.Mat4 rotateY(double);
  public static nz.net.initial3d.Mat4 rotateZ(double);
  public static nz.net.initial3d.Mat4 rotate(nz.net.initial3d.Quat);
  public static nz.net.initial3d.Mat4 rotate(nz.net.initial3d.Vec3);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "Quat.java"
public final class nz.net.initial3d.Quat {
  public static final nz.net.initial3d.Quat zero;
  public static final nz.net.initial3d.Quat one;
  public static final nz.net.initial3d.Quat i;
  public static final nz.net.initial3d.Quat j;
  public static final nz.net.initial3d.Quat k;
  public final double w;
  public final double x;
  public final double y;
  public final double z;
  public nz.net.initial3d.Quat(double, double, double, double);
  public nz.net.initial3d.Quat(double, nz.net.initial3d.Vec3);
  public nz.net.initial3d.Quat(nz.net.initial3d.Vec3);
  public double norm();
  public nz.net.initial3d.Quat scale(double);
  public nz.net.initial3d.Quat unit();
  public nz.net.initial3d.Quat conj();
  public nz.net.initial3d.Quat inv();
  public nz.net.initial3d.Quat mul(nz.net.initial3d.Quat);
  public nz.net.initial3d.Quat mul(double, double, double, double);
  public nz.net.initial3d.Quat lmul(nz.net.initial3d.Quat);
  public nz.net.initial3d.Quat lmul(double, double, double, double);
  public nz.net.initial3d.Vec3 rot(nz.net.initial3d.Vec3);
  public double angle();
  public nz.net.initial3d.Vec3 axis();
  public nz.net.initial3d.Quat pow(double);
  public nz.net.initial3d.Quat exp();
  public nz.net.initial3d.Quat log();
  public nz.net.initial3d.Quat add(nz.net.initial3d.Quat);
  public nz.net.initial3d.Quat sub(nz.net.initial3d.Quat);
  public double dist(nz.net.initial3d.Quat);
  public static final nz.net.initial3d.Quat slerp(nz.net.initial3d.Quat, nz.net.initial3d.Quat, double);
  public static final nz.net.initial3d.Quat nlerp(nz.net.initial3d.Quat, nz.net.initial3d.Quat, double);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  static {};
}
Compiled from "Texture2D.java"
public abstract class nz.net.initial3d.Texture2D {
  public nz.net.initial3d.Texture2D();
  public static int sizePOT(int);
  public abstract int sizeU();
  public abstract int sizeV();
  public abstract void setMipMapsEnabled(boolean);
  public abstract boolean getMipMapsEnabled();
  public abstract void setMipMapFloor(int);
  public abstract int getMipMapFloor();
  public abstract void createMipMaps();
  public int getTexel(int, int);
  public abstract int getTexel(int, int, boolean);
  public float getTexelComponentFloat(int, int, nz.net.initial3d.Texture2D$Channel);
  public abstract float getTexelComponentFloat(int, int, nz.net.initial3d.Texture2D$Channel, boolean);
  public int getTexelComponent(int, int, nz.net.initial3d.Texture2D$Channel);
  public abstract int getTexelComponent(int, int, nz.net.initial3d.Texture2D$Channel, boolean);
  public void setTexel(int, int, int);
  public abstract void setTexel(int, int, int, boolean);
  public void setTexelComponentFloat(int, int, nz.net.initial3d.Texture2D$Channel, float);
  public abstract void setTexelComponentFloat(int, int, nz.net.initial3d.Texture2D$Channel, float, boolean);
  public void setTexelComponent(int, int, nz.net.initial3d.Texture2D$Channel, int);
  public abstract void setTexelComponent(int, int, nz.net.initial3d.Texture2D$Channel, int, boolean);
  public abstract void clear();
  public void drawImage(int, int, java.awt.image.BufferedImage, int, int, int, int, boolean);
  public void drawImage(int, int, int, int, java.awt.image.BufferedImage, int, int, int, int, boolean);
  public void drawImage(java.awt.image.BufferedImage);
}
Compiled from "Texture2D.java"
public final class nz.net.initial3d.Texture2D$Channel extends java.lang.Enum<nz.net.initial3d.Texture2D$Channel> {
  public static final nz.net.initial3d.Texture2D$Channel ALPHA;
  public static final nz.net.initial3d.Texture2D$Channel RED;
  public static final nz.net.initial3d.Texture2D$Channel GREEN;
  public static final nz.net.initial3d.Texture2D$Channel BLUE;
  public static nz.net.initial3d.Texture2D$Channel[] values();
  public static nz.net.initial3d.Texture2D$Channel valueOf(java.lang.String);
  static {};
}
Compiled from "Vec3.java"
public final class nz.net.initial3d.Vec3 {
  public static final nz.net.initial3d.Vec3 zero;
  public static final nz.net.initial3d.Vec3 one;
  public static final nz.net.initial3d.Vec3 i;
  public static final nz.net.initial3d.Vec3 j;
  public static final nz.net.initial3d.Vec3 k;
  public final double x;
  public final double y;
  public final double z;
  public nz.net.initial3d.Vec3(double, double, double);
  public static final nz.net.initial3d.Vec3 random(nz.net.initial3d.Vec3, nz.net.initial3d.Vec3);
  public static final nz.net.initial3d.Vec3 planeNorm(nz.net.initial3d.Vec3, nz.net.initial3d.Vec3, nz.net.initial3d.Vec3);
  public static final nz.net.initial3d.Vec3 positiveExtremes(nz.net.initial3d.Vec3, nz.net.initial3d.Vec3);
  public static final nz.net.initial3d.Vec3 negativeExtremes(nz.net.initial3d.Vec3, nz.net.initial3d.Vec3);
  public nz.net.initial3d.Vec3 add(nz.net.initial3d.Vec3);
  public nz.net.initial3d.Vec3 add(double, double, double);
  public nz.net.initial3d.Vec3 sub(nz.net.initial3d.Vec3);
  public nz.net.initial3d.Vec3 sub(double, double, double);
  public nz.net.initial3d.Vec3 neg();
  public double dist(nz.net.initial3d.Vec3);
  public double dot(nz.net.initial3d.Vec3);
  public nz.net.initial3d.Vec3 cross(nz.net.initial3d.Vec3);
  public double crossMag(nz.net.initial3d.Vec3);
  public double inc(nz.net.initial3d.Vec3);
  public nz.net.initial3d.Vec3 mul(double);
  public nz.net.initial3d.Vec3 withMag(double);
  public double mag();
  public double invMag();
  public nz.net.initial3d.Vec3 unit();
  public nz.net.initial3d.Vec3 project(nz.net.initial3d.Vec3);
  public nz.net.initial3d.Vec3 reject(nz.net.initial3d.Vec3);
  public nz.net.initial3d.Vec3 withX(double);
  public nz.net.initial3d.Vec3 withY(double);
  public nz.net.initial3d.Vec3 withZ(double);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  static {};
}
Compiled from "Vec4.java"
public final class nz.net.initial3d.Vec4 {
  public final double x;
  public final double y;
  public final double z;
  public final double w;
  public nz.net.initial3d.Vec4(double, double, double, double);
  public nz.net.initial3d.Vec4(nz.net.initial3d.Vec3, double);
  public nz.net.initial3d.Vec4(nz.net.initial3d.Vec3);
  public nz.net.initial3d.Vec3 xyz();
  public nz.net.initial3d.Vec4 homogenise();
}
Compiled from "VectorBuffer.java"
public abstract class nz.net.initial3d.VectorBuffer {
  public nz.net.initial3d.VectorBuffer();
  public abstract int count();
  public abstract void clear();
  public abstract void add(double, double, double, double);
  public abstract nz.net.initial3d.Vec4 get(int);
  public void add(nz.net.initial3d.Vec3);
  public void add(nz.net.initial3d.Vec3, double);
  public void add(nz.net.initial3d.Vec4);
  public void add(nz.net.initial3d.Color);
}
Compiled from "SceneManager.java"
public class nz.net.initial3d.engine.SceneManager {
  public nz.net.initial3d.engine.SceneManager();
}
Compiled from "Buffer.java"
final class nz.net.initial3d.renderer.Buffer {
  public static nz.net.initial3d.renderer.Buffer alloc(int);
  public static nz.net.initial3d.renderer.Buffer alloc(int, int);
  public int getTag();
  public int getSize();
  public long getPointer();
  public void acquire();
  public void release();
  public <T> void putExtra(java.lang.String, T);
  public <T> T getExtra(java.lang.String);
  public int getInt(long);
  public long getLong(long);
  public float getFloat(long);
  public double getDouble(long);
  public void putInt(long, int);
  public void putLong(long, long);
  public void putFloat(long, float);
  public void putDouble(long, double);
  public java.lang.String toString();
  static {};
}
Compiled from "FrameBufferImpl.java"
final class nz.net.initial3d.renderer.FrameBufferImpl extends nz.net.initial3d.FrameBuffer {
  int viewport_x;
  int viewport_y;
  int viewport_w;
  int viewport_h;
  java.lang.Object obj_color0;
  long pColor0;
  int stride_color0;
  long pColor1;
  int stride_color1;
  long pZ;
  int stride_z;
  long pSZ;
  int stride_sz;
  long pZSign;
  long pStencil;
  int stride_stencil;
  long pID;
  int stride_id;
  long pFC;
  nz.net.initial3d.renderer.FrameBufferImpl();
  protected void finalize();
  int getZSign();
  void setZSign(int);
  public void attachBuffer(int, nz.net.initial3d.Texture2D);
  public void attachBuffer(int, int[], int, int);
  public void detachBuffer(int);
  public boolean hasBuffer(int);
  void viewport(int, int, int, int);
  void clear(int);
  void clearlines(java.lang.Object, long, int, int, int);
  void writeUnsafeState(long);
  static {};
}
Compiled from "GeometryBufferImpl.java"
final class nz.net.initial3d.renderer.GeometryBufferImpl extends nz.net.initial3d.GeometryBuffer {
  nz.net.initial3d.renderer.GeometryBufferImpl(int);
  public int mode();
  public int count();
  public void clear();
  public void add(int, int, int, int, int);
  public void add(int[], int[], int[], int[], int[]);
  int[] getData();
}
Compiled from "GeometryPipe.java"
final class nz.net.initial3d.renderer.GeometryPipe {
  static final int POINTS;
  static final int LINE_STRIPS;
  static final int POLYGONS;
  nz.net.initial3d.renderer.GeometryPipe();
  protected void finalize();
  void connectRasterPipe(nz.net.initial3d.renderer.RasterPipe);
  void finish();
  void feed(nz.net.initial3d.renderer.Initial3DImpl$State, int, int[], int, int);
  static {};
}
Compiled from "Initial3DImpl.java"
public final class nz.net.initial3d.renderer.Initial3DImpl extends nz.net.initial3d.Initial3D {
  public static final int ALPHAREF_RANDOM;
  public static final int AUTO_FLIP_ZSIGN;
  public static final int I3DX_FOG_A;
  public static final int I3DX_FOG_B;
  java.util.Stack<nz.net.initial3d.renderer.Initial3DImpl$State> state;
  public nz.net.initial3d.renderer.Initial3DImpl();
  public nz.net.initial3d.renderer.Initial3DImpl(int);
  protected void finalize();
  public void pushState();
  public void popState();
  public int queryEnum(java.lang.String);
  public nz.net.initial3d.Initial3D$Method queryMethod(java.lang.String, java.lang.Class<?>...);
  public nz.net.initial3d.VectorBuffer createVectorBuffer();
  public nz.net.initial3d.GeometryBuffer createGeometryBuffer(int);
  public nz.net.initial3d.FrameBuffer createFrameBuffer();
  public void bindFrameBuffer(nz.net.initial3d.FrameBuffer);
  public nz.net.initial3d.FrameBuffer getFrameBuffer();
  public nz.net.initial3d.Texture2D createTexture2D(int, int);
  public void bindTexture(int, nz.net.initial3d.Texture2D);
  public void enable(int...);
  public void disable(int...);
  public boolean isEnabled(int);
  public void projectionMode(int);
  public void polygonMode(int, int);
  public void shadeModel(int);
  public void viewport(int, int, int, int);
  public void clear(int...);
  public void flipZSign();
  public void bindVertexBuffer(int, nz.net.initial3d.VectorBuffer);
  public void drawGeometry(nz.net.initial3d.GeometryBuffer, int, int);
  public void begin(int);
  public void vertex(double, double, double);
  public void normal(double, double, double);
  public void color(double, double, double, double);
  public void secondaryColor(double, double, double, double);
  public void texCoord(double, double, double, double);
  public void end();
  public void material(int, int, double);
  public void material(int, int, double, double, double, double);
  public void blendFunc(int, int, int);
  public void alphaFunc(int, double);
  public void depthFunc(int);
  public void stencilFuncSeparate(int, int, int, int);
  public void stencilOpSeparate(int, int, int, int);
  public void light(int, int, double);
  public void light(int, int, double, double, double, double);
  public void sceneAmbient(double, double, double, double);
  public void fog(int, double);
  public void fog(int, double, double, double, double);
  public void initFog();
  public void cullFace(int);
  public void nearClip(double);
  public void farCull(double);
  public void finish();
  public void matrixMode(int);
  public nz.net.initial3d.Vec3 transformOne(nz.net.initial3d.Vec3);
  public nz.net.initial3d.Vec4 transformOne(nz.net.initial3d.Vec4);
  public void pushMatrix();
  public void popMatrix();
  public void loadMatrix(nz.net.initial3d.Mat4);
  public void multMatrix(nz.net.initial3d.Mat4);
  public nz.net.initial3d.Mat4 getMatrix();
  static nz.net.initial3d.renderer.FrameBufferImpl access$000(nz.net.initial3d.renderer.Initial3DImpl);
  static nz.net.initial3d.renderer.VectorBufferImpl access$100(nz.net.initial3d.renderer.Initial3DImpl);
  static nz.net.initial3d.renderer.VectorBufferImpl access$200(nz.net.initial3d.renderer.Initial3DImpl);
  static sun.misc.Unsafe access$300();
  static nz.net.initial3d.renderer.Texture2DImpl access$400(nz.net.initial3d.renderer.Initial3DImpl);
  static java.util.Map access$500();
  static nz.net.initial3d.renderer.GeometryPipe access$600(nz.net.initial3d.renderer.Initial3DImpl);
  static {};
}
Compiled from "Initial3DImpl.java"
class nz.net.initial3d.renderer.Initial3DImpl$1 implements nz.net.initial3d.Initial3D$Method {
  final java.lang.reflect.Method val$m;
  final nz.net.initial3d.renderer.Initial3DImpl this$0;
  nz.net.initial3d.renderer.Initial3DImpl$1(nz.net.initial3d.renderer.Initial3DImpl, java.lang.reflect.Method);
  public java.lang.Object call(java.lang.Object...);
}
Compiled from "Initial3DImpl.java"
class nz.net.initial3d.renderer.Initial3DImpl$State {
  final nz.net.initial3d.renderer.Buffer buf_base;
  final long pBase;
  nz.net.initial3d.renderer.FrameBufferImpl bound_framebuffer;
  nz.net.initial3d.renderer.VectorBufferImpl bound_vbo_v;
  nz.net.initial3d.renderer.VectorBufferImpl bound_vbo_vt;
  nz.net.initial3d.renderer.VectorBufferImpl bound_vbo_vn;
  nz.net.initial3d.renderer.VectorBufferImpl bound_vbo_c0;
  nz.net.initial3d.renderer.VectorBufferImpl bound_vbo_c1;
  int begin_mode;
  final nz.net.initial3d.renderer.VectorBufferImpl begin_vbo_v;
  final nz.net.initial3d.renderer.VectorBufferImpl begin_vbo_vt;
  final nz.net.initial3d.renderer.VectorBufferImpl begin_vbo_vn;
  final nz.net.initial3d.renderer.VectorBufferImpl begin_vbo_c0;
  final nz.net.initial3d.renderer.VectorBufferImpl begin_vbo_c1;
  final int[] protogeom;
  final int[] protoprim;
  int prim_next;
  int prim_count;
  int vert_next;
  int vert_count;
  final java.util.Stack<nz.net.initial3d.Mat4> modelview;
  final java.util.Stack<nz.net.initial3d.Mat4> projection;
  java.util.Stack<nz.net.initial3d.Mat4> matrix_active;
  int matrix_mode;
  final nz.net.initial3d.renderer.Initial3DImpl this$0;
  nz.net.initial3d.renderer.Initial3DImpl$State(nz.net.initial3d.renderer.Initial3DImpl);
  nz.net.initial3d.renderer.Initial3DImpl$State(nz.net.initial3d.renderer.Initial3DImpl, nz.net.initial3d.renderer.Initial3DImpl$State);
  protected void finalize();
  void bindFrameBuffer(nz.net.initial3d.FrameBuffer);
  nz.net.initial3d.FrameBuffer getFrameBuffer();
  void bindTexture(int, nz.net.initial3d.Texture2D);
  void enable(int...);
  void disable(int...);
  boolean isEnabled(int);
  void projectionMode(int);
  void polygonMode(int, int);
  void shadeModel(int);
  void viewport(int, int, int, int);
  void clear(int...);
  void flipZSign();
  void bindVertexBuffer(int, nz.net.initial3d.VectorBuffer);
  void drawGeometry(nz.net.initial3d.GeometryBuffer, int, int);
  void begin(int);
  void vertex(double, double, double);
  void normal(double, double, double);
  void color(double, double, double, double);
  void secondaryColor(double, double, double, double);
  void texCoord(double, double, double, double);
  void end();
  void material(int, int, double);
  void material(int, int, double, double, double, double);
  void blendFunc(int, int, int);
  void alphaFunc(int, double);
  void depthFunc(int);
  void stencilFuncSeparate(int, int, int, int);
  void stencilOpSeparate(int, int, int, int);
  void light(int, int, double);
  void light(int, int, double, double, double, double);
  void sceneAmbient(double, double, double, double);
  void fog(int, double);
  void fog(int, double, double, double, double);
  void initFog();
  void cullFace(int);
  void nearClip(double);
  void farCull(double);
  void finish();
  void matrixMode(int);
  nz.net.initial3d.Vec3 transformOne(nz.net.initial3d.Vec3);
  nz.net.initial3d.Vec4 transformOne(nz.net.initial3d.Vec4);
  void pushMatrix();
  void popMatrix();
  void loadMatrix(nz.net.initial3d.Mat4);
  void multMatrix(nz.net.initial3d.Mat4);
  nz.net.initial3d.Mat4 getMatrix();
}
Compiled from "OrthographicTriangleRasteriser.java"
public class nz.net.initial3d.renderer.OrthographicTriangleRasteriser {
  public nz.net.initial3d.renderer.OrthographicTriangleRasteriser();
}
Compiled from "OrthographicTriangleTexture2DRasteriser.java"
public class nz.net.initial3d.renderer.OrthographicTriangleTexture2DRasteriser {
  public nz.net.initial3d.renderer.OrthographicTriangleTexture2DRasteriser();
}
Compiled from "PerspectiveTriangleRasteriser.java"
public class nz.net.initial3d.renderer.PerspectiveTriangleRasteriser {
  public nz.net.initial3d.renderer.PerspectiveTriangleRasteriser();
}
Compiled from "PerspectiveTriangleTexture2DRasteriser.java"
public class nz.net.initial3d.renderer.PerspectiveTriangleTexture2DRasteriser {
  public nz.net.initial3d.renderer.PerspectiveTriangleTexture2DRasteriser();
}
Compiled from "RasterPipe.java"
final class nz.net.initial3d.renderer.RasterPipe {
  static final int POINTS;
  static final int LINES;
  static final int TRIANGLES;
  nz.net.initial3d.renderer.RasterPipe(int);
  protected void finalize();
  void feed(int, nz.net.initial3d.renderer.Buffer, long, int, java.lang.Object);
  void finish();
  static void access$000(nz.net.initial3d.renderer.RasterPipe, nz.net.initial3d.renderer.RasterPipe$Job);
  static void access$100(nz.net.initial3d.renderer.RasterPipe, nz.net.initial3d.renderer.RasterPipe$Job);
  static void access$200(nz.net.initial3d.renderer.RasterPipe, nz.net.initial3d.renderer.RasterPipe$Job);
}
Compiled from "RasterPipe.java"
class nz.net.initial3d.renderer.RasterPipe$Job {
  public final int mode;
  public final nz.net.initial3d.renderer.Buffer wb;
  public final long pPrim;
  public final int count;
  public final java.lang.Object obj_color0;
  final nz.net.initial3d.renderer.RasterPipe this$0;
  public nz.net.initial3d.renderer.RasterPipe$Job(nz.net.initial3d.renderer.RasterPipe, int, nz.net.initial3d.renderer.Buffer, long, int, java.lang.Object);
}
Compiled from "RasterPipe.java"
class nz.net.initial3d.renderer.RasterPipe$WorkerThread extends java.lang.Thread {
  final nz.net.initial3d.renderer.RasterPipe this$0;
  public nz.net.initial3d.renderer.RasterPipe$WorkerThread(nz.net.initial3d.renderer.RasterPipe);
  public void feed(nz.net.initial3d.renderer.RasterPipe$Job);
  public boolean isWaiting();
  public void finish();
  public void run();
}
Compiled from "Test.java"
public class nz.net.initial3d.renderer.Test {
  public nz.net.initial3d.renderer.Test();
  public static void main(java.lang.String[]);
}
Compiled from "Test2.java"
public class nz.net.initial3d.renderer.Test2 {
  public nz.net.initial3d.renderer.Test2();
  public static void main(java.lang.String[]);
}
Compiled from "Test2.java"
class nz.net.initial3d.renderer.Test2$Foo extends java.lang.Thread {
  public nz.net.initial3d.renderer.Test2$Foo();
  public void waitToBegin();
  public boolean feed(nz.net.initial3d.renderer.Buffer);
  public void run();
}
Compiled from "TestTex.java"
public class nz.net.initial3d.renderer.TestTex {
  public nz.net.initial3d.renderer.TestTex();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "TestTex.java"
final class nz.net.initial3d.renderer.TestTex$1 {
  nz.net.initial3d.renderer.TestTex$1();
  public java.lang.String toString();
}
Compiled from "TestTex.java"
final class nz.net.initial3d.renderer.TestTex$2 implements java.awt.event.KeyListener {
  final nz.net.initial3d.util.DisplayWindow val$win;
  nz.net.initial3d.renderer.TestTex$2(nz.net.initial3d.util.DisplayWindow);
  public void keyTyped(java.awt.event.KeyEvent);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
}
Compiled from "Texture2DImpl.java"
final class nz.net.initial3d.renderer.Texture2DImpl extends nz.net.initial3d.Texture2D {
  final long pTex;
  final int stride_tex;
  final long pTop;
  final int alloc;
  final int levelu_top;
  final int levelv_top;
  final int sizeu;
  final int sizev;
  static int levelOffset(int, int, int);
  static int texelOffset(int, int, int, int, int);
  nz.net.initial3d.renderer.Texture2DImpl(int, int);
  protected void finalize();
  public int sizeU();
  public int sizeV();
  public void setMipMapsEnabled(boolean);
  public boolean getMipMapsEnabled();
  public void setMipMapFloor(int);
  public int getMipMapFloor();
  public void createMipMaps();
  public int getTexel(int, int, boolean);
  public float getTexelComponentFloat(int, int, nz.net.initial3d.Texture2D$Channel, boolean);
  public int getTexelComponent(int, int, nz.net.initial3d.Texture2D$Channel, boolean);
  public void setTexel(int, int, int, boolean);
  public void setTexelComponentFloat(int, int, nz.net.initial3d.Texture2D$Channel, float, boolean);
  public void setTexelComponent(int, int, nz.net.initial3d.Texture2D$Channel, int, boolean);
  public void clear();
  public java.awt.image.BufferedImage extractAll();
  static {};
}
Compiled from "Texture2DImpl.java"
class nz.net.initial3d.renderer.Texture2DImpl$1 {
  static final int[] $SwitchMap$nz$net$initial3d$Texture2D$Channel;
  static {};
}
Compiled from "Type.java"
final class nz.net.initial3d.renderer.Type {
}
Compiled from "Type.java"
final class nz.net.initial3d.renderer.Type$clipfunc_t {
  static int SIZEOF();
  static int cx();
  static int cy();
  static int cz();
  static int cutoff();
}
Compiled from "Type.java"
final class nz.net.initial3d.renderer.Type$framebuf_t {
  static int SIZEOF();
  static int viewport_x();
  static int viewport_y();
  static int viewport_w();
  static int viewport_h();
  static int pColor0();
  static int stride_color0();
  static int pColor1();
  static int stride_color1();
  static int pZ();
  static int stride_z();
  static int pSZ();
  static int stride_sz();
  static int pZSign();
  static int pStencil();
  static int stride_stencil();
  static int pID();
  static int stride_id();
  static int pFC();
}
Compiled from "Type.java"
final class nz.net.initial3d.renderer.Type$i3d_t {
  static int SIZEOF();
  static int flags0();
  static int flags1();
  static int projection_mode();
  static int shade_model();
  static int polymode_front();
  static int polymode_back();
  static int mat_mv();
  static int mat_p();
  static int mat_mvp();
  static int mat_inv_mv();
  static int mat_inv_p();
  static int mat_inv_mvp();
  static int mat_n();
  static int mat_inv_n();
  static int mat_t();
  static int mat_inv_t();
  static int face_cull();
  static int near_clip();
  static int far_cull();
  static int clip_top();
  static int clip_bottom();
  static int clip_left();
  static int clip_right();
  static int clip0();
  static int MAX_CLIPFUNCS();
  static int clip_end();
  static int mtl_front();
  static int mtl_back();
  static int scene_ambient();
  static int light0();
  static int MAX_LIGHTS();
  static int light_end();
  static int scissor_xmin();
  static int scissor_xmax();
  static int scissor_ymin();
  static int scissor_ymax();
  static int depth_func();
  static int stencil_func_front();
  static int stencil_func_front_ref();
  static int stencil_func_front_mask();
  static int stencil_func_back();
  static int stencil_func_back_ref();
  static int stencil_func_back_mask();
  static int alpha_func();
  static int alpha_ref();
  static int stencil_op_front_sfail();
  static int stencil_op_front_dfail();
  static int stencil_op_front_dpass();
  static int stencil_op_back_sfail();
  static int stencil_op_back_dfail();
  static int stencil_op_back_dpass();
  static int blend_func_front_sfactor();
  static int blend_func_front_dfactor();
  static int blend_func_front_mode();
  static int blend_func_back_sfactor();
  static int blend_func_back_dfactor();
  static int blend_func_back_mode();
  static int fog_color();
  static int fog_a();
  static int fog_b();
  static int framebuf();
}
Compiled from "Type.java"
final class nz.net.initial3d.renderer.Type$light_t {
  static int SIZEOF();
  static int flags();
  static int ia_a();
  static int ia_r();
  static int ia_g();
  static int ia_b();
  static int id_a();
  static int id_r();
  static int id_g();
  static int id_b();
  static int is_a();
  static int is_r();
  static int is_g();
  static int is_b();
  static int pos_x();
  static int pos_y();
  static int pos_z();
  static int pos_w();
  static int dir_x();
  static int dir_y();
  static int dir_z();
  static int dir_w();
  static int constant_attenuation();
  static int linear_attenuation();
  static int quadratic_attenuation();
  static int spot_cutoff();
  static int spot_exp();
  static int inv_effect_rad();
}
Compiled from "Type.java"
final class nz.net.initial3d.renderer.Type$material_t {
  static int SIZEOF();
  static int ka_a_unused();
  static int ka_r();
  static int ka_g();
  static int ka_b();
  static int kd_a_opacity();
  static int kd_r();
  static int kd_g();
  static int kd_b();
  static int ks_a_shininess();
  static int ks_r();
  static int ks_g();
  static int ks_b();
  static int ke_a_unused();
  static int ke_r();
  static int ke_g();
  static int ke_b();
  static int pMap_kd();
  static int pMap_ks();
  static int pMap_ke();
}
Compiled from "Type.java"
final class nz.net.initial3d.renderer.Type$tex2d_t {
  static int flags();
  static int ufloor();
  static int vfloor();
  static int uceil();
  static int vceil();
}
Compiled from "Type.java"
final class nz.net.initial3d.renderer.Type$tri_t {
  static int SIZEOF();
  static int flags();
  static int pv0();
  static int pvt0();
  static int pvn0();
  static int pvv0();
  static int v0_c0_a();
  static int v0_c0_r();
  static int v0_c0_g();
  static int v0_c0_b();
  static int v0_c1_a();
  static int v0_c1_r();
  static int v0_c1_g();
  static int v0_c1_b();
  static int pv1();
  static int pvt1();
  static int pvn1();
  static int pvv1();
  static int v1_c0_a();
  static int v1_c0_r();
  static int v1_c0_g();
  static int v1_c0_b();
  static int v1_c1_a();
  static int v1_c1_r();
  static int v1_c1_g();
  static int v1_c1_b();
  static int pv2();
  static int pvt2();
  static int pvn2();
  static int pvv2();
  static int v2_c0_a();
  static int v2_c0_r();
  static int v2_c0_g();
  static int v2_c0_b();
  static int v2_c1_a();
  static int v2_c1_r();
  static int v2_c1_g();
  static int v2_c1_b();
}
Compiled from "Type.java"
final class nz.net.initial3d.renderer.Type$vertex_t {
  static int SIZEOF();
}
Compiled from "Util.java"
final class nz.net.initial3d.renderer.Util {
  static sun.misc.Unsafe getUnsafe();
  static float fastInverseSqrt(float);
  static float fastInverse(float);
  static double clamp(double, double, double);
  static float clamp(float, float, float);
  static long clamp(long, long, long);
  static int clamp(int, int, int);
  static long time();
  static long timenanos();
  static void printf(java.lang.String, java.lang.Object...);
  static java.lang.String sprintf(java.lang.String, java.lang.Object...);
  static void puts(java.lang.Object);
  static void pause(long);
  static nz.net.initial3d.I3DException nope(java.lang.String);
  static nz.net.initial3d.I3DException nope(java.lang.String, java.lang.Throwable);
  static boolean compare(int, int, int);
  static boolean compare(int, float, float);
  static int blend(int, int, int, int, int);
  static int blendfactor(int, int, int, int);
  static int colorGrey(int);
  static int colorScale(int, float);
  static int colorScale(int, int);
  static int colorAdd(int, int);
  static int colorSub(int, int);
  static int colorAvg(int, int);
  static int fastColorAdd(int, int);
  static int colorMul(int, int);
  static int colorMul2(int, int);
  static void writeMat(sun.misc.Unsafe, long, nz.net.initial3d.Mat4);
  static void writeVector(sun.misc.Unsafe, long, double, double, double, double);
  static void writeVector_float(sun.misc.Unsafe, long, float, float, float, float);
  static double vectorDot(sun.misc.Unsafe, long, double, double, double);
  static double vectorDot(sun.misc.Unsafe, long, long);
  static void vectorPlaneNorm(sun.misc.Unsafe, long, long, long, long);
  static void vectorCross(sun.misc.Unsafe, long, long, long);
  static void interpolateVectors(sun.misc.Unsafe, long, long, double, long, double);
  static void interpolateVectors_float(sun.misc.Unsafe, long, long, float, long, float);
  static final void multiply4VectorBlock_pos(sun.misc.Unsafe, long, long, long, long);
  static final void multiply4VectorBlock_norm(sun.misc.Unsafe, long, long, long, long);
}
Compiled from "VectorBufferImpl.java"
final class nz.net.initial3d.renderer.VectorBufferImpl extends nz.net.initial3d.VectorBuffer {
  nz.net.initial3d.renderer.VectorBufferImpl();
  nz.net.initial3d.renderer.VectorBufferImpl(nz.net.initial3d.renderer.VectorBufferImpl);
  protected void finalize();
  public int count();
  public void clear();
  public void add(double, double, double, double);
  public nz.net.initial3d.Vec4 get(int);
  long getPointer();
  static {};
}
Compiled from "DisplayWindowTest.java"
public class nz.net.initial3d.test.DisplayWindowTest {
  public nz.net.initial3d.test.DisplayWindowTest();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "DisplayWindowTest.java"
class nz.net.initial3d.test.DisplayWindowTest$1 {
}
Compiled from "DisplayWindowTest.java"
class nz.net.initial3d.test.DisplayWindowTest$TestListener implements java.awt.event.KeyListener,java.awt.event.MouseListener,java.awt.event.MouseMotionListener,java.awt.event.MouseWheelListener {
  public void mouseWheelMoved(java.awt.event.MouseWheelEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void keyTyped(java.awt.event.KeyEvent);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  nz.net.initial3d.test.DisplayWindowTest$TestListener(nz.net.initial3d.test.DisplayWindowTest$1);
}
Compiled from "IntPoolTest.java"
public class nz.net.initial3d.test.IntPoolTest {
  public nz.net.initial3d.test.IntPoolTest();
  public static void main(java.lang.String[]);
}
Compiled from "Test.java"
public class nz.net.initial3d.test.Test {
  public nz.net.initial3d.test.Test();
  public static void main(java.lang.String[]);
}
Compiled from "Test2.java"
public class nz.net.initial3d.test.Test2 {
  public nz.net.initial3d.test.Test2();
  public static void main(java.lang.String[]);
}
Compiled from "TestProfiler.java"
public class nz.net.initial3d.test.TestProfiler {
  public nz.net.initial3d.test.TestProfiler();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "TestProfiler.java"
final class nz.net.initial3d.test.TestProfiler$1 implements java.lang.Runnable {
  final int val$SEC_BG1;
  final int val$SEC_BG2;
  nz.net.initial3d.test.TestProfiler$1(int, int);
  public void run();
}
Compiled from "DisplayTarget.java"
public interface nz.net.initial3d.util.DisplayTarget {
  public abstract int getDisplayWidth();
  public abstract int getDisplayHeight();
  public abstract void display(java.awt.image.BufferedImage);
}
Compiled from "DisplayWindow.java"
public class nz.net.initial3d.util.DisplayWindow extends javax.swing.JFrame implements nz.net.initial3d.util.DisplayTarget {
  protected nz.net.initial3d.util.DisplayWindow(int, int);
  public static final nz.net.initial3d.util.DisplayWindow create(int, int);
  public void addMouseListener(java.awt.event.MouseListener);
  public void removeMouseListener(java.awt.event.MouseListener);
  public void addMouseMotionListener(java.awt.event.MouseMotionListener);
  public void removeMouseMotionListener(java.awt.event.MouseMotionListener);
  public void addMouseWheelListener(java.awt.event.MouseWheelListener);
  public void removeMouseWheelListener(java.awt.event.MouseWheelListener);
  public int getDisplayWidth();
  public int getDisplayHeight();
  public void display(java.awt.image.BufferedImage);
  public boolean getKey(int);
  public boolean pollKey(int);
  public boolean getMouseButton(int);
  public boolean pollMouseButton(int);
  public boolean isFullscreen();
  public void setFullscreen(boolean);
  public boolean isMouseCaptured();
  public void setMouseCapture(boolean);
  public boolean getPrevMouseCapture();
  public boolean isCursorVisible();
  public void setCursorVisible(boolean);
  public void setCursor(java.awt.Cursor);
  public int getMouseX();
  public int getMouseY();
  public int pollMouseTravelX(int);
  public int pollMouseTravelX();
  public int pollMouseTravelY(int);
  public int pollMouseTravelY();
  public int pollMouseWheelClicks(int);
  public int pollMouseWheelClicks();
  public void setCrosshairVisible(boolean);
  public boolean isCrosshairVisible(boolean);
  public void setFPSVisible(boolean);
  public boolean isFPSVisible();
  public void setTextVisible(boolean);
  public boolean isTextVisible();
  public void addText(java.lang.Object);
  public void addText(int, java.lang.Object);
  public void removeText(java.lang.Object);
  public void removeText(int);
  public void setEventsSynchronous(boolean);
  public boolean areEventsSynchronous();
  protected void processKeyEvent(java.awt.event.KeyEvent);
  protected void processMouseEvent(java.awt.event.MouseEvent);
  protected void processMouseMotionEvent(java.awt.event.MouseEvent);
  protected void processMouseWheelEvent(java.awt.event.MouseWheelEvent);
  protected void processFocusEvent(java.awt.event.FocusEvent);
  protected void processEvent(java.awt.AWTEvent);
  public void pushEvents();
  static {};
}
Compiled from "DisplayWindow.java"
final class nz.net.initial3d.util.DisplayWindow$1 implements java.lang.Runnable {
  final nz.net.initial3d.util.DisplayWindow[] val$win;
  final int val$width;
  final int val$height;
  nz.net.initial3d.util.DisplayWindow$1(nz.net.initial3d.util.DisplayWindow[], int, int);
  public void run();
}
Compiled from "IntPool.java"
public class nz.net.initial3d.util.IntPool {
  public nz.net.initial3d.util.IntPool(int, int);
  public int min();
  public int max();
  public int alloc();
  public void free(int);
  public boolean isAllocated(int);
  public boolean isAvailable(int);
  public java.lang.String toString();
}
Compiled from "Profiler.java"
public final class nz.net.initial3d.util.Profiler {
  public static synchronized int createSection(java.lang.String);
  public static java.lang.String getSectionName(int);
  public static void enter(int);
  public static void exit(int);
  public static void setAutoResetEnabled(boolean);
  public static boolean getAutoResetEnabled();
  public static void setResetInterval(long);
  public static long getResetInterval();
  public static void setResetMute(boolean);
  public static boolean getResetMute();
  public static synchronized void hardReset();
  public static synchronized void reset();
  static long access$000();
  static boolean access$100();
  static {};
}
Compiled from "Profiler.java"
final class nz.net.initial3d.util.Profiler$1 extends java.lang.Thread {
  nz.net.initial3d.util.Profiler$1();
  public void run();
}
Compiled from "Profiler.java"
class nz.net.initial3d.util.Profiler$ThreadData {
  public final java.lang.Thread thread;
  public final long[] sec_time;
  public final long[] sec_start;
  public final int[] sec_entry;
  public nz.net.initial3d.util.Profiler$ThreadData();
  public void lock();
  public void unlock();
}
Compiled from "SynchronizedIntPool.java"
public class nz.net.initial3d.util.SynchronizedIntPool extends nz.net.initial3d.util.IntPool {
  public nz.net.initial3d.util.SynchronizedIntPool(int, int);
  public int alloc();
  public void free(int);
  public boolean isAllocated(int);
  public boolean isAvailable(int);
  public java.lang.String toString();
}
