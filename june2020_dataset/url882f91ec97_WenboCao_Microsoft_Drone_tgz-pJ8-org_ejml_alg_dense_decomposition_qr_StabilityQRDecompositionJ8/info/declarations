Compiled from "CSVReader.java"
public class CSVReader {
  public static java.lang.String lineSep;
  public CSVReader();
  public static java.util.ArrayList<java.util.ArrayList<java.lang.String>> readFile(java.lang.String) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "Data_Compression.java"
public class Data_Compression {
  static final int BUFFER;
  public Data_Compression();
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkElement.java"
public class org.ejml.BenchmarkElement {
  static java.util.Random rand;
  public org.ejml.BenchmarkElement();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkGenerics.java"
public class org.ejml.BenchmarkGenerics {
  public org.ejml.BenchmarkGenerics();
  public static long benchmarkDense(org.ejml.data.DenseMatrix64F, double, int);
  public static long benchmarkGeneric(org.ejml.data.DenseMatrix64F, double, int);
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkGenerics.java"
class org.ejml.BenchmarkGenerics$1 {
}
Compiled from "BenchmarkGenerics.java"
class org.ejml.BenchmarkGenerics$ImplDense implements org.ejml.BenchmarkGenerics$ScaleDense {
  public void scale(double, org.ejml.data.DenseMatrix64F);
  org.ejml.BenchmarkGenerics$ImplDense(org.ejml.BenchmarkGenerics$1);
}
Compiled from "BenchmarkGenerics.java"
class org.ejml.BenchmarkGenerics$ImplGeneric implements org.ejml.BenchmarkGenerics$ScaleGeneric<org.ejml.data.DenseMatrix64F> {
  public void scale(double, org.ejml.data.DenseMatrix64F);
  public void scale(double, org.ejml.data.D1Matrix64F);
  org.ejml.BenchmarkGenerics$ImplGeneric(org.ejml.BenchmarkGenerics$1);
}
Compiled from "BenchmarkGenerics.java"
interface org.ejml.BenchmarkGenerics$ScaleDense {
  public abstract void scale(double, org.ejml.data.DenseMatrix64F);
}
Compiled from "BenchmarkGenerics.java"
interface org.ejml.BenchmarkGenerics$ScaleGeneric<T extends org.ejml.data.D1Matrix64F> {
  public abstract void scale(double, T);
}
Compiled from "BenchmarkInheritanceCall.java"
public class org.ejml.BenchmarkInheritanceCall {
  public org.ejml.BenchmarkInheritanceCall();
  public static void multParent(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void multParent_wrap(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void multChild(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkInliningGetSet.java"
public class org.ejml.BenchmarkInliningGetSet {
  public org.ejml.BenchmarkInliningGetSet();
  public static long benchGet(org.ejml.data.DenseMatrix64F, int);
  public static long getUnsafeGet(org.ejml.data.DenseMatrix64F, int);
  public static long get1D(org.ejml.data.DenseMatrix64F, int);
  public static long inlined(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkInstanceOf.java"
public class org.ejml.BenchmarkInstanceOf {
  public static final double SCALE;
  public static final org.ejml.BenchmarkInstanceOf$StuffA stuff;
  public org.ejml.BenchmarkInstanceOf();
  public static void withIfStatement(org.ejml.data.DenseMatrix64F);
  public static long processInstanceOf(org.ejml.data.DenseMatrix64F, int);
  public static long processDirect(org.ejml.data.DenseMatrix64F, int);
  public static long processIf(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkInstanceOf.java"
public interface org.ejml.BenchmarkInstanceOf$Stuff {
  public abstract void process(org.ejml.BenchmarkInstanceOf$Stuff, org.ejml.data.ReshapeMatrix64F);
}
Compiled from "BenchmarkInstanceOf.java"
public class org.ejml.BenchmarkInstanceOf$StuffA implements org.ejml.BenchmarkInstanceOf$Stuff {
  public org.ejml.BenchmarkInstanceOf$StuffA();
  public void process(org.ejml.BenchmarkInstanceOf$Stuff, org.ejml.data.ReshapeMatrix64F);
}
Compiled from "CodeGeneratorBase.java"
public abstract class org.ejml.CodeGeneratorBase {
  public static final java.lang.String copyright;
  protected java.io.PrintStream out;
  protected java.lang.String className;
  public org.ejml.CodeGeneratorBase();
  public abstract void generate() throws java.io.FileNotFoundException;
  public void setOutputFile(java.lang.String) throws java.io.FileNotFoundException;
  public java.lang.String getPackage();
}
Compiled from "EjmlParameters.java"
public class org.ejml.EjmlParameters {
  public static org.ejml.EjmlParameters$MemoryUsage MEMORY;
  public static int BLOCK_WIDTH;
  public static int BLOCK_WIDTH_CHOL;
  public static int BLOCK_SIZE;
  public static int TRANSPOSE_SWITCH;
  public static int MULT_COLUMN_SWITCH;
  public static int MULT_TRANAB_COLUMN_SWITCH;
  public static int MULT_INNER_SWITCH;
  public static int SWITCH_BLOCK64_CHOLESKY;
  public static int SWITCH_BLOCK64_QR;
  public org.ejml.EjmlParameters();
  static {};
}
Compiled from "EjmlParameters.java"
public final class org.ejml.EjmlParameters$MemoryUsage extends java.lang.Enum<org.ejml.EjmlParameters$MemoryUsage> {
  public static final org.ejml.EjmlParameters$MemoryUsage LOW_MEMORY;
  public static final org.ejml.EjmlParameters$MemoryUsage FASTER;
  public static org.ejml.EjmlParameters$MemoryUsage[] values();
  public static org.ejml.EjmlParameters$MemoryUsage valueOf(java.lang.String);
  static {};
}
Compiled from "TestUtilEjml.java"
public class org.ejml.TestUtilEjml {
  java.util.Random rand;
  public org.ejml.TestUtilEjml();
  public void max_array();
  public void testParseMatrix();
}
Compiled from "UtilEjml.java"
public class org.ejml.UtilEjml {
  public static java.lang.String VERSION;
  public static double TOLERANCE;
  public static double EPS;
  public org.ejml.UtilEjml();
  public static boolean isUncountable(double);
  public static void memset(double[], double);
  public static void memset(double[], double, int);
  public static void memset(int[], int, int);
  public static <T> void setnull(T[]);
  public static double max(double[], int, int);
  public static org.ejml.data.DenseMatrix64F parseMatrix(java.lang.String, int);
  public static java.lang.Integer[] sortByIndex(double[], int);
  static {};
}
Compiled from "UtilEjml.java"
final class org.ejml.UtilEjml$1 implements java.util.Comparator<java.lang.Integer> {
  final double[] val$data;
  org.ejml.UtilEjml$1(double[]);
  public int compare(java.lang.Integer, java.lang.Integer);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "BenchmarkBlockTranspose.java"
public class org.ejml.alg.block.BenchmarkBlockTranspose {
  static java.util.Random rand;
  public org.ejml.alg.block.BenchmarkBlockTranspose();
  public static long transposeDenseInPlace(org.ejml.data.DenseMatrix64F, int);
  public static long transposeDense(org.ejml.data.DenseMatrix64F, int);
  public static long transposeBlock(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BlockInnerMultiplication.java"
public class org.ejml.alg.block.BlockInnerMultiplication {
  public org.ejml.alg.block.BlockInnerMultiplication();
  public static void blockMultPlus(double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultPlusTransA(double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultPlusTransB(double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultMinus(double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultMinusTransA(double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultMinusTransB(double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultSet(double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultSetTransA(double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultSetTransB(double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultPlus(double, double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultPlusTransA(double, double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultPlusTransB(double, double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultSet(double, double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultSetTransA(double, double[], double[], double[], int, int, int, int, int, int);
  public static void blockMultSetTransB(double, double[], double[], double[], int, int, int, int, int, int);
}
Compiled from "BlockInnerRankUpdate.java"
public class org.ejml.alg.block.BlockInnerRankUpdate {
  public org.ejml.alg.block.BlockInnerRankUpdate();
  public static void rankNUpdate(int, double, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public static void symmRankNMinus_U(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public static void symmRankNMinus_L(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  protected static void multTransABlockMinus(double[], double[], int, int, int, int, int, int);
  protected static void multTransABlockMinus_U(double[], double[], int, int, int, int, int, int);
  protected static void multTransBBlockMinus(double[], double[], int, int, int, int, int, int);
  protected static void multTransBBlockMinus_L(double[], double[], int, int, int, int, int, int);
}
Compiled from "BlockInnerTriangularSolver.java"
public class org.ejml.alg.block.BlockInnerTriangularSolver {
  public org.ejml.alg.block.BlockInnerTriangularSolver();
  public static void invertLower(double[], double[], int, int, int);
  public static void invertLower(double[], int, int);
  public static void solveL(double[], double[], int, int, int, int, int);
  public static void solveTransL(double[], double[], int, int, int, int, int);
  public static void solveLTransB(double[], double[], int, int, int, int, int);
  public static void solveU(double[], double[], int, int, int, int, int);
  public static void solveTransU(double[], double[], int, int, int, int, int);
}
Compiled from "BlockMatrixOps.java"
public class org.ejml.alg.block.BlockMatrixOps {
  public org.ejml.alg.block.BlockMatrixOps();
  public static void convert(org.ejml.data.DenseMatrix64F, org.ejml.data.BlockMatrix64F);
  public static void convertRowToBlock(int, int, int, double[], double[]);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.BlockMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void convertBlockToRow(int, int, int, double[], double[]);
  public static void convertTranSrc(org.ejml.data.DenseMatrix64F, org.ejml.data.BlockMatrix64F);
  public static void mult(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public static void multTransA(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public static void multTransB(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public static org.ejml.data.BlockMatrix64F transpose(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public static org.ejml.data.BlockMatrix64F createRandom(int, int, double, double, java.util.Random);
  public static org.ejml.data.BlockMatrix64F createRandom(int, int, double, double, java.util.Random, int);
  public static org.ejml.data.BlockMatrix64F convert(org.ejml.data.DenseMatrix64F, int);
  public static org.ejml.data.BlockMatrix64F convert(org.ejml.data.DenseMatrix64F);
  public static boolean isEquals(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public static boolean isEquals(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F, double);
  public static void zeroTriangle(boolean, org.ejml.data.BlockMatrix64F);
  public static void copyTriangle(boolean, org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public static void set(org.ejml.data.BlockMatrix64F, double);
  public static void setIdentity(org.ejml.data.BlockMatrix64F);
  public static org.ejml.simple.SimpleMatrix convertSimple(org.ejml.data.BlockMatrix64F);
  public static org.ejml.data.BlockMatrix64F identity(int, int, int);
  public static void checkIdenticalShape(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public static void extractAligned(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public static boolean blockAligned(int, org.ejml.data.D1Submatrix64F);
}
Compiled from "BlockMultiplication.java"
public class org.ejml.alg.block.BlockMultiplication {
  public org.ejml.alg.block.BlockMultiplication();
  public static void mult(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public static void multPlus(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public static void multMinus(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public static void multTransA(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public static void multPlusTransA(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public static void multMinusTransA(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public static void multTransB(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
}
Compiled from "BlockTriangularSolver.java"
public class org.ejml.alg.block.BlockTriangularSolver {
  public org.ejml.alg.block.BlockTriangularSolver();
  public static void invert(int, boolean, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, double[]);
  public static void invert(int, boolean, org.ejml.data.D1Submatrix64F, double[]);
  public static void solve(int, boolean, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, boolean);
  public static void solveBlock(int, boolean, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, boolean, boolean);
  public static void solveL(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, boolean);
  public static void solveR(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, boolean);
}
Compiled from "BlockVectorOps.java"
public class org.ejml.alg.block.BlockVectorOps {
  public org.ejml.alg.block.BlockVectorOps();
  public static void scale_row(int, org.ejml.data.D1Submatrix64F, int, double, org.ejml.data.D1Submatrix64F, int, int, int);
  public static void div_row(int, org.ejml.data.D1Submatrix64F, int, double, org.ejml.data.D1Submatrix64F, int, int, int);
  public static void add_row(int, org.ejml.data.D1Submatrix64F, int, double, org.ejml.data.D1Submatrix64F, int, double, org.ejml.data.D1Submatrix64F, int, int, int);
  public static double dot_row(int, org.ejml.data.D1Submatrix64F, int, org.ejml.data.D1Submatrix64F, int, int, int);
  public static double dot_row_col(int, org.ejml.data.D1Submatrix64F, int, org.ejml.data.D1Submatrix64F, int, int, int);
}
Compiled from "GeneratorBlockInnerMultiplication.java"
public class org.ejml.alg.block.GeneratorBlockInnerMultiplication {
  java.lang.String className;
  java.io.PrintStream stream;
  public org.ejml.alg.block.GeneratorBlockInnerMultiplication(java.lang.String) throws java.io.FileNotFoundException;
  public void createClass();
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
}
Compiled from "GeneratorBlockInnerMultiplication.java"
class org.ejml.alg.block.GeneratorBlockInnerMultiplication$1 {
  static final int[] $SwitchMap$org$ejml$alg$block$GeneratorBlockInnerMultiplication$Operation;
  static {};
}
Compiled from "GeneratorBlockInnerMultiplication.java"
final class org.ejml.alg.block.GeneratorBlockInnerMultiplication$Operation extends java.lang.Enum<org.ejml.alg.block.GeneratorBlockInnerMultiplication$Operation> {
  public static final org.ejml.alg.block.GeneratorBlockInnerMultiplication$Operation PLUS;
  public static final org.ejml.alg.block.GeneratorBlockInnerMultiplication$Operation MINUS;
  public static final org.ejml.alg.block.GeneratorBlockInnerMultiplication$Operation SET;
  public static org.ejml.alg.block.GeneratorBlockInnerMultiplication$Operation[] values();
  public static org.ejml.alg.block.GeneratorBlockInnerMultiplication$Operation valueOf(java.lang.String);
  static {};
}
Compiled from "TestBlockInnerMultiplication.java"
public class org.ejml.alg.block.TestBlockInnerMultiplication {
  public org.ejml.alg.block.TestBlockInnerMultiplication();
  public void testAllBlockMult();
  public static void invoke(java.lang.reflect.Method, double, double[], double[], double[], int, int, int, int, int, int);
  static {};
}
Compiled from "TestBlockInnerRankUpdate.java"
public class org.ejml.alg.block.TestBlockInnerRankUpdate {
  java.util.Random rand;
  int N;
  public org.ejml.alg.block.TestBlockInnerRankUpdate();
  public void rankNUpdate();
  public void symmRankNMinus_U();
  public void symmRankNMinus_L();
}
Compiled from "TestBlockInnerTriangularSolver.java"
public class org.ejml.alg.block.TestBlockInnerTriangularSolver {
  java.util.Random rand;
  public org.ejml.alg.block.TestBlockInnerTriangularSolver();
  public void testInvertLower_two();
  public void testInvertLower_one();
  public void testSolveArray();
}
Compiled from "TestBlockMatrixOps.java"
public class org.ejml.alg.block.TestBlockMatrixOps {
  static final int BLOCK_LENGTH;
  java.util.Random rand;
  public org.ejml.alg.block.TestBlockMatrixOps();
  public void convert_dense_to_block();
  public void convertInline_dense_to_block();
  public void convert_block_to_dense();
  public void convertInline_block_to_dense();
  public void testMultInputChecks();
  public void testMultSolution();
  public void convertTranSrc_block_to_dense();
  public void transpose();
  public void zeroTriangle_upper();
  public void zeroTriangle_lower();
  public void copyTriangle();
  public void setIdentity();
  public void convertSimple();
  public void identity();
  public void extractAligned();
  public void blockAligned();
}
Compiled from "TestBlockMultiplication.java"
public class org.ejml.alg.block.TestBlockMultiplication {
  public org.ejml.alg.block.TestBlockMultiplication();
  public void mult_submatrix();
  public static void transposeSub(org.ejml.data.D1Submatrix64F);
  static {};
}
Compiled from "TestBlockTriangularSolver.java"
public class org.ejml.alg.block.TestBlockTriangularSolver {
  java.util.Random rand;
  public org.ejml.alg.block.TestBlockTriangularSolver();
  public void invert_two();
  public void invert_one();
  public void testSolve();
  public void testSolveBlock();
}
Compiled from "TestBlockVectorOps.java"
public class org.ejml.alg.block.TestBlockVectorOps {
  java.util.Random rand;
  int r;
  public org.ejml.alg.block.TestBlockVectorOps();
  public void scale_row();
  public void div_row();
  public void add_row();
  public void dot_row();
  public void dot_row_col();
  public static void checkVector_row(int, int, int, org.ejml.simple.SimpleMatrix, org.ejml.data.BlockMatrix64F, org.ejml.simple.SimpleMatrix);
}
Compiled from "BidiagonalHelper.java"
public class org.ejml.alg.block.decomposition.bidiagonal.BidiagonalHelper {
  public org.ejml.alg.block.decomposition.bidiagonal.BidiagonalHelper();
  public static boolean bidiagOuterBlocks(int, org.ejml.data.D1Submatrix64F, double[], double[]);
}
Compiled from "TestBidiagonalHelper.java"
public class org.ejml.alg.block.decomposition.bidiagonal.TestBidiagonalHelper {
  static final int r;
  java.util.Random rand;
  public org.ejml.alg.block.decomposition.bidiagonal.TestBidiagonalHelper();
  public void bidiagOuterBlocks();
}
Compiled from "CholeskyOuterForm_B64.java"
public class org.ejml.alg.block.decomposition.chol.CholeskyOuterForm_B64 implements org.ejml.interfaces.decomposition.CholeskyDecomposition<org.ejml.data.BlockMatrix64F> {
  public org.ejml.alg.block.decomposition.chol.CholeskyOuterForm_B64(boolean);
  public boolean decompose(org.ejml.data.BlockMatrix64F);
  public boolean isLower();
  public org.ejml.data.BlockMatrix64F getT(org.ejml.data.BlockMatrix64F);
  public boolean inputModified();
  public org.ejml.data.Matrix64F getT(org.ejml.data.Matrix64F);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "InnerCholesky_B64.java"
public class org.ejml.alg.block.decomposition.chol.InnerCholesky_B64 {
  public org.ejml.alg.block.decomposition.chol.InnerCholesky_B64();
  public static boolean upper(org.ejml.data.D1Submatrix64F);
  public static boolean lower(org.ejml.data.D1Submatrix64F);
  public static boolean upper(double[], int, int);
  public static boolean lower(double[], int, int);
}
Compiled from "TestCholeskyOuterForm_B64.java"
public class org.ejml.alg.block.decomposition.chol.TestCholeskyOuterForm_B64 {
  java.util.Random rand;
  int bl;
  public org.ejml.alg.block.decomposition.chol.TestCholeskyOuterForm_B64();
  public void testUpper();
  public void testLower();
}
Compiled from "TestInnerCholesky_B64.java"
public class org.ejml.alg.block.decomposition.chol.TestInnerCholesky_B64 {
  java.util.Random rand;
  public org.ejml.alg.block.decomposition.chol.TestInnerCholesky_B64();
  public void upper();
  public void lower();
}
Compiled from "TestTridiagonalDecompositionHouseholder_B64.java"
public class org.ejml.alg.block.decomposition.hessenberg.TestTridiagonalDecompositionHouseholder_B64 {
  java.util.Random rand;
  int r;
  public org.ejml.alg.block.decomposition.hessenberg.TestTridiagonalDecompositionHouseholder_B64();
  public void compareToSimple();
  public void fullTest();
  public void multPlusTransA();
}
Compiled from "TestTridiagonalHelper_B64.java"
public class org.ejml.alg.block.decomposition.hessenberg.TestTridiagonalHelper_B64 {
  java.util.Random rand;
  int r;
  public org.ejml.alg.block.decomposition.hessenberg.TestTridiagonalHelper_B64();
  public void tridiagUpperRow();
  public void computeW_row();
  public void applyReflectorsToRow();
  public void multA_u();
  public void computeY();
  public void computeRowOfV();
}
Compiled from "TridiagonalDecompositionHouseholder_B64.java"
public class org.ejml.alg.block.decomposition.hessenberg.TridiagonalDecompositionHouseholder_B64 implements org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<org.ejml.data.BlockMatrix64F> {
  protected org.ejml.data.BlockMatrix64F A;
  protected org.ejml.data.BlockMatrix64F V;
  protected org.ejml.data.BlockMatrix64F tmp;
  protected double[] gammas;
  protected org.ejml.data.DenseMatrix64F zerosM;
  public org.ejml.alg.block.decomposition.hessenberg.TridiagonalDecompositionHouseholder_B64();
  public org.ejml.data.BlockMatrix64F getT(org.ejml.data.BlockMatrix64F);
  public org.ejml.data.BlockMatrix64F getQ(org.ejml.data.BlockMatrix64F, boolean);
  public void getDiagonal(double[], double[]);
  public boolean decompose(org.ejml.data.BlockMatrix64F);
  public static void multPlusTransA(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public boolean inputModified();
  public org.ejml.data.ReshapeMatrix64F getQ(org.ejml.data.ReshapeMatrix64F, boolean);
  public org.ejml.data.ReshapeMatrix64F getT(org.ejml.data.ReshapeMatrix64F);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "TridiagonalHelper_B64.java"
public class org.ejml.alg.block.decomposition.hessenberg.TridiagonalHelper_B64 {
  public org.ejml.alg.block.decomposition.hessenberg.TridiagonalHelper_B64();
  public static void tridiagUpperRow(int, org.ejml.data.D1Submatrix64F, double[], org.ejml.data.D1Submatrix64F);
  public static void computeW_row(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, double[], int);
  public static void computeV_blockVector(int, org.ejml.data.D1Submatrix64F, double[], org.ejml.data.D1Submatrix64F);
  public static void applyReflectorsToRow(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, int);
  public static void computeY(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, int, double);
  public static void multA_u(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, int);
  public static double innerProdRowSymm(int, org.ejml.data.D1Submatrix64F, int, org.ejml.data.D1Submatrix64F, int, int);
  public static void computeRowOfV(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, int, double);
}
Compiled from "BlockHouseHolder.java"
public class org.ejml.alg.block.decomposition.qr.BlockHouseHolder {
  public org.ejml.alg.block.decomposition.qr.BlockHouseHolder();
  public static boolean decomposeQR_block_col(int, org.ejml.data.D1Submatrix64F, double[]);
  public static boolean computeHouseHolderCol(int, org.ejml.data.D1Submatrix64F, double[], int);
  public static boolean computeHouseHolderRow(int, org.ejml.data.D1Submatrix64F, double[], int);
  public static void rank1UpdateMultR_Col(int, org.ejml.data.D1Submatrix64F, int, double);
  public static void rank1UpdateMultR_TopRow(int, org.ejml.data.D1Submatrix64F, int, double);
  public static void rank1UpdateMultL_Row(int, org.ejml.data.D1Submatrix64F, int, int, double);
  public static void rank1UpdateMultL_LeftCol(int, org.ejml.data.D1Submatrix64F, int, double, int);
  public static double innerProdCol(int, org.ejml.data.D1Submatrix64F, int, int, int, int);
  public static double innerProdRow(int, org.ejml.data.D1Submatrix64F, int, org.ejml.data.D1Submatrix64F, int, int);
  public static void add_row(int, org.ejml.data.D1Submatrix64F, int, double, org.ejml.data.D1Submatrix64F, int, double, org.ejml.data.D1Submatrix64F, int, int, int);
  public static void divideElementsCol(int, org.ejml.data.D1Submatrix64F, int, double);
  public static void scale_row(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, int, int, double);
  public static double computeTauAndDivideCol(int, org.ejml.data.D1Submatrix64F, int, double);
  public static double computeTauAndDivideRow(int, org.ejml.data.D1Submatrix64F, int, int, double);
  public static double findMaxCol(int, org.ejml.data.D1Submatrix64F, int);
  public static double findMaxRow(int, org.ejml.data.D1Submatrix64F, int, int);
  public static void computeW_Column(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, double[], double[], int);
  public static void initializeW(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, int, double);
  public static void computeZ(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, int, double[], double);
  public static void computeY_t_V(int, org.ejml.data.D1Submatrix64F, int, double[]);
  public static void multAdd_zeros(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  public static void multBlockAdd_zerosone(double[], double[], double[], int, int, int, int, int, int);
  public static void multTransA_vecCol(int, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F, org.ejml.data.D1Submatrix64F);
  protected static void multTransABlockSet_lowerTriag(double[], double[], double[], int, int, int, int, int, int);
}
Compiled from "GenericBlock64QrDecompositionTests.java"
public class org.ejml.alg.block.decomposition.qr.GenericBlock64QrDecompositionTests {
  java.util.Random rand;
  int r;
  org.ejml.alg.block.decomposition.qr.QRDecompositionHouseholder_B64 alg;
  public org.ejml.alg.block.decomposition.qr.GenericBlock64QrDecompositionTests(org.ejml.alg.block.decomposition.qr.QRDecompositionHouseholder_B64);
  public void allTests();
  public void applyQTran();
  public void applyQ();
  public void checkInternalData();
  public void fullDecomposition();
}
Compiled from "QRDecompositionHouseholder_B64.java"
public class org.ejml.alg.block.decomposition.qr.QRDecompositionHouseholder_B64 implements org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.BlockMatrix64F> {
  public org.ejml.alg.block.decomposition.qr.QRDecompositionHouseholder_B64();
  public org.ejml.data.BlockMatrix64F getQR();
  public void setSaveW(boolean);
  public org.ejml.data.BlockMatrix64F getQ(org.ejml.data.BlockMatrix64F, boolean);
  public static org.ejml.data.BlockMatrix64F initializeQ(org.ejml.data.BlockMatrix64F, int, int, int, boolean);
  public void applyQ(org.ejml.data.BlockMatrix64F);
  public void applyQ(org.ejml.data.BlockMatrix64F, boolean);
  public void applyQTran(org.ejml.data.BlockMatrix64F);
  public org.ejml.data.BlockMatrix64F getR(org.ejml.data.BlockMatrix64F, boolean);
  public boolean decompose(org.ejml.data.BlockMatrix64F);
  protected void updateA(org.ejml.data.D1Submatrix64F);
  public boolean inputModified();
  public org.ejml.data.Matrix64F getR(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getQ(org.ejml.data.Matrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "TestBlockHouseHolder.java"
public class org.ejml.alg.block.decomposition.qr.TestBlockHouseHolder {
  java.util.Random rand;
  int r;
  org.ejml.simple.SimpleMatrix A;
  org.ejml.simple.SimpleMatrix Y;
  org.ejml.simple.SimpleMatrix V;
  org.ejml.simple.SimpleMatrix W;
  public org.ejml.alg.block.decomposition.qr.TestBlockHouseHolder();
  public void decomposeQR_block_col();
  public void rank1UpdateMultR_Col();
  public void rank1UpdateMultR_TopRow();
  public void rank1UpdateMultL_Row();
  public void rank1UpdateMultL_LeftCol();
  public void innerProdCol();
  public void innerProdRow();
  public void divideElementsCol();
  public void scale_row();
  public void add_row();
  public void computeTauAndDivideCol();
  public void computeTauAndDivideRow();
  public void testFindMaxCol();
  public void testFindMaxRow();
  public void computeW_Column();
  public void initializeW();
  public void computeZ();
  public void computeY_t_V();
}
Compiled from "TestQRDecompositionHouseholder_B64.java"
public class org.ejml.alg.block.decomposition.qr.TestQRDecompositionHouseholder_B64 {
  public org.ejml.alg.block.decomposition.qr.TestQRDecompositionHouseholder_B64();
  public void generic();
  public void genericSaveW();
}
Compiled from "BlockCholeskyOuterSolver.java"
public class org.ejml.alg.block.linsol.chol.BlockCholeskyOuterSolver implements org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.BlockMatrix64F> {
  public org.ejml.alg.block.linsol.chol.BlockCholeskyOuterSolver();
  public boolean setA(org.ejml.data.BlockMatrix64F);
  public double quality();
  public void solve(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public void invert(org.ejml.data.BlockMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void invert(org.ejml.data.Matrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "TestBlockCholeskyOuterSolver.java"
public class org.ejml.alg.block.linsol.chol.TestBlockCholeskyOuterSolver {
  protected java.util.Random rand;
  protected int r;
  public org.ejml.alg.block.linsol.chol.TestBlockCholeskyOuterSolver();
  public void testPositiveSolve();
  public void testNegativeSolve();
  public void testInvert();
  public void testQuality();
  public void testQuality_scale();
  public void testPositiveSolveNull();
  public void modifiesA();
  public void modifiesB();
  protected org.ejml.data.BlockMatrix64F createMatrixSPD(int);
}
Compiled from "BlockQrHouseHolderSolver.java"
public class org.ejml.alg.block.linsol.qr.BlockQrHouseHolderSolver implements org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.BlockMatrix64F> {
  protected org.ejml.alg.block.decomposition.qr.QRDecompositionHouseholder_B64 decomp;
  protected org.ejml.data.BlockMatrix64F QR;
  public org.ejml.alg.block.linsol.qr.BlockQrHouseHolderSolver();
  public boolean setA(org.ejml.data.BlockMatrix64F);
  public double quality();
  public void solve(org.ejml.data.BlockMatrix64F, org.ejml.data.BlockMatrix64F);
  public void invert(org.ejml.data.BlockMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void invert(org.ejml.data.Matrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "TestBlockQrHouseHolderSolver.java"
public class org.ejml.alg.block.linsol.qr.TestBlockQrHouseHolderSolver {
  java.util.Random rand;
  public org.ejml.alg.block.linsol.qr.TestBlockQrHouseHolderSolver();
  public void testPositiveSolve();
  public void testInvert();
  public void testQuality();
  public void testQuality_scale();
  public void modifiesA();
  public void modifiesB();
}
Compiled from "BlockD3MatrixOps.java"
public class org.ejml.alg.blockd3.BlockD3MatrixOps {
  public org.ejml.alg.blockd3.BlockD3MatrixOps();
  public static org.ejml.data.BlockD3Matrix64F convert(org.ejml.data.DenseMatrix64F, int);
  public static org.ejml.data.BlockD3Matrix64F convert(org.ejml.data.DenseMatrix64F);
  public static void convert(org.ejml.data.DenseMatrix64F, org.ejml.data.BlockD3Matrix64F);
  public static void convert(org.ejml.data.BlockD3Matrix64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.BlockD3Matrix64F random(int, int, double, double, java.util.Random, int);
  public static void mult(org.ejml.data.BlockD3Matrix64F, org.ejml.data.BlockD3Matrix64F, org.ejml.data.BlockD3Matrix64F);
}
Compiled from "TestBlockD3MatrixOps.java"
public class org.ejml.alg.blockd3.TestBlockD3MatrixOps {
  static final int BLOCK_LENGTH;
  java.util.Random rand;
  public org.ejml.alg.blockd3.TestBlockD3MatrixOps();
  public void convert_dense_to_block();
  public void convert_block_to_dense();
  public void mult();
}
Compiled from "RealEigenvalueHessenbergStressTest.java"
public class org.ejml.alg.dense.decompose.eig.RealEigenvalueHessenbergStressTest {
  double tol;
  java.util.Random rand;
  org.ejml.alg.dense.decomposition.eig.EigenvalueExtractor extractor;
  int numCantFindEigenvector;
  public org.ejml.alg.dense.decompose.eig.RealEigenvalueHessenbergStressTest();
  public void evaluateRandom();
  public void evaluateScalingUp();
  public void evaluateScalingDown();
  public void testMatrix0();
  public void testMatrixNegHessenberg();
  public void testMatrixExceptional();
  public void testMatrixZeroButUpperDiag();
  public void testMatrixVerySmallButUpperDiag();
  public void testMatrixAlmostAllOnes();
}
Compiled from "TestLUDecompositionNR.java"
public class org.ejml.alg.dense.decompose.lu.TestLUDecompositionNR extends org.ejml.alg.dense.decomposition.lu.GeneralLuDecompositionChecks {
  public org.ejml.alg.dense.decompose.lu.TestLUDecompositionNR();
  public org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64 create(int, int);
  public org.ejml.interfaces.decomposition.LUDecomposition create(int, int);
}
Compiled from "BaseDecomposition_B64_to_D64.java"
public class org.ejml.alg.dense.decomposition.BaseDecomposition_B64_to_D64 implements org.ejml.interfaces.decomposition.DecompositionInterface<org.ejml.data.DenseMatrix64F> {
  protected org.ejml.interfaces.decomposition.DecompositionInterface<org.ejml.data.BlockMatrix64F> alg;
  protected double[] tmp;
  protected org.ejml.data.BlockMatrix64F Ablock;
  protected int blockLength;
  public org.ejml.alg.dense.decomposition.BaseDecomposition_B64_to_D64(org.ejml.interfaces.decomposition.DecompositionInterface<org.ejml.data.BlockMatrix64F>, int);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public void convertBlockToRow(int, int, int, double[]);
  public boolean inputModified();
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "CheckDecompositionInterface.java"
public class org.ejml.alg.dense.decomposition.CheckDecompositionInterface {
  public org.ejml.alg.dense.decomposition.CheckDecompositionInterface();
  public static boolean safeDecomposition(org.ejml.interfaces.decomposition.DecompositionInterface, org.ejml.data.DenseMatrix64F);
  public static void checkModifiedInput(org.ejml.interfaces.decomposition.DecompositionInterface);
}
Compiled from "TestBaseDecomposition_B64_to_D64.java"
public class org.ejml.alg.dense.decomposition.TestBaseDecomposition_B64_to_D64 {
  public org.ejml.alg.dense.decomposition.TestBaseDecomposition_B64_to_D64();
  public void inputModified();
}
Compiled from "TestBaseDecomposition_B64_to_D64.java"
class org.ejml.alg.dense.decomposition.TestBaseDecomposition_B64_to_D64$1 {
}
Compiled from "TestBaseDecomposition_B64_to_D64.java"
class org.ejml.alg.dense.decomposition.TestBaseDecomposition_B64_to_D64$DoNotModifyBlock implements org.ejml.interfaces.decomposition.DecompositionInterface<org.ejml.data.BlockMatrix64F> {
  public boolean decompose(org.ejml.data.BlockMatrix64F);
  public boolean inputModified();
  public boolean decompose(org.ejml.data.Matrix64F);
  org.ejml.alg.dense.decomposition.TestBaseDecomposition_B64_to_D64$DoNotModifyBlock(org.ejml.alg.dense.decomposition.TestBaseDecomposition_B64_to_D64$1);
}
Compiled from "TestBaseDecomposition_B64_to_D64.java"
class org.ejml.alg.dense.decomposition.TestBaseDecomposition_B64_to_D64$ModifyBlock implements org.ejml.interfaces.decomposition.DecompositionInterface<org.ejml.data.BlockMatrix64F> {
  public boolean decompose(org.ejml.data.BlockMatrix64F);
  public boolean inputModified();
  public boolean decompose(org.ejml.data.Matrix64F);
  org.ejml.alg.dense.decomposition.TestBaseDecomposition_B64_to_D64$ModifyBlock(org.ejml.alg.dense.decomposition.TestBaseDecomposition_B64_to_D64$1);
}
Compiled from "TestTriangularSolver.java"
public class org.ejml.alg.dense.decomposition.TestTriangularSolver {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.TestTriangularSolver();
  public void invert_inplace();
  public void invert();
  public void solveL_vector();
  public void solveL_matrix();
  public void solveTranL();
  public void solveU();
  public void solveU_submatrix();
}
Compiled from "TriangularSolver.java"
public class org.ejml.alg.dense.decomposition.TriangularSolver {
  public org.ejml.alg.dense.decomposition.TriangularSolver();
  public static void invertLower(double[], int);
  public static void invertLower(double[], double[], int);
  public static void solveL(double[], double[], int);
  public static void solveL(double[], double[], int, int);
  public static void solveTranL(double[], double[], int);
  public static void solveU(double[], double[], int);
  public static void solveU(double[], double[], int, int, int);
  public static void solveU(double[], int, int, int, double[], int, int, int);
}
Compiled from "BenchmarkBidiagonalDecomposition.java"
public class org.ejml.alg.dense.decomposition.bidiagonal.BenchmarkBidiagonalDecomposition {
  public org.ejml.alg.dense.decomposition.bidiagonal.BenchmarkBidiagonalDecomposition();
  public static long evaluate(org.ejml.interfaces.decomposition.BidiagonalDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "BidiagonalDecompositionNaive_D64.java"
public class org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecompositionNaive_D64 {
  org.ejml.data.DenseMatrix64F u;
  public org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecompositionNaive_D64();
  public org.ejml.simple.SimpleMatrix getU();
  public org.ejml.simple.SimpleMatrix getB();
  public org.ejml.simple.SimpleMatrix getV();
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  protected void init(org.ejml.data.DenseMatrix64F);
  protected void computeU(int);
  protected void computeV(int);
}
Compiled from "BidiagonalDecompositionRow_D64.java"
public class org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecompositionRow_D64 implements org.ejml.interfaces.decomposition.BidiagonalDecomposition<org.ejml.data.DenseMatrix64F> {
  public org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecompositionRow_D64(int);
  public org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecompositionRow_D64();
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  protected void init(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getUBV();
  public void getDiagonal(double[], double[]);
  public org.ejml.data.DenseMatrix64F getB(org.ejml.data.DenseMatrix64F, boolean);
  public static org.ejml.data.DenseMatrix64F handleB(org.ejml.data.DenseMatrix64F, boolean, int, int, int);
  public org.ejml.data.DenseMatrix64F getU(org.ejml.data.DenseMatrix64F, boolean, boolean);
  public static org.ejml.data.DenseMatrix64F handleU(org.ejml.data.DenseMatrix64F, boolean, boolean, int, int, int);
  public org.ejml.data.DenseMatrix64F getV(org.ejml.data.DenseMatrix64F, boolean, boolean);
  public static org.ejml.data.DenseMatrix64F handleV(org.ejml.data.DenseMatrix64F, boolean, boolean, int, int, int);
  protected void computeU(int);
  protected void computeV(int);
  public double[] getGammasU();
  public double[] getGammasV();
  public boolean inputModified();
  public org.ejml.data.ReshapeMatrix64F getV(org.ejml.data.ReshapeMatrix64F, boolean, boolean);
  public org.ejml.data.ReshapeMatrix64F getU(org.ejml.data.ReshapeMatrix64F, boolean, boolean);
  public org.ejml.data.ReshapeMatrix64F getB(org.ejml.data.ReshapeMatrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "BidiagonalDecompositionTall_D64.java"
public class org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecompositionTall_D64 implements org.ejml.interfaces.decomposition.BidiagonalDecomposition<org.ejml.data.DenseMatrix64F> {
  org.ejml.interfaces.decomposition.QRPDecomposition<org.ejml.data.DenseMatrix64F> decompQRP;
  org.ejml.interfaces.decomposition.BidiagonalDecomposition<org.ejml.data.DenseMatrix64F> decompBi;
  org.ejml.data.DenseMatrix64F B;
  int m;
  int n;
  int min;
  public org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecompositionTall_D64();
  public void getDiagonal(double[], double[]);
  public org.ejml.data.DenseMatrix64F getB(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getU(org.ejml.data.DenseMatrix64F, boolean, boolean);
  public org.ejml.data.DenseMatrix64F getV(org.ejml.data.DenseMatrix64F, boolean, boolean);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public org.ejml.data.ReshapeMatrix64F getV(org.ejml.data.ReshapeMatrix64F, boolean, boolean);
  public org.ejml.data.ReshapeMatrix64F getU(org.ejml.data.ReshapeMatrix64F, boolean, boolean);
  public org.ejml.data.ReshapeMatrix64F getB(org.ejml.data.ReshapeMatrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "GenericBidiagonalCheck.java"
public abstract class org.ejml.alg.dense.decomposition.bidiagonal.GenericBidiagonalCheck {
  protected java.util.Random rand;
  public org.ejml.alg.dense.decomposition.bidiagonal.GenericBidiagonalCheck();
  protected abstract org.ejml.interfaces.decomposition.BidiagonalDecomposition<org.ejml.data.DenseMatrix64F> createQRDecomposition();
  public void testModifiedInput();
  public void testRandomMatrices();
  public void testIdentity();
  public void testZero();
  protected void checkGeneric(org.ejml.data.DenseMatrix64F, org.ejml.interfaces.decomposition.BidiagonalDecomposition<org.ejml.data.DenseMatrix64F>);
}
Compiled from "StabilityBidiagonalDecomposition.java"
public class org.ejml.alg.dense.decomposition.bidiagonal.StabilityBidiagonalDecomposition {
  public org.ejml.alg.dense.decomposition.bidiagonal.StabilityBidiagonalDecomposition();
  public static double evaluate(org.ejml.interfaces.decomposition.BidiagonalDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F);
  public static void main(java.lang.String[]);
}
Compiled from "TestBidiagonalDecompositionNaive_D64.java"
public class org.ejml.alg.dense.decomposition.bidiagonal.TestBidiagonalDecompositionNaive_D64 {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.bidiagonal.TestBidiagonalDecompositionNaive_D64();
  public void testItAll();
}
Compiled from "TestBidiagonalDecompositionRow_D64.java"
public class org.ejml.alg.dense.decomposition.bidiagonal.TestBidiagonalDecompositionRow_D64 extends org.ejml.alg.dense.decomposition.bidiagonal.GenericBidiagonalCheck {
  public org.ejml.alg.dense.decomposition.bidiagonal.TestBidiagonalDecompositionRow_D64();
  public void testAgainstNaive();
  public void testComputeU();
  public void testComputeV();
  protected org.ejml.interfaces.decomposition.BidiagonalDecomposition<org.ejml.data.DenseMatrix64F> createQRDecomposition();
}
Compiled from "TestBidiagonalDecompositionRow_D64.java"
class org.ejml.alg.dense.decomposition.bidiagonal.TestBidiagonalDecompositionRow_D64$DebugBidiagonal extends org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecompositionRow_D64 {
  public org.ejml.alg.dense.decomposition.bidiagonal.TestBidiagonalDecompositionRow_D64$DebugBidiagonal(org.ejml.data.DenseMatrix64F);
  protected void computeU(int);
  protected void computeV(int);
}
Compiled from "TestBidiagonalDecompositionTall_D64.java"
public class org.ejml.alg.dense.decomposition.bidiagonal.TestBidiagonalDecompositionTall_D64 extends org.ejml.alg.dense.decomposition.bidiagonal.GenericBidiagonalCheck {
  public org.ejml.alg.dense.decomposition.bidiagonal.TestBidiagonalDecompositionTall_D64();
  protected org.ejml.interfaces.decomposition.BidiagonalDecomposition<org.ejml.data.DenseMatrix64F> createQRDecomposition();
}
Compiled from "BenchmarkCholeskyDecomposition.java"
public class org.ejml.alg.dense.decomposition.chol.BenchmarkCholeskyDecomposition {
  public org.ejml.alg.dense.decomposition.chol.BenchmarkCholeskyDecomposition();
  public static long choleskyL(org.ejml.data.DenseMatrix64F, int);
  public static long choleskyU(org.ejml.data.DenseMatrix64F, int);
  public static long choleskyL_block(org.ejml.data.DenseMatrix64F, int);
  public static long choleskyBlockU(org.ejml.data.DenseMatrix64F, int);
  public static long choleskyBlockL(org.ejml.data.DenseMatrix64F, int);
  public static long choleskyLDL(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "CholeskyBlockHelper_D64.java"
class org.ejml.alg.dense.decomposition.chol.CholeskyBlockHelper_D64 {
  public org.ejml.alg.dense.decomposition.chol.CholeskyBlockHelper_D64(int);
  public boolean decompose(org.ejml.data.DenseMatrix64F, int, int);
  public org.ejml.data.DenseMatrix64F getL();
}
Compiled from "CholeskyDecompositionBlock_D64.java"
public class org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionBlock_D64 extends org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionCommon_D64 {
  public org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionBlock_D64(int);
  public void setExpectedMaxSize(int, int);
  protected boolean decomposeLower();
  protected boolean decomposeUpper();
  public static void solveL_special(double[], org.ejml.data.DenseMatrix64F, int, int, org.ejml.data.DenseMatrix64F);
  public static void symmRankTranA_sub(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
}
Compiled from "CholeskyDecompositionCommon_D64.java"
public abstract class org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionCommon_D64 implements org.ejml.interfaces.decomposition.CholeskyDecomposition<org.ejml.data.DenseMatrix64F> {
  protected int maxWidth;
  protected int n;
  protected org.ejml.data.DenseMatrix64F T;
  protected double[] t;
  protected double[] vv;
  protected boolean lower;
  public org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionCommon_D64(boolean);
  public void setExpectedMaxSize(int, int);
  public boolean isLower();
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  protected abstract boolean decomposeLower();
  protected abstract boolean decomposeUpper();
  public org.ejml.data.DenseMatrix64F getT(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getT();
  public double[] _getVV();
  public org.ejml.data.Matrix64F getT(org.ejml.data.Matrix64F);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "CholeskyDecompositionInner_D64.java"
public class org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionInner_D64 extends org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionCommon_D64 {
  public org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionInner_D64();
  public org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionInner_D64(boolean);
  protected boolean decomposeLower();
  protected boolean decomposeUpper();
}
Compiled from "CholeskyDecompositionLDL_D64.java"
public class org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL_D64 implements org.ejml.interfaces.decomposition.DecompositionInterface<org.ejml.data.DenseMatrix64F> {
  double[] vv;
  public org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL_D64();
  public void setExpectedMaxSize(int, int);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public double[] getD();
  public org.ejml.data.DenseMatrix64F getL();
  public double[] _getVV();
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "CholeskyDecomposition_B64_to_D64.java"
public class org.ejml.alg.dense.decomposition.chol.CholeskyDecomposition_B64_to_D64 extends org.ejml.alg.dense.decomposition.BaseDecomposition_B64_to_D64 implements org.ejml.interfaces.decomposition.CholeskyDecomposition<org.ejml.data.DenseMatrix64F> {
  public org.ejml.alg.dense.decomposition.chol.CholeskyDecomposition_B64_to_D64(boolean);
  public boolean isLower();
  public org.ejml.data.DenseMatrix64F getT(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.Matrix64F getT(org.ejml.data.Matrix64F);
}
Compiled from "GenericCholeskyTests.java"
public abstract class org.ejml.alg.dense.decomposition.chol.GenericCholeskyTests {
  java.util.Random rand;
  boolean canL;
  boolean canR;
  public org.ejml.alg.dense.decomposition.chol.GenericCholeskyTests();
  public abstract org.ejml.interfaces.decomposition.CholeskyDecomposition<org.ejml.data.DenseMatrix64F> create(boolean);
  public void testDecomposeL();
  public void testDecomposeR();
  public void testNotPositiveDefinite();
  public void getT();
  public void checkWithDefinition();
}
Compiled from "StabilityCholeksyDecomposition.java"
public class org.ejml.alg.dense.decomposition.chol.StabilityCholeksyDecomposition {
  public org.ejml.alg.dense.decomposition.chol.StabilityCholeksyDecomposition();
  public static double evaluate(org.ejml.interfaces.decomposition.CholeskyDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F);
  public static void main(java.lang.String[]);
}
Compiled from "TestCholeskyDecompositionBlock_D64.java"
public class org.ejml.alg.dense.decomposition.chol.TestCholeskyDecompositionBlock_D64 extends org.ejml.alg.dense.decomposition.chol.GenericCholeskyTests {
  public org.ejml.alg.dense.decomposition.chol.TestCholeskyDecompositionBlock_D64();
  public void checkModifyInput();
  public org.ejml.interfaces.decomposition.CholeskyDecomposition<org.ejml.data.DenseMatrix64F> create(boolean);
  public void testWithBlocks();
  public void testWithBlocksNotDivisible();
  public void testWithBlocksBiggerThanMatrix();
}
Compiled from "TestCholeskyDecompositionInner_D64.java"
public class org.ejml.alg.dense.decomposition.chol.TestCholeskyDecompositionInner_D64 extends org.ejml.alg.dense.decomposition.chol.GenericCholeskyTests {
  public org.ejml.alg.dense.decomposition.chol.TestCholeskyDecompositionInner_D64();
  public org.ejml.interfaces.decomposition.CholeskyDecomposition<org.ejml.data.DenseMatrix64F> create(boolean);
  public void checkModifyInput();
}
Compiled from "TestCholeskyDecompositionLDL_D64.java"
public class org.ejml.alg.dense.decomposition.chol.TestCholeskyDecompositionLDL_D64 {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.chol.TestCholeskyDecompositionLDL_D64();
  public void checkModifyInput();
  public void testDecompose();
  public void testNotPositiveDefinate();
}
Compiled from "TestCholeskyDecomposition_B64_to_D64.java"
public class org.ejml.alg.dense.decomposition.chol.TestCholeskyDecomposition_B64_to_D64 extends org.ejml.alg.dense.decomposition.chol.GenericCholeskyTests {
  public org.ejml.alg.dense.decomposition.chol.TestCholeskyDecomposition_B64_to_D64();
  public void checkModifyInput();
  public org.ejml.interfaces.decomposition.CholeskyDecomposition<org.ejml.data.DenseMatrix64F> create(boolean);
}
Compiled from "BenchmarkEigenDecomposition.java"
public class org.ejml.alg.dense.decomposition.eig.BenchmarkEigenDecomposition {
  public org.ejml.alg.dense.decomposition.eig.BenchmarkEigenDecomposition();
  public static long watched(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "EigenPowerMethod.java"
public class org.ejml.alg.dense.decomposition.eig.EigenPowerMethod {
  public org.ejml.alg.dense.decomposition.eig.EigenPowerMethod(int);
  public void setSeed(org.ejml.data.DenseMatrix64F);
  public void setOptions(int, double);
  public boolean computeDirect(org.ejml.data.DenseMatrix64F);
  public boolean computeShiftDirect(org.ejml.data.DenseMatrix64F, double);
  public boolean computeShiftInvert(org.ejml.data.DenseMatrix64F, double);
  public org.ejml.data.DenseMatrix64F getEigenVector();
}
Compiled from "EigenvalueExtractor.java"
public interface org.ejml.alg.dense.decomposition.eig.EigenvalueExtractor {
  public abstract boolean process(org.ejml.data.DenseMatrix64F);
  public abstract int getNumberOfEigenvalues();
  public abstract org.ejml.data.Complex64F[] getEigenvalues();
}
Compiled from "EigenvalueSmall.java"
public class org.ejml.alg.dense.decomposition.eig.EigenvalueSmall {
  public org.ejml.data.Complex64F value0;
  public org.ejml.data.Complex64F value1;
  public org.ejml.alg.dense.decomposition.eig.EigenvalueSmall();
  public void value2x2(double, double, double, double);
  public void value2x2_fast(double, double, double, double);
  public void symm2x2_fast(double, double, double);
}
Compiled from "GeneralEigenDecompositionCheck.java"
public abstract class org.ejml.alg.dense.decomposition.eig.GeneralEigenDecompositionCheck {
  java.util.Random rand;
  boolean computeVectors;
  public org.ejml.alg.dense.decomposition.eig.GeneralEigenDecompositionCheck();
  public abstract org.ejml.interfaces.decomposition.EigenDecomposition createDecomposition();
  public void allTests();
  public void justEigenValues();
  public void checkRandom();
  public void checkKnownReal();
  public void checkCompanionMatrix();
  public void checkKnownReal_JustValue();
  public void checkKnownSymmetric_JustValue();
  public void checkKnownComplex();
  public void checkRandomSymmetric();
  public void checkExceptional();
  public void checkIdentity();
  public void checkAllZeros();
  public void checkWithSomeRepeatedValuesSymm();
  public void checkWithSingularSymm();
  public void checkSmallValue(boolean);
  public void checkLargeValue(boolean);
  public void testEigenvalues(org.ejml.interfaces.decomposition.EigenDecomposition, double);
  public void performStandardTests(org.ejml.interfaces.decomposition.EigenDecomposition, org.ejml.data.DenseMatrix64F, int);
  public void testPairsConsistent(org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F);
  public void testEigenvalueConsistency(org.ejml.interfaces.decomposition.EigenDecomposition, org.ejml.data.DenseMatrix64F);
  public void checkCharacteristicEquation(org.ejml.interfaces.decomposition.EigenDecomposition, org.ejml.data.DenseMatrix64F);
  public void testVectorsLinearlyIndependent(org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F>);
  public void testForEigenpair(org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F>, double, double, double...);
  public void testForEigenvalue(org.ejml.interfaces.decomposition.EigenDecomposition, org.ejml.data.DenseMatrix64F, double, double, int);
}
Compiled from "RealEigenDecompositionStressTest.java"
public class org.ejml.alg.dense.decomposition.eig.RealEigenDecompositionStressTest {
  public org.ejml.alg.dense.decomposition.eig.RealEigenDecompositionStressTest();
}
Compiled from "SwitchingEigenDecomposition.java"
public class org.ejml.alg.dense.decomposition.eig.SwitchingEigenDecomposition implements org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F> {
  org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F> symmetricAlg;
  org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F> generalAlg;
  boolean symmetric;
  boolean computeVectors;
  org.ejml.data.DenseMatrix64F A;
  public org.ejml.alg.dense.decomposition.eig.SwitchingEigenDecomposition(int, boolean, double);
  public org.ejml.alg.dense.decomposition.eig.SwitchingEigenDecomposition(int);
  public int getNumberOfEigenvalues();
  public org.ejml.data.Complex64F getEigenvalue(int);
  public org.ejml.data.DenseMatrix64F getEigenVector(int);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public org.ejml.data.Matrix64F getEigenVector(int);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "SymmetricQRAlgorithmDecomposition_D64.java"
public class org.ejml.alg.dense.decomposition.eig.SymmetricQRAlgorithmDecomposition_D64 implements org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F> {
  boolean computeVectors;
  public org.ejml.alg.dense.decomposition.eig.SymmetricQRAlgorithmDecomposition_D64(org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<org.ejml.data.DenseMatrix64F>, boolean);
  public org.ejml.alg.dense.decomposition.eig.SymmetricQRAlgorithmDecomposition_D64(boolean);
  public void setComputeVectorsWithValues(boolean);
  public void setMaxIterations(int);
  public int getNumberOfEigenvalues();
  public org.ejml.data.Complex64F getEigenvalue(int);
  public org.ejml.data.DenseMatrix64F getEigenVector(int);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public org.ejml.data.Matrix64F getEigenVector(int);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "TestEigenPowerMethod.java"
public class org.ejml.alg.dense.decomposition.eig.TestEigenPowerMethod {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.eig.TestEigenPowerMethod();
  public void computeDirect();
  public void computeShiftDirect();
  public void computeShiftInvert();
}
Compiled from "TestSwitchingEigenDecomposition.java"
public class org.ejml.alg.dense.decomposition.eig.TestSwitchingEigenDecomposition extends org.ejml.alg.dense.decomposition.eig.GeneralEigenDecompositionCheck {
  public org.ejml.alg.dense.decomposition.eig.TestSwitchingEigenDecomposition();
  public org.ejml.interfaces.decomposition.EigenDecomposition createDecomposition();
  public void allTests();
}
Compiled from "TestSymmetricQRAlgorithmDecomposition_D64.java"
public class org.ejml.alg.dense.decomposition.eig.TestSymmetricQRAlgorithmDecomposition_D64 extends org.ejml.alg.dense.decomposition.eig.GeneralEigenDecompositionCheck {
  boolean together;
  public org.ejml.alg.dense.decomposition.eig.TestSymmetricQRAlgorithmDecomposition_D64();
  public org.ejml.interfaces.decomposition.EigenDecomposition createDecomposition();
  public void justSymmetricTests_separate();
  public void justSymmetricTests_together();
}
Compiled from "TestWatchedDoubleStepQRDecomposition_D64.java"
public class org.ejml.alg.dense.decomposition.eig.TestWatchedDoubleStepQRDecomposition_D64 extends org.ejml.alg.dense.decomposition.eig.GeneralEigenDecompositionCheck {
  public org.ejml.alg.dense.decomposition.eig.TestWatchedDoubleStepQRDecomposition_D64();
  public org.ejml.interfaces.decomposition.EigenDecomposition createDecomposition();
  public void allTests();
}
Compiled from "WatchedDoubleStepQRDecomposition_D64.java"
public class org.ejml.alg.dense.decomposition.eig.WatchedDoubleStepQRDecomposition_D64 implements org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F> {
  org.ejml.alg.dense.decomposition.hessenberg.HessenbergSimilarDecomposition_D64 hessenberg;
  org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigenvalue algValue;
  org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigenvector algVector;
  org.ejml.data.DenseMatrix64F H;
  boolean computeVectors;
  public org.ejml.alg.dense.decomposition.eig.WatchedDoubleStepQRDecomposition_D64(boolean);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public int getNumberOfEigenvalues();
  public org.ejml.data.Complex64F getEigenvalue(int);
  public org.ejml.data.DenseMatrix64F getEigenVector(int);
  public org.ejml.data.Matrix64F getEigenVector(int);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "BenchmarkSymmetricEigenDecomposition.java"
public class org.ejml.alg.dense.decomposition.eig.symm.BenchmarkSymmetricEigenDecomposition {
  public org.ejml.alg.dense.decomposition.eig.symm.BenchmarkSymmetricEigenDecomposition();
  public static long symmTogether(org.ejml.data.DenseMatrix64F, int);
  public static long symmSeparate(org.ejml.data.DenseMatrix64F, int);
  public static long standardTridiag(org.ejml.data.DenseMatrix64F, int);
  public static long blockTridiag(org.ejml.data.DenseMatrix64F, int);
  public static long defaultSymm(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "StabilitySymmEigen.java"
public class org.ejml.alg.dense.decomposition.eig.symm.StabilitySymmEigen {
  public org.ejml.alg.dense.decomposition.eig.symm.StabilitySymmEigen();
  public static double evaluate(org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F);
  public static void main(java.lang.String[]);
}
Compiled from "SymmetricEigenStressTest.java"
public class org.ejml.alg.dense.decomposition.eig.symm.SymmetricEigenStressTest {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.eig.symm.SymmetricEigenStressTest();
  public void checkMatrix(int, long);
  public void checkRandomMatrices(int);
  public static void main(java.lang.String[]);
}
Compiled from "SymmetricQREigenHelper.java"
public class org.ejml.alg.dense.decomposition.eig.symm.SymmetricQREigenHelper {
  protected java.util.Random rand;
  protected int steps;
  protected int numExceptional;
  protected int lastExceptional;
  protected org.ejml.alg.dense.decomposition.eig.EigenvalueSmall eigenSmall;
  protected org.ejml.data.DenseMatrix64F Q;
  protected int N;
  protected double[] diag;
  protected double[] off;
  protected int x1;
  protected int x2;
  protected int[] splits;
  protected int numSplits;
  public org.ejml.alg.dense.decomposition.eig.symm.SymmetricQREigenHelper();
  public void printMatrix();
  public void setQ(org.ejml.data.DenseMatrix64F);
  public void incrementSteps();
  public void init(double[], double[], int);
  public double[] swapDiag(double[]);
  public double[] swapOff(double[]);
  public void reset(int);
  public double[] copyDiag(double[]);
  public double[] copyOff(double[]);
  public double[] copyEigenvalues(double[]);
  public void setSubmatrix(int, int);
  protected boolean isZero(int);
  protected void performImplicitSingleStep(double, boolean);
  protected void updateQ(int, int, double, double);
  protected void createBulge(int, double, boolean);
  protected void createBulge2by2(int, double, boolean);
  protected void removeBulge(int);
  protected void removeBulgeEnd(int);
  protected void eigenvalue2by2(int);
  public void exceptionalShift();
  public boolean nextSplit();
  public double computeShift();
  public double computeWilkinsonShift();
  public int getMatrixSize();
  public void resetSteps();
}
Compiled from "SymmetricQrAlgorithm.java"
public class org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm {
  public org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm(org.ejml.alg.dense.decomposition.eig.symm.SymmetricQREigenHelper);
  public org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm();
  public void setMaxIterations(int);
  public org.ejml.data.DenseMatrix64F getQ();
  public void setQ(org.ejml.data.DenseMatrix64F);
  public void setFastEigenvalues(boolean);
  public double getEigenvalue(int);
  public int getNumberOfEigenvalues();
  public boolean process(int, double[], double[], double[]);
  public boolean process(int, double[], double[]);
  public void performStep();
}
Compiled from "TestSymmetricQrAlgorithm.java"
public class org.ejml.alg.dense.decomposition.eig.symm.TestSymmetricQrAlgorithm {
  public org.ejml.alg.dense.decomposition.eig.symm.TestSymmetricQrAlgorithm();
  public void shouldNotChange();
  public void hasOffDiagonal();
  public void zeroDiagonalNotZeroOff();
  public void multipleEigenvalues();
  public int countNumFound(org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm, double, double);
}
Compiled from "WatchDoubleStepQR.java"
public class org.ejml.alg.dense.decomposition.eig.watched.WatchDoubleStepQR {
  public org.ejml.alg.dense.decomposition.eig.watched.WatchDoubleStepQR();
  public static void watchFindEigen(org.ejml.data.DenseMatrix64F);
  public static void watchImplicitDouble(org.ejml.data.DenseMatrix64F);
  public static void watchImplicitSingle(org.ejml.data.DenseMatrix64F);
  public static void main(java.lang.String[]);
}
Compiled from "WatchedDoubleStepQREigen.java"
public class org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigen {
  org.ejml.data.DenseMatrix64F A;
  int[] numStepsFind;
  int steps;
  org.ejml.data.Complex64F[] eigenvalues;
  int numEigen;
  boolean checkHessenberg;
  int lastExceptional;
  int numExceptional;
  int exceptionalThreshold;
  int maxIterations;
  public boolean createR;
  public org.ejml.data.DenseMatrix64F Q;
  public org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigen();
  public void incrementSteps();
  public void setQ(org.ejml.data.DenseMatrix64F);
  public void setChecks(boolean, boolean, boolean);
  public boolean isZero(int, int);
  public void setup(org.ejml.data.DenseMatrix64F);
  public void exceptionalShift(int, int);
  public void implicitDoubleStep(int, int);
  public void performImplicitDoubleStep(int, int, double, double);
  public void performImplicitSingleStep(int, int, double);
  public boolean createBulgeSingleStep(int, double);
  public boolean bulgeDoubleStepQn(int);
  public boolean bulgeDoubleStepQn(int, double, double, double, double, boolean);
  public boolean bulgeSingleStepQn(int);
  public boolean bulgeSingleStepQn(int, double, double, double, boolean);
  public void eigen2by2_scale(double, double, double, double);
  public int getNumberOfEigenvalues();
  public org.ejml.data.Complex64F[] getEigenvalues();
  public void addComputedEigen2x2(int, int);
  public boolean isReal2x2(int, int);
  public void addEigenAt(int);
  public void printSteps();
}
Compiled from "WatchedDoubleStepQREigenvalue.java"
public class org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigenvalue implements org.ejml.alg.dense.decomposition.eig.EigenvalueExtractor {
  org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigen implicitQR;
  int[] splits;
  int numSplits;
  int x1;
  int x2;
  public org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigenvalue();
  public void setup(org.ejml.data.DenseMatrix64F);
  public boolean process(org.ejml.data.DenseMatrix64F);
  public int getNumberOfEigenvalues();
  public org.ejml.data.Complex64F[] getEigenvalues();
  public org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigen getImplicitQR();
}
Compiled from "WatchedDoubleStepQREigenvector.java"
public class org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigenvector {
  org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigen implicit;
  org.ejml.data.DenseMatrix64F Q;
  org.ejml.data.DenseMatrix64F[] eigenvectors;
  org.ejml.data.DenseMatrix64F eigenvectorTemp;
  org.ejml.interfaces.linsol.LinearSolver solver;
  org.ejml.data.Complex64F[] origEigenvalues;
  int N;
  int[] splits;
  int numSplits;
  int x1;
  int x2;
  int indexVal;
  boolean onscript;
  public org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigenvector();
  public boolean process(org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigen, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public boolean extractVectors(org.ejml.data.DenseMatrix64F);
  public boolean findQandR();
  public org.ejml.data.DenseMatrix64F getQ();
  public org.ejml.alg.dense.decomposition.eig.watched.WatchedDoubleStepQREigen getImplicit();
  public org.ejml.data.DenseMatrix64F[] getEigenvectors();
  public org.ejml.data.Complex64F[] getEigenvalues();
}
Compiled from "BenchmarkHessenberg.java"
public class org.ejml.alg.dense.decomposition.hessenberg.BenchmarkHessenberg {
  public org.ejml.alg.dense.decomposition.hessenberg.BenchmarkHessenberg();
  public static long basic(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkTridiagonal.java"
public class org.ejml.alg.dense.decomposition.hessenberg.BenchmarkTridiagonal {
  public org.ejml.alg.dense.decomposition.hessenberg.BenchmarkTridiagonal();
  public static long basic(org.ejml.data.DenseMatrix64F, int);
  public static long alt(org.ejml.data.DenseMatrix64F, int);
  public static long block(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "HessenbergSimilarDecomposition_D64.java"
public class org.ejml.alg.dense.decomposition.hessenberg.HessenbergSimilarDecomposition_D64 implements org.ejml.interfaces.decomposition.DecompositionInterface<org.ejml.data.DenseMatrix64F> {
  public org.ejml.alg.dense.decomposition.hessenberg.HessenbergSimilarDecomposition_D64(int);
  public org.ejml.alg.dense.decomposition.hessenberg.HessenbergSimilarDecomposition_D64();
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public org.ejml.data.DenseMatrix64F getQH();
  public org.ejml.data.DenseMatrix64F getH(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getQ(org.ejml.data.DenseMatrix64F);
  public double[] getGammas();
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "StabilityTridiagonal.java"
public class org.ejml.alg.dense.decomposition.hessenberg.StabilityTridiagonal {
  public org.ejml.alg.dense.decomposition.hessenberg.StabilityTridiagonal();
  public static double evaluate(org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F);
  public static void main(java.lang.String[]);
}
Compiled from "StandardTridiagonalTests.java"
public abstract class org.ejml.alg.dense.decomposition.hessenberg.StandardTridiagonalTests {
  protected java.util.Random rand;
  public org.ejml.alg.dense.decomposition.hessenberg.StandardTridiagonalTests();
  protected abstract org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<org.ejml.data.DenseMatrix64F> createDecomposition();
  public void fullTest();
  public void getDiagonal();
  public void transposeFlagForQ();
}
Compiled from "TestHessenbergSimilarDecomposition_D64.java"
public class org.ejml.alg.dense.decomposition.hessenberg.TestHessenbergSimilarDecomposition_D64 {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.hessenberg.TestHessenbergSimilarDecomposition_D64();
  public void testItAllTogether();
  public void testInputUnmodified();
  public void testHouseholderVectors();
  public void testH();
}
Compiled from "TestTridiagonalDecompositionHouseholder_D64.java"
public class org.ejml.alg.dense.decomposition.hessenberg.TestTridiagonalDecompositionHouseholder_D64 extends org.ejml.alg.dense.decomposition.hessenberg.StandardTridiagonalTests {
  public org.ejml.alg.dense.decomposition.hessenberg.TestTridiagonalDecompositionHouseholder_D64();
  protected org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<org.ejml.data.DenseMatrix64F> createDecomposition();
}
Compiled from "TestTridiagonalDecomposition_B64_to_D64.java"
public class org.ejml.alg.dense.decomposition.hessenberg.TestTridiagonalDecomposition_B64_to_D64 extends org.ejml.alg.dense.decomposition.hessenberg.StandardTridiagonalTests {
  public org.ejml.alg.dense.decomposition.hessenberg.TestTridiagonalDecomposition_B64_to_D64();
  protected org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<org.ejml.data.DenseMatrix64F> createDecomposition();
}
Compiled from "TridiagonalDecompositionHouseholderOrig_D64.java"
public class org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionHouseholderOrig_D64 {
  org.ejml.data.DenseMatrix64F QT;
  int N;
  double[] w;
  double[] gammas;
  double[] b;
  public org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionHouseholderOrig_D64();
  public org.ejml.data.DenseMatrix64F getQT();
  public org.ejml.data.DenseMatrix64F getT(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getQ(org.ejml.data.DenseMatrix64F);
  public void decompose(org.ejml.data.DenseMatrix64F);
  public void householderSymmetric(int, double);
  public void init(org.ejml.data.DenseMatrix64F);
  public double getGamma(int);
}
Compiled from "TridiagonalDecompositionHouseholder_D64.java"
public class org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionHouseholder_D64 implements org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<org.ejml.data.DenseMatrix64F> {
  public org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionHouseholder_D64();
  public org.ejml.data.DenseMatrix64F getQT();
  public void getDiagonal(double[], double[]);
  public org.ejml.data.DenseMatrix64F getT(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getQ(org.ejml.data.DenseMatrix64F, boolean);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public void householderSymmetric(int, double);
  public void init(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public org.ejml.data.ReshapeMatrix64F getQ(org.ejml.data.ReshapeMatrix64F, boolean);
  public org.ejml.data.ReshapeMatrix64F getT(org.ejml.data.ReshapeMatrix64F);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "TridiagonalDecomposition_B64_to_D64.java"
public class org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecomposition_B64_to_D64 extends org.ejml.alg.dense.decomposition.BaseDecomposition_B64_to_D64 implements org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<org.ejml.data.DenseMatrix64F> {
  public org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecomposition_B64_to_D64();
  public org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecomposition_B64_to_D64(int);
  public org.ejml.data.DenseMatrix64F getT(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getQ(org.ejml.data.DenseMatrix64F, boolean);
  public void getDiagonal(double[], double[]);
  public org.ejml.data.ReshapeMatrix64F getQ(org.ejml.data.ReshapeMatrix64F, boolean);
  public org.ejml.data.ReshapeMatrix64F getT(org.ejml.data.ReshapeMatrix64F);
}
Compiled from "BenchmarkLuDecomposition.java"
public class org.ejml.alg.dense.decomposition.lu.BenchmarkLuDecomposition {
  public org.ejml.alg.dense.decomposition.lu.BenchmarkLuDecomposition();
  public static void benchmark(org.ejml.interfaces.decomposition.LUDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "GeneralLuDecompositionChecks.java"
public abstract class org.ejml.alg.dense.decomposition.lu.GeneralLuDecompositionChecks {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.lu.GeneralLuDecompositionChecks();
  public abstract org.ejml.interfaces.decomposition.LUDecomposition<org.ejml.data.DenseMatrix64F> create(int, int);
  public void testModifiedInput();
  public void testDecomposition();
  public void testDecomposition2();
  public void zeroMatrix();
  public void testSingular();
  public void testNearlySingular();
  public void getLower_getUpper();
  public void testFat();
  public void testTall();
}
Compiled from "LUDecompositionAlt_D64.java"
public class org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt_D64 extends org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64 {
  public org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt_D64();
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "LUDecompositionBase_D64.java"
public abstract class org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64 implements org.ejml.interfaces.decomposition.LUDecomposition<org.ejml.data.DenseMatrix64F> {
  protected org.ejml.data.DenseMatrix64F LU;
  protected int maxWidth;
  protected int m;
  protected int n;
  protected double[] dataLU;
  protected double[] vv;
  protected int[] indx;
  protected int[] pivot;
  protected double pivsign;
  public org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64();
  public void setExpectedMaxSize(int, int);
  public org.ejml.data.DenseMatrix64F getLU();
  public int[] getIndx();
  public int[] getPivot();
  public boolean inputModified();
  public org.ejml.data.DenseMatrix64F getLower(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getUpper(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getPivot(org.ejml.data.DenseMatrix64F);
  protected void decomposeCommonInit(org.ejml.data.DenseMatrix64F);
  public boolean isSingular();
  public double computeDeterminant();
  public double quality();
  public void _solveVectorInternal(double[]);
  public double[] _getVV();
  public org.ejml.data.Matrix64F getPivot(org.ejml.data.Matrix64F);
  public org.ejml.data.Matrix64F getUpper(org.ejml.data.Matrix64F);
  public org.ejml.data.Matrix64F getLower(org.ejml.data.Matrix64F);
}
Compiled from "LUDecompositionNR.java"
public class org.ejml.alg.dense.decomposition.lu.LUDecompositionNR extends org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64 {
  public org.ejml.alg.dense.decomposition.lu.LUDecompositionNR();
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "TestLUDecompositionAlt_D64.java"
public class org.ejml.alg.dense.decomposition.lu.TestLUDecompositionAlt_D64 extends org.ejml.alg.dense.decomposition.lu.GeneralLuDecompositionChecks {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.lu.TestLUDecompositionAlt_D64();
  public org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64 create(int, int);
  public org.ejml.interfaces.decomposition.LUDecomposition create(int, int);
}
Compiled from "TestLUDecompositionBase_D64.java"
public class org.ejml.alg.dense.decomposition.lu.TestLUDecompositionBase_D64 {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.lu.TestLUDecompositionBase_D64();
  public void testDeterminant();
  public void _solveVectorInternal();
}
Compiled from "TestLUDecompositionBase_D64.java"
class org.ejml.alg.dense.decomposition.lu.TestLUDecompositionBase_D64$DebugDecompose extends org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64 {
  public org.ejml.alg.dense.decomposition.lu.TestLUDecompositionBase_D64$DebugDecompose(int);
  void setLU(org.ejml.data.DenseMatrix64F);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "BenchmarkQrDecomposition.java"
public class org.ejml.alg.dense.decomposition.qr.BenchmarkQrDecomposition {
  public org.ejml.alg.dense.decomposition.qr.BenchmarkQrDecomposition();
  public static long generic(org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F, int);
  public static long block(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "GenericQrCheck.java"
public abstract class org.ejml.alg.dense.decomposition.qr.GenericQrCheck {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.qr.GenericQrCheck();
  protected abstract org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.DenseMatrix64F> createQRDecomposition();
  public void testModifiedInput();
  public void decompositionShape();
  public void checkGetNullVersusNot();
  public void checkGetRInputSize();
  public void checkCompactFormat();
}
Compiled from "QRColPivDecompositionHouseholderColumn_D64.java"
public class org.ejml.alg.dense.decomposition.qr.QRColPivDecompositionHouseholderColumn_D64 extends org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderColumn_D64 implements org.ejml.interfaces.decomposition.QRPDecomposition<org.ejml.data.DenseMatrix64F> {
  protected int[] pivots;
  protected double[] normsCol;
  protected double singularThreshold;
  protected int rank;
  public org.ejml.alg.dense.decomposition.qr.QRColPivDecompositionHouseholderColumn_D64(double);
  public org.ejml.alg.dense.decomposition.qr.QRColPivDecompositionHouseholderColumn_D64();
  public void setSingularThreshold(double);
  public void setExpectedMaxSize(int, int);
  public org.ejml.data.DenseMatrix64F getQ(org.ejml.data.DenseMatrix64F, boolean);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  protected boolean householderPivot(int);
  public int getRank();
  public int[] getPivots();
  public org.ejml.data.DenseMatrix64F getPivotMatrix(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.Matrix64F getQ(org.ejml.data.Matrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "QRDecompositionHouseholderColumn_D64.java"
public class org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderColumn_D64 implements org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.DenseMatrix64F> {
  protected double[][] dataQR;
  protected double[] v;
  protected int numCols;
  protected int numRows;
  protected int minLength;
  protected double[] gammas;
  protected double gamma;
  protected double tau;
  protected boolean error;
  public org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderColumn_D64();
  public void setExpectedMaxSize(int, int);
  public double[][] getQR();
  public org.ejml.data.DenseMatrix64F getQ(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getR(org.ejml.data.DenseMatrix64F, boolean);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  protected void convertToColumnMajor(org.ejml.data.DenseMatrix64F);
  protected void householder(int);
  protected void updateA(int);
  public double[] getGammas();
  public org.ejml.data.Matrix64F getR(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getQ(org.ejml.data.Matrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "QRDecompositionHouseholderTran_D64.java"
public class org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderTran_D64 implements org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.DenseMatrix64F> {
  protected org.ejml.data.DenseMatrix64F QR;
  protected double[] v;
  protected int numCols;
  protected int numRows;
  protected int minLength;
  protected double[] gammas;
  protected double gamma;
  protected double tau;
  protected boolean error;
  public org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderTran_D64();
  public void setExpectedMaxSize(int, int);
  public org.ejml.data.DenseMatrix64F getQR();
  public org.ejml.data.DenseMatrix64F getQ(org.ejml.data.DenseMatrix64F, boolean);
  public void applyQ(org.ejml.data.DenseMatrix64F);
  public void applyTranQ(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getR(org.ejml.data.DenseMatrix64F, boolean);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  protected void householder(int);
  protected void updateA(int);
  public double[] getGammas();
  public org.ejml.data.Matrix64F getR(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getQ(org.ejml.data.Matrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "QRDecompositionHouseholder_D64.java"
public class org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholder_D64 implements org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.DenseMatrix64F> {
  protected org.ejml.data.DenseMatrix64F QR;
  protected double[] u;
  protected double[] v;
  protected int numCols;
  protected int numRows;
  protected int minLength;
  protected double[] dataQR;
  protected double[] gammas;
  protected double gamma;
  protected double tau;
  protected boolean error;
  public org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholder_D64();
  public void setExpectedMaxSize(int, int);
  public org.ejml.data.DenseMatrix64F getQR();
  public org.ejml.data.DenseMatrix64F getQ(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getR(org.ejml.data.DenseMatrix64F, boolean);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  protected void householder(int);
  protected void updateA(int);
  protected void commonSetup(org.ejml.data.DenseMatrix64F);
  public double[] getGammas();
  public org.ejml.data.Matrix64F getR(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getQ(org.ejml.data.Matrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "QRDecomposition_B64_to_D64.java"
public class org.ejml.alg.dense.decomposition.qr.QRDecomposition_B64_to_D64 extends org.ejml.alg.dense.decomposition.BaseDecomposition_B64_to_D64 implements org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.DenseMatrix64F> {
  public org.ejml.alg.dense.decomposition.qr.QRDecomposition_B64_to_D64();
  public org.ejml.data.DenseMatrix64F getQ(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getR(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.Matrix64F getR(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getQ(org.ejml.data.Matrix64F, boolean);
}
Compiled from "QrHelperFunctions.java"
public class org.ejml.alg.dense.decomposition.qr.QrHelperFunctions {
  public org.ejml.alg.dense.decomposition.qr.QrHelperFunctions();
  public static double findMax(double[], int, int);
  public static void divideElements(int, int, double[], double);
  public static void divideElements(int, int, double[], int, double);
  public static void divideElements_Brow(int, int, double[], double[], int, double);
  public static void divideElements_Bcol(int, int, int, double[], double[], int, double);
  public static double computeTauAndDivide(int, int, double[], int, double);
  public static double computeTauAndDivide(int, int, double[], double);
  public static void rank1UpdateMultR(org.ejml.data.DenseMatrix64F, double[], double, int, int, int, double[]);
  public static void rank1UpdateMultR(org.ejml.data.DenseMatrix64F, double[], int, double, int, int, int, double[]);
  public static void rank1UpdateMultL(org.ejml.data.DenseMatrix64F, double[], double, int, int, int);
}
Compiled from "QrUpdate.java"
public class org.ejml.alg.dense.decomposition.qr.QrUpdate {
  public org.ejml.alg.dense.decomposition.qr.QrUpdate(int, int);
  public org.ejml.alg.dense.decomposition.qr.QrUpdate(int, int, boolean);
  public org.ejml.alg.dense.decomposition.qr.QrUpdate();
  public void declareInternalData(int, int);
  public void addRow(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, double[], int, boolean);
  public void deleteRow(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int, boolean);
  public org.ejml.data.DenseMatrix64F getU_tran();
}
Compiled from "StabilityQRDecomposition.java"
public class org.ejml.alg.dense.decomposition.qr.StabilityQRDecomposition {
  public org.ejml.alg.dense.decomposition.qr.StabilityQRDecomposition();
  public static double evaluate(org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F);
  public static double evaluate(org.ejml.interfaces.decomposition.QRPDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F);
  public static void main(java.lang.String[]);
}
Compiled from "TestQRColPivDecompositionHouseholderColumn_D64.java"
public class org.ejml.alg.dense.decomposition.qr.TestQRColPivDecompositionHouseholderColumn_D64 {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.qr.TestQRColPivDecompositionHouseholderColumn_D64();
  public void noPivot();
  public void testRankDeficient();
  public void testRandomMatrix();
  public void testZeroMatrix();
}
Compiled from "TestQRDecompositionHouseholderColumn_D64.java"
public class org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholderColumn_D64 extends org.ejml.alg.dense.decomposition.qr.GenericQrCheck {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholderColumn_D64();
  protected org.ejml.interfaces.decomposition.QRDecomposition createQRDecomposition();
  public void householder();
  public void updateA();
}
Compiled from "TestQRDecompositionHouseholderColumn_D64.java"
class org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholderColumn_D64$DebugQR extends org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderColumn_D64 {
  public org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholderColumn_D64$DebugQR(int, int);
  public void householder(int, org.ejml.data.DenseMatrix64F);
  protected void convertToColumnMajor(org.ejml.data.DenseMatrix64F);
  public void updateA(int, double[], double, double);
  public double getGamma();
}
Compiled from "TestQRDecompositionHouseholderTran_D64.java"
public class org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholderTran_D64 extends org.ejml.alg.dense.decomposition.qr.GenericQrCheck {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholderTran_D64();
  protected org.ejml.interfaces.decomposition.QRDecomposition createQRDecomposition();
  public void applyQ();
  public void applyTranQ();
  public void householder();
  public void updateA();
}
Compiled from "TestQRDecompositionHouseholderTran_D64.java"
class org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholderTran_D64$DebugQR extends org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderTran_D64 {
  public org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholderTran_D64$DebugQR(int, int);
  public void householder(int, org.ejml.data.DenseMatrix64F);
  public void updateA(int, double[], double, double);
  public double[] getU(int);
  public double getGamma();
}
Compiled from "TestQRDecompositionHouseholder_D64.java"
public class org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholder_D64 extends org.ejml.alg.dense.decomposition.qr.GenericQrCheck {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholder_D64();
  protected org.ejml.interfaces.decomposition.QRDecomposition createQRDecomposition();
  public void householder();
  public void updateA();
}
Compiled from "TestQRDecompositionHouseholder_D64.java"
class org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholder_D64$DebugQR extends org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholder_D64 {
  public org.ejml.alg.dense.decomposition.qr.TestQRDecompositionHouseholder_D64$DebugQR(int, int);
  public void householder(int, org.ejml.data.DenseMatrix64F);
  public void updateA(int, double[], double, double);
  public double[] getU();
  public double getGamma();
}
Compiled from "TestQRDecomposition_B64_to_D64.java"
public class org.ejml.alg.dense.decomposition.qr.TestQRDecomposition_B64_to_D64 extends org.ejml.alg.dense.decomposition.qr.GenericQrCheck {
  public org.ejml.alg.dense.decomposition.qr.TestQRDecomposition_B64_to_D64();
  protected org.ejml.interfaces.decomposition.QRDecomposition createQRDecomposition();
}
Compiled from "TestQrUpdate.java"
public class org.ejml.alg.dense.decomposition.qr.TestQrUpdate {
  java.util.Random rand;
  public org.ejml.alg.dense.decomposition.qr.TestQrUpdate();
  public void testInsertRow();
  public void testRemoveRow();
  public static org.ejml.data.DenseMatrix64F createQMod(org.ejml.data.DenseMatrix64F, int);
}
Compiled from "BenchmarkSvd.java"
public class org.ejml.alg.dense.decomposition.svd.BenchmarkSvd {
  public org.ejml.alg.dense.decomposition.svd.BenchmarkSvd();
  public static java.lang.String evaluate(org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "SafeSvd.java"
public class org.ejml.alg.dense.decomposition.svd.SafeSvd implements org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F> {
  org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F> alg;
  org.ejml.data.DenseMatrix64F work;
  public org.ejml.alg.dense.decomposition.svd.SafeSvd(org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F>);
  public double[] getSingularValues();
  public int numberOfSingularValues();
  public boolean isCompact();
  public org.ejml.data.DenseMatrix64F getU(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getV(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getW(org.ejml.data.DenseMatrix64F);
  public int numRows();
  public int numCols();
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public org.ejml.data.Matrix64F getW(org.ejml.data.Matrix64F);
  public org.ejml.data.Matrix64F getV(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getU(org.ejml.data.Matrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "SmartRotatorUpdate.java"
public class org.ejml.alg.dense.decomposition.svd.SmartRotatorUpdate {
  org.ejml.data.DenseMatrix64F R;
  int[] mod;
  public org.ejml.alg.dense.decomposition.svd.SmartRotatorUpdate();
  public org.ejml.data.DenseMatrix64F getR();
  public void init(org.ejml.data.DenseMatrix64F);
  public void update(int, int, double, double);
}
Compiled from "StabilitySvdlDecomposition.java"
public class org.ejml.alg.dense.decomposition.svd.StabilitySvdlDecomposition {
  public org.ejml.alg.dense.decomposition.svd.StabilitySvdlDecomposition();
  public static double evaluate(org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "StandardSvdChecks.java"
public abstract class org.ejml.alg.dense.decomposition.svd.StandardSvdChecks {
  java.util.Random rand;
  boolean omitVerySmallValues;
  public org.ejml.alg.dense.decomposition.svd.StandardSvdChecks();
  public abstract org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F> createSvd();
  public void allTests();
  public void testDecompositionOfTrivial();
  public void testWide();
  public void testTall();
  public void testZero();
  public void testIdentity();
  public void testLarger();
  public void testVerySmallValue();
  public void testLots();
  public void checkGetU_Transpose();
  public void checkGetU_Storage();
  public void checkGetV_Transpose();
  public void checkGetV_Storage();
  public void testLargeToSmall();
}
Compiled from "SvdImplicitQrAlgorithmSmart.java"
public class org.ejml.alg.dense.decomposition.svd.SvdImplicitQrAlgorithmSmart extends org.ejml.alg.dense.decomposition.svd.implicitqr.SvdImplicitQrAlgorithm {
  org.ejml.alg.dense.decomposition.svd.SmartRotatorUpdate smartU;
  org.ejml.alg.dense.decomposition.svd.SmartRotatorUpdate smartV;
  public org.ejml.alg.dense.decomposition.svd.SvdImplicitQrAlgorithmSmart();
  public void setUt(org.ejml.data.DenseMatrix64F);
  public void setVt(org.ejml.data.DenseMatrix64F);
  protected void updateRotator(org.ejml.data.DenseMatrix64F, int, int, double, double);
}
Compiled from "SvdImplicitQrDecompose_D64.java"
public class org.ejml.alg.dense.decomposition.svd.SvdImplicitQrDecompose_D64 implements org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F> {
  double[] diag;
  double[] off;
  public org.ejml.alg.dense.decomposition.svd.SvdImplicitQrDecompose_D64(boolean, boolean, boolean, boolean);
  public double[] getSingularValues();
  public int numberOfSingularValues();
  public boolean isCompact();
  public org.ejml.data.DenseMatrix64F getU(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getV(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getW(org.ejml.data.DenseMatrix64F);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public int numRows();
  public int numCols();
  public org.ejml.data.Matrix64F getW(org.ejml.data.Matrix64F);
  public org.ejml.data.Matrix64F getV(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getU(org.ejml.data.Matrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "SvdImplicitQrDecompose_Ultimate.java"
public class org.ejml.alg.dense.decomposition.svd.SvdImplicitQrDecompose_Ultimate implements org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F> {
  public org.ejml.alg.dense.decomposition.svd.SvdImplicitQrDecompose_Ultimate(boolean, boolean, boolean);
  public double[] getSingularValues();
  public int numberOfSingularValues();
  public boolean isCompact();
  public org.ejml.data.DenseMatrix64F getU(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getV(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getW(org.ejml.data.DenseMatrix64F);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public int numRows();
  public int numCols();
  public org.ejml.data.Matrix64F getW(org.ejml.data.Matrix64F);
  public org.ejml.data.Matrix64F getV(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getU(org.ejml.data.Matrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "SvdImplicitQrDecompose_UltimateS.java"
public class org.ejml.alg.dense.decomposition.svd.SvdImplicitQrDecompose_UltimateS implements org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F> {
  public org.ejml.alg.dense.decomposition.svd.SvdImplicitQrDecompose_UltimateS(boolean, boolean, boolean);
  public double[] getSingularValues();
  public int numberOfSingularValues();
  public boolean isCompact();
  public org.ejml.data.DenseMatrix64F getU(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getV(org.ejml.data.DenseMatrix64F, boolean);
  public org.ejml.data.DenseMatrix64F getW(org.ejml.data.DenseMatrix64F);
  public boolean decompose(org.ejml.data.DenseMatrix64F);
  public boolean inputModified();
  public int numRows();
  public int numCols();
  public org.ejml.data.Matrix64F getW(org.ejml.data.Matrix64F);
  public org.ejml.data.Matrix64F getV(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getU(org.ejml.data.Matrix64F, boolean);
  public boolean decompose(org.ejml.data.Matrix64F);
}
Compiled from "TestSafeSvd.java"
public class org.ejml.alg.dense.decomposition.svd.TestSafeSvd {
  public org.ejml.alg.dense.decomposition.svd.TestSafeSvd();
  public void getSafety();
  public void checkOtherFunctions();
}
Compiled from "TestSafeSvd.java"
class org.ejml.alg.dense.decomposition.svd.TestSafeSvd$1 {
}
Compiled from "TestSafeSvd.java"
public class org.ejml.alg.dense.decomposition.svd.TestSafeSvd$Dummy implements org.ejml.interfaces.decomposition.SingularValueDecomposition {
  org.ejml.data.Matrix64F passedInMatrix;
  boolean compact;
  double[] singular;
  boolean getU_called;
  boolean getV_called;
  boolean getW_called;
  int numRow;
  int numCol;
  boolean inputModified;
  public double[] getSingularValues();
  public int numberOfSingularValues();
  public boolean isCompact();
  public org.ejml.data.ReshapeMatrix64F getU(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.ReshapeMatrix64F getV(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.ReshapeMatrix64F getW(org.ejml.data.Matrix64F);
  public int numRows();
  public int numCols();
  public boolean decompose(org.ejml.data.Matrix64F);
  public boolean inputModified();
  public org.ejml.data.Matrix64F getW(org.ejml.data.Matrix64F);
  public org.ejml.data.Matrix64F getV(org.ejml.data.Matrix64F, boolean);
  public org.ejml.data.Matrix64F getU(org.ejml.data.Matrix64F, boolean);
  org.ejml.alg.dense.decomposition.svd.TestSafeSvd$Dummy(int, boolean, boolean, int, int, org.ejml.alg.dense.decomposition.svd.TestSafeSvd$1);
}
Compiled from "TestSvdImplicitQrDecompose_D64.java"
public class org.ejml.alg.dense.decomposition.svd.TestSvdImplicitQrDecompose_D64 extends org.ejml.alg.dense.decomposition.svd.StandardSvdChecks {
  boolean compact;
  boolean needU;
  boolean needV;
  public org.ejml.alg.dense.decomposition.svd.TestSvdImplicitQrDecompose_D64();
  public org.ejml.interfaces.decomposition.SingularValueDecomposition createSvd();
  public void checkCompact();
  public void checkNotCompact();
  public void checkAllPermutations();
  public void testPartial(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, double[], org.ejml.data.DenseMatrix64F, boolean, boolean);
}
Compiled from "SvdImplicitQrAlgorithm.java"
public class org.ejml.alg.dense.decomposition.svd.implicitqr.SvdImplicitQrAlgorithm {
  protected java.util.Random rand;
  protected org.ejml.data.DenseMatrix64F Ut;
  protected org.ejml.data.DenseMatrix64F Vt;
  protected int totalSteps;
  protected double maxValue;
  protected int N;
  protected org.ejml.alg.dense.decomposition.eig.EigenvalueSmall eigenSmall;
  protected int numExceptional;
  protected int nextExceptional;
  protected double[] diag;
  protected double[] off;
  double bulge;
  protected int x1;
  protected int x2;
  int steps;
  protected int[] splits;
  protected int numSplits;
  boolean followScript;
  double c;
  double s;
  public org.ejml.alg.dense.decomposition.svd.implicitqr.SvdImplicitQrAlgorithm(boolean);
  public org.ejml.alg.dense.decomposition.svd.implicitqr.SvdImplicitQrAlgorithm();
  public org.ejml.data.DenseMatrix64F getUt();
  public void setUt(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getVt();
  public void setVt(org.ejml.data.DenseMatrix64F);
  public void setMatrix(int, int, double[], double[]);
  public double[] swapDiag(double[]);
  public double[] swapOff(double[]);
  public void setMaxValue(double);
  public void initParam(int, int);
  public boolean process();
  public boolean process(double[]);
  public boolean _process();
  public void incrementSteps();
  public boolean isOffZero(int);
  public boolean isDiagonalZero(int);
  public void resetSteps();
  public boolean nextSplit();
  public void performImplicitSingleStep(double, double, boolean);
  protected void updateRotator(org.ejml.data.DenseMatrix64F, int, int, double, double);
  protected void createBulge(int, double, double, boolean);
  protected void computeRotator(double, double);
  protected void removeBulgeLeft(int, boolean);
  protected void removeBulgeRight(int);
  public void setSubmatrix(int, int);
  public double selectWilkinsonShift(double);
  protected void eigenBB_2x2(int);
  protected boolean checkForAndHandleZeros();
  public void exceptionShift();
  public void printMatrix();
  public int getNumberOfSingularValues();
  public double getSingularValue(int);
  public void setFastValues(boolean);
  public double[] getSingularValues();
  public double[] getDiag();
  public double[] getOff();
  public double getMaxValue();
}
Compiled from "TestSvdImplicitQrAlgorithm.java"
public class org.ejml.alg.dense.decomposition.svd.implicitqr.TestSvdImplicitQrAlgorithm {
  public org.ejml.alg.dense.decomposition.svd.implicitqr.TestSvdImplicitQrAlgorithm();
  public void oneBidiagonalMatrix();
  public void knownDiagonal();
  public void zeroOnDiagonal();
  public void knownCaseSquare();
  public void zeroOnDiagonalFull();
  public void randomMatricesFullDecompose();
  public static org.ejml.alg.dense.decomposition.svd.implicitqr.SvdImplicitQrAlgorithm createHelper(org.ejml.data.DenseMatrix64F);
  public static org.ejml.alg.dense.decomposition.svd.implicitqr.SvdImplicitQrAlgorithm createHelper(int, int, double[], double[]);
  public int countNumFound(org.ejml.alg.dense.decomposition.svd.implicitqr.SvdImplicitQrAlgorithm, double, double);
}
Compiled from "AdjustableLinearSolver.java"
public interface org.ejml.alg.dense.linsol.AdjustableLinearSolver extends org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> {
  public abstract boolean addRowToA(double[], int);
  public abstract boolean removeRowFromA(int);
}
Compiled from "BenchmarkInverseStability.java"
public class org.ejml.alg.dense.linsol.BenchmarkInverseStability {
  public org.ejml.alg.dense.linsol.BenchmarkInverseStability();
  public void evaluateAll();
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkInvertSquare.java"
public class org.ejml.alg.dense.linsol.BenchmarkInvertSquare {
  public org.ejml.alg.dense.linsol.BenchmarkInvertSquare();
  public static long invertBenchmark(org.ejml.interfaces.linsol.LinearSolver, org.ejml.data.DenseMatrix64F, int);
  public static long invertUnrolledBenchmark(org.ejml.data.DenseMatrix64F, int);
  public static long invertOpsBenchmark(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkInvertSymPosDef.java"
public class org.ejml.alg.dense.linsol.BenchmarkInvertSymPosDef {
  public org.ejml.alg.dense.linsol.BenchmarkInvertSymPosDef();
  public static long invertCovar(org.ejml.data.DenseMatrix64F, int);
  public static long invertCholesky(org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkRectSolve.java"
public class org.ejml.alg.dense.linsol.BenchmarkRectSolve {
  public org.ejml.alg.dense.linsol.BenchmarkRectSolve();
  public static long solveBenchmark(org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F>, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkSolveEq.java"
public class org.ejml.alg.dense.linsol.BenchmarkSolveEq {
  public org.ejml.alg.dense.linsol.BenchmarkSolveEq();
  public static long solveBenchmark(org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F>, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkSolveOver.java"
public class org.ejml.alg.dense.linsol.BenchmarkSolveOver {
  public org.ejml.alg.dense.linsol.BenchmarkSolveOver();
  public static long solveBenchmark(org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F>, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkSolvePseudoInverse.java"
public class org.ejml.alg.dense.linsol.BenchmarkSolvePseudoInverse {
  public org.ejml.alg.dense.linsol.BenchmarkSolvePseudoInverse();
  public static long solveBenchmark(org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F>, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkSolveSymPosDef.java"
public class org.ejml.alg.dense.linsol.BenchmarkSolveSymPosDef {
  public org.ejml.alg.dense.linsol.BenchmarkSolveSymPosDef();
  public static long solve(org.ejml.interfaces.linsol.LinearSolver, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "GenericLinearSolverChecks.java"
public abstract class org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  protected java.util.Random rand;
  protected boolean shouldFailSingular;
  protected boolean shouldWorkRectangle;
  protected double tol;
  public org.ejml.alg.dense.linsol.GenericLinearSolverChecks();
  public void solve_dimensionCheck();
  public void modifiesA();
  public void modifiesB();
  public void checkQuality();
  public void checkQuality_scale();
  public void square_trivial();
  public void square_pivot();
  public void square_singular();
  public void rectangular();
  public void inverse();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSafeSolver(org.ejml.data.DenseMatrix64F);
  protected abstract org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "GenericSolvePseudoInverseChecks.java"
public class org.ejml.alg.dense.linsol.GenericSolvePseudoInverseChecks {
  java.util.Random rand;
  org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> solver;
  public org.ejml.alg.dense.linsol.GenericSolvePseudoInverseChecks(org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F>);
  public void all();
  public void underDetermined_wide_solve();
  public void underDetermined_wide_inv();
  public void underDetermined_tall_solve();
  public void singular_solve();
  public void singular_inv();
}
Compiled from "InvertUsingSolve.java"
public class org.ejml.alg.dense.linsol.InvertUsingSolve {
  public org.ejml.alg.dense.linsol.InvertUsingSolve();
  public static void invert(org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F>, org.ejml.data.RowD1Matrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void invert(org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F>, org.ejml.data.RowD1Matrix64F, org.ejml.data.DenseMatrix64F);
}
Compiled from "LinearSolverAbstract.java"
public abstract class org.ejml.alg.dense.linsol.LinearSolverAbstract implements org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> {
  protected org.ejml.data.DenseMatrix64F A;
  protected int numRows;
  protected int numCols;
  public org.ejml.alg.dense.linsol.LinearSolverAbstract();
  public org.ejml.data.DenseMatrix64F getA();
  protected void _setA(org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverSafe.java"
public class org.ejml.alg.dense.linsol.LinearSolverSafe<T extends org.ejml.data.ReshapeMatrix64F> implements org.ejml.interfaces.linsol.LinearSolver<T> {
  public org.ejml.alg.dense.linsol.LinearSolverSafe(org.ejml.interfaces.linsol.LinearSolver<T>);
  public boolean setA(T);
  public double quality();
  public void solve(T, T);
  public void invert(T);
  public boolean modifiesA();
  public boolean modifiesB();
  public void invert(org.ejml.data.Matrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverUnrolled.java"
public class org.ejml.alg.dense.linsol.LinearSolverUnrolled implements org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> {
  org.ejml.data.DenseMatrix64F A;
  public org.ejml.alg.dense.linsol.LinearSolverUnrolled();
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void invert(org.ejml.data.Matrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolver_B64_to_D64.java"
public class org.ejml.alg.dense.linsol.LinearSolver_B64_to_D64 implements org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> {
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.BlockMatrix64F> alg;
  protected org.ejml.data.BlockMatrix64F blockA;
  protected org.ejml.data.BlockMatrix64F blockB;
  protected org.ejml.data.BlockMatrix64F blockX;
  public org.ejml.alg.dense.linsol.LinearSolver_B64_to_D64(org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.BlockMatrix64F>);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void invert(org.ejml.data.Matrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "TestInvertUsingSolve.java"
public class org.ejml.alg.dense.linsol.TestInvertUsingSolve {
  java.util.Random rand;
  double tol;
  public org.ejml.alg.dense.linsol.TestInvertUsingSolve();
  public void invert();
}
Compiled from "TestLinearSolverAbstract.java"
public class org.ejml.alg.dense.linsol.TestLinearSolverAbstract {
  public org.ejml.alg.dense.linsol.TestLinearSolverAbstract();
  public void setA_getA();
  public void invert();
}
Compiled from "TestLinearSolverAbstract.java"
class org.ejml.alg.dense.linsol.TestLinearSolverAbstract$1 {
}
Compiled from "TestLinearSolverAbstract.java"
class org.ejml.alg.dense.linsol.TestLinearSolverAbstract$MySolver extends org.ejml.alg.dense.linsol.LinearSolverAbstract {
  boolean solveCalled;
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
  org.ejml.alg.dense.linsol.TestLinearSolverAbstract$MySolver(org.ejml.alg.dense.linsol.TestLinearSolverAbstract$1);
}
Compiled from "TestLinearSolverSafe.java"
public class org.ejml.alg.dense.linsol.TestLinearSolverSafe {
  java.util.Random rand;
  org.ejml.data.DenseMatrix64F Ainput;
  org.ejml.data.DenseMatrix64F Binput;
  public org.ejml.alg.dense.linsol.TestLinearSolverSafe();
  public void multipleCalls_setA();
  public void multipleCalls_setB();
  public void testSetA_notMod();
  public void testSetA_mod();
  public void testSolver_notMod();
  public void testSolver_mod();
  public void quality();
  public void modifies();
}
Compiled from "TestLinearSolverSafe.java"
class org.ejml.alg.dense.linsol.TestLinearSolverSafe$1 {
}
Compiled from "TestLinearSolverSafe.java"
class org.ejml.alg.dense.linsol.TestLinearSolverSafe$DummySolver implements org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> {
  boolean modifiesA;
  boolean modifiesB;
  org.ejml.data.DenseMatrix64F passedin;
  double expectedA;
  double expectedB;
  final org.ejml.alg.dense.linsol.TestLinearSolverSafe this$0;
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void invert(org.ejml.data.Matrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
  org.ejml.alg.dense.linsol.TestLinearSolverSafe$DummySolver(org.ejml.alg.dense.linsol.TestLinearSolverSafe, boolean, boolean, org.ejml.alg.dense.linsol.TestLinearSolverSafe$1);
}
Compiled from "TestLinearSolver_B64_to_D64.java"
public class org.ejml.alg.dense.linsol.TestLinearSolver_B64_to_D64 extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.TestLinearSolver_B64_to_D64();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "BaseCholeskySolveTests.java"
public abstract class org.ejml.alg.dense.linsol.chol.BaseCholeskySolveTests {
  java.util.Random rand;
  public org.ejml.alg.dense.linsol.chol.BaseCholeskySolveTests();
  public void standardTests();
  public abstract org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver();
  public org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSafeSolver();
  public void setA_dimensionCheck();
  public void solve_dimensionCheck();
  public void testSolve();
  public void testInvert();
  public void testQuality();
  public void testQuality_scale();
}
Compiled from "LinearSolverChol.java"
public class org.ejml.alg.dense.linsol.chol.LinearSolverChol extends org.ejml.alg.dense.linsol.LinearSolverAbstract {
  org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionCommon_D64 decomp;
  int n;
  double[] vv;
  double[] t;
  public org.ejml.alg.dense.linsol.chol.LinearSolverChol(org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionCommon_D64);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.DenseMatrix64F);
  public void setToInverseL(double[]);
  public boolean modifiesA();
  public boolean modifiesB();
  public void invert(org.ejml.data.Matrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverCholBlock64.java"
public class org.ejml.alg.dense.linsol.chol.LinearSolverCholBlock64 extends org.ejml.alg.dense.linsol.LinearSolver_B64_to_D64 {
  public org.ejml.alg.dense.linsol.chol.LinearSolverCholBlock64();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverCholLDL.java"
public class org.ejml.alg.dense.linsol.chol.LinearSolverCholLDL extends org.ejml.alg.dense.linsol.LinearSolverAbstract {
  public org.ejml.alg.dense.linsol.chol.LinearSolverCholLDL(org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL_D64);
  public org.ejml.alg.dense.linsol.chol.LinearSolverCholLDL();
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void invert(org.ejml.data.Matrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "TestLinearSolverChol.java"
public class org.ejml.alg.dense.linsol.chol.TestLinearSolverChol extends org.ejml.alg.dense.linsol.chol.BaseCholeskySolveTests {
  public org.ejml.alg.dense.linsol.chol.TestLinearSolverChol();
  public org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver();
}
Compiled from "TestLinearSolverCholBlock64.java"
public class org.ejml.alg.dense.linsol.chol.TestLinearSolverCholBlock64 extends org.ejml.alg.dense.linsol.chol.BaseCholeskySolveTests {
  public org.ejml.alg.dense.linsol.chol.TestLinearSolverCholBlock64();
  public org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver();
}
Compiled from "TestLinearSolverCholLDL.java"
public class org.ejml.alg.dense.linsol.chol.TestLinearSolverCholLDL {
  java.util.Random rand;
  public org.ejml.alg.dense.linsol.chol.TestLinearSolverCholLDL();
  public void testInverseAndSolve();
}
Compiled from "LinearSolverLu.java"
public class org.ejml.alg.dense.linsol.lu.LinearSolverLu extends org.ejml.alg.dense.linsol.lu.LinearSolverLuBase {
  boolean doImprove;
  public org.ejml.alg.dense.linsol.lu.LinearSolverLu(org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64);
  public org.ejml.alg.dense.linsol.lu.LinearSolverLu(org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64, boolean);
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverLuBase.java"
public abstract class org.ejml.alg.dense.linsol.lu.LinearSolverLuBase extends org.ejml.alg.dense.linsol.LinearSolverAbstract {
  protected org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64 decomp;
  public org.ejml.alg.dense.linsol.lu.LinearSolverLuBase(org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void invert(org.ejml.data.DenseMatrix64F);
  public void improveSol(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void invert(org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverLuKJI.java"
public class org.ejml.alg.dense.linsol.lu.LinearSolverLuKJI extends org.ejml.alg.dense.linsol.lu.LinearSolverLuBase {
  public org.ejml.alg.dense.linsol.lu.LinearSolverLuKJI(org.ejml.alg.dense.decomposition.lu.LUDecompositionBase_D64);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "TestLinearSolverLu.java"
public class org.ejml.alg.dense.linsol.lu.TestLinearSolverLu extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.lu.TestLinearSolverLu();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "TestLinearSolverLuBase.java"
public class org.ejml.alg.dense.linsol.lu.TestLinearSolverLuBase {
  java.util.Random rand;
  public org.ejml.alg.dense.linsol.lu.TestLinearSolverLuBase();
  public void testImproveSol_noharm();
}
Compiled from "TestLinearSolverLuKJI.java"
public class org.ejml.alg.dense.linsol.lu.TestLinearSolverLuKJI extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.lu.TestLinearSolverLuKJI();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "AdjLinearSolverQr.java"
public class org.ejml.alg.dense.linsol.qr.AdjLinearSolverQr extends org.ejml.alg.dense.linsol.qr.LinearSolverQr implements org.ejml.alg.dense.linsol.AdjustableLinearSolver {
  public org.ejml.alg.dense.linsol.qr.AdjLinearSolverQr();
  public void setMaxSize(int, int);
  public org.ejml.data.DenseMatrix64F getA();
  public boolean addRowToA(double[], int);
  public boolean removeRowFromA(int);
}
Compiled from "BaseLinearSolverQrp.java"
public abstract class org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp extends org.ejml.alg.dense.linsol.LinearSolverAbstract {
  org.ejml.interfaces.decomposition.QRPDecomposition<org.ejml.data.DenseMatrix64F> decomposition;
  protected boolean norm2Solution;
  protected org.ejml.data.DenseMatrix64F Y;
  protected org.ejml.data.DenseMatrix64F R;
  protected org.ejml.data.DenseMatrix64F R11;
  protected org.ejml.data.DenseMatrix64F I;
  protected int rank;
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> internalSolver;
  protected org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp(org.ejml.interfaces.decomposition.QRPDecomposition<org.ejml.data.DenseMatrix64F>, boolean);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  protected void upgradeSolution(org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverQr.java"
public class org.ejml.alg.dense.linsol.qr.LinearSolverQr extends org.ejml.alg.dense.linsol.LinearSolverAbstract {
  protected int maxRows;
  protected int maxCols;
  protected org.ejml.data.DenseMatrix64F Q;
  protected org.ejml.data.DenseMatrix64F R;
  public org.ejml.alg.dense.linsol.qr.LinearSolverQr(org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.DenseMatrix64F>);
  public void setMaxSize(int, int);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverQrBlock64.java"
public class org.ejml.alg.dense.linsol.qr.LinearSolverQrBlock64 extends org.ejml.alg.dense.linsol.LinearSolver_B64_to_D64 {
  public org.ejml.alg.dense.linsol.qr.LinearSolverQrBlock64();
}
Compiled from "LinearSolverQrHouse.java"
public class org.ejml.alg.dense.linsol.qr.LinearSolverQrHouse extends org.ejml.alg.dense.linsol.LinearSolverAbstract {
  public org.ejml.alg.dense.linsol.qr.LinearSolverQrHouse();
  public void setMaxSize(int);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverQrHouseCol.java"
public class org.ejml.alg.dense.linsol.qr.LinearSolverQrHouseCol extends org.ejml.alg.dense.linsol.LinearSolverAbstract {
  protected int maxRows;
  protected int maxCols;
  public org.ejml.alg.dense.linsol.qr.LinearSolverQrHouseCol();
  public void setMaxSize(int, int);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverQrHouseTran.java"
public class org.ejml.alg.dense.linsol.qr.LinearSolverQrHouseTran extends org.ejml.alg.dense.linsol.LinearSolverAbstract {
  protected int maxRows;
  protected int maxCols;
  public org.ejml.alg.dense.linsol.qr.LinearSolverQrHouseTran();
  public void setMaxSize(int, int);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "LinearSolverQrpHouseCol.java"
public class org.ejml.alg.dense.linsol.qr.LinearSolverQrpHouseCol extends org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp {
  public org.ejml.alg.dense.linsol.qr.LinearSolverQrpHouseCol(org.ejml.alg.dense.decomposition.qr.QRColPivDecompositionHouseholderColumn_D64, boolean);
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
}
Compiled from "SolvePseudoInverseQrp.java"
public class org.ejml.alg.dense.linsol.qr.SolvePseudoInverseQrp extends org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp {
  public org.ejml.alg.dense.linsol.qr.SolvePseudoInverseQrp(org.ejml.interfaces.decomposition.QRPDecomposition<org.ejml.data.DenseMatrix64F>, boolean);
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "TestAdjLinearSolverQr.java"
public class org.ejml.alg.dense.linsol.qr.TestAdjLinearSolverQr extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.qr.TestAdjLinearSolverQr();
  public void addRowToA();
  public void removeRowFromA();
  protected org.ejml.interfaces.linsol.LinearSolver createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "TestLinearSolverQr.java"
public class org.ejml.alg.dense.linsol.qr.TestLinearSolverQr extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.qr.TestLinearSolverQr();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "TestLinearSolverQrBlock64.java"
public class org.ejml.alg.dense.linsol.qr.TestLinearSolverQrBlock64 extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.qr.TestLinearSolverQrBlock64();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "TestLinearSolverQrHouse.java"
public class org.ejml.alg.dense.linsol.qr.TestLinearSolverQrHouse extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.qr.TestLinearSolverQrHouse();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "TestLinearSolverQrHouseCol.java"
public class org.ejml.alg.dense.linsol.qr.TestLinearSolverQrHouseCol extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.qr.TestLinearSolverQrHouseCol();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "TestLinearSolverQrHouseTran.java"
public class org.ejml.alg.dense.linsol.qr.TestLinearSolverQrHouseTran extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.qr.TestLinearSolverQrHouseTran();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
}
Compiled from "TestSolveLinearSolverQrpHouseCol.java"
public class org.ejml.alg.dense.linsol.qr.TestSolveLinearSolverQrpHouseCol extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.qr.TestSolveLinearSolverQrpHouseCol();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
  public void checkSingularBasic();
  public void checkSingularFull();
}
Compiled from "TestSolvePseudoInverseQrp.java"
public class org.ejml.alg.dense.linsol.qr.TestSolvePseudoInverseQrp extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.qr.TestSolvePseudoInverseQrp();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
  public void checkSingularBasic();
  public void checkSingularFull();
}
Compiled from "SolvePseudoInverseSvd.java"
public class org.ejml.alg.dense.linsol.svd.SolvePseudoInverseSvd implements org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> {
  public org.ejml.alg.dense.linsol.svd.SolvePseudoInverseSvd(int, int);
  public org.ejml.alg.dense.linsol.svd.SolvePseudoInverseSvd();
  public boolean setA(org.ejml.data.DenseMatrix64F);
  public double quality();
  public void solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void invert(org.ejml.data.DenseMatrix64F);
  public boolean modifiesA();
  public boolean modifiesB();
  public void setThreshold(double);
  public void invert(org.ejml.data.Matrix64F);
  public void solve(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public boolean setA(org.ejml.data.Matrix64F);
}
Compiled from "TestSolvePseudoInverseSvd.java"
public class org.ejml.alg.dense.linsol.svd.TestSolvePseudoInverseSvd extends org.ejml.alg.dense.linsol.GenericLinearSolverChecks {
  public org.ejml.alg.dense.linsol.svd.TestSolvePseudoInverseSvd();
  protected org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> createSolver(org.ejml.data.DenseMatrix64F);
  public void checkSingularBasic();
}
Compiled from "BenchmarkDeterminant.java"
public class org.ejml.alg.dense.misc.BenchmarkDeterminant {
  static int TOTAL_TRIALS;
  public org.ejml.alg.dense.misc.BenchmarkDeterminant();
  public static long computeAuto(org.ejml.data.DenseMatrix64F, int);
  public static long computeFixed4x4(org.ejml.data.DenseMatrix64F);
  public static long computeMinor4x4(org.ejml.data.DenseMatrix64F);
  public static long computeLU(org.ejml.data.DenseMatrix64F, int);
  public static long computeMinor(org.ejml.data.DenseMatrix64F, int);
  public static long computeLeibniz(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkImplCommonOps.java"
public class org.ejml.alg.dense.misc.BenchmarkImplCommonOps {
  public org.ejml.alg.dense.misc.BenchmarkImplCommonOps();
  public static long extract_DenseMatrix64F(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long extract_Matrix64F(org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F, int);
  public static long extract_Common(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void benchmark(int, int);
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkTranspose.java"
public class org.ejml.alg.dense.misc.BenchmarkTranspose {
  static java.util.Random rand;
  public org.ejml.alg.dense.misc.BenchmarkTranspose();
  public static long square(org.ejml.data.DenseMatrix64F, int);
  public static long block(org.ejml.data.DenseMatrix64F, int, int);
  public static long standard(org.ejml.data.DenseMatrix64F, int);
  public static long common(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "DeterminantFromMinor.java"
public class org.ejml.alg.dense.misc.DeterminantFromMinor {
  public org.ejml.alg.dense.misc.DeterminantFromMinor(int);
  public org.ejml.alg.dense.misc.DeterminantFromMinor(int, int);
  public double compute(org.ejml.data.RowD1Matrix64F);
}
Compiled from "GeneralReducedRowEchelonFormChecks.java"
public abstract class org.ejml.alg.dense.misc.GeneralReducedRowEchelonFormChecks {
  java.util.Random rand;
  org.ejml.interfaces.linsol.ReducedRowEchelonForm alg;
  public org.ejml.alg.dense.misc.GeneralReducedRowEchelonFormChecks(org.ejml.interfaces.linsol.ReducedRowEchelonForm);
  public void testFormat();
  public void testSolution();
  public void testSingular();
  public void spotTests();
}
Compiled from "GenerateDeterminantFromMinor.java"
public class org.ejml.alg.dense.misc.GenerateDeterminantFromMinor {
  protected java.io.PrintStream stream;
  protected int N;
  public org.ejml.alg.dense.misc.GenerateDeterminantFromMinor(java.lang.String) throws java.io.FileNotFoundException;
  public org.ejml.alg.dense.misc.GenerateDeterminantFromMinor(java.io.PrintStream);
  public void createClass(int);
  protected java.lang.String getInputValue(int);
  public void printFunctionInner(int);
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
}
Compiled from "GenerateInverseFromMinor.java"
public class org.ejml.alg.dense.misc.GenerateInverseFromMinor {
  java.lang.String className;
  java.io.PrintStream stream;
  int N;
  public org.ejml.alg.dense.misc.GenerateInverseFromMinor(boolean) throws java.io.FileNotFoundException;
  public void createClass(int);
  public void printMinors(int[], int, java.io.PrintStream);
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
}
Compiled from "ImplCommonOps_DenseMatrix64F.java"
public class org.ejml.alg.dense.misc.ImplCommonOps_DenseMatrix64F {
  public org.ejml.alg.dense.misc.ImplCommonOps_DenseMatrix64F();
  public static void extract(org.ejml.data.DenseMatrix64F, int, int, org.ejml.data.DenseMatrix64F, int, int, int, int);
}
Compiled from "ImplCommonOps_Matrix64F.java"
public class org.ejml.alg.dense.misc.ImplCommonOps_Matrix64F {
  public org.ejml.alg.dense.misc.ImplCommonOps_Matrix64F();
  public static void extract(org.ejml.data.Matrix64F, int, int, org.ejml.data.Matrix64F, int, int, int, int);
}
Compiled from "NaiveDeterminant.java"
public class org.ejml.alg.dense.misc.NaiveDeterminant {
  public org.ejml.alg.dense.misc.NaiveDeterminant();
  public static double leibniz(org.ejml.data.DenseMatrix64F);
  public static double recursive(org.ejml.data.DenseMatrix64F);
}
Compiled from "PermuteArray.java"
public class org.ejml.alg.dense.misc.PermuteArray {
  public org.ejml.alg.dense.misc.PermuteArray(int);
  public int sgn();
  public static int fact(int);
  public static java.util.List<int[]> createList(int);
  public int[] next();
}
Compiled from "RrefGaussJordanRowPivot.java"
public class org.ejml.alg.dense.misc.RrefGaussJordanRowPivot implements org.ejml.interfaces.linsol.ReducedRowEchelonForm<org.ejml.data.DenseMatrix64F> {
  double tol;
  public org.ejml.alg.dense.misc.RrefGaussJordanRowPivot();
  public void setTolerance(double);
  public void reduce(org.ejml.data.DenseMatrix64F, int);
  protected static void swapRows(org.ejml.data.DenseMatrix64F, int, int);
  public void reduce(org.ejml.data.Matrix64F, int);
}
Compiled from "TestDeterminantFromMinor.java"
public class org.ejml.alg.dense.misc.TestDeterminantFromMinor {
  public org.ejml.alg.dense.misc.TestDeterminantFromMinor();
  public void compareTo4x4();
  public void compareTo5x5();
  public void compareToNaive10x10();
  public void computeMediumSized();
  public void testMultipleCalls();
}
Compiled from "TestImplCommonOps_DenseMatrix64F.java"
public class org.ejml.alg.dense.misc.TestImplCommonOps_DenseMatrix64F {
  java.util.Random rand;
  public org.ejml.alg.dense.misc.TestImplCommonOps_DenseMatrix64F();
  public void extract();
}
Compiled from "TestImplCommonOps_Matrix64F.java"
public class org.ejml.alg.dense.misc.TestImplCommonOps_Matrix64F {
  java.util.Random rand;
  public org.ejml.alg.dense.misc.TestImplCommonOps_Matrix64F();
  public void extract();
}
Compiled from "TestNaiveDeterminant.java"
public class org.ejml.alg.dense.misc.TestNaiveDeterminant {
  public org.ejml.alg.dense.misc.TestNaiveDeterminant();
  public void detRecursive();
  public void det();
}
Compiled from "TestPermuteArray.java"
public class org.ejml.alg.dense.misc.TestPermuteArray {
  public org.ejml.alg.dense.misc.TestPermuteArray();
  int fact(int);
  public void permuteList();
  public void next();
}
Compiled from "TestRrefGaussJordanRowPivot.java"
public class org.ejml.alg.dense.misc.TestRrefGaussJordanRowPivot extends org.ejml.alg.dense.misc.GeneralReducedRowEchelonFormChecks {
  public org.ejml.alg.dense.misc.TestRrefGaussJordanRowPivot();
}
Compiled from "TestTransposeAlgs.java"
public class org.ejml.alg.dense.misc.TestTransposeAlgs {
  java.util.Random rand;
  public org.ejml.alg.dense.misc.TestTransposeAlgs();
  public void square();
  public void block();
  public void standard();
}
Compiled from "TestUnrolledDeterminantFromMinor.java"
public class org.ejml.alg.dense.misc.TestUnrolledDeterminantFromMinor {
  java.util.Random rand;
  public org.ejml.alg.dense.misc.TestUnrolledDeterminantFromMinor();
  public void testAll();
}
Compiled from "TestUnrolledInverseFromMinor.java"
public class org.ejml.alg.dense.misc.TestUnrolledInverseFromMinor {
  java.util.Random rand;
  public org.ejml.alg.dense.misc.TestUnrolledInverseFromMinor();
  public void compareToLU();
}
Compiled from "TransposeAlgs.java"
public class org.ejml.alg.dense.misc.TransposeAlgs {
  public org.ejml.alg.dense.misc.TransposeAlgs();
  public static void square(org.ejml.data.RowD1Matrix64F);
  public static void block(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, int);
  public static void standard(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
}
Compiled from "UnrolledDeterminantFromMinor.java"
public class org.ejml.alg.dense.misc.UnrolledDeterminantFromMinor {
  public static final int MAX;
  public org.ejml.alg.dense.misc.UnrolledDeterminantFromMinor();
  public static double det(org.ejml.data.RowD1Matrix64F);
  public static double det2(org.ejml.data.RowD1Matrix64F);
  public static double det3(org.ejml.data.RowD1Matrix64F);
  public static double det4(org.ejml.data.RowD1Matrix64F);
  public static double det5(org.ejml.data.RowD1Matrix64F);
  public static double det6(org.ejml.data.RowD1Matrix64F);
}
Compiled from "UnrolledInverseFromMinor.java"
public class org.ejml.alg.dense.misc.UnrolledInverseFromMinor {
  public static final int MAX;
  public org.ejml.alg.dense.misc.UnrolledInverseFromMinor();
  public static void inv(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void inv2(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, double);
  public static void inv3(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, double);
  public static void inv4(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, double);
  public static void inv5(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, double);
}
Compiled from "BenchmarkMatrixMatrixMult.java"
public class org.ejml.alg.dense.mult.BenchmarkMatrixMatrixMult {
  static java.util.Random rand;
  static int TRIALS_MULT;
  public org.ejml.alg.dense.mult.BenchmarkMatrixMatrixMult();
  public static long mult(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multSmall(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multAux(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multReorder(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multBlockNative(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multBlockD3Native(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void performTests(int, int, int, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkMatrixMatrixMultAdd.java"
public class org.ejml.alg.dense.mult.BenchmarkMatrixMatrixMultAdd {
  static java.util.Random rand;
  static int TRIALS_MULT;
  public org.ejml.alg.dense.mult.BenchmarkMatrixMatrixMultAdd();
  public static long mult(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multSmall(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multAux(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multReorder(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void performTests(int, int, int, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkMatrixMatrixMultTransA.java"
public class org.ejml.alg.dense.mult.BenchmarkMatrixMatrixMultTransA {
  static java.util.Random rand;
  static int TRIALS_MULT;
  public org.ejml.alg.dense.mult.BenchmarkMatrixMatrixMultTransA();
  public static long mult(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multSmall(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multReorder(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void performTests(int, int, int, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkMatrixMatrixMultTransAB.java"
public class org.ejml.alg.dense.mult.BenchmarkMatrixMatrixMultTransAB {
  static java.util.Random rand;
  static int TRIALS_MULT;
  public org.ejml.alg.dense.mult.BenchmarkMatrixMatrixMultTransAB();
  public static long mult(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multSmall(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multAux(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void performTests(int, int, int, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkMatrixMultAccessors.java"
public class org.ejml.alg.dense.mult.BenchmarkMatrixMultAccessors {
  public org.ejml.alg.dense.mult.BenchmarkMatrixMultAccessors();
  public static long inlined(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static long wrapped(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static long access2d(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkMatrixMultProduct.java"
public class org.ejml.alg.dense.mult.BenchmarkMatrixMultProduct {
  static java.util.Random rand;
  static int TRIALS_MULT;
  public org.ejml.alg.dense.mult.BenchmarkMatrixMultProduct();
  public static long multTransA(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long innerProd_small(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long innerProd_reorder(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void performTests(int, int, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkMatrixVectorOps.java"
public class org.ejml.alg.dense.mult.BenchmarkMatrixVectorOps {
  static java.util.Random rand;
  static int TRIALS_MULT;
  public org.ejml.alg.dense.mult.BenchmarkMatrixVectorOps();
  public static long mm_mult_small(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long mm_multTranA_small(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long mm_multTranA_large(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long mv_mult(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long mv_multTranA_small(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long mv_multTranA_large(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void performTests(int, int, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "CheckMatrixMultShape.java"
public class org.ejml.alg.dense.mult.CheckMatrixMultShape {
  java.lang.Class theClass;
  public org.ejml.alg.dense.mult.CheckMatrixMultShape(java.lang.Class);
  public void checkAll();
}
Compiled from "CheckMatrixVectorMultShape.java"
public class org.ejml.alg.dense.mult.CheckMatrixVectorMultShape {
  java.lang.Class theClass;
  public org.ejml.alg.dense.mult.CheckMatrixVectorMultShape(java.lang.Class);
  public void checkAll();
}
Compiled from "GeneratorMatrixMatrixMult.java"
public class org.ejml.alg.dense.mult.GeneratorMatrixMatrixMult {
  java.io.PrintStream stream;
  public org.ejml.alg.dense.mult.GeneratorMatrixMatrixMult(java.lang.String) throws java.io.FileNotFoundException;
  public void createClass();
  public void printMult_reroder(boolean, boolean);
  public void printMult_small(boolean, boolean);
  public void printMult_aux(boolean, boolean);
  public void printMultTransA_reorder(boolean, boolean);
  public void printMultTransA_small(boolean, boolean);
  public void printMultTransB(boolean, boolean);
  public void printMultTransAB(boolean, boolean);
  public void printMultTransAB_aux(boolean, boolean);
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
}
Compiled from "MatrixDimensionException.java"
public class org.ejml.alg.dense.mult.MatrixDimensionException extends java.lang.RuntimeException {
  public org.ejml.alg.dense.mult.MatrixDimensionException();
  public org.ejml.alg.dense.mult.MatrixDimensionException(java.lang.String);
}
Compiled from "MatrixMatrixMult.java"
public class org.ejml.alg.dense.mult.MatrixMatrixMult {
  public org.ejml.alg.dense.mult.MatrixMatrixMult();
  public static void mult_reorder(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void mult_small(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void mult_aux(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, double[]);
  public static void multTransA_reorder(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransA_small(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransAB(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransAB_aux(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, double[]);
  public static void multTransB(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAdd_reorder(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAdd_small(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAdd_aux(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, double[]);
  public static void multAddTransA_reorder(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransA_small(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransAB(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransAB_aux(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, double[]);
  public static void multAddTransB(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void mult_reorder(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void mult_small(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void mult_aux(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, double[]);
  public static void multTransA_reorder(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransA_small(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransAB(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransAB_aux(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, double[]);
  public static void multTransB(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAdd_reorder(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAdd_small(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAdd_aux(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, double[]);
  public static void multAddTransA_reorder(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransA_small(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransAB(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransAB_aux(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, double[]);
  public static void multAddTransB(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
}
Compiled from "MatrixMultProduct.java"
public class org.ejml.alg.dense.mult.MatrixMultProduct {
  public org.ejml.alg.dense.mult.MatrixMultProduct();
  public static void outer(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void inner_small(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void inner_reorder(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void inner_reorder_upper(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
}
Compiled from "MatrixVectorMult.java"
public class org.ejml.alg.dense.mult.MatrixVectorMult {
  public org.ejml.alg.dense.mult.MatrixVectorMult();
  public static void mult(org.ejml.data.RowD1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void multAdd(org.ejml.data.RowD1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void multTransA_small(org.ejml.data.RowD1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void multTransA_reorder(org.ejml.data.RowD1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void multAddTransA_small(org.ejml.data.RowD1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void multAddTransA_reorder(org.ejml.data.RowD1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
}
Compiled from "SubmatrixOps.java"
public class org.ejml.alg.dense.mult.SubmatrixOps {
  public org.ejml.alg.dense.mult.SubmatrixOps();
  public static void setSubMatrix(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, int, int, int, int, int, int);
}
Compiled from "TestMatrixMatrixMult.java"
public class org.ejml.alg.dense.mult.TestMatrixMatrixMult {
  java.util.Random rand;
  public org.ejml.alg.dense.mult.TestMatrixMatrixMult();
  public void checkShapesOfInput();
  public void checkInputInstance() throws java.lang.IllegalAccessException;
  public void checkAllAgainstKnown() throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException;
  public void checkAgainstRandomDiffShapes() throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException;
  public static void invoke(java.lang.reflect.Method, double, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
}
Compiled from "TestMatrixMultProduct.java"
public class org.ejml.alg.dense.mult.TestMatrixMultProduct {
  java.util.Random rand;
  public org.ejml.alg.dense.mult.TestMatrixMultProduct();
  public void outer();
  public void inner_small();
  public void inner_reorder();
  public void inner_reorder_upper();
}
Compiled from "TestMatrixVectorMult.java"
public class org.ejml.alg.dense.mult.TestMatrixVectorMult {
  java.util.Random rand;
  public org.ejml.alg.dense.mult.TestMatrixVectorMult();
  public void checkShapesOfInput();
  public void mult();
  public void multAdd();
  public void multTransA_small();
  public void multTransA_reorder();
  public void multAddTransA_small();
  public void multAddTransA_reorder();
}
Compiled from "TestSubmatrixOps.java"
public class org.ejml.alg.dense.mult.TestSubmatrixOps {
  public org.ejml.alg.dense.mult.TestSubmatrixOps();
  public void setSubMatrix();
}
Compiled from "TestVectorVectorMult.java"
public class org.ejml.alg.dense.mult.TestVectorVectorMult {
  java.util.Random rand;
  public org.ejml.alg.dense.mult.TestVectorVectorMult();
  public void innerProduct();
  public void innerProdA();
  public void innerProdTranA();
  public void outerProd();
  public void addOuterProd();
  public void householder();
  public void rank1Update_two_square();
  public void rank1Update_one_square();
}
Compiled from "VectorVectorMult.java"
public class org.ejml.alg.dense.mult.VectorVectorMult {
  public org.ejml.alg.dense.mult.VectorVectorMult();
  public static void mult(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static double innerProd(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static double innerProdA(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static double innerProdTranA(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void outerProd(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void addOuterProd(double, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void householder(double, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void rank1Update(double, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void rank1Update(double, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
}
Compiled from "MatrixMatrixMult_D2.java"
public class org.ejml.alg.densed2.mult.MatrixMatrixMult_D2 {
  public org.ejml.alg.densed2.mult.MatrixMatrixMult_D2();
  public static void mult_small(org.ejml.data.DenseD2Matrix64F, org.ejml.data.DenseD2Matrix64F, org.ejml.data.DenseD2Matrix64F);
  public static void mult_aux(org.ejml.data.DenseD2Matrix64F, org.ejml.data.DenseD2Matrix64F, org.ejml.data.DenseD2Matrix64F, double[]);
}
Compiled from "BenchmarkInverseFixed.java"
public class org.ejml.alg.fixed.BenchmarkInverseFixed {
  public org.ejml.alg.fixed.BenchmarkInverseFixed();
  public static long benchmark(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long benchmark(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, int);
  public static long benchmark(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkMultiplicationFixed.java"
public class org.ejml.alg.fixed.BenchmarkMultiplicationFixed {
  public org.ejml.alg.fixed.BenchmarkMultiplicationFixed();
  public static long benchmark(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long benchmark(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, int);
  public static long benchmark(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, int);
  public static long benchmark(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "CompareFixedToCommonOps.java"
public abstract class org.ejml.alg.fixed.CompareFixedToCommonOps {
  java.util.Random rand;
  java.lang.Class classFixed;
  int N;
  public org.ejml.alg.fixed.CompareFixedToCommonOps(java.lang.Class);
  public void compareToCommonOps();
}
Compiled from "FixedOps2.java"
public class org.ejml.alg.fixed.FixedOps2 {
  public org.ejml.alg.fixed.FixedOps2();
  public static void add(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void addEquals(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void transpose(org.ejml.data.FixedMatrix2x2_64F);
  public static org.ejml.data.FixedMatrix2x2_64F transpose(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void mult(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void multTransA(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void multTransAB(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void multTransB(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void mult(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2_64F, org.ejml.data.FixedMatrix2_64F);
  public static void mult(org.ejml.data.FixedMatrix2_64F, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2_64F);
  public static double dot(org.ejml.data.FixedMatrix2_64F, org.ejml.data.FixedMatrix2_64F);
  public static void setIdentity(org.ejml.data.FixedMatrix2x2_64F);
  public static boolean invert(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static double det(org.ejml.data.FixedMatrix2x2_64F);
  public static double trace(org.ejml.data.FixedMatrix2x2_64F);
  public static void diag(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2_64F);
  public static double elementMax(org.ejml.data.FixedMatrix2x2_64F);
  public static double elementMaxAbs(org.ejml.data.FixedMatrix2x2_64F);
  public static double elementMin(org.ejml.data.FixedMatrix2x2_64F);
  public static double elementMinAbs(org.ejml.data.FixedMatrix2x2_64F);
  public static void elementMult(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void elementMult(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void scale(double, org.ejml.data.FixedMatrix2x2_64F);
  public static void scale(double, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void divide(double, org.ejml.data.FixedMatrix2x2_64F);
  public static void divide(double, org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.FixedMatrix2x2_64F);
  public static void changeSign(org.ejml.data.FixedMatrix2x2_64F);
  public static void fill(org.ejml.data.FixedMatrix2x2_64F, double);
}
Compiled from "FixedOps3.java"
public class org.ejml.alg.fixed.FixedOps3 {
  public org.ejml.alg.fixed.FixedOps3();
  public static void add(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void addEquals(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void transpose(org.ejml.data.FixedMatrix3x3_64F);
  public static org.ejml.data.FixedMatrix3x3_64F transpose(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void mult(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void multTransA(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void multTransAB(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void multTransB(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void mult(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3_64F, org.ejml.data.FixedMatrix3_64F);
  public static void mult(org.ejml.data.FixedMatrix3_64F, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3_64F);
  public static double dot(org.ejml.data.FixedMatrix3_64F, org.ejml.data.FixedMatrix3_64F);
  public static void setIdentity(org.ejml.data.FixedMatrix3x3_64F);
  public static boolean invert(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static double det(org.ejml.data.FixedMatrix3x3_64F);
  public static double trace(org.ejml.data.FixedMatrix3x3_64F);
  public static void diag(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3_64F);
  public static double elementMax(org.ejml.data.FixedMatrix3x3_64F);
  public static double elementMaxAbs(org.ejml.data.FixedMatrix3x3_64F);
  public static double elementMin(org.ejml.data.FixedMatrix3x3_64F);
  public static double elementMinAbs(org.ejml.data.FixedMatrix3x3_64F);
  public static void elementMult(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void elementMult(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void scale(double, org.ejml.data.FixedMatrix3x3_64F);
  public static void scale(double, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void divide(double, org.ejml.data.FixedMatrix3x3_64F);
  public static void divide(double, org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.FixedMatrix3x3_64F);
  public static void changeSign(org.ejml.data.FixedMatrix3x3_64F);
  public static void fill(org.ejml.data.FixedMatrix3x3_64F, double);
}
Compiled from "FixedOps4.java"
public class org.ejml.alg.fixed.FixedOps4 {
  public org.ejml.alg.fixed.FixedOps4();
  public static void add(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void addEquals(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void transpose(org.ejml.data.FixedMatrix4x4_64F);
  public static org.ejml.data.FixedMatrix4x4_64F transpose(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void mult(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void multTransA(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void multTransAB(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void multTransB(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void mult(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4_64F, org.ejml.data.FixedMatrix4_64F);
  public static void mult(org.ejml.data.FixedMatrix4_64F, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4_64F);
  public static double dot(org.ejml.data.FixedMatrix4_64F, org.ejml.data.FixedMatrix4_64F);
  public static void setIdentity(org.ejml.data.FixedMatrix4x4_64F);
  public static boolean invert(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static double det(org.ejml.data.FixedMatrix4x4_64F);
  public static double trace(org.ejml.data.FixedMatrix4x4_64F);
  public static void diag(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4_64F);
  public static double elementMax(org.ejml.data.FixedMatrix4x4_64F);
  public static double elementMaxAbs(org.ejml.data.FixedMatrix4x4_64F);
  public static double elementMin(org.ejml.data.FixedMatrix4x4_64F);
  public static double elementMinAbs(org.ejml.data.FixedMatrix4x4_64F);
  public static void elementMult(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void elementMult(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void scale(double, org.ejml.data.FixedMatrix4x4_64F);
  public static void scale(double, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void divide(double, org.ejml.data.FixedMatrix4x4_64F);
  public static void divide(double, org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.FixedMatrix4x4_64F);
  public static void changeSign(org.ejml.data.FixedMatrix4x4_64F);
  public static void fill(org.ejml.data.FixedMatrix4x4_64F, double);
}
Compiled from "FixedOps5.java"
public class org.ejml.alg.fixed.FixedOps5 {
  public org.ejml.alg.fixed.FixedOps5();
  public static void add(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void addEquals(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void transpose(org.ejml.data.FixedMatrix5x5_64F);
  public static org.ejml.data.FixedMatrix5x5_64F transpose(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void mult(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void multTransA(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void multTransAB(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void multTransB(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void mult(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5_64F, org.ejml.data.FixedMatrix5_64F);
  public static void mult(org.ejml.data.FixedMatrix5_64F, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5_64F);
  public static double dot(org.ejml.data.FixedMatrix5_64F, org.ejml.data.FixedMatrix5_64F);
  public static void setIdentity(org.ejml.data.FixedMatrix5x5_64F);
  public static boolean invert(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static double det(org.ejml.data.FixedMatrix5x5_64F);
  public static double trace(org.ejml.data.FixedMatrix5x5_64F);
  public static void diag(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5_64F);
  public static double elementMax(org.ejml.data.FixedMatrix5x5_64F);
  public static double elementMaxAbs(org.ejml.data.FixedMatrix5x5_64F);
  public static double elementMin(org.ejml.data.FixedMatrix5x5_64F);
  public static double elementMinAbs(org.ejml.data.FixedMatrix5x5_64F);
  public static void elementMult(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void elementMult(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void scale(double, org.ejml.data.FixedMatrix5x5_64F);
  public static void scale(double, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void divide(double, org.ejml.data.FixedMatrix5x5_64F);
  public static void divide(double, org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.FixedMatrix5x5_64F);
  public static void changeSign(org.ejml.data.FixedMatrix5x5_64F);
  public static void fill(org.ejml.data.FixedMatrix5x5_64F, double);
}
Compiled from "FixedOps6.java"
public class org.ejml.alg.fixed.FixedOps6 {
  public org.ejml.alg.fixed.FixedOps6();
  public static void add(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void addEquals(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void transpose(org.ejml.data.FixedMatrix6x6_64F);
  public static org.ejml.data.FixedMatrix6x6_64F transpose(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void mult(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void multTransA(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void multTransAB(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void multTransB(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void mult(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6_64F, org.ejml.data.FixedMatrix6_64F);
  public static void mult(org.ejml.data.FixedMatrix6_64F, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6_64F);
  public static double dot(org.ejml.data.FixedMatrix6_64F, org.ejml.data.FixedMatrix6_64F);
  public static void setIdentity(org.ejml.data.FixedMatrix6x6_64F);
  public static double trace(org.ejml.data.FixedMatrix6x6_64F);
  public static void diag(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6_64F);
  public static double elementMax(org.ejml.data.FixedMatrix6x6_64F);
  public static double elementMaxAbs(org.ejml.data.FixedMatrix6x6_64F);
  public static double elementMin(org.ejml.data.FixedMatrix6x6_64F);
  public static double elementMinAbs(org.ejml.data.FixedMatrix6x6_64F);
  public static void elementMult(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void elementMult(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void elementDiv(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void scale(double, org.ejml.data.FixedMatrix6x6_64F);
  public static void scale(double, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void divide(double, org.ejml.data.FixedMatrix6x6_64F);
  public static void divide(double, org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.FixedMatrix6x6_64F);
  public static void changeSign(org.ejml.data.FixedMatrix6x6_64F);
  public static void fill(org.ejml.data.FixedMatrix6x6_64F, double);
}
Compiled from "GenerateFixedOps.java"
public class org.ejml.alg.fixed.GenerateFixedOps extends org.ejml.CodeGeneratorBase {
  java.lang.String classPreamble;
  java.lang.String nameMatrix;
  java.lang.String nameVector;
  public static int maxInverseSize;
  public org.ejml.alg.fixed.GenerateFixedOps();
  public void generate() throws java.io.FileNotFoundException;
  public void printPreable(int) throws java.io.FileNotFoundException;
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
  static {};
}
Compiled from "GenerateFixedOps.java"
class org.ejml.alg.fixed.GenerateFixedOps$1 extends org.ejml.alg.dense.misc.GenerateDeterminantFromMinor {
  final org.ejml.alg.fixed.GenerateFixedOps this$0;
  org.ejml.alg.fixed.GenerateFixedOps$1(org.ejml.alg.fixed.GenerateFixedOps, java.io.PrintStream);
  protected java.lang.String getInputValue(int);
}
Compiled from "TestFixedOps2.java"
public class org.ejml.alg.fixed.TestFixedOps2 extends org.ejml.alg.fixed.CompareFixedToCommonOps {
  java.util.Random rand;
  public org.ejml.alg.fixed.TestFixedOps2();
  public void dot();
  public void diag();
}
Compiled from "TestFixedOps3.java"
public class org.ejml.alg.fixed.TestFixedOps3 extends org.ejml.alg.fixed.CompareFixedToCommonOps {
  java.util.Random rand;
  public org.ejml.alg.fixed.TestFixedOps3();
  public void dot();
  public void diag();
}
Compiled from "TestFixedOps4.java"
public class org.ejml.alg.fixed.TestFixedOps4 extends org.ejml.alg.fixed.CompareFixedToCommonOps {
  public org.ejml.alg.fixed.TestFixedOps4();
  public void dot();
  public void diag();
}
Compiled from "TestFixedOps5.java"
public class org.ejml.alg.fixed.TestFixedOps5 extends org.ejml.alg.fixed.CompareFixedToCommonOps {
  public org.ejml.alg.fixed.TestFixedOps5();
  public void dot();
  public void diag();
}
Compiled from "TestFixedOps6.java"
public class org.ejml.alg.fixed.TestFixedOps6 extends org.ejml.alg.fixed.CompareFixedToCommonOps {
  public org.ejml.alg.fixed.TestFixedOps6();
  public void dot();
  public void diag();
}
Compiled from "CodeGeneratorMisc.java"
public class org.ejml.alg.generic.CodeGeneratorMisc {
  public static final java.lang.String COPYRIGHT;
  public org.ejml.alg.generic.CodeGeneratorMisc();
}
Compiled from "GenericMatrixOps.java"
public class org.ejml.alg.generic.GenericMatrixOps {
  public org.ejml.alg.generic.GenericMatrixOps();
  public static boolean isEquivalent(org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F, double);
  public static boolean isIdentity(org.ejml.data.ReshapeMatrix64F, double);
  public static boolean isEquivalentTriangle(boolean, org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F, double);
  public static void copy(org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F);
  public static void setRandom(org.ejml.data.ReshapeMatrix64F, double, double, java.util.Random);
}
Compiled from "BenchmarkFunctionReturn.java"
public class org.ejml.data.BenchmarkFunctionReturn {
  double[] data;
  public org.ejml.data.BenchmarkFunctionReturn();
  public double funcA(int, double);
  public void funcB(int, double);
  public long benchmarkA(int);
  public long benchmarkB(int);
  public static void main(java.lang.String[]);
}
Compiled from "BlockD3Matrix64F.java"
public class org.ejml.data.BlockD3Matrix64F extends org.ejml.data.ReshapeMatrix64F {
  public int blockLength;
  public double[][][] blocks;
  public org.ejml.data.BlockD3Matrix64F(int, int, int);
  public org.ejml.data.BlockD3Matrix64F(int, int);
  public double[][][] getData();
  public void reshape(int, int, boolean);
  public double get(int, int);
  public void set(int, int, double);
  public double unsafe_get(int, int);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public void print();
  public <T extends org.ejml.data.Matrix64F> T copy();
}
Compiled from "BlockMatrix64F.java"
public class org.ejml.data.BlockMatrix64F extends org.ejml.data.D1Matrix64F {
  public int blockLength;
  public org.ejml.data.BlockMatrix64F(int, int, int);
  public org.ejml.data.BlockMatrix64F(int, int);
  public org.ejml.data.BlockMatrix64F();
  public void set(org.ejml.data.BlockMatrix64F);
  public static org.ejml.data.BlockMatrix64F wrap(double[], int, int, int);
  public double[] getData();
  public void reshape(int, int, boolean);
  public void reshape(int, int, int, boolean);
  public int getIndex(int, int);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public void print();
  public org.ejml.data.BlockMatrix64F copy();
  public org.ejml.data.Matrix64F copy();
}
Compiled from "Complex64F.java"
public class org.ejml.data.Complex64F implements java.io.Serializable {
  public double real;
  public double imaginary;
  public org.ejml.data.Complex64F(double, double);
  public org.ejml.data.Complex64F();
  public double getReal();
  public double getMagnitude();
  public double getMagnitude2();
  public void setReal(double);
  public double getImaginary();
  public void setImaginary(double);
  public void set(double, double);
  public boolean isReal();
  public java.lang.String toString();
}
Compiled from "D1Matrix64F.java"
public abstract class org.ejml.data.D1Matrix64F extends org.ejml.data.ReshapeMatrix64F {
  public double[] data;
  public org.ejml.data.D1Matrix64F();
  public double[] getData();
  public void setData(double[]);
  public abstract int getIndex(int, int);
  public void set(org.ejml.data.D1Matrix64F);
  public double get(int);
  public double set(int, double);
  public double plus(int, double);
  public double minus(int, double);
  public double times(int, double);
  public double div(int, double);
}
Compiled from "D1Submatrix64F.java"
public class org.ejml.data.D1Submatrix64F {
  public org.ejml.data.D1Matrix64F original;
  public int row0;
  public int col0;
  public int row1;
  public int col1;
  public org.ejml.data.D1Submatrix64F();
  public org.ejml.data.D1Submatrix64F(org.ejml.data.D1Matrix64F);
  public org.ejml.data.D1Submatrix64F(org.ejml.data.D1Matrix64F, int, int, int, int);
  public void set(org.ejml.data.D1Matrix64F, int, int, int, int);
  public void set(org.ejml.data.D1Matrix64F);
  public int getRows();
  public int getCols();
  public double get(int, int);
  public void set(int, int, double);
  public org.ejml.simple.SimpleMatrix extract();
  public void print();
}
Compiled from "DenseD2Matrix64F.java"
public class org.ejml.data.DenseD2Matrix64F extends org.ejml.data.ReshapeMatrix64F implements java.io.Serializable {
  public double[][] data;
  public org.ejml.data.DenseD2Matrix64F(int, int);
  public void reshape(int, int, boolean);
  public double get(int, int);
  public void set(int, int, double);
  public double unsafe_get(int, int);
  public void unsafe_set(int, int, double);
  public int getNumElements();
  public void print();
  public <T extends org.ejml.data.Matrix64F> T copy();
}
Compiled from "DenseMatrix64F.java"
public class org.ejml.data.DenseMatrix64F extends org.ejml.data.RowD1Matrix64F {
  public org.ejml.data.DenseMatrix64F(int, int, boolean, double...);
  public org.ejml.data.DenseMatrix64F(double[][]);
  public org.ejml.data.DenseMatrix64F(int, int);
  public org.ejml.data.DenseMatrix64F(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F(int);
  public org.ejml.data.DenseMatrix64F();
  public org.ejml.data.DenseMatrix64F(org.ejml.data.ReshapeMatrix64F);
  public static org.ejml.data.DenseMatrix64F wrap(int, int, double[]);
  public void reshape(int, int, boolean);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public void add(int, int, double);
  public double get(int, int);
  public double unsafe_get(int, int);
  public int getIndex(int, int);
  public boolean isInBounds(int, int);
  public int getNumElements();
  public void setReshape(org.ejml.data.DenseMatrix64F);
  public void set(int, int, boolean, double...);
  public void zero();
  public org.ejml.data.DenseMatrix64F copy();
  public void print();
  public void print(java.lang.String);
  public java.lang.String toString();
  public org.ejml.data.Matrix64F copy();
}
Compiled from "Eigenpair.java"
public class org.ejml.data.Eigenpair {
  public double value;
  public org.ejml.data.DenseMatrix64F vector;
  public org.ejml.data.Eigenpair(double, org.ejml.data.DenseMatrix64F);
}
Compiled from "FixedMatrix2_64F.java"
public class org.ejml.data.FixedMatrix2_64F implements org.ejml.data.FixedMatrix64F {
  public double a1;
  public double a2;
  public org.ejml.data.FixedMatrix2_64F();
  public org.ejml.data.FixedMatrix2_64F(double, double);
  public org.ejml.data.FixedMatrix2_64F(org.ejml.data.FixedMatrix2_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "FixedMatrix2x2_64F.java"
public class org.ejml.data.FixedMatrix2x2_64F implements org.ejml.data.FixedMatrix64F {
  public double a11;
  public double a12;
  public double a21;
  public double a22;
  public org.ejml.data.FixedMatrix2x2_64F();
  public org.ejml.data.FixedMatrix2x2_64F(double, double, double, double);
  public org.ejml.data.FixedMatrix2x2_64F(org.ejml.data.FixedMatrix2x2_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "FixedMatrix3_64F.java"
public class org.ejml.data.FixedMatrix3_64F implements org.ejml.data.FixedMatrix64F {
  public double a1;
  public double a2;
  public double a3;
  public org.ejml.data.FixedMatrix3_64F();
  public org.ejml.data.FixedMatrix3_64F(double, double, double);
  public org.ejml.data.FixedMatrix3_64F(org.ejml.data.FixedMatrix3_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "FixedMatrix3x3_64F.java"
public class org.ejml.data.FixedMatrix3x3_64F implements org.ejml.data.FixedMatrix64F {
  public double a11;
  public double a12;
  public double a13;
  public double a21;
  public double a22;
  public double a23;
  public double a31;
  public double a32;
  public double a33;
  public org.ejml.data.FixedMatrix3x3_64F();
  public org.ejml.data.FixedMatrix3x3_64F(double, double, double, double, double, double, double, double, double);
  public org.ejml.data.FixedMatrix3x3_64F(org.ejml.data.FixedMatrix3x3_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "FixedMatrix4_64F.java"
public class org.ejml.data.FixedMatrix4_64F implements org.ejml.data.FixedMatrix64F {
  public double a1;
  public double a2;
  public double a3;
  public double a4;
  public org.ejml.data.FixedMatrix4_64F();
  public org.ejml.data.FixedMatrix4_64F(double, double, double, double);
  public org.ejml.data.FixedMatrix4_64F(org.ejml.data.FixedMatrix4_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "FixedMatrix4x4_64F.java"
public class org.ejml.data.FixedMatrix4x4_64F implements org.ejml.data.FixedMatrix64F {
  public double a11;
  public double a12;
  public double a13;
  public double a14;
  public double a21;
  public double a22;
  public double a23;
  public double a24;
  public double a31;
  public double a32;
  public double a33;
  public double a34;
  public double a41;
  public double a42;
  public double a43;
  public double a44;
  public org.ejml.data.FixedMatrix4x4_64F();
  public org.ejml.data.FixedMatrix4x4_64F(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double);
  public org.ejml.data.FixedMatrix4x4_64F(org.ejml.data.FixedMatrix4x4_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "FixedMatrix5_64F.java"
public class org.ejml.data.FixedMatrix5_64F implements org.ejml.data.FixedMatrix64F {
  public double a1;
  public double a2;
  public double a3;
  public double a4;
  public double a5;
  public org.ejml.data.FixedMatrix5_64F();
  public org.ejml.data.FixedMatrix5_64F(double, double, double, double, double);
  public org.ejml.data.FixedMatrix5_64F(org.ejml.data.FixedMatrix5_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "FixedMatrix5x5_64F.java"
public class org.ejml.data.FixedMatrix5x5_64F implements org.ejml.data.FixedMatrix64F {
  public double a11;
  public double a12;
  public double a13;
  public double a14;
  public double a15;
  public double a21;
  public double a22;
  public double a23;
  public double a24;
  public double a25;
  public double a31;
  public double a32;
  public double a33;
  public double a34;
  public double a35;
  public double a41;
  public double a42;
  public double a43;
  public double a44;
  public double a45;
  public double a51;
  public double a52;
  public double a53;
  public double a54;
  public double a55;
  public org.ejml.data.FixedMatrix5x5_64F();
  public org.ejml.data.FixedMatrix5x5_64F(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double);
  public org.ejml.data.FixedMatrix5x5_64F(org.ejml.data.FixedMatrix5x5_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "FixedMatrix64F.java"
public interface org.ejml.data.FixedMatrix64F extends org.ejml.data.Matrix64F {
}
Compiled from "FixedMatrix6_64F.java"
public class org.ejml.data.FixedMatrix6_64F implements org.ejml.data.FixedMatrix64F {
  public double a1;
  public double a2;
  public double a3;
  public double a4;
  public double a5;
  public double a6;
  public org.ejml.data.FixedMatrix6_64F();
  public org.ejml.data.FixedMatrix6_64F(double, double, double, double, double, double);
  public org.ejml.data.FixedMatrix6_64F(org.ejml.data.FixedMatrix6_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "FixedMatrix6x6_64F.java"
public class org.ejml.data.FixedMatrix6x6_64F implements org.ejml.data.FixedMatrix64F {
  public double a11;
  public double a12;
  public double a13;
  public double a14;
  public double a15;
  public double a16;
  public double a21;
  public double a22;
  public double a23;
  public double a24;
  public double a25;
  public double a26;
  public double a31;
  public double a32;
  public double a33;
  public double a34;
  public double a35;
  public double a36;
  public double a41;
  public double a42;
  public double a43;
  public double a44;
  public double a45;
  public double a46;
  public double a51;
  public double a52;
  public double a53;
  public double a54;
  public double a55;
  public double a56;
  public double a61;
  public double a62;
  public double a63;
  public double a64;
  public double a65;
  public double a66;
  public org.ejml.data.FixedMatrix6x6_64F();
  public org.ejml.data.FixedMatrix6x6_64F(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double);
  public org.ejml.data.FixedMatrix6x6_64F(org.ejml.data.FixedMatrix6x6_64F);
  public double get(int, int);
  public double unsafe_get(int, int);
  public void set(int, int, double);
  public void unsafe_set(int, int, double);
  public int getNumRows();
  public int getNumCols();
  public int getNumElements();
  public <T extends org.ejml.data.Matrix64F> T copy();
  public void print();
}
Compiled from "GenerateFixedMatrixN.java"
public class org.ejml.data.GenerateFixedMatrixN extends org.ejml.CodeGeneratorBase {
  java.lang.String classPreamble;
  public org.ejml.data.GenerateFixedMatrixN();
  public void generate() throws java.io.FileNotFoundException;
  public void print(int) throws java.io.FileNotFoundException;
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
}
Compiled from "GenerateFixedMatrixNxN.java"
public class org.ejml.data.GenerateFixedMatrixNxN extends org.ejml.CodeGeneratorBase {
  java.lang.String classPreamble;
  public org.ejml.data.GenerateFixedMatrixNxN();
  public void generate() throws java.io.FileNotFoundException;
  public void print(int) throws java.io.FileNotFoundException;
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
}
Compiled from "GenericTestsD1Matrix64F.java"
public abstract class org.ejml.data.GenericTestsD1Matrix64F extends org.ejml.data.GenericTestsMatrix64F {
  public org.ejml.data.GenericTestsD1Matrix64F();
  protected abstract org.ejml.data.D1Matrix64F createMatrix(int, int);
  public void allTests();
  public void testReshape();
  public void testSetAndGet_1D();
  protected org.ejml.data.ReshapeMatrix64F createMatrix(int, int);
}
Compiled from "GenericTestsMatrix64F.java"
public abstract class org.ejml.data.GenericTestsMatrix64F {
  public org.ejml.data.GenericTestsMatrix64F();
  protected abstract org.ejml.data.ReshapeMatrix64F createMatrix(int, int);
  public void allTests();
  public void testGetNumRows();
  public void testGetNumCols();
  public void testSetAndGet_2D();
  public void testSetAndGet_2D_unsafe();
}
Compiled from "Matrix64F.java"
public interface org.ejml.data.Matrix64F extends java.io.Serializable {
  public abstract double get(int, int);
  public abstract double unsafe_get(int, int);
  public abstract void set(int, int, double);
  public abstract void unsafe_set(int, int, double);
  public abstract int getNumRows();
  public abstract int getNumCols();
  public abstract int getNumElements();
  public abstract <T extends org.ejml.data.Matrix64F> T copy();
  public abstract void print();
}
Compiled from "MatrixIterator.java"
public class org.ejml.data.MatrixIterator implements java.util.Iterator<java.lang.Double> {
  int subRow;
  int subCol;
  public org.ejml.data.MatrixIterator(org.ejml.data.ReshapeMatrix64F, boolean, int, int, int, int);
  public boolean hasNext();
  public java.lang.Double next();
  public void remove();
  public int getIndex();
  public boolean isRowMajor();
  public void set(double);
  public java.lang.Object next();
}
Compiled from "ReshapeMatrix64F.java"
public abstract class org.ejml.data.ReshapeMatrix64F implements org.ejml.data.Matrix64F {
  public int numRows;
  public int numCols;
  public org.ejml.data.ReshapeMatrix64F();
  public abstract void reshape(int, int, boolean);
  public void reshape(int, int);
  public org.ejml.data.MatrixIterator iterator(boolean, int, int, int, int);
  public int getNumRows();
  public int getNumCols();
  public void setNumRows(int);
  public void setNumCols(int);
  public void set(org.ejml.data.ReshapeMatrix64F);
}
Compiled from "RowD1Matrix64F.java"
public abstract class org.ejml.data.RowD1Matrix64F extends org.ejml.data.D1Matrix64F {
  public org.ejml.data.RowD1Matrix64F();
}
Compiled from "TestBlockD3Matrix64F.java"
public class org.ejml.data.TestBlockD3Matrix64F {
  public org.ejml.data.TestBlockD3Matrix64F();
  public void testGeneric();
}
Compiled from "TestBlockD3Matrix64F.java"
class org.ejml.data.TestBlockD3Matrix64F$1 extends org.ejml.data.GenericTestsMatrix64F {
  final org.ejml.data.TestBlockD3Matrix64F this$0;
  org.ejml.data.TestBlockD3Matrix64F$1(org.ejml.data.TestBlockD3Matrix64F);
  protected org.ejml.data.ReshapeMatrix64F createMatrix(int, int);
}
Compiled from "TestBlockMatrix64F.java"
public class org.ejml.data.TestBlockMatrix64F {
  public org.ejml.data.TestBlockMatrix64F();
  public void testGeneric();
}
Compiled from "TestBlockMatrix64F.java"
class org.ejml.data.TestBlockMatrix64F$1 extends org.ejml.data.GenericTestsD1Matrix64F {
  final org.ejml.data.TestBlockMatrix64F this$0;
  org.ejml.data.TestBlockMatrix64F$1(org.ejml.data.TestBlockMatrix64F);
  protected org.ejml.data.D1Matrix64F createMatrix(int, int);
  protected org.ejml.data.ReshapeMatrix64F createMatrix(int, int);
}
Compiled from "TestD1Submatrix64F.java"
public class org.ejml.data.TestD1Submatrix64F {
  java.util.Random rand;
  public org.ejml.data.TestD1Submatrix64F();
  public void get();
  public void set();
  public void extract();
}
Compiled from "TestDenseD2Matrix64F.java"
public class org.ejml.data.TestDenseD2Matrix64F {
  public org.ejml.data.TestDenseD2Matrix64F();
  public void testGeneric();
}
Compiled from "TestDenseD2Matrix64F.java"
class org.ejml.data.TestDenseD2Matrix64F$1 extends org.ejml.data.GenericTestsMatrix64F {
  final org.ejml.data.TestDenseD2Matrix64F this$0;
  org.ejml.data.TestDenseD2Matrix64F$1(org.ejml.data.TestDenseD2Matrix64F);
  protected org.ejml.data.ReshapeMatrix64F createMatrix(int, int);
}
Compiled from "TestDenseMatrix64F.java"
public class org.ejml.data.TestDenseMatrix64F {
  java.util.Random rand;
  public org.ejml.data.TestDenseMatrix64F();
  public void testGeneric();
  public void testConstructorSingleArray();
  public void testConstruactorDoubleArray();
  public void testConstructorShape();
  public void testConstructorCopy();
  public void wrap();
  public void testInBounds();
  public void testSet_Matrix();
  public void set_ColumnMajor();
  public void set_RowMajor();
  public void testSetReshape_Matrix();
  public void testReshape();
}
Compiled from "TestDenseMatrix64F.java"
class org.ejml.data.TestDenseMatrix64F$1 extends org.ejml.data.GenericTestsD1Matrix64F {
  final org.ejml.data.TestDenseMatrix64F this$0;
  org.ejml.data.TestDenseMatrix64F$1(org.ejml.data.TestDenseMatrix64F);
  protected org.ejml.data.D1Matrix64F createMatrix(int, int);
  protected org.ejml.data.ReshapeMatrix64F createMatrix(int, int);
}
Compiled from "TestMatrixIterator.java"
public class org.ejml.data.TestMatrixIterator {
  java.util.Random rand;
  public org.ejml.data.TestMatrixIterator();
  public void allRow();
  public void allCol();
  public void subRow();
  public void subCol();
}
Compiled from "UtilTestMatrix.java"
public class org.ejml.data.UtilTestMatrix {
  public org.ejml.data.UtilTestMatrix();
  public static void checkMat(org.ejml.data.DenseMatrix64F, double...);
  public static void checkSameElements(double, int, double[], double[]);
  public static void checkNumFound(int, double, double, double[]);
}
Compiled from "BenchmarkKalmanPerformance.java"
public class org.ejml.example.BenchmarkKalmanPerformance {
  java.util.List<org.ejml.example.KalmanFilterOps> filters;
  public org.ejml.example.BenchmarkKalmanPerformance();
  public void run();
  public static org.ejml.data.DenseMatrix64F createF(double);
  public static org.ejml.data.DenseMatrix64F createQ(double, double);
  public static org.ejml.data.DenseMatrix64F createH();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "CSVReader.java"
public class org.ejml.example.CSVReader {
  public static java.lang.String lineSep;
  public org.ejml.example.CSVReader();
  public static java.util.ArrayList<java.util.ArrayList<java.lang.String>> readFile(java.lang.String) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "Compression_GPS.java"
public class org.ejml.example.Compression_GPS {
  public static java.lang.String lineSep;
  java.util.List<org.ejml.example.KalmanFilterOps> filters;
  public org.ejml.example.Compression_GPS();
  public void run() throws java.io.IOException;
  public static org.ejml.data.DenseMatrix64F createA(double);
  public static org.ejml.data.DenseMatrix64F createF(double);
  public static org.ejml.data.DenseMatrix64F createR();
  public static org.ejml.data.DenseMatrix64F createQ(double, double);
  public static org.ejml.data.DenseMatrix64F createH();
  public static void main(java.lang.String[]) throws java.io.IOException;
  static {};
}
Compiled from "ExampleFixedSizedMatrix.java"
public class org.ejml.example.ExampleFixedSizedMatrix {
  public org.ejml.example.ExampleFixedSizedMatrix();
  public static void main(java.lang.String[]);
}
Compiled from "ExampleMatrixIO.java"
public class org.ejml.example.ExampleMatrixIO {
  public org.ejml.example.ExampleMatrixIO();
  public static void csv();
  public static void csv_simple();
  public static void serializedBinary();
  public static void csv_serializedBinary();
  public static void main(java.lang.String[]);
}
Compiled from "KalmanFilter.java"
public interface org.ejml.example.KalmanFilter {
  public abstract void configure(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public abstract void setState(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public abstract void predict();
  public abstract void update(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public abstract org.ejml.data.DenseMatrix64F getState();
  public abstract org.ejml.data.DenseMatrix64F getCovariance();
}
Compiled from "KalmanFilterAlg.java"
public class org.ejml.example.KalmanFilterAlg implements org.ejml.example.KalmanFilter {
  public org.ejml.example.KalmanFilterAlg();
  public void configure(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void setState(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void predict();
  public void update(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getState();
  public org.ejml.data.DenseMatrix64F getCovariance();
}
Compiled from "KalmanFilterOps.java"
public class org.ejml.example.KalmanFilterOps implements org.ejml.example.KalmanFilter {
  public org.ejml.data.DenseMatrix64F y;
  public org.ejml.data.DenseMatrix64F S;
  public org.ejml.data.DenseMatrix64F S_inv;
  public org.ejml.data.DenseMatrix64F c;
  public org.ejml.data.DenseMatrix64F d;
  public org.ejml.data.DenseMatrix64F e;
  public org.ejml.data.DenseMatrix64F Residual;
  public org.ejml.example.KalmanFilterOps();
  public void configure(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void setState(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void predict();
  public void update(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getState();
  public org.ejml.data.DenseMatrix64F getCovariance();
}
Compiled from "KalmanFilterSimple.java"
public class org.ejml.example.KalmanFilterSimple implements org.ejml.example.KalmanFilter {
  public org.ejml.example.KalmanFilterSimple();
  public void configure(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void setState(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public void predict();
  public void update(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getState();
  public org.ejml.data.DenseMatrix64F getCovariance();
}
Compiled from "LevenbergMarquardt.java"
public class org.ejml.example.LevenbergMarquardt {
  public org.ejml.example.LevenbergMarquardt(org.ejml.example.LevenbergMarquardt$Function);
  public double getInitialCost();
  public double getFinalCost();
  public org.ejml.data.DenseMatrix64F getParameters();
  public boolean optimize(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  protected void configure(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  protected void computeNumericalJacobian(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
}
Compiled from "LevenbergMarquardt.java"
public interface org.ejml.example.LevenbergMarquardt$Function {
  public abstract void compute(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
}
Compiled from "PolynomialFit.java"
public class org.ejml.example.PolynomialFit {
  org.ejml.data.DenseMatrix64F A;
  org.ejml.data.DenseMatrix64F coef;
  org.ejml.data.DenseMatrix64F y;
  org.ejml.alg.dense.linsol.AdjustableLinearSolver solver;
  public org.ejml.example.PolynomialFit(int);
  public double[] getCoef();
  public void fit(double[], double[]);
  public void removeWorstFit();
}
Compiled from "PolynomialRootFinder.java"
public class org.ejml.example.PolynomialRootFinder {
  public org.ejml.example.PolynomialRootFinder();
  public static org.ejml.data.Complex64F[] findRoots(double...);
}
Compiled from "PrincipleComponentAnalysis.java"
public class org.ejml.example.PrincipleComponentAnalysis {
  double[] mean;
  public org.ejml.example.PrincipleComponentAnalysis();
  public void setup(int, int);
  public void addSample(double[]);
  public void computeBasis(int);
  public double[] getBasisVector(int);
  public double[] sampleToEigenSpace(double[]);
  public double[] eigenToSampleSpace(double[]);
  public double errorMembership(double[]);
  public double response(double[]);
}
Compiled from "QRExampleOps.java"
public class org.ejml.example.QRExampleOps {
  public org.ejml.example.QRExampleOps();
  public void decompose(org.ejml.data.DenseMatrix64F);
  public org.ejml.data.DenseMatrix64F getQ();
  public org.ejml.data.DenseMatrix64F getR();
}
Compiled from "QRExampleSimple.java"
public class org.ejml.example.QRExampleSimple {
  public org.ejml.example.QRExampleSimple();
  public void decompose(org.ejml.simple.SimpleMatrix);
  public org.ejml.simple.SimpleMatrix getQ();
  public org.ejml.simple.SimpleMatrix getR();
}
Compiled from "StatisticsMatrix.java"
public class org.ejml.example.StatisticsMatrix extends org.ejml.simple.SimpleBase<org.ejml.example.StatisticsMatrix> {
  public org.ejml.example.StatisticsMatrix(int, int);
  protected org.ejml.example.StatisticsMatrix();
  public static org.ejml.example.StatisticsMatrix wrap(org.ejml.data.DenseMatrix64F);
  public double mean();
  public double stdev();
  protected org.ejml.example.StatisticsMatrix createMatrix(int, int);
  public static void main(java.lang.String[]);
  protected org.ejml.simple.SimpleBase createMatrix(int, int);
}
Compiled from "DecompositionFactory.java"
public class org.ejml.factory.DecompositionFactory {
  public org.ejml.factory.DecompositionFactory();
  public static org.ejml.interfaces.decomposition.CholeskyDecomposition<org.ejml.data.DenseMatrix64F> chol(int, boolean);
  public static org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL_D64 cholLDL(int);
  public static org.ejml.interfaces.decomposition.LUDecomposition<org.ejml.data.DenseMatrix64F> lu(int, int);
  public static org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F> svd(int, int, boolean, boolean, boolean);
  public static org.ejml.interfaces.decomposition.QRDecomposition<org.ejml.data.DenseMatrix64F> qr(int, int);
  public static org.ejml.interfaces.decomposition.QRPDecomposition<org.ejml.data.DenseMatrix64F> qrp(int, int);
  public static org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F> eig(int, boolean);
  public static org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F> eig(int, boolean, boolean);
  public static double quality(org.ejml.data.DenseMatrix64F, org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F>);
  public static double quality(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static double quality(org.ejml.data.DenseMatrix64F, org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F>);
  public static org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<org.ejml.data.DenseMatrix64F> tridiagonal(int);
  public static <T extends org.ejml.data.ReshapeMatrix64F> boolean decomposeSafe(org.ejml.interfaces.decomposition.DecompositionInterface<T>, T);
}
Compiled from "LinearSolverFactory.java"
public class org.ejml.factory.LinearSolverFactory {
  public org.ejml.factory.LinearSolverFactory();
  public static org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> general(int, int);
  public static org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> linear(int);
  public static org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> leastSquares(int, int);
  public static org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> symmPosDef(int);
  public static org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> leastSquaresQrPivot(boolean, boolean);
  public static org.ejml.interfaces.linsol.LinearSolver<org.ejml.data.DenseMatrix64F> pseudoInverse(boolean);
  public static org.ejml.alg.dense.linsol.AdjustableLinearSolver adjustable();
}
Compiled from "SingularMatrixException.java"
public class org.ejml.factory.SingularMatrixException extends java.lang.RuntimeException {
  public org.ejml.factory.SingularMatrixException();
  public org.ejml.factory.SingularMatrixException(java.lang.String);
}
Compiled from "TestDecompositionFactory.java"
public class org.ejml.factory.TestDecompositionFactory {
  java.util.Random rand;
  public org.ejml.factory.TestDecompositionFactory();
  public void quality_eig();
  public void quality_svd();
}
Compiled from "TestLinearSolverFactory.java"
public class org.ejml.factory.TestLinearSolverFactory {
  java.util.Random rand;
  public org.ejml.factory.TestLinearSolverFactory();
  public void general();
  public void linear();
  public void leastSquares();
  public void symmetric();
  public void adjustable();
}
Compiled from "BidiagonalDecomposition.java"
public interface org.ejml.interfaces.decomposition.BidiagonalDecomposition<T extends org.ejml.data.ReshapeMatrix64F> extends org.ejml.interfaces.decomposition.DecompositionInterface<T> {
  public abstract T getB(T, boolean);
  public abstract T getU(T, boolean, boolean);
  public abstract T getV(T, boolean, boolean);
  public abstract void getDiagonal(double[], double[]);
}
Compiled from "CholeskyDecomposition.java"
public interface org.ejml.interfaces.decomposition.CholeskyDecomposition<MatrixType extends org.ejml.data.Matrix64F> extends org.ejml.interfaces.decomposition.DecompositionInterface<MatrixType> {
  public abstract boolean isLower();
  public abstract MatrixType getT(MatrixType);
}
Compiled from "DecompositionInterface.java"
public interface org.ejml.interfaces.decomposition.DecompositionInterface<T extends org.ejml.data.Matrix64F> {
  public abstract boolean decompose(T);
  public abstract boolean inputModified();
}
Compiled from "EigenDecomposition.java"
public interface org.ejml.interfaces.decomposition.EigenDecomposition<MatrixType extends org.ejml.data.Matrix64F> extends org.ejml.interfaces.decomposition.DecompositionInterface<MatrixType> {
  public abstract int getNumberOfEigenvalues();
  public abstract org.ejml.data.Complex64F getEigenvalue(int);
  public abstract MatrixType getEigenVector(int);
}
Compiled from "LUDecomposition.java"
public interface org.ejml.interfaces.decomposition.LUDecomposition<T extends org.ejml.data.Matrix64F> extends org.ejml.interfaces.decomposition.DecompositionInterface<T> {
  public abstract T getLower(T);
  public abstract T getUpper(T);
  public abstract T getPivot(T);
  public abstract boolean isSingular();
  public abstract double computeDeterminant();
}
Compiled from "QRDecomposition.java"
public interface org.ejml.interfaces.decomposition.QRDecomposition<T extends org.ejml.data.Matrix64F> extends org.ejml.interfaces.decomposition.DecompositionInterface<T> {
  public abstract T getQ(T, boolean);
  public abstract T getR(T, boolean);
}
Compiled from "QRPDecomposition.java"
public interface org.ejml.interfaces.decomposition.QRPDecomposition<T extends org.ejml.data.Matrix64F> extends org.ejml.interfaces.decomposition.QRDecomposition<T> {
  public abstract void setSingularThreshold(double);
  public abstract int getRank();
  public abstract int[] getPivots();
  public abstract org.ejml.data.DenseMatrix64F getPivotMatrix(org.ejml.data.DenseMatrix64F);
}
Compiled from "SingularValueDecomposition.java"
public interface org.ejml.interfaces.decomposition.SingularValueDecomposition<T extends org.ejml.data.Matrix64F> extends org.ejml.interfaces.decomposition.DecompositionInterface<T> {
  public abstract double[] getSingularValues();
  public abstract int numberOfSingularValues();
  public abstract boolean isCompact();
  public abstract T getU(T, boolean);
  public abstract T getV(T, boolean);
  public abstract T getW(T);
  public abstract int numRows();
  public abstract int numCols();
}
Compiled from "TridiagonalSimilarDecomposition.java"
public interface org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition<MatrixType extends org.ejml.data.ReshapeMatrix64F> extends org.ejml.interfaces.decomposition.DecompositionInterface<MatrixType> {
  public abstract MatrixType getT(MatrixType);
  public abstract MatrixType getQ(MatrixType, boolean);
  public abstract void getDiagonal(double[], double[]);
}
Compiled from "LinearSolver.java"
public interface org.ejml.interfaces.linsol.LinearSolver<T extends org.ejml.data.Matrix64F> {
  public abstract boolean setA(T);
  public abstract double quality();
  public abstract void solve(T, T);
  public abstract void invert(T);
  public abstract boolean modifiesA();
  public abstract boolean modifiesB();
}
Compiled from "ReducedRowEchelonForm.java"
public interface org.ejml.interfaces.linsol.ReducedRowEchelonForm<T extends org.ejml.data.Matrix64F> {
  public abstract void reduce(T, int);
  public abstract void setTolerance(double);
}
Compiled from "BenchmarkEquality.java"
public class org.ejml.ops.BenchmarkEquality {
  public org.ejml.ops.BenchmarkEquality();
  public static long equals(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long identical(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
}
Compiled from "BenchmarkMultAndAddOps.java"
public class org.ejml.ops.BenchmarkMultAndAddOps {
  static java.util.Random rand;
  static int TRIALS_MULT;
  static int TRIALS_ADD;
  public org.ejml.ops.BenchmarkMultAndAddOps();
  public static long mult(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long mult_alpha(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long mult_alt(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multTranA(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multTranA_alpha(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multTranB(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multTranAB(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multAdd(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multAddTranA(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multAddTranB(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long multAddTranAB(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long addEquals(org.ejml.data.DenseMatrix64F, int);
  public static long add(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long add_a_b(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static long addEqualBeta(org.ejml.data.DenseMatrix64F, int);
  public static long minusEquals(org.ejml.data.DenseMatrix64F, int);
  public static long minus(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void performMultTests(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void performAddTests(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BenchmarkVariousOps.java"
public class org.ejml.ops.BenchmarkVariousOps {
  static java.util.Random rand;
  static int TRIALS_TRANSPOSE;
  static int TRIALS_SCALE;
  static int TRIALS_NORM;
  static int TRIALS_DETERMINANT;
  public org.ejml.ops.BenchmarkVariousOps();
  public static long transposeEml(org.ejml.data.DenseMatrix64F, int);
  public static long scale(org.ejml.data.DenseMatrix64F, int);
  public static long scale2(org.ejml.data.DenseMatrix64F, int);
  public static long normEml(org.ejml.data.DenseMatrix64F, int);
  public static long determinant(org.ejml.data.DenseMatrix64F, int);
  public static long fillManual(org.ejml.data.DenseMatrix64F, int);
  public static long fillArrays(org.ejml.data.DenseMatrix64F, int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "CommonOps.java"
public class org.ejml.ops.CommonOps {
  public org.ejml.ops.CommonOps();
  public static void mult(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void mult(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransA(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransA(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransB(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransB(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransAB(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multTransAB(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multInner(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multOuter(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAdd(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAdd(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransA(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransA(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransB(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransB(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransAB(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static void multAddTransAB(double, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F);
  public static boolean solve(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void transpose(org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F transpose(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static double trace(org.ejml.data.RowD1Matrix64F);
  public static double det(org.ejml.data.DenseMatrix64F);
  public static boolean invert(org.ejml.data.DenseMatrix64F);
  public static boolean invert(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void pinv(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F[] columnsToVector(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F[]);
  public static org.ejml.data.DenseMatrix64F[] rowsToVector(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F[]);
  public static void setIdentity(org.ejml.data.RowD1Matrix64F);
  public static org.ejml.data.DenseMatrix64F identity(int);
  public static org.ejml.data.DenseMatrix64F identity(int, int);
  public static org.ejml.data.DenseMatrix64F diag(double...);
  public static org.ejml.data.DenseMatrix64F diag(org.ejml.data.DenseMatrix64F, int, double...);
  public static org.ejml.data.DenseMatrix64F diagR(int, int, double...);
  public static void kron(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void extract(org.ejml.data.ReshapeMatrix64F, int, int, int, int, org.ejml.data.ReshapeMatrix64F, int, int);
  public static org.ejml.data.DenseMatrix64F extract(org.ejml.data.DenseMatrix64F, int, int, int, int);
  public static void extractDiag(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void insert(org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F, int, int);
  public static double elementMax(org.ejml.data.D1Matrix64F);
  public static double elementMaxAbs(org.ejml.data.D1Matrix64F);
  public static double elementMin(org.ejml.data.D1Matrix64F);
  public static double elementMinAbs(org.ejml.data.D1Matrix64F);
  public static void elementMult(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void elementMult(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void elementDiv(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void elementDiv(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static double elementSum(org.ejml.data.D1Matrix64F);
  public static double elementSumAbs(org.ejml.data.D1Matrix64F);
  public static org.ejml.data.DenseMatrix64F sumRows(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F sumCols(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void addEquals(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void addEquals(org.ejml.data.D1Matrix64F, double, org.ejml.data.D1Matrix64F);
  public static void add(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void add(org.ejml.data.D1Matrix64F, double, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void add(double, org.ejml.data.D1Matrix64F, double, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void add(double, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void add(org.ejml.data.D1Matrix64F, double);
  public static void add(org.ejml.data.D1Matrix64F, double, org.ejml.data.D1Matrix64F);
  public static void subEquals(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void sub(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void scale(double, org.ejml.data.D1Matrix64F);
  public static void scale(double, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void divide(double, org.ejml.data.D1Matrix64F);
  public static void divide(double, org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void changeSign(org.ejml.data.D1Matrix64F);
  public static void fill(org.ejml.data.D1Matrix64F, double);
  public static org.ejml.data.DenseMatrix64F rref(org.ejml.data.DenseMatrix64F, int, org.ejml.data.DenseMatrix64F);
}
Compiled from "ConvertMatrixType.java"
public class org.ejml.ops.ConvertMatrixType {
  public org.ejml.ops.ConvertMatrixType();
  public static void convert(org.ejml.data.Matrix64F, org.ejml.data.Matrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix2x2_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix3x3_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix4x4_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix5x5_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix6x6_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.FixedMatrix2x2_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix2x2_64F);
  public static org.ejml.data.FixedMatrix3x3_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix3x3_64F);
  public static org.ejml.data.FixedMatrix4x4_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix4x4_64F);
  public static org.ejml.data.FixedMatrix5x5_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix5x5_64F);
  public static org.ejml.data.FixedMatrix6x6_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix6x6_64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix2_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix3_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix4_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix5_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.FixedMatrix6_64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.FixedMatrix2_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix2_64F);
  public static org.ejml.data.FixedMatrix3_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix3_64F);
  public static org.ejml.data.FixedMatrix4_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix4_64F);
  public static org.ejml.data.FixedMatrix5_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix5_64F);
  public static org.ejml.data.FixedMatrix6_64F convert(org.ejml.data.DenseMatrix64F, org.ejml.data.FixedMatrix6_64F);
  public static void convert(org.ejml.data.DenseMatrix64F, org.ejml.data.BlockMatrix64F);
  public static org.ejml.data.DenseMatrix64F convert(org.ejml.data.BlockMatrix64F, org.ejml.data.DenseMatrix64F);
}
Compiled from "CovarianceOps.java"
public class org.ejml.ops.CovarianceOps {
  public static double TOL;
  public org.ejml.ops.CovarianceOps();
  public static boolean isValidFast(org.ejml.data.DenseMatrix64F);
  public static int isValid(org.ejml.data.DenseMatrix64F);
  public static boolean invert(org.ejml.data.DenseMatrix64F);
  public static boolean invert(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static void randomVector(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, java.util.Random);
  static {};
}
Compiled from "CovarianceRandomDraw.java"
public class org.ejml.ops.CovarianceRandomDraw {
  public org.ejml.ops.CovarianceRandomDraw(java.util.Random, org.ejml.data.DenseMatrix64F);
  public void next(org.ejml.data.DenseMatrix64F);
  public double computeLikelihoodP();
}
Compiled from "EigenOps.java"
public class org.ejml.ops.EigenOps {
  public org.ejml.ops.EigenOps();
  public static double computeEigenValue(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.Eigenpair computeEigenVector(org.ejml.data.DenseMatrix64F, double);
  public static org.ejml.data.Eigenpair dominantEigenpair(org.ejml.data.DenseMatrix64F);
  public static double[] boundLargestEigenValue(org.ejml.data.DenseMatrix64F, double[]);
  public static org.ejml.data.DenseMatrix64F createMatrixD(org.ejml.interfaces.decomposition.EigenDecomposition);
  public static org.ejml.data.DenseMatrix64F createMatrixV(org.ejml.interfaces.decomposition.EigenDecomposition<org.ejml.data.DenseMatrix64F>);
}
Compiled from "EjmlUnitTests.java"
public class org.ejml.ops.EjmlUnitTests {
  static final boolean $assertionsDisabled;
  public org.ejml.ops.EjmlUnitTests();
  public static void assertCountable(org.ejml.data.ReshapeMatrix64F);
  public static void assertShape(org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F);
  public static void assertShape(org.ejml.data.ReshapeMatrix64F, int, int);
  public static void assertEqualsUncountable(org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F, double);
  public static void assertEquals(org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F, double);
  public static void assertEqualsTrans(org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F, double);
  static {};
}
Compiled from "EjmlUnitTests.java"
public class org.ejml.ops.EjmlUnitTests$TestException extends java.lang.RuntimeException {
  public org.ejml.ops.EjmlUnitTests$TestException(java.lang.String);
}
Compiled from "MatrixComponent.java"
public class org.ejml.ops.MatrixComponent extends javax.swing.JPanel {
  java.awt.image.BufferedImage image;
  public org.ejml.ops.MatrixComponent(int, int);
  public synchronized void setMatrix(org.ejml.data.D1Matrix64F);
  public static void renderMatrix(org.ejml.data.D1Matrix64F, java.awt.image.BufferedImage, double);
  public synchronized void paint(java.awt.Graphics);
}
Compiled from "MatrixFeatures.java"
public class org.ejml.ops.MatrixFeatures {
  public org.ejml.ops.MatrixFeatures();
  public static boolean hasNaN(org.ejml.data.D1Matrix64F);
  public static boolean hasUncountable(org.ejml.data.D1Matrix64F);
  public static boolean isVector(org.ejml.data.D1Matrix64F);
  public static boolean isPositiveDefinite(org.ejml.data.DenseMatrix64F);
  public static boolean isPositiveSemidefinite(org.ejml.data.DenseMatrix64F);
  public static boolean isSquare(org.ejml.data.D1Matrix64F);
  public static boolean isSymmetric(org.ejml.data.DenseMatrix64F, double);
  public static boolean isSymmetric(org.ejml.data.DenseMatrix64F);
  public static boolean isSkewSymmetric(org.ejml.data.DenseMatrix64F, double);
  public static boolean isInverse(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, double);
  public static boolean isEquals(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, double);
  public static boolean isEqualsTriangle(org.ejml.data.ReshapeMatrix64F, org.ejml.data.ReshapeMatrix64F, boolean, double);
  public static boolean isEquals(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static boolean isIdentical(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, double);
  public static boolean isOrthogonal(org.ejml.data.DenseMatrix64F, double);
  public static boolean isRowsLinearIndependent(org.ejml.data.DenseMatrix64F);
  public static boolean isIdentity(org.ejml.data.DenseMatrix64F, double);
  public static boolean isConstantVal(org.ejml.data.DenseMatrix64F, double, double);
  public static boolean isDiagonalPositive(org.ejml.data.DenseMatrix64F);
  public static boolean isFullRank(org.ejml.data.DenseMatrix64F);
  public static boolean isNegative(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F, double);
  public static boolean isUpperTriangle(org.ejml.data.DenseMatrix64F, int, double);
  public static int rank(org.ejml.data.DenseMatrix64F);
  public static int rank(org.ejml.data.DenseMatrix64F, double);
  public static int nullity(org.ejml.data.DenseMatrix64F);
  public static int nullity(org.ejml.data.DenseMatrix64F, double);
}
Compiled from "MatrixIO.java"
public class org.ejml.ops.MatrixIO {
  public org.ejml.ops.MatrixIO();
  public static void saveBin(org.ejml.data.ReshapeMatrix64F, java.lang.String) throws java.io.IOException;
  public static <T extends org.ejml.data.ReshapeMatrix64F> T loadBin(java.lang.String) throws java.io.IOException;
  public static void saveCSV(org.ejml.data.ReshapeMatrix64F, java.lang.String) throws java.io.IOException;
  public static org.ejml.data.DenseMatrix64F loadCSV(java.lang.String) throws java.io.IOException;
  public static org.ejml.data.DenseMatrix64F loadCSV(java.lang.String, int, int) throws java.io.IOException;
  public static void print(java.io.PrintStream, org.ejml.data.Matrix64F);
  public static void print(java.io.PrintStream, org.ejml.data.Matrix64F, int, int);
  public static void print(java.io.PrintStream, org.ejml.data.Matrix64F, java.lang.String);
  public static void print(java.io.PrintStream, org.ejml.data.ReshapeMatrix64F, java.lang.String, int, int, int, int);
}
Compiled from "MatrixVisualization.java"
public class org.ejml.ops.MatrixVisualization {
  public org.ejml.ops.MatrixVisualization();
  public static void show(org.ejml.data.D1Matrix64F, java.lang.String);
}
Compiled from "NormOps.java"
public class org.ejml.ops.NormOps {
  public org.ejml.ops.NormOps();
  public static void normalizeF(org.ejml.data.DenseMatrix64F);
  public static double conditionP(org.ejml.data.DenseMatrix64F, double);
  public static double conditionP2(org.ejml.data.DenseMatrix64F);
  public static double fastNormF(org.ejml.data.D1Matrix64F);
  public static double normF(org.ejml.data.D1Matrix64F);
  public static double elementP(org.ejml.data.RowD1Matrix64F, double);
  public static double fastElementP(org.ejml.data.D1Matrix64F, double);
  public static double normP(org.ejml.data.DenseMatrix64F, double);
  public static double fastNormP(org.ejml.data.DenseMatrix64F, double);
  public static double normP1(org.ejml.data.DenseMatrix64F);
  public static double normP2(org.ejml.data.DenseMatrix64F);
  public static double fastNormP2(org.ejml.data.DenseMatrix64F);
  public static double normPInf(org.ejml.data.DenseMatrix64F);
  public static double inducedP1(org.ejml.data.DenseMatrix64F);
  public static double inducedP2(org.ejml.data.DenseMatrix64F);
  public static double inducedPInf(org.ejml.data.DenseMatrix64F);
}
Compiled from "RandomMatrices.java"
public class org.ejml.ops.RandomMatrices {
  public org.ejml.ops.RandomMatrices();
  public static org.ejml.data.DenseMatrix64F[] createSpan(int, int, java.util.Random);
  public static org.ejml.data.DenseMatrix64F createInSpan(org.ejml.data.DenseMatrix64F[], double, double, java.util.Random);
  public static org.ejml.data.DenseMatrix64F createOrthogonal(int, int, java.util.Random);
  public static org.ejml.data.DenseMatrix64F createDiagonal(int, double, double, java.util.Random);
  public static org.ejml.data.DenseMatrix64F createDiagonal(int, int, double, double, java.util.Random);
  public static org.ejml.data.DenseMatrix64F createSingularValues(int, int, java.util.Random, double...);
  public static org.ejml.data.DenseMatrix64F createEigenvaluesSymm(int, java.util.Random, double...);
  public static org.ejml.data.DenseMatrix64F createRandom(int, int, java.util.Random);
  public static void addRandom(org.ejml.data.DenseMatrix64F, double, double, java.util.Random);
  public static org.ejml.data.DenseMatrix64F createRandom(int, int, double, double, java.util.Random);
  public static void setRandom(org.ejml.data.DenseMatrix64F, java.util.Random);
  public static void setRandom(org.ejml.data.D1Matrix64F, double, double, java.util.Random);
  public static org.ejml.data.DenseMatrix64F createSymmPosDef(int, java.util.Random);
  public static org.ejml.data.DenseMatrix64F createSymmetric(int, double, double, java.util.Random);
  public static void createSymmetric(org.ejml.data.DenseMatrix64F, double, double, java.util.Random);
  public static org.ejml.data.DenseMatrix64F createUpperTriangle(int, int, double, double, java.util.Random);
}
Compiled from "ReadCsv.java"
public class org.ejml.ops.ReadCsv {
  public org.ejml.ops.ReadCsv(java.io.InputStream);
  public void setComment(char);
  public int getLineNumber();
  public java.io.BufferedReader getReader();
  protected java.util.List<java.lang.String> extractWords() throws java.io.IOException;
  protected java.util.List<java.lang.String> parseWords(java.lang.String);
}
Compiled from "ReadMatrixCsv.java"
public class org.ejml.ops.ReadMatrixCsv extends org.ejml.ops.ReadCsv {
  public org.ejml.ops.ReadMatrixCsv(java.io.InputStream);
  public org.ejml.data.DenseMatrix64F read() throws java.io.IOException;
  public org.ejml.data.DenseMatrix64F read(int, int) throws java.io.IOException;
}
Compiled from "SingularOps.java"
public class org.ejml.ops.SingularOps {
  public org.ejml.ops.SingularOps();
  public static void descendingOrder(org.ejml.data.DenseMatrix64F, boolean, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, boolean);
  public static void descendingOrder(org.ejml.data.DenseMatrix64F, boolean, double[], int, org.ejml.data.DenseMatrix64F, boolean);
  public static void checkSvdMatrixSize(org.ejml.data.DenseMatrix64F, boolean, org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, boolean);
  public static org.ejml.data.DenseMatrix64F nullSpace(org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F>, org.ejml.data.DenseMatrix64F, double);
  public static org.ejml.data.DenseMatrix64F nullVector(org.ejml.interfaces.decomposition.SingularValueDecomposition<org.ejml.data.DenseMatrix64F>, boolean, org.ejml.data.DenseMatrix64F);
  public static int rank(org.ejml.interfaces.decomposition.SingularValueDecomposition, double);
  public static int nullity(org.ejml.interfaces.decomposition.SingularValueDecomposition, double);
}
Compiled from "SpecializedOps.java"
public class org.ejml.ops.SpecializedOps {
  public org.ejml.ops.SpecializedOps();
  public static org.ejml.data.DenseMatrix64F createReflector(org.ejml.data.RowD1Matrix64F);
  public static org.ejml.data.DenseMatrix64F createReflector(org.ejml.data.DenseMatrix64F, double);
  public static org.ejml.data.DenseMatrix64F copyChangeRow(int[], org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F);
  public static org.ejml.data.DenseMatrix64F copyTriangle(org.ejml.data.DenseMatrix64F, org.ejml.data.DenseMatrix64F, boolean);
  public static double diffNormF(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static double diffNormF_fast(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static double diffNormP1(org.ejml.data.D1Matrix64F, org.ejml.data.D1Matrix64F);
  public static void addIdentity(org.ejml.data.RowD1Matrix64F, org.ejml.data.RowD1Matrix64F, double);
  public static void subvector(org.ejml.data.RowD1Matrix64F, int, int, int, boolean, int, org.ejml.data.RowD1Matrix64F);
  public static org.ejml.data.DenseMatrix64F[] splitIntoVectors(org.ejml.data.RowD1Matrix64F, boolean);
  public static org.ejml.data.DenseMatrix64F pivotMatrix(org.ejml.data.DenseMatrix64F, int[], int, boolean);
  public static double diagProd(org.ejml.data.RowD1Matrix64F);
  public static double qualityTriangular(boolean, org.ejml.data.D1Matrix64F);
  public static double elementSumSq(org.ejml.data.D1Matrix64F);
}
Compiled from "TestCommonOps.java"
public class org.ejml.ops.TestCommonOps {
  java.util.Random rand;
  double tol;
  public org.ejml.ops.TestCommonOps();
  public void checkInputShape();
  public void checkAllMatrixMults();
  public void multInner();
  public void multOuter();
  public void elementMult_two();
  public void elementMult_three();
  public void elementDiv_two();
  public void elementDiv_three();
  public void solve();
  public void transpose_inplace();
  public void transpose();
  public void trace();
  public void invert();
  public void pinv();
  public void columnsToVectors();
  public void identity();
  public void identity_rect();
  public void setIdentity();
  public void diag();
  public void diag_rect();
  public void kron();
  public void extract();
  public void extract_ret();
  public void extractDiag();
  public void insert();
  public void addEquals();
  public void addEquals_beta();
  public void add();
  public void add_beta();
  public void add_alpha_beta();
  public void add_alpha();
  public void add_scalar_c();
  public void add_scalar();
  public void subEquals();
  public void sub();
  public void scale();
  public void scale_two_input();
  public void div();
  public void div_two_input();
  public void fill_dense();
  public void fill_block();
  public void zero();
  public void elementMax();
  public void elementMin();
  public void elementMinAbs();
  public void elementMaxAbs();
  public void elementSum();
  public void elementSumAbs();
  public void sumRows();
  public void sumCols();
  public void rref();
}
Compiled from "TestConvertMatrixType.java"
public class org.ejml.ops.TestConvertMatrixType {
  java.util.Random rand;
  public org.ejml.ops.TestConvertMatrixType();
  public void any_to_any();
  public void checkAll_Fixed_to_DM() throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException;
  public void checkAll_DM_to_Fixed() throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException;
  public void BM_to_DM();
  public void DM_to_BM();
}
Compiled from "TestCovarianceOps.java"
public class org.ejml.ops.TestCovarianceOps {
  public org.ejml.ops.TestCovarianceOps();
  public void isValid();
}
Compiled from "TestCovarianceRandomDraw.java"
public class org.ejml.ops.TestCovarianceRandomDraw {
  public static int N;
  public org.ejml.ops.TestCovarianceRandomDraw();
  public void testStatistics();
  public void modifyInput();
  static {};
}
Compiled from "TestEigenOps.java"
public class org.ejml.ops.TestEigenOps {
  java.util.Random rand;
  public org.ejml.ops.TestEigenOps();
  public void computeEigenValue();
  public void boundLargestEigenValue_markov();
  public void createMatrixV();
  public void createMatrixD();
}
Compiled from "TestMatrixFeatures.java"
public class org.ejml.ops.TestMatrixFeatures {
  java.util.Random rand;
  public org.ejml.ops.TestMatrixFeatures();
  public void hasUncountable();
  public void isVector();
  public void isPositiveDefinite();
  public void isPositiveSemidefinite();
  public void isSquare();
  public void isDiagonalPositive();
  public void isSymmetric();
  public void isSkewSymmetric();
  public void isEquals();
  public void isEquals_tol();
  public void isEqualsTriangle();
  public void isIdentical();
  public void isInverse();
  public void isInverse_nomodify();
  public void hasNaN();
  public void isOrthogonal();
  public void isRowsLinearIndependent();
  public void isConstantVal();
  public void isIdentity();
  public void isNegative();
  public void isUpperTriangle();
  public void rank();
  public void rank_threshold();
  public void nullity();
  public void nullity_threshold();
}
Compiled from "TestMatrixIO.java"
public class org.ejml.ops.TestMatrixIO {
  java.util.Random rand;
  public org.ejml.ops.TestMatrixIO();
  public void load_save_binary() throws java.io.IOException;
  public void load_save_csv() throws java.io.IOException;
}
Compiled from "TestNormOps.java"
public class org.ejml.ops.TestNormOps {
  java.util.Random rand;
  org.ejml.data.DenseMatrix64F zeroMatrix;
  org.ejml.data.DenseMatrix64F unzeroMatrix;
  org.ejml.data.DenseMatrix64F unzeroVector;
  org.ejml.data.DenseMatrix64F squareMatrix;
  public org.ejml.ops.TestNormOps();
  public void conditionP();
  public void conditionP2();
  public void elementP();
  public void fastElementP();
  public void normalizeF();
  public void fastNormF();
  public void normF();
  public void fastNormP2();
  public void normP();
  public void fastNormP();
  public void normP1();
  public void normP2();
  public void normPInf();
  public void inducedP1();
  public void inducedP2();
  public void inducedPInf();
}
Compiled from "TestRandomMatrices.java"
public class org.ejml.ops.TestRandomMatrices {
  java.util.Random rand;
  public org.ejml.ops.TestRandomMatrices();
  public void createSpan();
  public void createInSpan();
  public void createOrthogonal();
  public void createDiagonal_square();
  public void createDiagonal_general();
  public void testDiagonal(int, int);
  public void createSingularValues();
  public void createEigenvaluesSymm();
  public void addRandom();
  public void createRandom();
  public void createRandom_min_max();
  public void setRandom();
  public void setRandom_min_max();
  public void createSymmPosDef();
  public void createSymmetric();
  public void createUpperTriangle();
}
Compiled from "TestReadMatrixCsv.java"
public class org.ejml.ops.TestReadMatrixCsv {
  public org.ejml.ops.TestReadMatrixCsv();
  public void bad_matrix_row() throws java.io.IOException;
  public void bad_matrix_col() throws java.io.IOException;
}
Compiled from "TestSingularOps.java"
public class org.ejml.ops.TestSingularOps {
  java.util.Random rand;
  public org.ejml.ops.TestSingularOps();
  public void descendingOrder();
  public void descendingOrder_array();
  public void descendingOrder_NaN();
  public void checkSvdMatrixSize_positive();
  public void checkSvdMatrixSize_negative();
  public void nullVector();
  public void nullSpace();
  public void rank_and_nullity();
  public void rank_and_nullity(org.ejml.data.DenseMatrix64F, int, int);
}
Compiled from "TestSpecializedOps.java"
public class org.ejml.ops.TestSpecializedOps {
  java.util.Random rand;
  public org.ejml.ops.TestSpecializedOps();
  public void createReflector();
  public void createReflector_gamma();
  public void copyChangeRow();
  public void copyTriangle();
  public void diffNormF();
  public void diffNormP1();
  public void addIdentity();
  public void subvector();
  public void splitIntoVectors();
  public void pivotMatrix();
  public void diagProd();
  public void elementSumSq();
}
Compiled from "SimpleBase.java"
public abstract class org.ejml.simple.SimpleBase<T extends org.ejml.simple.SimpleBase> implements java.io.Serializable {
  protected org.ejml.data.DenseMatrix64F mat;
  public org.ejml.simple.SimpleBase(int, int);
  protected org.ejml.simple.SimpleBase();
  protected abstract T createMatrix(int, int);
  public org.ejml.data.DenseMatrix64F getMatrix();
  public T transpose();
  public T mult(T);
  public T kron(T);
  public T plus(T);
  public T minus(T);
  public T plus(double, T);
  public double dot(T);
  public boolean isVector();
  public T scale(double);
  public T divide(double);
  public T invert();
  public T pseudoInverse();
  public T solve(T);
  public void set(T);
  public void set(double);
  public void zero();
  public double normF();
  public double conditionP2();
  public double determinant();
  public double trace();
  public void reshape(int, int);
  public void set(int, int, double);
  public void set(int, double);
  public void setRow(int, int, double...);
  public void setColumn(int, int, double...);
  public double get(int, int);
  public double get(int);
  public int getIndex(int, int);
  public org.ejml.data.MatrixIterator iterator(boolean, int, int, int, int);
  public T copy();
  public int numRows();
  public int numCols();
  public int getNumElements();
  public void print();
  public void print(int, int);
  public void print(java.lang.String);
  public java.lang.String toString();
  public T extractMatrix(int, int, int, int);
  public T extractVector(boolean, int);
  public T extractDiag();
  public boolean isIdentical(T, double);
  public boolean hasUncountable();
  public org.ejml.simple.SimpleSVD svd();
  public org.ejml.simple.SimpleSVD svd(boolean);
  public org.ejml.simple.SimpleEVD eig();
  public void insertIntoThis(int, int, T);
  public T combine(int, int, T);
  public double elementMaxAbs();
  public double elementSum();
  public T elementMult(T);
  public T negative();
  public void saveToFileBinary(java.lang.String) throws java.io.IOException;
  public static org.ejml.simple.SimpleMatrix loadBinary(java.lang.String) throws java.io.IOException;
  public void saveToFileCSV(java.lang.String) throws java.io.IOException;
  public static org.ejml.simple.SimpleMatrix loadCSV(java.lang.String) throws java.io.IOException;
  public boolean isInBounds(int, int);
  public void printDimensions();
}
Compiled from "SimpleEVD.java"
public class org.ejml.simple.SimpleEVD<T extends org.ejml.simple.SimpleMatrix> {
  org.ejml.data.DenseMatrix64F mat;
  public org.ejml.simple.SimpleEVD(org.ejml.data.DenseMatrix64F);
  public int getNumberOfEigenvalues();
  public org.ejml.data.Complex64F getEigenvalue(int);
  public T getEigenVector(int);
  public double quality();
  public org.ejml.interfaces.decomposition.EigenDecomposition getEVD();
  public int getIndexMax();
  public int getIndexMin();
}
Compiled from "SimpleMatrix.java"
public class org.ejml.simple.SimpleMatrix extends org.ejml.simple.SimpleBase<org.ejml.simple.SimpleMatrix> {
  public static final int END;
  public org.ejml.simple.SimpleMatrix(int, int, boolean, double...);
  public org.ejml.simple.SimpleMatrix(double[][]);
  public org.ejml.simple.SimpleMatrix(int, int);
  public org.ejml.simple.SimpleMatrix(org.ejml.simple.SimpleMatrix);
  public org.ejml.simple.SimpleMatrix(org.ejml.data.DenseMatrix64F);
  public org.ejml.simple.SimpleMatrix(org.ejml.data.ReshapeMatrix64F);
  public org.ejml.simple.SimpleMatrix();
  public static org.ejml.simple.SimpleMatrix wrap(org.ejml.data.DenseMatrix64F);
  public static org.ejml.simple.SimpleMatrix identity(int);
  public static org.ejml.simple.SimpleMatrix diag(double...);
  public static org.ejml.simple.SimpleMatrix random(int, int, double, double, java.util.Random);
  protected org.ejml.simple.SimpleMatrix createMatrix(int, int);
  protected org.ejml.simple.SimpleBase createMatrix(int, int);
}
Compiled from "SimpleSVD.java"
public class org.ejml.simple.SimpleSVD<T extends org.ejml.simple.SimpleMatrix> {
  public org.ejml.simple.SimpleSVD(org.ejml.data.DenseMatrix64F, boolean);
  public T getU();
  public T getW();
  public T getV();
  public double quality();
  public org.ejml.simple.SimpleMatrix nullSpace();
  public double getSingleValue(int);
  public int rank();
  public int nullity();
  public org.ejml.interfaces.decomposition.SingularValueDecomposition getSVD();
}
Compiled from "TestSimpleMatrix.java"
public class org.ejml.simple.TestSimpleMatrix {
  java.util.Random rand;
  public org.ejml.simple.TestSimpleMatrix();
  public void constructor_1d_array();
  public void constructor_2d_array();
  public void constructor_dense();
  public void constructor_simple();
  public void wrap();
  public void identity();
  public void getMatrix();
  public void transpose();
  public void mult();
  public void kron();
  public void plus();
  public void dot();
  public void isVector();
  public void minus();
  public void plus_beta();
  public void invert();
  public void invert_NaN_INFINITY();
  public void pseudoInverse();
  public void solve();
  public void solve_NaN_INFINITY();
  public void solve_notsquare();
  public void set_double();
  public void zero();
  public void normF();
  public void conditionP2();
  public void determinant();
  public void trace();
  public void reshape();
  public void set_element();
  public void setRow();
  public void setColumn();
  public void get_2d();
  public void get_1d();
  public void getIndex();
  public void copy();
  public void svd();
  public void eig();
  public void insertIntoThis();
  public void combine();
  public void scale();
  public void div_scalar();
  public void elementSum();
  public void elementMaxAbs();
  public void elementMult();
  public void extractMatrix();
  public void extractDiag();
  public void extractVector();
  public void negative();
  public void isInBounds();
}
