Compiled from "Adder.java"
public class net.dtkanov.blocks.circuit.Adder extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.circuit.Adder();
  public net.dtkanov.blocks.circuit.Adder(net.dtkanov.blocks.logic.Wire);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "AllNode.java"
public class net.dtkanov.blocks.circuit.AllNode extends net.dtkanov.blocks.logic.Node {
  protected net.dtkanov.blocks.logic.Node[] in_nops;
  protected net.dtkanov.blocks.logic.Node[] ands;
  public net.dtkanov.blocks.circuit.AllNode(int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "Clock.java"
public class net.dtkanov.blocks.circuit.Clock {
  public static long DEFAULT_FREQUENCY;
  public net.dtkanov.blocks.circuit.Clock();
  public net.dtkanov.blocks.circuit.Clock(long);
  public net.dtkanov.blocks.circuit.Clock addSink(net.dtkanov.blocks.logic.AddrPair);
  public void start();
  public void stop();
  static boolean access$000(net.dtkanov.blocks.circuit.Clock);
  static boolean access$102(net.dtkanov.blocks.circuit.Clock, boolean);
  static boolean access$100(net.dtkanov.blocks.circuit.Clock);
  static java.util.List access$200(net.dtkanov.blocks.circuit.Clock);
  static {};
}
Compiled from "Clock.java"
class net.dtkanov.blocks.circuit.Clock$1 implements java.lang.Runnable {
  final net.dtkanov.blocks.circuit.Clock this$0;
  net.dtkanov.blocks.circuit.Clock$1(net.dtkanov.blocks.circuit.Clock);
  public void run();
}
Compiled from "DeMux.java"
public class net.dtkanov.blocks.circuit.DeMux extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.circuit.DeMux();
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void propagate(boolean);
  public void reset();
}
Compiled from "GatedDLatch.java"
public class net.dtkanov.blocks.circuit.GatedDLatch extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.circuit.GatedDLatch();
  public net.dtkanov.blocks.circuit.GatedDLatch(net.dtkanov.blocks.logic.Wire);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void propagate(boolean);
  public void reset();
}
Compiled from "HalfAdder.java"
public class net.dtkanov.blocks.circuit.HalfAdder extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.circuit.HalfAdder();
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "LookUp.java"
public class net.dtkanov.blocks.circuit.LookUp extends net.dtkanov.blocks.circuit.Memory {
  protected net.dtkanov.blocks.logic.Node zero;
  public net.dtkanov.blocks.circuit.LookUp(int, byte[]);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean isReady();
  public void propagate(boolean);
}
Compiled from "Memory.java"
public class net.dtkanov.blocks.circuit.Memory extends net.dtkanov.blocks.logic.Node {
  protected int addr_size;
  protected byte[] storage;
  protected net.dtkanov.blocks.logic.Node[] in_addr;
  protected net.dtkanov.blocks.logic.Node[] in_data;
  protected net.dtkanov.blocks.logic.Node in_mode;
  protected net.dtkanov.blocks.logic.Node[] out_data;
  public static int BITS_IN_BYTE;
  public net.dtkanov.blocks.circuit.Memory(int);
  public net.dtkanov.blocks.circuit.Memory(net.dtkanov.blocks.circuit.Memory);
  public net.dtkanov.blocks.circuit.Memory(int, byte[]);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
  static {};
}
Compiled from "MultiAND.java"
public class net.dtkanov.blocks.circuit.MultiAND extends net.dtkanov.blocks.circuit.MultiNode {
  public net.dtkanov.blocks.circuit.MultiAND(int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
}
Compiled from "MultiNOT.java"
public class net.dtkanov.blocks.circuit.MultiNOT extends net.dtkanov.blocks.circuit.MultiNode {
  public net.dtkanov.blocks.circuit.MultiNOT(int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
}
Compiled from "MultiNode.java"
public abstract class net.dtkanov.blocks.circuit.MultiNode extends net.dtkanov.blocks.logic.Node {
  protected int bitness;
  protected net.dtkanov.blocks.logic.Node[] data;
  public net.dtkanov.blocks.circuit.MultiNode(int);
  public net.dtkanov.blocks.circuit.MultiNode(int, net.dtkanov.blocks.logic.Wire);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "MultiOR.java"
public class net.dtkanov.blocks.circuit.MultiOR extends net.dtkanov.blocks.circuit.MultiNode {
  public net.dtkanov.blocks.circuit.MultiOR(int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
}
Compiled from "MultiXOR.java"
public class net.dtkanov.blocks.circuit.MultiXOR extends net.dtkanov.blocks.circuit.MultiNode {
  public net.dtkanov.blocks.circuit.MultiXOR(int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
}
Compiled from "Mux.java"
public class net.dtkanov.blocks.circuit.Mux extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.circuit.Mux();
  public net.dtkanov.blocks.circuit.Mux(net.dtkanov.blocks.logic.Wire);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void propagate(boolean);
  public void reset();
}
Compiled from "Rotator.java"
public class net.dtkanov.blocks.circuit.Rotator extends net.dtkanov.blocks.logic.Node {
  protected int shift;
  protected int bitness;
  protected net.dtkanov.blocks.logic.Node[] inNOPs;
  protected net.dtkanov.blocks.logic.Node[] outNOPs;
  protected net.dtkanov.blocks.logic.Node zero;
  public net.dtkanov.blocks.circuit.Rotator(int, int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "SRLatch.java"
public class net.dtkanov.blocks.circuit.SRLatch extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.circuit.SRLatch();
  public net.dtkanov.blocks.circuit.SRLatch(net.dtkanov.blocks.logic.Wire);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void propagate(boolean);
  public void reset();
}
Compiled from "Shifter.java"
public class net.dtkanov.blocks.circuit.Shifter extends net.dtkanov.blocks.logic.Node {
  protected int shift;
  protected int bitness;
  protected net.dtkanov.blocks.logic.Node[] inNOPs;
  protected net.dtkanov.blocks.logic.Node[] outNOPs;
  protected net.dtkanov.blocks.logic.Node zero;
  public net.dtkanov.blocks.circuit.Shifter(int, int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "AdvancedRotator.java"
public class net.dtkanov.blocks.circuit.high_level.AdvancedRotator extends net.dtkanov.blocks.logic.Node {
  protected int bitness;
  protected net.dtkanov.blocks.logic.Node[] rotators;
  protected net.dtkanov.blocks.logic.Node[] muxs;
  protected net.dtkanov.blocks.logic.Node[] inNOPs;
  protected net.dtkanov.blocks.logic.Node[] ctrlNOPs;
  public net.dtkanov.blocks.circuit.high_level.AdvancedRotator(int, boolean);
  public int countCtrlBits();
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "AdvancedShifter.java"
public class net.dtkanov.blocks.circuit.high_level.AdvancedShifter extends net.dtkanov.blocks.logic.Node {
  protected int bitness;
  protected net.dtkanov.blocks.logic.Node[] shifters;
  protected net.dtkanov.blocks.logic.Node[] muxs;
  protected net.dtkanov.blocks.logic.Node[] inNOPs;
  protected net.dtkanov.blocks.logic.Node[] ctrlNOPs;
  public net.dtkanov.blocks.circuit.high_level.AdvancedShifter(int, boolean);
  public int countCtrlBits();
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "Complementer.java"
public class net.dtkanov.blocks.circuit.high_level.Complementer extends net.dtkanov.blocks.circuit.MultiNOT {
  protected net.dtkanov.blocks.logic.Node inc;
  public net.dtkanov.blocks.circuit.high_level.Complementer(int);
  public boolean out(int);
  public void reset();
}
Compiled from "Extractor.java"
public class net.dtkanov.blocks.circuit.high_level.Extractor extends net.dtkanov.blocks.logic.Node {
  protected int bitness;
  protected net.dtkanov.blocks.circuit.Memory mem_ctrl;
  protected net.dtkanov.blocks.circuit.Memory mem_d1;
  protected net.dtkanov.blocks.circuit.Memory mem_d2;
  protected net.dtkanov.blocks.logic.Node inc1;
  protected net.dtkanov.blocks.logic.Node inc2;
  protected net.dtkanov.blocks.logic.ConstantNode read_mode;
  public net.dtkanov.blocks.circuit.high_level.Extractor(int, byte[]);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "Incrementer.java"
public class net.dtkanov.blocks.circuit.high_level.Incrementer extends net.dtkanov.blocks.logic.Node {
  protected int bitness;
  protected net.dtkanov.blocks.logic.Node[] data;
  protected net.dtkanov.blocks.logic.Node[] in_nops;
  public net.dtkanov.blocks.circuit.high_level.Incrementer(int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "MultiAdder.java"
public class net.dtkanov.blocks.circuit.high_level.MultiAdder extends net.dtkanov.blocks.logic.Node {
  protected int bitness;
  protected net.dtkanov.blocks.logic.Node[] data;
  protected net.dtkanov.blocks.logic.Node[] in_nops;
  public net.dtkanov.blocks.circuit.high_level.MultiAdder(int);
  public int getBitness();
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public void reset();
  public boolean isReady();
  public void propagate(boolean);
}
Compiled from "MultiMux.java"
public class net.dtkanov.blocks.circuit.high_level.MultiMux extends net.dtkanov.blocks.logic.Node {
  protected net.dtkanov.blocks.logic.Node csNOP;
  protected net.dtkanov.blocks.logic.Node[] inNOPs;
  protected net.dtkanov.blocks.logic.Node[] data;
  protected int bitness;
  public net.dtkanov.blocks.circuit.high_level.MultiMux(int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "Register.java"
public class net.dtkanov.blocks.circuit.high_level.Register extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.circuit.high_level.Register(int);
  public net.dtkanov.blocks.circuit.high_level.Register(int, net.dtkanov.blocks.logic.Wire);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
  public int getBitness();
}
Compiled from "ALU.java"
public class net.dtkanov.blocks.circuit.high_level.derived.ALU extends net.dtkanov.blocks.logic.Node {
  public static final int NUM_CMD_BITS;
  public static final int Z_FLAG_SHIFT;
  public static final int S_FLAG_SHIFT;
  public static final int P_FLAG_SHIFT;
  public static final int C_FLAG_SHIFT;
  protected int bitness;
  protected net.dtkanov.blocks.logic.Node[] inNOPs_A;
  protected net.dtkanov.blocks.logic.Node[] inNOPs_B;
  protected net.dtkanov.blocks.logic.Node[] opNOPs;
  protected net.dtkanov.blocks.logic.Node[] outMUXs;
  protected net.dtkanov.blocks.logic.Node out_z_flag;
  protected net.dtkanov.blocks.logic.Node out_s_flag;
  protected net.dtkanov.blocks.logic.Node out_p_flag;
  protected net.dtkanov.blocks.logic.Node out_c_flag;
  protected net.dtkanov.blocks.circuit.MultiAND opAND;
  protected net.dtkanov.blocks.circuit.MultiOR opOR;
  protected net.dtkanov.blocks.circuit.MultiXOR opXOR;
  protected net.dtkanov.blocks.circuit.MultiNOT opNOT;
  protected net.dtkanov.blocks.circuit.high_level.AdvancedShifter sh_left;
  protected net.dtkanov.blocks.circuit.high_level.AdvancedShifter sh_right;
  protected net.dtkanov.blocks.circuit.high_level.AdvancedRotator rot_left;
  protected net.dtkanov.blocks.circuit.high_level.AdvancedRotator rot_right;
  protected net.dtkanov.blocks.circuit.high_level.MultiAdder adder;
  protected net.dtkanov.blocks.circuit.high_level.Complementer compl;
  protected net.dtkanov.blocks.circuit.high_level.MultiAdder subtr;
  protected net.dtkanov.blocks.logic.ConstantNode zero;
  protected net.dtkanov.blocks.circuit.high_level.Incrementer inc;
  protected net.dtkanov.blocks.circuit.high_level.Complementer compl_pre;
  protected net.dtkanov.blocks.circuit.high_level.Incrementer inc_dec;
  protected net.dtkanov.blocks.circuit.high_level.Complementer compl_post;
  protected net.dtkanov.blocks.logic.derived.ORNode[] cmpz;
  public net.dtkanov.blocks.circuit.high_level.derived.ALU(int);
  protected void initFlags();
  protected void initOperations();
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "CPU.java"
public class net.dtkanov.blocks.circuit.high_level.derived.CPU extends net.dtkanov.blocks.logic.Node {
  public static final int ADDR_SIZE;
  protected byte[] storage;
  protected net.dtkanov.blocks.circuit.high_level.derived.ControlUnit cu;
  protected net.dtkanov.blocks.circuit.high_level.Extractor ext;
  protected net.dtkanov.blocks.logic.Node in_clock;
  protected net.dtkanov.blocks.logic.Node zero;
  public net.dtkanov.blocks.circuit.high_level.derived.CPU();
  public void init();
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
  public net.dtkanov.blocks.circuit.high_level.derived.ControlUnit getControlUnit();
  public void writeToMemory(int, int);
  public byte readFromMemory(int);
}
Compiled from "ControlUnit.java"
public class net.dtkanov.blocks.circuit.high_level.derived.ControlUnit extends net.dtkanov.blocks.logic.Node {
  public static int BITNESS;
  public static int C_FLAG;
  public static int F1_FLAG;
  public static int P_FLAG;
  public static int F3_FLAG;
  public static int H_FLAG;
  public static int I_FLAG;
  public static int Z_FLAG;
  public static int S_FLAG;
  public net.dtkanov.blocks.circuit.high_level.derived.ControlUnit();
  public void loadToStorage(int, byte[]);
  public void loadToStorage(byte[]);
  public void loadToStorage(int, byte);
  public byte getMemoryAt(int);
  public boolean getRegAValue(int);
  public boolean getRegBValue(int);
  public boolean getRegCValue(int);
  public boolean getRegDValue(int);
  public boolean getRegEValue(int);
  public boolean getRegHValue(int);
  public boolean getRegLValue(int);
  public boolean getFlag(int);
  public boolean getRegSPValue(int);
  public boolean getRegPCValue(int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
  static {};
}
Compiled from "PCRegController.java"
public class net.dtkanov.blocks.circuit.high_level.derived.PCRegController extends net.dtkanov.blocks.logic.Node {
  protected net.dtkanov.blocks.circuit.high_level.Register PC;
  protected net.dtkanov.blocks.logic.Node[] in_addr;
  protected net.dtkanov.blocks.logic.Node[] in_mode;
  protected net.dtkanov.blocks.logic.Node in_clock;
  protected net.dtkanov.blocks.circuit.high_level.MultiMux sel_add3_or_add2;
  protected net.dtkanov.blocks.circuit.high_level.MultiMux sel_add1_or_set;
  protected net.dtkanov.blocks.circuit.high_level.MultiMux sel_g1_or_g2;
  protected net.dtkanov.blocks.circuit.high_level.Incrementer[] inc;
  public net.dtkanov.blocks.circuit.high_level.derived.PCRegController(net.dtkanov.blocks.circuit.high_level.Register);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "StackController.java"
public class net.dtkanov.blocks.circuit.high_level.derived.StackController extends net.dtkanov.blocks.logic.Node {
  protected net.dtkanov.blocks.logic.Node[] in_data;
  protected net.dtkanov.blocks.logic.Node in_op;
  protected net.dtkanov.blocks.logic.Node in_clock;
  protected net.dtkanov.blocks.circuit.high_level.Register reg;
  protected net.dtkanov.blocks.circuit.Memory mem_low;
  protected net.dtkanov.blocks.circuit.Memory mem_high;
  protected net.dtkanov.blocks.circuit.high_level.Complementer neg;
  protected net.dtkanov.blocks.circuit.high_level.Complementer neg_neg_m1;
  protected net.dtkanov.blocks.circuit.high_level.Complementer neg_neg_m2;
  protected net.dtkanov.blocks.circuit.high_level.Incrementer inc_p1;
  protected net.dtkanov.blocks.circuit.high_level.Incrementer inc_p2;
  protected net.dtkanov.blocks.circuit.high_level.Incrementer inc_m1;
  protected net.dtkanov.blocks.circuit.high_level.Incrementer inc_m2;
  protected net.dtkanov.blocks.circuit.high_level.MultiMux sel_low;
  protected net.dtkanov.blocks.circuit.high_level.MultiMux sel_high;
  protected net.dtkanov.blocks.circuit.high_level.MultiMux sel_reg;
  public net.dtkanov.blocks.circuit.high_level.derived.StackController(net.dtkanov.blocks.circuit.high_level.Register, net.dtkanov.blocks.circuit.Memory);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
  public void propagate(boolean);
}
Compiled from "AppCore.java"
public class net.dtkanov.blocks.core.AppCore {
  public net.dtkanov.blocks.core.AppCore();
  public static void main(java.lang.String[]);
  public static void fibonacci();
}
Compiled from "ANDNode.java"
public class net.dtkanov.blocks.logic.ANDNode extends net.dtkanov.blocks.logic.Node {
  protected boolean[] state;
  protected boolean[] data;
  public net.dtkanov.blocks.logic.ANDNode();
  public net.dtkanov.blocks.logic.ANDNode(net.dtkanov.blocks.logic.Node, int, net.dtkanov.blocks.logic.Node, int);
  public void reset();
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
}
Compiled from "AddrPair.java"
public class net.dtkanov.blocks.logic.AddrPair {
  public net.dtkanov.blocks.logic.AddrPair(net.dtkanov.blocks.logic.Node, int);
  public net.dtkanov.blocks.logic.Node getNode();
  public int getPort();
}
Compiled from "ConstantNode.java"
public class net.dtkanov.blocks.logic.ConstantNode extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.logic.ConstantNode(boolean);
  public net.dtkanov.blocks.logic.ConstantNode setValue(boolean);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void reset();
}
Compiled from "NOPNode.java"
public class net.dtkanov.blocks.logic.NOPNode extends net.dtkanov.blocks.logic.NOTNode {
  public net.dtkanov.blocks.logic.NOPNode();
  public boolean out(int);
  public java.lang.String toString();
}
Compiled from "NOTNode.java"
public class net.dtkanov.blocks.logic.NOTNode extends net.dtkanov.blocks.logic.Node {
  protected boolean state;
  protected boolean data;
  public net.dtkanov.blocks.logic.NOTNode();
  public net.dtkanov.blocks.logic.NOTNode(net.dtkanov.blocks.logic.Node, int);
  public void reset();
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public java.lang.String toString();
}
Compiled from "Node.java"
public abstract class net.dtkanov.blocks.logic.Node {
  protected static int next_id;
  protected int id;
  protected net.dtkanov.blocks.logic.Wire out_node;
  protected net.dtkanov.blocks.logic.Node(net.dtkanov.blocks.logic.Wire);
  public int getId();
  public net.dtkanov.blocks.logic.Wire getWire();
  public net.dtkanov.blocks.logic.Node disconnectDst();
  public net.dtkanov.blocks.logic.Node connectDst(int, net.dtkanov.blocks.logic.Node, int);
  public net.dtkanov.blocks.logic.Node connectSrc(net.dtkanov.blocks.logic.Node, int, int);
  public abstract net.dtkanov.blocks.logic.Node in(int, boolean);
  public abstract boolean out(int);
  public abstract boolean isReady();
  public abstract void reset();
  public void propagate();
  public void propagate(boolean);
  public java.lang.String toString();
  public java.lang.String toStringDeep();
  static {};
}
Compiled from "Wire.java"
public class net.dtkanov.blocks.logic.Wire {
  public net.dtkanov.blocks.logic.Wire(net.dtkanov.blocks.logic.Node);
  public net.dtkanov.blocks.logic.Wire(net.dtkanov.blocks.logic.Node, java.util.Map<net.dtkanov.blocks.logic.AddrPair, java.lang.Integer>);
  public net.dtkanov.blocks.logic.Wire(net.dtkanov.blocks.logic.Node, int, net.dtkanov.blocks.logic.Node, int);
  public void addConnection(int, net.dtkanov.blocks.logic.Node, int);
  public void propagate();
  public java.lang.String toString();
  public java.lang.String toStringDeep();
}
Compiled from "NANDNode.java"
public class net.dtkanov.blocks.logic.derived.NANDNode extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.logic.derived.NANDNode();
  public net.dtkanov.blocks.logic.derived.NANDNode(net.dtkanov.blocks.logic.Wire);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void propagate(boolean);
  public void reset();
}
Compiled from "NORNode.java"
public class net.dtkanov.blocks.logic.derived.NORNode extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.logic.derived.NORNode();
  public net.dtkanov.blocks.logic.derived.NORNode(net.dtkanov.blocks.logic.Wire);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void propagate(boolean);
  public void reset();
}
Compiled from "ORNode.java"
public class net.dtkanov.blocks.logic.derived.ORNode extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.logic.derived.ORNode();
  public net.dtkanov.blocks.logic.derived.ORNode(net.dtkanov.blocks.logic.Wire);
  public net.dtkanov.blocks.logic.derived.ORNode(net.dtkanov.blocks.logic.Node, int, net.dtkanov.blocks.logic.Node, int);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void propagate(boolean);
  public void reset();
  public java.lang.String toString();
}
Compiled from "XORNode.java"
public class net.dtkanov.blocks.logic.derived.XORNode extends net.dtkanov.blocks.logic.Node {
  public net.dtkanov.blocks.logic.derived.XORNode();
  public net.dtkanov.blocks.logic.derived.XORNode(net.dtkanov.blocks.logic.Wire);
  public net.dtkanov.blocks.logic.Node in(int, boolean);
  public boolean out(int);
  public boolean isReady();
  public void propagate(boolean);
  public void reset();
  public java.lang.String toString();
}
Compiled from "ALUTest.java"
public class net.dtkanov.blocks.tests.ALUTest {
  public net.dtkanov.blocks.tests.ALUTest();
  public void setUp() throws java.lang.Exception;
  public void ANDTest();
  public void ORTest();
  public void XORTest();
  public void NOTTest();
  public void SHLTest();
  public void SHRTest();
  public void ROLTest();
  public void RORTest();
  public void ADDTest();
  public void SUBTest();
  public void INCTest();
  public void DECTest();
  public void CMPNZTest();
  public void SIGNTest();
  public void OP1Test();
  public void OP2Test();
}
Compiled from "BaseLogicTest.java"
public class net.dtkanov.blocks.tests.BaseLogicTest {
  public net.dtkanov.blocks.tests.BaseLogicTest();
  public void NOTTest();
  public void NOPTest();
  public void ANDTest();
}
Compiled from "CPUTest.java"
public class net.dtkanov.blocks.tests.CPUTest {
  public net.dtkanov.blocks.tests.CPUTest();
  public void setUp() throws java.lang.Exception;
  public void fibonacciTest();
  protected int getPCValue();
  protected void checkReg(int, int);
  protected void printRegisters();
}
Compiled from "CircuitsTest.java"
public class net.dtkanov.blocks.tests.CircuitsTest {
  public net.dtkanov.blocks.tests.CircuitsTest();
  public void SRLatchTest();
  public void AllTest();
  public void GatedDLatchTest();
  public void MuxTest();
  public void DeMuxTest();
  public void MultiNOTTest();
  public void MultiANDTest();
  public void MultiORTest();
  public void MultiXORTest();
  public void AdderTest();
  public void HalfAdderTest();
  public void ShifterTest();
  public void RotatorTest();
  public void MemoryTest();
  public void LookUpTest();
}
Compiled from "ControlUnitTest.java"
public class net.dtkanov.blocks.tests.ControlUnitTest {
  public static final int REG_A;
  public static final int REG_B;
  public static final int REG_C;
  public static final int REG_D;
  public static final int REG_E;
  public static final int REG_H;
  public static final int REG_L;
  public net.dtkanov.blocks.tests.ControlUnitTest();
  public void setUp() throws java.lang.Exception;
  public void NOPTest();
  public void JMPTest();
  public void PCHLTest();
  public void JNZTest();
  public void JZTest();
  public void JNCTest();
  public void JCTest();
  public void JNPTest();
  public void JPTest();
  public void JNSTest();
  public void JSTest();
  public void MVITest();
  public void MOVTest();
  public void ADITest();
  public void ADDTest();
  public void SUITest();
  public void SUBTest();
  public void ANITest();
  public void ANATest();
  public void ORITest();
  public void ORATest();
  public void XRITest();
  public void XRATest();
  public void INRTest();
  public void DCRTest();
  public void RLCTest();
  public void RRCTest();
  public void CMPTest();
  public void CPITest();
  public void STATest();
  public void LDATest();
  public void LDAXTest();
  public void STAXTest();
  public void CMATest();
  public void STCTest();
  public void CMCTest();
  protected void moveToReg(int, int);
  protected void setOperationAndPropagete(int);
  protected void setValuesAndPropagete(int, int);
  protected void checkReg(int, int);
  protected int getPCValue();
  protected void printRegisters();
}
Compiled from "DerivedLogicTest.java"
public class net.dtkanov.blocks.tests.DerivedLogicTest {
  public net.dtkanov.blocks.tests.DerivedLogicTest();
  public void ORTest();
  public void NORTest();
  public void NANDTest();
  public void XORTest();
}
Compiled from "HighLevelCircuitsTest.java"
public class net.dtkanov.blocks.tests.HighLevelCircuitsTest {
  public net.dtkanov.blocks.tests.HighLevelCircuitsTest();
  public void RegisterTest();
  public void MultiAdderTest();
  public void IncrementerTest();
  public void ComplementerTest();
  public void MultiMuxTest();
  public void AdvancedShifterTest();
  public void AdvancedRotatorTest();
  public void ExtractorTest();
}
Compiled from "PCRegControlTest.java"
public class net.dtkanov.blocks.tests.PCRegControlTest {
  protected net.dtkanov.blocks.circuit.high_level.Register PC;
  protected net.dtkanov.blocks.circuit.high_level.derived.PCRegController ctrl;
  public net.dtkanov.blocks.tests.PCRegControlTest();
  public void setUp() throws java.lang.Exception;
  public void INC1Test();
  public void INC2Test();
  public void INC3Test();
  public void SetTest();
  public void SequenceTest();
  protected void checkValue(int);
  protected int getValue();
}
Compiled from "StackControllerTest.java"
public class net.dtkanov.blocks.tests.StackControllerTest {
  public net.dtkanov.blocks.tests.StackControllerTest();
  public void setUp() throws java.lang.Exception;
  public void PUSHTest();
  public void POPTest();
  protected void checkSPValue(int);
  protected void checkStackValue(int);
}
