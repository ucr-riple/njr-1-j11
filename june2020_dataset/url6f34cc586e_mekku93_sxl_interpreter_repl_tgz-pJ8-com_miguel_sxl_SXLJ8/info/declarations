Compiled from "ASTAddOp.java"
public class com.miguel.sxl.ASTAddOp extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTAddOp(int);
  public com.miguel.sxl.ASTAddOp(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTArg.java"
public class com.miguel.sxl.ASTArg extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTArg(int);
  public com.miguel.sxl.ASTArg(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTArgs.java"
public class com.miguel.sxl.ASTArgs extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTArgs(int);
  public com.miguel.sxl.ASTArgs(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTAssignmentStatement.java"
public class com.miguel.sxl.ASTAssignmentStatement extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTAssignmentStatement(int);
  public com.miguel.sxl.ASTAssignmentStatement(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTBlock.java"
public class com.miguel.sxl.ASTBlock extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTBlock(int);
  public com.miguel.sxl.ASTBlock(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTBooleanLiteral.java"
public class com.miguel.sxl.ASTBooleanLiteral extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTBooleanLiteral(int);
  public com.miguel.sxl.ASTBooleanLiteral(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTCharLiteral.java"
public class com.miguel.sxl.ASTCharLiteral extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTCharLiteral(int);
  public com.miguel.sxl.ASTCharLiteral(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTElseStatement.java"
public class com.miguel.sxl.ASTElseStatement extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTElseStatement(int);
  public com.miguel.sxl.ASTElseStatement(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTEqualTo.java"
public class com.miguel.sxl.ASTEqualTo extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTEqualTo(int);
  public com.miguel.sxl.ASTEqualTo(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTExpression.java"
public class com.miguel.sxl.ASTExpression extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTExpression(int);
  public com.miguel.sxl.ASTExpression(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTFactor.java"
public class com.miguel.sxl.ASTFactor extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTFactor(int);
  public com.miguel.sxl.ASTFactor(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTFunctionCall.java"
public class com.miguel.sxl.ASTFunctionCall extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTFunctionCall(int);
  public com.miguel.sxl.ASTFunctionCall(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTFunctionDecl.java"
public class com.miguel.sxl.ASTFunctionDecl extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTFunctionDecl(int);
  public com.miguel.sxl.ASTFunctionDecl(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTGreaterEqualsTo.java"
public class com.miguel.sxl.ASTGreaterEqualsTo extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTGreaterEqualsTo(int);
  public com.miguel.sxl.ASTGreaterEqualsTo(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTGreaterThan.java"
public class com.miguel.sxl.ASTGreaterThan extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTGreaterThan(int);
  public com.miguel.sxl.ASTGreaterThan(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTHaltStatement.java"
public class com.miguel.sxl.ASTHaltStatement extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTHaltStatement(int);
  public com.miguel.sxl.ASTHaltStatement(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTIdentifier.java"
public class com.miguel.sxl.ASTIdentifier extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTIdentifier(int);
  public com.miguel.sxl.ASTIdentifier(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTIfStatement.java"
public class com.miguel.sxl.ASTIfStatement extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTIfStatement(int);
  public com.miguel.sxl.ASTIfStatement(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTIntegerLiteral.java"
public class com.miguel.sxl.ASTIntegerLiteral extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTIntegerLiteral(int);
  public com.miguel.sxl.ASTIntegerLiteral(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTLessEqualsTo.java"
public class com.miguel.sxl.ASTLessEqualsTo extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTLessEqualsTo(int);
  public com.miguel.sxl.ASTLessEqualsTo(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTLessThan.java"
public class com.miguel.sxl.ASTLessThan extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTLessThan(int);
  public com.miguel.sxl.ASTLessThan(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTMultOp.java"
public class com.miguel.sxl.ASTMultOp extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTMultOp(int);
  public com.miguel.sxl.ASTMultOp(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTNotEqualTo.java"
public class com.miguel.sxl.ASTNotEqualTo extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTNotEqualTo(int);
  public com.miguel.sxl.ASTNotEqualTo(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTParam.java"
public class com.miguel.sxl.ASTParam extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTParam(int);
  public com.miguel.sxl.ASTParam(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTParams.java"
public class com.miguel.sxl.ASTParams extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTParams(int);
  public com.miguel.sxl.ASTParams(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTReadStatement.java"
public class com.miguel.sxl.ASTReadStatement extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTReadStatement(int);
  public com.miguel.sxl.ASTReadStatement(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTRealLiteral.java"
public class com.miguel.sxl.ASTRealLiteral extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTRealLiteral(int);
  public com.miguel.sxl.ASTRealLiteral(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTRelOp.java"
public class com.miguel.sxl.ASTRelOp extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTRelOp(int);
  public com.miguel.sxl.ASTRelOp(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTSXL.java"
public class com.miguel.sxl.ASTSXL extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTSXL(int);
  public com.miguel.sxl.ASTSXL(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTSimpleExpression.java"
public class com.miguel.sxl.ASTSimpleExpression extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTSimpleExpression(int);
  public com.miguel.sxl.ASTSimpleExpression(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTStringLiteral.java"
public class com.miguel.sxl.ASTStringLiteral extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTStringLiteral(int);
  public com.miguel.sxl.ASTStringLiteral(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTTerm.java"
public class com.miguel.sxl.ASTTerm extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTTerm(int);
  public com.miguel.sxl.ASTTerm(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTThenStatement.java"
public class com.miguel.sxl.ASTThenStatement extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTThenStatement(int);
  public com.miguel.sxl.ASTThenStatement(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTType.java"
public class com.miguel.sxl.ASTType extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTType(int);
  public com.miguel.sxl.ASTType(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTTypeBool.java"
public class com.miguel.sxl.ASTTypeBool extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTTypeBool(int);
  public com.miguel.sxl.ASTTypeBool(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTTypeCast.java"
public class com.miguel.sxl.ASTTypeCast extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTTypeCast(int);
  public com.miguel.sxl.ASTTypeCast(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTTypeChar.java"
public class com.miguel.sxl.ASTTypeChar extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTTypeChar(int);
  public com.miguel.sxl.ASTTypeChar(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTTypeInt.java"
public class com.miguel.sxl.ASTTypeInt extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTTypeInt(int);
  public com.miguel.sxl.ASTTypeInt(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTTypeReal.java"
public class com.miguel.sxl.ASTTypeReal extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTTypeReal(int);
  public com.miguel.sxl.ASTTypeReal(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTTypeString.java"
public class com.miguel.sxl.ASTTypeString extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTTypeString(int);
  public com.miguel.sxl.ASTTypeString(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTTypeUnit.java"
public class com.miguel.sxl.ASTTypeUnit extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTTypeUnit(int);
  public com.miguel.sxl.ASTTypeUnit(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTUnary.java"
public class com.miguel.sxl.ASTUnary extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTUnary(int);
  public com.miguel.sxl.ASTUnary(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTUnaryOp.java"
public class com.miguel.sxl.ASTUnaryOp extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTUnaryOp(int);
  public com.miguel.sxl.ASTUnaryOp(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTUnitLiteral.java"
public class com.miguel.sxl.ASTUnitLiteral extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTUnitLiteral(int);
  public com.miguel.sxl.ASTUnitLiteral(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTVariableDecl.java"
public class com.miguel.sxl.ASTVariableDecl extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTVariableDecl(int);
  public com.miguel.sxl.ASTVariableDecl(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTWhileStatement.java"
public class com.miguel.sxl.ASTWhileStatement extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTWhileStatement(int);
  public com.miguel.sxl.ASTWhileStatement(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "ASTWriteStatement.java"
public class com.miguel.sxl.ASTWriteStatement extends com.miguel.sxl.SXLNode {
  public com.miguel.sxl.ASTWriteStatement(int);
  public com.miguel.sxl.ASTWriteStatement(com.miguel.sxl.SXLParser, int);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "DuplicateSymbolException.java"
public class com.miguel.sxl.DuplicateSymbolException extends java.lang.Exception {
  public com.miguel.sxl.DuplicateSymbolException(java.lang.String);
  public java.lang.String getMessage();
}
Compiled from "JJTSXLParserState.java"
public class com.miguel.sxl.JJTSXLParserState {
  public com.miguel.sxl.JJTSXLParserState();
  public boolean nodeCreated();
  public void reset();
  public com.miguel.sxl.Node rootNode();
  public void pushNode(com.miguel.sxl.Node);
  public com.miguel.sxl.Node popNode();
  public com.miguel.sxl.Node peekNode();
  public int nodeArity();
  public void clearNodeScope(com.miguel.sxl.Node);
  public void openNodeScope(com.miguel.sxl.Node);
  public void closeNodeScope(com.miguel.sxl.Node, int);
  public void closeNodeScope(com.miguel.sxl.Node, boolean);
}
Compiled from "Node.java"
public interface com.miguel.sxl.Node {
  public abstract void jjtOpen();
  public abstract void jjtClose();
  public abstract void jjtSetParent(com.miguel.sxl.Node);
  public abstract com.miguel.sxl.Node jjtGetParent();
  public abstract void jjtAddChild(com.miguel.sxl.Node, int);
  public abstract com.miguel.sxl.Node jjtGetChild(int);
  public abstract int jjtGetNumChildren();
  public abstract java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
}
Compiled from "Operation.java"
public class com.miguel.sxl.Operation {
  public com.miguel.sxl.Operation();
  public static java.lang.Object perform(java.lang.Object, com.miguel.sxl.SXLValue, com.miguel.sxl.SXLValue) throws java.lang.Exception;
}
Compiled from "ParseException.java"
public class com.miguel.sxl.ParseException extends java.lang.Exception {
  public com.miguel.sxl.Token currentToken;
  public int[][] expectedTokenSequences;
  public java.lang.String[] tokenImage;
  protected java.lang.String eol;
  public com.miguel.sxl.ParseException(com.miguel.sxl.Token, int[][], java.lang.String[]);
  public com.miguel.sxl.ParseException();
  public com.miguel.sxl.ParseException(java.lang.String);
  static java.lang.String add_escapes(java.lang.String);
}
Compiled from "SXL.java"
public class com.miguel.sxl.SXL {
  public static com.miguel.sxl.SXL runtime;
  public java.util.Scanner scanner;
  public com.miguel.sxl.SXLParser parser;
  public com.miguel.sxl.SXLVistor visitor;
  public com.miguel.sxl.SXLSymbolTable symtable;
  public com.miguel.sxl.SXL(java.io.InputStream);
  public void exit(int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SXLBoolean.java"
public class com.miguel.sxl.SXLBoolean implements com.miguel.sxl.SXLValue {
  public com.miguel.sxl.SXLBoolean(boolean);
  public com.miguel.sxl.SXLBoolean(java.lang.String) throws java.lang.Exception;
  public boolean boolValue();
  public java.lang.String getType();
  public java.lang.String toString();
  public void setValue(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue and(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue or(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue not();
  public com.miguel.sxl.SXLValue unary(java.lang.String);
  public com.miguel.sxl.SXLValue add(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue subtract(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue multiply(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue divide(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isGreaterThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isLessThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isEqualTo(com.miguel.sxl.SXLValue);
  public void fromString(java.lang.String) throws java.lang.Exception;
  public com.miguel.sxl.SXLValue castInto(java.lang.String) throws java.lang.Exception;
}
Compiled from "SXLCharacter.java"
public class com.miguel.sxl.SXLCharacter implements com.miguel.sxl.SXLValue {
  public com.miguel.sxl.SXLCharacter(char);
  public char charValue();
  public java.lang.String getType();
  public java.lang.String toString();
  public void setValue(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue add(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue unary(java.lang.String);
  public com.miguel.sxl.SXLValue subtract(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue multiply(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue divide(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue and(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue or(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue not();
  public com.miguel.sxl.SXLValue isGreaterThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isLessThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isEqualTo(com.miguel.sxl.SXLValue);
  public void fromString(java.lang.String) throws java.lang.Exception;
  public com.miguel.sxl.SXLValue castInto(java.lang.String) throws java.lang.Exception;
}
Compiled from "SXLDumpTree.java"
public class com.miguel.sxl.SXLDumpTree {
  public com.miguel.sxl.SXLDumpTree();
  public static void main(java.lang.String[]);
}
Compiled from "SXLFunction.java"
public class com.miguel.sxl.SXLFunction implements com.miguel.sxl.SXLValue {
  public com.miguel.sxl.SXLFunction(com.miguel.sxl.SXLValue, java.util.ArrayList<com.miguel.sxl.SXLParam>, com.miguel.sxl.ASTBlock);
  public com.miguel.sxl.SXLValue getReturnType();
  public java.util.ArrayList<com.miguel.sxl.SXLParam> getParams();
  public com.miguel.sxl.ASTBlock getNode();
  public java.lang.String getType();
  public void setValue(com.miguel.sxl.SXLValue);
  public java.lang.String toString();
  public com.miguel.sxl.SXLValue add(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue subtract(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue multiply(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue divide(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue and(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue or(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue not();
  public com.miguel.sxl.SXLValue unary(java.lang.String);
  public com.miguel.sxl.SXLValue isGreaterThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isLessThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isEqualTo(com.miguel.sxl.SXLValue);
  public void fromString(java.lang.String) throws java.lang.Exception;
  public com.miguel.sxl.SXLValue castInto(java.lang.String) throws java.lang.Exception;
}
Compiled from "SXLInteger.java"
public class com.miguel.sxl.SXLInteger implements com.miguel.sxl.SXLValue {
  public com.miguel.sxl.SXLInteger(int);
  public com.miguel.sxl.SXLInteger(java.lang.String) throws java.lang.Exception;
  public int intValue();
  public java.lang.String getType();
  public java.lang.String toString();
  public void setValue(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue add(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue subtract(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue multiply(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue divide(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue unary(java.lang.String);
  public com.miguel.sxl.SXLValue and(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue or(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue not();
  public com.miguel.sxl.SXLValue isGreaterThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isLessThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isEqualTo(com.miguel.sxl.SXLValue);
  public void fromString(java.lang.String) throws java.lang.Exception;
  public com.miguel.sxl.SXLValue castInto(java.lang.String) throws java.lang.Exception;
}
Compiled from "SXLNode.java"
public class com.miguel.sxl.SXLNode extends com.miguel.sxl.SimpleNode {
  public int line;
  public int col;
  public com.miguel.sxl.SXLNode(int);
  public com.miguel.sxl.SXLNode(com.miguel.sxl.SXLParser, int);
  public java.lang.String toString();
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
  public void dump(java.lang.String);
  public java.lang.String getPosition();
  public java.lang.String hashID();
}
Compiled from "SXLParam.java"
public class com.miguel.sxl.SXLParam {
  public java.lang.String identifier;
  public com.miguel.sxl.SXLValue type;
  public com.miguel.sxl.SXLParam(java.lang.String, com.miguel.sxl.SXLValue);
}
Compiled from "SXLParser.java"
public class com.miguel.sxl.SXLParser implements com.miguel.sxl.SXLParserTreeConstants,com.miguel.sxl.SXLParserConstants {
  protected com.miguel.sxl.JJTSXLParserState jjtree;
  public com.miguel.sxl.SXLParserTokenManager token_source;
  com.miguel.sxl.SimpleCharStream jj_input_stream;
  public com.miguel.sxl.Token token;
  public com.miguel.sxl.Token jj_nt;
  public static void main(java.lang.String[]);
  public final void AddOp() throws com.miguel.sxl.ParseException;
  public final void MultOp() throws com.miguel.sxl.ParseException;
  public final void RelOp() throws com.miguel.sxl.ParseException;
  public final void IntegerLiteral() throws com.miguel.sxl.ParseException;
  public final void Literal() throws com.miguel.sxl.ParseException;
  public final void Type() throws com.miguel.sxl.ParseException;
  public final void Identifier() throws com.miguel.sxl.ParseException;
  public final void TypeCast() throws com.miguel.sxl.ParseException;
  public final void ActualParams() throws com.miguel.sxl.ParseException;
  public final void FunctionCall() throws com.miguel.sxl.ParseException;
  public final void Unary() throws com.miguel.sxl.ParseException;
  public final void Factor() throws com.miguel.sxl.ParseException;
  public final void Term() throws com.miguel.sxl.ParseException;
  public final void SimpleExpression() throws com.miguel.sxl.ParseException;
  public final void Expression() throws com.miguel.sxl.ParseException;
  public final void SubExpression() throws com.miguel.sxl.ParseException;
  public final void VariableDecl() throws com.miguel.sxl.ParseException;
  public final void FunctionDecl() throws com.miguel.sxl.ParseException;
  public final void FormalParams() throws com.miguel.sxl.ParseException;
  public final void FormalParam() throws com.miguel.sxl.ParseException;
  public final void IfStatement() throws com.miguel.sxl.ParseException;
  public final void WhileStatement() throws com.miguel.sxl.ParseException;
  public final void AssignmentStatement() throws com.miguel.sxl.ParseException;
  public final void ReadStatement() throws com.miguel.sxl.ParseException;
  public final void WriteStatement() throws com.miguel.sxl.ParseException;
  public final void HaltStatement() throws com.miguel.sxl.ParseException;
  public final void Statement() throws com.miguel.sxl.ParseException;
  public final void Block() throws com.miguel.sxl.ParseException;
  public final com.miguel.sxl.ASTSXL Start() throws com.miguel.sxl.ParseException;
  public com.miguel.sxl.SXLParser(java.io.InputStream);
  public com.miguel.sxl.SXLParser(java.io.InputStream, java.lang.String);
  public void ReInit(java.io.InputStream);
  public void ReInit(java.io.InputStream, java.lang.String);
  public com.miguel.sxl.SXLParser(java.io.Reader);
  public void ReInit(java.io.Reader);
  public com.miguel.sxl.SXLParser(com.miguel.sxl.SXLParserTokenManager);
  public void ReInit(com.miguel.sxl.SXLParserTokenManager);
  public final com.miguel.sxl.Token getNextToken();
  public final com.miguel.sxl.Token getToken(int);
  public com.miguel.sxl.ParseException generateParseException();
  public final void enable_tracing();
  public final void disable_tracing();
  static {};
}
Compiled from "SXLParser.java"
class com.miguel.sxl.SXLParser$1 {
}
Compiled from "SXLParser.java"
final class com.miguel.sxl.SXLParser$JJCalls {
  int gen;
  com.miguel.sxl.Token first;
  int arg;
  com.miguel.sxl.SXLParser$JJCalls next;
  com.miguel.sxl.SXLParser$JJCalls();
}
Compiled from "SXLParser.java"
final class com.miguel.sxl.SXLParser$LookaheadSuccess extends java.lang.Error {
  com.miguel.sxl.SXLParser$LookaheadSuccess(com.miguel.sxl.SXLParser$1);
}
Compiled from "SXLParserConstants.java"
public interface com.miguel.sxl.SXLParserConstants {
  public static final int EOF;
  public static final int WHITESPACE_CHARS;
  public static final int WHITESPACE;
  public static final int COMMENT;
  public static final int MULTI_COMMENT;
  public static final int QUOTE;
  public static final int DBL_QUOTE;
  public static final int UNDERSCORE;
  public static final int DIGIT;
  public static final int PRINTABLE;
  public static final int LETTER;
  public static final int REAL_EXP;
  public static final int EQUALS;
  public static final int PLUS;
  public static final int MINUS;
  public static final int MULTIPLY;
  public static final int DIVIDE;
  public static final int GREATER;
  public static final int LESSER;
  public static final int GREATER_EQUALS;
  public static final int LESSER_EQUALS;
  public static final int DBL_EQUAL;
  public static final int NOT_EQUALS;
  public static final int COLON;
  public static final int SEMICOLON;
  public static final int COMMA;
  public static final int OPEN_PAREN;
  public static final int CLOSE_PAREN;
  public static final int OPEN_BLOCK;
  public static final int CLOSE_BLOCK;
  public static final int INTEGER_LITERAL;
  public static final int REAL_LITERAL;
  public static final int UNIT_LITERAL;
  public static final int BOOLEAN_LITERAL;
  public static final int STRING_LITERAL;
  public static final int CHAR_LITERAL;
  public static final int TYPE_INT;
  public static final int TYPE_REAL;
  public static final int TYPE_BOOL;
  public static final int TYPE_CHAR;
  public static final int TYPE_STRING;
  public static final int TYPE_UNIT;
  public static final int KW_SET;
  public static final int KW_LET;
  public static final int KW_OR;
  public static final int KW_AND;
  public static final int KW_NOT;
  public static final int KW_IN;
  public static final int KW_IF;
  public static final int KW_ELSE;
  public static final int KW_WHILE;
  public static final int KW_FUNCTION;
  public static final int KW_READ;
  public static final int KW_WRITE;
  public static final int KW_HALT;
  public static final int IDENTIFIER;
  public static final int IDENTIFIER_START;
  public static final int IDENTIFIER_REST;
  public static final int DEFAULT;
  public static final java.lang.String[] tokenImage;
  static {};
}
Compiled from "SXLParserTokenManager.java"
public class com.miguel.sxl.SXLParserTokenManager implements com.miguel.sxl.SXLParserConstants {
  public java.io.PrintStream debugStream;
  static final long[] jjbitVec0;
  static final int[] jjnextStates;
  public static final java.lang.String[] jjstrLiteralImages;
  public static final java.lang.String[] lexStateNames;
  static final long[] jjtoToken;
  static final long[] jjtoSkip;
  protected com.miguel.sxl.SimpleCharStream input_stream;
  protected char curChar;
  int curLexState;
  int defaultLexState;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;
  public void setDebugStream(java.io.PrintStream);
  public com.miguel.sxl.SXLParserTokenManager(com.miguel.sxl.SimpleCharStream);
  public com.miguel.sxl.SXLParserTokenManager(com.miguel.sxl.SimpleCharStream, int);
  public void ReInit(com.miguel.sxl.SimpleCharStream);
  public void ReInit(com.miguel.sxl.SimpleCharStream, int);
  public void SwitchTo(int);
  protected com.miguel.sxl.Token jjFillToken();
  public com.miguel.sxl.Token getNextToken();
  static {};
}
Compiled from "SXLParserTreeConstants.java"
public interface com.miguel.sxl.SXLParserTreeConstants {
  public static final int JJTADDOP;
  public static final int JJTMULTOP;
  public static final int JJTRELOP;
  public static final int JJTGREATERTHAN;
  public static final int JJTLESSTHAN;
  public static final int JJTGREATEREQUALSTO;
  public static final int JJTLESSEQUALSTO;
  public static final int JJTEQUALTO;
  public static final int JJTNOTEQUALTO;
  public static final int JJTVOID;
  public static final int JJTINTEGERLITERAL;
  public static final int JJTREALLITERAL;
  public static final int JJTCHARLITERAL;
  public static final int JJTSTRINGLITERAL;
  public static final int JJTBOOLEANLITERAL;
  public static final int JJTUNITLITERAL;
  public static final int JJTTYPE;
  public static final int JJTTYPEINT;
  public static final int JJTTYPEREAL;
  public static final int JJTTYPEBOOL;
  public static final int JJTTYPECHAR;
  public static final int JJTTYPESTRING;
  public static final int JJTTYPEUNIT;
  public static final int JJTIDENTIFIER;
  public static final int JJTTYPECAST;
  public static final int JJTARGS;
  public static final int JJTARG;
  public static final int JJTFUNCTIONCALL;
  public static final int JJTUNARY;
  public static final int JJTUNARYOP;
  public static final int JJTFACTOR;
  public static final int JJTTERM;
  public static final int JJTSIMPLEEXPRESSION;
  public static final int JJTEXPRESSION;
  public static final int JJTVARIABLEDECL;
  public static final int JJTFUNCTIONDECL;
  public static final int JJTPARAMS;
  public static final int JJTPARAM;
  public static final int JJTIFSTATEMENT;
  public static final int JJTTHENSTATEMENT;
  public static final int JJTBLOCK;
  public static final int JJTELSESTATEMENT;
  public static final int JJTWHILESTATEMENT;
  public static final int JJTASSIGNMENTSTATEMENT;
  public static final int JJTREADSTATEMENT;
  public static final int JJTWRITESTATEMENT;
  public static final int JJTHALTSTATEMENT;
  public static final int JJTSXL;
  public static final java.lang.String[] jjtNodeName;
  static {};
}
Compiled from "SXLParserVisitor.java"
public interface com.miguel.sxl.SXLParserVisitor {
  public abstract java.lang.Object visit(com.miguel.sxl.SimpleNode, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTAddOp, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTMultOp, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTRelOp, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTGreaterThan, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTLessThan, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTGreaterEqualsTo, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTLessEqualsTo, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTEqualTo, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTNotEqualTo, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTIntegerLiteral, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTRealLiteral, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTCharLiteral, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTStringLiteral, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTBooleanLiteral, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTUnitLiteral, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTType, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTTypeInt, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTTypeReal, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTTypeBool, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTTypeChar, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTTypeString, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTTypeUnit, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTIdentifier, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTTypeCast, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTArgs, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTArg, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTFunctionCall, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTUnary, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTUnaryOp, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTFactor, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTTerm, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTSimpleExpression, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTExpression, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTVariableDecl, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTFunctionDecl, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTParams, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTParam, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTIfStatement, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTThenStatement, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTBlock, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTElseStatement, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTWhileStatement, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTAssignmentStatement, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTReadStatement, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTWriteStatement, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTHaltStatement, java.lang.Object);
  public abstract java.lang.Object visit(com.miguel.sxl.ASTSXL, java.lang.Object);
}
Compiled from "SXLReal.java"
public class com.miguel.sxl.SXLReal implements com.miguel.sxl.SXLValue {
  public com.miguel.sxl.SXLReal(double);
  public com.miguel.sxl.SXLReal(java.lang.String) throws java.lang.Exception;
  public double dblValue();
  public java.lang.String getType();
  public java.lang.String toString();
  public void setValue(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue add(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue subtract(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue multiply(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue divide(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue unary(java.lang.String);
  public com.miguel.sxl.SXLValue and(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue or(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue not();
  public com.miguel.sxl.SXLValue isGreaterThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isLessThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isEqualTo(com.miguel.sxl.SXLValue);
  public void fromString(java.lang.String) throws java.lang.Exception;
  public com.miguel.sxl.SXLValue castInto(java.lang.String) throws java.lang.Exception;
}
Compiled from "SXLScope.java"
public class com.miguel.sxl.SXLScope {
  public com.miguel.sxl.SXLScope(com.miguel.sxl.SXLScope);
  public com.miguel.sxl.SXLScope getParent();
  public com.miguel.sxl.SXLValue getSymbol(java.lang.String) throws com.miguel.sxl.SymbolNotFoundException;
  public void setSymbol(java.lang.String, com.miguel.sxl.SXLValue) throws com.miguel.sxl.SymbolNotFoundException;
  public boolean symbolExists(java.lang.String);
  public void putSymbol(java.lang.String, com.miguel.sxl.SXLValue) throws com.miguel.sxl.DuplicateSymbolException;
  public com.miguel.sxl.SXLScope getScope(java.lang.String) throws java.lang.Exception;
  public void deleteScope(java.lang.String) throws java.lang.Exception;
  public com.miguel.sxl.SXLScope createScope(java.lang.String) throws java.lang.Exception;
  public void dump(java.lang.String);
}
Compiled from "SXLString.java"
public class com.miguel.sxl.SXLString implements com.miguel.sxl.SXLValue {
  public com.miguel.sxl.SXLString(java.lang.String);
  public java.lang.String strValue();
  public java.lang.String getType();
  public java.lang.String toString();
  public void setValue(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue add(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue unary(java.lang.String);
  public com.miguel.sxl.SXLValue subtract(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue multiply(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue divide(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue and(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue or(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue not();
  public com.miguel.sxl.SXLValue isGreaterThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isLessThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isEqualTo(com.miguel.sxl.SXLValue);
  public void fromString(java.lang.String) throws java.lang.Exception;
  public com.miguel.sxl.SXLValue castInto(java.lang.String) throws java.lang.Exception;
}
Compiled from "SXLSymbolTable.java"
public class com.miguel.sxl.SXLSymbolTable extends com.miguel.sxl.SXLScope {
  public static final java.lang.String MAIN_SCOPE;
  public com.miguel.sxl.SXLSymbolTable();
  public com.miguel.sxl.SXLScope getCurrentScope();
  public void enterScope(java.lang.String) throws java.lang.Exception;
  public void enterScope(com.miguel.sxl.SXLScope);
  public void dump(java.lang.String);
}
Compiled from "SXLUnit.java"
public class com.miguel.sxl.SXLUnit implements com.miguel.sxl.SXLValue {
  public com.miguel.sxl.SXLUnit();
  public void setValue(com.miguel.sxl.SXLValue);
  public java.lang.String getType();
  public com.miguel.sxl.SXLValue add(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue subtract(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue multiply(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue divide(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue and(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue or(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue not();
  public com.miguel.sxl.SXLValue unary(java.lang.String);
  public com.miguel.sxl.SXLValue isGreaterThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isLessThan(com.miguel.sxl.SXLValue);
  public com.miguel.sxl.SXLValue isEqualTo(com.miguel.sxl.SXLValue);
  public void fromString(java.lang.String) throws java.lang.Exception;
  public com.miguel.sxl.SXLValue castInto(java.lang.String) throws java.lang.Exception;
}
Compiled from "SXLValue.java"
public interface com.miguel.sxl.SXLValue {
  public abstract java.lang.String getType();
  public abstract void setValue(com.miguel.sxl.SXLValue);
  public abstract com.miguel.sxl.SXLValue add(com.miguel.sxl.SXLValue);
  public abstract com.miguel.sxl.SXLValue subtract(com.miguel.sxl.SXLValue);
  public abstract com.miguel.sxl.SXLValue multiply(com.miguel.sxl.SXLValue);
  public abstract com.miguel.sxl.SXLValue divide(com.miguel.sxl.SXLValue);
  public abstract com.miguel.sxl.SXLValue and(com.miguel.sxl.SXLValue);
  public abstract com.miguel.sxl.SXLValue or(com.miguel.sxl.SXLValue);
  public abstract com.miguel.sxl.SXLValue not();
  public abstract com.miguel.sxl.SXLValue unary(java.lang.String);
  public abstract com.miguel.sxl.SXLValue isGreaterThan(com.miguel.sxl.SXLValue);
  public abstract com.miguel.sxl.SXLValue isLessThan(com.miguel.sxl.SXLValue);
  public abstract com.miguel.sxl.SXLValue isEqualTo(com.miguel.sxl.SXLValue);
  public abstract void fromString(java.lang.String) throws java.lang.Exception;
  public abstract com.miguel.sxl.SXLValue castInto(java.lang.String) throws java.lang.Exception;
}
Compiled from "SXLVistor.java"
public class com.miguel.sxl.SXLVistor implements com.miguel.sxl.SXLParserVisitor {
  public com.miguel.sxl.SXLVistor();
  public java.lang.Object visit(com.miguel.sxl.SimpleNode, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTAddOp, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTMultOp, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTUnaryOp, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTRelOp, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTGreaterThan, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTLessThan, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTGreaterEqualsTo, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTLessEqualsTo, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTEqualTo, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTNotEqualTo, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTIntegerLiteral, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTRealLiteral, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTCharLiteral, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTStringLiteral, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTBooleanLiteral, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTUnitLiteral, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTType, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTTypeInt, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTTypeReal, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTTypeBool, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTTypeChar, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTTypeString, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTTypeUnit, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTIdentifier, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTTypeCast, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTUnary, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTFactor, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTTerm, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTSimpleExpression, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTExpression, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTVariableDecl, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTAssignmentStatement, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTFunctionDecl, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTParams, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTParam, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTFunctionCall, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTArgs, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTArg, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTIfStatement, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTThenStatement, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTElseStatement, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTWhileStatement, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTReadStatement, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTWriteStatement, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTHaltStatement, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTBlock, java.lang.Object);
  public java.lang.Object visit(com.miguel.sxl.ASTSXL, java.lang.Object);
}
Compiled from "SimpleCharStream.java"
public class com.miguel.sxl.SimpleCharStream {
  public static final boolean staticFlag;
  int bufsize;
  int available;
  int tokenBegin;
  public int bufpos;
  protected int[] bufline;
  protected int[] bufcolumn;
  protected int column;
  protected int line;
  protected boolean prevCharIsCR;
  protected boolean prevCharIsLF;
  protected java.io.Reader inputStream;
  protected char[] buffer;
  protected int maxNextCharInd;
  protected int inBuf;
  protected int tabSize;
  protected void setTabSize(int);
  protected int getTabSize(int);
  protected void ExpandBuff(boolean);
  protected void FillBuff() throws java.io.IOException;
  public char BeginToken() throws java.io.IOException;
  protected void UpdateLineColumn(char);
  public char readChar() throws java.io.IOException;
  public int getColumn();
  public int getLine();
  public int getEndColumn();
  public int getEndLine();
  public int getBeginColumn();
  public int getBeginLine();
  public void backup(int);
  public com.miguel.sxl.SimpleCharStream(java.io.Reader, int, int, int);
  public com.miguel.sxl.SimpleCharStream(java.io.Reader, int, int);
  public com.miguel.sxl.SimpleCharStream(java.io.Reader);
  public void ReInit(java.io.Reader, int, int, int);
  public void ReInit(java.io.Reader, int, int);
  public void ReInit(java.io.Reader);
  public com.miguel.sxl.SimpleCharStream(java.io.InputStream, java.lang.String, int, int, int) throws java.io.UnsupportedEncodingException;
  public com.miguel.sxl.SimpleCharStream(java.io.InputStream, int, int, int);
  public com.miguel.sxl.SimpleCharStream(java.io.InputStream, java.lang.String, int, int) throws java.io.UnsupportedEncodingException;
  public com.miguel.sxl.SimpleCharStream(java.io.InputStream, int, int);
  public com.miguel.sxl.SimpleCharStream(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException;
  public com.miguel.sxl.SimpleCharStream(java.io.InputStream);
  public void ReInit(java.io.InputStream, java.lang.String, int, int, int) throws java.io.UnsupportedEncodingException;
  public void ReInit(java.io.InputStream, int, int, int);
  public void ReInit(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException;
  public void ReInit(java.io.InputStream);
  public void ReInit(java.io.InputStream, java.lang.String, int, int) throws java.io.UnsupportedEncodingException;
  public void ReInit(java.io.InputStream, int, int);
  public java.lang.String GetImage();
  public char[] GetSuffix(int);
  public void Done();
  public void adjustBeginLineColumn(int, int);
}
Compiled from "SimpleNode.java"
public class com.miguel.sxl.SimpleNode implements com.miguel.sxl.Node {
  protected com.miguel.sxl.Node parent;
  protected com.miguel.sxl.Node[] children;
  protected int id;
  protected java.lang.Object value;
  protected com.miguel.sxl.SXLParser parser;
  protected com.miguel.sxl.Token firstToken;
  protected com.miguel.sxl.Token lastToken;
  public com.miguel.sxl.SimpleNode(int);
  public com.miguel.sxl.SimpleNode(com.miguel.sxl.SXLParser, int);
  public void jjtOpen();
  public void jjtClose();
  public void jjtSetParent(com.miguel.sxl.Node);
  public com.miguel.sxl.Node jjtGetParent();
  public void jjtAddChild(com.miguel.sxl.Node, int);
  public com.miguel.sxl.Node jjtGetChild(int);
  public int jjtGetNumChildren();
  public void jjtSetValue(java.lang.Object);
  public java.lang.Object jjtGetValue();
  public com.miguel.sxl.Token jjtGetFirstToken();
  public void jjtSetFirstToken(com.miguel.sxl.Token);
  public com.miguel.sxl.Token jjtGetLastToken();
  public void jjtSetLastToken(com.miguel.sxl.Token);
  public java.lang.Object jjtAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
  public java.lang.Object childrenAccept(com.miguel.sxl.SXLParserVisitor, java.lang.Object);
  public java.lang.String toString();
  public java.lang.String toString(java.lang.String);
  public void dump(java.lang.String);
}
Compiled from "SymbolNotFoundException.java"
public class com.miguel.sxl.SymbolNotFoundException extends java.lang.Exception {
  public com.miguel.sxl.SymbolNotFoundException(java.lang.String);
  public java.lang.String getMessage();
}
Compiled from "Token.java"
public class com.miguel.sxl.Token implements java.io.Serializable {
  public int kind;
  public int beginLine;
  public int beginColumn;
  public int endLine;
  public int endColumn;
  public java.lang.String image;
  public com.miguel.sxl.Token next;
  public com.miguel.sxl.Token specialToken;
  public java.lang.Object getValue();
  public com.miguel.sxl.Token();
  public com.miguel.sxl.Token(int);
  public com.miguel.sxl.Token(int, java.lang.String);
  public java.lang.String toString();
  public static com.miguel.sxl.Token newToken(int, java.lang.String);
  public static com.miguel.sxl.Token newToken(int);
}
Compiled from "TokenMgrError.java"
public class com.miguel.sxl.TokenMgrError extends java.lang.Error {
  static final int LEXICAL_ERROR;
  static final int STATIC_LEXER_ERROR;
  static final int INVALID_LEXICAL_STATE;
  static final int LOOP_DETECTED;
  int errorCode;
  protected static final java.lang.String addEscapes(java.lang.String);
  protected static java.lang.String LexicalError(boolean, int, int, int, java.lang.String, char);
  public java.lang.String getMessage();
  public com.miguel.sxl.TokenMgrError();
  public com.miguel.sxl.TokenMgrError(java.lang.String, int);
  public com.miguel.sxl.TokenMgrError(boolean, int, int, int, java.lang.String, char, int);
}
Compiled from "Unit.java"
public class com.miguel.sxl.Unit {
  public com.miguel.sxl.Unit();
  public java.lang.String toString();
}
Compiled from "Utils.java"
public class com.miguel.sxl.Utils {
  public com.miguel.sxl.Utils();
  public static java.lang.String sanitizeString(java.lang.String) throws java.lang.Exception;
  public static java.lang.String generateFunctionScopeName(java.lang.String, java.util.ArrayList<com.miguel.sxl.SXLParam>);
  public static java.lang.String generateFunctionName(java.lang.String, java.util.ArrayList<com.miguel.sxl.SXLValue>);
}
Compiled from "SXLVisitorTest.java"
public class com.miguel.sxl.tests.SXLVisitorTest {
  public com.miguel.sxl.tests.SXLVisitorTest();
  public static void main(java.lang.String[]);
}
