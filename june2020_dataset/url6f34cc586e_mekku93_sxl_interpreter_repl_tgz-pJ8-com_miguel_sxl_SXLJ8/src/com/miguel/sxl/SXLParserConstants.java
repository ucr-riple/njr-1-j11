/* Generated By:JJTree&JavaCC: Do not edit this line. SXLParserConstants.java */
package com.miguel.sxl;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SXLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE_CHARS = 1;
  /** RegularExpression Id. */
  int WHITESPACE = 2;
  /** RegularExpression Id. */
  int COMMENT = 3;
  /** RegularExpression Id. */
  int MULTI_COMMENT = 4;
  /** RegularExpression Id. */
  int QUOTE = 5;
  /** RegularExpression Id. */
  int DBL_QUOTE = 6;
  /** RegularExpression Id. */
  int UNDERSCORE = 7;
  /** RegularExpression Id. */
  int DIGIT = 8;
  /** RegularExpression Id. */
  int PRINTABLE = 9;
  /** RegularExpression Id. */
  int LETTER = 10;
  /** RegularExpression Id. */
  int REAL_EXP = 11;
  /** RegularExpression Id. */
  int EQUALS = 12;
  /** RegularExpression Id. */
  int PLUS = 13;
  /** RegularExpression Id. */
  int MINUS = 14;
  /** RegularExpression Id. */
  int MULTIPLY = 15;
  /** RegularExpression Id. */
  int DIVIDE = 16;
  /** RegularExpression Id. */
  int GREATER = 17;
  /** RegularExpression Id. */
  int LESSER = 18;
  /** RegularExpression Id. */
  int GREATER_EQUALS = 19;
  /** RegularExpression Id. */
  int LESSER_EQUALS = 20;
  /** RegularExpression Id. */
  int DBL_EQUAL = 21;
  /** RegularExpression Id. */
  int NOT_EQUALS = 22;
  /** RegularExpression Id. */
  int COLON = 23;
  /** RegularExpression Id. */
  int SEMICOLON = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int OPEN_PAREN = 26;
  /** RegularExpression Id. */
  int CLOSE_PAREN = 27;
  /** RegularExpression Id. */
  int OPEN_BLOCK = 28;
  /** RegularExpression Id. */
  int CLOSE_BLOCK = 29;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 30;
  /** RegularExpression Id. */
  int REAL_LITERAL = 31;
  /** RegularExpression Id. */
  int UNIT_LITERAL = 32;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 33;
  /** RegularExpression Id. */
  int STRING_LITERAL = 34;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 35;
  /** RegularExpression Id. */
  int TYPE_INT = 36;
  /** RegularExpression Id. */
  int TYPE_REAL = 37;
  /** RegularExpression Id. */
  int TYPE_BOOL = 38;
  /** RegularExpression Id. */
  int TYPE_CHAR = 39;
  /** RegularExpression Id. */
  int TYPE_STRING = 40;
  /** RegularExpression Id. */
  int TYPE_UNIT = 41;
  /** RegularExpression Id. */
  int KW_SET = 42;
  /** RegularExpression Id. */
  int KW_LET = 43;
  /** RegularExpression Id. */
  int KW_OR = 44;
  /** RegularExpression Id. */
  int KW_AND = 45;
  /** RegularExpression Id. */
  int KW_NOT = 46;
  /** RegularExpression Id. */
  int KW_IN = 47;
  /** RegularExpression Id. */
  int KW_IF = 48;
  /** RegularExpression Id. */
  int KW_ELSE = 49;
  /** RegularExpression Id. */
  int KW_WHILE = 50;
  /** RegularExpression Id. */
  int KW_FUNCTION = 51;
  /** RegularExpression Id. */
  int KW_READ = 52;
  /** RegularExpression Id. */
  int KW_WRITE = 53;
  /** RegularExpression Id. */
  int KW_HALT = 54;
  /** RegularExpression Id. */
  int IDENTIFIER = 55;
  /** RegularExpression Id. */
  int IDENTIFIER_START = 56;
  /** RegularExpression Id. */
  int IDENTIFIER_REST = 57;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE_CHARS>",
    "<WHITESPACE>",
    "<COMMENT>",
    "<MULTI_COMMENT>",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"_\"",
    "<DIGIT>",
    "<PRINTABLE>",
    "<LETTER>",
    "<REAL_EXP>",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "<INTEGER_LITERAL>",
    "<REAL_LITERAL>",
    "\"#\"",
    "<BOOLEAN_LITERAL>",
    "<STRING_LITERAL>",
    "<CHAR_LITERAL>",
    "\"int\"",
    "\"real\"",
    "\"bool\"",
    "\"char\"",
    "\"string\"",
    "\"unit\"",
    "\"set\"",
    "\"let\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"in\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"function\"",
    "\"read\"",
    "\"write\"",
    "\"halt\"",
    "<IDENTIFIER>",
    "<IDENTIFIER_START>",
    "<IDENTIFIER_REST>",
    "\"<-\"",
  };

}
