Compiled from "BnB.java"
public class algorithms.BnB {
  public algorithms.BnB(model.Model, model.QBnBEnv);
  public void printInfoFromModel(model.Model);
  public void minimizes();
  public void maximizes();
  public void printStatus(model.Model);
  public boolean doubleIsInteger(double);
  public model.Model[] integerBranch(model.Model);
  public void changeBound(java.lang.String, double, double[], java.lang.String[]);
  public double[] floor(double[]);
  public void printMatrixToConsole(double[][]);
  public double[] addToVector(double, double[]);
  public int getType();
  public void setType(int);
  public model.Model getBest();
  public void setBest(model.Model);
  public algorithms.Queue getPriorityQueue();
  public void setPriorityQueue(algorithms.Queue);
  public double getTimeLoadingData();
  public void setTimeLoadingData(double);
  public boolean isPrinting();
  public void print(boolean);
  public static void main(java.lang.String[]);
  public boolean isPrint();
  public void setPrint(boolean);
  public double getEpsilon();
  public void setEpsilon(double);
  public boolean isCuts();
  public void setCuts(boolean);
  public model.QBnBEnv getE();
  public void setE(model.QBnBEnv);
  public int getNodesExplored();
  public void setNodesExplored(int);
  public boolean isPrintSimplex();
  public void setPrintSimplex(boolean);
  public boolean isDebugmode();
  public void setDebugmode(boolean);
}
Compiled from "Queue.java"
public class algorithms.Queue<Item> implements java.lang.Iterable<Item> {
  public algorithms.Queue();
  public boolean isEmpty();
  public int size();
  public Item peek();
  public void enqueue(Item);
  public Item dequeue();
  public java.lang.String toString();
  public java.util.Iterator<Item> iterator();
  public static void main(java.lang.String[]);
}
Compiled from "Queue.java"
class algorithms.Queue$1 {
}
Compiled from "Queue.java"
class algorithms.Queue$ListIterator<Item> implements java.util.Iterator<Item> {
  final algorithms.Queue this$0;
  public algorithms.Queue$ListIterator(algorithms.Queue$Node<Item>);
  public boolean hasNext();
  public void remove();
  public Item next();
}
Compiled from "Queue.java"
class algorithms.Queue$Node<Item> {
  static java.lang.Object access$000(algorithms.Queue$Node);
  algorithms.Queue$Node(algorithms.Queue$1);
  static java.lang.Object access$002(algorithms.Queue$Node, java.lang.Object);
  static algorithms.Queue$Node access$202(algorithms.Queue$Node, algorithms.Queue$Node);
  static algorithms.Queue$Node access$200(algorithms.Queue$Node);
}
Compiled from "Simplex.java"
public class algorithms.Simplex {
  static final boolean $assertionsDisabled;
  public void print();
  public void printMatrixToConsole(double[][]);
  public void printVectorToConsole(double[]);
  public algorithms.Simplex(double[][], double[], double[]);
  public double value();
  public double[] primal();
  public double[] dual();
  public void show();
  public static void test(double[][], double[], double[]);
  public static void test1();
  public static void test2();
  public static void test3();
  public static void test4();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SimplexAlgorithm.java"
public class algorithms.SimplexAlgorithm {
  public int m;
  public int n;
  public double initialTime;
  public int nart;
  public boolean printSolution;
  public java.lang.String[] I;
  public algorithms.SimplexAlgorithm(double[][], double[], double[], java.lang.String[], double[], double[], boolean);
  public algorithms.SimplexAlgorithm();
  public double[] getDual();
  public double dualfo();
  public double[] substractVectors(double[], double[]);
  public double[][] removeColumnFromMatrix(int, double[][]);
  public double[][] addColumnToMatrix(double[], double[][]);
  public double[] addToVector(double, double[]);
  public java.lang.String[] addToVector(java.lang.String, java.lang.String[]);
  public double primalfo();
  public void createBasis(double[][], double[], java.lang.String[]);
  public void setNBtoBounds();
  public double[] removeFromVector(int, double[]);
  public java.lang.String[] removeFromVector(int, java.lang.String[]);
  public boolean areEqual(double[], double[]);
  public int isColumn(double[], double[][]);
  public void phase2();
  public boolean feasible();
  public void replaceI(java.lang.String, java.lang.String);
  public void replaceBN(java.lang.String, java.lang.String, int, int);
  public int findpos(int, int[]);
  public double[][] replaceColumnInMatrix(double[], int, double[][]);
  public double[] Multiply(double[][], double[]);
  public int lowestIndex(double[]);
  public boolean rqoptimal(double[]);
  public double[] join(double[], double[]);
  public double[][] Multiply(double[][], double[][]);
  public double[] Multiply(double[], double[][]);
  public double[][] inverse(double[][]);
  public double[][] scalartimesmatrix(double, double[][]);
  public double[] returnColumn(int, double[][]);
  public double dotProduct(double[], double[]);
  public void printMatrixToConsole(double[][]);
  public void printVectorToConsole(double[]);
  public void printProblem();
  public void printvectorTranspose(double[]);
  public void setB(double[][]);
  public double[][] getBasis();
  public double[][] getN();
  public void setN(double[][]);
  public double[] getXb();
  public void setXb(double[]);
  public double[] getXn();
  public void setXn(double[]);
  public double[] getCb();
  public void setCb(double[]);
  public double[] getCn();
  public void setCn(double[]);
  public double[] getB();
  public void setB(double[]);
  public java.lang.String[] getIn();
  public void setIn(java.lang.String[]);
  public java.lang.String[] getIb();
  public void setIb(java.lang.String[]);
  public int getStatus();
  public void setStatus(int);
  public double[] getC();
  public void setC(double[]);
  public double[][] getA();
  public void setA(double[][]);
  public void setDual(double[]);
  public double[] getRq();
  public void setRq(double[]);
  public static void main(java.lang.String[]);
}
Compiled from "SimplexEJML.java"
public class algorithms.SimplexEJML {
  public algorithms.SimplexEJML();
  public static void main(java.lang.String[]);
}
Compiled from "StdIn.java"
public final class algorithms.StdIn {
  static final boolean $assertionsDisabled;
  public static boolean isEmpty();
  public static boolean hasNextLine();
  public static boolean hasNextChar();
  public static java.lang.String readLine();
  public static char readChar();
  public static java.lang.String readAll();
  public static java.lang.String readString();
  public static int readInt();
  public static double readDouble();
  public static float readFloat();
  public static long readLong();
  public static short readShort();
  public static byte readByte();
  public static boolean readBoolean();
  public static java.lang.String[] readAllStrings();
  public static java.lang.String[] readAllLines();
  public static int[] readAllInts();
  public static double[] readAllDoubles();
  public static int[] readInts();
  public static double[] readDoubles();
  public static java.lang.String[] readStrings();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "StdOut.java"
public final class algorithms.StdOut {
  public static void close();
  public static void println();
  public static void println(java.lang.Object);
  public static void println(boolean);
  public static void println(char);
  public static void println(double);
  public static void println(float);
  public static void println(int);
  public static void println(long);
  public static void println(short);
  public static void println(byte);
  public static void print();
  public static void print(java.lang.Object);
  public static void print(boolean);
  public static void print(char);
  public static void print(double);
  public static void print(float);
  public static void print(int);
  public static void print(long);
  public static void print(short);
  public static void print(byte);
  public static void printf(java.lang.String, java.lang.Object...);
  public static void printf(java.util.Locale, java.lang.String, java.lang.Object...);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "KnapSavings.java"
public class knapSavings.KnapSavings {
  java.util.ArrayList<java.lang.Integer> dominant;
  java.util.ArrayList<java.lang.Integer> nondominant;
  public knapSavings.KnapSavings();
  public double z();
  public java.util.ArrayList<java.lang.String> sort(java.util.ArrayList<java.lang.String>);
  public boolean larger(double, double, double, double);
  public void printVector(int[]);
  public void breakSets();
  public java.util.ArrayList<java.lang.String> sortLex(java.util.ArrayList<java.lang.String>);
  public int[] mainAlgorithm(java.util.ArrayList<java.lang.String>);
  public void loadFromFile(java.lang.String) throws java.io.IOException;
  public java.util.ArrayList<java.lang.String> delta();
  public static void main(java.lang.String[]);
}
Compiled from "Model.java"
public class model.Model {
  public model.Model();
  public void generateStandardFormat(double[][], int);
  public void p(java.lang.String);
  public void pl(java.lang.String);
  public void pl();
  public void printProblemToConsole();
  public boolean isSparse();
  public void solveLP(int);
  public java.lang.String[] varNames();
  public double[] changeSign(double[]);
  public void update();
  public void changeLBoundToVariable(java.lang.String, double);
  public void changeUBoundToVariable(java.lang.String, double);
  public void updateBounds();
  public void restoreSolutions();
  public int posVarByName(java.lang.String);
  public java.util.ArrayList<java.lang.String> variableNames();
  public void generateCut(double[], java.lang.String[], double);
  public void addConst(model.QBnBconstr);
  public double findCoeffFromName(java.lang.String, model.QBnBLinExp);
  public boolean alreadyAdded(java.lang.String, java.util.ArrayList<java.lang.String>);
  public double findCoeffFromNameOF(java.lang.String);
  public void addObj(model.QBnBLinExp);
  public void addVar(model.QBnBVariable);
  public void printMatrixToConsole(double[][]);
  public void updateConstraintsE();
  public int numberOfLessThanEqualConstraints();
  public int numberOfSlackVariables();
  public double[][] addEqualityConstraintA(java.lang.String, double, boolean);
  public double[] addToVector(double, double[]);
  public model.QBnBVariable findVarByName(java.lang.String);
  public int findByName(java.lang.String);
  public boolean isInteger();
  public boolean doubleIsInteger(double);
  public boolean isInt(java.lang.String);
  public int countIntegers();
  public void preSolve();
  public boolean preSolveEmptyRow();
  public boolean preSolveBoundsOnIntegers();
  public double[][] getA();
  public void setA(double[][]);
  public double[] getC();
  public void setC(double[]);
  public double[] getB();
  public void setB(double[]);
  public boolean isFeasible();
  public void setFeasible(boolean);
  public double getFo();
  public void setFo(double);
  public java.lang.String getType();
  public void setType(java.lang.String);
  public void setInteger(boolean);
  public double[] getX();
  public void setX(double[]);
  public java.util.ArrayList<model.QBnBconstr> getConstraints();
  public void setConstraints(java.util.ArrayList<model.QBnBconstr>);
  public java.util.ArrayList<model.QBnBVariable> getVariables();
  public void setVariables(java.util.ArrayList<model.QBnBVariable>);
  public algorithms.SimplexAlgorithm getSimplex();
  public void setSimplex(algorithms.SimplexAlgorithm);
  public java.lang.String getId();
  public void setId(java.lang.String);
  public model.QBnBLinExp getOfle();
  public void setOfle(model.QBnBLinExp);
  public java.lang.String[] getI();
  public void setI(java.lang.String[]);
  public static void main(java.lang.String[]);
  public double[] getU();
  public void setU(double[]);
  public double[] getL();
  public void setL(double[]);
  public double getEpsilon();
  public void setEpsilon(double);
  public boolean isPrint();
  public void setPrint(boolean);
  public boolean isDebugMode();
  public void setDebugMode(boolean);
}
Compiled from "QBnBEnv.java"
public class model.QBnBEnv {
  public model.QBnBEnv(model.Model);
  public void preSolve();
  public void maximize();
  public void minimize();
  public void printInitial();
  public boolean isMIP();
  public void print(boolean);
  public model.Model getM();
  public void setM(model.Model);
  public double getBestSolution();
  public void setBestSolution(double);
  public boolean isPrint();
  public void setPrint(boolean);
  public boolean isDebugMode();
  public void setDebugMode(boolean);
}
Compiled from "QBnBLinExp.java"
public class model.QBnBLinExp {
  public model.QBnBLinExp();
  public void addTerm(double, model.QBnBVariable);
  public java.util.ArrayList<java.lang.Double> getCoeffs();
  public void setCoeffs(java.util.ArrayList<java.lang.Double>);
  public java.util.ArrayList<java.lang.String> getVarNames();
  public void setVarNames(java.util.ArrayList<java.lang.String>);
}
Compiled from "QBnBVariable.java"
public class model.QBnBVariable {
  public model.QBnBVariable(double, double, int, java.lang.String);
  public model.QBnBVariable(double, double, int);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public double getLb();
  public void setLb(double);
  public double getUb();
  public void setUb(double);
  public int getType();
  public void setType(int);
  public double getValue();
  public void setValue(double);
  public boolean isSlack();
  public void setSlack(boolean);
}
Compiled from "QBnBconstr.java"
public class model.QBnBconstr {
  public model.QBnBconstr(model.QBnBLinExp, int, double, java.lang.String, model.Model);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public model.QBnBLinExp getLe();
  public void setLe(model.QBnBLinExp);
  public int getType();
  public void setType(int);
  public double getRs();
  public void setRs(double);
}
Compiled from "KnapsackInstances.java"
public class tests.KnapsackInstances {
  public tests.KnapsackInstances();
  public void loadFromFile(java.lang.String) throws java.io.IOException;
  public static void main(java.lang.String[]);
}
Compiled from "Test.java"
public class tests.Test {
  public tests.Test();
  public void printSolution(model.QBnBVariable[][]);
  public void loadFromFile(java.lang.String) throws java.io.IOException;
  public void createVariables(model.Model);
  public void createFo(model.Model);
  public void createConstraints(model.Model);
  public static void main(java.lang.String[]);
}
