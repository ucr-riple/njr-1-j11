Compiled from "Argument.java"
public class org.apache.harmony.beans.Argument {
  public org.apache.harmony.beans.Argument(java.lang.Object);
  public org.apache.harmony.beans.Argument(java.lang.Class<?>, java.lang.Object);
  public java.lang.Class<?> getType();
  public java.lang.Object getValue();
  public java.lang.Class<?>[] getInterfaces();
  public void setType(java.lang.Class<?>);
  public void setInterfaces(java.lang.Class<?>[]);
}
Compiled from "BeansUtils.java"
public class org.apache.harmony.beans.BeansUtils {
  public static final java.lang.Object[] EMPTY_OBJECT_ARRAY;
  public static final java.lang.String NEW;
  public static final java.lang.String NEWINSTANCE;
  public static final java.lang.String NEWARRAY;
  public static final java.lang.String FORNAME;
  public static final java.lang.String GET;
  public static final java.lang.String IS;
  public static final java.lang.String SET;
  public static final java.lang.String ADD;
  public static final java.lang.String PUT;
  public static final java.lang.String NULL;
  public static final java.lang.String QUOTE;
  public org.apache.harmony.beans.BeansUtils();
  public static final int getHashCode(java.lang.Object);
  public static final int getHashCode(boolean);
  public static java.lang.String toASCIILowerCase(java.lang.String);
  public static java.lang.String toASCIIUpperCase(java.lang.String);
  public static boolean isPrimitiveWrapper(java.lang.Class<?>, java.lang.Class<?>);
  public static boolean declaredEquals(java.lang.Class<?>);
  public static java.lang.String idOfClass(java.lang.Class<?>);
  static {};
}
Compiled from "Messages.java"
public class org.apache.harmony.beans.internal.nls.Messages {
  public org.apache.harmony.beans.internal.nls.Messages();
  public static java.lang.String getString(java.lang.String);
  public static java.lang.String getString(java.lang.String, java.lang.Object);
  public static java.lang.String getString(java.lang.String, int);
  public static java.lang.String getString(java.lang.String, char);
  public static java.lang.String getString(java.lang.String, java.lang.Object, java.lang.Object);
  public static java.lang.String getString(java.lang.String, java.lang.Object[]);
  public static java.lang.String format(java.lang.String, java.lang.Object[]);
  static {};
}
Compiled from "MessagePack.java"
public class org.msgpack.MessagePack {
  public org.msgpack.MessagePack();
  public org.msgpack.MessagePack(org.msgpack.MessagePack);
  protected org.msgpack.MessagePack(org.msgpack.template.TemplateRegistry);
  public void setClassLoader(java.lang.ClassLoader);
  public org.msgpack.packer.Packer createPacker(java.io.OutputStream);
  public org.msgpack.packer.BufferPacker createBufferPacker();
  public org.msgpack.packer.BufferPacker createBufferPacker(int);
  public org.msgpack.unpacker.Unpacker createUnpacker(java.io.InputStream);
  public org.msgpack.unpacker.BufferUnpacker createBufferUnpacker();
  public org.msgpack.unpacker.BufferUnpacker createBufferUnpacker(byte[]);
  public org.msgpack.unpacker.BufferUnpacker createBufferUnpacker(byte[], int, int);
  public org.msgpack.unpacker.BufferUnpacker createBufferUnpacker(java.nio.ByteBuffer);
  public <T> byte[] write(T) throws java.io.IOException;
  public <T> byte[] write(T, org.msgpack.template.Template<T>) throws java.io.IOException;
  public <T> void write(java.io.OutputStream, T) throws java.io.IOException;
  public <T> void write(java.io.OutputStream, T, org.msgpack.template.Template<T>) throws java.io.IOException;
  public byte[] write(org.msgpack.type.Value) throws java.io.IOException;
  public org.msgpack.type.Value read(byte[]) throws java.io.IOException;
  public org.msgpack.type.Value read(byte[], int, int) throws java.io.IOException;
  public org.msgpack.type.Value read(java.nio.ByteBuffer) throws java.io.IOException;
  public org.msgpack.type.Value read(java.io.InputStream) throws java.io.IOException;
  public <T> T read(byte[], T) throws java.io.IOException;
  public <T> T read(byte[], org.msgpack.template.Template<T>) throws java.io.IOException;
  public <T> T read(byte[], java.lang.Class<T>) throws java.io.IOException;
  public <T> T read(byte[], T, org.msgpack.template.Template<T>) throws java.io.IOException;
  public <T> T read(byte[], int, int, java.lang.Class<T>) throws java.io.IOException;
  public <T> T read(java.nio.ByteBuffer, T) throws java.io.IOException;
  public <T> T read(java.nio.ByteBuffer, org.msgpack.template.Template<T>) throws java.io.IOException;
  public <T> T read(java.nio.ByteBuffer, java.lang.Class<T>) throws java.io.IOException;
  public <T> T read(java.nio.ByteBuffer, T, org.msgpack.template.Template<T>) throws java.io.IOException;
  public <T> T read(java.io.InputStream, T) throws java.io.IOException;
  public <T> T read(java.io.InputStream, org.msgpack.template.Template<T>) throws java.io.IOException;
  public <T> T read(java.io.InputStream, java.lang.Class<T>) throws java.io.IOException;
  public <T> T read(java.io.InputStream, T, org.msgpack.template.Template<T>) throws java.io.IOException;
  public <T> T convert(org.msgpack.type.Value, T) throws java.io.IOException;
  public <T> T convert(org.msgpack.type.Value, java.lang.Class<T>) throws java.io.IOException;
  public <T> T convert(org.msgpack.type.Value, org.msgpack.template.Template<T>) throws java.io.IOException;
  public <T> org.msgpack.type.Value unconvert(T) throws java.io.IOException;
  public void register(java.lang.Class<?>);
  public <T> void register(java.lang.Class<T>, org.msgpack.template.Template<T>);
  public boolean unregister(java.lang.Class<?>);
  public void unregister();
  public <T> org.msgpack.template.Template<T> lookup(java.lang.Class<T>);
  public org.msgpack.template.Template<?> lookup(java.lang.reflect.Type);
  public static byte[] pack(java.lang.Object) throws java.io.IOException;
  public static void pack(java.io.OutputStream, java.lang.Object) throws java.io.IOException;
  public static <T> byte[] pack(T, org.msgpack.template.Template<T>) throws java.io.IOException;
  public static <T> void pack(java.io.OutputStream, T, org.msgpack.template.Template<T>) throws java.io.IOException;
  public static org.msgpack.type.Value unpack(byte[]) throws java.io.IOException;
  public static <T> T unpack(byte[], org.msgpack.template.Template<T>) throws java.io.IOException;
  public static <T> T unpack(byte[], org.msgpack.template.Template<T>, T) throws java.io.IOException;
  public static <T> T unpack(byte[], java.lang.Class<T>) throws java.io.IOException;
  public static <T> T unpack(byte[], T) throws java.io.IOException;
  public static org.msgpack.type.Value unpack(java.io.InputStream) throws java.io.IOException;
  public static <T> T unpack(java.io.InputStream, org.msgpack.template.Template<T>) throws java.io.IOException, org.msgpack.MessageTypeException;
  public static <T> T unpack(java.io.InputStream, org.msgpack.template.Template<T>, T) throws java.io.IOException, org.msgpack.MessageTypeException;
  public static <T> T unpack(java.io.InputStream, java.lang.Class<T>) throws java.io.IOException;
  public static <T> T unpack(java.io.InputStream, T) throws java.io.IOException;
  static {};
}
Compiled from "MessagePackable.java"
public interface org.msgpack.MessagePackable {
  public abstract void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public abstract void readFrom(org.msgpack.unpacker.Unpacker) throws java.io.IOException;
}
Compiled from "MessageTypeException.java"
public class org.msgpack.MessageTypeException extends java.lang.RuntimeException {
  public org.msgpack.MessageTypeException();
  public org.msgpack.MessageTypeException(java.lang.String);
  public org.msgpack.MessageTypeException(java.lang.String, java.lang.Throwable);
  public org.msgpack.MessageTypeException(java.lang.Throwable);
}
Compiled from "Beans.java"
public interface org.msgpack.annotation.Beans extends java.lang.annotation.Annotation {
  public abstract org.msgpack.template.FieldOption value();
}
Compiled from "Delegate.java"
public interface org.msgpack.annotation.Delegate extends java.lang.annotation.Annotation {
  public abstract java.lang.String value();
}
Compiled from "Ignore.java"
public interface org.msgpack.annotation.Ignore extends java.lang.annotation.Annotation {
}
Compiled from "Index.java"
public interface org.msgpack.annotation.Index extends java.lang.annotation.Annotation {
  public abstract int value();
}
Compiled from "Message.java"
public interface org.msgpack.annotation.Message extends java.lang.annotation.Annotation {
  public abstract org.msgpack.template.FieldOption value();
}
Compiled from "MessagePackBeans.java"
public interface org.msgpack.annotation.MessagePackBeans extends java.lang.annotation.Annotation {
  public abstract org.msgpack.template.FieldOption value();
}
Compiled from "MessagePackDelegate.java"
public interface org.msgpack.annotation.MessagePackDelegate extends java.lang.annotation.Annotation {
  public abstract java.lang.String value();
}
Compiled from "MessagePackMessage.java"
public interface org.msgpack.annotation.MessagePackMessage extends java.lang.annotation.Annotation {
  public abstract org.msgpack.template.FieldOption value();
}
Compiled from "MessagePackOrdinalEnum.java"
public interface org.msgpack.annotation.MessagePackOrdinalEnum extends java.lang.annotation.Annotation {
}
Compiled from "NotNullable.java"
public interface org.msgpack.annotation.NotNullable extends java.lang.annotation.Annotation {
}
Compiled from "Optional.java"
public interface org.msgpack.annotation.Optional extends java.lang.annotation.Annotation {
}
Compiled from "OrdinalEnum.java"
public interface org.msgpack.annotation.OrdinalEnum extends java.lang.annotation.Annotation {
  public abstract boolean strict();
}
Compiled from "AbstractInput.java"
abstract class org.msgpack.io.AbstractInput implements org.msgpack.io.Input {
  org.msgpack.io.AbstractInput();
  public int getReadByteCount();
  public void resetReadByteCount();
  protected final void incrReadByteCount(int);
  protected final void incrReadOneByteCount();
}
Compiled from "BufferReferer.java"
public interface org.msgpack.io.BufferReferer {
  public abstract void refer(java.nio.ByteBuffer, boolean) throws java.io.IOException;
}
Compiled from "BufferedOutput.java"
abstract class org.msgpack.io.BufferedOutput implements org.msgpack.io.Output {
  protected byte[] buffer;
  protected int filled;
  protected final int bufferSize;
  protected java.nio.ByteBuffer castByteBuffer;
  public org.msgpack.io.BufferedOutput(int);
  public void write(byte[], int, int) throws java.io.IOException;
  public void write(java.nio.ByteBuffer) throws java.io.IOException;
  public void writeByte(byte) throws java.io.IOException;
  public void writeShort(short) throws java.io.IOException;
  public void writeInt(int) throws java.io.IOException;
  public void writeLong(long) throws java.io.IOException;
  public void writeFloat(float) throws java.io.IOException;
  public void writeDouble(double) throws java.io.IOException;
  public void writeByteAndByte(byte, byte) throws java.io.IOException;
  public void writeByteAndShort(byte, short) throws java.io.IOException;
  public void writeByteAndInt(byte, int) throws java.io.IOException;
  public void writeByteAndLong(byte, long) throws java.io.IOException;
  public void writeByteAndFloat(byte, float) throws java.io.IOException;
  public void writeByteAndDouble(byte, double) throws java.io.IOException;
  public void flush() throws java.io.IOException;
  protected void flushByteBuffer(java.nio.ByteBuffer) throws java.io.IOException;
  protected abstract boolean flushBuffer(byte[], int, int) throws java.io.IOException;
}
Compiled from "ByteBufferOutput.java"
public class org.msgpack.io.ByteBufferOutput implements org.msgpack.io.Output {
  public org.msgpack.io.ByteBufferOutput(java.nio.ByteBuffer);
  public org.msgpack.io.ByteBufferOutput(java.nio.ByteBuffer, org.msgpack.io.ByteBufferOutput$ExpandBufferCallback);
  public void write(byte[], int, int) throws java.io.IOException;
  public void write(java.nio.ByteBuffer) throws java.io.IOException;
  public void writeByte(byte) throws java.io.IOException;
  public void writeShort(short) throws java.io.IOException;
  public void writeInt(int) throws java.io.IOException;
  public void writeLong(long) throws java.io.IOException;
  public void writeFloat(float) throws java.io.IOException;
  public void writeDouble(double) throws java.io.IOException;
  public void writeByteAndByte(byte, byte) throws java.io.IOException;
  public void writeByteAndShort(byte, short) throws java.io.IOException;
  public void writeByteAndInt(byte, int) throws java.io.IOException;
  public void writeByteAndLong(byte, long) throws java.io.IOException;
  public void writeByteAndFloat(byte, float) throws java.io.IOException;
  public void writeByteAndDouble(byte, double) throws java.io.IOException;
  public void flush() throws java.io.IOException;
  public void close();
}
Compiled from "ByteBufferOutput.java"
public interface org.msgpack.io.ByteBufferOutput$ExpandBufferCallback {
  public abstract java.nio.ByteBuffer call(java.nio.ByteBuffer, int) throws java.io.IOException;
}
Compiled from "EndOfBufferException.java"
public class org.msgpack.io.EndOfBufferException extends java.io.EOFException {
  public org.msgpack.io.EndOfBufferException();
  public org.msgpack.io.EndOfBufferException(java.lang.String);
}
Compiled from "Input.java"
public interface org.msgpack.io.Input extends java.io.Closeable {
  public abstract int read(byte[], int, int) throws java.io.IOException;
  public abstract boolean tryRefer(org.msgpack.io.BufferReferer, int) throws java.io.IOException;
  public abstract byte readByte() throws java.io.IOException;
  public abstract void advance();
  public abstract byte getByte() throws java.io.IOException;
  public abstract short getShort() throws java.io.IOException;
  public abstract int getInt() throws java.io.IOException;
  public abstract long getLong() throws java.io.IOException;
  public abstract float getFloat() throws java.io.IOException;
  public abstract double getDouble() throws java.io.IOException;
  public abstract int getReadByteCount();
  public abstract void resetReadByteCount();
}
Compiled from "LinkedBufferInput.java"
public class org.msgpack.io.LinkedBufferInput extends org.msgpack.io.AbstractInput {
  java.util.LinkedList<java.nio.ByteBuffer> link;
  int writable;
  public org.msgpack.io.LinkedBufferInput(int);
  public int read(byte[], int, int) throws java.io.EOFException;
  public boolean tryRefer(org.msgpack.io.BufferReferer, int) throws java.io.IOException;
  public byte readByte() throws java.io.EOFException;
  public void advance();
  public byte getByte() throws java.io.EOFException;
  public short getShort() throws java.io.EOFException;
  public int getInt() throws java.io.EOFException;
  public long getLong() throws java.io.EOFException;
  public float getFloat() throws java.io.EOFException;
  public double getDouble() throws java.io.EOFException;
  public void feed(byte[]);
  public void feed(byte[], boolean);
  public void feed(byte[], int, int);
  public void feed(byte[], int, int, boolean);
  public void feed(java.nio.ByteBuffer);
  public void feed(java.nio.ByteBuffer, boolean);
  public void clear();
  public void copyReferencedBuffer();
  public int getSize();
  public void close();
  public void resetReadByteCount();
  public int getReadByteCount();
}
Compiled from "LinkedBufferOutput.java"
public final class org.msgpack.io.LinkedBufferOutput extends org.msgpack.io.BufferedOutput {
  public org.msgpack.io.LinkedBufferOutput(int);
  public byte[] toByteArray();
  public int getSize();
  protected boolean flushBuffer(byte[], int, int);
  public void clear();
  public void close();
  public void flush() throws java.io.IOException;
  public void writeByteAndDouble(byte, double) throws java.io.IOException;
  public void writeByteAndFloat(byte, float) throws java.io.IOException;
  public void writeByteAndLong(byte, long) throws java.io.IOException;
  public void writeByteAndInt(byte, int) throws java.io.IOException;
  public void writeByteAndShort(byte, short) throws java.io.IOException;
  public void writeByteAndByte(byte, byte) throws java.io.IOException;
  public void writeDouble(double) throws java.io.IOException;
  public void writeFloat(float) throws java.io.IOException;
  public void writeLong(long) throws java.io.IOException;
  public void writeInt(int) throws java.io.IOException;
  public void writeShort(short) throws java.io.IOException;
  public void writeByte(byte) throws java.io.IOException;
  public void write(java.nio.ByteBuffer) throws java.io.IOException;
  public void write(byte[], int, int) throws java.io.IOException;
}
Compiled from "LinkedBufferOutput.java"
final class org.msgpack.io.LinkedBufferOutput$Link {
  final byte[] buffer;
  final int offset;
  final int size;
  org.msgpack.io.LinkedBufferOutput$Link(byte[], int, int);
}
Compiled from "Output.java"
public interface org.msgpack.io.Output extends java.io.Closeable,java.io.Flushable {
  public abstract void write(byte[], int, int) throws java.io.IOException;
  public abstract void write(java.nio.ByteBuffer) throws java.io.IOException;
  public abstract void writeByte(byte) throws java.io.IOException;
  public abstract void writeShort(short) throws java.io.IOException;
  public abstract void writeInt(int) throws java.io.IOException;
  public abstract void writeLong(long) throws java.io.IOException;
  public abstract void writeFloat(float) throws java.io.IOException;
  public abstract void writeDouble(double) throws java.io.IOException;
  public abstract void writeByteAndByte(byte, byte) throws java.io.IOException;
  public abstract void writeByteAndShort(byte, short) throws java.io.IOException;
  public abstract void writeByteAndInt(byte, int) throws java.io.IOException;
  public abstract void writeByteAndLong(byte, long) throws java.io.IOException;
  public abstract void writeByteAndFloat(byte, float) throws java.io.IOException;
  public abstract void writeByteAndDouble(byte, double) throws java.io.IOException;
}
Compiled from "StreamInput.java"
public class org.msgpack.io.StreamInput extends org.msgpack.io.AbstractInput {
  public org.msgpack.io.StreamInput(java.io.InputStream);
  public int read(byte[], int, int) throws java.io.IOException;
  public boolean tryRefer(org.msgpack.io.BufferReferer, int) throws java.io.IOException;
  public byte readByte() throws java.io.IOException;
  public void advance();
  public byte getByte() throws java.io.IOException;
  public short getShort() throws java.io.IOException;
  public int getInt() throws java.io.IOException;
  public long getLong() throws java.io.IOException;
  public float getFloat() throws java.io.IOException;
  public double getDouble() throws java.io.IOException;
  public void close() throws java.io.IOException;
  public void resetReadByteCount();
  public int getReadByteCount();
}
Compiled from "StreamOutput.java"
public class org.msgpack.io.StreamOutput implements org.msgpack.io.Output {
  public org.msgpack.io.StreamOutput(java.io.OutputStream);
  public void write(byte[], int, int) throws java.io.IOException;
  public void write(java.nio.ByteBuffer) throws java.io.IOException;
  public void writeByte(byte) throws java.io.IOException;
  public void writeShort(short) throws java.io.IOException;
  public void writeInt(int) throws java.io.IOException;
  public void writeLong(long) throws java.io.IOException;
  public void writeFloat(float) throws java.io.IOException;
  public void writeDouble(double) throws java.io.IOException;
  public void writeByteAndByte(byte, byte) throws java.io.IOException;
  public void writeByteAndShort(byte, short) throws java.io.IOException;
  public void writeByteAndInt(byte, int) throws java.io.IOException;
  public void writeByteAndLong(byte, long) throws java.io.IOException;
  public void writeByteAndFloat(byte, float) throws java.io.IOException;
  public void writeByteAndDouble(byte, double) throws java.io.IOException;
  public void flush() throws java.io.IOException;
  public void close() throws java.io.IOException;
}
Compiled from "AbstractPacker.java"
public abstract class org.msgpack.packer.AbstractPacker implements org.msgpack.packer.Packer {
  protected org.msgpack.MessagePack msgpack;
  protected org.msgpack.packer.AbstractPacker(org.msgpack.MessagePack);
  public org.msgpack.packer.Packer write(boolean) throws java.io.IOException;
  public org.msgpack.packer.Packer write(byte) throws java.io.IOException;
  public org.msgpack.packer.Packer write(short) throws java.io.IOException;
  public org.msgpack.packer.Packer write(int) throws java.io.IOException;
  public org.msgpack.packer.Packer write(long) throws java.io.IOException;
  public org.msgpack.packer.Packer write(float) throws java.io.IOException;
  public org.msgpack.packer.Packer write(double) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.lang.Boolean) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.lang.Byte) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.lang.Short) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.lang.Integer) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.lang.Long) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.math.BigInteger) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.lang.Float) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.lang.Double) throws java.io.IOException;
  public org.msgpack.packer.Packer write(byte[]) throws java.io.IOException;
  public org.msgpack.packer.Packer write(byte[], int, int) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.nio.ByteBuffer) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.lang.String) throws java.io.IOException;
  public org.msgpack.packer.Packer write(java.lang.Object) throws java.io.IOException;
  public org.msgpack.packer.Packer write(org.msgpack.type.Value) throws java.io.IOException;
  public org.msgpack.packer.Packer writeArrayEnd() throws java.io.IOException;
  public org.msgpack.packer.Packer writeMapEnd() throws java.io.IOException;
  public void close() throws java.io.IOException;
  protected abstract void writeBoolean(boolean) throws java.io.IOException;
  protected abstract void writeByte(byte) throws java.io.IOException;
  protected abstract void writeShort(short) throws java.io.IOException;
  protected abstract void writeInt(int) throws java.io.IOException;
  protected abstract void writeLong(long) throws java.io.IOException;
  protected abstract void writeBigInteger(java.math.BigInteger) throws java.io.IOException;
  protected abstract void writeFloat(float) throws java.io.IOException;
  protected abstract void writeDouble(double) throws java.io.IOException;
  protected void writeByteArray(byte[]) throws java.io.IOException;
  protected abstract void writeByteArray(byte[], int, int) throws java.io.IOException;
  protected abstract void writeByteBuffer(java.nio.ByteBuffer) throws java.io.IOException;
  protected abstract void writeString(java.lang.String) throws java.io.IOException;
}
Compiled from "BufferPacker.java"
public interface org.msgpack.packer.BufferPacker extends org.msgpack.packer.Packer {
  public abstract int getBufferSize();
  public abstract byte[] toByteArray();
  public abstract void clear();
}
Compiled from "MessagePackBufferPacker.java"
public class org.msgpack.packer.MessagePackBufferPacker extends org.msgpack.packer.MessagePackPacker implements org.msgpack.packer.BufferPacker {
  public org.msgpack.packer.MessagePackBufferPacker(org.msgpack.MessagePack);
  public org.msgpack.packer.MessagePackBufferPacker(org.msgpack.MessagePack, int);
  public int getBufferSize();
  public byte[] toByteArray();
  public void clear();
}
Compiled from "MessagePackPacker.java"
public class org.msgpack.packer.MessagePackPacker extends org.msgpack.packer.AbstractPacker {
  protected final org.msgpack.io.Output out;
  public org.msgpack.packer.MessagePackPacker(org.msgpack.MessagePack, java.io.OutputStream);
  protected org.msgpack.packer.MessagePackPacker(org.msgpack.MessagePack, org.msgpack.io.Output);
  protected void writeByte(byte) throws java.io.IOException;
  protected void writeShort(short) throws java.io.IOException;
  protected void writeInt(int) throws java.io.IOException;
  protected void writeLong(long) throws java.io.IOException;
  protected void writeBigInteger(java.math.BigInteger) throws java.io.IOException;
  protected void writeFloat(float) throws java.io.IOException;
  protected void writeDouble(double) throws java.io.IOException;
  protected void writeBoolean(boolean) throws java.io.IOException;
  protected void writeByteArray(byte[], int, int) throws java.io.IOException;
  protected void writeByteBuffer(java.nio.ByteBuffer) throws java.io.IOException;
  protected void writeString(java.lang.String) throws java.io.IOException;
  public org.msgpack.packer.Packer writeNil() throws java.io.IOException;
  public org.msgpack.packer.Packer writeArrayBegin(int) throws java.io.IOException;
  public org.msgpack.packer.Packer writeArrayEnd(boolean) throws java.io.IOException;
  public org.msgpack.packer.Packer writeMapBegin(int) throws java.io.IOException;
  public org.msgpack.packer.Packer writeMapEnd(boolean) throws java.io.IOException;
  public void reset();
  public void flush() throws java.io.IOException;
  public void close() throws java.io.IOException;
}
Compiled from "Packer.java"
public interface org.msgpack.packer.Packer extends java.io.Closeable,java.io.Flushable {
  public abstract org.msgpack.packer.Packer write(boolean) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(byte) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(short) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(int) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(long) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(float) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(double) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.lang.Boolean) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.lang.Byte) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.lang.Short) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.lang.Integer) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.lang.Long) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.lang.Float) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.lang.Double) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.math.BigInteger) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(byte[]) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(byte[], int, int) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.nio.ByteBuffer) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.lang.String) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(org.msgpack.type.Value) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer write(java.lang.Object) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer writeNil() throws java.io.IOException;
  public abstract org.msgpack.packer.Packer writeArrayBegin(int) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer writeArrayEnd(boolean) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer writeArrayEnd() throws java.io.IOException;
  public abstract org.msgpack.packer.Packer writeMapBegin(int) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer writeMapEnd(boolean) throws java.io.IOException;
  public abstract org.msgpack.packer.Packer writeMapEnd() throws java.io.IOException;
}
Compiled from "PackerStack.java"
public final class org.msgpack.packer.PackerStack {
  public static final int MAX_STACK_SIZE;
  public org.msgpack.packer.PackerStack();
  public void pushArray(int);
  public void pushMap(int);
  public void checkCount();
  public void reduceCount();
  public void pop();
  public int getDepth();
  public int getTopCount();
  public boolean topIsArray();
  public boolean topIsMap();
  public void clear();
}
Compiled from "Unconverter.java"
public class org.msgpack.packer.Unconverter extends org.msgpack.packer.AbstractPacker {
  public org.msgpack.packer.Unconverter();
  public org.msgpack.packer.Unconverter(org.msgpack.MessagePack);
  public org.msgpack.type.Value getResult();
  public void resetResult();
  public void writeBoolean(boolean) throws java.io.IOException;
  public void writeByte(byte) throws java.io.IOException;
  public void writeShort(short) throws java.io.IOException;
  public void writeInt(int) throws java.io.IOException;
  public void writeBigInteger(java.math.BigInteger) throws java.io.IOException;
  public void writeLong(long) throws java.io.IOException;
  public void writeFloat(float) throws java.io.IOException;
  public void writeDouble(double) throws java.io.IOException;
  public void writeByteArray(byte[], int, int) throws java.io.IOException;
  public void writeByteBuffer(java.nio.ByteBuffer) throws java.io.IOException;
  public void writeString(java.lang.String) throws java.io.IOException;
  public org.msgpack.packer.Packer writeNil() throws java.io.IOException;
  public org.msgpack.packer.Packer writeArrayBegin(int) throws java.io.IOException;
  public org.msgpack.packer.Packer writeArrayEnd(boolean) throws java.io.IOException;
  public org.msgpack.packer.Packer writeMapBegin(int) throws java.io.IOException;
  public org.msgpack.packer.Packer writeMapEnd(boolean) throws java.io.IOException;
  public org.msgpack.packer.Packer write(org.msgpack.type.Value) throws java.io.IOException;
  public void flush() throws java.io.IOException;
  public void close() throws java.io.IOException;
}
Compiled from "AbstractTemplate.java"
public abstract class org.msgpack.template.AbstractTemplate<T> implements org.msgpack.template.Template<T> {
  public org.msgpack.template.AbstractTemplate();
  public void write(org.msgpack.packer.Packer, T) throws java.io.IOException;
  public T read(org.msgpack.unpacker.Unpacker, T) throws java.io.IOException;
}
Compiled from "AnyTemplate.java"
public class org.msgpack.template.AnyTemplate<T> extends org.msgpack.template.AbstractTemplate<T> {
  public org.msgpack.template.AnyTemplate(org.msgpack.template.TemplateRegistry);
  public void write(org.msgpack.packer.Packer, T, boolean) throws java.io.IOException;
  public T read(org.msgpack.unpacker.Unpacker, T, boolean) throws java.io.IOException, org.msgpack.MessageTypeException;
}
Compiled from "BigDecimalTemplate.java"
public class org.msgpack.template.BigDecimalTemplate extends org.msgpack.template.AbstractTemplate<java.math.BigDecimal> {
  static final org.msgpack.template.BigDecimalTemplate instance;
  public void write(org.msgpack.packer.Packer, java.math.BigDecimal, boolean) throws java.io.IOException;
  public java.math.BigDecimal read(org.msgpack.unpacker.Unpacker, java.math.BigDecimal, boolean) throws java.io.IOException;
  public static org.msgpack.template.BigDecimalTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "BigIntegerTemplate.java"
public class org.msgpack.template.BigIntegerTemplate extends org.msgpack.template.AbstractTemplate<java.math.BigInteger> {
  static final org.msgpack.template.BigIntegerTemplate instance;
  public void write(org.msgpack.packer.Packer, java.math.BigInteger, boolean) throws java.io.IOException;
  public java.math.BigInteger read(org.msgpack.unpacker.Unpacker, java.math.BigInteger, boolean) throws java.io.IOException;
  public static org.msgpack.template.BigIntegerTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "BooleanArrayTemplate.java"
public class org.msgpack.template.BooleanArrayTemplate extends org.msgpack.template.AbstractTemplate<boolean[]> {
  static final org.msgpack.template.BooleanArrayTemplate instance;
  public void write(org.msgpack.packer.Packer, boolean[], boolean) throws java.io.IOException;
  public boolean[] read(org.msgpack.unpacker.Unpacker, boolean[], boolean) throws java.io.IOException;
  public static org.msgpack.template.BooleanArrayTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "BooleanTemplate.java"
public class org.msgpack.template.BooleanTemplate extends org.msgpack.template.AbstractTemplate<java.lang.Boolean> {
  static final org.msgpack.template.BooleanTemplate instance;
  public void write(org.msgpack.packer.Packer, java.lang.Boolean, boolean) throws java.io.IOException;
  public java.lang.Boolean read(org.msgpack.unpacker.Unpacker, java.lang.Boolean, boolean) throws java.io.IOException;
  public static org.msgpack.template.BooleanTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "ByteArrayTemplate.java"
public class org.msgpack.template.ByteArrayTemplate extends org.msgpack.template.AbstractTemplate<byte[]> {
  static final org.msgpack.template.ByteArrayTemplate instance;
  public void write(org.msgpack.packer.Packer, byte[], boolean) throws java.io.IOException;
  public byte[] read(org.msgpack.unpacker.Unpacker, byte[], boolean) throws java.io.IOException;
  public static org.msgpack.template.ByteArrayTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "ByteBufferTemplate.java"
public class org.msgpack.template.ByteBufferTemplate extends org.msgpack.template.AbstractTemplate<java.nio.ByteBuffer> {
  static final org.msgpack.template.ByteBufferTemplate instance;
  public void write(org.msgpack.packer.Packer, java.nio.ByteBuffer, boolean) throws java.io.IOException;
  public java.nio.ByteBuffer read(org.msgpack.unpacker.Unpacker, java.nio.ByteBuffer, boolean) throws java.io.IOException;
  public static org.msgpack.template.ByteBufferTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "ByteTemplate.java"
public class org.msgpack.template.ByteTemplate extends org.msgpack.template.AbstractTemplate<java.lang.Byte> {
  static final org.msgpack.template.ByteTemplate instance;
  public void write(org.msgpack.packer.Packer, java.lang.Byte, boolean) throws java.io.IOException;
  public java.lang.Byte read(org.msgpack.unpacker.Unpacker, java.lang.Byte, boolean) throws java.io.IOException;
  public static org.msgpack.template.ByteTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "CharacterTemplate.java"
public class org.msgpack.template.CharacterTemplate extends org.msgpack.template.AbstractTemplate<java.lang.Character> {
  static final org.msgpack.template.CharacterTemplate instance;
  public void write(org.msgpack.packer.Packer, java.lang.Character, boolean) throws java.io.IOException;
  public java.lang.Character read(org.msgpack.unpacker.Unpacker, java.lang.Character, boolean) throws java.io.IOException;
  public static org.msgpack.template.CharacterTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "CollectionTemplate.java"
public class org.msgpack.template.CollectionTemplate<E> extends org.msgpack.template.AbstractTemplate<java.util.Collection<E>> {
  public org.msgpack.template.CollectionTemplate(org.msgpack.template.Template<E>);
  public void write(org.msgpack.packer.Packer, java.util.Collection<E>, boolean) throws java.io.IOException;
  public java.util.Collection<E> read(org.msgpack.unpacker.Unpacker, java.util.Collection<E>, boolean) throws java.io.IOException;
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
}
Compiled from "DateTemplate.java"
public class org.msgpack.template.DateTemplate extends org.msgpack.template.AbstractTemplate<java.util.Date> {
  static final org.msgpack.template.DateTemplate instance;
  public void write(org.msgpack.packer.Packer, java.util.Date, boolean) throws java.io.IOException;
  public java.util.Date read(org.msgpack.unpacker.Unpacker, java.util.Date, boolean) throws java.io.IOException;
  public static org.msgpack.template.DateTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "DoubleArrayTemplate.java"
public class org.msgpack.template.DoubleArrayTemplate extends org.msgpack.template.AbstractTemplate<double[]> {
  static final org.msgpack.template.DoubleArrayTemplate instance;
  public void write(org.msgpack.packer.Packer, double[], boolean) throws java.io.IOException;
  public double[] read(org.msgpack.unpacker.Unpacker, double[], boolean) throws java.io.IOException;
  public static org.msgpack.template.DoubleArrayTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "DoubleTemplate.java"
public class org.msgpack.template.DoubleTemplate extends org.msgpack.template.AbstractTemplate<java.lang.Double> {
  static final org.msgpack.template.DoubleTemplate instance;
  public void write(org.msgpack.packer.Packer, java.lang.Double, boolean) throws java.io.IOException;
  public java.lang.Double read(org.msgpack.unpacker.Unpacker, java.lang.Double, boolean) throws java.io.IOException;
  public static org.msgpack.template.DoubleTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "FieldList.java"
public class org.msgpack.template.FieldList {
  public org.msgpack.template.FieldList();
  public void add(java.lang.String);
  public void add(java.lang.String, org.msgpack.template.FieldOption);
  public void put(int, java.lang.String);
  public void put(int, java.lang.String, org.msgpack.template.FieldOption);
  public java.util.List<org.msgpack.template.FieldList$Entry> getList();
}
Compiled from "FieldList.java"
public class org.msgpack.template.FieldList$Entry {
  public org.msgpack.template.FieldList$Entry();
  public org.msgpack.template.FieldList$Entry(java.lang.String, org.msgpack.template.FieldOption);
  public java.lang.String getName();
  public org.msgpack.template.FieldOption getOption();
  public boolean isAvailable();
}
Compiled from "FieldOption.java"
public final class org.msgpack.template.FieldOption extends java.lang.Enum<org.msgpack.template.FieldOption> {
  public static final org.msgpack.template.FieldOption IGNORE;
  public static final org.msgpack.template.FieldOption OPTIONAL;
  public static final org.msgpack.template.FieldOption NOTNULLABLE;
  public static final org.msgpack.template.FieldOption DEFAULT;
  public static org.msgpack.template.FieldOption[] values();
  public static org.msgpack.template.FieldOption valueOf(java.lang.String);
  static {};
}
Compiled from "FloatArrayTemplate.java"
public class org.msgpack.template.FloatArrayTemplate extends org.msgpack.template.AbstractTemplate<float[]> {
  static final org.msgpack.template.FloatArrayTemplate instance;
  public void write(org.msgpack.packer.Packer, float[], boolean) throws java.io.IOException;
  public float[] read(org.msgpack.unpacker.Unpacker, float[], boolean) throws java.io.IOException;
  public static org.msgpack.template.FloatArrayTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "FloatTemplate.java"
public class org.msgpack.template.FloatTemplate extends org.msgpack.template.AbstractTemplate<java.lang.Float> {
  static final org.msgpack.template.FloatTemplate instance;
  public void write(org.msgpack.packer.Packer, java.lang.Float, boolean) throws java.io.IOException;
  public java.lang.Float read(org.msgpack.unpacker.Unpacker, java.lang.Float, boolean) throws java.io.IOException;
  public static org.msgpack.template.FloatTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "GenericCollectionTemplate.java"
public class org.msgpack.template.GenericCollectionTemplate implements org.msgpack.template.GenericTemplate {
  java.lang.reflect.Constructor<? extends org.msgpack.template.Template> constructor;
  public org.msgpack.template.GenericCollectionTemplate(org.msgpack.template.TemplateRegistry, java.lang.Class<? extends org.msgpack.template.Template>);
  public org.msgpack.template.Template build(org.msgpack.template.Template[]);
}
Compiled from "GenericMapTemplate.java"
public class org.msgpack.template.GenericMapTemplate implements org.msgpack.template.GenericTemplate {
  java.lang.reflect.Constructor<? extends org.msgpack.template.Template> constructor;
  public org.msgpack.template.GenericMapTemplate(org.msgpack.template.TemplateRegistry, java.lang.Class<? extends org.msgpack.template.Template>);
  public org.msgpack.template.Template build(org.msgpack.template.Template[]);
}
Compiled from "GenericTemplate.java"
public interface org.msgpack.template.GenericTemplate {
  public abstract org.msgpack.template.Template build(org.msgpack.template.Template[]);
}
Compiled from "IntegerArrayTemplate.java"
public class org.msgpack.template.IntegerArrayTemplate extends org.msgpack.template.AbstractTemplate<int[]> {
  static final org.msgpack.template.IntegerArrayTemplate instance;
  public void write(org.msgpack.packer.Packer, int[], boolean) throws java.io.IOException;
  public int[] read(org.msgpack.unpacker.Unpacker, int[], boolean) throws java.io.IOException;
  public static org.msgpack.template.IntegerArrayTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "IntegerTemplate.java"
public class org.msgpack.template.IntegerTemplate extends org.msgpack.template.AbstractTemplate<java.lang.Integer> {
  static final org.msgpack.template.IntegerTemplate instance;
  public void write(org.msgpack.packer.Packer, java.lang.Integer, boolean) throws java.io.IOException;
  public java.lang.Integer read(org.msgpack.unpacker.Unpacker, java.lang.Integer, boolean) throws java.io.IOException;
  public static org.msgpack.template.IntegerTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "ListTemplate.java"
public class org.msgpack.template.ListTemplate<E> extends org.msgpack.template.AbstractTemplate<java.util.List<E>> {
  public org.msgpack.template.ListTemplate(org.msgpack.template.Template<E>);
  public void write(org.msgpack.packer.Packer, java.util.List<E>, boolean) throws java.io.IOException;
  public java.util.List<E> read(org.msgpack.unpacker.Unpacker, java.util.List<E>, boolean) throws java.io.IOException;
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
}
Compiled from "LongArrayTemplate.java"
public class org.msgpack.template.LongArrayTemplate extends org.msgpack.template.AbstractTemplate<long[]> {
  static final org.msgpack.template.LongArrayTemplate instance;
  public void write(org.msgpack.packer.Packer, long[], boolean) throws java.io.IOException;
  public long[] read(org.msgpack.unpacker.Unpacker, long[], boolean) throws java.io.IOException;
  public static org.msgpack.template.LongArrayTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "LongTemplate.java"
public class org.msgpack.template.LongTemplate extends org.msgpack.template.AbstractTemplate<java.lang.Long> {
  static final org.msgpack.template.LongTemplate instance;
  public void write(org.msgpack.packer.Packer, java.lang.Long, boolean) throws java.io.IOException;
  public java.lang.Long read(org.msgpack.unpacker.Unpacker, java.lang.Long, boolean) throws java.io.IOException;
  public static org.msgpack.template.LongTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "MapTemplate.java"
public class org.msgpack.template.MapTemplate<K, V> extends org.msgpack.template.AbstractTemplate<java.util.Map<K, V>> {
  public org.msgpack.template.MapTemplate(org.msgpack.template.Template<K>, org.msgpack.template.Template<V>);
  public void write(org.msgpack.packer.Packer, java.util.Map<K, V>, boolean) throws java.io.IOException;
  public java.util.Map<K, V> read(org.msgpack.unpacker.Unpacker, java.util.Map<K, V>, boolean) throws java.io.IOException;
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
}
Compiled from "MessagePackableTemplate.java"
public class org.msgpack.template.MessagePackableTemplate extends org.msgpack.template.AbstractTemplate<org.msgpack.MessagePackable> {
  org.msgpack.template.MessagePackableTemplate(java.lang.Class<?>);
  public void write(org.msgpack.packer.Packer, org.msgpack.MessagePackable, boolean) throws java.io.IOException;
  public org.msgpack.MessagePackable read(org.msgpack.unpacker.Unpacker, org.msgpack.MessagePackable, boolean) throws java.io.IOException;
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
}
Compiled from "NotNullableTemplate.java"
public class org.msgpack.template.NotNullableTemplate<T> extends org.msgpack.template.AbstractTemplate<T> {
  public org.msgpack.template.NotNullableTemplate(org.msgpack.template.Template<T>);
  public void write(org.msgpack.packer.Packer, T, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, T) throws java.io.IOException;
  public T read(org.msgpack.unpacker.Unpacker, T, boolean) throws java.io.IOException;
  public T read(org.msgpack.unpacker.Unpacker, T) throws java.io.IOException;
}
Compiled from "ObjectArrayTemplate.java"
public class org.msgpack.template.ObjectArrayTemplate extends org.msgpack.template.AbstractTemplate {
  protected java.lang.Class componentClass;
  protected org.msgpack.template.Template componentTemplate;
  public org.msgpack.template.ObjectArrayTemplate(java.lang.Class, org.msgpack.template.Template);
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
}
Compiled from "OrdinalEnumTemplate.java"
public class org.msgpack.template.OrdinalEnumTemplate<T> extends org.msgpack.template.AbstractTemplate<T> {
  protected T[] entries;
  protected java.util.HashMap<T, java.lang.Integer> reverse;
  protected boolean strict;
  public org.msgpack.template.OrdinalEnumTemplate(java.lang.Class<T>);
  public void write(org.msgpack.packer.Packer, T, boolean) throws java.io.IOException;
  public T read(org.msgpack.unpacker.Unpacker, T, boolean) throws java.io.IOException, org.msgpack.MessageTypeException;
}
Compiled from "SetTemplate.java"
public class org.msgpack.template.SetTemplate<E> extends org.msgpack.template.AbstractTemplate<java.util.Set<E>> {
  public org.msgpack.template.SetTemplate(org.msgpack.template.Template<E>);
  public void write(org.msgpack.packer.Packer, java.util.Set<E>, boolean) throws java.io.IOException;
  public java.util.Set<E> read(org.msgpack.unpacker.Unpacker, java.util.Set<E>, boolean) throws java.io.IOException;
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
}
Compiled from "ShortArrayTemplate.java"
public class org.msgpack.template.ShortArrayTemplate extends org.msgpack.template.AbstractTemplate<short[]> {
  static final org.msgpack.template.ShortArrayTemplate instance;
  public void write(org.msgpack.packer.Packer, short[], boolean) throws java.io.IOException;
  public short[] read(org.msgpack.unpacker.Unpacker, short[], boolean) throws java.io.IOException;
  public static org.msgpack.template.ShortArrayTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "ShortTemplate.java"
public class org.msgpack.template.ShortTemplate extends org.msgpack.template.AbstractTemplate<java.lang.Short> {
  static final org.msgpack.template.ShortTemplate instance;
  public void write(org.msgpack.packer.Packer, java.lang.Short, boolean) throws java.io.IOException;
  public java.lang.Short read(org.msgpack.unpacker.Unpacker, java.lang.Short, boolean) throws java.io.IOException;
  public static org.msgpack.template.ShortTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "StringTemplate.java"
public class org.msgpack.template.StringTemplate extends org.msgpack.template.AbstractTemplate<java.lang.String> {
  static final org.msgpack.template.StringTemplate instance;
  public void write(org.msgpack.packer.Packer, java.lang.String, boolean) throws java.io.IOException;
  public java.lang.String read(org.msgpack.unpacker.Unpacker, java.lang.String, boolean) throws java.io.IOException;
  public static org.msgpack.template.StringTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "Template.java"
public interface org.msgpack.template.Template<T> {
  public abstract void write(org.msgpack.packer.Packer, T) throws java.io.IOException;
  public abstract void write(org.msgpack.packer.Packer, T, boolean) throws java.io.IOException;
  public abstract T read(org.msgpack.unpacker.Unpacker, T) throws java.io.IOException;
  public abstract T read(org.msgpack.unpacker.Unpacker, T, boolean) throws java.io.IOException;
}
Compiled from "TemplateReference.java"
public class org.msgpack.template.TemplateReference<T> extends org.msgpack.template.AbstractTemplate<T> {
  public org.msgpack.template.TemplateReference(org.msgpack.template.TemplateRegistry, java.lang.reflect.Type);
  public void write(org.msgpack.packer.Packer, T, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, T) throws java.io.IOException;
  public T read(org.msgpack.unpacker.Unpacker, T, boolean) throws java.io.IOException;
  public T read(org.msgpack.unpacker.Unpacker, T) throws java.io.IOException;
}
Compiled from "TemplateRegistry.java"
public class org.msgpack.template.TemplateRegistry {
  java.util.Map<java.lang.reflect.Type, org.msgpack.template.Template<java.lang.reflect.Type>> cache;
  public org.msgpack.template.TemplateRegistry(org.msgpack.template.TemplateRegistry);
  protected org.msgpack.template.builder.TemplateBuilderChain createTemplateBuilderChain();
  public void setClassLoader(java.lang.ClassLoader);
  protected void registerTemplatesWhichRefersRegistry();
  public void register(java.lang.Class<?>);
  public void register(java.lang.Class<?>, org.msgpack.template.FieldList);
  public synchronized void register(java.lang.reflect.Type, org.msgpack.template.Template);
  public synchronized void registerGeneric(java.lang.reflect.Type, org.msgpack.template.GenericTemplate);
  public synchronized boolean unregister(java.lang.reflect.Type);
  public synchronized void unregister();
  public synchronized org.msgpack.template.Template lookup(java.lang.reflect.Type);
}
Compiled from "Templates.java"
public final class org.msgpack.template.Templates {
  public static final org.msgpack.template.Template<org.msgpack.type.Value> TValue;
  public static final org.msgpack.template.Template<java.lang.Byte> TByte;
  public static final org.msgpack.template.Template<java.lang.Short> TShort;
  public static final org.msgpack.template.Template<java.lang.Integer> TInteger;
  public static final org.msgpack.template.Template<java.lang.Long> TLong;
  public static final org.msgpack.template.Template<java.lang.Character> TCharacter;
  public static final org.msgpack.template.Template<java.math.BigInteger> TBigInteger;
  public static final org.msgpack.template.Template<java.math.BigDecimal> TBigDecimal;
  public static final org.msgpack.template.Template<java.lang.Float> TFloat;
  public static final org.msgpack.template.Template<java.lang.Double> TDouble;
  public static final org.msgpack.template.Template<java.lang.Boolean> TBoolean;
  public static final org.msgpack.template.Template<java.lang.String> TString;
  public static final org.msgpack.template.Template<byte[]> TByteArray;
  public static final org.msgpack.template.Template<java.nio.ByteBuffer> TByteBuffer;
  public static final org.msgpack.template.Template<java.util.Date> TDate;
  public org.msgpack.template.Templates();
  public static <T> org.msgpack.template.Template<T> tNotNullable(org.msgpack.template.Template<T>);
  public static <E> org.msgpack.template.Template<java.util.List<E>> tList(org.msgpack.template.Template<E>);
  public static <K, V> org.msgpack.template.Template<java.util.Map<K, V>> tMap(org.msgpack.template.Template<K>, org.msgpack.template.Template<V>);
  public static <E> org.msgpack.template.Template<java.util.Collection<E>> tCollection(org.msgpack.template.Template<E>);
  public static <E extends java.lang.Enum> org.msgpack.template.Template<E> tOrdinalEnum(java.lang.Class<E>);
  public static org.msgpack.template.Template tByte();
  public static org.msgpack.template.Template tShort();
  public static org.msgpack.template.Template tInteger();
  public static org.msgpack.template.Template tLong();
  public static org.msgpack.template.Template tCharacter();
  public static org.msgpack.template.Template tBigInteger();
  public static org.msgpack.template.Template tBigDecimal();
  public static org.msgpack.template.Template tFloat();
  public static org.msgpack.template.Template tDouble();
  public static org.msgpack.template.Template tBoolean();
  public static org.msgpack.template.Template tString();
  public static org.msgpack.template.Template tByteArray();
  public static org.msgpack.template.Template tByteBuffer();
  public static org.msgpack.template.Template tDate();
  static {};
}
Compiled from "ValueTemplate.java"
public class org.msgpack.template.ValueTemplate extends org.msgpack.template.AbstractTemplate<org.msgpack.type.Value> {
  static final org.msgpack.template.ValueTemplate instance;
  public void write(org.msgpack.packer.Packer, org.msgpack.type.Value, boolean) throws java.io.IOException;
  public org.msgpack.type.Value read(org.msgpack.unpacker.Unpacker, org.msgpack.type.Value, boolean) throws java.io.IOException;
  public static org.msgpack.template.ValueTemplate getInstance();
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  static {};
}
Compiled from "AbstractTemplateBuilder.java"
public abstract class org.msgpack.template.builder.AbstractTemplateBuilder implements org.msgpack.template.builder.TemplateBuilder {
  protected org.msgpack.template.TemplateRegistry registry;
  protected org.msgpack.template.builder.AbstractTemplateBuilder(org.msgpack.template.TemplateRegistry);
  public <T> org.msgpack.template.Template<T> buildTemplate(java.lang.reflect.Type) throws org.msgpack.template.builder.TemplateBuildException;
  public <T> org.msgpack.template.Template<T> buildTemplate(java.lang.Class<T>, org.msgpack.template.FieldList) throws org.msgpack.template.builder.TemplateBuildException;
  protected abstract <T> org.msgpack.template.Template<T> buildTemplate(java.lang.Class<T>, org.msgpack.template.builder.FieldEntry[]);
  protected void checkClassValidation(java.lang.Class<?>);
  protected org.msgpack.template.FieldOption getFieldOption(java.lang.Class<?>);
  protected org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class<?>, org.msgpack.template.FieldOption);
  public void writeTemplate(java.lang.reflect.Type, java.lang.String);
  public <T> org.msgpack.template.Template<T> loadTemplate(java.lang.reflect.Type);
  public static boolean isAnnotated(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>);
  public static boolean isAnnotated(java.lang.reflect.AccessibleObject, java.lang.Class<? extends java.lang.annotation.Annotation>);
  public static boolean matchAtClassTemplateBuilder(java.lang.Class<?>, boolean);
  public static boolean matchAtBeansClassTemplateBuilder(java.lang.reflect.Type, boolean);
  public static boolean matchAtArrayTemplateBuilder(java.lang.Class<?>, boolean);
  public static boolean matchAtOrdinalEnumTemplateBuilder(java.lang.Class<?>, boolean);
}
Compiled from "ArrayTemplateBuilder.java"
public class org.msgpack.template.builder.ArrayTemplateBuilder extends org.msgpack.template.builder.AbstractTemplateBuilder {
  public org.msgpack.template.builder.ArrayTemplateBuilder(org.msgpack.template.TemplateRegistry);
  public boolean matchType(java.lang.reflect.Type, boolean);
  public <T> org.msgpack.template.Template<T> buildTemplate(java.lang.reflect.Type);
  public <T> org.msgpack.template.Template<T> buildTemplate(java.lang.Class<T>, org.msgpack.template.FieldList) throws org.msgpack.template.builder.TemplateBuildException;
  protected <T> org.msgpack.template.Template<T> buildTemplate(java.lang.Class<T>, org.msgpack.template.builder.FieldEntry[]);
  public void writeTemplate(java.lang.reflect.Type, java.lang.String);
  public <T> org.msgpack.template.Template<T> loadTemplate(java.lang.reflect.Type);
  static {};
}
Compiled from "ArrayTemplateBuilder.java"
class org.msgpack.template.builder.ArrayTemplateBuilder$ReflectionMultidimentionalArrayTemplate extends org.msgpack.template.AbstractTemplate {
  public org.msgpack.template.builder.ArrayTemplateBuilder$ReflectionMultidimentionalArrayTemplate(java.lang.Class, org.msgpack.template.Template);
  java.lang.Class getComponentClass();
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
}
Compiled from "BeansBuildContext.java"
public class org.msgpack.template.builder.BeansBuildContext extends org.msgpack.template.builder.BuildContext<org.msgpack.template.builder.BeansFieldEntry> {
  protected org.msgpack.template.builder.BeansFieldEntry[] entries;
  protected java.lang.Class<?> origClass;
  protected java.lang.String origName;
  protected org.msgpack.template.Template<?>[] templates;
  public org.msgpack.template.builder.BeansBuildContext(org.msgpack.template.builder.JavassistTemplateBuilder);
  public org.msgpack.template.Template buildTemplate(java.lang.Class<?>, org.msgpack.template.builder.BeansFieldEntry[], org.msgpack.template.Template[]);
  protected void setSuperClass() throws javassist.CannotCompileException, javassist.NotFoundException;
  protected void buildConstructor() throws javassist.CannotCompileException, javassist.NotFoundException;
  protected org.msgpack.template.Template buildInstance(java.lang.Class<?>) throws java.lang.NoSuchMethodException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  protected void buildMethodInit();
  protected java.lang.String buildWriteMethodBody();
  protected java.lang.String buildReadMethodBody();
  public void writeTemplate(java.lang.Class<?>, org.msgpack.template.builder.BeansFieldEntry[], org.msgpack.template.Template[], java.lang.String);
  public org.msgpack.template.Template loadTemplate(java.lang.Class<?>, org.msgpack.template.builder.BeansFieldEntry[], org.msgpack.template.Template[]);
  public org.msgpack.template.Template loadTemplate(java.lang.Class, org.msgpack.template.builder.FieldEntry[], org.msgpack.template.Template[]);
  public void writeTemplate(java.lang.Class, org.msgpack.template.builder.FieldEntry[], org.msgpack.template.Template[], java.lang.String);
  public org.msgpack.template.Template buildTemplate(java.lang.Class, org.msgpack.template.builder.FieldEntry[], org.msgpack.template.Template[]);
}
Compiled from "BeansFieldEntry.java"
public class org.msgpack.template.builder.BeansFieldEntry extends org.msgpack.template.builder.FieldEntry {
  protected org.msgpack.template.builder.beans.PropertyDescriptor desc;
  public org.msgpack.template.builder.BeansFieldEntry();
  public org.msgpack.template.builder.BeansFieldEntry(org.msgpack.template.builder.BeansFieldEntry);
  public org.msgpack.template.builder.BeansFieldEntry(org.msgpack.template.builder.beans.PropertyDescriptor);
  public org.msgpack.template.builder.BeansFieldEntry(org.msgpack.template.builder.beans.PropertyDescriptor, org.msgpack.template.FieldOption);
  public java.lang.String getGetterName();
  public java.lang.String getSetterName();
  public org.msgpack.template.builder.beans.PropertyDescriptor getPropertyDescriptor();
  public java.lang.String getName();
  public java.lang.Class<?> getType();
  public java.lang.reflect.Type getGenericType();
  public java.lang.Object get(java.lang.Object);
  public void set(java.lang.Object, java.lang.Object);
}
Compiled from "BuildContext.java"
public abstract class org.msgpack.template.builder.BuildContext<T extends org.msgpack.template.builder.FieldEntry> {
  protected org.msgpack.template.builder.JavassistTemplateBuilder director;
  protected java.lang.String tmplName;
  protected javassist.CtClass tmplCtClass;
  protected java.lang.StringBuilder stringBuilder;
  protected abstract org.msgpack.template.Template buildTemplate(java.lang.Class<?>, T[], org.msgpack.template.Template[]);
  protected abstract void setSuperClass() throws javassist.CannotCompileException, javassist.NotFoundException;
  protected abstract void buildConstructor() throws javassist.CannotCompileException, javassist.NotFoundException;
  public org.msgpack.template.builder.BuildContext(org.msgpack.template.builder.JavassistTemplateBuilder);
  protected org.msgpack.template.Template build(java.lang.String);
  protected void reset(java.lang.String, boolean);
  protected void buildClass() throws javassist.CannotCompileException, javassist.NotFoundException;
  protected void buildMethodInit();
  protected abstract org.msgpack.template.Template buildInstance(java.lang.Class<?>) throws java.lang.NoSuchMethodException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  protected void buildWriteMethod() throws javassist.CannotCompileException, javassist.NotFoundException;
  protected abstract java.lang.String buildWriteMethodBody();
  protected void buildReadMethod() throws javassist.CannotCompileException, javassist.NotFoundException;
  protected abstract java.lang.String buildReadMethodBody();
  protected java.lang.Class<?> createClass() throws javassist.CannotCompileException;
  protected void saveClass(java.lang.String) throws javassist.CannotCompileException, java.io.IOException;
  protected void resetStringBuilder();
  protected void buildString(java.lang.String);
  protected void buildString(java.lang.String, java.lang.Object...);
  protected java.lang.String getBuiltString();
  protected java.lang.String primitiveWriteName(java.lang.Class<?>);
  protected java.lang.String primitiveReadName(java.lang.Class<?>);
  protected abstract void writeTemplate(java.lang.Class<?>, T[], org.msgpack.template.Template[], java.lang.String);
  protected void write(java.lang.String, java.lang.String);
  protected abstract org.msgpack.template.Template loadTemplate(java.lang.Class<?>, T[], org.msgpack.template.Template[]);
  protected org.msgpack.template.Template load(java.lang.String);
  static {};
}
Compiled from "DefaultBuildContext.java"
public class org.msgpack.template.builder.DefaultBuildContext extends org.msgpack.template.builder.BuildContext<org.msgpack.template.builder.FieldEntry> {
  protected org.msgpack.template.builder.FieldEntry[] entries;
  protected java.lang.Class<?> origClass;
  protected java.lang.String origName;
  protected org.msgpack.template.Template<?>[] templates;
  public org.msgpack.template.builder.DefaultBuildContext(org.msgpack.template.builder.JavassistTemplateBuilder);
  public org.msgpack.template.Template buildTemplate(java.lang.Class, org.msgpack.template.builder.FieldEntry[], org.msgpack.template.Template[]);
  protected void setSuperClass() throws javassist.CannotCompileException, javassist.NotFoundException;
  protected void buildConstructor() throws javassist.CannotCompileException, javassist.NotFoundException;
  protected org.msgpack.template.Template buildInstance(java.lang.Class<?>) throws java.lang.NoSuchMethodException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  protected void buildMethodInit();
  protected java.lang.String buildWriteMethodBody();
  public static java.lang.Object readPrivateField(java.lang.Object, java.lang.Class, java.lang.String);
  public static void writePrivateField(org.msgpack.packer.Packer, java.lang.Object, java.lang.Class, java.lang.String, org.msgpack.template.Template);
  protected java.lang.String buildReadMethodBody();
  public static void readPrivateField(org.msgpack.unpacker.Unpacker, java.lang.Object, java.lang.Class, java.lang.String, org.msgpack.template.Template);
  public void writeTemplate(java.lang.Class<?>, org.msgpack.template.builder.FieldEntry[], org.msgpack.template.Template[], java.lang.String);
  public org.msgpack.template.Template loadTemplate(java.lang.Class<?>, org.msgpack.template.builder.FieldEntry[], org.msgpack.template.Template[]);
}
Compiled from "DefaultFieldEntry.java"
public class org.msgpack.template.builder.DefaultFieldEntry extends org.msgpack.template.builder.FieldEntry {
  protected java.lang.reflect.Field field;
  public org.msgpack.template.builder.DefaultFieldEntry();
  public org.msgpack.template.builder.DefaultFieldEntry(org.msgpack.template.builder.DefaultFieldEntry);
  public org.msgpack.template.builder.DefaultFieldEntry(java.lang.reflect.Field, org.msgpack.template.FieldOption);
  public java.lang.reflect.Field getField();
  public void setField(java.lang.reflect.Field);
  public java.lang.String getName();
  public java.lang.Class<?> getType();
  public java.lang.reflect.Type getGenericType();
  public java.lang.Object get(java.lang.Object);
  public void set(java.lang.Object, java.lang.Object);
}
Compiled from "FieldEntry.java"
public abstract class org.msgpack.template.builder.FieldEntry {
  protected org.msgpack.template.FieldOption option;
  public org.msgpack.template.builder.FieldEntry();
  public org.msgpack.template.builder.FieldEntry(org.msgpack.template.FieldOption);
  public org.msgpack.template.FieldOption getOption();
  public void setOption(org.msgpack.template.FieldOption);
  public boolean isAvailable();
  public boolean isOptional();
  public boolean isNotNullable();
  public abstract java.lang.String getName();
  public abstract java.lang.Class<?> getType();
  public abstract java.lang.reflect.Type getGenericType();
  public abstract java.lang.Object get(java.lang.Object);
  public abstract void set(java.lang.Object, java.lang.Object);
  public java.lang.String getJavaTypeName();
  public java.lang.String arrayTypeToString(java.lang.Class<?>);
}
Compiled from "JavassistBeansTemplateBuilder.java"
public class org.msgpack.template.builder.JavassistBeansTemplateBuilder extends org.msgpack.template.builder.JavassistTemplateBuilder {
  public org.msgpack.template.builder.JavassistBeansTemplateBuilder(org.msgpack.template.TemplateRegistry);
  public boolean matchType(java.lang.reflect.Type, boolean);
  protected org.msgpack.template.builder.BuildContext createBuildContext();
  static {};
}
Compiled from "JavassistTemplateBuilder.java"
public class org.msgpack.template.builder.JavassistTemplateBuilder extends org.msgpack.template.builder.AbstractTemplateBuilder {
  protected javassist.ClassPool pool;
  protected int seqId;
  protected java.lang.ClassLoader loader;
  public org.msgpack.template.builder.JavassistTemplateBuilder(org.msgpack.template.TemplateRegistry);
  public org.msgpack.template.builder.JavassistTemplateBuilder(org.msgpack.template.TemplateRegistry, java.lang.ClassLoader);
  public boolean matchType(java.lang.reflect.Type, boolean);
  public void addClassLoader(java.lang.ClassLoader);
  protected javassist.CtClass makeCtClass(java.lang.String);
  protected javassist.CtClass getCtClass(java.lang.String) throws javassist.NotFoundException;
  protected int nextSeqId();
  protected org.msgpack.template.builder.BuildContext createBuildContext();
  public <T> org.msgpack.template.Template<T> buildTemplate(java.lang.Class<T>, org.msgpack.template.builder.FieldEntry[]);
  public void writeTemplate(java.lang.reflect.Type, java.lang.String);
  public <T> org.msgpack.template.Template<T> loadTemplate(java.lang.reflect.Type);
  protected java.lang.ClassLoader getClassLoader();
  static {};
}
Compiled from "JavassistTemplateBuilder.java"
public abstract class org.msgpack.template.builder.JavassistTemplateBuilder$JavassistTemplate<T> extends org.msgpack.template.AbstractTemplate<T> {
  public java.lang.Class<T> targetClass;
  public org.msgpack.template.Template<?>[] templates;
  public org.msgpack.template.builder.JavassistTemplateBuilder$JavassistTemplate(java.lang.Class<T>, org.msgpack.template.Template<?>[]);
}
Compiled from "OrdinalEnumTemplateBuilder.java"
public class org.msgpack.template.builder.OrdinalEnumTemplateBuilder extends org.msgpack.template.builder.AbstractTemplateBuilder {
  public org.msgpack.template.builder.OrdinalEnumTemplateBuilder(org.msgpack.template.TemplateRegistry);
  public boolean matchType(java.lang.reflect.Type, boolean);
  public <T> org.msgpack.template.Template<T> buildTemplate(java.lang.Class<T>, org.msgpack.template.builder.FieldEntry[]);
  public <T> org.msgpack.template.Template<T> buildTemplate(java.lang.reflect.Type) throws org.msgpack.template.builder.TemplateBuildException;
  protected void checkOrdinalEnumValidation(java.lang.Class<?>);
  static {};
}
Compiled from "ReflectionBeansTemplateBuilder.java"
public class org.msgpack.template.builder.ReflectionBeansTemplateBuilder extends org.msgpack.template.builder.ReflectionTemplateBuilder {
  public org.msgpack.template.builder.ReflectionBeansTemplateBuilder(org.msgpack.template.TemplateRegistry);
  public boolean matchType(java.lang.reflect.Type, boolean);
  protected org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionFieldTemplate[] toTemplates(org.msgpack.template.builder.FieldEntry[]);
  public org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class<?>, org.msgpack.template.FieldOption);
  static {};
}
Compiled from "ReflectionBeansTemplateBuilder.java"
class org.msgpack.template.builder.ReflectionBeansTemplateBuilder$ReflectionBeansFieldTemplate extends org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionFieldTemplate {
  org.msgpack.template.builder.ReflectionBeansTemplateBuilder$ReflectionBeansFieldTemplate(org.msgpack.template.builder.FieldEntry);
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
}
Compiled from "ReflectionTemplateBuilder.java"
public class org.msgpack.template.builder.ReflectionTemplateBuilder extends org.msgpack.template.builder.AbstractTemplateBuilder {
  public org.msgpack.template.builder.ReflectionTemplateBuilder(org.msgpack.template.TemplateRegistry);
  public org.msgpack.template.builder.ReflectionTemplateBuilder(org.msgpack.template.TemplateRegistry, java.lang.ClassLoader);
  public boolean matchType(java.lang.reflect.Type, boolean);
  public <T> org.msgpack.template.Template<T> buildTemplate(java.lang.Class<T>, org.msgpack.template.builder.FieldEntry[]);
  protected org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionFieldTemplate[] toTemplates(org.msgpack.template.builder.FieldEntry[]);
  static {};
}
Compiled from "ReflectionTemplateBuilder.java"
final class org.msgpack.template.builder.ReflectionTemplateBuilder$FieldTemplateImpl extends org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionFieldTemplate {
  public org.msgpack.template.builder.ReflectionTemplateBuilder$FieldTemplateImpl(org.msgpack.template.builder.FieldEntry, org.msgpack.template.Template);
  public void write(org.msgpack.packer.Packer, java.lang.Object, boolean) throws java.io.IOException;
  public java.lang.Object read(org.msgpack.unpacker.Unpacker, java.lang.Object, boolean) throws java.io.IOException;
}
Compiled from "ReflectionTemplateBuilder.java"
public class org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionClassTemplate<T> extends org.msgpack.template.AbstractTemplate<T> {
  protected java.lang.Class<T> targetClass;
  protected org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionFieldTemplate[] templates;
  protected org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionClassTemplate(java.lang.Class<T>, org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionFieldTemplate[]);
  public void write(org.msgpack.packer.Packer, T, boolean) throws java.io.IOException;
  public T read(org.msgpack.unpacker.Unpacker, T, boolean) throws java.io.IOException;
}
Compiled from "ReflectionTemplateBuilder.java"
public abstract class org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionFieldTemplate extends org.msgpack.template.AbstractTemplate<java.lang.Object> {
  protected org.msgpack.template.builder.FieldEntry entry;
  org.msgpack.template.builder.ReflectionTemplateBuilder$ReflectionFieldTemplate(org.msgpack.template.builder.FieldEntry);
  void setNil(java.lang.Object);
}
Compiled from "TemplateBuildException.java"
public class org.msgpack.template.builder.TemplateBuildException extends java.lang.RuntimeException {
  public org.msgpack.template.builder.TemplateBuildException(java.lang.String);
  public org.msgpack.template.builder.TemplateBuildException(java.lang.String, java.lang.Throwable);
  public org.msgpack.template.builder.TemplateBuildException(java.lang.Throwable);
}
Compiled from "TemplateBuilder.java"
public interface org.msgpack.template.builder.TemplateBuilder {
  public abstract boolean matchType(java.lang.reflect.Type, boolean);
  public abstract <T> org.msgpack.template.Template<T> buildTemplate(java.lang.reflect.Type) throws org.msgpack.template.builder.TemplateBuildException;
  public abstract <T> org.msgpack.template.Template<T> buildTemplate(java.lang.Class<T>, org.msgpack.template.FieldList) throws org.msgpack.template.builder.TemplateBuildException;
  public abstract void writeTemplate(java.lang.reflect.Type, java.lang.String);
  public abstract <T> org.msgpack.template.Template<T> loadTemplate(java.lang.reflect.Type);
}
Compiled from "TemplateBuilderChain.java"
public class org.msgpack.template.builder.TemplateBuilderChain {
  protected java.util.List<org.msgpack.template.builder.TemplateBuilder> templateBuilders;
  protected org.msgpack.template.builder.TemplateBuilder forceBuilder;
  public org.msgpack.template.builder.TemplateBuilderChain(org.msgpack.template.TemplateRegistry);
  public org.msgpack.template.builder.TemplateBuilderChain(org.msgpack.template.TemplateRegistry, java.lang.ClassLoader);
  protected void reset(org.msgpack.template.TemplateRegistry, java.lang.ClassLoader);
  public org.msgpack.template.builder.TemplateBuilder getForceBuilder();
  public org.msgpack.template.builder.TemplateBuilder select(java.lang.reflect.Type, boolean);
}
Compiled from "BeanDescriptor.java"
public class org.msgpack.template.builder.beans.BeanDescriptor extends org.msgpack.template.builder.beans.FeatureDescriptor {
  public org.msgpack.template.builder.beans.BeanDescriptor(java.lang.Class<?>, java.lang.Class<?>);
  public org.msgpack.template.builder.beans.BeanDescriptor(java.lang.Class<?>);
  public java.lang.Class<?> getCustomizerClass();
  public java.lang.Class<?> getBeanClass();
}
Compiled from "BeanInfo.java"
public interface org.msgpack.template.builder.beans.BeanInfo {
  public abstract org.msgpack.template.builder.beans.PropertyDescriptor[] getPropertyDescriptors();
  public abstract org.msgpack.template.builder.beans.MethodDescriptor[] getMethodDescriptors();
  public abstract org.msgpack.template.builder.beans.EventSetDescriptor[] getEventSetDescriptors();
  public abstract org.msgpack.template.builder.beans.BeanInfo[] getAdditionalBeanInfo();
  public abstract org.msgpack.template.builder.beans.BeanDescriptor getBeanDescriptor();
  public abstract int getDefaultPropertyIndex();
  public abstract int getDefaultEventIndex();
}
Compiled from "EventSetDescriptor.java"
public class org.msgpack.template.builder.beans.EventSetDescriptor extends org.msgpack.template.builder.beans.FeatureDescriptor {
  public org.msgpack.template.builder.beans.EventSetDescriptor(java.lang.Class<?>, java.lang.String, java.lang.Class<?>, java.lang.String) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.EventSetDescriptor(java.lang.Class<?>, java.lang.String, java.lang.Class<?>, java.lang.String[], java.lang.String, java.lang.String) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.EventSetDescriptor(java.lang.Class<?>, java.lang.String, java.lang.Class<?>, java.lang.String[], java.lang.String, java.lang.String, java.lang.String) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.EventSetDescriptor(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method[], java.lang.reflect.Method, java.lang.reflect.Method) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.EventSetDescriptor(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method[], java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.EventSetDescriptor(java.lang.String, java.lang.Class<?>, org.msgpack.template.builder.beans.MethodDescriptor[], java.lang.reflect.Method, java.lang.reflect.Method) throws org.msgpack.template.builder.beans.IntrospectionException;
  public java.lang.reflect.Method[] getListenerMethods();
  public org.msgpack.template.builder.beans.MethodDescriptor[] getListenerMethodDescriptors();
  public java.lang.reflect.Method getRemoveListenerMethod();
  public java.lang.reflect.Method getGetListenerMethod();
  public java.lang.reflect.Method getAddListenerMethod();
  public java.lang.Class<?> getListenerType();
  public void setUnicast(boolean);
  public void setInDefaultEventSet(boolean);
  public boolean isUnicast();
  public boolean isInDefaultEventSet();
  void merge(org.msgpack.template.builder.beans.EventSetDescriptor);
}
Compiled from "ExceptionListener.java"
public interface org.msgpack.template.builder.beans.ExceptionListener {
  public abstract void exceptionThrown(java.lang.Exception);
}
Compiled from "Expression.java"
public class org.msgpack.template.builder.beans.Expression extends org.msgpack.template.builder.beans.Statement {
  boolean valueIsDefined;
  java.lang.Object value;
  public org.msgpack.template.builder.beans.Expression(java.lang.Object, java.lang.Object, java.lang.String, java.lang.Object[]);
  public org.msgpack.template.builder.beans.Expression(java.lang.Object, java.lang.String, java.lang.Object[]);
  public java.lang.String toString();
  public void setValue(java.lang.Object);
  public java.lang.Object getValue() throws java.lang.Exception;
}
Compiled from "FeatureDescriptor.java"
public class org.msgpack.template.builder.beans.FeatureDescriptor {
  boolean preferred;
  boolean hidden;
  boolean expert;
  java.lang.String shortDescription;
  java.lang.String name;
  java.lang.String displayName;
  static final boolean $assertionsDisabled;
  public org.msgpack.template.builder.beans.FeatureDescriptor();
  public void setValue(java.lang.String, java.lang.Object);
  public java.lang.Object getValue(java.lang.String);
  public java.util.Enumeration<java.lang.String> attributeNames();
  public void setShortDescription(java.lang.String);
  public void setName(java.lang.String);
  public void setDisplayName(java.lang.String);
  public java.lang.String getShortDescription();
  public java.lang.String getName();
  public java.lang.String getDisplayName();
  public void setPreferred(boolean);
  public void setHidden(boolean);
  public void setExpert(boolean);
  public boolean isPreferred();
  public boolean isHidden();
  public boolean isExpert();
  void merge(org.msgpack.template.builder.beans.FeatureDescriptor);
  static {};
}
Compiled from "IndexedPropertyDescriptor.java"
public class org.msgpack.template.builder.beans.IndexedPropertyDescriptor extends org.msgpack.template.builder.beans.PropertyDescriptor {
  public org.msgpack.template.builder.beans.IndexedPropertyDescriptor(java.lang.String, java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.IndexedPropertyDescriptor(java.lang.String, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.IndexedPropertyDescriptor(java.lang.String, java.lang.Class<?>) throws org.msgpack.template.builder.beans.IntrospectionException;
  public void setIndexedReadMethod(java.lang.reflect.Method) throws org.msgpack.template.builder.beans.IntrospectionException;
  public void setIndexedWriteMethod(java.lang.reflect.Method) throws org.msgpack.template.builder.beans.IntrospectionException;
  public java.lang.reflect.Method getIndexedWriteMethod();
  public java.lang.reflect.Method getIndexedReadMethod();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Class<?> getIndexedPropertyType();
}
Compiled from "IntrospectionException.java"
public class org.msgpack.template.builder.beans.IntrospectionException extends java.lang.Exception {
  public org.msgpack.template.builder.beans.IntrospectionException(java.lang.String);
}
Compiled from "Introspector.java"
public class org.msgpack.template.builder.beans.Introspector {
  public static final int IGNORE_ALL_BEANINFO;
  public static final int IGNORE_IMMEDIATE_BEANINFO;
  public static final int USE_ALL_BEANINFO;
  public static java.lang.String decapitalize(java.lang.String);
  public static void flushCaches();
  public static void flushFromCaches(java.lang.Class<?>);
  public static org.msgpack.template.builder.beans.BeanInfo getBeanInfo(java.lang.Class<?>) throws org.msgpack.template.builder.beans.IntrospectionException;
  public static org.msgpack.template.builder.beans.BeanInfo getBeanInfo(java.lang.Class<?>, java.lang.Class<?>) throws org.msgpack.template.builder.beans.IntrospectionException;
  public static org.msgpack.template.builder.beans.BeanInfo getBeanInfo(java.lang.Class<?>, int) throws org.msgpack.template.builder.beans.IntrospectionException;
  public static java.lang.String[] getBeanInfoSearchPath();
  public static void setBeanInfoSearchPath(java.lang.String[]);
  static {};
}
Compiled from "MethodDescriptor.java"
public class org.msgpack.template.builder.beans.MethodDescriptor extends org.msgpack.template.builder.beans.FeatureDescriptor {
  public org.msgpack.template.builder.beans.MethodDescriptor(java.lang.reflect.Method, org.msgpack.template.builder.beans.ParameterDescriptor[]);
  public org.msgpack.template.builder.beans.MethodDescriptor(java.lang.reflect.Method);
  public java.lang.reflect.Method getMethod();
  public org.msgpack.template.builder.beans.ParameterDescriptor[] getParameterDescriptors();
  void merge(org.msgpack.template.builder.beans.MethodDescriptor);
}
Compiled from "ParameterDescriptor.java"
public class org.msgpack.template.builder.beans.ParameterDescriptor extends org.msgpack.template.builder.beans.FeatureDescriptor {
  public org.msgpack.template.builder.beans.ParameterDescriptor();
}
Compiled from "PropertyChangeEvent.java"
public class org.msgpack.template.builder.beans.PropertyChangeEvent extends java.util.EventObject {
  java.lang.String propertyName;
  java.lang.Object oldValue;
  java.lang.Object newValue;
  java.lang.Object propagationId;
  public org.msgpack.template.builder.beans.PropertyChangeEvent(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object);
  public java.lang.String getPropertyName();
  public void setPropagationId(java.lang.Object);
  public java.lang.Object getPropagationId();
  public java.lang.Object getOldValue();
  public java.lang.Object getNewValue();
}
Compiled from "PropertyChangeListener.java"
public interface org.msgpack.template.builder.beans.PropertyChangeListener extends java.util.EventListener {
  public abstract void propertyChange(org.msgpack.template.builder.beans.PropertyChangeEvent);
}
Compiled from "PropertyDescriptor.java"
public class org.msgpack.template.builder.beans.PropertyDescriptor extends org.msgpack.template.builder.beans.FeatureDescriptor {
  boolean constrained;
  boolean bound;
  public org.msgpack.template.builder.beans.PropertyDescriptor(java.lang.String, java.lang.Class<?>, java.lang.String, java.lang.String) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.PropertyDescriptor(java.lang.String, java.lang.reflect.Method, java.lang.reflect.Method) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.PropertyDescriptor(java.lang.String, java.lang.Class<?>) throws org.msgpack.template.builder.beans.IntrospectionException;
  public void setWriteMethod(java.lang.reflect.Method) throws org.msgpack.template.builder.beans.IntrospectionException;
  public void setReadMethod(java.lang.reflect.Method) throws org.msgpack.template.builder.beans.IntrospectionException;
  public java.lang.reflect.Method getWriteMethod();
  public java.lang.reflect.Method getReadMethod();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void setPropertyEditorClass(java.lang.Class<?>);
  public java.lang.Class<?> getPropertyType();
  public java.lang.Class<?> getPropertyEditorClass();
  public void setConstrained(boolean);
  public void setBound(boolean);
  public boolean isConstrained();
  public boolean isBound();
  java.lang.String createDefaultMethodName(java.lang.String, java.lang.String);
  void setReadMethod(java.lang.Class<?>, java.lang.String) throws org.msgpack.template.builder.beans.IntrospectionException;
  void setWriteMethod(java.lang.Class<?>, java.lang.String) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.PropertyEditor createPropertyEditor(java.lang.Object);
}
Compiled from "PropertyEditor.java"
public interface org.msgpack.template.builder.beans.PropertyEditor {
  public abstract void setAsText(java.lang.String) throws java.lang.IllegalArgumentException;
  public abstract java.lang.String[] getTags();
  public abstract java.lang.String getJavaInitializationString();
  public abstract java.lang.String getAsText();
  public abstract void setValue(java.lang.Object);
  public abstract java.lang.Object getValue();
  public abstract void removePropertyChangeListener(org.msgpack.template.builder.beans.PropertyChangeListener);
  public abstract void addPropertyChangeListener(org.msgpack.template.builder.beans.PropertyChangeListener);
  public abstract boolean supportsCustomEditor();
  public abstract boolean isPaintable();
}
Compiled from "PropertyVetoException.java"
public class org.msgpack.template.builder.beans.PropertyVetoException extends java.lang.Exception {
  public org.msgpack.template.builder.beans.PropertyVetoException(java.lang.String, org.msgpack.template.builder.beans.PropertyChangeEvent);
  public org.msgpack.template.builder.beans.PropertyChangeEvent getPropertyChangeEvent();
}
Compiled from "SimpleBeanInfo.java"
public class org.msgpack.template.builder.beans.SimpleBeanInfo implements org.msgpack.template.builder.beans.BeanInfo {
  public org.msgpack.template.builder.beans.SimpleBeanInfo();
  public org.msgpack.template.builder.beans.PropertyDescriptor[] getPropertyDescriptors();
  public org.msgpack.template.builder.beans.MethodDescriptor[] getMethodDescriptors();
  public org.msgpack.template.builder.beans.EventSetDescriptor[] getEventSetDescriptors();
  public org.msgpack.template.builder.beans.BeanInfo[] getAdditionalBeanInfo();
  public org.msgpack.template.builder.beans.BeanDescriptor getBeanDescriptor();
  public int getDefaultPropertyIndex();
  public int getDefaultEventIndex();
}
Compiled from "StandardBeanInfo.java"
class org.msgpack.template.builder.beans.StandardBeanInfo extends org.msgpack.template.builder.beans.SimpleBeanInfo {
  org.msgpack.template.builder.beans.BeanInfo[] additionalBeanInfo;
  org.msgpack.template.builder.beans.StandardBeanInfo(java.lang.Class<?>, org.msgpack.template.builder.beans.BeanInfo, java.lang.Class<?>) throws org.msgpack.template.builder.beans.IntrospectionException;
  public org.msgpack.template.builder.beans.BeanInfo[] getAdditionalBeanInfo();
  public org.msgpack.template.builder.beans.EventSetDescriptor[] getEventSetDescriptors();
  public org.msgpack.template.builder.beans.MethodDescriptor[] getMethodDescriptors();
  public org.msgpack.template.builder.beans.PropertyDescriptor[] getPropertyDescriptors();
  public org.msgpack.template.builder.beans.BeanDescriptor getBeanDescriptor();
  public int getDefaultEventIndex();
  public int getDefaultPropertyIndex();
  void mergeBeanInfo(org.msgpack.template.builder.beans.BeanInfo, boolean) throws org.msgpack.template.builder.beans.IntrospectionException;
  void init();
  static {};
}
Compiled from "StandardBeanInfo.java"
class org.msgpack.template.builder.beans.StandardBeanInfo$1 {
}
Compiled from "StandardBeanInfo.java"
class org.msgpack.template.builder.beans.StandardBeanInfo$PropertyComparator implements java.util.Comparator<org.msgpack.template.builder.beans.PropertyDescriptor> {
  public int compare(org.msgpack.template.builder.beans.PropertyDescriptor, org.msgpack.template.builder.beans.PropertyDescriptor);
  public int compare(java.lang.Object, java.lang.Object);
  org.msgpack.template.builder.beans.StandardBeanInfo$PropertyComparator(org.msgpack.template.builder.beans.StandardBeanInfo$1);
}
Compiled from "Statement.java"
public class org.msgpack.template.builder.beans.Statement {
  public org.msgpack.template.builder.beans.Statement(java.lang.Object, java.lang.String, java.lang.Object[]);
  public java.lang.String toString();
  public java.lang.String getMethodName();
  public java.lang.Object[] getArguments();
  public java.lang.Object getTarget();
  public void execute() throws java.lang.Exception;
  java.lang.Object invokeMethod() throws java.lang.Exception;
  static java.lang.reflect.Method findMethod(java.lang.Class<?>, java.lang.String, java.lang.Object[], boolean) throws java.lang.NoSuchMethodException;
  static boolean isStaticMethodCall(org.msgpack.template.builder.beans.Statement);
  static boolean isPDConstructor(org.msgpack.template.builder.beans.Statement);
  static java.lang.Class access$000(java.lang.Class);
  static {};
}
Compiled from "Statement.java"
class org.msgpack.template.builder.beans.Statement$1 implements java.security.PrivilegedAction<java.lang.Object> {
  final java.lang.reflect.Method val$method;
  final java.util.Iterator val$iterator;
  final org.msgpack.template.builder.beans.Statement this$0;
  org.msgpack.template.builder.beans.Statement$1(org.msgpack.template.builder.beans.Statement, java.lang.reflect.Method, java.util.Iterator);
  public java.lang.Object run();
}
Compiled from "Statement.java"
class org.msgpack.template.builder.beans.Statement$MethodComparator implements java.util.Comparator<java.lang.reflect.Method> {
  static int INFINITY;
  public org.msgpack.template.builder.beans.Statement$MethodComparator(java.lang.String, java.lang.Class<?>[]);
  public int compare(java.lang.reflect.Method, java.lang.reflect.Method);
  public int compare(java.lang.Object, java.lang.Object);
  static {};
}
Compiled from "XMLDecoder.java"
public class org.msgpack.template.builder.beans.XMLDecoder {
  public org.msgpack.template.builder.beans.XMLDecoder(java.io.InputStream);
  public org.msgpack.template.builder.beans.XMLDecoder(java.io.InputStream, java.lang.Object);
  public org.msgpack.template.builder.beans.XMLDecoder(java.io.InputStream, java.lang.Object, org.msgpack.template.builder.beans.ExceptionListener);
  public org.msgpack.template.builder.beans.XMLDecoder(java.io.InputStream, java.lang.Object, org.msgpack.template.builder.beans.ExceptionListener, java.lang.ClassLoader);
  public void close();
  public org.msgpack.template.builder.beans.ExceptionListener getExceptionListener();
  public java.lang.Object getOwner();
  public java.lang.Object readObject();
  public void setExceptionListener(org.msgpack.template.builder.beans.ExceptionListener);
  public void setOwner(java.lang.Object);
  static java.util.Stack access$000(org.msgpack.template.builder.beans.XMLDecoder);
  static org.msgpack.template.builder.beans.ExceptionListener access$100(org.msgpack.template.builder.beans.XMLDecoder);
  static java.lang.Object access$300(org.msgpack.template.builder.beans.XMLDecoder);
  static java.lang.ClassLoader access$400(org.msgpack.template.builder.beans.XMLDecoder);
}
Compiled from "XMLDecoder.java"
class org.msgpack.template.builder.beans.XMLDecoder$1 {
}
Compiled from "XMLDecoder.java"
class org.msgpack.template.builder.beans.XMLDecoder$DefaultExceptionListener implements org.msgpack.template.builder.beans.ExceptionListener {
  public void exceptionThrown(java.lang.Exception);
  org.msgpack.template.builder.beans.XMLDecoder$DefaultExceptionListener(org.msgpack.template.builder.beans.XMLDecoder$1);
}
Compiled from "XMLDecoder.java"
class org.msgpack.template.builder.beans.XMLDecoder$Elem {
  java.lang.String id;
  java.lang.String idref;
  boolean isExecuted;
  boolean isExpression;
  boolean isBasicType;
  boolean isClosed;
  java.lang.Object target;
  java.lang.String methodName;
  boolean fromProperty;
  boolean fromIndex;
  boolean fromField;
  boolean fromOwner;
  org.xml.sax.Attributes attributes;
  java.lang.Object result;
  org.msgpack.template.builder.beans.XMLDecoder$Elem(org.msgpack.template.builder.beans.XMLDecoder$1);
}
Compiled from "XMLDecoder.java"
class org.msgpack.template.builder.beans.XMLDecoder$SAXHandler extends org.xml.sax.helpers.DefaultHandler {
  boolean inJavaElem;
  java.util.HashMap<java.lang.String, java.lang.Object> idObjMap;
  final org.msgpack.template.builder.beans.XMLDecoder this$0;
  public void characters(char[], int, int) throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException;
  public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException;
  public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException;
  public void warning(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException;
  org.msgpack.template.builder.beans.XMLDecoder$SAXHandler(org.msgpack.template.builder.beans.XMLDecoder, org.msgpack.template.builder.beans.XMLDecoder$1);
}
Compiled from "AbstractArrayValue.java"
abstract class org.msgpack.type.AbstractArrayValue extends java.util.AbstractList<org.msgpack.type.Value> implements org.msgpack.type.ArrayValue {
  org.msgpack.type.AbstractArrayValue();
  public org.msgpack.type.ValueType getType();
  public boolean isArrayValue();
  public org.msgpack.type.ArrayValue asArrayValue();
  public boolean isNilValue();
  public boolean isBooleanValue();
  public boolean isIntegerValue();
  public boolean isFloatValue();
  public boolean isMapValue();
  public boolean isRawValue();
  public org.msgpack.type.NilValue asNilValue();
  public org.msgpack.type.BooleanValue asBooleanValue();
  public org.msgpack.type.IntegerValue asIntegerValue();
  public org.msgpack.type.FloatValue asFloatValue();
  public org.msgpack.type.MapValue asMapValue();
  public org.msgpack.type.RawValue asRawValue();
}
Compiled from "AbstractBooleanValue.java"
abstract class org.msgpack.type.AbstractBooleanValue extends org.msgpack.type.AbstractValue implements org.msgpack.type.BooleanValue {
  org.msgpack.type.AbstractBooleanValue();
  public org.msgpack.type.ValueType getType();
  public boolean isBooleanValue();
  public boolean isTrue();
  public boolean isFalse();
  public org.msgpack.type.BooleanValue asBooleanValue();
}
Compiled from "AbstractMapValue.java"
abstract class org.msgpack.type.AbstractMapValue extends java.util.AbstractMap<org.msgpack.type.Value, org.msgpack.type.Value> implements org.msgpack.type.MapValue {
  org.msgpack.type.AbstractMapValue();
  public org.msgpack.type.ValueType getType();
  public boolean isMapValue();
  public org.msgpack.type.MapValue asMapValue();
  public boolean isNilValue();
  public boolean isBooleanValue();
  public boolean isIntegerValue();
  public boolean isFloatValue();
  public boolean isArrayValue();
  public boolean isRawValue();
  public org.msgpack.type.NilValue asNilValue();
  public org.msgpack.type.BooleanValue asBooleanValue();
  public org.msgpack.type.IntegerValue asIntegerValue();
  public org.msgpack.type.FloatValue asFloatValue();
  public org.msgpack.type.ArrayValue asArrayValue();
  public org.msgpack.type.RawValue asRawValue();
}
Compiled from "AbstractRawValue.java"
abstract class org.msgpack.type.AbstractRawValue extends org.msgpack.type.AbstractValue implements org.msgpack.type.RawValue {
  static final java.lang.String UTF8;
  org.msgpack.type.AbstractRawValue();
  public org.msgpack.type.ValueType getType();
  public boolean isRawValue();
  public org.msgpack.type.RawValue asRawValue();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
  static {};
}
Compiled from "AbstractValue.java"
abstract class org.msgpack.type.AbstractValue implements org.msgpack.type.Value {
  org.msgpack.type.AbstractValue();
  public boolean isNilValue();
  public boolean isBooleanValue();
  public boolean isIntegerValue();
  public boolean isFloatValue();
  public boolean isArrayValue();
  public boolean isMapValue();
  public boolean isRawValue();
  public org.msgpack.type.NilValue asNilValue();
  public org.msgpack.type.BooleanValue asBooleanValue();
  public org.msgpack.type.IntegerValue asIntegerValue();
  public org.msgpack.type.FloatValue asFloatValue();
  public org.msgpack.type.ArrayValue asArrayValue();
  public org.msgpack.type.MapValue asMapValue();
  public org.msgpack.type.RawValue asRawValue();
}
Compiled from "ArrayValue.java"
public interface org.msgpack.type.ArrayValue extends org.msgpack.type.Value, java.util.List<org.msgpack.type.Value> {
  public abstract org.msgpack.type.Value[] getElementArray();
}
Compiled from "ArrayValueImpl.java"
class org.msgpack.type.ArrayValueImpl extends org.msgpack.type.AbstractArrayValue {
  public static org.msgpack.type.ArrayValue getEmptyInstance();
  public org.msgpack.type.Value[] getElementArray();
  org.msgpack.type.ArrayValueImpl(org.msgpack.type.Value[], boolean);
  public int size();
  public boolean isEmpty();
  public org.msgpack.type.Value get(int);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
  public java.lang.Object get(int);
  static {};
}
Compiled from "BigIntegerValueImpl.java"
class org.msgpack.type.BigIntegerValueImpl extends org.msgpack.type.IntegerValue {
  org.msgpack.type.BigIntegerValueImpl(java.math.BigInteger);
  public byte getByte();
  public short getShort();
  public int getInt();
  public long getLong();
  public java.math.BigInteger getBigInteger();
  public byte byteValue();
  public short shortValue();
  public int intValue();
  public long longValue();
  public java.math.BigInteger bigIntegerValue();
  public float floatValue();
  public double doubleValue();
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
  static {};
}
Compiled from "BooleanValue.java"
public interface org.msgpack.type.BooleanValue extends org.msgpack.type.Value {
  public abstract boolean getBoolean();
}
Compiled from "ByteArrayRawValueImpl.java"
class org.msgpack.type.ByteArrayRawValueImpl extends org.msgpack.type.AbstractRawValue {
  public static org.msgpack.type.RawValue getEmptyInstance();
  org.msgpack.type.ByteArrayRawValueImpl(byte[], boolean);
  org.msgpack.type.ByteArrayRawValueImpl(byte[], int, int);
  public byte[] getByteArray();
  public java.lang.String getString();
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  static {};
}
Compiled from "ByteArrayRawValueImpl.java"
final class org.msgpack.type.ByteArrayRawValueImpl$1 extends java.lang.ThreadLocal<java.nio.charset.CharsetDecoder> {
  org.msgpack.type.ByteArrayRawValueImpl$1();
  protected java.nio.charset.CharsetDecoder initialValue();
  protected java.lang.Object initialValue();
}
Compiled from "DoubleValueImpl.java"
class org.msgpack.type.DoubleValueImpl extends org.msgpack.type.FloatValue {
  org.msgpack.type.DoubleValueImpl(double);
  public float getFloat();
  public double getDouble();
  public byte byteValue();
  public short shortValue();
  public int intValue();
  public long longValue();
  public java.math.BigInteger bigIntegerValue();
  public float floatValue();
  public double doubleValue();
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
}
Compiled from "FalseValueImpl.java"
class org.msgpack.type.FalseValueImpl extends org.msgpack.type.AbstractBooleanValue {
  static org.msgpack.type.FalseValueImpl getInstance();
  public boolean getBoolean();
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
  static {};
}
Compiled from "FloatValue.java"
public abstract class org.msgpack.type.FloatValue extends org.msgpack.type.NumberValue {
  public org.msgpack.type.FloatValue();
  public org.msgpack.type.ValueType getType();
  public boolean isFloatValue();
  public org.msgpack.type.FloatValue asFloatValue();
  public abstract float getFloat();
  public abstract double getDouble();
}
Compiled from "FloatValueImpl.java"
class org.msgpack.type.FloatValueImpl extends org.msgpack.type.FloatValue {
  org.msgpack.type.FloatValueImpl(float);
  public float getFloat();
  public double getDouble();
  public byte byteValue();
  public short shortValue();
  public int intValue();
  public long longValue();
  public java.math.BigInteger bigIntegerValue();
  public float floatValue();
  public double doubleValue();
  public boolean equals(java.lang.Object);
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
}
Compiled from "IntValueImpl.java"
class org.msgpack.type.IntValueImpl extends org.msgpack.type.IntegerValue {
  org.msgpack.type.IntValueImpl(int);
  public byte getByte();
  public short getShort();
  public int getInt();
  public long getLong();
  public java.math.BigInteger getBigInteger();
  public byte byteValue();
  public short shortValue();
  public int intValue();
  public long longValue();
  public java.math.BigInteger bigIntegerValue();
  public float floatValue();
  public double doubleValue();
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
  static {};
}
Compiled from "IntegerValue.java"
public abstract class org.msgpack.type.IntegerValue extends org.msgpack.type.NumberValue {
  public org.msgpack.type.IntegerValue();
  public org.msgpack.type.ValueType getType();
  public boolean isIntegerValue();
  public org.msgpack.type.IntegerValue asIntegerValue();
  public abstract byte getByte();
  public abstract short getShort();
  public abstract int getInt();
  public abstract long getLong();
  public java.math.BigInteger getBigInteger();
}
Compiled from "LongValueImpl.java"
class org.msgpack.type.LongValueImpl extends org.msgpack.type.IntegerValue {
  org.msgpack.type.LongValueImpl(long);
  public byte getByte();
  public short getShort();
  public int getInt();
  public long getLong();
  public java.math.BigInteger getBigInteger();
  public byte byteValue();
  public short shortValue();
  public int intValue();
  public long longValue();
  public java.math.BigInteger bigIntegerValue();
  public float floatValue();
  public double doubleValue();
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
  static {};
}
Compiled from "MapValue.java"
public interface org.msgpack.type.MapValue extends org.msgpack.type.Value, java.util.Map<org.msgpack.type.Value, org.msgpack.type.Value> {
  public abstract org.msgpack.type.Value[] getKeyValueArray();
}
Compiled from "NilValue.java"
public class org.msgpack.type.NilValue extends org.msgpack.type.AbstractValue {
  static org.msgpack.type.NilValue getInstance();
  public org.msgpack.type.ValueType getType();
  public boolean isNilValue();
  public org.msgpack.type.NilValue asNilValue();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public org.msgpack.type.RawValue asRawValue();
  public org.msgpack.type.MapValue asMapValue();
  public org.msgpack.type.ArrayValue asArrayValue();
  public org.msgpack.type.FloatValue asFloatValue();
  public org.msgpack.type.IntegerValue asIntegerValue();
  public org.msgpack.type.BooleanValue asBooleanValue();
  public boolean isRawValue();
  public boolean isMapValue();
  public boolean isArrayValue();
  public boolean isFloatValue();
  public boolean isIntegerValue();
  public boolean isBooleanValue();
  static {};
}
Compiled from "NumberValue.java"
public abstract class org.msgpack.type.NumberValue extends java.lang.Number implements org.msgpack.type.Value {
  public org.msgpack.type.NumberValue();
  public boolean isNilValue();
  public boolean isBooleanValue();
  public boolean isIntegerValue();
  public boolean isFloatValue();
  public boolean isArrayValue();
  public boolean isMapValue();
  public boolean isRawValue();
  public org.msgpack.type.NilValue asNilValue();
  public org.msgpack.type.BooleanValue asBooleanValue();
  public org.msgpack.type.IntegerValue asIntegerValue();
  public org.msgpack.type.FloatValue asFloatValue();
  public org.msgpack.type.ArrayValue asArrayValue();
  public org.msgpack.type.MapValue asMapValue();
  public org.msgpack.type.RawValue asRawValue();
  public abstract java.math.BigInteger bigIntegerValue();
}
Compiled from "RawValue.java"
public interface org.msgpack.type.RawValue extends org.msgpack.type.Value {
  public abstract byte[] getByteArray();
  public abstract java.lang.String getString();
}
Compiled from "SequentialMapValueImpl.java"
class org.msgpack.type.SequentialMapValueImpl extends org.msgpack.type.AbstractMapValue {
  public static org.msgpack.type.MapValue getEmptyInstance();
  public org.msgpack.type.Value[] getKeyValueArray();
  org.msgpack.type.SequentialMapValueImpl(org.msgpack.type.Value[], boolean);
  public org.msgpack.type.Value get(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<org.msgpack.type.Value, org.msgpack.type.Value>> entrySet();
  public java.util.Set<org.msgpack.type.Value> keySet();
  public java.util.Collection<org.msgpack.type.Value> values();
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
  public java.lang.Object get(java.lang.Object);
  static {};
}
Compiled from "SequentialMapValueImpl.java"
class org.msgpack.type.SequentialMapValueImpl$EntrySet extends java.util.AbstractSet<java.util.Map$Entry<org.msgpack.type.Value, org.msgpack.type.Value>> {
  org.msgpack.type.SequentialMapValueImpl$EntrySet(org.msgpack.type.Value[]);
  public int size();
  public java.util.Iterator<java.util.Map$Entry<org.msgpack.type.Value, org.msgpack.type.Value>> iterator();
}
Compiled from "SequentialMapValueImpl.java"
class org.msgpack.type.SequentialMapValueImpl$EntrySetIterator implements java.util.Iterator<java.util.Map$Entry<org.msgpack.type.Value, org.msgpack.type.Value>> {
  org.msgpack.type.SequentialMapValueImpl$EntrySetIterator(org.msgpack.type.Value[]);
  public boolean hasNext();
  public java.util.Map$Entry<org.msgpack.type.Value, org.msgpack.type.Value> next();
  public void remove();
  public java.lang.Object next();
  static {};
}
Compiled from "SequentialMapValueImpl.java"
class org.msgpack.type.SequentialMapValueImpl$KeySet extends java.util.AbstractSet<org.msgpack.type.Value> {
  org.msgpack.type.SequentialMapValueImpl$KeySet(org.msgpack.type.Value[]);
  public int size();
  public java.util.Iterator<org.msgpack.type.Value> iterator();
}
Compiled from "SequentialMapValueImpl.java"
class org.msgpack.type.SequentialMapValueImpl$ValueCollection extends java.util.AbstractCollection<org.msgpack.type.Value> {
  org.msgpack.type.SequentialMapValueImpl$ValueCollection(org.msgpack.type.Value[]);
  public int size();
  public java.util.Iterator<org.msgpack.type.Value> iterator();
}
Compiled from "SequentialMapValueImpl.java"
class org.msgpack.type.SequentialMapValueImpl$ValueIterator implements java.util.Iterator<org.msgpack.type.Value> {
  org.msgpack.type.SequentialMapValueImpl$ValueIterator(org.msgpack.type.Value[], int);
  public boolean hasNext();
  public org.msgpack.type.Value next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "StringRawValueImpl.java"
class org.msgpack.type.StringRawValueImpl extends org.msgpack.type.AbstractRawValue {
  org.msgpack.type.StringRawValueImpl(java.lang.String);
  public byte[] getByteArray();
  public java.lang.String getString();
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
}
Compiled from "TrueValueImpl.java"
class org.msgpack.type.TrueValueImpl extends org.msgpack.type.AbstractBooleanValue {
  static org.msgpack.type.TrueValueImpl getInstance();
  public boolean getBoolean();
  public void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.StringBuilder toString(java.lang.StringBuilder);
  static {};
}
Compiled from "Value.java"
public interface org.msgpack.type.Value {
  public abstract org.msgpack.type.ValueType getType();
  public abstract boolean isNilValue();
  public abstract boolean isBooleanValue();
  public abstract boolean isIntegerValue();
  public abstract boolean isFloatValue();
  public abstract boolean isArrayValue();
  public abstract boolean isMapValue();
  public abstract boolean isRawValue();
  public abstract org.msgpack.type.NilValue asNilValue();
  public abstract org.msgpack.type.BooleanValue asBooleanValue();
  public abstract org.msgpack.type.IntegerValue asIntegerValue();
  public abstract org.msgpack.type.FloatValue asFloatValue();
  public abstract org.msgpack.type.ArrayValue asArrayValue();
  public abstract org.msgpack.type.MapValue asMapValue();
  public abstract org.msgpack.type.RawValue asRawValue();
  public abstract void writeTo(org.msgpack.packer.Packer) throws java.io.IOException;
  public abstract java.lang.StringBuilder toString(java.lang.StringBuilder);
}
Compiled from "ValueFactory.java"
public final class org.msgpack.type.ValueFactory {
  public static org.msgpack.type.NilValue createNilValue();
  public static org.msgpack.type.BooleanValue createBooleanValue(boolean);
  public static org.msgpack.type.IntegerValue createIntegerValue(byte);
  public static org.msgpack.type.IntegerValue createIntegerValue(short);
  public static org.msgpack.type.IntegerValue createIntegerValue(int);
  public static org.msgpack.type.IntegerValue createIntegerValue(long);
  public static org.msgpack.type.IntegerValue createIntegerValue(java.math.BigInteger);
  public static org.msgpack.type.FloatValue createFloatValue(float);
  public static org.msgpack.type.FloatValue createFloatValue(double);
  public static org.msgpack.type.RawValue createRawValue();
  public static org.msgpack.type.RawValue createRawValue(byte[]);
  public static org.msgpack.type.RawValue createRawValue(byte[], boolean);
  public static org.msgpack.type.RawValue createRawValue(byte[], int, int);
  public static org.msgpack.type.RawValue createRawValue(java.lang.String);
  public static org.msgpack.type.RawValue createRawValue(java.nio.ByteBuffer);
  public static org.msgpack.type.ArrayValue createArrayValue();
  public static org.msgpack.type.ArrayValue createArrayValue(org.msgpack.type.Value[]);
  public static org.msgpack.type.ArrayValue createArrayValue(org.msgpack.type.Value[], boolean);
  public static org.msgpack.type.MapValue createMapValue();
  public static org.msgpack.type.MapValue createMapValue(org.msgpack.type.Value[]);
  public static org.msgpack.type.MapValue createMapValue(org.msgpack.type.Value[], boolean);
}
Compiled from "ValueType.java"
public final class org.msgpack.type.ValueType extends java.lang.Enum<org.msgpack.type.ValueType> {
  public static final org.msgpack.type.ValueType NIL;
  public static final org.msgpack.type.ValueType BOOLEAN;
  public static final org.msgpack.type.ValueType INTEGER;
  public static final org.msgpack.type.ValueType FLOAT;
  public static final org.msgpack.type.ValueType ARRAY;
  public static final org.msgpack.type.ValueType MAP;
  public static final org.msgpack.type.ValueType RAW;
  public static org.msgpack.type.ValueType[] values();
  public static org.msgpack.type.ValueType valueOf(java.lang.String);
  static {};
}
Compiled from "AbstractUnpacker.java"
public abstract class org.msgpack.unpacker.AbstractUnpacker implements org.msgpack.unpacker.Unpacker {
  protected org.msgpack.MessagePack msgpack;
  protected int rawSizeLimit;
  protected int arraySizeLimit;
  protected int mapSizeLimit;
  protected org.msgpack.unpacker.AbstractUnpacker(org.msgpack.MessagePack);
  public java.nio.ByteBuffer readByteBuffer() throws java.io.IOException;
  public void readArrayEnd() throws java.io.IOException;
  public void readMapEnd() throws java.io.IOException;
  public org.msgpack.unpacker.UnpackerIterator iterator();
  protected abstract void readValue(org.msgpack.packer.Unconverter) throws java.io.IOException;
  public org.msgpack.type.Value readValue() throws java.io.IOException;
  protected abstract boolean tryReadNil() throws java.io.IOException;
  public <T> T read(java.lang.Class<T>) throws java.io.IOException;
  public <T> T read(T) throws java.io.IOException;
  public <T> T read(org.msgpack.template.Template<T>) throws java.io.IOException;
  public <T> T read(T, org.msgpack.template.Template<T>) throws java.io.IOException;
  public int getReadByteCount();
  public void resetReadByteCount();
  public void setRawSizeLimit(int);
  public void setArraySizeLimit(int);
  public void setMapSizeLimit(int);
  public java.util.Iterator iterator();
}
Compiled from "Accept.java"
abstract class org.msgpack.unpacker.Accept implements org.msgpack.io.BufferReferer {
  org.msgpack.unpacker.Accept(java.lang.String);
  void acceptBoolean(boolean) throws java.io.IOException;
  void acceptInteger(byte) throws java.io.IOException;
  void acceptInteger(short) throws java.io.IOException;
  void acceptInteger(int) throws java.io.IOException;
  void acceptInteger(long) throws java.io.IOException;
  void acceptUnsignedInteger(byte) throws java.io.IOException;
  void acceptUnsignedInteger(short) throws java.io.IOException;
  void acceptUnsignedInteger(int) throws java.io.IOException;
  void acceptUnsignedInteger(long) throws java.io.IOException;
  void acceptRaw(byte[]) throws java.io.IOException;
  void acceptEmptyRaw() throws java.io.IOException;
  void acceptArray(int) throws java.io.IOException;
  void acceptMap(int) throws java.io.IOException;
  void acceptNil() throws java.io.IOException;
  void acceptFloat(float) throws java.io.IOException;
  void acceptDouble(double) throws java.io.IOException;
  public void refer(java.nio.ByteBuffer, boolean) throws java.io.IOException;
}
Compiled from "ArrayAccept.java"
final class org.msgpack.unpacker.ArrayAccept extends org.msgpack.unpacker.Accept {
  int size;
  org.msgpack.unpacker.ArrayAccept();
  void acceptArray(int);
}
Compiled from "BigIntegerAccept.java"
final class org.msgpack.unpacker.BigIntegerAccept extends org.msgpack.unpacker.Accept {
  java.math.BigInteger value;
  org.msgpack.unpacker.BigIntegerAccept();
  void acceptInteger(byte);
  void acceptInteger(short);
  void acceptInteger(int);
  void acceptInteger(long);
  void acceptUnsignedInteger(byte);
  void acceptUnsignedInteger(short);
  void acceptUnsignedInteger(int);
  void acceptUnsignedInteger(long);
}
Compiled from "BufferUnpacker.java"
public interface org.msgpack.unpacker.BufferUnpacker extends org.msgpack.unpacker.Unpacker {
  public abstract org.msgpack.unpacker.BufferUnpacker wrap(byte[]);
  public abstract org.msgpack.unpacker.BufferUnpacker wrap(byte[], int, int);
  public abstract org.msgpack.unpacker.BufferUnpacker wrap(java.nio.ByteBuffer);
  public abstract org.msgpack.unpacker.BufferUnpacker feed(byte[]);
  public abstract org.msgpack.unpacker.BufferUnpacker feed(byte[], boolean);
  public abstract org.msgpack.unpacker.BufferUnpacker feed(byte[], int, int);
  public abstract org.msgpack.unpacker.BufferUnpacker feed(byte[], int, int, boolean);
  public abstract org.msgpack.unpacker.BufferUnpacker feed(java.nio.ByteBuffer);
  public abstract org.msgpack.unpacker.BufferUnpacker feed(java.nio.ByteBuffer, boolean);
  public abstract int getBufferSize();
  public abstract void copyReferencedBuffer();
  public abstract void clear();
}
Compiled from "ByteArrayAccept.java"
final class org.msgpack.unpacker.ByteArrayAccept extends org.msgpack.unpacker.Accept {
  byte[] value;
  org.msgpack.unpacker.ByteArrayAccept();
  void acceptRaw(byte[]);
  void acceptEmptyRaw();
  public void refer(java.nio.ByteBuffer, boolean) throws java.io.IOException;
}
Compiled from "Converter.java"
public class org.msgpack.unpacker.Converter extends org.msgpack.unpacker.AbstractUnpacker {
  protected org.msgpack.type.Value value;
  public org.msgpack.unpacker.Converter(org.msgpack.type.Value);
  public org.msgpack.unpacker.Converter(org.msgpack.MessagePack, org.msgpack.type.Value);
  protected org.msgpack.type.Value nextValue() throws java.io.IOException;
  public boolean tryReadNil() throws java.io.IOException;
  public boolean trySkipNil() throws java.io.IOException;
  public void readNil() throws java.io.IOException;
  public boolean readBoolean() throws java.io.IOException;
  public byte readByte() throws java.io.IOException;
  public short readShort() throws java.io.IOException;
  public int readInt() throws java.io.IOException;
  public long readLong() throws java.io.IOException;
  public java.math.BigInteger readBigInteger() throws java.io.IOException;
  public float readFloat() throws java.io.IOException;
  public double readDouble() throws java.io.IOException;
  public byte[] readByteArray() throws java.io.IOException;
  public java.lang.String readString() throws java.io.IOException;
  public int readArrayBegin() throws java.io.IOException;
  public void readArrayEnd(boolean) throws java.io.IOException;
  public int readMapBegin() throws java.io.IOException;
  public void readMapEnd(boolean) throws java.io.IOException;
  public org.msgpack.type.Value readValue() throws java.io.IOException;
  protected void readValue(org.msgpack.packer.Unconverter) throws java.io.IOException;
  public void skip() throws java.io.IOException;
  public org.msgpack.type.ValueType getNextType() throws java.io.IOException;
  public void reset();
  public void close() throws java.io.IOException;
  public int getReadByteCount();
  public void setRawSizeLimit(int);
  public void setArraySizeLimit(int);
  public void setMapSizeLimit(int);
}
Compiled from "DoubleAccept.java"
final class org.msgpack.unpacker.DoubleAccept extends org.msgpack.unpacker.Accept {
  double value;
  org.msgpack.unpacker.DoubleAccept();
  void acceptFloat(float);
  void acceptDouble(double);
}
Compiled from "IntAccept.java"
final class org.msgpack.unpacker.IntAccept extends org.msgpack.unpacker.Accept {
  int value;
  org.msgpack.unpacker.IntAccept();
  void acceptInteger(byte);
  void acceptInteger(short);
  void acceptInteger(int);
  void acceptInteger(long);
  void acceptUnsignedInteger(byte);
  void acceptUnsignedInteger(short);
  void acceptUnsignedInteger(int);
  void acceptUnsignedInteger(long);
}
Compiled from "LongAccept.java"
final class org.msgpack.unpacker.LongAccept extends org.msgpack.unpacker.Accept {
  long value;
  org.msgpack.unpacker.LongAccept();
  void acceptInteger(byte);
  void acceptInteger(short);
  void acceptInteger(int);
  void acceptInteger(long);
  void acceptUnsignedInteger(byte);
  void acceptUnsignedInteger(short);
  void acceptUnsignedInteger(int);
  void acceptUnsignedInteger(long);
}
Compiled from "MapAccept.java"
final class org.msgpack.unpacker.MapAccept extends org.msgpack.unpacker.Accept {
  int size;
  org.msgpack.unpacker.MapAccept();
  void acceptMap(int);
}
Compiled from "MessagePackBufferUnpacker.java"
public class org.msgpack.unpacker.MessagePackBufferUnpacker extends org.msgpack.unpacker.MessagePackUnpacker implements org.msgpack.unpacker.BufferUnpacker {
  public org.msgpack.unpacker.MessagePackBufferUnpacker(org.msgpack.MessagePack);
  public org.msgpack.unpacker.MessagePackBufferUnpacker(org.msgpack.MessagePack, int);
  public org.msgpack.unpacker.MessagePackBufferUnpacker wrap(byte[]);
  public org.msgpack.unpacker.MessagePackBufferUnpacker wrap(byte[], int, int);
  public org.msgpack.unpacker.MessagePackBufferUnpacker wrap(java.nio.ByteBuffer);
  public org.msgpack.unpacker.MessagePackBufferUnpacker feed(byte[]);
  public org.msgpack.unpacker.MessagePackBufferUnpacker feed(byte[], boolean);
  public org.msgpack.unpacker.MessagePackBufferUnpacker feed(byte[], int, int);
  public org.msgpack.unpacker.MessagePackBufferUnpacker feed(byte[], int, int, boolean);
  public org.msgpack.unpacker.MessagePackBufferUnpacker feed(java.nio.ByteBuffer);
  public org.msgpack.unpacker.MessagePackBufferUnpacker feed(java.nio.ByteBuffer, boolean);
  public int getBufferSize();
  public void copyReferencedBuffer();
  public void clear();
  public org.msgpack.unpacker.BufferUnpacker feed(java.nio.ByteBuffer, boolean);
  public org.msgpack.unpacker.BufferUnpacker feed(java.nio.ByteBuffer);
  public org.msgpack.unpacker.BufferUnpacker feed(byte[], int, int, boolean);
  public org.msgpack.unpacker.BufferUnpacker feed(byte[], int, int);
  public org.msgpack.unpacker.BufferUnpacker feed(byte[], boolean);
  public org.msgpack.unpacker.BufferUnpacker feed(byte[]);
  public org.msgpack.unpacker.BufferUnpacker wrap(java.nio.ByteBuffer);
  public org.msgpack.unpacker.BufferUnpacker wrap(byte[], int, int);
  public org.msgpack.unpacker.BufferUnpacker wrap(byte[]);
}
Compiled from "MessagePackUnpacker.java"
public class org.msgpack.unpacker.MessagePackUnpacker extends org.msgpack.unpacker.AbstractUnpacker {
  protected final org.msgpack.io.Input in;
  public org.msgpack.unpacker.MessagePackUnpacker(org.msgpack.MessagePack, java.io.InputStream);
  protected org.msgpack.unpacker.MessagePackUnpacker(org.msgpack.MessagePack, org.msgpack.io.Input);
  final void readOne(org.msgpack.unpacker.Accept) throws java.io.IOException;
  final boolean readOneWithoutStack(org.msgpack.unpacker.Accept) throws java.io.IOException;
  protected boolean tryReadNil() throws java.io.IOException;
  public boolean trySkipNil() throws java.io.IOException;
  public void readNil() throws java.io.IOException;
  public boolean readBoolean() throws java.io.IOException;
  public byte readByte() throws java.io.IOException;
  public short readShort() throws java.io.IOException;
  public int readInt() throws java.io.IOException;
  public long readLong() throws java.io.IOException;
  public java.math.BigInteger readBigInteger() throws java.io.IOException;
  public float readFloat() throws java.io.IOException;
  public double readDouble() throws java.io.IOException;
  public byte[] readByteArray() throws java.io.IOException;
  public java.lang.String readString() throws java.io.IOException;
  public int readArrayBegin() throws java.io.IOException;
  public void readArrayEnd(boolean) throws java.io.IOException;
  public int readMapBegin() throws java.io.IOException;
  public void readMapEnd(boolean) throws java.io.IOException;
  protected void readValue(org.msgpack.packer.Unconverter) throws java.io.IOException;
  public void skip() throws java.io.IOException;
  public org.msgpack.type.ValueType getNextType() throws java.io.IOException;
  public void reset();
  public void close() throws java.io.IOException;
  public int getReadByteCount();
  public void resetReadByteCount();
}
Compiled from "SizeLimitException.java"
public class org.msgpack.unpacker.SizeLimitException extends java.io.IOException {
  public org.msgpack.unpacker.SizeLimitException();
  public org.msgpack.unpacker.SizeLimitException(java.lang.String);
  public org.msgpack.unpacker.SizeLimitException(java.lang.String, java.lang.Throwable);
  public org.msgpack.unpacker.SizeLimitException(java.lang.Throwable);
}
Compiled from "SkipAccept.java"
final class org.msgpack.unpacker.SkipAccept extends org.msgpack.unpacker.Accept {
  org.msgpack.unpacker.SkipAccept();
  void acceptBoolean(boolean);
  void acceptInteger(byte);
  void acceptInteger(short);
  void acceptInteger(int);
  void acceptInteger(long);
  void acceptUnsignedInteger(byte);
  void acceptUnsignedInteger(short);
  void acceptUnsignedInteger(int);
  void acceptUnsignedInteger(long);
  void acceptRaw(byte[]);
  void acceptEmptyRaw();
  public void refer(java.nio.ByteBuffer, boolean) throws java.io.IOException;
  void acceptArray(int);
  void acceptMap(int);
  void acceptNil();
  void acceptFloat(float);
  void acceptDouble(double);
}
Compiled from "StringAccept.java"
final class org.msgpack.unpacker.StringAccept extends org.msgpack.unpacker.Accept {
  java.lang.String value;
  public org.msgpack.unpacker.StringAccept();
  void acceptRaw(byte[]);
  void acceptEmptyRaw();
  public void refer(java.nio.ByteBuffer, boolean) throws java.io.IOException;
}
Compiled from "Unpacker.java"
public interface org.msgpack.unpacker.Unpacker extends java.lang.Iterable<org.msgpack.type.Value>, java.io.Closeable {
  public abstract <T> T read(java.lang.Class<T>) throws java.io.IOException;
  public abstract <T> T read(T) throws java.io.IOException;
  public abstract <T> T read(org.msgpack.template.Template<T>) throws java.io.IOException;
  public abstract <T> T read(T, org.msgpack.template.Template<T>) throws java.io.IOException;
  public abstract void skip() throws java.io.IOException;
  public abstract int readArrayBegin() throws java.io.IOException;
  public abstract void readArrayEnd(boolean) throws java.io.IOException;
  public abstract void readArrayEnd() throws java.io.IOException;
  public abstract int readMapBegin() throws java.io.IOException;
  public abstract void readMapEnd(boolean) throws java.io.IOException;
  public abstract void readMapEnd() throws java.io.IOException;
  public abstract void readNil() throws java.io.IOException;
  public abstract boolean trySkipNil() throws java.io.IOException;
  public abstract boolean readBoolean() throws java.io.IOException;
  public abstract byte readByte() throws java.io.IOException;
  public abstract short readShort() throws java.io.IOException;
  public abstract int readInt() throws java.io.IOException;
  public abstract long readLong() throws java.io.IOException;
  public abstract java.math.BigInteger readBigInteger() throws java.io.IOException;
  public abstract float readFloat() throws java.io.IOException;
  public abstract double readDouble() throws java.io.IOException;
  public abstract byte[] readByteArray() throws java.io.IOException;
  public abstract java.nio.ByteBuffer readByteBuffer() throws java.io.IOException;
  public abstract java.lang.String readString() throws java.io.IOException;
  public abstract org.msgpack.type.Value readValue() throws java.io.IOException;
  public abstract org.msgpack.type.ValueType getNextType() throws java.io.IOException;
  public abstract org.msgpack.unpacker.UnpackerIterator iterator();
  public abstract int getReadByteCount();
  public abstract void resetReadByteCount();
  public abstract void setRawSizeLimit(int);
  public abstract void setArraySizeLimit(int);
  public abstract void setMapSizeLimit(int);
  public java.util.Iterator iterator();
}
Compiled from "UnpackerIterator.java"
public class org.msgpack.unpacker.UnpackerIterator implements java.util.Iterator<org.msgpack.type.Value> {
  public org.msgpack.unpacker.UnpackerIterator(org.msgpack.unpacker.AbstractUnpacker);
  public boolean hasNext();
  public org.msgpack.type.Value next();
  public void remove();
  public java.io.IOException getException();
  public java.lang.Object next();
}
Compiled from "UnpackerStack.java"
public final class org.msgpack.unpacker.UnpackerStack {
  public static final int MAX_STACK_SIZE;
  public org.msgpack.unpacker.UnpackerStack();
  public void pushArray(int);
  public void pushMap(int);
  public void checkCount();
  public void reduceCount();
  public void pop();
  public int getDepth();
  public int getTopCount();
  public boolean topIsArray();
  public boolean topIsMap();
  public void clear();
}
Compiled from "ValueAccept.java"
final class org.msgpack.unpacker.ValueAccept extends org.msgpack.unpacker.Accept {
  org.msgpack.unpacker.ValueAccept();
  void setUnconverter(org.msgpack.packer.Unconverter) throws java.io.IOException;
  void acceptBoolean(boolean) throws java.io.IOException;
  void acceptInteger(byte) throws java.io.IOException;
  void acceptInteger(short) throws java.io.IOException;
  void acceptInteger(int) throws java.io.IOException;
  void acceptInteger(long) throws java.io.IOException;
  void acceptUnsignedInteger(byte) throws java.io.IOException;
  void acceptUnsignedInteger(short) throws java.io.IOException;
  void acceptUnsignedInteger(int) throws java.io.IOException;
  void acceptUnsignedInteger(long) throws java.io.IOException;
  void acceptRaw(byte[]) throws java.io.IOException;
  void acceptEmptyRaw() throws java.io.IOException;
  public void refer(java.nio.ByteBuffer, boolean) throws java.io.IOException;
  void acceptArray(int) throws java.io.IOException;
  void acceptMap(int) throws java.io.IOException;
  void acceptNil() throws java.io.IOException;
  void acceptFloat(float) throws java.io.IOException;
  void acceptDouble(double) throws java.io.IOException;
}
Compiled from "TemplatePrecompiler.java"
public class org.msgpack.util.TemplatePrecompiler {
  public static final java.lang.String DEST;
  public static final java.lang.String DEFAULT_DEST;
  public org.msgpack.util.TemplatePrecompiler();
  public static void saveTemplates(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException;
  public static void saveTemplateClasses(org.msgpack.template.TemplateRegistry, java.lang.Class<?>[]) throws java.io.IOException;
  public static void saveTemplateClass(org.msgpack.template.TemplateRegistry, java.lang.Class<?>) throws java.io.IOException;
  public static boolean deleteTemplateClass(java.lang.Class<?>) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "TemplatePrecompiler.java"
final class org.msgpack.util.TemplatePrecompiler$1 extends java.util.HashSet<javax.tools.JavaFileObject$Kind> {
  org.msgpack.util.TemplatePrecompiler$1();
}
Compiled from "DalvikVmChecker.java"
public final class org.msgpack.util.android.DalvikVmChecker {
  public org.msgpack.util.android.DalvikVmChecker();
  public static boolean isDalvikVm();
  static {};
}
Compiled from "PortedImmutableEntry.java"
public class org.msgpack.util.android.PortedImmutableEntry<K, V> implements java.util.Map$Entry<K, V>, java.io.Serializable {
  public org.msgpack.util.android.PortedImmutableEntry(K, V);
  public org.msgpack.util.android.PortedImmutableEntry(java.util.Map$Entry<? extends K, ? extends V>);
  public K getKey();
  public V getValue();
  public V setValue(V);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "JSON.java"
public class org.msgpack.util.json.JSON extends org.msgpack.MessagePack {
  public org.msgpack.util.json.JSON();
  public org.msgpack.util.json.JSON(org.msgpack.MessagePack);
  public org.msgpack.packer.Packer createPacker(java.io.OutputStream);
  public org.msgpack.packer.BufferPacker createBufferPacker();
  public org.msgpack.packer.BufferPacker createBufferPacker(int);
  public org.msgpack.unpacker.Unpacker createUnpacker(java.io.InputStream);
  public org.msgpack.unpacker.BufferUnpacker createBufferUnpacker();
  public org.msgpack.unpacker.BufferUnpacker createBufferUnpacker(byte[]);
  public org.msgpack.unpacker.BufferUnpacker createBufferUnpacker(byte[], int, int);
  public org.msgpack.unpacker.BufferUnpacker createBufferUnpacker(java.nio.ByteBuffer);
}
Compiled from "JSONBufferPacker.java"
public class org.msgpack.util.json.JSONBufferPacker extends org.msgpack.util.json.JSONPacker implements org.msgpack.packer.BufferPacker {
  public org.msgpack.util.json.JSONBufferPacker();
  public org.msgpack.util.json.JSONBufferPacker(int);
  public org.msgpack.util.json.JSONBufferPacker(org.msgpack.MessagePack);
  public org.msgpack.util.json.JSONBufferPacker(org.msgpack.MessagePack, int);
  public int getBufferSize();
  public byte[] toByteArray();
  public void clear();
}
Compiled from "JSONBufferUnpacker.java"
public class org.msgpack.util.json.JSONBufferUnpacker extends org.msgpack.util.json.JSONUnpacker implements org.msgpack.unpacker.BufferUnpacker {
  public org.msgpack.util.json.JSONBufferUnpacker();
  public org.msgpack.util.json.JSONBufferUnpacker(int);
  public org.msgpack.util.json.JSONBufferUnpacker(org.msgpack.MessagePack);
  public org.msgpack.util.json.JSONBufferUnpacker(org.msgpack.MessagePack, int);
  public org.msgpack.util.json.JSONBufferUnpacker wrap(byte[]);
  public org.msgpack.util.json.JSONBufferUnpacker wrap(byte[], int, int);
  public org.msgpack.util.json.JSONBufferUnpacker wrap(java.nio.ByteBuffer);
  public org.msgpack.util.json.JSONBufferUnpacker feed(byte[]);
  public org.msgpack.util.json.JSONBufferUnpacker feed(byte[], boolean);
  public org.msgpack.util.json.JSONBufferUnpacker feed(byte[], int, int);
  public org.msgpack.util.json.JSONBufferUnpacker feed(byte[], int, int, boolean);
  public org.msgpack.util.json.JSONBufferUnpacker feed(java.nio.ByteBuffer);
  public org.msgpack.util.json.JSONBufferUnpacker feed(java.nio.ByteBuffer, boolean);
  public int getBufferSize();
  public void copyReferencedBuffer();
  public void clear();
  public org.msgpack.unpacker.BufferUnpacker feed(java.nio.ByteBuffer, boolean);
  public org.msgpack.unpacker.BufferUnpacker feed(java.nio.ByteBuffer);
  public org.msgpack.unpacker.BufferUnpacker feed(byte[], int, int, boolean);
  public org.msgpack.unpacker.BufferUnpacker feed(byte[], int, int);
  public org.msgpack.unpacker.BufferUnpacker feed(byte[], boolean);
  public org.msgpack.unpacker.BufferUnpacker feed(byte[]);
  public org.msgpack.unpacker.BufferUnpacker wrap(java.nio.ByteBuffer);
  public org.msgpack.unpacker.BufferUnpacker wrap(byte[], int, int);
  public org.msgpack.unpacker.BufferUnpacker wrap(byte[]);
}
Compiled from "JSONPacker.java"
public class org.msgpack.util.json.JSONPacker extends org.msgpack.packer.AbstractPacker {
  protected final org.msgpack.io.Output out;
  public org.msgpack.util.json.JSONPacker(java.io.OutputStream);
  public org.msgpack.util.json.JSONPacker(org.msgpack.MessagePack, java.io.OutputStream);
  protected org.msgpack.util.json.JSONPacker(org.msgpack.MessagePack, org.msgpack.io.Output);
  protected void writeBoolean(boolean) throws java.io.IOException;
  protected void writeByte(byte) throws java.io.IOException;
  protected void writeShort(short) throws java.io.IOException;
  protected void writeInt(int) throws java.io.IOException;
  protected void writeLong(long) throws java.io.IOException;
  protected void writeBigInteger(java.math.BigInteger) throws java.io.IOException;
  protected void writeFloat(float) throws java.io.IOException;
  protected void writeDouble(double) throws java.io.IOException;
  protected void writeByteArray(byte[], int, int) throws java.io.IOException;
  protected void writeByteBuffer(java.nio.ByteBuffer) throws java.io.IOException;
  protected void writeString(java.lang.String) throws java.io.IOException;
  public org.msgpack.packer.Packer writeNil() throws java.io.IOException;
  public org.msgpack.packer.Packer writeArrayBegin(int) throws java.io.IOException;
  public org.msgpack.packer.Packer writeArrayEnd(boolean) throws java.io.IOException;
  public org.msgpack.packer.Packer writeMapBegin(int) throws java.io.IOException;
  public org.msgpack.packer.Packer writeMapEnd(boolean) throws java.io.IOException;
  public void flush() throws java.io.IOException;
  public void close() throws java.io.IOException;
  public void reset();
  static {};
}
Compiled from "JSONUnpacker.java"
public class org.msgpack.util.json.JSONUnpacker extends org.msgpack.unpacker.Converter {
  protected java.io.Reader in;
  public org.msgpack.util.json.JSONUnpacker(java.io.InputStream);
  public org.msgpack.util.json.JSONUnpacker(org.msgpack.MessagePack, java.io.InputStream);
  org.msgpack.util.json.JSONUnpacker(org.msgpack.MessagePack, java.io.Reader);
  protected org.msgpack.type.Value nextValue() throws java.io.IOException;
  public int getReadByteCount();
  public void resetReadByteCount();
  public void close() throws java.io.IOException;
}
