Compiled from "Attribute.java"
public abstract class attributes.Attribute<T extends java.lang.Comparable<T>> implements java.io.Serializable {
  protected T value;
  protected attributes.relations.ApproximateEquality<T> equality;
  protected attributes.scales.Scale<T> scale;
  public attributes.scales.Scale<T> getScale();
  public void setScale(attributes.scales.Scale<T>);
  public attributes.Attribute(attributes.relations.ApproximateEquality<T>, attributes.scales.Scale<T>);
  public attributes.Attribute(T, attributes.relations.ApproximateEquality<T>, attributes.scales.Scale<T>);
  public attributes.relations.ApproximateEquality<T> getEquality();
  public void setEquality(attributes.relations.ApproximateEquality<T>);
  public void setValue(T);
  public T getValue();
  public abstract attributes.Attribute<T> getInstance();
  public abstract java.lang.String getName();
  public boolean dominate(T);
  public boolean dominate(attributes.Attribute<T>);
  public boolean isEqual(attributes.Attribute<T>);
  public T getScaledValue();
}
Compiled from "CryptoCalls.java"
public class attributes.CryptoCalls extends attributes.Attribute<java.lang.Integer> {
  public attributes.CryptoCalls(int, attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.CryptoCalls(attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.CryptoCalls getInstance();
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute getInstance();
}
Compiled from "DistanceFraudProbability.java"
public class attributes.DistanceFraudProbability extends attributes.Attribute<java.lang.Double> {
  public attributes.DistanceFraudProbability(double, attributes.relations.ApproximateEquality<java.lang.Double>, attributes.scales.Scale<java.lang.Double>);
  public attributes.DistanceFraudProbability(attributes.relations.ApproximateEquality<java.lang.Double>, attributes.scales.Scale<java.lang.Double>);
  public attributes.DistanceFraudProbability getInstance();
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute getInstance();
}
Compiled from "FinalSlowPhase.java"
public class attributes.FinalSlowPhase extends attributes.Attribute<java.lang.Boolean> {
  public attributes.FinalSlowPhase(boolean, attributes.relations.ApproximateEquality<java.lang.Boolean>, attributes.scales.Scale<java.lang.Boolean>);
  public attributes.FinalSlowPhase(attributes.relations.ApproximateEquality<java.lang.Boolean>, attributes.scales.Scale<java.lang.Boolean>);
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute<java.lang.Boolean> getInstance();
}
Compiled from "LackOfSecurityProof.java"
public class attributes.LackOfSecurityProof extends attributes.Attribute<java.lang.Boolean> {
  public attributes.LackOfSecurityProof(boolean, attributes.relations.ApproximateEquality<java.lang.Boolean>, attributes.scales.Scale<java.lang.Boolean>);
  public attributes.LackOfSecurityProof(attributes.relations.ApproximateEquality<java.lang.Boolean>, attributes.scales.Scale<java.lang.Boolean>);
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute<java.lang.Boolean> getInstance();
}
Compiled from "MafiaFraudProbability.java"
public class attributes.MafiaFraudProbability extends attributes.Attribute<java.lang.Double> {
  public attributes.MafiaFraudProbability(double, attributes.relations.ApproximateEquality<java.lang.Double>, attributes.scales.Scale<java.lang.Double>);
  public attributes.MafiaFraudProbability(attributes.relations.ApproximateEquality<java.lang.Double>, attributes.scales.Scale<java.lang.Double>);
  public attributes.MafiaFraudProbability getInstance();
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute getInstance();
}
Compiled from "Memory.java"
public class attributes.Memory extends attributes.Attribute<java.lang.Long> {
  public attributes.Memory(long, attributes.relations.ApproximateEquality<java.lang.Long>, attributes.scales.Scale<java.lang.Long>);
  public attributes.Memory(attributes.relations.ApproximateEquality<java.lang.Long>, attributes.scales.Scale<java.lang.Long>);
  public attributes.Memory getInstance();
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute getInstance();
}
Compiled from "MultipleBitExchanged.java"
public class attributes.MultipleBitExchanged extends attributes.Attribute<java.lang.Boolean> {
  public attributes.MultipleBitExchanged(boolean, attributes.relations.ApproximateEquality<java.lang.Boolean>, attributes.scales.Scale<java.lang.Boolean>);
  public attributes.MultipleBitExchanged(attributes.relations.ApproximateEquality<java.lang.Boolean>, attributes.scales.Scale<java.lang.Boolean>);
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute<java.lang.Boolean> getInstance();
}
Compiled from "NumberOfRounds.java"
public class attributes.NumberOfRounds extends attributes.Attribute<java.lang.Integer> {
  public attributes.NumberOfRounds(int, attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.NumberOfRounds(attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.NumberOfRounds getInstance();
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute getInstance();
}
Compiled from "SizeOfMessages.java"
public class attributes.SizeOfMessages extends attributes.Attribute<java.lang.Integer> {
  public attributes.SizeOfMessages(int, attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.SizeOfMessages(attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.SizeOfMessages getInstance();
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute getInstance();
}
Compiled from "TerroristFraudProbability.java"
public class attributes.TerroristFraudProbability extends attributes.Attribute<java.lang.Double> {
  public attributes.TerroristFraudProbability(double, attributes.relations.ApproximateEquality<java.lang.Double>, attributes.scales.Scale<java.lang.Double>);
  public attributes.TerroristFraudProbability(attributes.relations.ApproximateEquality<java.lang.Double>, attributes.scales.Scale<java.lang.Double>);
  public attributes.TerroristFraudProbability getInstance();
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute getInstance();
}
Compiled from "TotalBitsExchanged.java"
public class attributes.TotalBitsExchanged extends attributes.Attribute<java.lang.Integer> {
  public attributes.TotalBitsExchanged(int, attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.TotalBitsExchanged(attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.TotalBitsExchanged getInstance();
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute getInstance();
}
Compiled from "YearOfPublication.java"
public class attributes.YearOfPublication extends attributes.Attribute<java.lang.Integer> {
  public attributes.YearOfPublication(int, attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.YearOfPublication(attributes.relations.ApproximateEquality<java.lang.Integer>, attributes.scales.Scale<java.lang.Integer>);
  public attributes.YearOfPublication getInstance();
  public java.lang.String toString();
  public java.lang.String getName();
  public attributes.Attribute getInstance();
}
Compiled from "ApproximateEquality.java"
public interface attributes.relations.ApproximateEquality<T extends java.lang.Comparable<T>> extends java.io.Serializable {
  public abstract boolean equal(T, T);
}
Compiled from "BitsExchangedRelation.java"
public class attributes.relations.BitsExchangedRelation implements attributes.relations.ApproximateEquality<java.lang.Integer> {
  public attributes.relations.BitsExchangedRelation();
  public boolean equal(java.lang.Integer, java.lang.Integer);
  public boolean equal(java.lang.Comparable, java.lang.Comparable);
}
Compiled from "DoubleRelation.java"
public class attributes.relations.DoubleRelation implements attributes.relations.ApproximateEquality<java.lang.Double> {
  public attributes.relations.DoubleRelation();
  public boolean equal(java.lang.Double, java.lang.Double);
  public boolean equal(java.lang.Comparable, java.lang.Comparable);
}
Compiled from "FinalSlowPhaseRelation.java"
public class attributes.relations.FinalSlowPhaseRelation implements attributes.relations.ApproximateEquality<java.lang.Boolean> {
  public attributes.relations.FinalSlowPhaseRelation();
  public boolean equal(java.lang.Boolean, java.lang.Boolean);
  public boolean equal(java.lang.Comparable, java.lang.Comparable);
}
Compiled from "IntegerRelation.java"
public class attributes.relations.IntegerRelation implements attributes.relations.ApproximateEquality<java.lang.Integer> {
  public attributes.relations.IntegerRelation();
  public boolean equal(java.lang.Integer, java.lang.Integer);
  public boolean equal(java.lang.Comparable, java.lang.Comparable);
}
Compiled from "LongRelation.java"
public class attributes.relations.LongRelation implements attributes.relations.ApproximateEquality<java.lang.Long> {
  public attributes.relations.LongRelation();
  public boolean equal(java.lang.Long, java.lang.Long);
  public boolean equal(java.lang.Comparable, java.lang.Comparable);
}
Compiled from "MemoryRelation.java"
public class attributes.relations.MemoryRelation implements attributes.relations.ApproximateEquality<java.lang.Long> {
  public attributes.relations.MemoryRelation();
  public boolean equal(java.lang.Long, java.lang.Long);
  public boolean equal(java.lang.Comparable, java.lang.Comparable);
}
Compiled from "ProbabilityRelation.java"
public class attributes.relations.ProbabilityRelation implements attributes.relations.ApproximateEquality<java.lang.Double> {
  public attributes.relations.ProbabilityRelation();
  public boolean equal(java.lang.Double, java.lang.Double);
  public boolean equal(java.lang.Comparable, java.lang.Comparable);
}
Compiled from "SizeOfMessagesRelation.java"
public class attributes.relations.SizeOfMessagesRelation implements attributes.relations.ApproximateEquality<java.lang.Integer> {
  public attributes.relations.SizeOfMessagesRelation();
  public boolean equal(java.lang.Integer, java.lang.Integer);
  public boolean equal(java.lang.Comparable, java.lang.Comparable);
}
Compiled from "KbitsScale.java"
public class attributes.scales.KbitsScale extends attributes.scales.LinearScale {
  public attributes.scales.KbitsScale();
  public java.lang.String scaleMeaning(java.lang.Long);
  public java.lang.String scaleMeaning(java.lang.Object);
}
Compiled from "LinearScale.java"
public abstract class attributes.scales.LinearScale implements attributes.scales.Scale<java.lang.Long> {
  public attributes.scales.LinearScale(int);
  public java.lang.Long scale(java.lang.Long);
  public java.lang.Long unScale(java.lang.Long);
  public java.lang.Object unScale(java.lang.Object);
  public java.lang.Object scale(java.lang.Object);
}
Compiled from "LogScale.java"
public class attributes.scales.LogScale implements attributes.scales.Scale<java.lang.Double> {
  protected int base;
  public attributes.scales.LogScale(int);
  public java.lang.Double scale(java.lang.Double);
  public static void main(java.lang.String[]);
  public java.lang.Double unScale(java.lang.Double);
  public java.lang.String scaleMeaning(java.lang.Double);
  public java.lang.String scaleMeaning(java.lang.Object);
  public java.lang.Object unScale(java.lang.Object);
  public java.lang.Object scale(java.lang.Object);
}
Compiled from "NoScale.java"
public class attributes.scales.NoScale<T> implements attributes.scales.Scale<T> {
  public attributes.scales.NoScale();
  public T scale(T);
  public T unScale(T);
  public java.lang.String scaleMeaning(T);
}
Compiled from "Scale.java"
public interface attributes.scales.Scale<T> extends java.io.Serializable {
  public abstract T scale(T);
  public abstract T unScale(T);
  public abstract java.lang.String scaleMeaning(T);
}
Compiled from "Comparison.java"
public class mains.Comparison {
  public mains.Comparison();
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException, java.io.IOException, java.lang.ClassNotFoundException;
}
Compiled from "DecisionMaking.java"
public class mains.DecisionMaking {
  public mains.DecisionMaking();
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException, java.io.IOException;
  public static void bestProtocols(double, double, double, int, java.lang.String) throws java.io.FileNotFoundException, java.io.IOException;
}
Compiled from "Evolution.java"
public abstract class methodology.Evolution {
  public methodology.Evolution();
  public static void main(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException;
  public static void createComparisonTable(java.lang.String[]) throws java.io.IOException;
  public static void main2(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException;
  public static protocols.specifications.DBProtocol[][] constraintProtocols(protocols.specifications.DBProtocol[][]);
  public static protocols.specifications.DBProtocol[][] constraintProtocols(protocols.specifications.DBProtocol[][], double);
  public static protocols.specifications.DBProtocol[][] constraintProtocolsToMafiaAndDistance(protocols.specifications.DBProtocol[][], double, double, double, int);
}
Compiled from "History.java"
public class methodology.History {
  public methodology.History();
  public static void main(java.lang.String[]) throws java.io.IOException;
  public static void saveInDiskTheFrontiers(methodology.ParetoFrontier[], java.lang.String) throws java.io.FileNotFoundException, java.io.IOException;
  public static void printHistory(protocols.specifications.DBProtocol[][], attributes.Attribute[], methodology.ParetoFrontier[]);
  public static void printLatexTable(methodology.ParetoFrontier[], int, int, java.lang.String) throws java.io.IOException;
  public static void printInfoOfDomination(protocols.specifications.DBProtocol, protocols.specifications.DBProtocol, attributes.Attribute[]);
  public static void printInfoOfNonDomination(protocols.specifications.DBProtocol, protocols.specifications.DBProtocol, attributes.Attribute[]);
  public static void printInfo(protocols.specifications.DBProtocol, attributes.Attribute[]);
  public static void history(protocols.specifications.DBProtocol[][]);
  public static void basicInfo(protocols.specifications.DBProtocol[], protocols.specifications.DBProtocol[]);
  public static void basicInfo(protocols.specifications.DBProtocol[]);
}
Compiled from "InternalState.java"
public class methodology.InternalState implements java.io.Serializable {
  public int i;
  public utils.Progress progress;
  public java.lang.String identifier;
  public java.util.TreeMap<java.lang.Integer, java.util.List<java.lang.Integer>> indexesToBeRemoved;
  public methodology.InternalState(java.lang.String);
  public void setIndexesToBeRemoved(java.util.TreeMap<java.lang.Integer, java.util.List<java.lang.Integer>>);
  public void setCoordinates(int);
  public void setProgress(utils.Progress);
}
Compiled from "ParetoFrontier.java"
public class methodology.ParetoFrontier implements java.io.Serializable {
  public attributes.Attribute[] getAttributes();
  public void setAttributes(attributes.Attribute[]);
  public methodology.ParetoFrontier(protocols.specifications.DBProtocol[], protocols.specifications.DBProtocol[], attributes.Attribute[], java.util.TreeMap<java.lang.Integer, java.util.List<java.lang.Integer>>);
  public static methodology.ParetoFrontier computeParetoFrontier(protocols.specifications.DBProtocol[], attributes.Attribute[], methodology.InternalState) throws java.io.FileNotFoundException, java.io.IOException;
  public static methodology.ParetoFrontier computeParetoFrontier(protocols.specifications.DBProtocol[], attributes.Attribute[]) throws java.io.FileNotFoundException, java.io.IOException;
  public static methodology.ParetoFrontier[] computeAllParetoFrontiers(protocols.specifications.DBProtocol[][], attributes.Attribute[], methodology.InternalState) throws java.io.FileNotFoundException, java.io.IOException;
  public static methodology.ParetoFrontier[] computeAllParetoFrontiers(protocols.specifications.DBProtocol[][], attributes.Attribute[]) throws java.io.FileNotFoundException, java.io.IOException;
  public protocols.specifications.DBProtocol[] getProtocols();
  public protocols.specifications.DBProtocol[] getFrontier();
  public java.util.TreeMap<java.lang.Integer, java.util.List<java.lang.Integer>> getIndexesToBeRemoved();
  public void setProtocols(protocols.specifications.DBProtocol[]);
  public void setFrontier(protocols.specifications.DBProtocol[]);
  public void setIndexesToBeRemoved(java.util.TreeMap<java.lang.Integer, java.util.List<java.lang.Integer>>);
}
Compiled from "Node.java"
public class protocols.Node extends protocols.specifications.DBProtocol {
  public attributes.Attribute[] mafia;
  public attributes.Attribute[] distance;
  public attributes.Attribute[] terrorist;
  public attributes.Attribute[] bitsExchanged;
  public attributes.Attribute[] sizeOfMessage;
  public attributes.Attribute[] cryptoCalls;
  public attributes.Attribute[] memory;
  public attributes.Attribute[] finalSlowPhase;
  protocols.State state;
  public protocols.Node(protocols.specifications.DBProtocol[]);
  public protocols.specifications.DBProtocol getInstance();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public int getTotalBitsExchangedDuringFastPhase();
  public boolean hasFinalSlowPhase();
  public int getSizeOfTheChannel();
  public final long getMemory();
  public int getCryptoCalls();
  public boolean lackSecurityProof();
  public int getYearOfPublication();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public boolean hasMafiaChildren();
  public boolean hasDistanceChildren();
  public boolean hasTerroristChildren();
  public boolean hasBitsExchangedChildren();
  public boolean hasSizeOfMessageChildren();
  public boolean hasMemoryChildren();
  public boolean hasCryptoCallsChildren();
  public boolean hasFinalSlowPhaseChildren();
  public void setState(protocols.State);
  public protocols.State getState();
}
Compiled from "State.java"
public class protocols.State {
  int mafiaIndex;
  int distanceIndex;
  int terroristIndex;
  int bitsExchangedIndex;
  int sizOfMessageIndex;
  int cryptoCallsIndex;
  int memoryIndex;
  int finalSlowPhaseIndex;
  public protocols.State(int, int, int, int, int, int, int, int);
  public void removeToMafiaChild();
  public void removeToDistanceChild();
  public void removeToTerroristChild();
  public void removeToSizeOfMessagesChild();
  public void removeToCryptoCallsChild();
  public void removeToMemoryChild();
  public void removeToFinalSlowPhaseChild();
  public void moveToMafiaChild();
  public void moveToDistanceChild();
  public void moveToTerroristChild();
  public void moveToBitsExchangedChild();
  public void moveToSizeOfMessagesChild();
  public void moveToCryptoCallsChild();
  public void moveToMemoryChild();
  public void moveToFinalSlowPhaseChild();
  public java.lang.String status();
  public protocols.State clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "BestProtocol.java"
public class protocols.specifications.BestProtocol extends protocols.specifications.DBProtocol {
  public protocols.specifications.BestProtocol();
  public protocols.specifications.DBProtocol getInstance();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public int getSizeOfTheChannel();
  public boolean lackSecurityProof();
  public int getYearOfPublication();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public int getCryptoCalls();
}
Compiled from "BrandsAndChaumProtocol.java"
public class protocols.specifications.BrandsAndChaumProtocol extends protocols.specifications.DBProtocol {
  public protocols.specifications.BrandsAndChaumProtocol(int);
  public protocols.specifications.BrandsAndChaumProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public int getYearOfPublication();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public protocols.specifications.DBProtocol getInstance();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
  public static void main(java.lang.String[]);
}
Compiled from "BussardAndBaggaProtocol.java"
public class protocols.specifications.BussardAndBaggaProtocol extends protocols.specifications.DBProtocol {
  protected int sizeOfCommit;
  public protocols.specifications.BussardAndBaggaProtocol(int);
  public protocols.specifications.BussardAndBaggaProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public protocols.specifications.DBProtocol getInstance();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public int getYearOfPublication();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "DBProtocol.java"
public abstract class protocols.specifications.DBProtocol implements java.io.Serializable {
  public static final java.math.BigDecimal ONE_OVER_TWO;
  public static final java.math.BigDecimal THREE_OVER_FOUR;
  public static final java.math.BigDecimal ONE;
  public static final int SIZE_OF_COMMIT;
  public static final int SIZE_OF_NONCES;
  public static final int SIZE_OF_SECRET;
  public static final int SIZE_OF_MAC;
  public static final int SIZE_OF_HASH;
  public static int MAX_N;
  protected int n;
  protected int sizeOfSecret;
  public protocols.specifications.DBProtocol();
  public static void main(java.lang.String[]);
  public boolean isSameInstanceRegardlessRounds(protocols.specifications.DBProtocol);
  public abstract protocols.specifications.DBProtocol getInstance();
  public abstract java.lang.String getAcronym();
  public abstract java.math.BigDecimal getMafiaFraudProbability();
  public abstract java.math.BigDecimal getDistanceFraudProbability();
  public abstract java.math.BigDecimal getTerroristFraudProbability();
  public abstract boolean hasFinalSlowPhase();
  public final boolean hasMultipleBitExchange();
  public abstract int getSizeOfTheChannel();
  public abstract boolean lackSecurityProof();
  public abstract int getYearOfPublication();
  public int getNumberOfRounds();
  public void setNumberOfRounds(int);
  public long getMemory();
  public abstract int getTotalMsgSizeReceived();
  public abstract int getTotalOutputSizeOfCallsToFunctions();
  public abstract int getNumberOfNoncesGenerated();
  public abstract int getBitsGenerated();
  public int getTotalBitsExchangedDuringFastPhase();
  public abstract protocols.specifications.DBProtocol[] getInstances();
  public abstract java.lang.String getIdentifier();
  public abstract int getCryptoCalls();
  public attributes.Attribute getAttribute(attributes.Attribute);
  public static protocols.specifications.DBProtocol[] loadProtocols();
  public static protocols.specifications.DBProtocol[][] loadProtocolsFairly();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public boolean dominate(protocols.specifications.DBProtocol, attributes.Attribute[]);
  public boolean isEqual(protocols.specifications.DBProtocol, attributes.Attribute[]);
  static {};
}
Compiled from "HanckeAndKuhnProtocol.java"
public class protocols.specifications.HanckeAndKuhnProtocol extends protocols.specifications.DBProtocol {
  public static void main(java.lang.String[]);
  public protocols.specifications.HanckeAndKuhnProtocol(int);
  public protocols.specifications.HanckeAndKuhnProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public protocols.specifications.DBProtocol getInstance();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public int getYearOfPublication();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "KimAndAvoineProtocol.java"
public class protocols.specifications.KimAndAvoineProtocol extends protocols.specifications.DBProtocol {
  public protocols.specifications.KimAndAvoineProtocol(double, int);
  public protocols.specifications.KimAndAvoineProtocol(double);
  public protocols.specifications.KimAndAvoineProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public protocols.specifications.DBProtocol getInstance();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public int getYearOfPublication();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "MADProtocol.java"
public class protocols.specifications.MADProtocol extends protocols.specifications.DBProtocol {
  public protocols.specifications.MADProtocol(int, int, int);
  public protocols.specifications.MADProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public java.math.BigDecimal getDistanceFraudProbability();
  public protocols.specifications.DBProtocol getInstance();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public int getYearOfPublication();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "MunillaAndPeinadoProtocol.java"
public class protocols.specifications.MunillaAndPeinadoProtocol extends protocols.specifications.DBProtocol {
  public protocols.specifications.MunillaAndPeinadoProtocol(double, int);
  public protocols.specifications.MunillaAndPeinadoProtocol(double);
  public protocols.specifications.MunillaAndPeinadoProtocol();
  public java.lang.String getAcronym();
  public int getYearOfPublication();
  public java.math.BigDecimal getMafiaFraudProbability();
  public protocols.specifications.DBProtocol getInstance();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "PoulidorDistanceFraudSimulator.java"
public class protocols.specifications.PoulidorDistanceFraudSimulator {
  public static final int RUNS;
  public static final int DEFAULT_SIZE;
  public protocols.specifications.PoulidorDistanceFraudSimulator();
  public double computeDistanceFraud(int);
  public void setSize(int);
}
Compiled from "PoulidorDistanceFraudSimulator.java"
class protocols.specifications.PoulidorDistanceFraudSimulator$SequenceInGraph implements java.lang.Comparable<protocols.specifications.PoulidorDistanceFraudSimulator$SequenceInGraph> {
  public java.lang.String sequence;
  final protocols.specifications.PoulidorDistanceFraudSimulator this$0;
  public protocols.specifications.PoulidorDistanceFraudSimulator$SequenceInGraph(protocols.specifications.PoulidorDistanceFraudSimulator, java.lang.String);
  public void addFrequencyTo(int, long);
  public protocols.specifications.PoulidorDistanceFraudSimulator$SequenceInGraph(protocols.specifications.PoulidorDistanceFraudSimulator, java.lang.String, int, long);
  public int compareTo(protocols.specifications.PoulidorDistanceFraudSimulator$SequenceInGraph);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
  static long access$000(protocols.specifications.PoulidorDistanceFraudSimulator$SequenceInGraph);
  static java.util.Hashtable access$100(protocols.specifications.PoulidorDistanceFraudSimulator$SequenceInGraph);
}
Compiled from "PoulidorProtocol.java"
public class protocols.specifications.PoulidorProtocol extends protocols.specifications.DBProtocol {
  public protocols.specifications.PoulidorProtocol(int);
  public protocols.specifications.PoulidorProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public int getYearOfPublication();
  public protocols.specifications.DBProtocol getInstance();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public static void generateDataFile() throws java.io.IOException;
  public java.lang.String getMafiaFileNameOfValues();
  public java.lang.String getDistanceFileNameOfValues();
  public static void main(java.lang.String[]);
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "RasmussenAndCapckunProtocol.java"
public class protocols.specifications.RasmussenAndCapckunProtocol extends protocols.specifications.DBProtocol {
  public protocols.specifications.RasmussenAndCapckunProtocol(int, int);
  public protocols.specifications.RasmussenAndCapckunProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public protocols.specifications.DBProtocol getInstance();
  public int getYearOfPublication();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "SKIProtocol.java"
public class protocols.specifications.SKIProtocol extends protocols.specifications.DBProtocol {
  public protocols.specifications.SKIProtocol(int, int, int);
  public protocols.specifications.SKIProtocol(int, int);
  public protocols.specifications.SKIProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public int getYearOfPublication();
  public protocols.specifications.DBProtocol getInstance();
  public boolean hasFinalSlowPhase();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "SwissKnifeProtocol.java"
public class protocols.specifications.SwissKnifeProtocol extends protocols.specifications.DBProtocol {
  public protocols.specifications.SwissKnifeProtocol(int, int);
  public protocols.specifications.SwissKnifeProtocol();
  public java.lang.String getAcronym();
  public int getYearOfPublication();
  public java.math.BigDecimal getMafiaFraudProbability();
  public protocols.specifications.DBProtocol getInstance();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "TMAProtocol.java"
public class protocols.specifications.TMAProtocol extends protocols.specifications.DBProtocol {
  java.math.BigDecimal[] mafiaFraud;
  java.math.BigDecimal[] MGivenDifferent;
  java.math.BigDecimal[] MGivenDifferentGivenM;
  java.math.BigDecimal[] SGivenMGivenDifferent;
  java.math.BigDecimal[] EqualChallengesGivenDifferentGiven;
  java.math.BigDecimal[] distanceFraud;
  java.math.BigDecimal[] FGivenD;
  public protocols.specifications.TMAProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public java.math.BigDecimal getMafiaFraudProbabilityExpensiveMethod();
  public protocols.specifications.DBProtocol getInstance();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal distanceFraud(int, int);
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public int getSizeOfTheChannel();
  public boolean lackSecurityProof();
  public int getYearOfPublication();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public int getCryptoCalls();
  public static void main(java.lang.String[]);
  public java.lang.String getMafiaFileNameOfValues();
  public java.lang.String getDistanceFileNameOfValues();
  public static void generateDataFile() throws java.io.IOException;
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "TreeBasedDistanceFraudSimulator.java"
public class protocols.specifications.TreeBasedDistanceFraudSimulator {
  public static final int RUNS;
  public static final int DEFAULT_SIZE;
  public protocols.specifications.TreeBasedDistanceFraudSimulator();
  public double computeDistanceFraud(int);
  public void setSize(int);
}
Compiled from "TreeBasedDistanceFraudSimulator.java"
class protocols.specifications.TreeBasedDistanceFraudSimulator$SequenceInTree implements java.lang.Comparable<protocols.specifications.TreeBasedDistanceFraudSimulator$SequenceInTree> {
  public java.lang.String sequence;
  public int frequency;
  final protocols.specifications.TreeBasedDistanceFraudSimulator this$0;
  public protocols.specifications.TreeBasedDistanceFraudSimulator$SequenceInTree(protocols.specifications.TreeBasedDistanceFraudSimulator, java.lang.String, int);
  public int compareTo(protocols.specifications.TreeBasedDistanceFraudSimulator$SequenceInTree);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "TreeBasedProtocol.java"
public class protocols.specifications.TreeBasedProtocol extends protocols.specifications.DBProtocol {
  protected int depth;
  public static void main(java.lang.String[]);
  public protocols.specifications.TreeBasedProtocol(int, int);
  public protocols.specifications.TreeBasedProtocol(int);
  public protocols.specifications.TreeBasedProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public protocols.specifications.DBProtocol getInstance();
  public int getYearOfPublication();
  public java.math.BigDecimal computeMyFar(int);
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public int getCryptoCalls();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public boolean lackSecurityProof();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "YKHLProtocol.java"
public class protocols.specifications.YKHLProtocol extends protocols.specifications.DBProtocol {
  protected double pd;
  protected int sizeOfNonce;
  public protocols.specifications.YKHLProtocol(double);
  public protocols.specifications.YKHLProtocol(double, int);
  public protocols.specifications.YKHLProtocol();
  public java.lang.String getAcronym();
  public java.math.BigDecimal getMafiaFraudProbability();
  public protocols.specifications.DBProtocol getInstance();
  public java.math.BigDecimal getDistanceFraudProbability();
  public java.math.BigDecimal getTerroristFraudProbability();
  public boolean hasFinalSlowPhase();
  public boolean lackSecurityProof();
  public int getYearOfPublication();
  public protocols.specifications.DBProtocol[] getInstances();
  public java.lang.String getIdentifier();
  public int getCryptoCalls();
  public int getSizeOfTheChannel();
  public int getTotalMsgSizeReceived();
  public int getTotalOutputSizeOfCallsToFunctions();
  public int getNumberOfNoncesGenerated();
  public int getBitsGenerated();
}
Compiled from "Combinatory.java"
public abstract class utils.Combinatory {
  public utils.Combinatory();
  public static java.math.BigInteger comb(int, int);
  public static java.math.BigInteger fact(int);
  public static java.math.BigInteger fact(int, int);
}
Compiled from "Data.java"
public class utils.Data {
  public utils.Data();
  public static void printData(protocols.specifications.DBProtocol[], attributes.Attribute[], int, int) throws java.io.IOException;
  public static void main(java.lang.String[]) throws java.io.IOException;
  public static void main1(java.lang.String[]) throws java.io.IOException;
  public static void printDataOfBestInstances(protocols.specifications.DBProtocol[][], attributes.Attribute, int, int) throws java.io.IOException;
}
Compiled from "Generator.java"
public class utils.Generator implements java.util.Enumeration<int[]> {
  utils.GeneratorFree left;
  utils.GeneratorFree right;
  int[] lastLeft;
  int[] lastRight;
  int pos;
  int level;
  int[] thresholds;
  boolean emptyGeneratorFinished;
  public utils.Generator(int, int[]);
  public static int maxThreshold(int[]);
  public boolean hasMoreElements();
  public int[] nextElement();
  public static void main(java.lang.String[]);
  public java.lang.Object nextElement();
}
Compiled from "GeneratorFree.java"
public class utils.GeneratorFree implements java.util.Enumeration<int[]> {
  int level;
  int[] current;
  int[] thresholds;
  public utils.GeneratorFree(int, int[]);
  public boolean hasMoreElements();
  public int[] nextElement();
  public static void main(java.lang.String[]);
  public java.lang.Object nextElement();
}
Compiled from "Gnuplot.java"
public abstract class utils.Gnuplot {
  public utils.Gnuplot();
  public static void main(java.lang.String[]);
  public static void createDatafile(protocols.specifications.DBProtocol[], protocols.specifications.DBProtocol[], java.lang.String) throws java.io.IOException;
}
Compiled from "Latex.java"
public abstract class utils.Latex {
  public utils.Latex();
  public static void appendTableHeader(java.io.FileWriter, attributes.Attribute[]) throws java.io.IOException;
  public static void appendClusters(java.util.List<java.util.List<protocols.specifications.DBProtocol>>, attributes.Attribute[], int, java.io.FileWriter) throws java.io.IOException;
  public static void appendTableFooter(java.io.FileWriter) throws java.io.IOException;
}
Compiled from "Optimization.java"
public class utils.Optimization {
  public utils.Optimization();
  public static void main(java.lang.String[]) throws java.io.FileNotFoundException;
  public static void createRoot();
}
Compiled from "Progress.java"
public final class utils.Progress implements java.io.Serializable {
  public utils.Progress(long);
  public void addProgress();
  public void addProgress(long);
  public void printProgress();
  public void setTotal(long);
}
Compiled from "Report.java"
public class utils.Report {
  public utils.Report();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "SpiderChart.java"
public class utils.SpiderChart {
  public static java.lang.String newLine;
  public utils.SpiderChart();
  public static void main(java.lang.String[]) throws java.io.IOException;
  public static void main1(java.lang.String[]) throws java.io.IOException;
  public static void main3(java.lang.String[]) throws java.io.IOException;
  public static void main4(java.lang.String[]) throws java.io.IOException;
  public static void main2(java.lang.String[]) throws java.io.IOException;
  public static void printSpiderChart(protocols.specifications.DBProtocol[], attributes.Attribute[], java.lang.String) throws java.io.IOException;
  static {};
}
Compiled from "ToStringUtility.java"
public abstract class utils.ToStringUtility {
  public utils.ToStringUtility();
  public static java.lang.String toStringBooleanArray(boolean[]);
}
