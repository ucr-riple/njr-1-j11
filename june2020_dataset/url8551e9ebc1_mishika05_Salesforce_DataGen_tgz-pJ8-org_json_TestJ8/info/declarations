Compiled from "Bug.java"
public class Bug extends WorkRecord {
  public java.util.LinkedList<java.lang.String> allStatus;
  public java.util.LinkedList<java.lang.String> allImpactIds;
  public java.util.LinkedList<java.lang.String> allFreqIds;
  public java.util.LinkedList<java.lang.String> allFoundInBuildIds;
  public java.util.LinkedList<java.lang.String> allProdTagIds;
  public java.util.LinkedList<java.lang.String> allUserIds;
  public java.util.LinkedList<java.lang.String> allPriorityIds;
  public Bug(SalesForceClient);
  public org.json.JSONObject createRecord() throws java.io.IOException, java.lang.Exception;
  public org.json.JSONObject createRecord(java.lang.String) throws java.io.IOException, java.lang.Exception;
  public void preProcess() throws java.io.IOException, java.lang.Exception;
  public void addProductTag() throws java.io.IOException, java.lang.Exception;
  static {};
}
Compiled from "BugTest.java"
public class BugTest extends junit.framework.TestCase {
  SalesForceClient goodClient;
  Bug bug;
  public BugTest();
  public void testClient();
  public void testLists();
  public void testCreateRec();
  public void testValidatePost();
  public void testGenRec();
}
Compiled from "Constants.java"
public class Constants {
  public static final java.lang.String API_WorkRec;
  public static final java.lang.String defaultRec;
  public static final java.lang.String dummyName;
  public static final java.lang.String dummyUniqueNameField;
  public static final java.lang.String dummyBugSubj;
  public static final java.lang.String dummyBugType;
  public static final java.lang.String dummyBugPriority;
  public static final java.lang.String dummyDetails;
  public static final java.lang.String dummyComment;
  public static final java.lang.String queryUrl;
  public static final java.lang.String postUrl;
  public static final java.lang.String tokenUrl;
  public static final int numTries;
  public static final java.lang.String defaultPropFile;
  public Constants();
}
Compiled from "Investigation.java"
public class Investigation extends WorkRecord {
  public Investigation(SalesForceClient);
}
Compiled from "MyProperties.java"
public class MyProperties {
  public java.lang.String environment;
  public java.lang.String callbackUrl;
  public java.lang.String CLIENT_ID;
  public java.lang.String CLIENT_SECRET;
  public java.lang.String USERNAME;
  public java.lang.String PASSWORD;
  public int numRecs;
  public int numThreads;
  public MyProperties(java.lang.String);
  static {};
}
Compiled from "Record.java"
public class Record {
  protected SalesForceClient my_sf;
  protected java.lang.String sObjectRec;
  protected java.lang.String uniqueNameField;
  public Record(SalesForceClient);
  public org.json.JSONObject queryRecords(java.lang.String) throws java.io.IOException, java.lang.Exception;
  public org.json.JSONObject createRecord() throws java.io.IOException, java.lang.Exception;
  public org.json.JSONObject createRecord(java.lang.String) throws java.io.IOException, java.lang.Exception;
  public java.lang.String getFromRecords(org.json.JSONObject, java.lang.String) throws org.json.JSONException;
  protected boolean postRecord(org.json.JSONObject) throws java.lang.Exception;
  public boolean validatePost(org.json.JSONObject) throws java.lang.Exception;
  public boolean validateUpdate(org.json.JSONObject, java.lang.String) throws java.lang.Exception;
  public boolean updateRecord(org.json.JSONObject, java.lang.String) throws java.lang.IllegalStateException, org.json.JSONException, java.io.IOException;
  public java.util.LinkedList<java.lang.String> getAllSObjectIds(java.lang.String) throws java.io.IOException, java.lang.Exception;
  public java.lang.String getIdQuery(java.lang.String, java.lang.String);
  public java.lang.String getRandVal(java.util.LinkedList<java.lang.String>) throws java.io.IOException, java.lang.Exception;
  public boolean generateRecord() throws java.io.IOException, java.lang.Exception;
  public boolean generateRecord(java.lang.String) throws java.lang.Exception;
  static {};
}
Compiled from "Record.java"
class Record$1 extends org.apache.http.client.methods.HttpPost {
  final Record this$0;
  Record$1(Record, java.lang.String);
  public java.lang.String getMethod();
}
Compiled from "RecordGen.java"
public class RecordGen {
  public static long startTime;
  public static long endTime;
  public RecordGen();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "RecordTest.java"
public class RecordTest extends junit.framework.TestCase {
  SalesForceClient goodClient;
  Record rec;
  public RecordTest();
  public void testClient();
  public void testQueryRec1() throws java.io.IOException, java.lang.Exception;
  public void testQueryRec2();
  public void testPostRec();
  public void testBadPostRec();
  public void testUpdateRec();
  public void testValidatePost();
  public void testGenRec();
}
Compiled from "RunAllTests.java"
public class RunAllTests {
  public RunAllTests();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "SalesForceClient.java"
public class SalesForceClient {
  public org.apache.http.client.HttpClient httpclient;
  public java.lang.String accessToken;
  public boolean isBadClient;
  public MyProperties prop;
  public SalesForceClient(java.lang.String);
  public java.lang.String retrieveAccessToken() throws java.lang.Exception;
  static {};
}
Compiled from "SalesForceClient.java"
class SalesForceClient$1 implements javax.net.ssl.X509TrustManager {
  final SalesForceClient this$0;
  SalesForceClient$1(SalesForceClient);
  public java.security.cert.X509Certificate[] getAcceptedIssuers();
  public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException;
  public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException;
}
Compiled from "SalesForceClientTest.java"
public class SalesForceClientTest extends junit.framework.TestCase {
  public SalesForceClientTest();
  public void testClientCredFalsePositive() throws java.lang.Exception;
  public void testUnPwFalsePositive();
  public void testClientCreds();
  public void testSpecifiedProps();
}
Compiled from "UserStory.java"
public class UserStory extends WorkRecord {
  public UserStory(SalesForceClient);
}
Compiled from "WorkRecord.java"
public class WorkRecord extends Record {
  public WorkRecord(SalesForceClient);
  static {};
}
Compiled from "WorkerThread.java"
public class WorkerThread implements java.lang.Runnable {
  public WorkerThread(Record, java.lang.String);
  public void run();
  static {};
}
Compiled from "CDL.java"
public class org.json.CDL {
  public org.json.CDL();
  public static org.json.JSONArray rowToJSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public static org.json.JSONObject rowToJSONObject(org.json.JSONArray, org.json.JSONTokener) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(java.lang.String) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.JSONArray, java.lang.String) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.JSONArray, org.json.JSONTokener) throws org.json.JSONException;
  public static java.lang.String rowToString(org.json.JSONArray);
  public static java.lang.String toString(org.json.JSONArray) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONArray, org.json.JSONArray) throws org.json.JSONException;
}
Compiled from "Cookie.java"
public class org.json.Cookie {
  public org.json.Cookie();
  public static java.lang.String escape(java.lang.String);
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
  public static java.lang.String unescape(java.lang.String);
}
Compiled from "CookieList.java"
public class org.json.CookieList {
  public org.json.CookieList();
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
}
Compiled from "HTTP.java"
public class org.json.HTTP {
  public static final java.lang.String CRLF;
  public org.json.HTTP();
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
}
Compiled from "HTTPTokener.java"
public class org.json.HTTPTokener extends org.json.JSONTokener {
  public org.json.HTTPTokener(java.lang.String);
  public java.lang.String nextToken() throws org.json.JSONException;
}
Compiled from "JSONArray.java"
public class org.json.JSONArray {
  public org.json.JSONArray();
  public org.json.JSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public org.json.JSONArray(java.lang.String) throws org.json.JSONException;
  public org.json.JSONArray(java.util.Collection);
  public org.json.JSONArray(java.lang.Object) throws org.json.JSONException;
  public java.lang.Object get(int) throws org.json.JSONException;
  public boolean getBoolean(int) throws org.json.JSONException;
  public double getDouble(int) throws org.json.JSONException;
  public int getInt(int) throws org.json.JSONException;
  public org.json.JSONArray getJSONArray(int) throws org.json.JSONException;
  public org.json.JSONObject getJSONObject(int) throws org.json.JSONException;
  public long getLong(int) throws org.json.JSONException;
  public java.lang.String getString(int) throws org.json.JSONException;
  public boolean isNull(int);
  public java.lang.String join(java.lang.String) throws org.json.JSONException;
  public int length();
  public java.lang.Object opt(int);
  public boolean optBoolean(int);
  public boolean optBoolean(int, boolean);
  public double optDouble(int);
  public double optDouble(int, double);
  public int optInt(int);
  public int optInt(int, int);
  public org.json.JSONArray optJSONArray(int);
  public org.json.JSONObject optJSONObject(int);
  public long optLong(int);
  public long optLong(int, long);
  public java.lang.String optString(int);
  public java.lang.String optString(int, java.lang.String);
  public org.json.JSONArray put(boolean);
  public org.json.JSONArray put(java.util.Collection);
  public org.json.JSONArray put(double) throws org.json.JSONException;
  public org.json.JSONArray put(int);
  public org.json.JSONArray put(long);
  public org.json.JSONArray put(java.util.Map);
  public org.json.JSONArray put(java.lang.Object);
  public org.json.JSONArray put(int, boolean) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.util.Collection) throws org.json.JSONException;
  public org.json.JSONArray put(int, double) throws org.json.JSONException;
  public org.json.JSONArray put(int, int) throws org.json.JSONException;
  public org.json.JSONArray put(int, long) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.util.Map) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.lang.Object) throws org.json.JSONException;
  public java.lang.Object remove(int);
  public org.json.JSONObject toJSONObject(org.json.JSONArray) throws org.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws org.json.JSONException;
  java.lang.String toString(int, int) throws org.json.JSONException;
  public java.io.Writer write(java.io.Writer) throws org.json.JSONException;
}
Compiled from "JSONException.java"
public class org.json.JSONException extends java.lang.Exception {
  public org.json.JSONException(java.lang.String);
  public org.json.JSONException(java.lang.Throwable);
  public java.lang.Throwable getCause();
}
Compiled from "JSONML.java"
public class org.json.JSONML {
  public org.json.JSONML();
  public static org.json.JSONArray toJSONArray(java.lang.String) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.XMLTokener) throws org.json.JSONException;
  public static org.json.JSONObject toJSONObject(org.json.XMLTokener) throws org.json.JSONException;
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONArray) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
}
Compiled from "JSONObject.java"
public class org.json.JSONObject {
  public static final java.lang.Object NULL;
  public org.json.JSONObject();
  public org.json.JSONObject(org.json.JSONObject, java.lang.String[]);
  public org.json.JSONObject(org.json.JSONTokener) throws org.json.JSONException;
  public org.json.JSONObject(java.util.Map);
  public org.json.JSONObject(java.lang.Object);
  public org.json.JSONObject(java.lang.Object, java.lang.String[]);
  public org.json.JSONObject(java.lang.String) throws org.json.JSONException;
  public org.json.JSONObject accumulate(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject append(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public static java.lang.String doubleToString(double);
  public java.lang.Object get(java.lang.String) throws org.json.JSONException;
  public boolean getBoolean(java.lang.String) throws org.json.JSONException;
  public double getDouble(java.lang.String) throws org.json.JSONException;
  public int getInt(java.lang.String) throws org.json.JSONException;
  public org.json.JSONArray getJSONArray(java.lang.String) throws org.json.JSONException;
  public org.json.JSONObject getJSONObject(java.lang.String) throws org.json.JSONException;
  public long getLong(java.lang.String) throws org.json.JSONException;
  public static java.lang.String[] getNames(org.json.JSONObject);
  public static java.lang.String[] getNames(java.lang.Object);
  public java.lang.String getString(java.lang.String) throws org.json.JSONException;
  public boolean has(java.lang.String);
  public org.json.JSONObject increment(java.lang.String) throws org.json.JSONException;
  public boolean isNull(java.lang.String);
  public java.util.Iterator keys();
  public int length();
  public org.json.JSONArray names();
  public static java.lang.String numberToString(java.lang.Number) throws org.json.JSONException;
  public java.lang.Object opt(java.lang.String);
  public boolean optBoolean(java.lang.String);
  public boolean optBoolean(java.lang.String, boolean);
  public double optDouble(java.lang.String);
  public double optDouble(java.lang.String, double);
  public int optInt(java.lang.String);
  public int optInt(java.lang.String, int);
  public org.json.JSONArray optJSONArray(java.lang.String);
  public org.json.JSONObject optJSONObject(java.lang.String);
  public long optLong(java.lang.String);
  public long optLong(java.lang.String, long);
  public java.lang.String optString(java.lang.String);
  public java.lang.String optString(java.lang.String, java.lang.String);
  public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.util.Collection) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, int) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, long) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.util.Map) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject putOnce(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject putOpt(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public static java.lang.String quote(java.lang.String);
  public java.lang.Object remove(java.lang.String);
  public java.util.Iterator sortedKeys();
  public static java.lang.Object stringToValue(java.lang.String);
  static void testValidity(java.lang.Object) throws org.json.JSONException;
  public org.json.JSONArray toJSONArray(org.json.JSONArray) throws org.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws org.json.JSONException;
  java.lang.String toString(int, int) throws org.json.JSONException;
  static java.lang.String valueToString(java.lang.Object) throws org.json.JSONException;
  static java.lang.String valueToString(java.lang.Object, int, int) throws org.json.JSONException;
  static java.lang.Object wrap(java.lang.Object);
  public java.io.Writer write(java.io.Writer) throws org.json.JSONException;
  static {};
}
Compiled from "JSONObject.java"
class org.json.JSONObject$1 {
}
Compiled from "JSONObject.java"
final class org.json.JSONObject$Null {
  protected final java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  org.json.JSONObject$Null(org.json.JSONObject$1);
}
Compiled from "JSONString.java"
public interface org.json.JSONString {
  public abstract java.lang.String toJSONString();
}
Compiled from "JSONStringer.java"
public class org.json.JSONStringer extends org.json.JSONWriter {
  public org.json.JSONStringer();
  public java.lang.String toString();
}
Compiled from "JSONTokener.java"
public class org.json.JSONTokener {
  public org.json.JSONTokener(java.io.Reader);
  public org.json.JSONTokener(java.lang.String);
  public void back() throws org.json.JSONException;
  public static int dehexchar(char);
  public boolean end();
  public boolean more() throws org.json.JSONException;
  public char next() throws org.json.JSONException;
  public char next(char) throws org.json.JSONException;
  public java.lang.String next(int) throws org.json.JSONException;
  public char nextClean() throws org.json.JSONException;
  public java.lang.String nextString(char) throws org.json.JSONException;
  public java.lang.String nextTo(char) throws org.json.JSONException;
  public java.lang.String nextTo(java.lang.String) throws org.json.JSONException;
  public java.lang.Object nextValue() throws org.json.JSONException;
  public char skipTo(char) throws org.json.JSONException;
  public org.json.JSONException syntaxError(java.lang.String);
  public java.lang.String toString();
}
Compiled from "JSONWriter.java"
public class org.json.JSONWriter {
  protected char mode;
  protected java.io.Writer writer;
  public org.json.JSONWriter(java.io.Writer);
  public org.json.JSONWriter array() throws org.json.JSONException;
  public org.json.JSONWriter endArray() throws org.json.JSONException;
  public org.json.JSONWriter endObject() throws org.json.JSONException;
  public org.json.JSONWriter key(java.lang.String) throws org.json.JSONException;
  public org.json.JSONWriter object() throws org.json.JSONException;
  public org.json.JSONWriter value(boolean) throws org.json.JSONException;
  public org.json.JSONWriter value(double) throws org.json.JSONException;
  public org.json.JSONWriter value(long) throws org.json.JSONException;
  public org.json.JSONWriter value(java.lang.Object) throws org.json.JSONException;
}
Compiled from "Test.java"
public class org.json.Test {
  public org.json.Test();
  public static void main(java.lang.String[]);
}
Compiled from "Test.java"
class org.json.Test$1Obj implements org.json.JSONString {
  public java.lang.String aString;
  public double aNumber;
  public boolean aBoolean;
  public org.json.Test$1Obj(java.lang.String, double, boolean);
  public double getNumber();
  public java.lang.String getString();
  public boolean isBoolean();
  public java.lang.String getBENT();
  public java.lang.String getX();
  public java.lang.String toJSONString();
  public java.lang.String toString();
}
Compiled from "XML.java"
public class org.json.XML {
  public static final java.lang.Character AMP;
  public static final java.lang.Character APOS;
  public static final java.lang.Character BANG;
  public static final java.lang.Character EQ;
  public static final java.lang.Character GT;
  public static final java.lang.Character LT;
  public static final java.lang.Character QUEST;
  public static final java.lang.Character QUOT;
  public static final java.lang.Character SLASH;
  public org.json.XML();
  public static java.lang.String escape(java.lang.String);
  public static void noSpace(java.lang.String) throws org.json.JSONException;
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(java.lang.Object) throws org.json.JSONException;
  public static java.lang.String toString(java.lang.Object, java.lang.String) throws org.json.JSONException;
  static {};
}
Compiled from "XMLTokener.java"
public class org.json.XMLTokener extends org.json.JSONTokener {
  public static final java.util.HashMap entity;
  public org.json.XMLTokener(java.lang.String);
  public java.lang.String nextCDATA() throws org.json.JSONException;
  public java.lang.Object nextContent() throws org.json.JSONException;
  public java.lang.Object nextEntity(char) throws org.json.JSONException;
  public java.lang.Object nextMeta() throws org.json.JSONException;
  public java.lang.Object nextToken() throws org.json.JSONException;
  public boolean skipPast(java.lang.String) throws org.json.JSONException;
  static {};
}
