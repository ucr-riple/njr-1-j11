Compiled from "Main.java"
public class Main {
  public Main();
  public static void main(java.lang.String[]);
}
Compiled from "TestPT.java"
public class TestPT {
  public TestPT();
  public static java.util.Map<java.lang.String, java.lang.String> getMap();
  public static void setMap(java.util.Map<java.lang.String, java.lang.String>);
  static {};
}
Compiled from "TestParser.java"
public class TestParser {
  public TestParser();
  public static void main(java.lang.String[]);
}
Compiled from "SWTResourceManager.java"
public class org.eclipse.wb.swt.SWTResourceManager {
  public static final int TOP_LEFT;
  public static final int TOP_RIGHT;
  public static final int BOTTOM_LEFT;
  public static final int BOTTOM_RIGHT;
  protected static final int LAST_CORNER_KEY;
  public org.eclipse.wb.swt.SWTResourceManager();
  public static org.eclipse.swt.graphics.Color getColor(int);
  public static org.eclipse.swt.graphics.Color getColor(int, int, int);
  public static org.eclipse.swt.graphics.Color getColor(org.eclipse.swt.graphics.RGB);
  public static void disposeColors();
  protected static org.eclipse.swt.graphics.Image getImage(java.io.InputStream) throws java.io.IOException;
  public static org.eclipse.swt.graphics.Image getImage(java.lang.String);
  public static org.eclipse.swt.graphics.Image getImage(java.lang.Class<?>, java.lang.String);
  public static org.eclipse.swt.graphics.Image decorateImage(org.eclipse.swt.graphics.Image, org.eclipse.swt.graphics.Image);
  public static org.eclipse.swt.graphics.Image decorateImage(org.eclipse.swt.graphics.Image, org.eclipse.swt.graphics.Image, int);
  public static void disposeImages();
  public static org.eclipse.swt.graphics.Font getFont(java.lang.String, int, int);
  public static org.eclipse.swt.graphics.Font getFont(java.lang.String, int, int, boolean, boolean);
  public static org.eclipse.swt.graphics.Font getBoldFont(org.eclipse.swt.graphics.Font);
  public static void disposeFonts();
  public static org.eclipse.swt.graphics.Cursor getCursor(int);
  public static void disposeCursors();
  public static void dispose();
  static {};
}
Compiled from "DefaultParser.java"
public class xpathParser.bench.pt.DefaultParser {
  public xpathParser.bench.pt.DefaultParser();
  public static void main(java.lang.String[]);
}
Compiled from "MyParser.java"
public class xpathParser.bench.pt.MyParser {
  public xpathParser.bench.pt.MyParser();
  public static void main(java.lang.String[]);
}
Compiled from "Test.java"
public class xpathParser.bench.pt.Test {
  public xpathParser.bench.pt.Test();
  public static java.util.Map<java.lang.String, java.lang.String> getMap();
  public static void setMap(java.util.Map<java.lang.String, java.lang.String>);
  static {};
}
Compiled from "TestFT.java"
public class xpathParser.bench.pt.TestFT {
  public xpathParser.bench.pt.TestFT();
  public static java.util.Map<java.lang.String, java.lang.String> getMap();
  public static void setMap(java.util.Map<java.lang.String, java.lang.String>);
  static {};
}
Compiled from "TestPT.java"
public class xpathParser.bench.pt.TestPT {
  public xpathParser.bench.pt.TestPT();
  public static java.util.Map<java.lang.String, java.lang.String> getMap();
  public static void setMap(java.util.Map<java.lang.String, java.lang.String>);
  static {};
}
Compiled from "TestPT.java"
public class xpathParser.test.TestPT {
  public xpathParser.test.TestPT();
  public static java.util.Map<java.lang.String, java.lang.String> getMap();
  public static void setMap(java.util.Map<java.lang.String, java.lang.String>);
  static {};
}
Compiled from "XMLTest.java"
public class xpathParser.test.XMLTest extends org.custommonkey.xmlunit.XMLTestCase {
  public xpathParser.test.XMLTest(java.lang.String) throws javax.xml.parsers.ParserConfigurationException;
  public void testA1Identical() throws java.lang.Exception;
  public void testA2Identical() throws java.lang.Exception;
  public void testA3Identical() throws java.lang.Exception;
  public void testA4Identical() throws java.lang.Exception;
  public void testA5Identical() throws java.lang.Exception;
  public void testA6Identical() throws java.lang.Exception;
  public void testA7Identical() throws java.lang.Exception;
  public void testA8Identical() throws java.lang.Exception;
  public void testA9Identical() throws java.lang.Exception;
  public void testA10Identical() throws java.lang.Exception;
  public void testA11Identical() throws java.lang.Exception;
  public void testA12Identical() throws java.lang.Exception;
  public void testP1Identical() throws java.lang.Exception;
  public void testP2Identical() throws java.lang.Exception;
  public void testP3Identical() throws java.lang.Exception;
  public void testP4Identical() throws java.lang.Exception;
  public void testP5Identical() throws java.lang.Exception;
  public void testP6Identical() throws java.lang.Exception;
  public void testP7Identical() throws java.lang.Exception;
  public void testP8Identical() throws java.lang.Exception;
  public void testP9Identical() throws java.lang.Exception;
  public void testP10Identical() throws java.lang.Exception;
  public void testP11Identical() throws java.lang.Exception;
  public void testP12Identical() throws java.lang.Exception;
  public void testT1Identical() throws java.lang.Exception;
  public void testT2Identical() throws java.lang.Exception;
  public void testT3Identical() throws java.lang.Exception;
  public void testT4Identical() throws java.lang.Exception;
  public void testT5Identical() throws java.lang.Exception;
  public void testT6Identical() throws java.lang.Exception;
  public void testT7Identical() throws java.lang.Exception;
  public void testO1Identical() throws java.lang.Exception;
  public void testO2Identical() throws java.lang.Exception;
  public void testO3Identical() throws java.lang.Exception;
  public void testO4Identical() throws java.lang.Exception;
  public void testO5Identical() throws java.lang.Exception;
  public void testO6Identical() throws java.lang.Exception;
  public void testO7Identical() throws java.lang.Exception;
  public void testO8Identical() throws java.lang.Exception;
  public void testO9Identical() throws java.lang.Exception;
  public void testF1Identical() throws java.lang.Exception;
  public void testF2Identical() throws java.lang.Exception;
  public void testF3Identical() throws java.lang.Exception;
  public void testF4Identical() throws java.lang.Exception;
  public void testF5Identical() throws java.lang.Exception;
  public void testF6Identical() throws java.lang.Exception;
  public void testF7Identical() throws java.lang.Exception;
  public void testF8Identical() throws java.lang.Exception;
  public void testF9Identical() throws java.lang.Exception;
  public void testF10Identical() throws java.lang.Exception;
  public void testF11Identical() throws java.lang.Exception;
  public void testF12Identical() throws java.lang.Exception;
  public void testF13Identical() throws java.lang.Exception;
  public void testF14Identical() throws java.lang.Exception;
  public void testF15Identical() throws java.lang.Exception;
  public void testF16Identical() throws java.lang.Exception;
  public void testF17Identical() throws java.lang.Exception;
  public void testF18Identical() throws java.lang.Exception;
  public void testF19Identical() throws java.lang.Exception;
  public void testF21Identical() throws java.lang.Exception;
  public void testF22Identical() throws java.lang.Exception;
  public void testF23Identical() throws java.lang.Exception;
  public void testF24Identical() throws java.lang.Exception;
  public void testF25Identical() throws java.lang.Exception;
  public void testF26Identical() throws java.lang.Exception;
}
Compiled from "Compiler.java"
public interface xx.Compiler {
  public static final int NODE_TYPE_NODE;
  public static final int NODE_TYPE_TEXT;
  public static final int NODE_TYPE_COMMENT;
  public static final int NODE_TYPE_PI;
  public static final int AXIS_SELF;
  public static final int AXIS_CHILD;
  public static final int AXIS_PARENT;
  public static final int AXIS_ANCESTOR;
  public static final int AXIS_ATTRIBUTE;
  public static final int AXIS_NAMESPACE;
  public static final int AXIS_PRECEDING;
  public static final int AXIS_FOLLOWING;
  public static final int AXIS_DESCENDANT;
  public static final int AXIS_ANCESTOR_OR_SELF;
  public static final int AXIS_FOLLOWING_SIBLING;
  public static final int AXIS_PRECEDING_SIBLING;
  public static final int AXIS_DESCENDANT_OR_SELF;
  public static final int FUNCTION_LAST;
  public static final int FUNCTION_POSITION;
  public static final int FUNCTION_COUNT;
  public static final int FUNCTION_ID;
  public static final int FUNCTION_LOCAL_NAME;
  public static final int FUNCTION_NAMESPACE_URI;
  public static final int FUNCTION_NAME;
  public static final int FUNCTION_STRING;
  public static final int FUNCTION_CONCAT;
  public static final int FUNCTION_STARTS_WITH;
  public static final int FUNCTION_CONTAINS;
  public static final int FUNCTION_SUBSTRING_BEFORE;
  public static final int FUNCTION_SUBSTRING_AFTER;
  public static final int FUNCTION_SUBSTRING;
  public static final int FUNCTION_STRING_LENGTH;
  public static final int FUNCTION_NORMALIZE_SPACE;
  public static final int FUNCTION_TRANSLATE;
  public static final int FUNCTION_BOOLEAN;
  public static final int FUNCTION_NOT;
  public static final int FUNCTION_TRUE;
  public static final int FUNCTION_FALSE;
  public static final int FUNCTION_LANG;
  public static final int FUNCTION_NUMBER;
  public static final int FUNCTION_SUM;
  public static final int FUNCTION_FLOOR;
  public static final int FUNCTION_CEILING;
  public static final int FUNCTION_ROUND;
  public static final int FUNCTION_NULL;
  public static final int FUNCTION_KEY;
  public static final int FUNCTION_FORMAT_NUMBER;
  public abstract java.lang.Object number(java.lang.String);
  public abstract java.lang.Object literal(java.lang.String);
  public abstract java.lang.Object qname(java.lang.String, java.lang.String);
  public abstract java.lang.Object sum(java.lang.Object[]);
  public abstract java.lang.Object minus(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object multiply(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object divide(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object mod(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object lessThan(java.lang.Object, java.lang.Object);
  public abstract void setPredicate(boolean);
  public abstract java.lang.Object lessThanOrEqual(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object greaterThan(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object greaterThanOrEqual(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object equal(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object notEqual(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object minus(java.lang.Object);
  public abstract java.lang.Object variableReference(java.lang.Object);
  public abstract java.lang.Object function(int, java.lang.Object[]);
  public abstract java.lang.Object function(java.lang.Object, java.lang.Object[]);
  public abstract java.lang.Object and(java.lang.Object[]);
  public abstract java.lang.Object or(java.lang.Object[]);
  public abstract java.lang.Object union(java.lang.Object[]);
  public abstract java.lang.Object nodeNameTest(java.lang.Object);
  public abstract java.lang.Object nodeTypeTest(int);
  public abstract java.lang.Object processingInstructionTest(java.lang.String);
  public abstract java.lang.Object step(int, java.lang.Object, java.lang.Object[]);
  public abstract java.lang.Object locationPath(boolean, java.lang.Object[]);
  public abstract java.lang.Object expressionPath(java.lang.Object, java.lang.Object[], java.lang.Object[]);
}
Compiled from "EG1.java"
public class xx.EG1 implements xx.EG1Constants {
  public static xx.EG1TokenManager token_source;
  static xx.SimpleCharStream jj_input_stream;
  public static xx.Token token;
  public static xx.Token jj_nt;
  public static void main(java.lang.String[]) throws xx.ParseException;
  public static final int one_line() throws xx.ParseException;
  public static final void sum() throws xx.ParseException;
  public static final void term() throws xx.ParseException;
  public static final void unary() throws xx.ParseException;
  public static final void element() throws xx.ParseException;
  public xx.EG1(java.io.InputStream);
  public xx.EG1(java.io.InputStream, java.lang.String);
  public static void ReInit(java.io.InputStream);
  public static void ReInit(java.io.InputStream, java.lang.String);
  public xx.EG1(java.io.Reader);
  public static void ReInit(java.io.Reader);
  public xx.EG1(xx.EG1TokenManager);
  public void ReInit(xx.EG1TokenManager);
  public static final xx.Token getNextToken();
  public static final xx.Token getToken(int);
  public static xx.ParseException generateParseException();
  public static final void enable_tracing();
  public static final void disable_tracing();
  static {};
}
Compiled from "EG1Constants.java"
public interface xx.EG1Constants {
  public static final int EOF;
  public static final int PLUS;
  public static final int MINUS;
  public static final int MULTIPLY;
  public static final int DIVIDE;
  public static final int CONSTANT;
  public static final int DIGIT;
  public static final int DEFAULT;
  public static final java.lang.String[] tokenImage;
  static {};
}
Compiled from "EG1TokenManager.java"
public class xx.EG1TokenManager implements xx.EG1Constants {
  public static java.io.PrintStream debugStream;
  static final int[] jjnextStates;
  public static final java.lang.String[] jjstrLiteralImages;
  public static final java.lang.String[] lexStateNames;
  static final long[] jjtoToken;
  static final long[] jjtoSkip;
  protected static xx.SimpleCharStream input_stream;
  protected static char curChar;
  static int curLexState;
  static int defaultLexState;
  static int jjnewStateCnt;
  static int jjround;
  static int jjmatchedPos;
  static int jjmatchedKind;
  public static void setDebugStream(java.io.PrintStream);
  public xx.EG1TokenManager(xx.SimpleCharStream);
  public xx.EG1TokenManager(xx.SimpleCharStream, int);
  public static void ReInit(xx.SimpleCharStream);
  public static void ReInit(xx.SimpleCharStream, int);
  public static void SwitchTo(int);
  protected static xx.Token jjFillToken();
  public static xx.Token getNextToken();
  static {};
}
Compiled from "MonCompiler.java"
public class xx.MonCompiler implements xx.Compiler {
  public static final short LOCATIONPATH;
  public static final short NODE_NAME_TEST;
  public static final short NODE_TYPE_TEST;
  public static final short NODE_ATTRIBUT_TEST;
  public static final short NODE_TYPE_NUMBER;
  public xx.MonCompiler(org.w3c.dom.Document);
  public java.lang.Object number(java.lang.String);
  public java.lang.Object literal(java.lang.String);
  public java.lang.Object qname(java.lang.String, java.lang.String);
  public java.lang.Object sum(java.lang.Object[]);
  public java.lang.Object minus(java.lang.Object, java.lang.Object);
  public java.lang.Object multiply(java.lang.Object, java.lang.Object);
  public java.lang.Object divide(java.lang.Object, java.lang.Object);
  public java.lang.Object mod(java.lang.Object, java.lang.Object);
  public java.lang.Object lessThan(java.lang.Object, java.lang.Object);
  public java.lang.Object lessThanOrEqual(java.lang.Object, java.lang.Object);
  public java.lang.Object greaterThan(java.lang.Object, java.lang.Object);
  public java.lang.Object greaterThanOrEqual(java.lang.Object, java.lang.Object);
  public java.lang.Object equal(java.lang.Object, java.lang.Object);
  public java.lang.Object notEqual(java.lang.Object, java.lang.Object);
  public java.lang.Object minus(java.lang.Object);
  public java.lang.Object variableReference(java.lang.Object);
  public java.lang.Object function(int, java.lang.Object[]);
  public java.lang.Object function(java.lang.Object, java.lang.Object[]);
  public java.lang.Object and(java.lang.Object[]);
  public java.lang.Object not(java.lang.Object[]);
  public java.lang.Object or(java.lang.Object[]);
  public java.lang.Object union(java.lang.Object[]);
  public java.lang.Object nodeNameTest(java.lang.Object);
  public java.lang.Object nodeTypeTest(int);
  public java.lang.Object processingInstructionTest(java.lang.String);
  public java.lang.Object step(int, java.lang.Object, java.lang.Object[]);
  public java.lang.Object locationPath(boolean, java.lang.Object[]);
  public java.lang.Object locationPath(java.util.List<org.w3c.dom.Node>, java.lang.Object[]);
  public java.lang.Object expressionPath(java.lang.Object, java.lang.Object[], java.lang.Object[]);
  public java.lang.String getCurrentMethodName();
  protected java.lang.Object createContextForStep(java.util.List<org.w3c.dom.Node>, int, yyy.NodeTest);
  public static boolean testNode(yyy.NodeTest, org.w3c.dom.Node);
  public boolean isPredicate();
  public void setPredicate(boolean);
  static {};
}
Compiled from "ParseException.java"
public class xx.ParseException extends java.lang.Exception {
  public xx.Token currentToken;
  public int[][] expectedTokenSequences;
  public java.lang.String[] tokenImage;
  protected java.lang.String eol;
  public xx.ParseException(xx.Token, int[][], java.lang.String[]);
  public xx.ParseException();
  public xx.ParseException(java.lang.String);
  static java.lang.String add_escapes(java.lang.String);
}
Compiled from "Parser.java"
public class xx.Parser {
  public xx.Parser();
  public static java.lang.Object parseExpression(java.lang.String, xx.Compiler);
  static {};
}
Compiled from "SimpleCharStream.java"
public class xx.SimpleCharStream {
  public static final boolean staticFlag;
  int bufsize;
  int available;
  int tokenBegin;
  public int bufpos;
  protected int[] bufline;
  protected int[] bufcolumn;
  protected int column;
  protected int line;
  protected boolean prevCharIsCR;
  protected boolean prevCharIsLF;
  protected java.io.Reader inputStream;
  protected char[] buffer;
  protected int maxNextCharInd;
  protected int inBuf;
  protected int tabSize;
  protected void setTabSize(int);
  protected int getTabSize(int);
  protected void ExpandBuff(boolean);
  protected void FillBuff() throws java.io.IOException;
  public char BeginToken() throws java.io.IOException;
  protected void UpdateLineColumn(char);
  public char readChar() throws java.io.IOException;
  public int getColumn();
  public int getLine();
  public int getEndColumn();
  public int getEndLine();
  public int getBeginColumn();
  public int getBeginLine();
  public void backup(int);
  public xx.SimpleCharStream(java.io.Reader, int, int, int);
  public xx.SimpleCharStream(java.io.Reader, int, int);
  public xx.SimpleCharStream(java.io.Reader);
  public void ReInit(java.io.Reader, int, int, int);
  public void ReInit(java.io.Reader, int, int);
  public void ReInit(java.io.Reader);
  public xx.SimpleCharStream(java.io.InputStream, java.lang.String, int, int, int) throws java.io.UnsupportedEncodingException;
  public xx.SimpleCharStream(java.io.InputStream, int, int, int);
  public xx.SimpleCharStream(java.io.InputStream, java.lang.String, int, int) throws java.io.UnsupportedEncodingException;
  public xx.SimpleCharStream(java.io.InputStream, int, int);
  public xx.SimpleCharStream(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException;
  public xx.SimpleCharStream(java.io.InputStream);
  public void ReInit(java.io.InputStream, java.lang.String, int, int, int) throws java.io.UnsupportedEncodingException;
  public void ReInit(java.io.InputStream, int, int, int);
  public void ReInit(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException;
  public void ReInit(java.io.InputStream);
  public void ReInit(java.io.InputStream, java.lang.String, int, int) throws java.io.UnsupportedEncodingException;
  public void ReInit(java.io.InputStream, int, int);
  public java.lang.String GetImage();
  public char[] GetSuffix(int);
  public void Done();
  public void adjustBeginLineColumn(int, int);
}
Compiled from "Token.java"
public class xx.Token implements java.io.Serializable {
  public int kind;
  public int beginLine;
  public int beginColumn;
  public int endLine;
  public int endColumn;
  public java.lang.String image;
  public xx.Token next;
  public xx.Token specialToken;
  public java.lang.Object getValue();
  public xx.Token();
  public xx.Token(int);
  public xx.Token(int, java.lang.String);
  public java.lang.String toString();
  public static xx.Token newToken(int, java.lang.String);
  public static xx.Token newToken(int);
}
Compiled from "TokenMgrError.java"
public class xx.TokenMgrError extends java.lang.Error {
  static final int LEXICAL_ERROR;
  static final int STATIC_LEXER_ERROR;
  static final int INVALID_LEXICAL_STATE;
  static final int LOOP_DETECTED;
  int errorCode;
  protected static final java.lang.String addEscapes(java.lang.String);
  protected static java.lang.String LexicalError(boolean, int, int, int, java.lang.String, char);
  public java.lang.String getMessage();
  public xx.TokenMgrError();
  public xx.TokenMgrError(java.lang.String, int);
  public xx.TokenMgrError(boolean, int, int, int, java.lang.String, char, int);
}
Compiled from "Utils.java"
public class xx.Utils {
  public xx.Utils();
  public static java.lang.String asString(java.lang.Object);
  public static java.lang.Number asNumber(java.lang.Object);
  public static double asDouble(java.lang.Object);
  public static boolean asBoolean(java.lang.Object);
  static {};
}
Compiled from "XPathEvaluateur.java"
public class xx.XPathEvaluateur {
  public xx.XPathEvaluateur();
  public org.w3c.dom.Node compile(java.lang.String, org.w3c.dom.Document);
  public org.w3c.dom.Node compile(java.lang.String);
  public java.lang.String parseString(java.lang.String, java.lang.String) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException;
  public java.lang.String readFile(java.lang.String) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException;
  public static void main(java.lang.String[]);
  public java.lang.String getDocFile();
  public void setDocFile(java.lang.String);
}
Compiled from "XPathParser.java"
public class xx.XPathParser implements xx.XPathParserConstants {
  public xx.XPathParserTokenManager token_source;
  xx.SimpleCharStream jj_input_stream;
  public xx.Token token;
  public xx.Token jj_nt;
  public void setCompiler(xx.Compiler);
  public final java.lang.String NCName() throws xx.ParseException;
  public final java.lang.String NCName_Without_CoreFunctions() throws xx.ParseException;
  public final int CoreFunctionName() throws xx.ParseException;
  public final java.lang.Object QName() throws xx.ParseException;
  public final java.lang.Object QName_Without_CoreFunctions() throws xx.ParseException;
  public final java.lang.Object parseExpression() throws xx.ParseException;
  public final java.lang.Object LocationPath() throws xx.ParseException;
  public final java.lang.Object AbsoluteLocationPath() throws xx.ParseException;
  public final java.lang.Object RelativeLocationPath() throws xx.ParseException;
  public final void LocationStep(java.util.ArrayList) throws xx.ParseException;
  public final void NodeTest(java.util.ArrayList) throws xx.ParseException;
  public final int AxisSpecifier() throws xx.ParseException;
  public final int AxisName() throws xx.ParseException;
  public final java.lang.Object Predicate() throws xx.ParseException;
  public final int AbbreviatedAxisSpecifier() throws xx.ParseException;
  public final java.lang.Object Expression() throws xx.ParseException;
  public final java.lang.Object PrimaryExpr() throws xx.ParseException;
  public final java.lang.Object FunctionCall() throws xx.ParseException;
  public final java.lang.Object CoreFunctionCall() throws xx.ParseException;
  public final java.util.ArrayList ArgumentList() throws xx.ParseException;
  public final java.lang.Object Argument() throws xx.ParseException;
  public final java.lang.Object UnionExpr() throws xx.ParseException;
  public final java.lang.Object PathExpr() throws xx.ParseException;
  public final java.lang.Object FilterExpr() throws xx.ParseException;
  public final java.lang.Object OrExpr() throws xx.ParseException;
  public final java.lang.Object AndExpr() throws xx.ParseException;
  public final java.lang.Object EqualityExpr() throws xx.ParseException;
  public final java.lang.Object RelationalExpr() throws xx.ParseException;
  public final java.lang.Object AdditiveExpr() throws xx.ParseException;
  public final java.lang.Object SubtractiveExpr() throws xx.ParseException;
  public final java.lang.Object MultiplicativeExpr() throws xx.ParseException;
  public final java.lang.Object UnaryExpr() throws xx.ParseException;
  public final java.lang.Object FunctionName() throws xx.ParseException;
  public final java.lang.Object VariableReference() throws xx.ParseException;
  public final java.lang.Object NameTest() throws xx.ParseException;
  public final int NodeType() throws xx.ParseException;
  public xx.XPathParser(java.io.InputStream);
  public xx.XPathParser(java.io.InputStream, java.lang.String);
  public void ReInit(java.io.InputStream);
  public void ReInit(java.io.InputStream, java.lang.String);
  public xx.XPathParser(java.io.Reader);
  public void ReInit(java.io.Reader);
  public xx.XPathParser(xx.XPathParserTokenManager);
  public void ReInit(xx.XPathParserTokenManager);
  public final xx.Token getNextToken();
  public final xx.Token getToken(int);
  public xx.ParseException generateParseException();
  public final void enable_tracing();
  public final void disable_tracing();
  static {};
}
Compiled from "XPathParser.java"
class xx.XPathParser$1 {
}
Compiled from "XPathParser.java"
final class xx.XPathParser$JJCalls {
  int gen;
  xx.Token first;
  int arg;
  xx.XPathParser$JJCalls next;
  xx.XPathParser$JJCalls();
}
Compiled from "XPathParser.java"
final class xx.XPathParser$LookaheadSuccess extends java.lang.Error {
  xx.XPathParser$LookaheadSuccess(xx.XPathParser$1);
}
Compiled from "XPathParserConstants.java"
public interface xx.XPathParserConstants {
  public static final int EOF;
  public static final int SLASH;
  public static final int SLASHSLASH;
  public static final int UNION;
  public static final int PLUS;
  public static final int MINUS;
  public static final int EQ;
  public static final int NEQ;
  public static final int LT;
  public static final int LTE;
  public static final int GT;
  public static final int GTE;
  public static final int VARIABLE;
  public static final int Literal;
  public static final int Digit;
  public static final int Number;
  public static final int Letter;
  public static final int BaseChar;
  public static final int Ideographic;
  public static final int CombiningChar;
  public static final int UnicodeDigit;
  public static final int Extender;
  public static final int OR;
  public static final int AND;
  public static final int MOD;
  public static final int DIV;
  public static final int NODE;
  public static final int TEXT;
  public static final int COMMENT;
  public static final int PI;
  public static final int AXIS_SELF;
  public static final int AXIS_CHILD;
  public static final int AXIS_PARENT;
  public static final int AXIS_ANCESTOR;
  public static final int AXIS_ATTRIBUTE;
  public static final int AXIS_NAMESPACE;
  public static final int AXIS_PRECEDING;
  public static final int AXIS_FOLLOWING;
  public static final int AXIS_DESCENDANT;
  public static final int AXIS_ANCESTOR_OR_SELF;
  public static final int AXIS_FOLLOWING_SIBLING;
  public static final int AXIS_PRECEDING_SIBLING;
  public static final int AXIS_DESCENDANT_OR_SELF;
  public static final int FUNCTION_LAST;
  public static final int FUNCTION_POSITION;
  public static final int FUNCTION_COUNT;
  public static final int FUNCTION_ID;
  public static final int FUNCTION_KEY;
  public static final int FUNCTION_LOCAL_NAME;
  public static final int FUNCTION_NAMESPACE_URI;
  public static final int FUNCTION_NAME;
  public static final int FUNCTION_STRING;
  public static final int FUNCTION_CONCAT;
  public static final int FUNCTION_STARTS_WITH;
  public static final int FUNCTION_CONTAINS;
  public static final int FUNCTION_SUBSTRING_BEFORE;
  public static final int FUNCTION_SUBSTRING_AFTER;
  public static final int FUNCTION_SUBSTRING;
  public static final int FUNCTION_STRING_LENGTH;
  public static final int FUNCTION_NORMALIZE_SPACE;
  public static final int FUNCTION_TRANSLATE;
  public static final int FUNCTION_BOOLEAN;
  public static final int FUNCTION_NOT;
  public static final int FUNCTION_TRUE;
  public static final int FUNCTION_FALSE;
  public static final int FUNCTION_NULL;
  public static final int FUNCTION_LANG;
  public static final int FUNCTION_NUMBER;
  public static final int FUNCTION_SUM;
  public static final int FUNCTION_FLOOR;
  public static final int FUNCTION_CEILING;
  public static final int FUNCTION_ROUND;
  public static final int FUNCTION_FORMAT_NUMBER;
  public static final int NCName;
  public static final int DEFAULT;
  public static final java.lang.String[] tokenImage;
  static {};
}
Compiled from "XPathParserTokenManager.java"
public class xx.XPathParserTokenManager implements xx.XPathParserConstants {
  public java.io.PrintStream debugStream;
  static final long[] jjbitVec0;
  static final long[] jjbitVec1;
  static final long[] jjbitVec3;
  static final long[] jjbitVec4;
  static final long[] jjbitVec5;
  static final long[] jjbitVec6;
  static final long[] jjbitVec7;
  static final long[] jjbitVec8;
  static final long[] jjbitVec9;
  static final long[] jjbitVec10;
  static final long[] jjbitVec11;
  static final long[] jjbitVec12;
  static final long[] jjbitVec13;
  static final long[] jjbitVec14;
  static final long[] jjbitVec15;
  static final long[] jjbitVec16;
  static final long[] jjbitVec17;
  static final long[] jjbitVec18;
  static final long[] jjbitVec19;
  static final long[] jjbitVec20;
  static final long[] jjbitVec21;
  static final long[] jjbitVec22;
  static final long[] jjbitVec23;
  static final long[] jjbitVec24;
  static final long[] jjbitVec25;
  static final long[] jjbitVec26;
  static final long[] jjbitVec27;
  static final long[] jjbitVec28;
  static final long[] jjbitVec29;
  static final long[] jjbitVec30;
  static final long[] jjbitVec31;
  static final long[] jjbitVec32;
  static final long[] jjbitVec33;
  static final long[] jjbitVec34;
  static final long[] jjbitVec35;
  static final long[] jjbitVec36;
  static final long[] jjbitVec37;
  static final long[] jjbitVec38;
  static final long[] jjbitVec39;
  static final long[] jjbitVec40;
  static final int[] jjnextStates;
  public static final java.lang.String[] jjstrLiteralImages;
  public static final java.lang.String[] lexStateNames;
  static final long[] jjtoToken;
  static final long[] jjtoSkip;
  protected xx.SimpleCharStream input_stream;
  protected char curChar;
  int curLexState;
  int defaultLexState;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;
  public void setDebugStream(java.io.PrintStream);
  public xx.XPathParserTokenManager(xx.SimpleCharStream);
  public xx.XPathParserTokenManager(xx.SimpleCharStream, int);
  public void ReInit(xx.SimpleCharStream);
  public void ReInit(xx.SimpleCharStream, int);
  public void SwitchTo(int);
  protected xx.Token jjFillToken();
  public xx.Token getNextToken();
  static {};
}
Compiled from "XpathValidator.java"
public class xx.XpathValidator implements xx.Compiler {
  public xx.XpathValidator();
  public java.lang.Object number(java.lang.String);
  public java.lang.Object literal(java.lang.String);
  public java.lang.Object qname(java.lang.String, java.lang.String);
  public java.lang.Object sum(java.lang.Object[]);
  public java.lang.Object minus(java.lang.Object, java.lang.Object);
  public java.lang.Object multiply(java.lang.Object, java.lang.Object);
  public java.lang.Object divide(java.lang.Object, java.lang.Object);
  public java.lang.Object mod(java.lang.Object, java.lang.Object);
  public java.lang.Object lessThan(java.lang.Object, java.lang.Object);
  public void setPredicate(boolean);
  public java.lang.Object lessThanOrEqual(java.lang.Object, java.lang.Object);
  public java.lang.Object greaterThan(java.lang.Object, java.lang.Object);
  public java.lang.Object greaterThanOrEqual(java.lang.Object, java.lang.Object);
  public java.lang.Object equal(java.lang.Object, java.lang.Object);
  public java.lang.Object notEqual(java.lang.Object, java.lang.Object);
  public java.lang.Object minus(java.lang.Object);
  public java.lang.Object variableReference(java.lang.Object);
  public java.lang.Object function(int, java.lang.Object[]);
  public java.lang.Object function(java.lang.Object, java.lang.Object[]);
  public java.lang.Object and(java.lang.Object[]);
  public java.lang.Object or(java.lang.Object[]);
  public java.lang.Object union(java.lang.Object[]);
  public java.lang.Object nodeNameTest(java.lang.Object);
  public java.lang.Object nodeTypeTest(int);
  public java.lang.Object processingInstructionTest(java.lang.String);
  public java.lang.Object step(int, java.lang.Object, java.lang.Object[]);
  public java.lang.Object locationPath(boolean, java.lang.Object[]);
  public java.lang.Object expressionPath(java.lang.Object, java.lang.Object[], java.lang.Object[]);
}
Compiled from "Gui.java"
public class xx.test.Gui {
  protected org.eclipse.swt.widgets.Shell shell;
  xx.XPathEvaluateur compiler;
  public xx.test.Gui();
  public static void main(java.lang.String[]);
  public void open();
  protected void createContents();
  static org.eclipse.swt.widgets.Label access$000(xx.test.Gui);
  static org.eclipse.swt.custom.StyledText access$100(xx.test.Gui);
  static org.eclipse.swt.widgets.Text access$200(xx.test.Gui);
  static org.eclipse.swt.custom.StyledText access$300(xx.test.Gui);
}
Compiled from "Gui.java"
class xx.test.Gui$1 extends org.eclipse.swt.events.KeyAdapter {
  final xx.test.Gui this$0;
  xx.test.Gui$1(xx.test.Gui);
  public void keyPressed(org.eclipse.swt.events.KeyEvent);
  public void keyReleased(org.eclipse.swt.events.KeyEvent);
}
Compiled from "Gui.java"
class xx.test.Gui$2 extends org.eclipse.swt.events.SelectionAdapter {
  final xx.test.Gui this$0;
  xx.test.Gui$2(xx.test.Gui);
  public void widgetSelected(org.eclipse.swt.events.SelectionEvent);
}
Compiled from "Gui.java"
class xx.test.Gui$3 extends org.eclipse.swt.events.SelectionAdapter {
  final xx.test.Gui this$0;
  xx.test.Gui$3(xx.test.Gui);
  public void widgetSelected(org.eclipse.swt.events.SelectionEvent);
}
Compiled from "Gui.java"
class xx.test.Gui$4 extends org.eclipse.swt.events.SelectionAdapter {
  final xx.test.Gui this$0;
  xx.test.Gui$4(xx.test.Gui);
  public void widgetSelected(org.eclipse.swt.events.SelectionEvent);
}
Compiled from "NodeNameTest.java"
public class yyy.NodeNameTest extends yyy.NodeTest {
  public yyy.NodeNameTest(javax.xml.namespace.QName);
  public yyy.NodeNameTest(javax.xml.namespace.QName, java.lang.String);
  public javax.xml.namespace.QName getNodeQName();
  public java.lang.String getNamespaceURI();
  public boolean isWildcard();
  public java.lang.String toString();
  public java.lang.String getNodeName();
  public java.lang.String getNodeValue() throws org.w3c.dom.DOMException;
  public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException;
  public short getNodeType();
  public org.w3c.dom.Node getParentNode();
  public org.w3c.dom.NodeList getChildNodes();
  public org.w3c.dom.Node getFirstChild();
  public org.w3c.dom.Node getLastChild();
  public org.w3c.dom.Node getPreviousSibling();
  public org.w3c.dom.Node getNextSibling();
  public org.w3c.dom.NamedNodeMap getAttributes();
  public org.w3c.dom.Document getOwnerDocument();
  public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public boolean hasChildNodes();
  public org.w3c.dom.Node cloneNode(boolean);
  public void normalize();
  public boolean isSupported(java.lang.String, java.lang.String);
  public java.lang.String getPrefix();
  public void setPrefix(java.lang.String) throws org.w3c.dom.DOMException;
  public java.lang.String getLocalName();
  public boolean hasAttributes();
  public java.lang.String getBaseURI();
  public short compareDocumentPosition(org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public java.lang.String getTextContent() throws org.w3c.dom.DOMException;
  public void setTextContent(java.lang.String) throws org.w3c.dom.DOMException;
  public boolean isSameNode(org.w3c.dom.Node);
  public java.lang.String lookupPrefix(java.lang.String);
  public boolean isDefaultNamespace(java.lang.String);
  public java.lang.String lookupNamespaceURI(java.lang.String);
  public boolean isEqualNode(org.w3c.dom.Node);
  public java.lang.Object getFeature(java.lang.String, java.lang.String);
  public java.lang.Object setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler);
  public java.lang.Object getUserData(java.lang.String);
  public java.lang.String getTagName();
  public java.lang.String getAttribute(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public void removeAttribute(java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr getAttributeNode(java.lang.String);
  public org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException;
  public org.w3c.dom.NodeList getElementsByTagName(java.lang.String);
  public java.lang.String getAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public void setAttributeNS(java.lang.String, java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public void removeAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr getAttributeNodeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr) throws org.w3c.dom.DOMException;
  public org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public boolean hasAttribute(java.lang.String);
  public boolean hasAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.TypeInfo getSchemaTypeInfo();
  public void setIdAttribute(java.lang.String, boolean) throws org.w3c.dom.DOMException;
  public void setIdAttributeNS(java.lang.String, java.lang.String, boolean) throws org.w3c.dom.DOMException;
  public void setIdAttributeNode(org.w3c.dom.Attr, boolean) throws org.w3c.dom.DOMException;
}
Compiled from "NodeTest.java"
public class yyy.NodeTest implements org.w3c.dom.Element {
  public short nodeType;
  public yyy.NodeTest();
  public yyy.Step[] getSteps();
  public void setSteps(yyy.Step[]);
  public java.lang.String getNodeName();
  public java.lang.String getNodeValue() throws org.w3c.dom.DOMException;
  public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException;
  public short getNodeType();
  public void setNodeType(short);
  public java.lang.String toString();
  public org.w3c.dom.Node getParentNode();
  public org.w3c.dom.NodeList getChildNodes();
  public org.w3c.dom.Node getFirstChild();
  public org.w3c.dom.Node getLastChild();
  public org.w3c.dom.Node getPreviousSibling();
  public org.w3c.dom.Node getNextSibling();
  public org.w3c.dom.NamedNodeMap getAttributes();
  public org.w3c.dom.Document getOwnerDocument();
  public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public boolean hasChildNodes();
  public org.w3c.dom.Node cloneNode(boolean);
  public void normalize();
  public boolean isSupported(java.lang.String, java.lang.String);
  public java.lang.String getNamespaceURI();
  public java.lang.String getPrefix();
  public void setPrefix(java.lang.String) throws org.w3c.dom.DOMException;
  public java.lang.String getLocalName();
  public boolean hasAttributes();
  public java.lang.String getBaseURI();
  public short compareDocumentPosition(org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public java.lang.String getTextContent() throws org.w3c.dom.DOMException;
  public void setTextContent(java.lang.String) throws org.w3c.dom.DOMException;
  public boolean isSameNode(org.w3c.dom.Node);
  public java.lang.String lookupPrefix(java.lang.String);
  public boolean isDefaultNamespace(java.lang.String);
  public java.lang.String lookupNamespaceURI(java.lang.String);
  public boolean isEqualNode(org.w3c.dom.Node);
  public java.lang.Object getFeature(java.lang.String, java.lang.String);
  public java.lang.Object setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler);
  public java.lang.Object getUserData(java.lang.String);
  public java.lang.String getTagName();
  public java.lang.String getAttribute(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public void removeAttribute(java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr getAttributeNode(java.lang.String);
  public org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException;
  public org.w3c.dom.NodeList getElementsByTagName(java.lang.String);
  public java.lang.String getAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public void setAttributeNS(java.lang.String, java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public void removeAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr getAttributeNodeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr) throws org.w3c.dom.DOMException;
  public org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public boolean hasAttribute(java.lang.String);
  public boolean hasAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.TypeInfo getSchemaTypeInfo();
  public void setIdAttribute(java.lang.String, boolean) throws org.w3c.dom.DOMException;
  public void setIdAttributeNS(java.lang.String, java.lang.String, boolean) throws org.w3c.dom.DOMException;
  public void setIdAttributeNode(org.w3c.dom.Attr, boolean) throws org.w3c.dom.DOMException;
  public java.util.List<org.w3c.dom.Node> getContext();
  public void setContext(java.util.List<org.w3c.dom.Node>);
  public java.util.Map<java.lang.String, yyy.NodeTest[]> getFunctionCalls();
  public void setFunctionCalls(java.util.Map<java.lang.String, yyy.NodeTest[]>);
}
Compiled from "NodeTypeTest.java"
public class yyy.NodeTypeTest extends yyy.NodeTest {
  public yyy.NodeTypeTest(int);
  public short getNodeType();
  public java.lang.String toString();
  public static java.lang.String nodeTypeToString(int);
  public java.lang.String getNodeName();
  public java.lang.String getNodeValue() throws org.w3c.dom.DOMException;
  public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node getParentNode();
  public org.w3c.dom.NodeList getChildNodes();
  public org.w3c.dom.Node getFirstChild();
  public org.w3c.dom.Node getLastChild();
  public org.w3c.dom.Node getPreviousSibling();
  public org.w3c.dom.Node getNextSibling();
  public org.w3c.dom.NamedNodeMap getAttributes();
  public org.w3c.dom.Document getOwnerDocument();
  public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public boolean hasChildNodes();
  public org.w3c.dom.Node cloneNode(boolean);
  public void normalize();
  public boolean isSupported(java.lang.String, java.lang.String);
  public java.lang.String getNamespaceURI();
  public java.lang.String getPrefix();
  public void setPrefix(java.lang.String) throws org.w3c.dom.DOMException;
  public java.lang.String getLocalName();
  public boolean hasAttributes();
  public java.lang.String getBaseURI();
  public short compareDocumentPosition(org.w3c.dom.Node) throws org.w3c.dom.DOMException;
  public java.lang.String getTextContent() throws org.w3c.dom.DOMException;
  public void setTextContent(java.lang.String) throws org.w3c.dom.DOMException;
  public boolean isSameNode(org.w3c.dom.Node);
  public java.lang.String lookupPrefix(java.lang.String);
  public boolean isDefaultNamespace(java.lang.String);
  public java.lang.String lookupNamespaceURI(java.lang.String);
  public boolean isEqualNode(org.w3c.dom.Node);
  public java.lang.Object getFeature(java.lang.String, java.lang.String);
  public java.lang.Object setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler);
  public java.lang.Object getUserData(java.lang.String);
  public java.lang.String getTagName();
  public java.lang.String getAttribute(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public void removeAttribute(java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr getAttributeNode(java.lang.String);
  public org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException;
  public org.w3c.dom.NodeList getElementsByTagName(java.lang.String);
  public java.lang.String getAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public void setAttributeNS(java.lang.String, java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public void removeAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr getAttributeNodeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr) throws org.w3c.dom.DOMException;
  public org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public boolean hasAttribute(java.lang.String);
  public boolean hasAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
  public org.w3c.dom.TypeInfo getSchemaTypeInfo();
  public void setIdAttribute(java.lang.String, boolean) throws org.w3c.dom.DOMException;
  public void setIdAttributeNS(java.lang.String, java.lang.String, boolean) throws org.w3c.dom.DOMException;
  public void setIdAttributeNode(org.w3c.dom.Attr, boolean) throws org.w3c.dom.DOMException;
}
Compiled from "Step.java"
public class yyy.Step {
  public yyy.Step(int, yyy.NodeTest, org.w3c.dom.Element[]);
  public int getAxis();
  public yyy.NodeTest getNodeTest();
  public org.w3c.dom.Element[] getPredicates();
  public java.lang.String toString();
  public static java.lang.String axisToString(int);
}
Compiled from "NodeComparator.java"
public class zz.NodeComparator implements java.util.Comparator<org.w3c.dom.Node> {
  public zz.NodeComparator();
  public int compare(org.w3c.dom.Node, org.w3c.dom.Node);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "TestFT.java"
public class zz.TestFT {
  public zz.TestFT();
  public static java.util.Map<java.lang.String, java.lang.String> getMap();
  public static void setMap(java.util.Map<java.lang.String, java.lang.String>);
  static {};
}
Compiled from "TestPT.java"
public class zz.TestPT {
  public zz.TestPT();
  public static java.util.Map<java.lang.String, java.lang.String> getMap();
  public static void setMap(java.util.Map<java.lang.String, java.lang.String>);
  static {};
}
Compiled from "XPathDebug.java"
public class zz.XPathDebug {
  public zz.XPathDebug();
  public org.w3c.dom.Node compile(java.lang.String);
  public static void main(java.lang.String[]);
  public java.lang.String getDocFile();
  public void setDocFile(java.lang.String);
}
