/* Generated By:JavaCC: Do not edit this line. XPathParserConstants.java */
package xx;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface XPathParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SLASH = 6;
  /** RegularExpression Id. */
  int SLASHSLASH = 7;
  /** RegularExpression Id. */
  int UNION = 8;
  /** RegularExpression Id. */
  int PLUS = 9;
  /** RegularExpression Id. */
  int MINUS = 10;
  /** RegularExpression Id. */
  int EQ = 11;
  /** RegularExpression Id. */
  int NEQ = 12;
  /** RegularExpression Id. */
  int LT = 13;
  /** RegularExpression Id. */
  int LTE = 14;
  /** RegularExpression Id. */
  int GT = 15;
  /** RegularExpression Id. */
  int GTE = 16;
  /** RegularExpression Id. */
  int VARIABLE = 17;
  /** RegularExpression Id. */
  int Literal = 18;
  /** RegularExpression Id. */
  int Digit = 19;
  /** RegularExpression Id. */
  int Number = 20;
  /** RegularExpression Id. */
  int Letter = 21;
  /** RegularExpression Id. */
  int BaseChar = 22;
  /** RegularExpression Id. */
  int Ideographic = 23;
  /** RegularExpression Id. */
  int CombiningChar = 24;
  /** RegularExpression Id. */
  int UnicodeDigit = 25;
  /** RegularExpression Id. */
  int Extender = 26;
  /** RegularExpression Id. */
  int OR = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int MOD = 29;
  /** RegularExpression Id. */
  int DIV = 30;
  /** RegularExpression Id. */
  int NODE = 31;
  /** RegularExpression Id. */
  int TEXT = 32;
  /** RegularExpression Id. */
  int COMMENT = 33;
  /** RegularExpression Id. */
  int PI = 34;
  /** RegularExpression Id. */
  int AXIS_SELF = 35;
  /** RegularExpression Id. */
  int AXIS_CHILD = 36;
  /** RegularExpression Id. */
  int AXIS_PARENT = 37;
  /** RegularExpression Id. */
  int AXIS_ANCESTOR = 38;
  /** RegularExpression Id. */
  int AXIS_ATTRIBUTE = 39;
  /** RegularExpression Id. */
  int AXIS_NAMESPACE = 40;
  /** RegularExpression Id. */
  int AXIS_PRECEDING = 41;
  /** RegularExpression Id. */
  int AXIS_FOLLOWING = 42;
  /** RegularExpression Id. */
  int AXIS_DESCENDANT = 43;
  /** RegularExpression Id. */
  int AXIS_ANCESTOR_OR_SELF = 44;
  /** RegularExpression Id. */
  int AXIS_FOLLOWING_SIBLING = 45;
  /** RegularExpression Id. */
  int AXIS_PRECEDING_SIBLING = 46;
  /** RegularExpression Id. */
  int AXIS_DESCENDANT_OR_SELF = 47;
  /** RegularExpression Id. */
  int FUNCTION_LAST = 48;
  /** RegularExpression Id. */
  int FUNCTION_POSITION = 49;
  /** RegularExpression Id. */
  int FUNCTION_COUNT = 50;
  /** RegularExpression Id. */
  int FUNCTION_ID = 51;
  /** RegularExpression Id. */
  int FUNCTION_KEY = 52;
  /** RegularExpression Id. */
  int FUNCTION_LOCAL_NAME = 53;
  /** RegularExpression Id. */
  int FUNCTION_NAMESPACE_URI = 54;
  /** RegularExpression Id. */
  int FUNCTION_NAME = 55;
  /** RegularExpression Id. */
  int FUNCTION_STRING = 56;
  /** RegularExpression Id. */
  int FUNCTION_CONCAT = 57;
  /** RegularExpression Id. */
  int FUNCTION_STARTS_WITH = 58;
  /** RegularExpression Id. */
  int FUNCTION_CONTAINS = 59;
  /** RegularExpression Id. */
  int FUNCTION_SUBSTRING_BEFORE = 60;
  /** RegularExpression Id. */
  int FUNCTION_SUBSTRING_AFTER = 61;
  /** RegularExpression Id. */
  int FUNCTION_SUBSTRING = 62;
  /** RegularExpression Id. */
  int FUNCTION_STRING_LENGTH = 63;
  /** RegularExpression Id. */
  int FUNCTION_NORMALIZE_SPACE = 64;
  /** RegularExpression Id. */
  int FUNCTION_TRANSLATE = 65;
  /** RegularExpression Id. */
  int FUNCTION_BOOLEAN = 66;
  /** RegularExpression Id. */
  int FUNCTION_NOT = 67;
  /** RegularExpression Id. */
  int FUNCTION_TRUE = 68;
  /** RegularExpression Id. */
  int FUNCTION_FALSE = 69;
  /** RegularExpression Id. */
  int FUNCTION_NULL = 70;
  /** RegularExpression Id. */
  int FUNCTION_LANG = 71;
  /** RegularExpression Id. */
  int FUNCTION_NUMBER = 72;
  /** RegularExpression Id. */
  int FUNCTION_SUM = 73;
  /** RegularExpression Id. */
  int FUNCTION_FLOOR = 74;
  /** RegularExpression Id. */
  int FUNCTION_CEILING = 75;
  /** RegularExpression Id. */
  int FUNCTION_ROUND = 76;
  /** RegularExpression Id. */
  int FUNCTION_FORMAT_NUMBER = 77;
  /** RegularExpression Id. */
  int NCName = 78;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/\"",
    "\"//\"",
    "\"|\"",
    "\"+\"",
    "\"-\"",
    "\"=\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"$\"",
    "<Literal>",
    "<Digit>",
    "<Number>",
    "<Letter>",
    "<BaseChar>",
    "<Ideographic>",
    "<CombiningChar>",
    "<UnicodeDigit>",
    "<Extender>",
    "\"or\"",
    "\"and\"",
    "\"mod\"",
    "\"div\"",
    "\"node\"",
    "\"text\"",
    "\"comment\"",
    "\"processing-instruction\"",
    "\"self::\"",
    "\"child::\"",
    "\"parent::\"",
    "\"ancestor::\"",
    "\"attribute::\"",
    "\"namespace::\"",
    "\"preceding::\"",
    "\"following::\"",
    "\"descendant::\"",
    "\"ancestor-or-self::\"",
    "\"following-sibling::\"",
    "\"preceding-sibling::\"",
    "\"descendant-or-self::\"",
    "\"last\"",
    "\"position\"",
    "\"count\"",
    "\"id\"",
    "\"key\"",
    "\"local-name\"",
    "\"namespace-uri\"",
    "\"name\"",
    "\"string\"",
    "\"concat\"",
    "\"starts-with\"",
    "\"contains\"",
    "\"substring-before\"",
    "\"substring-after\"",
    "\"substring\"",
    "\"string-length\"",
    "\"normalize-space\"",
    "\"translate\"",
    "\"boolean\"",
    "\"not\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"lang\"",
    "\"number\"",
    "\"sum\"",
    "\"floor\"",
    "\"ceiling\"",
    "\"round\"",
    "\"format-number\"",
    "<NCName>",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\"..\"",
    "\"[\"",
    "\"]\"",
    "\"@\"",
    "\",\"",
    "\"*\"",
  };

}
