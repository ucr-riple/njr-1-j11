Compiled from "TcpTest.java"
public class org.vit.unsafeutils.TcpTest {
  public org.vit.unsafeutils.TcpTest();
  public static void main(java.lang.String[]);
}
Compiled from "TcpTest.java"
final class org.vit.unsafeutils.TcpTest$1 implements org.vit.unsafeutils.tcp.TcpStreamProcessor {
  org.vit.unsafeutils.TcpTest$1();
  public void process(java.util.ArrayList<org.vit.unsafeutils.api.UnsafeSerializable>);
  public void run();
}
Compiled from "UnsafeAccess.java"
public class org.vit.unsafeutils.UnsafeAccess {
  public static final sun.misc.Unsafe unsafe;
  public static final boolean isAligned;
  public static final long BYTE_ARRAY_OFFSET;
  public static final long BOOLEAN_ARRAY_OFFSET;
  public static final long INT_ARRAY_OFFSET;
  public static final long LONG_ARRAY_OFFSET;
  public static final long DOUBLE_ARRAY_OFFSET;
  public static final long SIZE_OF_BOOLEAN;
  public static final long MEM_OFFSET;
  public static final long SIZE_OF_BYTE;
  public static final long SIZE_OF_SHORT;
  public static final long SIZE_OF_INT;
  public static final long SIZE_OF_LONG;
  public static final long SIZE_OF_DOUBLE;
  public static final java.lang.String EMPTY_STRING;
  public static final int CACHE_LINE_SIZE;
  public static final int PAGE_SIZE;
  public static final byte[] TCP_DELIMITER;
  public static final int TCP_DEFAULT_MESSAGE_SIZE;
  public org.vit.unsafeutils.UnsafeAccess();
  static {};
}
Compiled from "FXData.java"
public class org.vit.unsafeutils.api.FXData implements org.vit.unsafeutils.api.UnsafeSerializable {
  public org.vit.unsafeutils.api.FXData();
  public void write(org.vit.unsafeutils.serializer.UnsafeBuffer);
  public org.vit.unsafeutils.api.UnsafeSerializable read(org.vit.unsafeutils.serializer.UnsafeBuffer);
  public int getDefaultSize();
  public java.lang.String getObjectId();
}
Compiled from "MarketData.java"
public class org.vit.unsafeutils.api.MarketData implements org.vit.unsafeutils.api.UnsafeSerializable {
  protected long lastTickTime;
  protected long lastPublishTime;
  protected boolean hideLast;
  protected java.lang.String alias;
  boolean etf;
  protected java.lang.String ric;
  protected java.lang.String ticker;
  protected java.lang.String alterRic;
  protected double last;
  protected double bid;
  protected double ask;
  protected double open;
  protected double close;
  protected double close2;
  protected double close5;
  protected double close21;
  protected double close20;
  protected double close6m;
  protected double close1y;
  protected double closeYtd;
  protected long compositeVolume1W;
  protected long volume;
  protected long compositeVolume;
  protected double avgVolume20;
  protected double avgVolume1;
  protected double avgVolume2;
  protected double avgVolume5;
  protected double avgVolume21;
  protected double avgVolume60;
  protected double avgCompVolume20;
  protected double avgCompVolume1;
  protected double avgCompVolume2;
  protected double avgCompVolume5;
  protected double avgCompVolume14;
  protected double avgCompVolume21;
  protected double avgCompVolume60;
  protected double avgVolumeTillNow20;
  protected double avgCompVolumeTillNow20;
  protected double avgVwap20;
  protected double avgSpread20;
  protected double avgClose50d;
  protected double avgClose100d;
  protected double avgClose200d;
  protected double low;
  protected double low26w;
  protected double low52w;
  protected double high;
  protected double high26w;
  protected double high52w;
  protected double vwap;
  protected long numTrades;
  protected double turnover;
  protected double maxVolumeLastMinute;
  protected double avgMaxVolumeLastMinute20;
  protected double vwap5;
  protected java.lang.String source;
  protected java.lang.String currency;
  public org.vit.unsafeutils.api.MarketData();
  org.vit.unsafeutils.api.MarketData(long, long, boolean, boolean, java.lang.String, java.lang.String, double, double, double, double, double, double, double, double, double, double, double, double, long, long, long, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, long, double, double, double, double);
  public java.lang.String getCurrency();
  public void setCurrency(java.lang.String);
  public boolean isHideLast();
  public void setHideLast(boolean);
  public java.lang.String getTicker();
  public void setTicker(java.lang.String);
  public long getCompositeVolume();
  public void setCompositeVolume(long);
  public double getAvgCompVolume20();
  public void setAvgCompVolume20(double);
  public double getAvgCompVolume1();
  public void setAvgCompVolume1(double);
  public double getAvgCompVolume2();
  public void setAvgCompVolume2(double);
  public double getAvgCompVolume5();
  public void setAvgCompVolume5(double);
  public double getAvgCompVolume14();
  public void setAvgCompVolume14(double);
  public double getAvgCompVolume21();
  public void setAvgCompVolume21(double);
  public double getAvgVolume60();
  public void setAvgVolume60(double);
  public double getAvgCompVolume60();
  public void setAvgCompVolume60(double);
  public double getAvgVolumeTillNow20();
  public void setAvgVolumeTillNow20(double);
  public double getAvgCompVolumeTillNow20();
  public void setAvgCompVolumeTillNow20(double);
  public java.lang.String getAlias();
  public double getOpen();
  public void setOpen(double);
  public double getPrice(int);
  public void setAlias(java.lang.String);
  public double getBidPrc();
  public void setBidPrc(double);
  public double getAskPrc();
  public void setAskPrc(double);
  public float completeness();
  public java.lang.String getAlterRic();
  public void setAlterRic(java.lang.String);
  public org.vit.unsafeutils.api.MarketData(java.lang.String);
  public void copy(org.vit.unsafeutils.api.MarketData);
  public void updateTickTime();
  public long getLastTickTime();
  public void setLastTickTime(long);
  public java.lang.String getRic();
  public void setRic(java.lang.String);
  public double getLast(boolean);
  public double getLast();
  public void setLast(double);
  public double getClose();
  public double getClose(boolean);
  public void setClose(double);
  public double getClose2();
  public void setClose2(double);
  public long getVolume();
  public void setVolume(long);
  public double getAvgVolume();
  public double getAvgCompVolume();
  public double getExchangeParticipationKoef();
  public void setAvgVolume(double);
  public double getAvgVolume20();
  public void setAvgVolume20(double);
  public double getAvgVolume1();
  public void setAvgVolume1(double);
  public double getAvgVolume2();
  public void setAvgVolume2(double);
  public double getAvgVolume5();
  public void setAvgVolume5(double);
  public double getAvgVolume21();
  public void setAvgVolume21(double);
  public double getAvgClose50d();
  public void setAvgClose50d(double);
  public double getAvgClose100d();
  public void setAvgClose100d(double);
  public double getAvgClose200d();
  public void setAvgClose200d(double);
  public java.lang.String getSource();
  public void setSource(java.lang.String);
  public boolean isEtf();
  public void setEtf(boolean);
  public double getChgPrc();
  public double getClose5();
  public void setClose5(double);
  public double getClose21();
  public void setClose21(double);
  public double getClose20();
  public void setClose20(double);
  public double getClose6m();
  public void setClose6m(double);
  public double getClose1y();
  public void setClose1y(double);
  public double getCloseYtd();
  public void setCloseYtd(double);
  public double getLow();
  public void setLow(double);
  public double getLow26w();
  public void setLow26w(double);
  public double getLow52w();
  public void setLow52w(double);
  public double getHigh();
  public void setHigh(double);
  public double getHigh26w();
  public void setHigh26w(double);
  public double getHigh52w();
  public void setHigh52w(double);
  public double getVwap();
  public void setVwap(double);
  public long getNumTrades();
  public void setNumTrades(long);
  public double getTurnover();
  public void setTurnover(double);
  public java.lang.String toString();
  public void updateLastPublishTime();
  public long getLastPublishTime();
  public void setLastPublishTime(long);
  public double getBid();
  public void setBid(double);
  public double getAsk();
  public void setAsk(double);
  public double getAvgVwap20();
  public void setAvgVwap20(double);
  public double getAvgSpread20();
  public void setAvgSpread20(double);
  public static boolean hasAvgVolume20(org.vit.unsafeutils.api.MarketData);
  protected double coalesceZero(java.lang.Double, java.lang.Double);
  protected double getZeroIfNaN(java.lang.Double);
  public long getCompositeVolume1W();
  public void setCompositeVolume1W(long);
  public double getMaxVolumeLastMinute();
  public void setMaxVolumeLastMinute(double);
  public double getAvgMaxVolumeLastMinute20();
  public void setAvgMaxVolumeLastMinute20(double);
  public double getVwap5();
  public void setVwap5(double);
  public int getDefaultSize();
  public java.lang.String getObjectId();
  public void write(org.vit.unsafeutils.serializer.UnsafeBuffer);
  public org.vit.unsafeutils.api.UnsafeSerializable read(org.vit.unsafeutils.serializer.UnsafeBuffer);
}
Compiled from "OrderData.java"
public class org.vit.unsafeutils.api.OrderData implements org.vit.unsafeutils.api.UnsafeSerializable {
  public org.vit.unsafeutils.api.OrderData();
  public java.lang.String getRic();
  public void setRic(java.lang.String);
  public double getLast();
  public void setLast(double);
  public void write(org.vit.unsafeutils.serializer.UnsafeBuffer);
  public org.vit.unsafeutils.api.UnsafeSerializable read(org.vit.unsafeutils.serializer.UnsafeBuffer);
  public int getDefaultSize();
  public java.lang.String getObjectId();
}
Compiled from "UnsafeSerializable.java"
public interface org.vit.unsafeutils.api.UnsafeSerializable {
  public abstract void write(org.vit.unsafeutils.serializer.UnsafeBuffer);
  public abstract org.vit.unsafeutils.api.UnsafeSerializable read(org.vit.unsafeutils.serializer.UnsafeBuffer);
  public abstract int getDefaultSize();
  public abstract java.lang.String getObjectId();
}
Compiled from "UnsafeBuffer.java"
public class org.vit.unsafeutils.serializer.UnsafeBuffer {
  public org.vit.unsafeutils.serializer.UnsafeBuffer(byte[]);
  public org.vit.unsafeutils.serializer.UnsafeBuffer(byte[], int);
  public void setOffset(int);
  public long getOffset();
  public void reset();
  public byte[] toByteArray();
  public void putBoolean(boolean);
  public boolean getBoolean();
  public void putBooleanArray(boolean[]);
  public boolean[] getBooleanArray();
  public void putInt(int);
  public int getInt();
  public void putIntArray(int[]);
  public int[] getIntArray();
  public void putLong(long);
  public long getLong();
  public void putLongArray(long[]);
  public long[] getLongArray();
  public void putDoubleArray(double[]);
  public double[] getDoubleArray();
  public void putString(java.lang.String);
  public java.lang.String getString();
  public void putStringArray(java.lang.String[]);
  public java.lang.String[] getStringArray();
  public void putByte(byte);
  public byte getByte();
  public void putByteArray(byte[]);
  public byte[] getByteArray();
  public void putDouble(double);
  public double getDouble();
  public void putShort(short);
  public short getShort();
}
Compiled from "UnsafeSerializer.java"
public class org.vit.unsafeutils.serializer.UnsafeSerializer {
  public org.vit.unsafeutils.serializer.UnsafeSerializer();
  public static void init(java.lang.String);
  public static java.util.ArrayList<org.vit.unsafeutils.api.UnsafeSerializable> read(java.nio.ByteBuffer, int);
  public static byte[] write(org.vit.unsafeutils.api.UnsafeSerializable);
  static {};
}
Compiled from "Service.java"
public interface org.vit.unsafeutils.service.Service {
  public abstract void stop();
  public abstract void start();
  public abstract boolean shouldStart();
}
Compiled from "TcpGenericManager.java"
public class org.vit.unsafeutils.tcp.TcpGenericManager {
  protected org.vit.unsafeutils.tcp.TcpStreamProcessor processor;
  protected java.lang.String host;
  protected int port;
  protected java.net.InetAddress hostAddress;
  protected java.nio.channels.Selector selector;
  protected org.vit.unsafeutils.tcp.TcpReceiveBuffer receiveBuffer;
  protected java.util.Map<java.nio.channels.SocketChannel, java.util.concurrent.ConcurrentLinkedQueue<byte[]>> pendingData;
  protected static final java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Object> syncRequestQueue;
  protected java.nio.channels.SocketChannel socket;
  protected int so_RCVBUF;
  protected java.nio.channels.ServerSocketChannel serverChannel;
  protected volatile boolean started;
  protected boolean workInSync;
  protected long syncReqTMOUT;
  public org.vit.unsafeutils.tcp.TcpGenericManager();
  public void sendData(org.vit.unsafeutils.api.UnsafeSerializable);
  public void setHost(java.lang.String);
  public void setPort(int);
  public void setReceiveBuffer(org.vit.unsafeutils.tcp.TcpReceiveBuffer);
  protected boolean read(java.nio.channels.SelectionKey) throws java.io.IOException;
  protected boolean write(java.nio.channels.SelectionKey) throws java.io.IOException;
  public void setProcessor(org.vit.unsafeutils.tcp.TcpStreamProcessor);
  public void setWorkInSync(boolean);
  public void setSyncReqTMOUT(long);
  static {};
}
Compiled from "TcpReceiveBuffer.java"
public class org.vit.unsafeutils.tcp.TcpReceiveBuffer {
  public org.vit.unsafeutils.tcp.TcpReceiveBuffer(int);
  public java.nio.ByteBuffer getReadBuffer();
  public int getCapacity();
  public void setCapacity(int);
  public boolean atEnd();
  static {};
}
Compiled from "TcpStreamConsumer.java"
public class org.vit.unsafeutils.tcp.TcpStreamConsumer extends org.vit.unsafeutils.tcp.TcpGenericManager implements org.vit.unsafeutils.service.Service,java.lang.Runnable {
  public org.vit.unsafeutils.tcp.TcpStreamConsumer();
  public void stop();
  public void start();
  public boolean shouldStart();
  protected java.nio.channels.SocketChannel openSocket() throws java.io.IOException;
  public void sendData(org.vit.unsafeutils.api.UnsafeSerializable);
  public void requestAsync(org.vit.unsafeutils.api.UnsafeSerializable);
  public void requestSync(org.vit.unsafeutils.api.UnsafeSerializable);
  public void run();
  public void setSelectionOpts(int);
  public boolean isConnected();
  static {};
}
Compiled from "TcpStreamProcessor.java"
public interface org.vit.unsafeutils.tcp.TcpStreamProcessor extends java.lang.Runnable {
  public abstract void process(java.util.ArrayList<org.vit.unsafeutils.api.UnsafeSerializable>);
}
Compiled from "TcpStreamProducer.java"
public class org.vit.unsafeutils.tcp.TcpStreamProducer extends org.vit.unsafeutils.tcp.TcpGenericManager implements org.vit.unsafeutils.service.Service,java.lang.Runnable {
  public org.vit.unsafeutils.tcp.TcpStreamProducer();
  public void stop();
  public void start();
  public boolean shouldStart();
  public void run();
  public void sendData(org.vit.unsafeutils.api.UnsafeSerializable);
  public void setSelectionOpts(int);
  static {};
}
