Compiled from "ExecuteContainsCheck.java"
public class concurrent.collision.detection.ExecuteContainsCheck implements cl.niclabs.skandium.muscles.Execute<data.structures.HashList, data.structures.HashList> {
  public concurrent.collision.detection.ExecuteContainsCheck();
  public data.structures.HashList execute(data.structures.HashList) throws java.lang.Exception;
  public java.lang.Object execute(java.lang.Object) throws java.lang.Exception;
}
Compiled from "MergeCollisions.java"
public class concurrent.collision.detection.MergeCollisions implements cl.niclabs.skandium.muscles.Merge<data.structures.HashList, data.structures.HashList> {
  public concurrent.collision.detection.MergeCollisions();
  public data.structures.HashList merge(data.structures.HashList[]) throws java.lang.Exception;
  public java.lang.Object merge(java.lang.Object[]) throws java.lang.Exception;
}
Compiled from "SplitHashArray.java"
public class concurrent.collision.detection.SplitHashArray implements cl.niclabs.skandium.muscles.Split<data.structures.HashList, data.structures.HashList> {
  final int parts;
  public concurrent.collision.detection.SplitHashArray(int);
  public data.structures.HashList[] split(data.structures.HashList) throws java.lang.Exception;
  public java.lang.Object[] split(java.lang.Object) throws java.lang.Exception;
}
Compiled from "ExecuteIntegralCalculation.java"
public class concurrent.example.ExecuteIntegralCalculation implements cl.niclabs.skandium.muscles.Execute<java.lang.Integer, java.lang.Double> {
  int parts;
  int size;
  public concurrent.example.ExecuteIntegralCalculation(int, int);
  public java.lang.Double execute(java.lang.Integer);
  public static double f(double);
  public static double trapezoid(int, int, int);
  public java.lang.Object execute(java.lang.Object) throws java.lang.Exception;
}
Compiled from "MergeAreas.java"
public class concurrent.example.MergeAreas implements cl.niclabs.skandium.muscles.Merge<java.lang.Double, java.lang.Double> {
  public concurrent.example.MergeAreas();
  public java.lang.Double merge(java.lang.Double[]) throws java.lang.Exception;
  public java.lang.Object merge(java.lang.Object[]) throws java.lang.Exception;
}
Compiled from "SplitInterval.java"
public class concurrent.example.SplitInterval implements cl.niclabs.skandium.muscles.Split<java.lang.Integer, java.lang.Integer> {
  public concurrent.example.SplitInterval();
  public java.lang.Integer[] split(java.lang.Integer) throws java.lang.Exception;
  public java.lang.Object[] split(java.lang.Object) throws java.lang.Exception;
}
Compiled from "ExecuteHashing.java"
public class concurrent.hashing.ExecuteHashing implements cl.niclabs.skandium.muscles.Execute<data.structures.SchemaInterface, data.structures.HashList> {
  final int power;
  public concurrent.hashing.ExecuteHashing(int);
  public data.structures.HashList execute(data.structures.SchemaInterface) throws java.lang.Exception;
  public java.lang.Object execute(java.lang.Object) throws java.lang.Exception;
}
Compiled from "MergeHashes.java"
public class concurrent.hashing.MergeHashes implements cl.niclabs.skandium.muscles.Merge<data.structures.HashList, data.structures.HashList> {
  public concurrent.hashing.MergeHashes();
  public data.structures.HashList merge(data.structures.HashList[]) throws java.lang.Exception;
  public java.lang.Object merge(java.lang.Object[]) throws java.lang.Exception;
}
Compiled from "SplitSchema.java"
public class concurrent.hashing.SplitSchema implements cl.niclabs.skandium.muscles.Split<data.structures.SchemaInterface, data.structures.SchemaInterface> {
  final int parts;
  public concurrent.hashing.SplitSchema(int);
  public data.structures.SchemaInterface[] split(data.structures.SchemaInterface) throws java.lang.Exception;
  public java.lang.Object[] split(java.lang.Object) throws java.lang.Exception;
}
Compiled from "ExecuteInsertion.java"
public class concurrent.trie.insertion.ExecuteInsertion implements cl.niclabs.skandium.muscles.Execute<data.structures.HashList, java.lang.Object> {
  public concurrent.trie.insertion.ExecuteInsertion();
  public java.lang.Object execute(data.structures.HashList) throws java.lang.Exception;
  public java.lang.Object execute(java.lang.Object) throws java.lang.Exception;
}
Compiled from "MergeNothing.java"
public class concurrent.trie.insertion.MergeNothing implements cl.niclabs.skandium.muscles.Merge<java.lang.Object, java.lang.Object> {
  public concurrent.trie.insertion.MergeNothing();
  public java.lang.Object merge(java.lang.Object[]) throws java.lang.Exception;
}
Compiled from "SplitHashArray.java"
public class concurrent.trie.insertion.SplitHashArray implements cl.niclabs.skandium.muscles.Split<data.structures.HashList, data.structures.HashList> {
  final int parts;
  public concurrent.trie.insertion.SplitHashArray(int);
  public data.structures.HashList[] split(data.structures.HashList) throws java.lang.Exception;
  public java.lang.Object[] split(java.lang.Object) throws java.lang.Exception;
}
Compiled from "HashBitmapPair.java"
public class data.structures.HashBitmapPair {
  public data.structures.HashBitmapPair(byte[], long);
  public byte[] getHash();
  public long getBitmap();
}
Compiled from "HashList.java"
public class data.structures.HashList extends java.util.ArrayList<data.structures.HashBitmapPair> {
  public data.structures.HashList();
}
Compiled from "Schema.java"
public class data.structures.Schema implements data.structures.SchemaInterface {
  public data.structures.Schema(data.structures.Text, int, long);
  public java.util.Iterator<java.lang.Long> iterator();
  public data.structures.SchemaInterface[] split(int);
  public java.lang.String getSentence(long);
  static long access$000(data.structures.Schema);
  static long access$100(data.structures.Schema);
  static long access$200(data.structures.Schema);
}
Compiled from "Schema.java"
class data.structures.Schema$1 implements java.util.Iterator<java.lang.Long> {
  long curPos;
  final data.structures.Schema this$0;
  data.structures.Schema$1(data.structures.Schema);
  public boolean hasNext();
  public java.lang.Long next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "SchemaInterface.java"
public interface data.structures.SchemaInterface extends java.lang.Iterable<java.lang.Long> {
  public abstract data.structures.SchemaInterface[] split(int);
  public abstract java.lang.String getSentence(long);
}
Compiled from "Template.java"
public class data.structures.Template implements java.util.Map$Entry<java.lang.String, java.lang.String> {
  final java.lang.String key;
  final java.lang.String value;
  public data.structures.Template(java.lang.String, java.lang.String);
  public java.lang.String getKey();
  public java.lang.String getValue();
  public java.lang.String setValue(java.lang.String);
  public java.lang.Object setValue(java.lang.Object);
  public java.lang.Object getValue();
  public java.lang.Object getKey();
}
Compiled from "Text.java"
public class data.structures.Text {
  public final java.lang.String k;
  public final java.util.List<data.structures.Template> templates;
  public data.structures.Text(java.lang.String, java.util.List<data.structures.Template>);
  public int getMaxLength();
  public int getTemplateCount();
  public int getPosInText(int);
  public java.lang.String getTemplateContent(int, boolean);
  public int getEndIntervallMask();
}
Compiled from "Trie.java"
public class data.structures.Trie implements java.util.Collection<data.structures.HashBitmapPair> {
  public data.structures.Trie();
  public int size();
  public void clear();
  public boolean isEmpty();
  public boolean add(data.structures.HashBitmapPair);
  public boolean contains(java.lang.Object);
  public java.lang.Long getBitmap(data.structures.HashBitmapPair);
  public java.util.Iterator<data.structures.HashBitmapPair> iterator();
  public boolean containsAll(java.util.Collection<?>);
  public boolean addAll(java.util.Collection<? extends data.structures.HashBitmapPair>);
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public boolean add(java.lang.Object);
}
Compiled from "Main.java"
public class main.Main {
  public static final java.util.concurrent.ConcurrentHashMap<java.lang.String, data.structures.HashBitmapPair> hashmap;
  public static cl.niclabs.skandium.Skandium skandium;
  public main.Main();
  public static java.lang.String byteToString(byte[]);
  public static data.structures.HashList hashFromSchema(data.structures.SchemaInterface, int, int) throws java.lang.Exception;
  public static data.structures.HashList findCollisions(data.structures.HashList, int) throws java.lang.Exception;
  public static void fillTrieWithHashes(data.structures.HashList, int) throws java.lang.Exception;
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
