Compiled from "$R.java"
public class $R {
  public $R();
  public static java.lang.Object EXIST(java.lang.Object...);
}
Compiled from "ConnectionFactory.java"
public final class br.com.innovatium.mumps2java.dataaccess.ConnectionFactory {
  public static java.sql.Connection getConnection(br.com.innovatium.mumps2java.dataaccess.ConnectionType) throws java.sql.SQLException;
  static {};
}
Compiled from "ConnectionType.java"
public final class br.com.innovatium.mumps2java.dataaccess.ConnectionType extends java.lang.Enum<br.com.innovatium.mumps2java.dataaccess.ConnectionType> {
  public static final br.com.innovatium.mumps2java.dataaccess.ConnectionType JDBC;
  public static final br.com.innovatium.mumps2java.dataaccess.ConnectionType DATASOURCE;
  public static br.com.innovatium.mumps2java.dataaccess.ConnectionType[] values();
  public static br.com.innovatium.mumps2java.dataaccess.ConnectionType valueOf(java.lang.String);
  static {};
}
Compiled from "DAO.java"
public class br.com.innovatium.mumps2java.dataaccess.DAO {
  public br.com.innovatium.mumps2java.dataaccess.DAO();
  public br.com.innovatium.mumps2java.dataaccess.DAO(br.com.innovatium.mumps2java.dataaccess.ConnectionType);
  public java.util.Map<java.lang.String, java.lang.String> like(java.lang.String, java.lang.String);
  public void remove(java.lang.String, java.lang.String);
  public void insert(java.lang.String, java.lang.Object, java.lang.Object);
  public boolean hasTable(java.lang.String);
  public java.lang.Object find(java.lang.String, java.lang.String);
  public boolean createTable(java.lang.String);
}
Compiled from "Node.java"
public class br.com.innovatium.mumps2java.datastructure.Node implements java.lang.Comparable<br.com.innovatium.mumps2java.datastructure.Node> {
  final boolean isNumeric;
  public br.com.innovatium.mumps2java.datastructure.Node(java.lang.Object[], java.lang.String);
  public br.com.innovatium.mumps2java.datastructure.Node(java.lang.Object[], java.lang.Object, java.lang.String);
  public br.com.innovatium.mumps2java.datastructure.Node getParent();
  public br.com.innovatium.mumps2java.datastructure.Node getSubnode();
  public void setSubnode(br.com.innovatium.mumps2java.datastructure.Node);
  public java.lang.Object[] getSubs(int);
  public void cancelReferences();
  public java.lang.Object[] getSubs();
  public java.lang.String getKey();
  public java.lang.Object[] getSubsExceptFirst();
  public java.lang.Object getSubscript();
  public java.lang.Object getSubscriptAsString();
  public br.com.innovatium.mumps2java.datastructure.Node getNext();
  public void setNext(br.com.innovatium.mumps2java.datastructure.Node);
  public br.com.innovatium.mumps2java.datastructure.Node getPrevious();
  public void setParent(br.com.innovatium.mumps2java.datastructure.Node);
  public void setPrevious(br.com.innovatium.mumps2java.datastructure.Node);
  public boolean hasParent();
  public void addSubnode(br.com.innovatium.mumps2java.datastructure.Node);
  public br.com.innovatium.mumps2java.datastructure.Node findPrevious();
  public br.com.innovatium.mumps2java.datastructure.Node findPrevious(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node);
  public boolean hasPrevious();
  public boolean isFirstSubnode();
  public boolean isAfter(br.com.innovatium.mumps2java.datastructure.Node);
  public boolean hasNext();
  public boolean isRoot();
  public boolean hasSubnodes();
  public boolean isLeaf();
  public java.lang.Object getValue();
  public void setValue(java.lang.Object);
  public int compareTo(br.com.innovatium.mumps2java.datastructure.Node);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.util.List<br.com.innovatium.mumps2java.datastructure.Node> getFirstLevelSubnodes();
  public java.lang.Integer getStackLevel();
  public void setStackLevel(java.lang.Integer);
  public int compareTo(java.lang.Object);
}
Compiled from "OrderDataCache.java"
public class br.com.innovatium.mumps2java.datastructure.OrderDataCache {
  final java.util.Set<java.lang.String> cache;
  public br.com.innovatium.mumps2java.datastructure.OrderDataCache();
  public boolean isCached(java.lang.Object[]);
  public void add(java.lang.Object[]);
}
Compiled from "StackNode.java"
final class br.com.innovatium.mumps2java.datastructure.StackNode {
  public br.com.innovatium.mumps2java.datastructure.StackNode();
  public br.com.innovatium.mumps2java.datastructure.Node push(br.com.innovatium.mumps2java.datastructure.Node);
  public java.util.List<br.com.innovatium.mumps2java.datastructure.Node> pull(java.lang.Integer);
}
Compiled from "Tree.java"
public final class br.com.innovatium.mumps2java.datastructure.Tree extends br.com.innovatium.mumps2java.datastructure.Node {
  public br.com.innovatium.mumps2java.datastructure.Tree();
  public void stacking(java.lang.Object...);
  public boolean contains(java.lang.Object[]);
  public void unstacking();
  public void stackingExcept(java.lang.Object...);
  public int data(java.lang.Object[]);
  public void set(java.lang.Object[], java.lang.Object);
  public br.com.innovatium.mumps2java.datastructure.Node kill(java.lang.Object...);
  public java.lang.Object order(java.lang.Object[], int);
  public boolean hasPopulatedSubnode(br.com.innovatium.mumps2java.datastructure.Node);
  public boolean hasPopulatedSubnode(br.com.innovatium.mumps2java.datastructure.Node, boolean);
  public br.com.innovatium.mumps2java.datastructure.Node findNode(java.lang.Object[]);
  public br.com.innovatium.mumps2java.datastructure.Node findNode(java.lang.String);
  public java.lang.Object get(java.lang.Object...);
  public java.lang.String dump();
  public boolean isEmpty();
  public void merge(java.lang.Object[], java.lang.Object[]);
  public java.lang.Object order(java.lang.Object...);
  static java.util.Map access$200(br.com.innovatium.mumps2java.datastructure.Tree);
}
Compiled from "Tree.java"
class br.com.innovatium.mumps2java.datastructure.Tree$1 {
}
Compiled from "Tree.java"
final class br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes implements br.com.innovatium.mumps2java.datastructure.Tree$OperationOverNodes {
  final br.com.innovatium.mumps2java.datastructure.Tree this$0;
  public void operate(br.com.innovatium.mumps2java.datastructure.Node);
  br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, br.com.innovatium.mumps2java.datastructure.Tree$1);
}
Compiled from "Tree.java"
final class br.com.innovatium.mumps2java.datastructure.Tree$DumpOperationOverNodes implements br.com.innovatium.mumps2java.datastructure.Tree$OperationOverNodes {
  final br.com.innovatium.mumps2java.datastructure.Tree this$0;
  public br.com.innovatium.mumps2java.datastructure.Tree$DumpOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, java.lang.StringBuilder);
  public void operate(br.com.innovatium.mumps2java.datastructure.Node);
}
Compiled from "Tree.java"
final class br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes implements br.com.innovatium.mumps2java.datastructure.Tree$OperationOverNodes {
  final br.com.innovatium.mumps2java.datastructure.Tree this$0;
  public void operate(br.com.innovatium.mumps2java.datastructure.Node);
  br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, br.com.innovatium.mumps2java.datastructure.Tree$1);
}
Compiled from "Tree.java"
final class br.com.innovatium.mumps2java.datastructure.Tree$MergeOperationOverNodes implements br.com.innovatium.mumps2java.datastructure.Tree$OperationOverNodes {
  final br.com.innovatium.mumps2java.datastructure.Tree this$0;
  public br.com.innovatium.mumps2java.datastructure.Tree$MergeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, br.com.innovatium.mumps2java.datastructure.Tree);
  public void set(java.lang.Object[], java.lang.Object[]);
  public void operate(br.com.innovatium.mumps2java.datastructure.Node);
}
Compiled from "Tree.java"
interface br.com.innovatium.mumps2java.datastructure.Tree$OperationOverNodes {
  public abstract void operate(br.com.innovatium.mumps2java.datastructure.Node);
}
Compiled from "DataStructureUtil.java"
public final class br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil {
  public static final java.lang.String DELIMITER;
  public static java.lang.Object[] concat(java.lang.Object[], java.lang.Object[]);
  public static java.lang.Object[] concatSinceLast(java.lang.Object[], java.lang.Object[]);
  public static java.lang.Object[] concat(java.lang.Object[], java.lang.Object);
  public static java.lang.String generateKey(java.lang.Object[]);
  public static java.lang.String generateKeyOfParent(java.lang.Object[]);
  public static java.lang.String generateKeyWithoutVarName(java.lang.Object[]);
  public static java.lang.String generateKeyToLikeQuery(java.lang.Object[]);
  public static java.lang.Object[] generateSubs(java.lang.String);
  public static java.lang.Object[] generateSubs(java.lang.String, java.lang.String);
  public static java.lang.String generateTableName(java.lang.Object...);
}
Compiled from "REMOVE.java"
public interface br.com.innovatium.mumps2java.todo.REMOVE extends java.lang.annotation.Annotation {
}
Compiled from "TODO.java"
public interface br.com.innovatium.mumps2java.todo.TODO extends java.lang.annotation.Annotation {
  public abstract java.lang.String description();
}
Compiled from "AsciiFunctionTest.java"
public class com.disclinc.netmanager.function.test.AsciiFunctionTest {
  public com.disclinc.netmanager.function.test.AsciiFunctionTest();
  public void testAsciiTwoArgs();
  public void testAsciiOneArgs();
}
Compiled from "BooleanConverterFunctionTest.java"
public class com.disclinc.netmanager.function.test.BooleanConverterFunctionTest {
  public com.disclinc.netmanager.function.test.BooleanConverterFunctionTest();
  public void testFormat1();
}
Compiled from "BooleanOperatorTest.java"
public class com.disclinc.netmanager.function.test.BooleanOperatorTest {
  public com.disclinc.netmanager.function.test.BooleanOperatorTest();
  public void testAndOperatorOverIntegers();
  public void testAndOperatorOverStrings();
  public void testOrOperatorOverIntegers();
  public void testOrOperatorOverStrings();
}
Compiled from "CaseFunctionTest.java"
public class com.disclinc.netmanager.function.test.CaseFunctionTest {
  public com.disclinc.netmanager.function.test.CaseFunctionTest();
  public void testCaseFirstValidConditional();
  public void testCaseSecondValidConditional();
  public void testCaseLastValidConditional();
  public void testCaseDefaultConditional();
  public void testCaseWithNullPointer();
  public void testCaseAvoidDefaultValue();
}
Compiled from "CharacterFunctionTest.java"
public class com.disclinc.netmanager.function.test.CharacterFunctionTest {
  public com.disclinc.netmanager.function.test.CharacterFunctionTest();
  public void testSingleChar();
  public void testCharSequence();
  public void testCharSequenceAvoidingNegativeInteger();
  public void testNullCharSequence();
  public void testEmptyCharSequence();
  public void testConcatingEmptyChar();
  public void testAlphaAChar();
}
Compiled from "DataFunctionTest.java"
public class com.disclinc.netmanager.function.test.DataFunctionTest {
  public com.disclinc.netmanager.function.test.DataFunctionTest();
  public void init();
  public void testCheckingUndefinedVariableAndWhichWithoutChildren();
  public void testCheckingVariableAndWithoutChildren();
  public void testCheckingUndefinedVariableAndWithChildren();
  public void testCheckingVariableAndWithChildren();
}
Compiled from "ExtractFunctionTest.java"
public class com.disclinc.netmanager.function.test.ExtractFunctionTest {
  public com.disclinc.netmanager.function.test.ExtractFunctionTest();
  public void testExtractDefault();
  public void testExtractSomeElement();
  public void testExtractIntervalElement();
  public void testExtractNegativeStart();
  public void testExtractNegativeStartAndEnd();
  public void testExtractInvalidInterval();
  public void testNonPresenteElement();
  public void testNonPresenteElementWithNegativeIndex();
  public void testEndIndexLargerThantValueLength();
  public void testEndIndexEqualValueLength();
}
Compiled from "FNumberFunctionTest.java"
public class com.disclinc.netmanager.function.test.FNumberFunctionTest {
  public com.disclinc.netmanager.function.test.FNumberFunctionTest();
  public void testFNumber();
}
Compiled from "FindFunctionTest.java"
public class com.disclinc.netmanager.function.test.FindFunctionTest {
  public com.disclinc.netmanager.function.test.FindFunctionTest();
  public void testFindDefault();
  public void testFindStartingAtSomeIndex();
  public void testFindNotPresentSubstring();
  public void testFindStartingIndexGreaterThanStringLength();
  public void testFindLowestStartingIndex();
}
Compiled from "IsValidmumFunctionTest.java"
public class com.disclinc.netmanager.function.test.IsValidmumFunctionTest {
  public com.disclinc.netmanager.function.test.IsValidmumFunctionTest();
  public void testValidateNullPointer();
  public void testValidateInteger();
  public void testValidateDecimal();
  public void testValidateIntegerWithPlusSign();
  public void testValidateIntegerWithMinusSign();
  public void testValidateDoubleWithMinusSign();
  public void testValidateDoubleWithPlusSign();
  public void testValidateExponential();
  public void testValidateExponentialMinusSign();
  public void testValidateExponentialPlusSign();
  public void testValidateExponentialWithDotSign();
  public void testValidateNegativeExponential();
  public void testValidatePositiveExponential();
  public void testValidateExponentialWithLongIndex();
  public void testValidadeAlpha();
  public void testValidateAlphaNum();
  public void testValidateNumAlpha();
  public void testValidateDoublePoints();
  public void testValidateWithSigns();
  public void testValidateStartWithZero();
}
Compiled from "JustifyFunctionTest.java"
public class com.disclinc.netmanager.function.test.JustifyFunctionTest {
  public com.disclinc.netmanager.function.test.JustifyFunctionTest();
  public void testJustifySomeStringWithTwoParameters();
  public void testJustifySomeStringWithNegativeWidth();
  public void testJustifySomeStringWithZeroWidth();
  public void testJustifyEmptyString();
  public void testJustifyNullPointer();
  public void testJustifyIntegerValueWithOneDecimals();
  public void testJustifyDoubleValueAndBlanckSpaces();
  public void testJustifyDoubleRoundigValueAndBlanckSpaces();
  public void testJustifyDoubleRoundigValueIncreasingDecimalsAndBlanckSpaces();
  public void testJustifyStringAsNumericValue();
  public void testJustifyAlphaNumeric();
}
Compiled from "ListBuildFunctionTest.java"
public class com.disclinc.netmanager.function.test.ListBuildFunctionTest {
  public com.disclinc.netmanager.function.test.ListBuildFunctionTest();
}
Compiled from "MergeFunctionTest.java"
public class com.disclinc.netmanager.function.test.MergeFunctionTest {
  public com.disclinc.netmanager.function.test.MergeFunctionTest();
  public void testMergingTwoVariableWithoutSubscripts();
  public void testMergingTwoVariableWithSubscripts();
  public void testMergingWithUndefinedVariableWithSubscript();
  public void testMergingTwoVariableWithSubscriptsConflicting();
  public void testMergingTwiceBetweenTheSameTarget();
  public void testMergeTwoHeadsOfDifferentTypesOfVariables();
  public void testSimlpeMergeBetweenTwoDifferentTypesOfVariablesWithoutHead();
  public void testDoubleMergeBetweenTwoDifferentKindsOfVariables();
}
Compiled from "NumberConverterFunctionTest.java"
public class com.disclinc.netmanager.function.test.NumberConverterFunctionTest {
  public com.disclinc.netmanager.function.test.NumberConverterFunctionTest();
  public void testFormatInteger();
  public void testFormatDecimal();
  public void testFormatAlpha();
  public void testFormatAlphaNum();
  public void testFormatNumAlpha();
  public void testFormatDoublePoints();
  public void testFormatSign();
  public void testFormatStartWithZero();
}
Compiled from "OrderFunctionTest.java"
public class com.disclinc.netmanager.function.test.OrderFunctionTest {
  public com.disclinc.netmanager.function.test.OrderFunctionTest();
  public void testSearchingVariableValue();
  public void testOrderFirstLevel();
  public void testOrderFirstLevelInverse();
  public void testOrderOfAllPublicVariablesOnMemory();
}
Compiled from "PieceFunctionTest.java"
public class com.disclinc.netmanager.function.test.PieceFunctionTest {
  public com.disclinc.netmanager.function.test.PieceFunctionTest();
  public void testPieceDefault();
  public void testPieceOneElement();
  public void testPieceIntervalElements();
  public void testPieceConcatenation();
  public void testSettingValueToPiecePosition();
  public void testSettingValueToNullPiecePosition();
  public void testSettingNullValueToPiecePosition();
}
Compiled from "ReplaceFunctionTest.java"
public class com.disclinc.netmanager.function.test.ReplaceFunctionTest {
  public com.disclinc.netmanager.function.test.ReplaceFunctionTest();
  public void testReplaceSubstring();
  public void testTranslateSubstring();
  public void testTranslateSubstringUsingNewSubstringDifferentLength();
  public void testTranslateNullSubstring();
  public void testTranslateSubstringEmptyOldSubstring();
  public void testTranslateSubstringBlankOldSubstring();
  public void testCovertToUppercase();
  public void testCovertToLowercase();
  public void testCovertUsingModeNotDefined();
}
Compiled from "Select2FunctionTest.java"
public class com.disclinc.netmanager.function.test.Select2FunctionTest {
  public com.disclinc.netmanager.function.test.Select2FunctionTest();
  public void testSelectSomeValidConditional();
}
Compiled from "SelectFunctionTest.java"
public class com.disclinc.netmanager.function.test.SelectFunctionTest {
  public com.disclinc.netmanager.function.test.SelectFunctionTest();
  public void testSelectSomeValidConditional();
  public void testSelectNoValidConditional();
  public void testSelectNullConditionalSequence();
  public void testSelectEmptyConditionalSequence();
}
Compiled from "TranslateFunctionTest.java"
public class com.disclinc.netmanager.function.test.TranslateFunctionTest {
  public com.disclinc.netmanager.function.test.TranslateFunctionTest();
  public void testJustifyTwoArgs();
  public void testJustifyThreeArgs();
}
Compiled from "EscapeURLTest.java"
public class com.disclinc.netmanager.mPage.test.EscapeURLTest {
  public com.disclinc.netmanager.mPage.test.EscapeURLTest();
  public void UrlStringThreeParam();
}
Compiled from "mClassChild.java"
public class com.disclinc.netmanager.mParameter.test.mClassChild extends mLibrary.mClass {
  public static java.lang.String p_LOGINSUBMIT;
  public com.disclinc.netmanager.mParameter.test.mClassChild();
  static {};
}
Compiled from "mParameterGet.java"
public class com.disclinc.netmanager.mParameter.test.mParameterGet {
  public com.disclinc.netmanager.mParameter.test.mParameterGet();
  public void testGetParameter() throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.NoSuchFieldException, java.lang.SecurityException;
}
Compiled from "ExecTesteNew.java"
public class com.disclinc.netmanager.script.test.ExecTesteNew {
  public com.disclinc.netmanager.script.test.ExecTesteNew();
  public static void main(java.lang.String[]);
}
Compiled from "ScriptTest.java"
public class com.disclinc.netmanager.script.test.ScriptTest {
  public com.disclinc.netmanager.script.test.ScriptTest();
}
Compiled from "TesteNew.java"
public class com.disclinc.netmanager.script.test.TesteNew extends mLibrary.mClass {
  public com.disclinc.netmanager.script.test.TesteNew();
  public void main();
  public void labelNewAll();
  public java.lang.Object sucessivosNews(java.lang.Object...);
}
Compiled from "DataStructureUtilTest.java"
public class com.disclinc.netmanager.variable.test.DataStructureUtilTest {
  public com.disclinc.netmanager.variable.test.DataStructureUtilTest();
  public void testConcat();
  public void testConcatLastElement();
  public void testConcatSinceLastElement();
  public void testGenerateKeyOfTheSubscripts();
  public void testGenerateKeyOfParentSubscripts();
  public void testGenerateKeyToLikeQuery();
}
Compiled from "DispatchMethodsTest.java"
public class com.disclinc.netmanager.variable.test.DispatchMethodsTest {
  public com.disclinc.netmanager.variable.test.DispatchMethodsTest();
  public void init();
  public void testMethodWithReturnAndNoCallingNewOperator();
  public void testMethodCallingNewOperatorAndGetVariableUnchanged();
  public void test();
  public void testRecuperarValorNovoDepois3ChamadasDoOperadorNew();
}
Compiled from "GlobalVariableTest.java"
public class com.disclinc.netmanager.variable.test.GlobalVariableTest {
  public com.disclinc.netmanager.variable.test.GlobalVariableTest();
}
Compiled from "MContextUsingInDiscAccessTest.java"
public class com.disclinc.netmanager.variable.test.MContextUsingInDiscAccessTest {
  public com.disclinc.netmanager.variable.test.MContextUsingInDiscAccessTest();
}
Compiled from "MContextUsingInMemoryAccessTest.java"
public class com.disclinc.netmanager.variable.test.MContextUsingInMemoryAccessTest {
  public com.disclinc.netmanager.variable.test.MContextUsingInMemoryAccessTest();
  public void init();
  public void testSettingVariableValueInTwoSteps();
  public void testSettingVariableValueInSingleStep();
  public void testLocalVariableAccess();
  public void testPublicVariableAccess();
}
Compiled from "Macros.java"
public final class com.disclinc.netmanager.variable.test.Macros {
  public com.disclinc.netmanager.variable.test.Macros();
  public static int $$$diasNoMes();
  public static java.lang.Object $$$recuperarValorNuloDepoisDoOperadorNew(mLibrary.mContext);
  public static java.lang.Object $$$recuperarValorInalteradoDepoisDoOperadorNew(mLibrary.mContext);
  public static java.lang.Object $$$recuperarValorNovoDepois3ChamadasDoOperadorNew(mLibrary.mContext);
  public static void $$$operadorNewChamada1(mLibrary.mContext);
  public static void $$$operadorNewChamada2(mLibrary.mContext);
  public static void $$$operadorNewChamada3(mLibrary.mContext);
}
Compiled from "OrderCacheTest.java"
public class com.disclinc.netmanager.variable.test.OrderCacheTest {
  public com.disclinc.netmanager.variable.test.OrderCacheTest();
  public void testInsertInCache();
  public void testIsSomeChildInCache();
  public void testIsAllInCache();
  public void testIsSomeInCache();
  public void testFlowOfCasheIncrease();
}
Compiled from "StackingVariableAndNewOperatorTest.java"
public class com.disclinc.netmanager.variable.test.StackingVariableAndNewOperatorTest {
  public com.disclinc.netmanager.variable.test.StackingVariableAndNewOperatorTest();
  public void init();
  public void testStackingMultipleVariableThroughNewExceptionsOperatorCalling();
  public void testStackingMultipleVariableThroughNewOperatorCalling();
  public void testStackingMultipleVariableThroughNewOperatorMultipleCalling();
  public void testStackingVariableThroughNewExceptionsOperatorCalling();
  public void testStackingVariableThroughNewOperator();
  public void testStackingVariableThroughNewOperatorMultipleCalling();
  public void testStakingVariableAndSettingNewValue();
  public void testUnstackingMultipleVariableThroughNewExceptionsOperatorCalling();
  public void testUnstackingVariableThroughOldOperator();
}
Compiled from "TreeTest.java"
public class com.disclinc.netmanager.variable.test.TreeTest {
  public com.disclinc.netmanager.variable.test.TreeTest();
  public void init();
  public void testRecoveringVariable();
  public void testRemoveNodes();
}
Compiled from "VariableThroughReferenceOrValueTest.java"
public class com.disclinc.netmanager.variable.test.VariableThroughReferenceOrValueTest {
  public com.disclinc.netmanager.variable.test.VariableThroughReferenceOrValueTest();
  public void init();
  public void testUsageVariableThroughReferece();
  public void testUsageVariableThroughRefereceAndCheckingStackedValue();
  public void testUsageVariableThroughValue();
}
Compiled from "$R.java"
public class mLibrary.$R extends mLibrary.mClass {
  public mLibrary.$R();
  public static java.lang.Object EXIST(java.lang.Object...);
}
Compiled from "BooleanObject.java"
public class mLibrary.BooleanObject {
  public static mLibrary.BooleanObject valueOf(boolean, java.lang.Object);
  public java.lang.Object getValue();
  public boolean isTrue();
}
Compiled from "ListObject.java"
public final class mLibrary.ListObject {
  static mLibrary.ListObject getInstance();
  static mLibrary.ListObject concat(mLibrary.ListObject...);
  static mLibrary.ListObject add(java.lang.Object...);
  static int find(java.lang.Object, java.lang.Object);
  public int find(java.lang.Object);
  mLibrary.ListObject sublist(int, int);
  public java.lang.Object element(int);
  public java.lang.Object firstElement();
  public int length();
  public java.lang.String toString();
}
Compiled from "mAbstract.java"
public class mLibrary.mAbstract extends mLibrary.mClass {
  public mLibrary.mAbstract();
}
Compiled from "mClass.java"
public class mLibrary.mClass {
  public mLibrary.mContext m$;
  public mLibrary.mClass();
  public mLibrary.mContext getContext();
  public mLibrary.mVar m$piece(mLibrary.mVar, java.lang.Object, java.lang.Object);
  public mLibrary.mVar m$piece(mLibrary.mVar, java.lang.Object, java.lang.Object, java.lang.Object);
  public void setContext(mLibrary.mContext);
}
Compiled from "mCmd.java"
public class mLibrary.mCmd extends mLibrary.mParent {
  public mLibrary.mCmd(mLibrary.mContext);
  public void Close(java.lang.Object);
  public java.lang.String defineMethodName(java.lang.String);
  public void Do(mLibrary.mClass, java.lang.String, java.lang.Object...);
  public void Do(java.lang.Object, java.lang.String, java.lang.Object);
  public void Do(java.lang.Object);
  public void Do(java.lang.String);
  public void Do(java.lang.String, java.lang.Object...);
  public void Goto(java.lang.Object);
  public void Hang(java.lang.Object);
  public boolean isIndirectionExecution(java.lang.String);
  public boolean isMethodExecution(java.lang.String);
  public void Job(java.lang.String, java.lang.String);
  public void Lock(java.lang.String, java.lang.String, java.lang.String);
  public void LockInc(mLibrary.mVar, int);
  public void Merge(mLibrary.mVar, mLibrary.mVar);
  public void Open(java.lang.Object);
  public void Open(java.lang.Object, java.lang.String, int);
  public void Open(java.lang.Object, java.lang.String, java.lang.Object, int);
  public void Read(java.lang.Object...);
  public void SQL();
  public void Unlock(mLibrary.mVar);
  public void Unlock(mLibrary.mVar, java.lang.String);
  public void Unlock(java.lang.String);
  public void Use(java.lang.Object);
  public void Write(java.lang.Object...);
  public void WriteHtml(java.lang.Object...);
  public void WriteJS(java.lang.Object...);
  public void Xecute(java.lang.Object);
  public void Lock(mLibrary.mVar);
  public void Lock(mLibrary.mVar, int);
  public void Job(java.lang.String);
}
Compiled from "mCmd.java"
class mLibrary.mCmd$JobCmd implements java.lang.Runnable {
  final mLibrary.mCmd this$0;
  public mLibrary.mCmd$JobCmd(mLibrary.mCmd, java.lang.String);
  public void run();
}
Compiled from "mContent.java"
public class mLibrary.mContent {
  public mLibrary.mContent();
  public java.lang.Object AtEnd();
  public java.lang.Object Read(mLibrary.mVar);
}
Compiled from "mContext.java"
public class mLibrary.mContext {
  public int xecuteCount;
  public mLibrary.mFnc Fnc;
  public mLibrary.mCmd Cmd;
  public mLibrary.mContext(java.io.Writer);
  public mLibrary.mContext();
  public java.io.Writer getWriter();
  public mLibrary.mData getmDataPublic();
  public boolean hasPublicVariables();
  public mLibrary.mData getmDataGlobal();
  public mLibrary.mData getmDataLocal();
  public mSystem.mSystem getSystem();
  public java.lang.String dump();
  public java.lang.Object dispatch(mLibrary.mClass, java.lang.String, java.lang.Object...);
  public java.lang.Object fnc$(java.lang.Object...);
  public java.lang.String defineMethodName(mLibrary.mClass, java.lang.String);
  public void populateParameter(java.util.Map<java.lang.String, java.lang.String[]>);
  public mLibrary.mSession getSession();
  public mLibrary.mRequest getRequest();
  public void setSession(mLibrary.mSession);
  public void setRequest(mLibrary.mRequest);
  public mLibrary.mVar indirectVar(java.lang.Object);
  public mLibrary.mVar lastVar(java.lang.Object...);
  public void merge(mLibrary.mVar, mLibrary.mVar);
  public void newVar(mLibrary.mVar...);
  public void newVarExcept(mLibrary.mVar...);
  public mLibrary.mVar newVarRef(java.lang.String, java.lang.Object);
  public mLibrary.mVar newVarRef(java.lang.String, java.lang.Object, java.lang.Object);
  public void oldvar(int);
  public void oldvar();
  public mLibrary.mVar pieceVar(mLibrary.mVar, java.lang.Object);
  public mLibrary.mVar pieceVar(mLibrary.mVar, java.lang.Object, java.lang.Object);
  public mLibrary.mVar pieceVar(mLibrary.mVar, java.lang.Object, java.lang.Object, java.lang.Object);
  public mLibrary.mVar var(java.lang.Object...);
  public mLibrary.mVar varRef(java.lang.String, java.lang.Object);
  public mLibrary.mVar varRef(java.lang.String, java.lang.Object, java.lang.Object);
  public mLibrary.mVar prop(java.lang.Object, java.lang.String);
  public mLibrary.mParameter param(mLibrary.mClass, java.lang.String);
}
Compiled from "mData.java"
public class mLibrary.mData {
  java.lang.Object[] currentSubs;
  br.com.innovatium.mumps2java.dataaccess.DAO dao;
  final br.com.innovatium.mumps2java.datastructure.Tree tree;
  final java.util.Set<java.lang.String> cacheOrderFunction;
  final br.com.innovatium.mumps2java.datastructure.OrderDataCache orderDataCache;
  public mLibrary.mData();
  public java.lang.Object get(java.lang.Object...);
  public java.lang.Object[] getCurrentSubs();
  public boolean isEmpty();
  public void set(java.lang.Object);
  public void merge(java.lang.Object[], java.lang.Object[]);
  public void stacking(java.lang.Object...);
  public void stackingExcept(java.lang.Object...);
  public void unstacking();
  public java.lang.String dump();
  public void kill(java.lang.Object...);
  public int data(java.lang.Object...);
  public java.lang.Object order(java.lang.Object[], int);
  public java.lang.Object order(java.lang.Object[]);
  public mLibrary.mData subs(java.lang.Object...);
}
Compiled from "mFnc.java"
public final class mLibrary.mFnc extends mLibrary.mParent {
  public static java.lang.Object $ascii(java.lang.Object);
  public static java.lang.Object $ascii(java.lang.Object, java.lang.Object);
  public static java.lang.Object $c(java.lang.Object...);
  public static java.lang.Object $case(java.lang.Object...);
  public static java.lang.Object $char(java.lang.Object...);
  public static mLibrary.ListObject $concat(mLibrary.ListObject...);
  public static boolean $d(mLibrary.mVar);
  public static int $data(mLibrary.mVar);
  public static java.lang.String $extract(java.lang.Object);
  public static java.lang.String $extract(java.lang.Object, java.lang.Object);
  public static java.lang.String $extract(java.lang.Object, java.lang.Object, java.lang.Object);
  public static int $find(java.lang.Object, java.lang.Object);
  public static int $find(java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object $fnumber(java.lang.Object, java.lang.String);
  public static java.lang.Object $fnumber(java.lang.Object, java.lang.String, java.lang.Object);
  public static java.lang.Object $get(java.lang.Object);
  public static java.lang.Object $get(java.lang.Object, java.lang.Object);
  public static java.lang.Object $horolog();
  public static java.lang.Object $increment(mLibrary.mVar);
  public static java.lang.Object $increment(mLibrary.mVar, java.lang.Object);
  public static java.lang.Object $io();
  public static java.lang.Object $isobject(java.lang.Object);
  public static boolean $isvalidnum(java.lang.Object);
  public static java.lang.Object $job();
  public static java.lang.Object $justify(java.lang.Object, int, java.lang.Object);
  public static java.lang.Object $justify(java.lang.Object, java.lang.Object);
  public static java.lang.Object $justify(java.lang.String, int);
  public static mLibrary.ListObject $lb(java.lang.Object...);
  public static java.lang.Object $length(java.lang.Object);
  public static java.lang.Object $length(java.lang.Object, java.lang.Object);
  public static mLibrary.ListObject $list(mLibrary.ListObject, int, int);
  public static mLibrary.ListObject $listbuild(java.lang.Object...);
  public static java.lang.Object $listfind(java.lang.Object, java.lang.Object);
  public static java.lang.Object $listget(java.lang.Object...);
  public static java.lang.Object $listget(java.lang.Object);
  public static java.lang.Object $listlength(java.lang.Object);
  public static java.lang.Object $listvalid(java.lang.Object);
  public static java.lang.Object $name(java.lang.Object, java.lang.Object);
  public static java.lang.Object $order(mLibrary.mVar);
  public static java.lang.Object $order(mLibrary.mVar, java.lang.Object);
  public static java.lang.Object $piece(java.lang.Object, java.lang.Object);
  public static java.lang.String $piece(java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object $piece(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object $principal();
  public static java.lang.Object $qlength(java.lang.Object);
  public static mLibrary.ListObject $qsubscript(java.lang.Object, java.lang.Object);
  public static java.lang.Object $query(mLibrary.mVar);
  public static java.lang.Object $query(mLibrary.mVar, java.lang.Object);
  public static java.lang.Object $query(mLibrary.mVar, java.lang.Object, mLibrary.mVar);
  public static java.lang.Object $random(java.lang.Object);
  public static java.lang.Object $replace(java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.String $replace(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String $reverse(java.lang.Object);
  public static java.lang.Object $select(mLibrary.BooleanObject...);
  public static java.lang.Object $select(java.lang.Object...);
  public static java.lang.Object $setpiece(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object $stack(java.lang.Object...);
  public static java.lang.Object $storage();
  public static java.lang.Object $test();
  public static java.lang.Object $tlevel();
  public static java.lang.Object $translate(java.lang.Object, java.lang.Object);
  public static java.lang.Object $translate(java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object $zabs(java.lang.Object);
  public static java.lang.Object $zconvert(java.lang.Object, java.lang.String);
  public static java.lang.Object $zconvert(java.lang.Object, java.lang.String, java.lang.String);
  public static java.lang.Object $zcrc(java.lang.Object, int);
  public static java.lang.Object $zdate(java.lang.Object);
  public static java.lang.Object $zdate(java.lang.Object, java.lang.Object);
  public static java.lang.Object $zdateh(java.lang.Object);
  public static java.lang.Object $zdateh(java.lang.Object, java.lang.Object);
  public static java.lang.Object $zdateh(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object $zdatetime(java.lang.Object...);
  public static java.lang.Object $zdatetimeh(java.lang.Object, int);
  public static java.lang.Object $zeof();
  public static java.lang.Object $zerror();
  public static java.lang.Object $zhex(java.lang.Object);
  public static java.lang.Object $zhorolog();
  public static java.lang.Object $zjob();
  public static java.lang.Object $znspace();
  public static java.lang.Object $zorder(mLibrary.mVar);
  public static java.lang.Object $zsearch(java.lang.Object);
  public static java.lang.Object $zstrip(java.lang.Object, java.lang.Object);
  public static java.lang.Object $zstrip(java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object $zstrip(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.String $ztimestamp();
  public static java.lang.String $zts();
  public static mLibrary.ListObject $zu(int);
  public static java.lang.Object $zutil(int);
  public static java.lang.Object $zutil(int, java.lang.Object...);
  public static java.lang.Object $zutil(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object $zversion();
  public static java.lang.Boolean booleanConverter(java.lang.Object);
  public static java.lang.Double castDouble(java.lang.Object);
  public static java.lang.Integer castInt(java.lang.Object);
  public static java.lang.Integer[] castIntArray(java.lang.Object...);
  public static java.lang.String castString(java.lang.Object);
  public static java.lang.String characterImpl(java.lang.Integer...);
  public static java.lang.String extractImpl(java.lang.String, int, int);
  public static int findImpl(java.lang.String, java.lang.String, int);
  public static java.lang.String generateString(java.lang.Object[], java.lang.String);
  public static java.lang.String generateString(java.lang.Object[], java.lang.String, boolean);
  public static java.lang.Integer integerConverter(java.lang.Object);
  public static java.lang.Object list(mLibrary.ListObject);
  public static java.lang.Object list(mLibrary.ListObject, int);
  public static int listData(mLibrary.ListObject, int);
  public static java.lang.Object listGet(mLibrary.ListObject, int, java.lang.String);
  public static java.lang.Double numberConverter(java.lang.Object);
  public static java.lang.String pieceImpl(java.lang.String, java.lang.String, int);
  public static java.lang.String pieceImpl(java.lang.String, java.lang.String, int, int);
  public static java.lang.String setPieceImpl(java.lang.String, java.lang.String, java.lang.Integer, java.lang.Object);
  public static java.lang.String translateImpl(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.Object zconvert(java.lang.Object, java.lang.Object);
  public static java.lang.String zconvertImpl(java.lang.String, java.lang.String);
  public mLibrary.mFnc(mLibrary.mContext);
  public java.lang.Object $ztrap();
  public java.lang.Object $zversion(int);
  public java.lang.Object length(java.lang.Object);
  public java.lang.Object length(java.lang.Object, java.lang.Object);
  public int lengthImpl(java.lang.String);
  public java.lang.Object lengthImpl(java.lang.String, java.lang.String);
  public java.lang.String pieceImpl(java.lang.String, java.lang.String);
  public java.lang.Object $zbitget(java.lang.Object, int);
  public java.lang.Object $zboolean(java.lang.Object, int, int);
  public java.lang.Object $ztime(java.lang.String, int);
  public java.lang.Object $text(java.lang.Object);
  public java.lang.Object $zf(java.lang.Object, java.lang.Object);
  public java.lang.Object $zobjproperty(java.lang.Object, java.lang.Object);
  public java.lang.Object $zobjclassmethod(java.lang.Object, java.lang.String, java.lang.Object);
  public java.lang.Object $ztime(java.lang.Object, int);
  public java.lang.Object $view(java.lang.Object, java.lang.Object, int);
  public java.lang.Object $ztimeh(java.lang.Object, int, java.lang.String);
}
Compiled from "mFncUtil.java"
public final class mLibrary.mFncUtil {
  public static java.lang.Object[] concat(java.lang.Object[], java.lang.Object[]);
  public static java.lang.Object[] concatSinceLastSubscript(java.lang.Object[], java.lang.Object[]);
  public static java.lang.Boolean booleanConverter(java.lang.Object);
  public static java.lang.Integer integerConverter(java.lang.Object);
  public static java.lang.Double castDouble(java.lang.Object);
  public static java.lang.Integer castInt(java.lang.Object);
  public static java.lang.Integer[] castIntArray(java.lang.Object...);
  public static java.lang.String castString(java.lang.Object);
  public static java.lang.String characterImpl(java.lang.Integer...);
  public static int findImpl(java.lang.String, java.lang.String, int);
  public static java.lang.Object list(mLibrary.ListObject);
  public static java.lang.Object list(mLibrary.ListObject, int);
  public static int listData(mLibrary.ListObject, int);
  public static java.lang.Object listGet(mLibrary.ListObject, int, java.lang.String);
  public static java.lang.Double dateMumpsToJava(java.lang.Object);
  public static java.lang.Double dateJavaToMumps(java.lang.Object);
  public static java.lang.String dateCodeFormatMumpsToJava(java.lang.Object);
  public static java.lang.Double numberConverter(java.lang.Object);
  public static java.lang.String pieceImpl(java.lang.String, java.lang.String);
  public static java.lang.String pieceImpl(java.lang.String, java.lang.String, int);
  public static java.lang.String pieceImpl(java.lang.String, java.lang.String, int, int);
  public static java.lang.String setPieceImpl(java.lang.String, java.lang.String, java.lang.Integer, java.lang.String);
  public static java.lang.String setPieceImpl(java.lang.String, java.lang.String, java.lang.Integer, java.lang.Object);
  public static java.lang.String translateImpl(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.Object zconvert(java.lang.Object, java.lang.Object);
  public static java.lang.String zconvertImpl(java.lang.String, java.lang.String);
  public java.lang.Object length(java.lang.Object);
  public java.lang.Object length(java.lang.Object, java.lang.Object);
  public int lengthImpl(java.lang.String);
  public java.lang.Object lengthImpl(java.lang.String, java.lang.String);
  public static java.lang.String toString(java.lang.Object);
  public static java.lang.String round(java.lang.Double, int);
}
Compiled from "mInclude.java"
public abstract class mLibrary.mInclude {
  public mLibrary.mInclude();
  public static java.lang.Object fnc$(java.lang.Object, java.lang.Object);
  public static java.lang.Object fnc$(java.lang.String, java.lang.Object, java.lang.Object);
  public static java.lang.Object fnc$(java.lang.String, java.lang.Object);
  public static java.lang.Object fnc$(java.lang.String, java.lang.Object, java.lang.String, java.lang.String);
  public static void cmd$Do(java.lang.String, java.lang.Object);
  public static void cmd$Do(mLibrary.mContext, java.lang.String, java.lang.Object);
  public static void cmd$Do(java.lang.String, int, int);
  public static void cmd$Write(java.lang.Object);
  public static void cmd$Do(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object);
  public static void cmd$Do(java.lang.String);
  public static java.lang.Object fnc$(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object fnc$(java.lang.String);
  public static java.lang.Object fnc$(java.lang.String, java.lang.String, java.lang.Object, int);
  public static java.lang.Object fnc$(java.lang.String, mLibrary.mVar);
  public static void cmd$Do(java.lang.String, java.lang.Object, java.lang.Object);
  public static java.lang.Object fnc$(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public static void cmd$Do(java.lang.Object...);
  public static void cmd$Write(java.lang.Object...);
  public static void cmd$Write(java.lang.String);
  public static mLibrary.mVar m$piece(mLibrary.mVar, java.lang.Object, java.lang.Object);
}
Compiled from "mMultiDimensional.java"
public class mLibrary.mMultiDimensional {
  public mLibrary.mMultiDimensional();
}
Compiled from "mOp.java"
public final class mLibrary.mOp {
  public static boolean Not(java.lang.Object);
  public static java.lang.Object Positive(java.lang.Object);
  public static java.lang.Object Negative(java.lang.Object);
  public static boolean Logical(java.lang.Object);
  public static boolean Equal(java.lang.Object, java.lang.Object);
  public static boolean NotEqual(java.lang.Object, java.lang.Object);
  public static java.lang.Object Concat(java.lang.Object, java.lang.Object);
  public static boolean SortsAfter(java.lang.Object, java.lang.Object);
  public static boolean Greater(java.lang.Object, java.lang.Object);
  public static java.lang.Object Subtract(java.lang.Object, java.lang.Object);
  public static java.lang.Object Divide(java.lang.Object, java.lang.Object);
  public static boolean GreaterOrEqual(java.lang.Object, java.lang.Object);
  public static boolean LessOrEqual(java.lang.Object, java.lang.Object);
  public static boolean Contains(java.lang.Object, java.lang.Object);
  public static java.lang.Object Multiply(java.lang.Object, java.lang.Object);
  public static java.lang.Object Add(java.lang.Object, java.lang.Object);
  public static java.lang.Object Modulus(java.lang.Object, java.lang.Object);
  public static java.lang.Object IntegerDivide(java.lang.Object, java.lang.Object);
  public static boolean Less(java.lang.Object, java.lang.Object);
  public static java.lang.Boolean Match(java.lang.Object, java.lang.Object);
  public static boolean NotLess(java.lang.Object, java.lang.Object);
  public static boolean NotGreater(java.lang.Object, java.lang.Object);
  public static boolean Or(java.lang.Object, java.lang.Object);
  public static boolean NotContains(java.lang.Object, java.lang.Object);
  public static boolean And(java.lang.Object, java.lang.Object);
}
Compiled from "mPage.java"
public class mLibrary.mPage extends mLibrary.mClass {
  public mLibrary.mPage();
  public static java.lang.Object EscapeURL(java.lang.Object);
  public static java.lang.String Encrypt(java.lang.String);
  public static java.lang.String Decrypt(java.lang.String);
  public static java.lang.String HyperEventCall(java.lang.String, java.lang.String, java.lang.Integer);
  public static java.lang.Object UnescapeURL(java.lang.Object);
  public static java.lang.Object QuoteJS(java.lang.Object);
}
Compiled from "mParameter.java"
public class mLibrary.mParameter {
  public mLibrary.mParameter(java.lang.reflect.Field);
  public java.lang.Object get();
}
Compiled from "mParent.java"
public class mLibrary.mParent {
  protected static mLibrary.mContext m$;
  public mLibrary.mParent(mLibrary.mContext);
}
Compiled from "mPersistent.java"
public class mLibrary.mPersistent extends mLibrary.mClass {
  public mLibrary.mPersistent();
}
Compiled from "mPieceVar.java"
public class mLibrary.mPieceVar extends mLibrary.mVar {
  public mLibrary.mPieceVar(mLibrary.mVar, java.lang.Object, java.lang.Object);
  public void set(java.lang.Object);
}
Compiled from "mRegExConverter.java"
public class mLibrary.mRegExConverter {
  public mLibrary.mRegExConverter(java.lang.String);
  public static java.lang.String convertPattern(java.lang.String);
}
Compiled from "mRequest.java"
public class mLibrary.mRequest {
  public mLibrary.mRequest(java.util.Map<java.lang.String, java.lang.String[]>);
  public void populateParameter(java.util.Map<java.lang.String, java.lang.String[]>);
  public mLibrary.mVar getCgiEnvs(java.lang.Object);
  public mLibrary.mVar getCgiEnvs(java.lang.Object, java.lang.Object);
  public java.util.Map<java.lang.String, java.lang.String[]> getCgiEnvs();
  public void setCgiEnvs(java.util.Map<java.lang.String, java.lang.String[]>);
  public mLibrary.mVar varData(java.lang.Object...);
  public java.lang.Object getData(java.lang.Object...);
  public void setData(java.lang.Object, java.lang.Object, java.lang.Object);
  public void killData(java.lang.Object, int);
  public void setCgiEnvs(java.lang.String, java.lang.Object);
  public mLibrary.mContent getContent();
  public java.lang.Object getURL();
  public java.lang.Object getCgiEnv(java.lang.Object, java.lang.Object);
}
Compiled from "mSession.java"
public class mLibrary.mSession {
  public mLibrary.mSession(java.util.Map<java.lang.String, java.lang.String[]>);
  public java.lang.Object getSessionId();
  public void setSessionId(java.lang.String);
  public void populateParameter(java.util.Map<java.lang.String, java.lang.String[]>);
  public mLibrary.mVar getData(java.lang.Object...);
  public void setData(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object getLogin(java.lang.Object, java.lang.Object, int);
  public java.lang.Object getAppTimeout();
}
Compiled from "mVar.java"
public class mLibrary.mVar {
  public mLibrary.mVar(java.lang.Object[], mLibrary.mData);
  public int getType();
  public boolean isSameType(mLibrary.mVar);
  public java.lang.Object order(int);
  public java.lang.Object order();
  public void set(java.lang.Object);
  public java.lang.Object get();
  public void kill();
  public int data();
  public int data(int);
  public mLibrary.mVar var(java.lang.Object...);
  public mLibrary.mVar lastVar(java.lang.Object...);
  public java.lang.String getName();
  public java.lang.Object[] getParameters();
  public java.lang.Object[] getSubs();
  public mLibrary.mData getmData();
  public mLibrary.mClass getORef();
}
Compiled from "mZStripParser.java"
public class mLibrary.mZStripParser {
  public mLibrary.mZStripParser(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String zstrip(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
}
Compiled from "Encryption.java"
public class mSystem.Encryption extends mLibrary.mParent {
  public mSystem.Encryption(mLibrary.mContext);
  public java.lang.Object Base64Decode(java.lang.Object);
  public java.lang.Object Base64Encode(java.lang.Object);
}
Compiled from "License.java"
public class mSystem.License extends mLibrary.mParent {
  public mSystem.License(mLibrary.mContext);
  public static java.lang.Object LUConsumed();
  public static java.lang.Object GetUserId();
  public static java.lang.Object MaxConnections();
  public static java.lang.Object ConnectionCount(java.lang.Object);
  public static java.lang.Object Login(java.lang.Object);
  public static java.lang.Object LUMaxConsumed();
  public static void DeferUserIdentification(java.lang.Object);
}
Compiled from "OBJ.java"
public class mSystem.OBJ {
  public mSystem.OBJ();
  public java.lang.Object New(java.lang.Object);
  public java.lang.Object OpenId(java.lang.Object, java.lang.Object);
}
Compiled from "Process.java"
public class mSystem.Process extends mLibrary.mParent {
  public mSystem.Process(mLibrary.mContext);
  public static java.lang.Object $OpenId(java.lang.Object);
}
Compiled from "Status.java"
public class mSystem.Status extends mLibrary.mParent {
  public mSystem.Status(mLibrary.mContext);
  public static void DecomposeStatus(java.lang.Object, mLibrary.mVar);
  public java.lang.Object Error(int, java.lang.Object, java.lang.String, java.lang.String);
}
Compiled from "Version.java"
public class mSystem.Version extends mLibrary.mParent {
  public mSystem.Version(mLibrary.mContext);
  public static java.lang.Object GetOS();
  public static java.lang.Object GetNumber();
}
Compiled from "mSystem.java"
public class mSystem.mSystem extends mLibrary.mParent {
  public mSystem.mSystem(mLibrary.mContext);
  public mSystem.Status getStatus();
  public void setStatus(mSystem.Status);
  public mSystem.License getLicense();
  public void setLicense(mSystem.License);
  public mSystem.Encryption getEncryption();
  public void setEncryption(mSystem.Encryption);
  public mSystem.Process getProcess();
  public void setProcess(mSystem.Process);
  public mSystem.Version getVersion();
  public void setVersion(mSystem.Version);
  public mSystem.OBJ getOBJ();
}
