Compiled from "SQlite.java"
public class SQLite.SQlite {
  public SQLite.SQlite();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "CoursePrefTest.java"
public class coursescheduleapp.CoursePrefTest extends junit.framework.TestCase {
  coursescheduleapp.model.CoursePref pref;
  public coursescheduleapp.CoursePrefTest();
  public void testSetCourseSelection();
  public void testConstructor();
  public void testGetEquivCourses();
  public void testGetCourseSelection();
  public void testRemoveCourseSelection();
  public void testAddInstructorPref();
  public void testRemoveInstructorPref();
  public void testGetInstructorPref();
  public void testGetAllCourses();
}
Compiled from "CourseSelectionTest.java"
public class coursescheduleapp.CourseSelectionTest extends junit.framework.TestCase {
  coursescheduleapp.model.CourseSelection select;
  java.util.Set<java.lang.String> instructors;
  java.util.List<coursescheduleapp.model.Course> courses;
  java.util.Map<java.lang.String, java.lang.Object> info;
  java.util.Map<java.lang.String, java.lang.Object> info2;
  java.util.ArrayList<java.lang.String> ins;
  java.util.ArrayList<java.lang.String> ins2;
  java.lang.String day;
  java.lang.String time;
  java.lang.Integer CRN;
  public coursescheduleapp.CourseSelectionTest();
  public void testSetCourse();
  public void testGetCourse();
  public void testGetNumCourses();
  public void testSetInstructorPref();
  public void testGetInstrucPref();
  public void testGetNumInstructorPref();
  public void testAddInstructorPref();
  public void testRemoveInstructorPref();
  public void testRemoveCourse_CRN();
  public void testClearSelection();
  public void testHasCourse();
  public void testAddCourse();
  public void testRemoveCourse_Course();
}
Compiled from "CourseTest.java"
public class coursescheduleapp.CourseTest {
  coursescheduleapp.model.Course blank;
  coursescheduleapp.model.Course filled;
  java.util.ArrayList<java.lang.String> ins;
  java.lang.String day;
  java.lang.String time;
  java.lang.String CRN;
  java.util.TreeMap<java.lang.String, java.lang.Object> info;
  public coursescheduleapp.CourseTest();
  public void testGetCourseInfo();
  public void testSetCourseInfo();
  public void testGetInstructor();
  public void testGetDays();
  public void testGetTime();
  public void testGetCRN();
  public void testIsHasPrefInstructor();
  public void testSetHasPrefInstructor();
  public void testEquals();
}
Compiled from "CourseTimeTest.java"
public class coursescheduleapp.CourseTimeTest extends junit.framework.TestCase {
  public coursescheduleapp.CourseTimeTest();
  protected void setUp();
  public void testSubtract();
  public void testGetTime();
  public void testToString();
}
Compiled from "DatabaseTest.java"
public class coursescheduleapp.DatabaseTest extends junit.framework.TestCase {
  coursescheduleapp.model.CourseDatabase db;
  public coursescheduleapp.DatabaseTest() throws java.lang.Exception;
  public void test_getAllSemesters() throws java.lang.Exception;
  public void test_getAllCourseNames() throws java.lang.Exception;
  public void test_getEquivCourses() throws java.lang.Exception;
  public void test_getInstructors() throws java.lang.Exception;
}
Compiled from "EquivCourseSelectionTest.java"
public class coursescheduleapp.EquivCourseSelectionTest {
  coursescheduleapp.model.EquivCourseSelection equiv;
  java.lang.String pref;
  java.lang.String pref2;
  public coursescheduleapp.EquivCourseSelectionTest();
  public void testSetCourseSelection();
  public void testGetCourseSelection();
  public void testGetCourseSelectionList();
  public void testGetNumCourseSelection();
  public void testAddInstructorPref();
  public void testRemoveInstructorPref();
  public void testRemoveCourseSelection();
}
Compiled from "GACoursePrefTest.java"
public class coursescheduleapp.GACoursePrefTest {
  coursescheduleapp.model.GACoursePref gaPref;
  coursescheduleapp.model.CoursePref pref;
  coursescheduleapp.model.EquivCourseSelection equiv;
  java.lang.String prefInstruc;
  coursescheduleapp.model.CourseSelection select;
  java.util.Set<java.lang.String> instructors;
  java.util.List<coursescheduleapp.model.Course> courses;
  java.util.Map<java.lang.String, java.lang.Object> info;
  java.util.Map<java.lang.String, java.lang.Object> info2;
  java.util.ArrayList<java.lang.String> ins;
  java.util.ArrayList<java.lang.String> ins2;
  java.lang.String day;
  java.lang.String time;
  java.lang.Integer CRN;
  public coursescheduleapp.GACoursePrefTest();
  public void testMakeIndividual();
  public void testDecode();
  public void testMutate();
}
Compiled from "GASchedulePrefTest.java"
public class coursescheduleapp.GASchedulePrefTest {
  coursescheduleapp.model.GASchedulePref gaPref;
  coursescheduleapp.model.SchedulePref schedulePref;
  coursescheduleapp.model.DayPrefs dPrefs;
  coursescheduleapp.model.Schedule sched;
  java.util.ArrayList<coursescheduleapp.model.Course> list;
  java.util.ArrayList<coursescheduleapp.model.Day> days;
  java.util.ArrayList<java.lang.String> daySt;
  public coursescheduleapp.GASchedulePrefTest();
  public void setUp() throws java.lang.Exception;
  public void testGetFitness();
}
Compiled from "LeastDayPrefTest.java"
public class coursescheduleapp.LeastDayPrefTest extends junit.framework.TestCase {
  coursescheduleapp.model.LeastDayPref pref;
  coursescheduleapp.model.Schedule sched;
  java.util.ArrayList<coursescheduleapp.model.Course> list;
  coursescheduleapp.model.TimePeriod per;
  public coursescheduleapp.LeastDayPrefTest();
  public void setUp() throws java.lang.Exception;
  public void testGetFitness();
}
Compiled from "ModelTest.java"
public class coursescheduleapp.ModelTest {
  public coursescheduleapp.ModelTest();
  public void setUp() throws java.lang.Exception;
  public void testModel();
  public void testCreateBestSchedule();
  public void testGetBestSchedule();
  public void testGetDB();
  public void testGetPrefSet();
}
Compiled from "PreferenceSetTest.java"
public class coursescheduleapp.PreferenceSetTest {
  public coursescheduleapp.PreferenceSetTest();
  public void testSetCoursePref();
  public void testSetSchedulePref();
  public void testGetCoursePref();
  public void testGetSchedulePref();
}
Compiled from "SchedulePrefTest.java"
public class coursescheduleapp.SchedulePrefTest {
  public coursescheduleapp.SchedulePrefTest();
  public void testSetPref_String_Object();
  public void testSetPref_Map();
  public void testGetAllPrefs();
  public void testGetPref();
  public void testSetPref();
}
Compiled from "ScheduleTest.java"
public class coursescheduleapp.ScheduleTest {
  coursescheduleapp.model.Schedule testSched;
  java.util.List<coursescheduleapp.model.Course> courses;
  java.util.Map<java.lang.String, java.lang.Object> info;
  java.util.ArrayList<java.lang.String> ins;
  java.lang.String day;
  java.lang.String time;
  java.lang.Integer CRN;
  public coursescheduleapp.ScheduleTest();
  public void testGetNumCourses();
  public void testAddCourse();
  public void testRemoveCourse();
  public void testRemoveCourseByCRN();
  public void testGetCourses();
  public void testSetCourses();
  public void testSetCoursesAll();
}
Compiled from "TestDayPrefs.java"
public class coursescheduleapp.TestDayPrefs {
  coursescheduleapp.model.DayPrefs dPrefs;
  coursescheduleapp.model.Schedule sched;
  java.util.ArrayList<coursescheduleapp.model.Course> list;
  java.util.ArrayList<coursescheduleapp.model.Day> days;
  java.util.ArrayList<java.lang.String> daySt;
  public coursescheduleapp.TestDayPrefs();
  public void setUp() throws java.lang.Exception;
  public void testDayPrefs();
  public void testDayPrefsString();
  public void testDayPrefsArrayListOfString();
  public void testSetDayPrefs();
  public void testToString();
  public void testGetFitnessSchedule();
  public void testAddPref();
}
Compiled from "TestInstructorPref.java"
public class coursescheduleapp.TestInstructorPref {
  coursescheduleapp.model.InstructorPref pref;
  coursescheduleapp.model.Schedule sched;
  java.util.ArrayList<coursescheduleapp.model.Course> list;
  java.util.ArrayList<java.lang.String> profs;
  coursescheduleapp.model.TimePeriod per;
  public coursescheduleapp.TestInstructorPref();
  public void setUp() throws java.lang.Exception;
  public void testGetFitness();
}
Compiled from "TestLeastHourPref.java"
public class coursescheduleapp.TestLeastHourPref {
  coursescheduleapp.model.LeastHourPref pref;
  coursescheduleapp.model.Schedule sched;
  java.util.ArrayList<coursescheduleapp.model.Course> list;
  coursescheduleapp.model.TimePeriod per;
  public coursescheduleapp.TestLeastHourPref();
  public void setUp() throws java.lang.Exception;
  public void testGetFitnessSchedule();
}
Compiled from "TestTimePrefs.java"
public class coursescheduleapp.TestTimePrefs {
  coursescheduleapp.model.TimePrefs pref;
  coursescheduleapp.model.Schedule sched;
  java.util.ArrayList<coursescheduleapp.model.Course> list;
  public coursescheduleapp.TestTimePrefs();
  public void setUp() throws java.lang.Exception;
  public void testTimePrefs();
  public void testTimePrefsString();
  public void testSetTimePref();
  public void testGetFitnessSchedule();
  public void testAddPref();
}
Compiled from "TestTimeSpacingPrefs.java"
public class coursescheduleapp.TestTimeSpacingPrefs {
  public coursescheduleapp.TestTimeSpacingPrefs();
  public void setUp() throws java.lang.Exception;
  public void testTimeSpacingPrefs();
  public void testTimeSpacingPrefsString();
  public void testSetSpacing();
  public void testGetFitnessSchedule();
  public void testToString();
  public void testAddPref();
}
Compiled from "TimeCollTest.java"
public class coursescheduleapp.TimeCollTest extends junit.framework.TestCase {
  public coursescheduleapp.TimeCollTest();
  protected void setUp();
  public void testTimeCollection();
  public void testTimeCollectionTreeSetOfTimePeriod();
  public void testGetNumInCollection();
  public void testGetCollection();
  public void testSetCollection();
  public void testAddPeriod();
}
Compiled from "TimeDayTest.java"
public class coursescheduleapp.TimeDayTest extends junit.framework.TestCase {
  public coursescheduleapp.TimeDayTest();
  protected void setUp();
  public void testAddTimeCollection();
  public void testGetCollection();
  public void testHoursInDay();
  public void testHoursInWeek();
  public void testNumDays();
  public void testGetDaysInCollection();
}
Compiled from "TimePeriodTest.java"
public class coursescheduleapp.TimePeriodTest extends junit.framework.TestCase {
  public coursescheduleapp.TimePeriodTest();
  protected void setUp();
  public void testPayload();
  public void testTimeInPeriod();
  public void testGetStart();
  public void testGetEnd();
  public void testEqualsTimePeriod();
  public void testCompareTo();
  public void testToString();
}
Compiled from "WebTest.java"
public class coursescheduleapp.WebTest {
  public coursescheduleapp.WebTest();
  public void setUp() throws java.lang.Exception;
  public void testGetSchedule();
  public void testGetInstructorNames();
  public void testGetSemesterNames();
  public void testGetCourseNames();
}
Compiled from "BasicPublisher.java"
public class coursescheduleapp.model.BasicPublisher implements coursescheduleapp.model.Publisher {
  protected java.util.Vector subscribers;
  public coursescheduleapp.model.BasicPublisher();
  public void addSubscriber(coursescheduleapp.model.Subscriber);
  public void removeSubscriber(coursescheduleapp.model.Subscriber);
  public void removeAllSubscribers();
  public void notifySubscribers(java.lang.Object, java.lang.Object);
  public void notifySubscribers(java.lang.Object);
}
Compiled from "Course.java"
public class coursescheduleapp.model.Course {
  public coursescheduleapp.model.Course();
  public coursescheduleapp.model.Course(java.util.Map<java.lang.String, java.lang.Object>);
  public java.util.Map<java.lang.String, java.lang.Object> getCourseInfo();
  public void setCourseInfo(java.util.Map<java.lang.String, java.lang.Object>);
  public java.lang.Object getValue(java.lang.String);
  public void putValue(java.lang.String, java.lang.Object);
  public boolean isHasPrefInstructor();
  public void setHasPrefInstructor(boolean);
  public boolean equals(java.lang.Object);
}
Compiled from "CourseCollectionDB.java"
public interface coursescheduleapp.model.CourseCollectionDB extends coursescheduleapp.model.Publisher {
  public abstract java.util.List<java.lang.String> getAllSemesters() throws java.sql.SQLException;
  public abstract void setSemester(java.lang.String);
  public abstract java.util.List<java.lang.String> getAllCourseNames() throws java.lang.Exception;
  public abstract java.util.List<java.lang.String> getInstructors(java.lang.String) throws java.lang.Exception;
  public abstract java.util.List<coursescheduleapp.model.Course> getEquivCourses(java.lang.String) throws java.lang.Exception;
}
Compiled from "CourseCollectionDBTXT.java"
public class coursescheduleapp.model.CourseCollectionDBTXT implements coursescheduleapp.model.CourseCollectionDB {
  public coursescheduleapp.model.CourseCollectionDBTXT();
  public java.util.List<java.lang.String> getAllSemesters();
  public void setSemester(java.lang.String);
  public java.util.List<java.lang.String> getInstructors(java.lang.String);
  public java.util.List<java.lang.String> getAllCourseNames();
  public java.util.List<coursescheduleapp.model.Course> getEquivCourses(java.lang.String);
  public void addSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
  public void removeAllSubscribers() throws java.rmi.RemoteException;
  public void removeSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
}
Compiled from "CourseCollectionFactory.java"
public class coursescheduleapp.model.CourseCollectionFactory {
  public coursescheduleapp.model.CourseCollectionFactory();
  public coursescheduleapp.model.CourseCollectionDB createCourseCollection();
}
Compiled from "CourseData.java"
public final class coursescheduleapp.model.CourseData extends java.lang.Enum<coursescheduleapp.model.CourseData> {
  public static final coursescheduleapp.model.CourseData CRN;
  public static final coursescheduleapp.model.CourseData CRDT;
  public static final coursescheduleapp.model.CourseData INSTRUCTOR;
  public static final coursescheduleapp.model.CourseData TIME;
  public static final coursescheduleapp.model.CourseData DAY;
  public static final coursescheduleapp.model.CourseData NAME;
  public static final coursescheduleapp.model.CourseData DEPT;
  public static final coursescheduleapp.model.CourseData BLDG;
  public static coursescheduleapp.model.CourseData[] values();
  public static coursescheduleapp.model.CourseData valueOf(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "CourseData.java"
class coursescheduleapp.model.CourseData$1 {
  static final int[] $SwitchMap$coursescheduleapp$model$CourseData;
  static {};
}
Compiled from "CourseDatabase.java"
public class coursescheduleapp.model.CourseDatabase implements coursescheduleapp.model.CourseCollectionDB {
  public java.sql.Statement stat;
  public coursescheduleapp.model.CourseDatabase() throws java.lang.Exception;
  public java.util.List<java.lang.String> getAllSemesters() throws java.sql.SQLException;
  public java.util.List<java.lang.String> getAllCourseNames() throws java.lang.Exception;
  public java.util.List<coursescheduleapp.model.Course> getEquivCourses(java.lang.String) throws java.lang.Exception;
  public java.util.List<java.lang.String> getInstructors(java.lang.String) throws java.lang.Exception;
  public void setSemester(java.lang.String);
  public void addSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
  public void removeAllSubscribers() throws java.rmi.RemoteException;
  public void removeSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
}
Compiled from "CoursePref.java"
public class coursescheduleapp.model.CoursePref {
  public coursescheduleapp.model.CoursePref(int, int);
  public coursescheduleapp.model.CoursePref(java.util.List<coursescheduleapp.model.EquivCourseSelection>);
  public coursescheduleapp.model.CoursePref();
  public void addEquivCourse(coursescheduleapp.model.EquivCourseSelection);
  public void setCourseSelection(int, int, coursescheduleapp.model.CourseSelection);
  public coursescheduleapp.model.EquivCourseSelection getEquivCourses(int);
  public coursescheduleapp.model.CourseSelection getCourseSelection(int, int);
  public void removeCourseSelection(int, int);
  public void addInstructorPref(int, int, java.lang.String);
  public void removeInstructorPref(int, int, java.lang.String);
  public java.util.Set<java.lang.String> getInstructorPref(int, int);
  public java.util.List<coursescheduleapp.model.EquivCourseSelection> getAllCourses();
}
Compiled from "CourseSelection.java"
public class coursescheduleapp.model.CourseSelection {
  public coursescheduleapp.model.CourseSelection();
  public coursescheduleapp.model.CourseSelection(java.util.List<coursescheduleapp.model.Course>, java.util.Set<java.lang.String>);
  public boolean hasCourse(coursescheduleapp.model.Course);
  public void setCourse(java.util.List<coursescheduleapp.model.Course>);
  public coursescheduleapp.model.Course getCourse(int);
  public int getNumCourses();
  public void setInstructorPref(java.util.Set<java.lang.String>);
  public int getNumInstructorPref();
  public void addInstructorPref(java.lang.String);
  public void removeInstructorPref(java.lang.String);
  public void clearSelection();
  public boolean removeCourse(coursescheduleapp.model.Course);
  public boolean removeCourse(java.lang.Object);
  public void addCourse(coursescheduleapp.model.Course);
  public java.util.Set<java.lang.String> getInstrucPref();
}
Compiled from "CourseSpacing.java"
public final class coursescheduleapp.model.CourseSpacing extends java.lang.Enum<coursescheduleapp.model.CourseSpacing> {
  public static final coursescheduleapp.model.CourseSpacing TENMIN;
  public static final coursescheduleapp.model.CourseSpacing HOUR;
  public static final coursescheduleapp.model.CourseSpacing NOPREF;
  public static final coursescheduleapp.model.CourseSpacing CourseSpacing;
  public static coursescheduleapp.model.CourseSpacing[] values();
  public static coursescheduleapp.model.CourseSpacing valueOf(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "CourseSpacing.java"
class coursescheduleapp.model.CourseSpacing$1 {
  static final int[] $SwitchMap$coursescheduleapp$model$CourseSpacing;
  static {};
}
Compiled from "CourseTime.java"
public class coursescheduleapp.model.CourseTime implements coursescheduleapp.model.Time {
  public coursescheduleapp.model.CourseTime(int);
  public coursescheduleapp.model.CourseTime(int, int);
  public int subtract(coursescheduleapp.model.Time);
  public java.lang.String toString();
  public int getTime();
}
Compiled from "Day.java"
public final class coursescheduleapp.model.Day extends java.lang.Enum<coursescheduleapp.model.Day> {
  public static final coursescheduleapp.model.Day M;
  public static final coursescheduleapp.model.Day T;
  public static final coursescheduleapp.model.Day W;
  public static final coursescheduleapp.model.Day R;
  public static final coursescheduleapp.model.Day F;
  public static final coursescheduleapp.model.Day S;
  public static coursescheduleapp.model.Day[] values();
  public static coursescheduleapp.model.Day valueOf(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "Day.java"
class coursescheduleapp.model.Day$1 {
  static final int[] $SwitchMap$coursescheduleapp$model$Day;
  static {};
}
Compiled from "DayPref.java"
public final class coursescheduleapp.model.DayPref extends java.lang.Enum<coursescheduleapp.model.DayPref> {
  public static final coursescheduleapp.model.DayPref MON;
  public static final coursescheduleapp.model.DayPref TUES;
  public static final coursescheduleapp.model.DayPref WED;
  public static final coursescheduleapp.model.DayPref THUR;
  public static final coursescheduleapp.model.DayPref FRI;
  public static final coursescheduleapp.model.DayPref SAT;
  public static final coursescheduleapp.model.DayPref NOPREF;
  public static final coursescheduleapp.model.DayPref DayPref;
  public static coursescheduleapp.model.DayPref[] values();
  public static coursescheduleapp.model.DayPref valueOf(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "DayPref.java"
class coursescheduleapp.model.DayPref$1 {
  static final int[] $SwitchMap$coursescheduleapp$model$DayPref;
  static {};
}
Compiled from "DayPrefs.java"
public class coursescheduleapp.model.DayPrefs implements coursescheduleapp.model.Preference {
  public coursescheduleapp.model.DayPrefs();
  public coursescheduleapp.model.DayPrefs(java.lang.String);
  public coursescheduleapp.model.DayPrefs(java.util.ArrayList<java.lang.String>);
  public void setDayPrefs(java.util.ArrayList<java.lang.String>);
  public java.lang.String toString();
  public double getFitness(coursescheduleapp.model.Schedule);
  public void addPref(java.lang.String);
}
Compiled from "EquivCourseSelection.java"
public class coursescheduleapp.model.EquivCourseSelection {
  public coursescheduleapp.model.EquivCourseSelection(int);
  public void setCourseSelection(int, coursescheduleapp.model.CourseSelection);
  public coursescheduleapp.model.CourseSelection getCourseSelection(int);
  public void removeCourseSelection(int);
  public void addInstructorPref(int, java.lang.String);
  public void removeInstructorPref(int, java.lang.String);
  public int getNumCourseSelection();
  public java.util.List<coursescheduleapp.model.CourseSelection> getCourseSelectionList();
}
Compiled from "GA.java"
public class coursescheduleapp.model.GA<E> {
  public coursescheduleapp.model.GA(coursescheduleapp.model.GAInterface<E>, coursescheduleapp.model.GAFitness<E>);
  public coursescheduleapp.model.GA(coursescheduleapp.model.GAInterface<E>, coursescheduleapp.model.GAFitness<E>, double, double);
  public E runGA(int, int, boolean);
  public E runGAByTime(long, int, boolean);
  public E runGAByGoal(double, int, int, boolean);
  public int getWhichGen();
  public double getCrossRate();
  public java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> getCurrGen();
  public java.util.ArrayList<java.lang.Double> getFitScores();
  public coursescheduleapp.model.GAFitness<E> getFitness();
  public java.lang.Double getGoalFit();
  public coursescheduleapp.model.GAInterface<E> getIndividual();
  public double getMutRate();
  public int getPopSize();
  public java.util.ArrayList<java.lang.Integer> getBestFit();
  public java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> getAllBestFit();
  public void setCrossRate(double);
  public void setMutRate(double);
}
Compiled from "GACoursePref.java"
public class coursescheduleapp.model.GACoursePref implements coursescheduleapp.model.GAInterface<coursescheduleapp.model.Schedule> {
  public coursescheduleapp.model.GACoursePref(coursescheduleapp.model.CoursePref);
  public java.util.ArrayList<java.lang.Integer> makeIndividual();
  public coursescheduleapp.model.Schedule decode(java.util.ArrayList<java.lang.Integer>);
  public java.lang.Integer mutate(int);
  public java.lang.Object decode(java.util.ArrayList);
}
Compiled from "GAFitness.java"
public interface coursescheduleapp.model.GAFitness<E> {
  public abstract double getFitness(E);
}
Compiled from "GAInterface.java"
public interface coursescheduleapp.model.GAInterface<E> {
  public abstract java.util.ArrayList<java.lang.Integer> makeIndividual();
  public abstract E decode(java.util.ArrayList<java.lang.Integer>);
  public abstract java.lang.Integer mutate(int);
}
Compiled from "GASchedulePref.java"
public class coursescheduleapp.model.GASchedulePref implements coursescheduleapp.model.GAFitness<coursescheduleapp.model.Schedule> {
  public coursescheduleapp.model.GASchedulePref(coursescheduleapp.model.SchedulePref);
  public double getFitness(coursescheduleapp.model.Schedule);
  public double getFitness(java.lang.Object);
}
Compiled from "GeneticAlgorithm.java"
public class coursescheduleapp.model.GeneticAlgorithm implements coursescheduleapp.model.Scheduler {
  public coursescheduleapp.model.GeneticAlgorithm(int);
  public coursescheduleapp.model.Schedule createSchedule(coursescheduleapp.model.PreferenceSet);
  public void run();
  public void setPref(coursescheduleapp.model.PreferenceSet);
  public void addSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
  public void removeAllSubscribers() throws java.rmi.RemoteException;
  public void removeSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
}
Compiled from "InstructorPref.java"
public class coursescheduleapp.model.InstructorPref implements coursescheduleapp.model.Preference {
  public coursescheduleapp.model.InstructorPref();
  public void addPref(java.lang.String);
  public double getFitness(coursescheduleapp.model.Schedule);
}
Compiled from "LeastDayPref.java"
public class coursescheduleapp.model.LeastDayPref implements coursescheduleapp.model.Preference {
  public coursescheduleapp.model.LeastDayPref();
  public double getFitness(coursescheduleapp.model.Schedule);
  public void addPref(java.lang.String);
}
Compiled from "LeastHourPref.java"
public class coursescheduleapp.model.LeastHourPref implements coursescheduleapp.model.Preference {
  public coursescheduleapp.model.LeastHourPref();
  public double getFitness(coursescheduleapp.model.Schedule);
  public void addPref(java.lang.String);
}
Compiled from "MGA.java"
public class coursescheduleapp.model.MGA<E> {
  public coursescheduleapp.model.MGA(coursescheduleapp.model.GAInterface<E>, coursescheduleapp.model.GAFitness<E>);
  public coursescheduleapp.model.MGA(coursescheduleapp.model.GAInterface<E>, coursescheduleapp.model.GAFitness<E>, double, double);
  public E runGA(int, int, boolean);
  public E runGA(int, int, boolean, int);
  public E runGAByTime(long, int, boolean, int);
  public E runGAByGoal(double, int, int, boolean);
  public int getWhichGen();
  public double getCrossRate();
  public java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> getCurrGen();
  public java.util.Map<java.lang.Integer, java.lang.Double> getFitScores();
  public coursescheduleapp.model.GAFitness<E> getFitness();
  public java.lang.Double getGoalFit();
  public coursescheduleapp.model.GAInterface<E> getIndividual();
  public double getMutRate();
  public int getPopSize();
  public java.util.ArrayList<java.lang.Integer> getBestFit();
  public java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> getAllBestFit();
  public void setCrossRate(double);
  public void setMutRate(double);
  static java.util.ArrayList access$000(coursescheduleapp.model.MGA);
  static coursescheduleapp.model.GAInterface access$100(coursescheduleapp.model.MGA);
  static coursescheduleapp.model.GAFitness access$200(coursescheduleapp.model.MGA);
  static java.util.Map access$300(coursescheduleapp.model.MGA);
  static java.lang.Double access$400(coursescheduleapp.model.MGA);
  static boolean access$502(coursescheduleapp.model.MGA, boolean);
}
Compiled from "MGA.java"
class coursescheduleapp.model.MGA$thread implements java.lang.Runnable {
  final coursescheduleapp.model.MGA this$0;
  public coursescheduleapp.model.MGA$thread(coursescheduleapp.model.MGA, int);
  public void run();
}
Compiled from "Model.java"
public class coursescheduleapp.model.Model extends java.util.Observable implements coursescheduleapp.model.Subscriber {
  public coursescheduleapp.model.Model(int, int);
  public void createBestSchedule();
  public java.lang.Thread getSchedThread();
  public coursescheduleapp.model.Schedule getBestSchedule();
  public coursescheduleapp.model.CourseCollectionDB getDB();
  public coursescheduleapp.model.PreferenceSet getPrefSet();
  public void update(java.lang.Object, java.lang.Object) throws java.rmi.RemoteException;
}
Compiled from "Preference.java"
public interface coursescheduleapp.model.Preference {
  public abstract double getFitness(coursescheduleapp.model.Schedule);
  public abstract void addPref(java.lang.String);
  public abstract java.lang.String toString();
}
Compiled from "PreferenceSet.java"
public class coursescheduleapp.model.PreferenceSet {
  public coursescheduleapp.model.PreferenceSet(int, int);
  public void setCoursePref(coursescheduleapp.model.CoursePref);
  public void setSchedulePref(coursescheduleapp.model.SchedulePref);
  public coursescheduleapp.model.CoursePref getCoursePref();
  public coursescheduleapp.model.SchedulePref getSchedulePref();
}
Compiled from "Publisher.java"
public interface coursescheduleapp.model.Publisher extends java.rmi.Remote {
  public abstract void addSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
  public abstract void removeSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
  public abstract void removeAllSubscribers() throws java.rmi.RemoteException;
}
Compiled from "Schedule.java"
public class coursescheduleapp.model.Schedule {
  public coursescheduleapp.model.Schedule();
  public coursescheduleapp.model.Schedule(java.util.List<coursescheduleapp.model.Course>);
  public int getNumCourses();
  public void addCourse(coursescheduleapp.model.Course);
  public boolean removeCourse(coursescheduleapp.model.Course);
  public boolean removeCourse(java.lang.Object);
  public java.util.List<coursescheduleapp.model.Course> getCourses();
  public void setCourses(java.util.List<coursescheduleapp.model.Course>);
}
Compiled from "SchedulePref.java"
public class coursescheduleapp.model.SchedulePref {
  public coursescheduleapp.model.SchedulePref();
  public void addAll();
  public boolean setPref(java.lang.String, coursescheduleapp.model.Preference);
  public void setPref(java.util.Map<java.lang.String, coursescheduleapp.model.Preference>);
  public java.util.Map<java.lang.String, coursescheduleapp.model.Preference> getAllPrefs();
  public coursescheduleapp.model.Preference getPref(java.lang.String);
}
Compiled from "Scheduler.java"
public interface coursescheduleapp.model.Scheduler extends java.lang.Runnable,coursescheduleapp.model.Publisher {
  public abstract coursescheduleapp.model.Schedule createSchedule(coursescheduleapp.model.PreferenceSet);
  public abstract void setPref(coursescheduleapp.model.PreferenceSet);
}
Compiled from "SchedulerFactory.java"
public class coursescheduleapp.model.SchedulerFactory {
  public coursescheduleapp.model.SchedulerFactory();
  public coursescheduleapp.model.Scheduler createSceduler();
}
Compiled from "Subscriber.java"
public interface coursescheduleapp.model.Subscriber extends java.rmi.Remote {
  public abstract void update(java.lang.Object, java.lang.Object) throws java.rmi.RemoteException;
}
Compiled from "TestScheduler.java"
public class coursescheduleapp.model.TestScheduler implements coursescheduleapp.model.Scheduler {
  public coursescheduleapp.model.TestScheduler();
  public coursescheduleapp.model.Schedule createSchedule(coursescheduleapp.model.PreferenceSet);
  public void run();
  public coursescheduleapp.model.Schedule getSchedule();
  public void setPref(coursescheduleapp.model.PreferenceSet);
  public void addSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
  public void removeAllSubscribers() throws java.rmi.RemoteException;
  public void removeSubscriber(coursescheduleapp.model.Subscriber) throws java.rmi.RemoteException;
}
Compiled from "Time.java"
public interface coursescheduleapp.model.Time {
  public abstract int subtract(coursescheduleapp.model.Time);
  public abstract int getTime();
  public abstract java.lang.String toString();
}
Compiled from "TimeCollection.java"
public class coursescheduleapp.model.TimeCollection {
  public coursescheduleapp.model.TimeCollection();
  public coursescheduleapp.model.TimeCollection(java.util.TreeSet<coursescheduleapp.model.TimePeriod>);
  public int getNumInCollection();
  public java.util.TreeSet<coursescheduleapp.model.TimePeriod> getCollection();
  public void setCollection(java.util.TreeSet<coursescheduleapp.model.TimePeriod>);
  public boolean addPeriod(coursescheduleapp.model.TimePeriod);
}
Compiled from "TimeDayCollection.java"
public class coursescheduleapp.model.TimeDayCollection {
  public coursescheduleapp.model.TimeDayCollection();
  public boolean addTimeCollection(coursescheduleapp.model.TimePeriod, java.util.ArrayList<coursescheduleapp.model.Day>);
  public coursescheduleapp.model.TimeCollection getCollection(coursescheduleapp.model.Day);
  public double hoursInDay(coursescheduleapp.model.Day);
  public double hoursInWeek();
  public int numDays();
  public java.util.ArrayList<coursescheduleapp.model.Day> getDaysInCollection();
}
Compiled from "TimePeriod.java"
public class coursescheduleapp.model.TimePeriod implements java.lang.Comparable<coursescheduleapp.model.TimePeriod> {
  public coursescheduleapp.model.TimePeriod(coursescheduleapp.model.Time, coursescheduleapp.model.Time);
  public coursescheduleapp.model.TimePeriod(coursescheduleapp.model.Time, coursescheduleapp.model.Time, java.lang.Object);
  public java.lang.Object getPayload();
  public void setPayload(java.lang.Object);
  public int timeInPeriod();
  public coursescheduleapp.model.Time getStart();
  public coursescheduleapp.model.Time getEnd();
  public boolean equals(java.lang.Object);
  public int compareTo(coursescheduleapp.model.TimePeriod);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "TimePref.java"
public final class coursescheduleapp.model.TimePref extends java.lang.Enum<coursescheduleapp.model.TimePref> {
  public static final coursescheduleapp.model.TimePref MORNING;
  public static final coursescheduleapp.model.TimePref AFTERNOON;
  public static final coursescheduleapp.model.TimePref EVENING;
  public static final coursescheduleapp.model.TimePref NOPREF;
  public static final coursescheduleapp.model.TimePref TimePref;
  public static coursescheduleapp.model.TimePref[] values();
  public static coursescheduleapp.model.TimePref valueOf(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "TimePref.java"
class coursescheduleapp.model.TimePref$1 {
  static final int[] $SwitchMap$coursescheduleapp$model$TimePref;
  static {};
}
Compiled from "TimePrefs.java"
public class coursescheduleapp.model.TimePrefs implements coursescheduleapp.model.Preference {
  public coursescheduleapp.model.TimePrefs();
  public coursescheduleapp.model.TimePrefs(java.lang.String);
  public void setTimePref(java.lang.String);
  public double getFitness(coursescheduleapp.model.Schedule);
  public void addPref(java.lang.String);
}
Compiled from "TimeSpacingPrefs.java"
public class coursescheduleapp.model.TimeSpacingPrefs implements coursescheduleapp.model.Preference {
  public coursescheduleapp.model.TimeSpacingPrefs();
  public coursescheduleapp.model.TimeSpacingPrefs(java.lang.String);
  public void setSpacing(java.lang.String);
  public double getFitness(coursescheduleapp.model.Schedule);
  public java.lang.String toString();
  public void addPref(java.lang.String);
}
Compiled from "CourseChoiceLB.java"
public class coursescheduleapp.view.CourseChoiceLB extends javax.swing.JPanel {
  public coursescheduleapp.view.CourseChoiceLB();
  public void setCoursePref(coursescheduleapp.model.CourseSelection, int, int, coursescheduleapp.model.CourseCollectionDB) throws java.sql.SQLException;
  public void setChoiceLb();
}
Compiled from "CoursePrefLB.java"
public class coursescheduleapp.view.CoursePrefLB extends javax.swing.JPanel {
  public coursescheduleapp.view.CoursePrefLB();
  public void setCoursePref(coursescheduleapp.model.CourseSelection, int, int, coursescheduleapp.model.CourseCollectionDB);
  public void setLabel();
}
Compiled from "CoursePrefView.java"
public class coursescheduleapp.view.CoursePrefView extends javax.swing.JPanel {
  public coursescheduleapp.view.CoursePrefView();
  public void setCoursePref(coursescheduleapp.model.CoursePref, int, int, coursescheduleapp.model.CourseCollectionDB);
}
Compiled from "CourseSchedulerApp.java"
public class coursescheduleapp.view.CourseSchedulerApp extends javax.swing.JFrame implements java.awt.event.ActionListener {
  public coursescheduleapp.view.CourseSchedulerApp();
  public void setModel(coursescheduleapp.model.Model) throws java.sql.SQLException;
  public static void main(java.lang.String[]);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "CourseSchedulerApp.java"
final class coursescheduleapp.view.CourseSchedulerApp$1 implements java.lang.Runnable {
  coursescheduleapp.view.CourseSchedulerApp$1();
  public void run();
}
Compiled from "CourseSelectControl.java"
public class coursescheduleapp.view.CourseSelectControl {
  public coursescheduleapp.view.CourseSelectControl(coursescheduleapp.model.CourseSelection, int, int, coursescheduleapp.model.CourseCollectionDB);
  public void setCourse(java.lang.String) throws java.sql.SQLException;
  public void removeCourse(java.lang.String);
  public void clearCourseSelection();
  public void setInstructor(java.util.Set<java.lang.String>);
}
Compiled from "CourseSelectView.java"
public class coursescheduleapp.view.CourseSelectView extends javax.swing.JPanel implements javax.swing.event.ListSelectionListener,coursescheduleapp.model.Subscriber {
  public coursescheduleapp.view.CourseSelectView();
  public void setCoursePref(coursescheduleapp.model.CourseSelection, int, int, coursescheduleapp.model.CourseCollectionDB) throws java.sql.SQLException;
  public void valueChanged(javax.swing.event.ListSelectionEvent);
  public void update(java.lang.Object, java.lang.Object) throws java.rmi.RemoteException;
  static javax.swing.JComboBox access$100(coursescheduleapp.view.CourseSelectView);
  static void access$200(coursescheduleapp.view.CourseSelectView, java.lang.Object, java.lang.Object);
}
Compiled from "CourseSelectView.java"
class coursescheduleapp.view.CourseSelectView$1 {
}
Compiled from "CourseSelectView.java"
class coursescheduleapp.view.CourseSelectView$FinalSelectionListener implements javax.swing.event.PopupMenuListener {
  final coursescheduleapp.view.CourseSelectView this$0;
  public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent);
  public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent);
  public void popupMenuCanceled(javax.swing.event.PopupMenuEvent);
  coursescheduleapp.view.CourseSelectView$FinalSelectionListener(coursescheduleapp.view.CourseSelectView, coursescheduleapp.view.CourseSelectView$1);
}
Compiled from "DayPrefView.java"
public class coursescheduleapp.view.DayPrefView extends javax.swing.JPanel implements javax.swing.event.ListSelectionListener {
  public coursescheduleapp.view.DayPrefView();
  public void setSchedPref(coursescheduleapp.model.SchedulePref);
  public void resetPref();
  public void valueChanged(javax.swing.event.ListSelectionEvent);
}
Compiled from "EquivCourseSelectView.java"
public class coursescheduleapp.view.EquivCourseSelectView extends javax.swing.JPanel {
  public coursescheduleapp.view.EquivCourseSelectView();
  public void setEquiv(coursescheduleapp.model.EquivCourseSelection, int, coursescheduleapp.model.CourseCollectionDB);
}
Compiled from "EquivCourseSelectionView.java"
public class coursescheduleapp.view.EquivCourseSelectionView extends javax.swing.JPanel {
  public coursescheduleapp.view.EquivCourseSelectionView();
}
Compiled from "ListSchedView.java"
public class coursescheduleapp.view.ListSchedView implements coursescheduleapp.view.SchedViewI {
  public coursescheduleapp.view.ListSchedView();
  public void getResults(coursescheduleapp.model.Course, javax.swing.text.StyledDocument);
  public java.util.List<coursescheduleapp.model.Course> orderSched(coursescheduleapp.model.Schedule);
}
Compiled from "OrderedSchedView.java"
public class coursescheduleapp.view.OrderedSchedView implements coursescheduleapp.view.SchedViewI {
  public coursescheduleapp.view.OrderedSchedView();
  public void getResults(coursescheduleapp.model.Course, javax.swing.text.StyledDocument);
  public java.util.List<coursescheduleapp.model.Course> orderSched(coursescheduleapp.model.Schedule);
}
Compiled from "PrefSetView.java"
public class coursescheduleapp.view.PrefSetView extends javax.swing.JPanel {
  public coursescheduleapp.view.PrefSetView();
  public void setPrefSet(coursescheduleapp.model.PreferenceSet, int, int, coursescheduleapp.model.CourseCollectionDB);
}
Compiled from "PreferedTimeView.java"
public class coursescheduleapp.view.PreferedTimeView extends javax.swing.JPanel implements java.awt.event.ItemListener {
  public coursescheduleapp.view.PreferedTimeView();
  public void setSchedPref(coursescheduleapp.model.SchedulePref);
  public void resetPref();
  public void itemStateChanged(java.awt.event.ItemEvent);
}
Compiled from "ResultsController.java"
public class coursescheduleapp.view.ResultsController {
  public coursescheduleapp.view.ResultsController();
  public void removeCourse(coursescheduleapp.model.Course, coursescheduleapp.model.Model);
  public boolean checkIfLast(coursescheduleapp.model.Course, coursescheduleapp.model.Model);
  public void print(javax.swing.JTextPane);
  public void save(java.io.File, java.lang.String);
}
Compiled from "ResultsView.java"
public class coursescheduleapp.view.ResultsView extends javax.swing.JPanel implements java.util.Observer,java.awt.event.ActionListener,javax.swing.event.HyperlinkListener {
  public coursescheduleapp.view.ResultsView();
  public void setModel(coursescheduleapp.model.Model);
  public void update(java.util.Observable, java.lang.Object);
  public void actionPerformed(java.awt.event.ActionEvent);
  public void setView(coursescheduleapp.view.SchedViewI);
  public void save();
  public void print();
  public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent);
}
Compiled from "SchedPrefView.java"
public class coursescheduleapp.view.SchedPrefView extends javax.swing.JPanel implements java.awt.event.ActionListener {
  public coursescheduleapp.view.SchedPrefView();
  public void setSchedPref(coursescheduleapp.model.SchedulePref);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SchedViewI.java"
public interface coursescheduleapp.view.SchedViewI {
  public abstract void getResults(coursescheduleapp.model.Course, javax.swing.text.StyledDocument);
  public abstract java.util.List<coursescheduleapp.model.Course> orderSched(coursescheduleapp.model.Schedule);
}
Compiled from "ScheduleView.java"
public class coursescheduleapp.view.ScheduleView extends javax.swing.JPanel {
  public coursescheduleapp.view.ScheduleView();
  public void setModel(coursescheduleapp.model.Model);
  public void save();
  public void setView(coursescheduleapp.view.SchedViewI);
  public void print();
}
Compiled from "StatusBar.java"
public class coursescheduleapp.view.StatusBar extends javax.swing.JLabel implements java.lang.Runnable {
  boolean isNew;
  public coursescheduleapp.view.StatusBar();
  public void setModel(coursescheduleapp.model.Model);
  public void setMessage(java.lang.String);
  public void run();
}
Compiled from "SubmitController.java"
public class coursescheduleapp.view.SubmitController {
  public coursescheduleapp.view.SubmitController();
  public void createSchedule(coursescheduleapp.model.Model);
}
Compiled from "TimeSpacingPrefView.java"
public class coursescheduleapp.view.TimeSpacingPrefView extends javax.swing.JPanel implements java.awt.event.ItemListener {
  public coursescheduleapp.view.TimeSpacingPrefView();
  public void setSchedPref(coursescheduleapp.model.SchedulePref);
  public void itemStateChanged(java.awt.event.ItemEvent);
  public void resetPref();
}
Compiled from "WebControl.java"
public class coursescheduleapp.view.WebControl implements coursescheduleapp.model.Subscriber {
  coursescheduleapp.model.Schedule retSched;
  java.lang.Thread t;
  public coursescheduleapp.view.WebControl();
  public org.json.JSONArray getSchedule(org.json.JSONArray);
  public org.json.JSONArray getCourseNames(org.json.JSONObject);
  public org.json.JSONArray getSemesterNames();
  public org.json.JSONArray getInstructorNames(org.json.JSONArray);
  public void update(java.lang.Object, java.lang.Object) throws java.rmi.RemoteException;
}
Compiled from "submitPanel.java"
public class coursescheduleapp.view.submitPanel extends javax.swing.JPanel implements java.awt.event.ActionListener {
  public coursescheduleapp.view.submitPanel();
  public void setModel(coursescheduleapp.model.Model);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "CDL.java"
public class org.json.CDL {
  public org.json.CDL();
  public static org.json.JSONArray rowToJSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public static org.json.JSONObject rowToJSONObject(org.json.JSONArray, org.json.JSONTokener) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(java.lang.String) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.JSONArray, java.lang.String) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.JSONArray, org.json.JSONTokener) throws org.json.JSONException;
  public static java.lang.String rowToString(org.json.JSONArray);
  public static java.lang.String toString(org.json.JSONArray) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONArray, org.json.JSONArray) throws org.json.JSONException;
}
Compiled from "Cookie.java"
public class org.json.Cookie {
  public org.json.Cookie();
  public static java.lang.String escape(java.lang.String);
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
  public static java.lang.String unescape(java.lang.String);
}
Compiled from "CookieList.java"
public class org.json.CookieList {
  public org.json.CookieList();
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
}
Compiled from "HTTP.java"
public class org.json.HTTP {
  public static final java.lang.String CRLF;
  public org.json.HTTP();
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
}
Compiled from "HTTPTokener.java"
public class org.json.HTTPTokener extends org.json.JSONTokener {
  public org.json.HTTPTokener(java.lang.String);
  public java.lang.String nextToken() throws org.json.JSONException;
}
Compiled from "JSONArray.java"
public class org.json.JSONArray {
  public org.json.JSONArray();
  public org.json.JSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public org.json.JSONArray(java.lang.String) throws org.json.JSONException;
  public org.json.JSONArray(java.util.Collection);
  public org.json.JSONArray(java.lang.Object) throws org.json.JSONException;
  public java.lang.Object get(int) throws org.json.JSONException;
  public boolean getBoolean(int) throws org.json.JSONException;
  public double getDouble(int) throws org.json.JSONException;
  public int getInt(int) throws org.json.JSONException;
  public org.json.JSONArray getJSONArray(int) throws org.json.JSONException;
  public org.json.JSONObject getJSONObject(int) throws org.json.JSONException;
  public long getLong(int) throws org.json.JSONException;
  public java.lang.String getString(int) throws org.json.JSONException;
  public boolean isNull(int);
  public java.lang.String join(java.lang.String) throws org.json.JSONException;
  public int length();
  public java.lang.Object opt(int);
  public boolean optBoolean(int);
  public boolean optBoolean(int, boolean);
  public double optDouble(int);
  public double optDouble(int, double);
  public int optInt(int);
  public int optInt(int, int);
  public org.json.JSONArray optJSONArray(int);
  public org.json.JSONObject optJSONObject(int);
  public long optLong(int);
  public long optLong(int, long);
  public java.lang.String optString(int);
  public java.lang.String optString(int, java.lang.String);
  public org.json.JSONArray put(boolean);
  public org.json.JSONArray put(java.util.Collection);
  public org.json.JSONArray put(double) throws org.json.JSONException;
  public org.json.JSONArray put(int);
  public org.json.JSONArray put(long);
  public org.json.JSONArray put(java.util.Map);
  public org.json.JSONArray put(java.lang.Object);
  public org.json.JSONArray put(int, boolean) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.util.Collection) throws org.json.JSONException;
  public org.json.JSONArray put(int, double) throws org.json.JSONException;
  public org.json.JSONArray put(int, int) throws org.json.JSONException;
  public org.json.JSONArray put(int, long) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.util.Map) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.lang.Object) throws org.json.JSONException;
  public java.lang.Object remove(int);
  public org.json.JSONObject toJSONObject(org.json.JSONArray) throws org.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws org.json.JSONException;
  java.lang.String toString(int, int) throws org.json.JSONException;
  public java.io.Writer write(java.io.Writer) throws org.json.JSONException;
}
Compiled from "JSONException.java"
public class org.json.JSONException extends java.lang.Exception {
  public org.json.JSONException(java.lang.String);
  public org.json.JSONException(java.lang.Throwable);
  public java.lang.Throwable getCause();
}
Compiled from "JSONML.java"
public class org.json.JSONML {
  public org.json.JSONML();
  public static org.json.JSONArray toJSONArray(java.lang.String) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.XMLTokener) throws org.json.JSONException;
  public static org.json.JSONObject toJSONObject(org.json.XMLTokener) throws org.json.JSONException;
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONArray) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
}
Compiled from "JSONObject.java"
public class org.json.JSONObject {
  public static final java.lang.Object NULL;
  public org.json.JSONObject();
  public org.json.JSONObject(org.json.JSONObject, java.lang.String[]);
  public org.json.JSONObject(org.json.JSONTokener) throws org.json.JSONException;
  public org.json.JSONObject(java.util.Map);
  public org.json.JSONObject(java.lang.Object);
  public org.json.JSONObject(java.lang.Object, java.lang.String[]);
  public org.json.JSONObject(java.lang.String) throws org.json.JSONException;
  public org.json.JSONObject accumulate(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject append(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public static java.lang.String doubleToString(double);
  public java.lang.Object get(java.lang.String) throws org.json.JSONException;
  public boolean getBoolean(java.lang.String) throws org.json.JSONException;
  public double getDouble(java.lang.String) throws org.json.JSONException;
  public int getInt(java.lang.String) throws org.json.JSONException;
  public org.json.JSONArray getJSONArray(java.lang.String) throws org.json.JSONException;
  public org.json.JSONObject getJSONObject(java.lang.String) throws org.json.JSONException;
  public long getLong(java.lang.String) throws org.json.JSONException;
  public static java.lang.String[] getNames(org.json.JSONObject);
  public static java.lang.String[] getNames(java.lang.Object);
  public java.lang.String getString(java.lang.String) throws org.json.JSONException;
  public boolean has(java.lang.String);
  public org.json.JSONObject increment(java.lang.String) throws org.json.JSONException;
  public boolean isNull(java.lang.String);
  public java.util.Iterator keys();
  public int length();
  public org.json.JSONArray names();
  public static java.lang.String numberToString(java.lang.Number) throws org.json.JSONException;
  public java.lang.Object opt(java.lang.String);
  public boolean optBoolean(java.lang.String);
  public boolean optBoolean(java.lang.String, boolean);
  public double optDouble(java.lang.String);
  public double optDouble(java.lang.String, double);
  public int optInt(java.lang.String);
  public int optInt(java.lang.String, int);
  public org.json.JSONArray optJSONArray(java.lang.String);
  public org.json.JSONObject optJSONObject(java.lang.String);
  public long optLong(java.lang.String);
  public long optLong(java.lang.String, long);
  public java.lang.String optString(java.lang.String);
  public java.lang.String optString(java.lang.String, java.lang.String);
  public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.util.Collection) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, int) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, long) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.util.Map) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject putOnce(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject putOpt(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public static java.lang.String quote(java.lang.String);
  public java.lang.Object remove(java.lang.String);
  public java.util.Iterator sortedKeys();
  public static java.lang.Object stringToValue(java.lang.String);
  static void testValidity(java.lang.Object) throws org.json.JSONException;
  public org.json.JSONArray toJSONArray(org.json.JSONArray) throws org.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws org.json.JSONException;
  java.lang.String toString(int, int) throws org.json.JSONException;
  static java.lang.String valueToString(java.lang.Object) throws org.json.JSONException;
  static java.lang.String valueToString(java.lang.Object, int, int) throws org.json.JSONException;
  static java.lang.Object wrap(java.lang.Object);
  public java.io.Writer write(java.io.Writer) throws org.json.JSONException;
  static {};
}
Compiled from "JSONObject.java"
class org.json.JSONObject$1 {
}
Compiled from "JSONObject.java"
final class org.json.JSONObject$Null {
  protected final java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  org.json.JSONObject$Null(org.json.JSONObject$1);
}
Compiled from "JSONString.java"
public interface org.json.JSONString {
  public abstract java.lang.String toJSONString();
}
Compiled from "JSONStringer.java"
public class org.json.JSONStringer extends org.json.JSONWriter {
  public org.json.JSONStringer();
  public java.lang.String toString();
}
Compiled from "JSONTokener.java"
public class org.json.JSONTokener {
  public org.json.JSONTokener(java.io.Reader);
  public org.json.JSONTokener(java.lang.String);
  public void back() throws org.json.JSONException;
  public static int dehexchar(char);
  public boolean end();
  public boolean more() throws org.json.JSONException;
  public char next() throws org.json.JSONException;
  public char next(char) throws org.json.JSONException;
  public java.lang.String next(int) throws org.json.JSONException;
  public char nextClean() throws org.json.JSONException;
  public java.lang.String nextString(char) throws org.json.JSONException;
  public java.lang.String nextTo(char) throws org.json.JSONException;
  public java.lang.String nextTo(java.lang.String) throws org.json.JSONException;
  public java.lang.Object nextValue() throws org.json.JSONException;
  public char skipTo(char) throws org.json.JSONException;
  public org.json.JSONException syntaxError(java.lang.String);
  public java.lang.String toString();
}
Compiled from "JSONWriter.java"
public class org.json.JSONWriter {
  protected char mode;
  protected java.io.Writer writer;
  public org.json.JSONWriter(java.io.Writer);
  public org.json.JSONWriter array() throws org.json.JSONException;
  public org.json.JSONWriter endArray() throws org.json.JSONException;
  public org.json.JSONWriter endObject() throws org.json.JSONException;
  public org.json.JSONWriter key(java.lang.String) throws org.json.JSONException;
  public org.json.JSONWriter object() throws org.json.JSONException;
  public org.json.JSONWriter value(boolean) throws org.json.JSONException;
  public org.json.JSONWriter value(double) throws org.json.JSONException;
  public org.json.JSONWriter value(long) throws org.json.JSONException;
  public org.json.JSONWriter value(java.lang.Object) throws org.json.JSONException;
}
Compiled from "Test.java"
public class org.json.Test {
  public org.json.Test();
  public static void main(java.lang.String[]);
}
Compiled from "Test.java"
class org.json.Test$1Obj implements org.json.JSONString {
  public java.lang.String aString;
  public double aNumber;
  public boolean aBoolean;
  public org.json.Test$1Obj(java.lang.String, double, boolean);
  public double getNumber();
  public java.lang.String getString();
  public boolean isBoolean();
  public java.lang.String getBENT();
  public java.lang.String getX();
  public java.lang.String toJSONString();
  public java.lang.String toString();
}
Compiled from "XML.java"
public class org.json.XML {
  public static final java.lang.Character AMP;
  public static final java.lang.Character APOS;
  public static final java.lang.Character BANG;
  public static final java.lang.Character EQ;
  public static final java.lang.Character GT;
  public static final java.lang.Character LT;
  public static final java.lang.Character QUEST;
  public static final java.lang.Character QUOT;
  public static final java.lang.Character SLASH;
  public org.json.XML();
  public static java.lang.String escape(java.lang.String);
  public static void noSpace(java.lang.String) throws org.json.JSONException;
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(java.lang.Object) throws org.json.JSONException;
  public static java.lang.String toString(java.lang.Object, java.lang.String) throws org.json.JSONException;
  static {};
}
Compiled from "XMLTokener.java"
public class org.json.XMLTokener extends org.json.JSONTokener {
  public static final java.util.HashMap entity;
  public org.json.XMLTokener(java.lang.String);
  public java.lang.String nextCDATA() throws org.json.JSONException;
  public java.lang.Object nextContent() throws org.json.JSONException;
  public java.lang.Object nextEntity(char) throws org.json.JSONException;
  public java.lang.Object nextMeta() throws org.json.JSONException;
  public java.lang.Object nextToken() throws org.json.JSONException;
  public boolean skipPast(java.lang.String) throws org.json.JSONException;
  static {};
}
