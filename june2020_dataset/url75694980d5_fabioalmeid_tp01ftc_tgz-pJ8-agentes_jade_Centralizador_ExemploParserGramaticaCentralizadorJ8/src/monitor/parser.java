
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Sep 07 20:18:23 AMT 2013
//----------------------------------------------------

package monitor;


/** CUP v0.10k generated parser.
  * @version Sat Sep 07 20:18:23 AMT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\002\004\000\002\003\003\000\002\004" +
    "\005\000\002\004\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\007\000\002\006\003\000" +
    "\002\007\003\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\012\004\006\007\004\012\011\014\007\001" +
    "\002\000\004\021\021\001\002\000\004\002\033\001\002" +
    "\000\004\021\021\001\002\000\004\021\021\001\002\000" +
    "\006\002\000\016\024\001\002\000\004\021\021\001\002" +
    "\000\004\015\013\001\002\000\004\021\014\001\002\000" +
    "\004\011\016\001\002\000\006\002\uffff\016\uffff\001\002" +
    "\000\004\021\017\001\002\000\004\017\020\001\002\000" +
    "\006\002\ufff7\016\ufff7\001\002\000\014\005\ufff9\006\ufff9" +
    "\010\ufff9\013\ufff9\020\ufff9\001\002\000\004\005\023\001" +
    "\002\000\004\015\ufffc\001\002\000\012\004\ufff8\007\ufff8" +
    "\012\ufff8\014\ufff8\001\002\000\012\004\006\007\004\012" +
    "\011\014\007\001\002\000\006\002\ufffe\016\024\001\002" +
    "\000\004\006\030\001\002\000\004\015\ufffb\001\002\000" +
    "\004\013\032\001\002\000\004\015\ufffd\001\002\000\004" +
    "\002\001\001\002\000\004\010\035\001\002\000\004\021" +
    "\021\001\002\000\004\020\037\001\002\000\004\015\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\010\003\004\004\007\005\011\001\001\000" +
    "\004\006\033\001\001\000\002\001\001\000\004\006\030" +
    "\001\001\000\004\006\026\001\001\000\004\007\024\001" +
    "\001\000\004\006\021\001\001\000\002\001\001\000\004" +
    "\010\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\025\005\011\001\001\000\004\007\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\035\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public monitor.Absyn.Tarefa pTarefa() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (monitor.Absyn.Tarefa) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Hora ::= _INTEGER_ _SYMB_5 _INTEGER_ _SYMB_11 
            {
              monitor.Absyn.Hora RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new monitor.Absyn.EHora(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Hora*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Operador ::= _SYMB_10 
            {
              monitor.Absyn.Operador RESULT = null;
		 RESULT = new monitor.Absyn.EOperador(); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Operador*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Quantidade ::= _INTEGER_ 
            {
              monitor.Absyn.Quantidade RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new monitor.Absyn.EQuantidade(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Quantidade*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dados ::= _SYMB_3 Quantidade _SYMB_4 Quantidade _SYMB_12 
            {
              monitor.Absyn.Dados RESULT = null;
		monitor.Absyn.Quantidade p_2 = (monitor.Absyn.Quantidade)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		monitor.Absyn.Quantidade p_4 = (monitor.Absyn.Quantidade)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new monitor.Absyn.EDados3(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Dados*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dados ::= _SYMB_8 Quantidade _SYMB_2 
            {
              monitor.Absyn.Dados RESULT = null;
		monitor.Absyn.Quantidade p_2 = (monitor.Absyn.Quantidade)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new monitor.Absyn.EDados2(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Dados*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Dados ::= _SYMB_6 Quantidade _SYMB_1 
            {
              monitor.Absyn.Dados RESULT = null;
		monitor.Absyn.Quantidade p_2 = (monitor.Absyn.Quantidade)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new monitor.Absyn.EDados1(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Dados*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Dados ::= _SYMB_0 Quantidade _SYMB_7 
            {
              monitor.Absyn.Dados RESULT = null;
		monitor.Absyn.Quantidade p_2 = (monitor.Absyn.Quantidade)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new monitor.Absyn.EDados(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Dados*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Acao ::= Acao Operador Acao 
            {
              monitor.Absyn.Acao RESULT = null;
		monitor.Absyn.Acao p_1 = (monitor.Absyn.Acao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		monitor.Absyn.Operador p_2 = (monitor.Absyn.Operador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		monitor.Absyn.Acao p_3 = (monitor.Absyn.Acao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new monitor.Absyn.EAcao2(p_1,p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Acao*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Acao ::= Dados _SYMB_9 Hora 
            {
              monitor.Absyn.Acao RESULT = null;
		monitor.Absyn.Dados p_1 = (monitor.Absyn.Dados)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		monitor.Absyn.Hora p_3 = (monitor.Absyn.Hora)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new monitor.Absyn.EAcao(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Acao*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Tarefa ::= Acao 
            {
              monitor.Absyn.Tarefa RESULT = null;
		monitor.Absyn.Acao p_1 = (monitor.Absyn.Acao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new monitor.Absyn.ETarefa(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Tarefa*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Tarefa EOF 
            {
              Object RESULT = null;
		monitor.Absyn.Tarefa start_val = (monitor.Absyn.Tarefa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

