Compiled from "Ded.java"
public class ded.Ded extends javax.swing.JFrame implements java.awt.event.WindowListener {
  public static final java.lang.String windowTitle;
  public static javax.swing.ImageIcon windowIcon16;
  public static javax.swing.ImageIcon windowIcon32;
  public util.awt.BitmapFont diagramBitmapFont;
  public util.awt.ResourceImageCache resourceImageCache;
  public javax.swing.JMenu redoSubmenu;
  public ded.Ded();
  public void updateMenuState();
  public void dispose();
  public void tryCloseWindow();
  public void windowClosing(java.awt.event.WindowEvent);
  public void windowOpened(java.awt.event.WindowEvent);
  public void windowClosed(java.awt.event.WindowEvent);
  public void windowIconified(java.awt.event.WindowEvent);
  public void windowDeiconified(java.awt.event.WindowEvent);
  public void windowActivated(java.awt.event.WindowEvent);
  public void windowDeactivated(java.awt.event.WindowEvent);
  public static void checkDiagram(java.lang.String) throws java.lang.Exception;
  public static void main(java.lang.String[]);
  static ded.ui.DiagramController access$000(ded.Ded);
  static void access$100(ded.Ded);
  static void access$200(ded.Ded);
}
Compiled from "Ded.java"
class ded.Ded$1 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$1(ded.Ded, java.lang.String, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$10 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$10(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$11 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$11(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$12 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$12(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$13 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$13(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$14 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$14(ded.Ded, java.lang.String, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$15 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$15(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$16 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$16(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$17 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$17(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$18 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$18(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$19 implements java.awt.event.ActionListener {
  final ded.Ded this$0;
  ded.Ded$19(ded.Ded);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$2 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$2(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$20 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$20(ded.Ded, java.lang.String, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$21 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$21(ded.Ded, java.lang.String, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$22 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$22(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$23 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$23(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$24 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$24(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$25 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$25(ded.Ded, java.lang.String, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$26 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$26(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$27 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$27(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$28 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$28(ded.Ded, java.lang.String, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
final class ded.Ded$29 implements java.lang.Thread$UncaughtExceptionHandler {
  ded.Ded$29();
  public void uncaughtException(java.lang.Thread, java.lang.Throwable);
}
Compiled from "Ded.java"
class ded.Ded$29$1 implements java.lang.Runnable {
  final java.lang.Throwable val$e;
  final ded.Ded$29 this$0;
  ded.Ded$29$1(ded.Ded$29, java.lang.Throwable);
  public void run();
}
Compiled from "Ded.java"
class ded.Ded$3 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$3(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
final class ded.Ded$30 implements java.lang.Runnable {
  final java.lang.String[] val$args;
  ded.Ded$30(java.lang.String[]);
  public void run();
}
Compiled from "Ded.java"
class ded.Ded$4 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$4(ded.Ded, java.lang.String, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$5 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$5(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$6 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$6(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$7 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$7(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$8 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$8(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "Ded.java"
class ded.Ded$9 extends util.swing.MenuAction {
  final ded.Ded this$0;
  ded.Ded$9(ded.Ded, java.lang.String, int, int, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ArrowStyle.java"
public final class ded.model.ArrowStyle extends java.lang.Enum<ded.model.ArrowStyle> {
  public static final ded.model.ArrowStyle AS_NONE;
  public static final ded.model.ArrowStyle AS_FILLED_TRIANGLE;
  public static final ded.model.ArrowStyle AS_DOUBLE_ANGLE;
  public java.lang.String description;
  public static ded.model.ArrowStyle[] values();
  public static ded.model.ArrowStyle valueOf(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "Diagram.java"
public class ded.model.Diagram implements util.json.JSONable {
  public static final java.lang.String jsonType;
  public static final java.lang.String defaultBackgroundColor;
  public static final int currentFileVersion;
  public java.awt.Dimension windowSize;
  public boolean drawFileName;
  public java.lang.String backgroundColor;
  public java.util.ArrayList<ded.model.Entity> entities;
  public java.util.ArrayList<ded.model.Inheritance> inheritances;
  public java.util.ArrayList<ded.model.Relation> relations;
  public java.util.LinkedHashMap<java.lang.String, java.awt.Color> namedColors;
  static final boolean $assertionsDisabled;
  public ded.model.Diagram();
  public static java.util.LinkedHashMap<java.lang.String, java.awt.Color> makeDefaultColors();
  public java.awt.Color getNamedColor(java.lang.String, java.awt.Color);
  public static java.lang.String colorToRGBSpec(java.awt.Color);
  public static java.awt.Color rgbSpecToColor(java.lang.String);
  public java.awt.Color getBackgroundColor();
  public void selfCheck();
  public ded.model.Diagram(ded.model.Diagram, ded.model.Diagram$ElementFilter);
  public ded.model.Diagram deepCopy();
  public org.json.JSONObject toJSON();
  public static org.json.JSONArray colorTableToJSON(java.util.LinkedHashMap<java.lang.String, java.awt.Color>) throws org.json.JSONException;
  public ded.model.Diagram(org.json.JSONObject) throws org.json.JSONException;
  public static java.util.LinkedHashMap<java.lang.String, java.awt.Color> parseColorTableFromJSON(org.json.JSONArray) throws org.json.JSONException;
  public void saveToFile(java.lang.String) throws java.lang.Exception;
  public static ded.model.Diagram readFromFile(java.lang.String) throws java.lang.Exception;
  public static ded.model.Diagram readFromReader(java.io.Reader) throws java.lang.Exception;
  public java.lang.String toJSONString();
  public static ded.model.Diagram parseJSONString(java.lang.String) throws org.json.JSONException;
  public static ded.model.Diagram readFromFileAutodetect(java.lang.String) throws java.lang.Exception;
  public static ded.model.Diagram readFromERFile(java.lang.String) throws util.XParse, java.io.IOException;
  public static ded.model.Diagram readFromERStream(java.io.InputStream) throws util.XParse, java.io.IOException;
  public ded.model.Diagram(util.FlattenInputStream) throws util.XParse, java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  static {};
}
Compiled from "Diagram.java"
public class ded.model.Diagram$ElementFilter {
  public ded.model.Diagram$ElementFilter();
  public boolean testEntity(ded.model.Entity);
  public boolean testInheritance(ded.model.Inheritance);
  public boolean testRelation(ded.model.Relation);
}
Compiled from "Entity.java"
public class ded.model.Entity implements util.json.JSONable {
  public static final ded.model.EntityShape defaultShape;
  public static final java.lang.String defaultFillColor;
  public static final java.lang.String defaultLineColor;
  public static final java.lang.String defaultTextColor;
  public static final ded.model.TextAlign defaultNameAlign;
  public static final ded.model.ImageFillStyle defaultImageFillStyle;
  public java.awt.Point loc;
  public java.awt.Dimension size;
  public ded.model.EntityShape shape;
  public java.lang.String fillColor;
  public java.lang.String lineColor;
  public java.lang.String textColor;
  public java.lang.String name;
  public ded.model.TextAlign nameAlign;
  public java.lang.String attributes;
  public int[] shapeParams;
  public java.util.EnumSet<ded.model.ShapeFlag> shapeFlags;
  public java.lang.String anchorName;
  public java.lang.String imageFileName;
  public ded.model.ImageFillStyle imageFillStyle;
  static final boolean $assertionsDisabled;
  public ded.model.Entity();
  public java.awt.Rectangle getRect();
  public java.awt.Point getCenter();
  public void setFillColor(java.lang.String);
  public void setShape(ded.model.EntityShape);
  public void setShapeAndDefaults(ded.model.EntityShape);
  public int getShapeParam(int);
  public void setShapeParams(int, int);
  public static java.util.EnumSet<ded.model.ShapeFlag> defaultFlagsForNewShape(ded.model.EntityShape, java.util.EnumSet<ded.model.ShapeFlag>, ded.model.EntityShape);
  public org.json.JSONObject toJSON();
  public ded.model.Entity(org.json.JSONObject, int) throws org.json.JSONException;
  public int toJSONRef(java.util.HashMap<ded.model.Entity, java.lang.Integer>);
  public static ded.model.Entity fromJSONRef(java.util.ArrayList<ded.model.Entity>, long) throws org.json.JSONException;
  public ded.model.Entity(util.FlattenInputStream) throws util.XParse, java.io.IOException;
  public ded.model.Entity(ded.model.Entity);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  static {};
}
Compiled from "EntityShape.java"
public final class ded.model.EntityShape extends java.lang.Enum<ded.model.EntityShape> {
  public static final ded.model.EntityShape ES_NO_SHAPE;
  public static final ded.model.EntityShape ES_RECTANGLE;
  public static final ded.model.EntityShape ES_ELLIPSE;
  public static final ded.model.EntityShape ES_CUBOID;
  public static final ded.model.EntityShape ES_CYLINDER;
  public static final ded.model.EntityShape ES_WINDOW;
  public static final ded.model.EntityShape ES_SCROLLBAR;
  public static final ded.model.EntityShape ES_PUSHBUTTON;
  public static final ded.model.EntityShape ES_TEXT_EDIT;
  public static final ded.model.EntityShape ES_DROPDOWN;
  public static final ded.model.EntityShape ES_COMBO_BOX;
  public static final ded.model.EntityShape ES_CHECK_BOX;
  public static final ded.model.EntityShape ES_RADIO_BUTTON;
  public final java.lang.String displayName;
  public final int numParams;
  public static ded.model.EntityShape[] values();
  public static ded.model.EntityShape valueOf(java.lang.String);
  public static java.util.EnumSet<ded.model.EntityShape> allValues();
  public java.lang.String toString();
  static {};
}
Compiled from "ImageFillStyle.java"
public final class ded.model.ImageFillStyle extends java.lang.Enum<ded.model.ImageFillStyle> {
  public static final ded.model.ImageFillStyle IFS_UPPER_LEFT;
  public static final ded.model.ImageFillStyle IFS_STRETCH;
  public static final ded.model.ImageFillStyle IFS_TILE;
  public static final ded.model.ImageFillStyle IFS_LOCK_SIZE;
  public static final ded.model.ImageFillStyle IFS_CENTER;
  public final java.lang.String description;
  public static ded.model.ImageFillStyle[] values();
  public static ded.model.ImageFillStyle valueOf(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "Inheritance.java"
public class ded.model.Inheritance {
  public ded.model.Entity parent;
  public boolean open;
  public java.awt.Point pt;
  static final boolean $assertionsDisabled;
  public ded.model.Inheritance(ded.model.Entity, boolean, java.awt.Point);
  public ded.model.Inheritance(ded.model.Inheritance, ded.model.Entity);
  public void globalSelfCheck(ded.model.Diagram);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public org.json.JSONObject toJSON(java.util.HashMap<ded.model.Entity, java.lang.Integer>);
  public ded.model.Inheritance(org.json.JSONObject, java.util.ArrayList<ded.model.Entity>) throws org.json.JSONException;
  public int toJSONRef(java.util.HashMap<ded.model.Inheritance, java.lang.Integer>);
  public static ded.model.Inheritance fromJSONRef(java.util.ArrayList<ded.model.Inheritance>, long) throws org.json.JSONException;
  public ded.model.Inheritance(util.FlattenInputStream) throws util.XParse, java.io.IOException;
  static {};
}
Compiled from "Relation.java"
public class ded.model.Relation {
  public static final ded.model.RoutingAlgorithm defaultRoutingAlgorithm;
  public static final java.lang.String defaultLineColor;
  public static final java.lang.String defaultTextColor;
  public ded.model.RelationEndpoint start;
  public ded.model.RelationEndpoint end;
  public java.util.ArrayList<java.awt.Point> controlPts;
  public ded.model.RoutingAlgorithm routingAlg;
  public java.lang.String label;
  public java.lang.Integer lineWidth;
  public java.lang.String lineColor;
  public java.lang.String textColor;
  public java.util.ArrayList<java.lang.Integer> dashStructure;
  static final boolean $assertionsDisabled;
  public ded.model.Relation(ded.model.RelationEndpoint, ded.model.RelationEndpoint);
  public ded.model.Relation(ded.model.Relation, ded.model.RelationEndpoint, ded.model.RelationEndpoint);
  public boolean involvesEntity(ded.model.Entity);
  public boolean involvesInheritance(ded.model.Inheritance);
  public void swapArrows();
  public void globalSelfCheck(ded.model.Diagram);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public org.json.JSONObject toJSON(java.util.HashMap<ded.model.Entity, java.lang.Integer>, java.util.HashMap<ded.model.Inheritance, java.lang.Integer>);
  public ded.model.Relation(org.json.JSONObject, java.util.ArrayList<ded.model.Entity>, java.util.ArrayList<ded.model.Inheritance>, int) throws org.json.JSONException;
  public ded.model.Relation(util.FlattenInputStream) throws util.XParse, java.io.IOException;
  static {};
}
Compiled from "RelationEndpoint.java"
public class ded.model.RelationEndpoint {
  public ded.model.Entity entity;
  public ded.model.Inheritance inheritance;
  public java.awt.Point pt;
  public ded.model.ArrowStyle arrowStyle;
  static final boolean $assertionsDisabled;
  public ded.model.RelationEndpoint(ded.model.Entity);
  public ded.model.RelationEndpoint(ded.model.Inheritance);
  public ded.model.RelationEndpoint(java.awt.Point);
  public boolean isEntity();
  public boolean isSpecificEntity(ded.model.Entity);
  public boolean isInheritance();
  public boolean isSpecificInheritance(ded.model.Inheritance);
  public boolean isPoint();
  public java.awt.Point getCenter();
  public void toggleOwning();
  public void cycleArrowStyle();
  public void globalSelfCheck(ded.model.Diagram);
  public ded.model.RelationEndpoint(ded.model.RelationEndpoint);
  public void seLocationTo(ded.model.RelationEndpoint);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public org.json.JSONObject toJSON(java.util.HashMap<ded.model.Entity, java.lang.Integer>, java.util.HashMap<ded.model.Inheritance, java.lang.Integer>, ded.model.ArrowStyle);
  public ded.model.RelationEndpoint(org.json.JSONObject, java.util.ArrayList<ded.model.Entity>, java.util.ArrayList<ded.model.Inheritance>, ded.model.ArrowStyle, int) throws org.json.JSONException;
  public ded.model.RelationEndpoint(util.FlattenInputStream) throws util.XParse, java.io.IOException;
  static {};
}
Compiled from "RelationEndpoint.java"
class ded.model.RelationEndpoint$1 {
  static final int[] $SwitchMap$ded$model$ArrowStyle;
  static {};
}
Compiled from "RoutingAlgorithm.java"
public final class ded.model.RoutingAlgorithm extends java.lang.Enum<ded.model.RoutingAlgorithm> {
  public static final ded.model.RoutingAlgorithm RA_DIRECT;
  public static final ded.model.RoutingAlgorithm RA_MANHATTAN_HORIZ;
  public static final ded.model.RoutingAlgorithm RA_MANHATTAN_VERT;
  public java.lang.String description;
  public static ded.model.RoutingAlgorithm[] values();
  public static ded.model.RoutingAlgorithm valueOf(java.lang.String);
  public java.lang.String toString();
  public boolean isManhattan();
  static {};
}
Compiled from "SerializationTests.java"
public class ded.model.SerializationTests {
  static final boolean $assertionsDisabled;
  public ded.model.SerializationTests();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  public void test1() throws java.lang.Exception;
  static {};
}
Compiled from "ShapeFlag.java"
public final class ded.model.ShapeFlag extends java.lang.Enum<ded.model.ShapeFlag> {
  public static final ded.model.ShapeFlag SF_HAS_MAXIMIZE;
  public static final ded.model.ShapeFlag SF_HAS_MINIMIZE;
  public static final ded.model.ShapeFlag SF_HAS_CLOSE;
  public static final ded.model.ShapeFlag SF_HAS_WINDOW_OPS;
  public static final ded.model.ShapeFlag SF_CHECKED;
  public static final ded.model.ShapeFlag SF_TRI_STATE;
  public final java.lang.String displayName;
  public final boolean isDefault;
  public final ded.model.EntityShape[] shapes;
  public static ded.model.ShapeFlag[] values();
  public static ded.model.ShapeFlag valueOf(java.lang.String);
  public static java.util.EnumSet<ded.model.ShapeFlag> allFlags();
  public static java.util.EnumSet<ded.model.ShapeFlag> allFlagsForShape(ded.model.EntityShape);
  public static java.util.EnumSet<ded.model.ShapeFlag> defaultFlagsForShape(ded.model.EntityShape);
  public java.lang.String toString();
  static {};
}
Compiled from "TextAlign.java"
public final class ded.model.TextAlign extends java.lang.Enum<ded.model.TextAlign> {
  public static final ded.model.TextAlign TA_LEFT;
  public static final ded.model.TextAlign TA_CENTER;
  public static final ded.model.TextAlign TA_RIGHT;
  public java.lang.String displayName;
  public static ded.model.TextAlign[] values();
  public static ded.model.TextAlign valueOf(java.lang.String);
  public java.lang.String toString();
  static {};
}
Compiled from "UndoHistory.java"
public class ded.model.UndoHistory {
  static final boolean $assertionsDisabled;
  public ded.model.UndoHistory(ded.model.Diagram, java.lang.String, ded.model.UndoHistoryLimit);
  public void recordDiagramChange(ded.model.Diagram, java.lang.String);
  public ded.model.Diagram getCurrentDiagram();
  public boolean canUndo();
  public boolean canRedo();
  public int numRedos();
  public java.util.ArrayList<java.lang.String> describeRedos();
  public ded.model.Diagram undo();
  public ded.model.Diagram redo(int);
  public ded.model.Diagram redoMostRecent();
  public java.lang.String dumpHistoryStructure();
  static {};
}
Compiled from "UndoHistory.java"
class ded.model.UndoHistory$HistoryEntry {
  public ded.model.Diagram diagram;
  public ded.model.UndoHistory$HistoryEntry parent;
  public java.lang.String commandDescription;
  public java.util.ArrayList<ded.model.UndoHistory$HistoryEntry> futures;
  public ded.model.UndoHistory$HistoryEntry(ded.model.Diagram, ded.model.UndoHistory$HistoryEntry, java.lang.String);
}
Compiled from "UndoHistoryLimit.java"
public interface ded.model.UndoHistoryLimit {
  public abstract int getUndoHistoryLimit();
  public abstract void setUndoHistoryLimit(int);
}
Compiled from "AlignCommand.java"
public final class ded.ui.AlignCommand extends java.lang.Enum<ded.ui.AlignCommand> {
  public static final ded.ui.AlignCommand AC_LEFT_MOVE;
  public static final ded.ui.AlignCommand AC_LEFT_RESIZE;
  public static final ded.ui.AlignCommand AC_RIGHT_MOVE;
  public static final ded.ui.AlignCommand AC_RIGHT_RESIZE;
  public static final ded.ui.AlignCommand AC_TOP_MOVE;
  public static final ded.ui.AlignCommand AC_TOP_RESIZE;
  public static final ded.ui.AlignCommand AC_BOTTOM_MOVE;
  public static final ded.ui.AlignCommand AC_BOTTOM_RESIZE;
  ded.ui.EntityEdge ee;
  boolean resize;
  public java.lang.String label;
  public int mnemonic;
  public static ded.ui.AlignCommand[] values();
  public static ded.ui.AlignCommand valueOf(java.lang.String);
  static {};
}
Compiled from "Controller.java"
public abstract class ded.ui.Controller {
  public static final java.awt.Color selectedColor;
  public static final java.awt.Color resizeHandleColor;
  public static final int resizeHandleSize;
  protected ded.ui.SelectionState selState;
  public ded.ui.DiagramController diagramController;
  public ded.ui.Controller(ded.ui.DiagramController);
  public abstract java.awt.Point getLoc();
  public void paintSelectionBackground(java.awt.Graphics);
  public void paint(java.awt.Graphics);
  protected void paintBounds(java.awt.Graphics, java.awt.Color);
  public ded.ui.SelectionState getSelState();
  public boolean isSelected();
  public void setSelected(ded.ui.SelectionState);
  public java.util.Set<java.awt.Polygon> getBounds();
  public boolean boundsContains(java.awt.Point);
  public boolean boundsIntersects(java.awt.Rectangle);
  public void mouseSelect(java.awt.event.MouseEvent, boolean);
  public void beginDragging(java.awt.Point);
  public void stopDragging();
  public void rightClickMenu(java.awt.event.MouseEvent);
  protected void addToRightClickMenu(javax.swing.JPopupMenu, java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public boolean keyPressed(java.awt.event.KeyEvent);
  public void selfCheck();
  public void globalSelfCheck(ded.model.Diagram);
  public void dragTo(java.awt.Point);
  public void edit();
  public void insertControlPoint();
  public void deleteSelfAndData(ded.model.Diagram);
  public boolean wantLassoSelection();
  public void updateAfterImageReload();
  public void setLineColor(java.lang.String);
  public void setTextColor(java.lang.String);
  public void setNameTextAlign(ded.model.TextAlign);
  static {};
}
Compiled from "Controller.java"
class ded.ui.Controller$1 extends util.swing.MenuAction {
  final ded.ui.Controller val$ths;
  final ded.ui.Controller this$0;
  ded.ui.Controller$1(ded.ui.Controller, java.lang.String, int, ded.ui.Controller);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ControllerFilter.java"
public interface ded.ui.ControllerFilter {
  public abstract boolean satisfies(ded.ui.Controller);
}
Compiled from "DiagramColorsDialog.java"
public class ded.ui.DiagramColorsDialog extends util.swing.ModalDialog {
  static final boolean $assertionsDisabled;
  public ded.ui.DiagramColorsDialog(java.awt.Component, ded.model.Diagram);
  public void okPressed();
  public void addNewColor();
  public void deleteSelectedColors();
  public void moveSelectedItems(int);
  public void resetToDefault();
  public void showHelpDialog();
  public static boolean exec(java.awt.Component, ded.model.Diagram);
  static {};
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$1 implements java.awt.event.ActionListener {
  final ded.ui.DiagramColorsDialog this$0;
  ded.ui.DiagramColorsDialog$1(ded.ui.DiagramColorsDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$2 implements java.awt.event.ActionListener {
  final ded.ui.DiagramColorsDialog this$0;
  ded.ui.DiagramColorsDialog$2(ded.ui.DiagramColorsDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$3 implements java.awt.event.ActionListener {
  final ded.ui.DiagramColorsDialog this$0;
  ded.ui.DiagramColorsDialog$3(ded.ui.DiagramColorsDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$4 implements java.awt.event.ActionListener {
  final ded.ui.DiagramColorsDialog this$0;
  ded.ui.DiagramColorsDialog$4(ded.ui.DiagramColorsDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$5 implements java.awt.event.ActionListener {
  final ded.ui.DiagramColorsDialog this$0;
  ded.ui.DiagramColorsDialog$5(ded.ui.DiagramColorsDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$6 implements java.awt.event.ActionListener {
  final ded.ui.DiagramColorsDialog this$0;
  ded.ui.DiagramColorsDialog$6(ded.ui.DiagramColorsDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$7 implements java.awt.event.ActionListener {
  final ded.ui.DiagramColorsDialog this$0;
  ded.ui.DiagramColorsDialog$7(ded.ui.DiagramColorsDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$8 implements java.awt.event.ActionListener {
  final ded.ui.DiagramColorsDialog this$0;
  ded.ui.DiagramColorsDialog$8(ded.ui.DiagramColorsDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DiagramColorsDialog.java"
public class ded.ui.DiagramColorsDialog$ColorCellEditor extends javax.swing.AbstractCellEditor implements javax.swing.table.TableCellEditor,java.awt.event.ActionListener {
  protected static final java.lang.String EDIT;
  final ded.ui.DiagramColorsDialog this$0;
  public ded.ui.DiagramColorsDialog$ColorCellEditor(ded.ui.DiagramColorsDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
  public java.lang.Object getCellEditorValue();
  public java.awt.Component getTableCellEditorComponent(javax.swing.JTable, java.lang.Object, boolean, int, int);
}
Compiled from "DiagramColorsDialog.java"
public class ded.ui.DiagramColorsDialog$ColorRenderer extends javax.swing.JLabel implements javax.swing.table.TableCellRenderer {
  public ded.ui.DiagramColorsDialog$ColorRenderer(javax.swing.JTable);
  public java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int);
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$ColorTableEntry {
  public java.lang.String name;
  public java.awt.Color color;
  public ded.ui.DiagramColorsDialog$ColorTableEntry(java.lang.String, java.awt.Color);
}
Compiled from "DiagramColorsDialog.java"
class ded.ui.DiagramColorsDialog$ColorTableModel extends javax.swing.table.AbstractTableModel {
  public java.util.ArrayList<ded.ui.DiagramColorsDialog$ColorTableEntry> colors;
  public javax.swing.JTable jtable;
  static final boolean $assertionsDisabled;
  public ded.ui.DiagramColorsDialog$ColorTableModel(ded.model.Diagram);
  public void setColorTable(java.util.LinkedHashMap<java.lang.String, java.awt.Color>);
  public void setJTable(javax.swing.JTable);
  public int getRowCount();
  public int getColumnCount();
  public java.lang.String getColumnName(int);
  public java.lang.Class<?> getColumnClass(int);
  public boolean isCellEditable(int, int);
  public java.lang.Object getValueAt(int, int);
  public void setValueAt(java.lang.Object, int, int);
  static {};
}
Compiled from "DiagramController.java"
public class ded.ui.DiagramController extends javax.swing.JPanel implements java.awt.event.MouseListener,java.awt.event.MouseMotionListener,java.awt.event.KeyListener,java.awt.event.ComponentListener,java.awt.event.FocusListener,ded.model.UndoHistoryLimit {
  public static final int fileNameLabelMargin;
  public static java.lang.String abbotRecorderClassName;
  public static final boolean debugFocus;
  public static final int SNAP_DIST;
  public ded.model.Diagram diagram;
  static final boolean $assertionsDisabled;
  public ded.ui.DiagramController(ded.Ded);
  public ded.model.Diagram getDiagram();
  public util.awt.BitmapFont getDiagramFont();
  public void paint(java.awt.Graphics);
  protected java.util.HashSet<ded.ui.Controller> getSelectionSet();
  protected void setMultipleSelected(java.util.Set<ded.ui.Controller>, ded.ui.SelectionState);
  public int deselectAll();
  public java.awt.Point getSnappedPoint(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void keyPressed(java.awt.event.KeyEvent);
  public void selectNextController(boolean);
  public void showHelpBox();
  public void showLogWindow();
  public void newFile();
  public void loadFromFile();
  public void loadFromNamedFile(java.lang.String);
  public void chooseAndSaveToFile();
  public void saveCurrentFile();
  public void writeToPNG(java.io.File, java.lang.String) throws java.lang.Exception;
  protected void paintWithoutSelectionsShowing(java.awt.Graphics);
  public void logDisplayScaling();
  public void diagramChanged(java.lang.String);
  public void clearDirty();
  public boolean isDirty();
  public void keyTyped(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void setMode(ded.ui.DiagramController$Mode);
  public ded.ui.Controller getUniqueSelected();
  public util.IdentityHashSet<ded.ui.Controller> getAllSelected();
  public void editSelected();
  public void copySelected();
  public boolean innerCopySelected(boolean);
  public void pasteClipboard();
  public void cutSelected();
  public void deleteSelected();
  public void innerDeleteSelected(boolean);
  public void insertControlPoint();
  public void toggleSelection(ded.ui.Controller);
  public void normalizeExclusiveSelect();
  public void selectOnly(ded.ui.Controller);
  public void beginDragging(ded.ui.Controller, java.awt.Point);
  public void selfCheck();
  protected void setSelectionSet(java.util.Set<ded.ui.Controller>);
  protected void selectAccordingToFilter(ded.ui.ControllerFilter);
  protected java.awt.Rectangle getLassoRect();
  protected void selectAccordingToLasso();
  public void add(ded.ui.Controller);
  public void remove(ded.ui.Controller);
  public boolean contains(ded.ui.Controller);
  public void deleteControllers(ded.ui.ControllerFilter);
  public void deleteControllers(util.IdentityHashSet<ded.ui.Controller>);
  public util.IdentityHashSet<ded.ui.EntityController> findEntityControllersInRectangle(java.awt.Rectangle);
  public ded.model.RelationEndpoint getRelationEndpoint(java.awt.Point);
  public void setSelectedEntitiesFillColor(java.lang.String);
  public void setSelectedElementsTextColor(java.lang.String);
  public void setSelectedElementsLineColor(java.lang.String);
  public java.util.ArrayList<ded.ui.EntityController> getSelectedEntities();
  public void setSelectedEntitiesShape(ded.model.EntityShape);
  public void setSelectedElementsNameTextAlign(ded.model.TextAlign);
  public void alignSelectedEntities(ded.ui.AlignCommand);
  public void setSelectedEntitiesAnchorName(ded.ui.DiagramController$SetAnchorCommand);
  public void errorMessageBox(java.lang.String);
  public void exnErrorMessageBox(java.lang.String, java.lang.Exception);
  public java.awt.Image getImage(java.lang.String);
  public void reloadEntityImages();
  public void log(java.lang.String);
  public void logNoNewline(java.lang.String);
  public void editCustomColors();
  public void editDiagramProperties();
  public void moveSelectedEntitiesToFrontOrBack(boolean);
  public void componentResized(java.awt.event.ComponentEvent);
  public void componentMoved(java.awt.event.ComponentEvent);
  public void componentShown(java.awt.event.ComponentEvent);
  public void componentHidden(java.awt.event.ComponentEvent);
  public void focusGained(java.awt.event.FocusEvent);
  public void focusLost(java.awt.event.FocusEvent);
  public java.awt.Image getResourceImage(java.lang.String);
  public void swapSelectedRelationEndpoints();
  public void setSelectedEntitiesLineDashStyle(ded.ui.LineDashStyle);
  public void editUndo();
  public void editRedo();
  public void editRedoAlternate(int);
  public void showUndoHistory();
  public void disposeOwnedWindows();
  public ded.model.UndoHistory getUndoHistory();
  public void populateRedoAlternateMenu();
  public int getUndoHistoryLimit();
  public void setUndoHistoryLimit(int);
  static util.IdentityHashSet access$000(ded.ui.DiagramController);
  static {};
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$1 implements ded.ui.ControllerFilter {
  final ded.ui.DiagramController this$0;
  ded.ui.DiagramController$1(ded.ui.DiagramController);
  public boolean satisfies(ded.ui.Controller);
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$2 implements ded.ui.ControllerFilter {
  final ded.ui.DiagramController this$0;
  ded.ui.DiagramController$2(ded.ui.DiagramController);
  public boolean satisfies(ded.ui.Controller);
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$3 implements ded.ui.ControllerFilter {
  final ded.ui.DiagramController this$0;
  ded.ui.DiagramController$3(ded.ui.DiagramController);
  public boolean satisfies(ded.ui.Controller);
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$4 implements ded.ui.ControllerFilter {
  final util.IdentityHashSet val$newControllers;
  final ded.ui.DiagramController this$0;
  ded.ui.DiagramController$4(ded.ui.DiagramController, util.IdentityHashSet);
  public boolean satisfies(ded.ui.Controller);
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$5 implements ded.ui.ControllerFilter {
  final ded.ui.DiagramController this$0;
  ded.ui.DiagramController$5(ded.ui.DiagramController);
  public boolean satisfies(ded.ui.Controller);
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$6 implements ded.ui.ControllerFilter {
  final java.util.Set val$toSelect;
  final ded.ui.DiagramController this$0;
  ded.ui.DiagramController$6(ded.ui.DiagramController, java.util.Set);
  public boolean satisfies(ded.ui.Controller);
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$7 implements ded.ui.ControllerFilter {
  final java.awt.Rectangle val$lasso;
  final ded.ui.DiagramController this$0;
  ded.ui.DiagramController$7(ded.ui.DiagramController, java.awt.Rectangle);
  public boolean satisfies(ded.ui.Controller);
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$8 {
  static final int[] $SwitchMap$ded$ui$DiagramController$Mode;
  static final int[] $SwitchMap$ded$ui$DiagramController$SetAnchorCommand;
  static {};
}
Compiled from "DiagramController.java"
public class ded.ui.DiagramController$ControllerLocationComparator implements java.util.Comparator<ded.ui.Controller> {
  public ded.ui.DiagramController$ControllerLocationComparator();
  public int compare(ded.ui.Controller, ded.ui.Controller);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "DiagramController.java"
public final class ded.ui.DiagramController$Mode extends java.lang.Enum<ded.ui.DiagramController$Mode> {
  public static final ded.ui.DiagramController$Mode DCM_SELECT;
  public static final ded.ui.DiagramController$Mode DCM_CREATE_ENTITY;
  public static final ded.ui.DiagramController$Mode DCM_CREATE_RELATION;
  public static final ded.ui.DiagramController$Mode DCM_CREATE_INHERITANCE;
  public static final ded.ui.DiagramController$Mode DCM_DRAGGING;
  public static final ded.ui.DiagramController$Mode DCM_RECT_LASSO;
  public final java.lang.String description;
  public static ded.ui.DiagramController$Mode[] values();
  public static ded.ui.DiagramController$Mode valueOf(java.lang.String);
  static {};
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$RedoAlternateAction extends javax.swing.AbstractAction {
  public int whichRedo;
  final ded.ui.DiagramController this$0;
  public ded.ui.DiagramController$RedoAlternateAction(ded.ui.DiagramController, java.lang.String, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "DiagramController.java"
class ded.ui.DiagramController$SelectedElementFilter extends ded.model.Diagram$ElementFilter {
  public ded.ui.DiagramController$SelectedElementFilter(java.util.ArrayList<ded.ui.Controller>);
  public boolean testEntity(ded.model.Entity);
  public boolean testInheritance(ded.model.Inheritance);
  public boolean testRelation(ded.model.Relation);
}
Compiled from "DiagramController.java"
public final class ded.ui.DiagramController$SetAnchorCommand extends java.lang.Enum<ded.ui.DiagramController$SetAnchorCommand> {
  public static final ded.ui.DiagramController$SetAnchorCommand SAC_SET_TO_ENTITY_NAME;
  public static final ded.ui.DiagramController$SetAnchorCommand SAC_CLEAR;
  public static ded.ui.DiagramController$SetAnchorCommand[] values();
  public static ded.ui.DiagramController$SetAnchorCommand valueOf(java.lang.String);
  static {};
}
Compiled from "DiagramPropertiesDialog.java"
public class ded.ui.DiagramPropertiesDialog extends util.swing.ModalDialog {
  public ded.ui.DiagramPropertiesDialog(java.awt.Component, ded.model.Diagram);
  public void okPressed();
  public static boolean exec(java.awt.Component, ded.model.Diagram);
}
Compiled from "EntityController.java"
public class ded.ui.EntityController extends ded.ui.Controller {
  public static final java.awt.Color fallbackEntityFillColor;
  public static final java.awt.Color fallbackEntityLineColor;
  public static final int selectedEntityXORBorderWidth;
  public static final int entityNameHeight;
  public static final int entityAttributeMargin;
  public static final int minimumEntitySize;
  public static final int selectionBoxExpansion;
  public static final java.awt.Color windowResizeCenterHandleColor;
  public static final java.awt.Color bevelLightColor;
  public static final java.awt.Color bevelDarkColor;
  public static final java.awt.Color scrollThumbColor;
  public ded.model.Entity entity;
  public ded.ui.EntityResizeController[] resizeHandles;
  public ded.ui.WindowCenterController windowCenterHandle;
  static final boolean $assertionsDisabled;
  public ded.ui.EntityController(ded.ui.DiagramController, ded.model.Entity);
  public java.awt.Point getLoc();
  public int getLeft();
  public int getTop();
  public int getRight();
  public int getBottom();
  public void resizeSetLeft(int);
  public void resizeSetTop(int);
  public int getBottomOrRight(util.awt.HorizOrVert);
  public void resizeSetBottomOrRight(int, util.awt.HorizOrVert, boolean);
  public void resizeSetRight(int, boolean);
  public void resizeSetBottom(int, boolean);
  public int getEdge(ded.ui.EntityEdge);
  public void setEdge(ded.ui.EntityEdge, boolean, int);
  public java.awt.Rectangle getAttributeRect();
  public void dragTo(java.awt.Point);
  public void paintSelectionBackground(java.awt.Graphics);
  public void drawAlignedText(java.awt.Graphics, java.awt.Rectangle, java.lang.String, ded.model.TextAlign);
  public void paint(java.awt.Graphics);
  public void drawImage(java.awt.Graphics, java.awt.Rectangle);
  public java.awt.Color getFillColor();
  public java.awt.Color getLineColor();
  public java.awt.Color getTextColor();
  public void drawCuboidSides(java.awt.Graphics, java.awt.Rectangle);
  public void drawCylinder(java.awt.Graphics, java.awt.Rectangle, boolean);
  public void drawScrollbar(java.awt.Graphics, java.awt.Rectangle);
  public void drawTextEdit(java.awt.Graphics, java.awt.Rectangle);
  static java.awt.Color adjustBrightness(java.awt.Color, float);
  public java.awt.Rectangle getRect();
  public java.util.Set<java.awt.Polygon> getBounds();
  public void mousePressed(java.awt.event.MouseEvent);
  protected void addToRightClickMenu(javax.swing.JPopupMenu, java.awt.event.MouseEvent);
  public void setLineColor(java.lang.String);
  public void setTextColor(java.lang.String);
  public void setNameTextAlign(ded.model.TextAlign);
  public static void createEntityAt(ded.ui.DiagramController, java.awt.Point);
  public void setSelected(ded.ui.SelectionState);
  public void selfCheck();
  public void edit();
  public void updateAfterImageReload();
  public void deleteSelfAndData(ded.model.Diagram);
  static {};
}
Compiled from "EntityController.java"
class ded.ui.EntityController$1 extends javax.swing.AbstractAction {
  final ded.ui.EntityController val$ths;
  final java.lang.String val$color;
  final ded.ui.EntityController this$0;
  ded.ui.EntityController$1(ded.ui.EntityController, java.lang.String, ded.ui.EntityController, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityController.java"
class ded.ui.EntityController$10 {
  static final int[] $SwitchMap$ded$ui$EntityEdge;
  static final int[] $SwitchMap$ded$model$TextAlign;
  static final int[] $SwitchMap$ded$model$EntityShape;
  static final int[] $SwitchMap$ded$model$ImageFillStyle;
  static {};
}
Compiled from "EntityController.java"
class ded.ui.EntityController$2 extends javax.swing.AbstractAction {
  final ded.ui.EntityController val$ths;
  final java.lang.String val$color;
  final ded.ui.EntityController this$0;
  ded.ui.EntityController$2(ded.ui.EntityController, java.lang.String, ded.ui.EntityController, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityController.java"
class ded.ui.EntityController$3 extends javax.swing.AbstractAction {
  final java.lang.String val$color;
  final ded.ui.EntityController this$0;
  ded.ui.EntityController$3(ded.ui.EntityController, java.lang.String, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityController.java"
class ded.ui.EntityController$4 extends javax.swing.AbstractAction {
  final ded.ui.EntityController val$ths;
  final ded.model.EntityShape val$shape;
  final ded.ui.EntityController this$0;
  ded.ui.EntityController$4(ded.ui.EntityController, java.lang.String, ded.ui.EntityController, ded.model.EntityShape);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityController.java"
class ded.ui.EntityController$5 extends javax.swing.AbstractAction {
  final ded.ui.EntityController val$ths;
  final ded.model.TextAlign val$align;
  final ded.ui.EntityController this$0;
  ded.ui.EntityController$5(ded.ui.EntityController, java.lang.String, ded.ui.EntityController, ded.model.TextAlign);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityController.java"
class ded.ui.EntityController$6 extends util.swing.MenuAction {
  final ded.ui.EntityController val$ths;
  final ded.ui.AlignCommand val$ac;
  final ded.ui.EntityController this$0;
  ded.ui.EntityController$6(ded.ui.EntityController, java.lang.String, int, ded.ui.EntityController, ded.ui.AlignCommand);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityController.java"
class ded.ui.EntityController$7 extends javax.swing.AbstractAction {
  final ded.ui.EntityController val$ths;
  final ded.ui.EntityController this$0;
  ded.ui.EntityController$7(ded.ui.EntityController, java.lang.String, ded.ui.EntityController);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityController.java"
class ded.ui.EntityController$8 extends javax.swing.AbstractAction {
  final ded.ui.EntityController val$ths;
  final ded.ui.EntityController this$0;
  ded.ui.EntityController$8(ded.ui.EntityController, java.lang.String, ded.ui.EntityController);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityController.java"
class ded.ui.EntityController$9 implements ded.ui.ControllerFilter {
  final ded.model.Entity val$thisEntity;
  final ded.ui.EntityController this$0;
  ded.ui.EntityController$9(ded.ui.EntityController, ded.model.Entity);
  public boolean satisfies(ded.ui.Controller);
}
Compiled from "EntityDialog.java"
public class ded.ui.EntityDialog extends util.swing.ModalDialog implements java.awt.event.ItemListener {
  public ded.ui.EntityDialog(java.awt.Component, ded.model.Diagram, ded.model.Entity);
  public void createRightColumn(ded.model.Diagram, javax.swing.Box);
  public void makeLeftColumn(javax.swing.Box);
  public static javax.swing.JComboBox<java.lang.String> makeColorChooser(ded.model.Diagram, javax.swing.Box, java.lang.String, java.lang.String, char);
  public void okPressed();
  public void itemStateChanged(java.awt.event.ItemEvent);
  public static boolean exec(java.awt.Component, ded.model.Diagram, ded.model.Entity);
  static void access$000(ded.ui.EntityDialog);
}
Compiled from "EntityDialog.java"
class ded.ui.EntityDialog$1 implements java.awt.event.ActionListener {
  final ded.ui.EntityDialog this$0;
  ded.ui.EntityDialog$1(ded.ui.EntityDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityDialog.java"
final class ded.ui.EntityDialog$2 implements java.awt.event.ActionListener {
  final javax.swing.JComboBox val$ret;
  final ded.model.Diagram val$diagram;
  final javax.swing.Box val$vb;
  ded.ui.EntityDialog$2(javax.swing.JComboBox, ded.model.Diagram, javax.swing.Box);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "EntityEdge.java"
public final class ded.ui.EntityEdge extends java.lang.Enum<ded.ui.EntityEdge> {
  public static final ded.ui.EntityEdge EE_LEFT;
  public static final ded.ui.EntityEdge EE_TOP;
  public static final ded.ui.EntityEdge EE_RIGHT;
  public static final ded.ui.EntityEdge EE_BOTTOM;
  public boolean extremeIsGreater;
  public static ded.ui.EntityEdge[] values();
  public static ded.ui.EntityEdge valueOf(java.lang.String);
  static {};
}
Compiled from "EntityResizeController.java"
public class ded.ui.EntityResizeController extends ded.ui.ResizeController {
  public ded.ui.EntityController econtroller;
  public ded.ui.ResizeHandle whichHandle;
  static final boolean $assertionsDisabled;
  public ded.ui.EntityResizeController(ded.ui.DiagramController, ded.ui.EntityController, ded.ui.ResizeHandle);
  public java.awt.Point getLoc();
  public void dragTo(java.awt.Point);
  public void edit();
  public void selfCheck();
  static {};
}
Compiled from "InheritanceController.java"
public class ded.ui.InheritanceController extends ded.ui.Controller {
  public static final int radius;
  public static final int height;
  public static final int selectionBoxMargin;
  public static final int inheritLineWidth;
  public static final java.awt.Color inheritFillColor;
  public static final java.awt.Color inheritLineColor;
  public ded.model.Inheritance inheritance;
  public ded.ui.InheritanceController(ded.ui.DiagramController, ded.model.Inheritance);
  public java.awt.Point getLoc();
  public java.util.Set<java.awt.Polygon> getBounds();
  public void paint(java.awt.Graphics);
  public void mousePressed(java.awt.event.MouseEvent);
  public void dragTo(java.awt.Point);
  public void deleteSelfAndData(ded.model.Diagram);
  public void setSelected(ded.ui.SelectionState);
  public void globalSelfCheck(ded.model.Diagram);
  public boolean keyPressed(java.awt.event.KeyEvent);
  static {};
}
Compiled from "InheritanceController.java"
class ded.ui.InheritanceController$1 implements ded.ui.ControllerFilter {
  final ded.model.Inheritance val$thisInh;
  final ded.ui.InheritanceController this$0;
  ded.ui.InheritanceController$1(ded.ui.InheritanceController, ded.model.Inheritance);
  public boolean satisfies(ded.ui.Controller);
}
Compiled from "LineDashStyle.java"
public final class ded.ui.LineDashStyle extends java.lang.Enum<ded.ui.LineDashStyle> {
  public static final ded.ui.LineDashStyle LDS_SOLID;
  public static final ded.ui.LineDashStyle LDS_DASHED;
  public static final ded.ui.LineDashStyle LDS_DOTTED;
  public static final ded.ui.LineDashStyle LDS_DASH_DOT;
  public java.lang.String name;
  public int mnemonicKey;
  public java.lang.String dashStructureString;
  public static ded.ui.LineDashStyle[] values();
  public static ded.ui.LineDashStyle valueOf(java.lang.String);
  static {};
}
Compiled from "RelationControlPointController.java"
public class ded.ui.RelationControlPointController extends ded.ui.ResizeController {
  public ded.ui.RelationController rcontroller;
  public int which;
  static final boolean $assertionsDisabled;
  public ded.ui.RelationControlPointController(ded.ui.DiagramController, ded.ui.RelationController, int);
  public java.awt.Point getLoc();
  public void dragTo(java.awt.Point);
  public void selfCheck();
  public void mousePressed(java.awt.event.MouseEvent);
  static void access$000(ded.ui.RelationControlPointController);
  static void access$100(ded.ui.RelationControlPointController);
  static {};
}
Compiled from "RelationControlPointController.java"
class ded.ui.RelationControlPointController$1 extends util.swing.MenuAction {
  final ded.ui.RelationControlPointController val$thisController;
  final ded.ui.RelationControlPointController this$0;
  ded.ui.RelationControlPointController$1(ded.ui.RelationControlPointController, java.lang.String, int, ded.ui.RelationControlPointController);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RelationControlPointController.java"
class ded.ui.RelationControlPointController$2 extends util.swing.MenuAction {
  final ded.ui.RelationControlPointController val$thisController;
  final ded.ui.RelationControlPointController this$0;
  ded.ui.RelationControlPointController$2(ded.ui.RelationControlPointController, java.lang.String, int, ded.ui.RelationControlPointController);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RelationControlPointDialog.java"
public class ded.ui.RelationControlPointDialog extends util.swing.ModalDialog {
  public ded.ui.RelationControlPointDialog(java.awt.Component, ded.model.Relation, int);
  public void okPressed();
}
Compiled from "RelationController.java"
public class ded.ui.RelationController extends ded.ui.Controller {
  public static final int selfRelationRadius;
  public static final int arrowHeadLength;
  public static final int relationBoundsSlop;
  public static final int relationLabelOffset;
  public ded.model.Relation relation;
  public ded.ui.RelationEndpointController startHandle;
  public ded.ui.RelationEndpointController endHandle;
  public ded.ui.RelationControlPointController[] controlPointHandle;
  static final boolean $assertionsDisabled;
  public ded.ui.RelationController(ded.ui.DiagramController, ded.model.Relation);
  public java.awt.Point getLoc();
  public void dragTo(java.awt.Point);
  public java.util.Set<java.awt.Polygon> getBounds();
  public void paint(java.awt.Graphics);
  public java.awt.Color getLineColor();
  public java.awt.Color getTextColor();
  public void selfCheck();
  public void setSelected(ded.ui.SelectionState);
  public ded.ui.RelationEndpointController getEndHandle();
  public void edit();
  public void deleteSelfAndData(ded.model.Diagram);
  public void insertControlPoint();
  public void deleteControlPoint(int);
  public void mousePressed(java.awt.event.MouseEvent);
  protected void addToRightClickMenu(javax.swing.JPopupMenu, java.awt.event.MouseEvent);
  public void setLineColor(java.lang.String);
  public void setTextColor(java.lang.String);
  public boolean keyPressed(java.awt.event.KeyEvent);
  public static util.awt.HorizOrVert manhattan_hitNextControlPoint(java.util.ArrayList<java.awt.Point>, util.awt.HorizOrVert, java.awt.Point);
  public static java.awt.Point manhattan_getEndpointEmergence(ded.model.RelationEndpoint, util.awt.HorizOrVert, java.awt.Point);
  static void access$000(ded.ui.RelationController, java.awt.Point);
  static {};
}
Compiled from "RelationController.java"
class ded.ui.RelationController$1 extends util.swing.MenuAction {
  final java.awt.event.MouseEvent val$ev;
  final ded.ui.RelationController this$0;
  ded.ui.RelationController$1(ded.ui.RelationController, java.lang.String, int, java.awt.event.MouseEvent);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RelationController.java"
class ded.ui.RelationController$2 extends javax.swing.AbstractAction {
  final java.lang.String val$color;
  final ded.ui.RelationController this$0;
  ded.ui.RelationController$2(ded.ui.RelationController, java.lang.String, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RelationController.java"
class ded.ui.RelationController$3 extends javax.swing.AbstractAction {
  final java.lang.String val$color;
  final ded.ui.RelationController this$0;
  ded.ui.RelationController$3(ded.ui.RelationController, java.lang.String, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RelationController.java"
class ded.ui.RelationController$4 extends util.swing.MenuAction {
  final ded.ui.LineDashStyle val$lds;
  final ded.ui.RelationController this$0;
  ded.ui.RelationController$4(ded.ui.RelationController, java.lang.String, int, ded.ui.LineDashStyle);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RelationController.java"
class ded.ui.RelationController$5 extends util.swing.MenuAction {
  final ded.ui.RelationController this$0;
  ded.ui.RelationController$5(ded.ui.RelationController, java.lang.String, int);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RelationController.java"
class ded.ui.RelationController$6 {
  static final int[] $SwitchMap$ded$model$RoutingAlgorithm;
  static {};
}
Compiled from "RelationDialog.java"
public class ded.ui.RelationDialog extends util.swing.ModalDialog {
  public ded.ui.RelationDialog(java.awt.Component, ded.model.Diagram, ded.model.Relation);
  public static java.util.ArrayList<java.lang.Integer> stringToDashStructure(java.lang.String);
  public void okPressed();
  public static boolean exec(java.awt.Component, ded.model.Diagram, ded.model.Relation);
}
Compiled from "RelationEndpointController.java"
public class ded.ui.RelationEndpointController extends ded.ui.ResizeController {
  public ded.ui.RelationController rcontroller;
  public ded.model.RelationEndpoint endpoint;
  static final boolean $assertionsDisabled;
  public ded.ui.RelationEndpointController(ded.ui.DiagramController, ded.ui.RelationController, ded.model.RelationEndpoint);
  public void edit();
  public java.awt.Point getLoc();
  public void dragTo(java.awt.Point);
  public void selfCheck();
  static {};
}
Compiled from "ResizeController.java"
public abstract class ded.ui.ResizeController extends ded.ui.Controller {
  public ded.ui.ResizeController(ded.ui.DiagramController);
  public java.util.Set<java.awt.Polygon> getBounds();
  public void paint(java.awt.Graphics);
  public void mousePressed(java.awt.event.MouseEvent);
  public boolean wantLassoSelection();
}
Compiled from "ResizeHandle.java"
public final class ded.ui.ResizeHandle extends java.lang.Enum<ded.ui.ResizeHandle> {
  public static final ded.ui.ResizeHandle RH_TOP_LEFT;
  public static final ded.ui.ResizeHandle RH_TOP;
  public static final ded.ui.ResizeHandle RH_TOP_RIGHT;
  public static final ded.ui.ResizeHandle RH_RIGHT;
  public static final ded.ui.ResizeHandle RH_BOTTOM_RIGHT;
  public static final ded.ui.ResizeHandle RH_BOTTOM;
  public static final ded.ui.ResizeHandle RH_BOTTOM_LEFT;
  public static final ded.ui.ResizeHandle RH_LEFT;
  public static final int NUM_RESIZE_HANDLES;
  public final int handleX;
  public final int handleY;
  public static ded.ui.ResizeHandle[] values();
  public static ded.ui.ResizeHandle valueOf(java.lang.String);
  static {};
}
Compiled from "SelectionState.java"
public final class ded.ui.SelectionState extends java.lang.Enum<ded.ui.SelectionState> {
  public static final ded.ui.SelectionState SS_UNSELECTED;
  public static final ded.ui.SelectionState SS_SELECTED;
  public static final ded.ui.SelectionState SS_EXCLUSIVE;
  public static ded.ui.SelectionState[] values();
  public static ded.ui.SelectionState valueOf(java.lang.String);
  static {};
}
Compiled from "ShapeFlagsDialog.java"
public class ded.ui.ShapeFlagsDialog extends util.swing.ModalDialog {
  public ded.ui.ShapeFlagsDialog(java.awt.Component, java.util.EnumSet<ded.model.ShapeFlag>, ded.model.EntityShape);
  public void okPressed();
  public static boolean exec(java.awt.Component, java.util.EnumSet<ded.model.ShapeFlag>, ded.model.EntityShape);
}
Compiled from "UndoHistoryWindow.java"
public class ded.ui.UndoHistoryWindow extends javax.swing.JFrame {
  public ded.ui.DiagramController diagramController;
  public javax.swing.JTextArea historyTextArea;
  public javax.swing.JButton historySizeLimitButton;
  public ded.ui.UndoHistoryWindow(ded.ui.DiagramController);
  public void updateHistory();
  public void displayHelp();
  public void changeHistorySizeLimit();
}
Compiled from "UndoHistoryWindow.java"
class ded.ui.UndoHistoryWindow$1 implements java.awt.event.ActionListener {
  final ded.ui.UndoHistoryWindow this$0;
  ded.ui.UndoHistoryWindow$1(ded.ui.UndoHistoryWindow);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "UndoHistoryWindow.java"
class ded.ui.UndoHistoryWindow$2 implements java.awt.event.ActionListener {
  final ded.ui.UndoHistoryWindow this$0;
  ded.ui.UndoHistoryWindow$2(ded.ui.UndoHistoryWindow);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "UndoHistoryWindow.java"
class ded.ui.UndoHistoryWindow$3 implements java.awt.event.ActionListener {
  final ded.ui.UndoHistoryWindow this$0;
  ded.ui.UndoHistoryWindow$3(ded.ui.UndoHistoryWindow);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "WindowCenterController.java"
public class ded.ui.WindowCenterController extends ded.ui.ResizeController {
  public ded.ui.EntityController econtroller;
  static final boolean $assertionsDisabled;
  public ded.ui.WindowCenterController(ded.ui.DiagramController, ded.ui.EntityController);
  public ded.model.Entity getEntity();
  public java.awt.Point getLoc();
  public void edit();
  public void dragTo(java.awt.Point);
  static {};
}
Compiled from "JSONArray.java"
public class org.json.JSONArray {
  public org.json.JSONArray();
  public org.json.JSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public org.json.JSONArray(java.lang.String) throws org.json.JSONException;
  public org.json.JSONArray(java.util.Collection);
  public org.json.JSONArray(java.lang.Object) throws org.json.JSONException;
  public java.lang.Object get(int) throws org.json.JSONException;
  public boolean getBoolean(int) throws org.json.JSONException;
  public double getDouble(int) throws org.json.JSONException;
  public int getInt(int) throws org.json.JSONException;
  public org.json.JSONArray getJSONArray(int) throws org.json.JSONException;
  public org.json.JSONObject getJSONObject(int) throws org.json.JSONException;
  public long getLong(int) throws org.json.JSONException;
  public java.lang.String getString(int) throws org.json.JSONException;
  public boolean isNull(int);
  public java.lang.String join(java.lang.String) throws org.json.JSONException;
  public int length();
  public java.lang.Object opt(int);
  public boolean optBoolean(int);
  public boolean optBoolean(int, boolean);
  public double optDouble(int);
  public double optDouble(int, double);
  public int optInt(int);
  public int optInt(int, int);
  public org.json.JSONArray optJSONArray(int);
  public org.json.JSONObject optJSONObject(int);
  public long optLong(int);
  public long optLong(int, long);
  public java.lang.String optString(int);
  public java.lang.String optString(int, java.lang.String);
  public org.json.JSONArray put(boolean);
  public org.json.JSONArray put(java.util.Collection);
  public org.json.JSONArray put(double) throws org.json.JSONException;
  public org.json.JSONArray put(int);
  public org.json.JSONArray put(long);
  public org.json.JSONArray put(java.util.Map);
  public org.json.JSONArray put(java.lang.Object);
  public org.json.JSONArray put(int, boolean) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.util.Collection) throws org.json.JSONException;
  public org.json.JSONArray put(int, double) throws org.json.JSONException;
  public org.json.JSONArray put(int, int) throws org.json.JSONException;
  public org.json.JSONArray put(int, long) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.util.Map) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.lang.Object) throws org.json.JSONException;
  public java.lang.Object remove(int);
  public org.json.JSONObject toJSONObject(org.json.JSONArray) throws org.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws org.json.JSONException;
  public java.io.Writer write(java.io.Writer) throws org.json.JSONException;
  java.io.Writer write(java.io.Writer, int, int) throws org.json.JSONException;
}
Compiled from "JSONException.java"
public class org.json.JSONException extends java.lang.Exception {
  public org.json.JSONException(java.lang.String);
  public org.json.JSONException(java.lang.Throwable);
  public java.lang.Throwable getCause();
}
Compiled from "JSONObject.java"
public class org.json.JSONObject {
  public static final java.lang.Object NULL;
  public org.json.JSONObject();
  public org.json.JSONObject(org.json.JSONObject, java.lang.String[]);
  public org.json.JSONObject(org.json.JSONTokener) throws org.json.JSONException;
  public org.json.JSONObject(java.util.Map);
  public org.json.JSONObject(java.lang.Object);
  public org.json.JSONObject(java.lang.Object, java.lang.String[]);
  public org.json.JSONObject(java.lang.String) throws org.json.JSONException;
  public org.json.JSONObject(java.lang.String, java.util.Locale) throws org.json.JSONException;
  public org.json.JSONObject accumulate(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject append(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public static java.lang.String doubleToString(double);
  public java.lang.Object get(java.lang.String) throws org.json.JSONException;
  public boolean getBoolean(java.lang.String) throws org.json.JSONException;
  public double getDouble(java.lang.String) throws org.json.JSONException;
  public int getInt(java.lang.String) throws org.json.JSONException;
  public org.json.JSONArray getJSONArray(java.lang.String) throws org.json.JSONException;
  public org.json.JSONObject getJSONObject(java.lang.String) throws org.json.JSONException;
  public long getLong(java.lang.String) throws org.json.JSONException;
  public static java.lang.String[] getNames(org.json.JSONObject);
  public static java.lang.String[] getNames(java.lang.Object);
  public java.lang.String getString(java.lang.String) throws org.json.JSONException;
  public boolean has(java.lang.String);
  public org.json.JSONObject increment(java.lang.String) throws org.json.JSONException;
  public boolean isNull(java.lang.String);
  public java.util.Iterator keys();
  public java.util.Set keySet();
  public int length();
  public org.json.JSONArray names();
  public java.lang.String[] sortedKeyArray();
  public static java.lang.String numberToString(java.lang.Number) throws org.json.JSONException;
  public java.lang.Object opt(java.lang.String);
  public boolean optBoolean(java.lang.String);
  public boolean optBoolean(java.lang.String, boolean);
  public double optDouble(java.lang.String);
  public double optDouble(java.lang.String, double);
  public int optInt(java.lang.String);
  public int optInt(java.lang.String, int);
  public org.json.JSONArray optJSONArray(java.lang.String);
  public org.json.JSONObject optJSONObject(java.lang.String);
  public long optLong(java.lang.String);
  public long optLong(java.lang.String, long);
  public java.lang.String optString(java.lang.String);
  public java.lang.String optString(java.lang.String, java.lang.String);
  public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.util.Collection) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, int) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, long) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.util.Map) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject putOnce(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject putOpt(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public static java.lang.String quote(java.lang.String);
  public static java.io.Writer quote(java.lang.String, java.io.Writer) throws java.io.IOException;
  public java.lang.Object remove(java.lang.String);
  public static java.lang.Object stringToValue(java.lang.String);
  public static void testValidity(java.lang.Object) throws org.json.JSONException;
  public org.json.JSONArray toJSONArray(org.json.JSONArray) throws org.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws org.json.JSONException;
  public static java.lang.String valueToString(java.lang.Object) throws org.json.JSONException;
  public static java.lang.Object wrap(java.lang.Object);
  public java.io.Writer write(java.io.Writer) throws org.json.JSONException;
  static final java.io.Writer writeValue(java.io.Writer, java.lang.Object, int, int) throws org.json.JSONException, java.io.IOException;
  static final void indent(java.io.Writer, int) throws java.io.IOException;
  public java.io.Writer write(java.io.Writer, int, int) throws org.json.JSONException;
  static {};
}
Compiled from "JSONObject.java"
class org.json.JSONObject$1 {
}
Compiled from "JSONObject.java"
final class org.json.JSONObject$Null {
  protected final java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  org.json.JSONObject$Null(org.json.JSONObject$1);
}
Compiled from "JSONString.java"
public interface org.json.JSONString {
  public abstract java.lang.String toJSONString();
}
Compiled from "JSONStringer.java"
public class org.json.JSONStringer extends org.json.JSONWriter {
  public org.json.JSONStringer();
  public java.lang.String toString();
}
Compiled from "JSONTokener.java"
public class org.json.JSONTokener {
  public org.json.JSONTokener(java.io.Reader);
  public org.json.JSONTokener(java.io.InputStream) throws org.json.JSONException;
  public org.json.JSONTokener(java.lang.String);
  public void back() throws org.json.JSONException;
  public static int dehexchar(char);
  public boolean end();
  public boolean more() throws org.json.JSONException;
  public char next() throws org.json.JSONException;
  public char next(char) throws org.json.JSONException;
  public java.lang.String next(int) throws org.json.JSONException;
  public char nextClean() throws org.json.JSONException;
  public java.lang.String nextString(char) throws org.json.JSONException;
  public java.lang.String nextTo(char) throws org.json.JSONException;
  public java.lang.String nextTo(java.lang.String) throws org.json.JSONException;
  public java.lang.Object nextValue() throws org.json.JSONException;
  public char skipTo(char) throws org.json.JSONException;
  public org.json.JSONException syntaxError(java.lang.String);
  public java.lang.String toString();
}
Compiled from "JSONWriter.java"
public class org.json.JSONWriter {
  protected char mode;
  protected java.io.Writer writer;
  public org.json.JSONWriter(java.io.Writer);
  public org.json.JSONWriter array() throws org.json.JSONException;
  public org.json.JSONWriter endArray() throws org.json.JSONException;
  public org.json.JSONWriter endObject() throws org.json.JSONException;
  public org.json.JSONWriter key(java.lang.String) throws org.json.JSONException;
  public org.json.JSONWriter object() throws org.json.JSONException;
  public org.json.JSONWriter value(boolean) throws org.json.JSONException;
  public org.json.JSONWriter value(double) throws org.json.JSONException;
  public org.json.JSONWriter value(long) throws org.json.JSONException;
  public org.json.JSONWriter value(java.lang.Object) throws org.json.JSONException;
}
Compiled from "FlattenInputStream.java"
public class util.FlattenInputStream extends java.io.BufferedInputStream {
  public int version;
  protected java.util.ArrayList<java.lang.Object> intToOwner;
  static final boolean $assertionsDisabled;
  public util.FlattenInputStream(java.io.InputStream);
  public void checkpoint(int) throws util.XParse, java.io.IOException;
  public int readInt() throws util.XParse, java.io.IOException;
  public void readBytes(byte[]) throws util.XParse, java.io.IOException;
  public java.awt.Dimension readDimension() throws util.XParse, java.io.IOException;
  public java.awt.Point readPoint() throws util.XParse, java.io.IOException;
  public java.lang.String readString() throws util.XParse, java.io.IOException;
  public void noteOwner(java.lang.Object);
  public java.lang.Object readSerf() throws util.XParse, java.io.IOException;
  public boolean readBoolean() throws util.XParse, java.io.IOException;
  static {};
}
Compiled from "IdentityHashSet.java"
public class util.IdentityHashSet<T> implements java.util.Set<T> {
  public util.IdentityHashSet();
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public java.util.Iterator<T> iterator();
  public java.lang.Object[] toArray();
  public <T2> T2[] toArray(T2[]);
  public boolean add(T);
  public boolean remove(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean addAll(java.util.Collection<? extends T>);
  public boolean retainAll(java.util.Collection<?>);
  public boolean removeAll(java.util.Collection<?>);
  public void clear();
  static {};
}
Compiled from "IdentityHashSetTests.java"
public class util.IdentityHashSetTests {
  static final boolean $assertionsDisabled;
  public util.IdentityHashSetTests();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "ImageFileUtil.java"
public class util.ImageFileUtil {
  public static final java.lang.String pngMetadataFormatName;
  public util.ImageFileUtil();
  public static java.lang.String writeImageToPNGFile(java.awt.image.BufferedImage, java.io.File, java.lang.String) throws java.lang.Exception;
  public static void addPNGTextChunk(javax.imageio.metadata.IIOMetadata, java.lang.String, java.lang.String, boolean) throws java.lang.Exception;
  public static java.lang.String getPNGComment(java.io.File) throws java.lang.Exception;
}
Compiled from "IntRange.java"
public class util.IntRange {
  public int low;
  public int high;
  static final boolean $assertionsDisabled;
  public util.IntRange(int, int);
  public static util.IntRange singleton(int);
  public boolean contains(int);
  public int midPoint();
  public int closerEnd(int);
  static {};
}
Compiled from "StringUtil.java"
public class util.StringUtil {
  public util.StringUtil();
  public static java.lang.String quoteAsJSONASCII(java.lang.String);
  public static java.lang.String[] parseByRegex(java.lang.String, java.lang.String);
  public static java.lang.String fmt(java.lang.String, java.lang.Object...);
  public static java.lang.String localize(java.lang.String);
  public static java.lang.String indent(int);
}
Compiled from "Util.java"
public class util.Util {
  public util.Util();
  public static <T> int collectionHashCode(java.util.Collection<T>);
  public static int avg(int, int);
  public static boolean isSpecialDouble(double);
  public static boolean nullableEquals(java.lang.Object, java.lang.Object);
  public static int nullableHashCode(java.lang.Object);
  public static java.io.File getWorkingDirectoryFile();
  public static java.io.File getFileRelativeTo(java.io.File, java.lang.String);
  public static int[] copyArray(int[]);
  public static java.lang.String getExceptionMessage(java.lang.Exception);
  public static java.lang.String getExceptionStackTrace(java.lang.Exception);
  public static int compareInts(int, int);
}
Compiled from "UtilTests.java"
public class util.UtilTests {
  static final boolean $assertionsDisabled;
  public util.UtilTests();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "XParse.java"
public class util.XParse extends java.lang.Exception {
  public util.XParse(java.lang.String);
  public util.XParse(java.lang.String, java.lang.Throwable);
}
Compiled from "AWTJSONUtil.java"
public class util.awt.AWTJSONUtil {
  static final boolean $assertionsDisabled;
  public util.awt.AWTJSONUtil();
  public static org.json.JSONObject pointToJSON(java.awt.Point);
  public static java.awt.Point pointFromJSON(org.json.JSONObject) throws org.json.JSONException;
  public static org.json.JSONObject dimensionToJSON(java.awt.Dimension);
  public static java.awt.Dimension dimensionFromJSON(org.json.JSONObject) throws org.json.JSONException;
  public static <T extends java.lang.Enum<T>> org.json.JSONArray enumSetToJSON(java.util.EnumSet<T>);
  public static <T extends java.lang.Enum<T>> java.util.EnumSet<T> enumSetFromJSON(java.lang.Class<T>, org.json.JSONArray) throws org.json.JSONException;
  static {};
}
Compiled from "AWTUtil.java"
public class util.awt.AWTUtil {
  public util.awt.AWTUtil();
  public static void dumpComponentTree(java.awt.Component, int);
  public static void dumpFrameTrees();
}
Compiled from "BDFParser.java"
public class util.awt.BDFParser {
  public java.lang.String fontName;
  public int pointSize;
  public int xresDPI;
  public int yresDPI;
  public int ascent;
  public java.util.ArrayList<util.awt.BDFParser$Glyph> glyphs;
  public util.awt.BDFParser(java.io.InputStream) throws java.lang.Exception;
  public util.awt.BDFParser(java.io.Reader) throws java.lang.Exception;
  public java.lang.String toString();
  public org.json.JSONObject toJSONObject() throws org.json.JSONException;
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "BDFParser.java"
public class util.awt.BDFParser$Glyph {
  public java.lang.String characterName;
  public int codePoint;
  public int dwx0;
  public int dwy0;
  public int bbw;
  public int bbh;
  public int bbxoff0x;
  public int bbyoff0y;
  public int[][] bits;
  public util.awt.BDFParser$Glyph();
  public java.lang.String toString();
  public org.json.JSONObject toJSONObject() throws org.json.JSONException;
}
Compiled from "BitmapFont.java"
public class util.awt.BitmapFont {
  public util.awt.BitmapFont(util.awt.BDFParser);
  public void drawString(java.awt.Graphics, java.lang.String, int, int);
  public util.awt.BitmapFont$RenderMetrics drawOrMeasureString(java.awt.Graphics, java.lang.String, int, int);
  public int stringWidth(java.lang.String);
  public java.awt.Rectangle stringBound(java.lang.String);
  public int getStandardLineHeight();
  public int getAscent();
  public int getMaxAscent();
  public int getDescent();
  public int getUnderlineOffset();
  public void drawCenteredText(java.awt.Graphics, java.awt.Point, java.lang.String);
  public void drawTextWithNewlines(java.awt.Graphics, java.lang.String, int, int);
}
Compiled from "BitmapFont.java"
class util.awt.BitmapFont$1 {
}
Compiled from "BitmapFont.java"
class util.awt.BitmapFont$RenderMetrics {
  public java.awt.Rectangle bound;
  public java.awt.Point offsetSum;
  util.awt.BitmapFont$RenderMetrics(util.awt.BitmapFont$1);
}
Compiled from "G.java"
public class util.awt.G {
  public util.awt.G();
  public static int origin(java.awt.Rectangle, util.awt.HorizOrVert);
  public static int size(java.awt.Rectangle, util.awt.HorizOrVert);
  public static java.awt.Point topLeft(java.awt.Rectangle);
  public static java.awt.Point bottomRight(java.awt.Rectangle);
  public static java.awt.Dimension squareDim(int);
  public static void drawImage(java.awt.Graphics, java.awt.Image, java.awt.Point, java.awt.Dimension);
  public static void drawImage(java.awt.Graphics, java.awt.Image, java.awt.Point, java.awt.Point);
  public static void drawImage(java.awt.Graphics, java.awt.Image, java.awt.Rectangle);
  public static java.awt.Dimension toDimension(java.awt.Point);
  public static java.awt.Point toPoint(java.awt.Dimension);
  public static java.awt.Point sub(java.awt.Point, java.awt.Dimension);
  public static java.awt.Point transpose(java.awt.Point);
  public static java.awt.Point negate(java.awt.Point);
  public static java.awt.Rectangle moveTopLeftBy(java.awt.Rectangle, java.awt.Point);
  public static java.awt.Rectangle moveOriginBy(java.awt.Rectangle, util.awt.HorizOrVert, int);
  public static java.awt.Rectangle moveBottomRightBy(java.awt.Rectangle, java.awt.Point);
  public static java.awt.Rectangle setOrigin(java.awt.Rectangle, util.awt.HorizOrVert, int);
  public static java.awt.Rectangle incOrigin(java.awt.Rectangle, util.awt.HorizOrVert, int);
  public static java.awt.Rectangle setSize(java.awt.Rectangle, util.awt.HorizOrVert, int);
  public static java.awt.Rectangle incSize(java.awt.Rectangle, util.awt.HorizOrVert, int);
  public static java.awt.Point mul(java.awt.Point, int);
  public static java.awt.Point add(java.awt.Point, java.awt.Point);
  public static java.awt.Dimension add(java.awt.Dimension, java.awt.Point);
  public static int size(java.awt.Dimension, util.awt.HorizOrVert);
  public static java.awt.Point hvVector(util.awt.HorizOrVert, int);
}
Compiled from "GeomUtil.java"
public class util.awt.GeomUtil {
  static final boolean $assertionsDisabled;
  public util.awt.GeomUtil();
  public static java.awt.geom.Point2D$Double subtract(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double);
  public static double length2DVector(java.awt.geom.Point2D$Double);
  public static int lengthVector(java.awt.Point);
  public static double lengthVectorSquared(java.awt.Point);
  public static java.awt.geom.Point2D$Double rot2DVector90(java.awt.geom.Point2D$Double);
  public static java.awt.geom.Point2D$Double rot2DVectorAngle(java.awt.geom.Point2D$Double, double);
  public static java.awt.geom.Point2D$Double scale2DVector(java.awt.geom.Point2D$Double, double);
  public static java.awt.geom.Point2D$Double scale2DVectorTo(java.awt.geom.Point2D$Double, double);
  public static java.awt.geom.Point2D$Double toPoint2D_Double(java.awt.Point);
  public static java.awt.geom.Point2D$Double add(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double);
  public static java.awt.Point toPoint(java.awt.geom.Point2D$Double);
  public static java.awt.geom.Point2D$Double getLineStart(java.awt.geom.Line2D$Double);
  public static java.awt.geom.Point2D$Double getLineEnd(java.awt.geom.Line2D$Double);
  public static java.awt.geom.Point2D$Double getLineVector(java.awt.geom.Line2D$Double);
  public static java.awt.geom.Point2D$Double pointOnLine2D(java.awt.geom.Line2D$Double, double);
  public static boolean nonzero2DVector(java.awt.geom.Point2D$Double);
  public static double intersectLine2Ds(java.awt.geom.Line2D$Double, java.awt.geom.Line2D$Double);
  public static util.IntRange getRectRange(util.awt.HorizOrVert, java.awt.Rectangle);
  public static java.awt.Rectangle growRectangle(java.awt.Rectangle, int);
  public static java.awt.Point midPoint(java.awt.Point, java.awt.Point);
  public static java.awt.Point getCenter(java.awt.Rectangle);
  public static java.awt.Point snapPoint(java.awt.Point, int);
  public static int snapInt(int, int);
  public static java.awt.Polygon rectPolygon(java.awt.Rectangle);
  public static java.awt.Polygon rectPolygon(int, int, int, int);
  public static java.awt.Point add(java.awt.Point, java.awt.Point);
  public static java.awt.Point subtract(java.awt.Point, java.awt.Point);
  public static java.awt.Point mult(java.awt.Point, int);
  public static java.awt.Point row90cw(java.awt.Point);
  public static java.awt.Point row90ccw(java.awt.Point);
  public static java.awt.Rectangle boundingBox(java.util.ArrayList<java.awt.Point>);
  public static java.awt.Polygon makePolygon(java.util.List<java.awt.Point>);
  public static double crossProdZ2DVector(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double);
  public static double dotProd2DVector(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double);
  public static double distance2DPointLineOrSeg(java.awt.geom.Point2D$Double, java.awt.geom.Line2D$Double, boolean);
  public static double distance2DPointLine(java.awt.geom.Point2D$Double, java.awt.geom.Line2D$Double);
  public static double distance2DPointLineSeg(java.awt.geom.Point2D$Double, java.awt.geom.Line2D$Double);
  static {};
}
Compiled from "HorizOrVert.java"
public final class util.awt.HorizOrVert extends java.lang.Enum<util.awt.HorizOrVert> {
  public static final util.awt.HorizOrVert HV_HORIZ;
  public static final util.awt.HorizOrVert HV_VERT;
  public static util.awt.HorizOrVert[] values();
  public static util.awt.HorizOrVert valueOf(java.lang.String);
  public boolean isHoriz();
  public boolean isVert();
  public static java.util.EnumSet<util.awt.HorizOrVert> allValues();
  public util.awt.HorizOrVert opposite();
  public util.awt.HorizOrVert plus(util.awt.HorizOrVert);
  public int get(java.awt.Point);
  public void set(java.awt.Point, int);
  static {};
}
Compiled from "ResourceImageCache.java"
public class util.awt.ResourceImageCache {
  public util.awt.ResourceImageCache();
  public java.awt.Image getResourceImage(java.lang.String);
}
Compiled from "JSONUtil.java"
public class util.json.JSONUtil {
  public util.json.JSONUtil();
  public static <T extends util.json.JSONable> org.json.JSONArray collectionToJSON(java.util.Collection<T>) throws org.json.JSONException;
}
Compiled from "JSONable.java"
public interface util.json.JSONable {
  public abstract org.json.JSONObject toJSON();
}
Compiled from "MenuAction.java"
public abstract class util.swing.MenuAction extends javax.swing.AbstractAction {
  public util.swing.MenuAction(java.lang.String, int);
  public util.swing.MenuAction(java.lang.String, int, int, int);
}
Compiled from "ModalDialog.java"
public class util.swing.ModalDialog extends javax.swing.JDialog {
  public static final int OUTER_MARGIN;
  public static final int CONTROL_PADDING;
  public boolean okWasPressed;
  public util.swing.ModalDialog(java.awt.Component, java.lang.String);
  public boolean exec();
  public static void printSizes(java.lang.String, java.awt.Component);
  public static javax.swing.JButton makeButton(java.lang.String, int, java.awt.event.ActionListener);
  public javax.swing.JButton makeCancelButton();
  public javax.swing.JButton makeOKButton();
  public void okPressed();
  public static javax.swing.Box makeVBox(java.awt.Container);
  public static javax.swing.Box makeHBox(java.awt.Container);
  public static javax.swing.Box makeMarginVBox(java.awt.Container, int);
  public static javax.swing.JTextField makeLineEdit(java.awt.Container, java.lang.String, char, java.lang.String);
  public static javax.swing.JTextField makeLineEditWithHelp(java.awt.Container, java.lang.String, char, java.lang.String, java.awt.Component, java.lang.String);
  public static void disallowVertStretch(java.awt.Component);
  public static void installEscapeCloseOperation(javax.swing.JDialog);
  public static <E extends java.lang.Enum<E>> javax.swing.JComboBox<E> makeEnumChooser(javax.swing.Box, java.lang.String, char, java.lang.Class<E>, E);
  public static <E> javax.swing.JComboBox<E> makeVectorChooser(javax.swing.Box, java.lang.String, char, java.util.Vector<E>, E);
  public static javax.swing.JButton makeHelpButton(java.awt.Component, java.lang.String, java.lang.String);
  public void createCancelAndOkButtons(javax.swing.Box);
  public void finishBuildingDialog(javax.swing.Box);
}
Compiled from "ModalDialog.java"
class util.swing.ModalDialog$1 implements java.awt.event.ActionListener {
  final util.swing.ModalDialog this$0;
  util.swing.ModalDialog$1(util.swing.ModalDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ModalDialog.java"
final class util.swing.ModalDialog$2 extends java.awt.event.FocusAdapter {
  final javax.swing.JTextField val$ret;
  util.swing.ModalDialog$2(javax.swing.JTextField);
  public void focusGained(java.awt.event.FocusEvent);
  public void focusLost(java.awt.event.FocusEvent);
}
Compiled from "ModalDialog.java"
class util.swing.ModalDialog$2$1 implements java.lang.Runnable {
  final util.swing.ModalDialog$2 this$0;
  util.swing.ModalDialog$2$1(util.swing.ModalDialog$2);
  public void run();
}
Compiled from "ModalDialog.java"
class util.swing.ModalDialog$2$2 implements java.lang.Runnable {
  final util.swing.ModalDialog$2 this$0;
  util.swing.ModalDialog$2$2(util.swing.ModalDialog$2);
  public void run();
}
Compiled from "ModalDialog.java"
final class util.swing.ModalDialog$3 implements java.awt.event.ActionListener {
  final java.awt.Component val$parentWindow;
  final java.lang.String val$labelText;
  final java.lang.String val$helpText;
  util.swing.ModalDialog$3(java.awt.Component, java.lang.String, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SwingUtil.java"
public class util.swing.SwingUtil {
  public util.swing.SwingUtil();
  public static boolean controlPressed(java.awt.event.InputEvent);
  public static boolean altPressed(java.awt.event.InputEvent);
  public static boolean shiftPressed(java.awt.event.InputEvent);
  public static boolean noModifiers(java.awt.event.KeyEvent);
  public static void closeWindow(java.awt.Window);
  public static void drawCenteredText(java.awt.Graphics, java.awt.Point, java.lang.String);
  public static void drawTextWithNewlines(java.awt.Graphics, java.lang.String, int, int);
  public static javax.swing.JOptionPane makeWordWrapJOptionPane();
  public static void messageBox(java.awt.Component, java.lang.String, int, java.lang.String);
  public static void errorMessageBox(java.awt.Component, java.lang.String);
  public static void warningMessageBox(java.awt.Component, java.lang.String);
  public static void informationMessageBox(java.awt.Component, java.lang.String, java.lang.String);
  public static int confirmationBox(java.awt.Component, java.lang.String, java.lang.String, int);
  public static void logFileMessageBox(java.awt.Component, java.lang.String, java.lang.String);
  public static void assignJFrameImplicitPaneNames(javax.swing.JFrame);
  public static java.lang.Long showIntegerInputDialog(java.awt.Component, java.lang.String, java.lang.Long, long, long);
}
Compiled from "SwingUtil.java"
final class util.swing.SwingUtil$1 extends javax.swing.JOptionPane {
  util.swing.SwingUtil$1();
  public int getMaxCharactersPerLineCount();
}
Compiled from "SwingUtil.java"
public class util.swing.SwingUtil$WindowCloseAction extends javax.swing.AbstractAction {
  public java.awt.Window window;
  public util.swing.SwingUtil$WindowCloseAction(java.awt.Window);
  public void actionPerformed(java.awt.event.ActionEvent);
}
