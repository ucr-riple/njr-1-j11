Compiled from "DataPlot.java"
public class com.alibaba.DataPlot {
  public com.alibaba.DataPlot();
  public static void main(java.lang.String[]);
}
Compiled from "DataRead.java"
public class com.alibaba.DataRead {
  public com.alibaba.DataRead();
  public java.lang.Boolean read();
  public java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.util.HashSet<java.lang.Integer>>>> getData();
  public void close();
}
Compiled from "Train.java"
public class com.alibaba.Train {
  public com.alibaba.Train();
  public static void createNetwork();
  public static void initNetwork();
  public static void setEvidence(java.util.Set<java.lang.Integer>);
  public static java.lang.Boolean isExpendable();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "TrainV2.java"
public class com.alibaba.TrainV2 {
  public com.alibaba.TrainV2();
  public static void createNetwork();
  public static void initNetwork();
  public static void setEvidence(java.util.Set<java.lang.Integer>);
  public static java.lang.Boolean isExpendable();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "AddressCalc.java"
public final class org.eclipse.recommenders.internal.jayes.util.AddressCalc {
  public static void incrementMultiDimensionalCounter(int[], int[]);
  public static int[] computeLinearMap(org.eclipse.recommenders.jayes.factor.AbstractFactor, int...);
}
Compiled from "ArrayUtils.java"
public final class org.eclipse.recommenders.internal.jayes.util.ArrayUtils {
  public static <T extends java.lang.Number> java.lang.Object unboxArray(T[]);
  public static <T extends java.lang.Number> T[] boxArray(java.lang.Object);
  public static float[] toFloatArray(double[]);
  public static double[] toDoubleArray(float[]);
  public static int[] toIntArray(java.util.List<? extends java.lang.Number>);
}
Compiled from "BidirectionalMap.java"
public class org.eclipse.recommenders.internal.jayes.util.BidirectionalMap<K, V> implements java.util.Map<K, V> {
  public org.eclipse.recommenders.internal.jayes.util.BidirectionalMap();
  public int size();
  public boolean isEmpty();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public V get(java.lang.Object);
  public K getKey(V);
  public V put(K, V);
  public V remove(java.lang.Object);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public void clear();
  public java.util.Set<K> keySet();
  public java.util.Collection<V> values();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
}
Compiled from "UnionFind.java"
public class org.eclipse.recommenders.internal.jayes.util.UnionFind {
  public org.eclipse.recommenders.internal.jayes.util.UnionFind();
  public org.eclipse.recommenders.internal.jayes.util.UnionFind find();
  public void merge(org.eclipse.recommenders.internal.jayes.util.UnionFind);
  public int rank();
  public static org.eclipse.recommenders.internal.jayes.util.UnionFind[] createArray(int);
}
Compiled from "BayesNet.java"
public class org.eclipse.recommenders.jayes.BayesNet {
  public org.eclipse.recommenders.jayes.BayesNet();
  public int addNode(org.eclipse.recommenders.jayes.BayesNode);
  public org.eclipse.recommenders.jayes.BayesNode createNode(java.lang.String);
  public org.eclipse.recommenders.jayes.BayesNode getNode(java.lang.String);
  public org.eclipse.recommenders.jayes.BayesNode getNode(int);
  public java.util.List<org.eclipse.recommenders.jayes.BayesNode> getNodes();
  public java.lang.String getName();
  public void setName(java.lang.String);
}
Compiled from "BayesNode.java"
public class org.eclipse.recommenders.jayes.BayesNode {
  public org.eclipse.recommenders.jayes.BayesNode(java.lang.String);
  public void setProbabilities(double...);
  public double[] getProbabilities();
  public java.util.List<org.eclipse.recommenders.jayes.BayesNode> getChildren();
  public java.util.List<org.eclipse.recommenders.jayes.BayesNode> getParents();
  public void setParents(java.util.List<org.eclipse.recommenders.jayes.BayesNode>);
  public double[] marginalize(java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String>);
  public int getId();
  public void setId(int);
  public void addOutcomes(java.lang.String...);
  public int addOutcome(java.lang.String);
  public int getOutcomeIndex(java.lang.String);
  public java.lang.String getOutcomeName(int);
  public int getOutcomeCount();
  public org.eclipse.recommenders.jayes.factor.AbstractFactor getFactor();
  public java.util.List<java.lang.String> getOutcomes();
  public java.lang.String getName();
  public java.lang.String toString();
}
Compiled from "AbstractFactor.java"
public abstract class org.eclipse.recommenders.jayes.factor.AbstractFactor implements java.lang.Cloneable {
  protected int[] dimensions;
  protected int[] dimensionIDs;
  protected org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper values;
  protected int[] selections;
  protected org.eclipse.recommenders.jayes.factor.Cut cut;
  static final boolean $assertionsDisabled;
  public abstract void copyValues(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  public abstract int[] prepareMultiplication(org.eclipse.recommenders.jayes.factor.AbstractFactor);
  protected abstract int getRealPosition(int);
  public abstract void fill(double);
  public org.eclipse.recommenders.jayes.factor.AbstractFactor();
  public void setValues(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  public org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper getValues();
  public double getValue(int);
  public void setDimensions(int...);
  public int[] getDimensions();
  public void setDimensionIDs(int...);
  public int[] getDimensionIDs();
  protected int getDimensionFromID(int);
  public void select(int, int);
  public void resetSelections();
  public void setLogScale(boolean);
  public boolean isLogScale();
  public double[] marginalizeAllBut(int);
  public void multiplyCompatible(org.eclipse.recommenders.jayes.factor.AbstractFactor);
  public void multiplyPrepared(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int[]);
  public void sumPrepared(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int[]);
  protected void validateCut();
  public org.eclipse.recommenders.jayes.factor.AbstractFactor clone();
  public void multiplyCompatibleToLog(org.eclipse.recommenders.jayes.factor.AbstractFactor);
  public abstract int getOverhead();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static {};
}
Compiled from "Cut.java"
public class org.eclipse.recommenders.jayes.factor.Cut implements java.lang.Cloneable {
  public org.eclipse.recommenders.jayes.factor.Cut(org.eclipse.recommenders.jayes.factor.AbstractFactor);
  public void initialize();
  public org.eclipse.recommenders.jayes.factor.Cut clone();
  public int getStart();
  public int getEnd();
  public int getStepSize();
  public int getLength();
  public int getSubtreeStepsize();
  public org.eclipse.recommenders.jayes.factor.Cut getSubCut();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "DenseFactor.java"
public class org.eclipse.recommenders.jayes.factor.DenseFactor extends org.eclipse.recommenders.jayes.factor.AbstractFactor {
  public org.eclipse.recommenders.jayes.factor.DenseFactor();
  public void fill(double);
  protected int getRealPosition(int);
  public int[] prepareMultiplication(org.eclipse.recommenders.jayes.factor.AbstractFactor);
  public void copyValues(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  public int getOverhead();
}
Compiled from "FactorFactory.java"
public class org.eclipse.recommenders.jayes.factor.FactorFactory {
  protected org.eclipse.recommenders.jayes.BayesNet net;
  public org.eclipse.recommenders.jayes.factor.FactorFactory();
  public void setFloatingPointType(java.lang.Class<?>);
  public void setReferenceNetwork(org.eclipse.recommenders.jayes.BayesNet);
  public void setUseLogScale(boolean);
  public org.eclipse.recommenders.jayes.factor.AbstractFactor create(java.util.List<java.lang.Integer>, java.util.List<org.eclipse.recommenders.jayes.factor.AbstractFactor>);
  protected boolean getUseLogScale(org.eclipse.recommenders.jayes.factor.AbstractFactor);
  public static org.eclipse.recommenders.jayes.factor.FactorFactory defaultFactory();
}
Compiled from "SparseFactor.java"
public class org.eclipse.recommenders.jayes.factor.SparseFactor extends org.eclipse.recommenders.jayes.factor.AbstractFactor {
  public org.eclipse.recommenders.jayes.factor.SparseFactor();
  public void setDimensions(int...);
  public void copyValues(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  public void multiplyCompatible(org.eclipse.recommenders.jayes.factor.AbstractFactor);
  public int[] prepareMultiplication(org.eclipse.recommenders.jayes.factor.AbstractFactor);
  public void sparsify(org.eclipse.recommenders.jayes.factor.AbstractFactor...);
  protected int getRealPosition(int);
  public void fill(double);
  public int getOverhead();
  public org.eclipse.recommenders.jayes.factor.SparseFactor clone();
  public static boolean isSuitable(int, org.eclipse.recommenders.jayes.factor.AbstractFactor...);
  public static org.eclipse.recommenders.jayes.factor.SparseFactor fromFactor(org.eclipse.recommenders.jayes.factor.AbstractFactor);
  public org.eclipse.recommenders.jayes.factor.AbstractFactor clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "SparseFactor.java"
class org.eclipse.recommenders.jayes.factor.SparseFactor$1 implements java.util.Comparator<java.lang.Integer> {
  final double[] val$key;
  final org.eclipse.recommenders.jayes.factor.SparseFactor this$0;
  org.eclipse.recommenders.jayes.factor.SparseFactor$1(org.eclipse.recommenders.jayes.factor.SparseFactor, double[]);
  public int compare(java.lang.Integer, java.lang.Integer);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "DoubleArrayWrapper.java"
public class org.eclipse.recommenders.jayes.factor.arraywrapper.DoubleArrayWrapper implements org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper {
  public org.eclipse.recommenders.jayes.factor.arraywrapper.DoubleArrayWrapper(double...);
  public void setArray(double...);
  public void setArray(float...);
  public double[] toDoubleArray();
  public float[] toFloatArray();
  public void set(int, double);
  public void set(int, float);
  public void mulAssign(int, double);
  public void mulAssign(int, float);
  public void mulAssign(int, org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int);
  public void addAssign(int, double);
  public void addAssign(int, float);
  public void addAssign(int, org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int);
  public double getDouble(int);
  public float getFloat(int);
  public int length();
  public void copy(double...);
  public void copy(float...);
  public void copy(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  public void fill(double);
  public void fill(float);
  public org.eclipse.recommenders.jayes.factor.arraywrapper.DoubleArrayWrapper clone();
  public void arrayCopy(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int, int, int);
  public void newArray(int);
  public int sizeOfElement();
  public java.util.Iterator<java.lang.Number> iterator();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  public org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper clone();
  static double[] access$000(org.eclipse.recommenders.jayes.factor.arraywrapper.DoubleArrayWrapper);
}
Compiled from "DoubleArrayWrapper.java"
class org.eclipse.recommenders.jayes.factor.arraywrapper.DoubleArrayWrapper$1 implements java.util.Iterator<java.lang.Number> {
  final org.eclipse.recommenders.jayes.factor.arraywrapper.DoubleArrayWrapper this$0;
  org.eclipse.recommenders.jayes.factor.arraywrapper.DoubleArrayWrapper$1(org.eclipse.recommenders.jayes.factor.arraywrapper.DoubleArrayWrapper);
  public boolean hasNext();
  public java.lang.Number next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "FloatArrayWrapper.java"
public class org.eclipse.recommenders.jayes.factor.arraywrapper.FloatArrayWrapper implements org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper {
  public org.eclipse.recommenders.jayes.factor.arraywrapper.FloatArrayWrapper(float...);
  public void setArray(double...);
  public void setArray(float...);
  public double[] toDoubleArray();
  public float[] toFloatArray();
  public void set(int, double);
  public void set(int, float);
  public void mulAssign(int, double);
  public void mulAssign(int, float);
  public void mulAssign(int, org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int);
  public void addAssign(int, double);
  public void addAssign(int, float);
  public void addAssign(int, org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int);
  public double getDouble(int);
  public float getFloat(int);
  public int length();
  public void copy(double...);
  public void copy(float...);
  public void copy(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  public void fill(double);
  public void fill(float);
  public void arrayCopy(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int, int, int);
  public void newArray(int);
  public org.eclipse.recommenders.jayes.factor.arraywrapper.FloatArrayWrapper clone();
  public int sizeOfElement();
  public java.util.Iterator<java.lang.Number> iterator();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  public org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper clone();
  static float[] access$000(org.eclipse.recommenders.jayes.factor.arraywrapper.FloatArrayWrapper);
}
Compiled from "FloatArrayWrapper.java"
class org.eclipse.recommenders.jayes.factor.arraywrapper.FloatArrayWrapper$1 implements java.util.Iterator<java.lang.Number> {
  final org.eclipse.recommenders.jayes.factor.arraywrapper.FloatArrayWrapper this$0;
  org.eclipse.recommenders.jayes.factor.arraywrapper.FloatArrayWrapper$1(org.eclipse.recommenders.jayes.factor.arraywrapper.FloatArrayWrapper);
  public boolean hasNext();
  public java.lang.Number next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "IArrayWrapper.java"
public interface org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper extends java.lang.Cloneable, java.lang.Iterable<java.lang.Number> {
  public abstract void setArray(double...);
  public abstract void setArray(float...);
  public abstract double[] toDoubleArray();
  public abstract float[] toFloatArray();
  public abstract void set(int, double);
  public abstract void set(int, float);
  public abstract void mulAssign(int, double);
  public abstract void mulAssign(int, float);
  public abstract void mulAssign(int, org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int);
  public abstract void addAssign(int, double);
  public abstract void addAssign(int, float);
  public abstract void addAssign(int, org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int);
  public abstract double getDouble(int);
  public abstract float getFloat(int);
  public abstract int length();
  public abstract void copy(double...);
  public abstract void copy(float...);
  public abstract void copy(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  public abstract void fill(double);
  public abstract void fill(float);
  public abstract void arrayCopy(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, int, int, int);
  public abstract org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper clone();
  public abstract void newArray(int);
  public abstract int sizeOfElement();
}
Compiled from "DivisionCache.java"
public class org.eclipse.recommenders.jayes.factor.opcache.DivisionCache implements org.eclipse.recommenders.jayes.factor.opcache.IOperationCache {
  public org.eclipse.recommenders.jayes.factor.opcache.DivisionCache(int);
  public int apply(int);
  public boolean isInCache(int);
}
Compiled from "IOperationCache.java"
public interface org.eclipse.recommenders.jayes.factor.opcache.IOperationCache {
  public abstract int apply(int);
}
Compiled from "ModuloCache.java"
public class org.eclipse.recommenders.jayes.factor.opcache.ModuloCache implements org.eclipse.recommenders.jayes.factor.opcache.IOperationCache {
  int cachedSubtrahent;
  public org.eclipse.recommenders.jayes.factor.opcache.ModuloCache(int);
  public int apply(int);
}
Compiled from "AbstractInferer.java"
public abstract class org.eclipse.recommenders.jayes.inference.AbstractInferer implements org.eclipse.recommenders.jayes.inference.IBayesInferer {
  protected java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String> evidence;
  protected double[][] beliefs;
  protected boolean beliefsValid;
  protected org.eclipse.recommenders.jayes.factor.FactorFactory factory;
  public org.eclipse.recommenders.jayes.inference.AbstractInferer();
  public void setFactorFactory(org.eclipse.recommenders.jayes.factor.FactorFactory);
  public org.eclipse.recommenders.jayes.factor.FactorFactory getFactory();
  public void addEvidence(org.eclipse.recommenders.jayes.BayesNode, java.lang.String);
  public double[] getBeliefs(org.eclipse.recommenders.jayes.BayesNode);
  public void setNetwork(org.eclipse.recommenders.jayes.BayesNet);
  public void setEvidence(java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String>);
  public java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String> getEvidence();
  protected abstract void updateBeliefs();
}
Compiled from "IBayesInferer.java"
public interface org.eclipse.recommenders.jayes.inference.IBayesInferer {
  public abstract void setNetwork(org.eclipse.recommenders.jayes.BayesNet);
  public abstract void setEvidence(java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String>);
  public abstract void addEvidence(org.eclipse.recommenders.jayes.BayesNode, java.lang.String);
  public abstract java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String> getEvidence();
  public abstract double[] getBeliefs(org.eclipse.recommenders.jayes.BayesNode);
}
Compiled from "LikelihoodWeightedSampling.java"
public class org.eclipse.recommenders.jayes.inference.LikelihoodWeightedSampling extends org.eclipse.recommenders.jayes.inference.AbstractInferer {
  public org.eclipse.recommenders.jayes.inference.LikelihoodWeightedSampling();
  public void setNetwork(org.eclipse.recommenders.jayes.BayesNet);
  protected void updateBeliefs();
  public void setSampleCount(int);
  public void seed(long);
}
Compiled from "RejectionSampling.java"
public class org.eclipse.recommenders.jayes.inference.RejectionSampling extends org.eclipse.recommenders.jayes.inference.AbstractInferer {
  public org.eclipse.recommenders.jayes.inference.RejectionSampling();
  public void setNetwork(org.eclipse.recommenders.jayes.BayesNet);
  protected void updateBeliefs();
  public void setSampleCount(int);
  public void seed(long);
}
Compiled from "JunctionTree.java"
public class org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTree {
  public org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTree(org.eclipse.recommenders.jayes.util.Graph);
  public java.util.List<java.util.List<java.lang.Integer>> getClusters();
  public void setClusters(java.util.List<java.util.List<java.lang.Integer>>);
  public java.util.List<org.eclipse.recommenders.jayes.util.Pair<org.eclipse.recommenders.jayes.util.Graph$Edge, java.util.List<java.lang.Integer>>> getSepSets();
  public void setSepSets(java.util.List<org.eclipse.recommenders.jayes.util.Pair<org.eclipse.recommenders.jayes.util.Graph$Edge, java.util.List<java.lang.Integer>>>);
  public org.eclipse.recommenders.jayes.util.Graph getGraph();
}
Compiled from "JunctionTreeAlgorithm.java"
public class org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeAlgorithm extends org.eclipse.recommenders.jayes.inference.AbstractInferer {
  protected java.util.Map<org.eclipse.recommenders.jayes.util.Graph$Edge, org.eclipse.recommenders.jayes.factor.AbstractFactor> sepSets;
  protected org.eclipse.recommenders.jayes.util.Graph junctionTree;
  protected org.eclipse.recommenders.jayes.factor.AbstractFactor[] nodePotentials;
  protected java.util.IdentityHashMap<org.eclipse.recommenders.jayes.util.Graph$Edge, int[]> preparedMultiplications;
  protected int[][] concernedClusters;
  protected org.eclipse.recommenders.jayes.factor.AbstractFactor[] queryFactors;
  protected int[][] preparedQueries;
  protected boolean[] isBeliefValid;
  protected java.util.List<org.eclipse.recommenders.jayes.util.Pair<org.eclipse.recommenders.jayes.factor.AbstractFactor, org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper>> initializations;
  protected int[][] queryFactorReverseMapping;
  protected java.util.Set<java.lang.Integer> clustersHavingEvidence;
  protected boolean[] isObserved;
  protected double[] scratchpad;
  protected org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeBuilder junctionTreeBuilder;
  public org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeAlgorithm();
  public void setJunctionTreeBuilder(org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeBuilder);
  public double[] getBeliefs(org.eclipse.recommenders.jayes.BayesNode);
  protected void updateBeliefs();
  public void setNetwork(org.eclipse.recommenders.jayes.BayesNet);
}
Compiled from "JunctionTreeBuilder.java"
public class org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeBuilder {
  public static org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeBuilder forHeuristic(org.eclipse.recommenders.jayes.util.triangulation.IEliminationHeuristic);
  protected org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeBuilder(org.eclipse.recommenders.jayes.util.triangulation.IEliminationHeuristic);
  public org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTree buildJunctionTree(org.eclipse.recommenders.jayes.BayesNet);
}
Compiled from "JunctionTreeBuilder.java"
final class org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeBuilder$SepsetComparator implements java.util.Comparator<org.eclipse.recommenders.jayes.util.Pair<org.eclipse.recommenders.jayes.util.Graph$Edge, java.util.List<java.lang.Integer>>> {
  final org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeBuilder this$0;
  public org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeBuilder$SepsetComparator(org.eclipse.recommenders.jayes.inference.junctionTree.JunctionTreeBuilder, org.eclipse.recommenders.jayes.BayesNet);
  public int compare(org.eclipse.recommenders.jayes.util.Pair<org.eclipse.recommenders.jayes.util.Graph$Edge, java.util.List<java.lang.Integer>>, org.eclipse.recommenders.jayes.util.Pair<org.eclipse.recommenders.jayes.util.Graph$Edge, java.util.List<java.lang.Integer>>);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "BasicSampler.java"
public class org.eclipse.recommenders.jayes.sampling.BasicSampler implements org.eclipse.recommenders.jayes.sampling.ISampler {
  public org.eclipse.recommenders.jayes.sampling.BasicSampler();
  public java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String> sample();
  public void setNetwork(org.eclipse.recommenders.jayes.BayesNet);
  public void setEvidence(java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String>);
  public void seed(long);
  public void setBN(org.eclipse.recommenders.jayes.BayesNet);
}
Compiled from "ISampler.java"
public interface org.eclipse.recommenders.jayes.sampling.ISampler {
  public abstract void setBN(org.eclipse.recommenders.jayes.BayesNet);
  public abstract void setNetwork(org.eclipse.recommenders.jayes.BayesNet);
  public abstract void setEvidence(java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String>);
  public abstract java.util.Map<org.eclipse.recommenders.jayes.BayesNode, java.lang.String> sample();
  public abstract void seed(long);
}
Compiled from "Graph.java"
public class org.eclipse.recommenders.jayes.util.Graph implements java.lang.Cloneable {
  public org.eclipse.recommenders.jayes.util.Graph();
  public java.util.List<java.util.Set<org.eclipse.recommenders.jayes.util.Graph$Edge>> getAdjacency();
  public void initialize(int);
  public org.eclipse.recommenders.jayes.util.Graph$Edge addEdge(int, int);
  public void removeEdge(org.eclipse.recommenders.jayes.util.Graph$Edge);
  public java.util.Set<org.eclipse.recommenders.jayes.util.Graph$Edge> getIncidentEdges(int);
  public org.eclipse.recommenders.jayes.util.Graph clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "Graph.java"
public class org.eclipse.recommenders.jayes.util.Graph$Edge extends org.eclipse.recommenders.jayes.util.OrderIgnoringPair<java.lang.Integer> {
  public org.eclipse.recommenders.jayes.util.Graph$Edge(java.lang.Integer, java.lang.Integer);
  public org.eclipse.recommenders.jayes.util.Graph$Edge initializeBackEdge();
  public org.eclipse.recommenders.jayes.util.Graph$Edge getBackEdge();
}
Compiled from "MathUtils.java"
public class org.eclipse.recommenders.jayes.util.MathUtils {
  public org.eclipse.recommenders.jayes.util.MathUtils();
  public static void exp(double[]);
  public static void exp(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  public static void log(double[]);
  public static void log(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  public static double[] normalize(double[]);
  public static double sum(double[]);
  public static void secureDivide(double[], double[], double[]);
  public static void secureSubtract(double[], double[], double[]);
  public static double[] normalizeLog(double[]);
  public static int product(int[]);
  public static int productOfRange(int[], int, int);
  public static int scalarProduct(int[], int[]);
}
Compiled from "NumericalInstabilityException.java"
public class org.eclipse.recommenders.jayes.util.NumericalInstabilityException extends java.lang.RuntimeException {
  public org.eclipse.recommenders.jayes.util.NumericalInstabilityException();
  public org.eclipse.recommenders.jayes.util.NumericalInstabilityException(java.lang.String);
  public org.eclipse.recommenders.jayes.util.NumericalInstabilityException(java.lang.Throwable);
  public org.eclipse.recommenders.jayes.util.NumericalInstabilityException(java.lang.String, java.lang.Throwable);
}
Compiled from "OrderIgnoringPair.java"
public class org.eclipse.recommenders.jayes.util.OrderIgnoringPair<T> extends org.eclipse.recommenders.jayes.util.Pair<T, T> {
  int hashcode;
  public org.eclipse.recommenders.jayes.util.OrderIgnoringPair(T, T);
  public boolean equals(java.lang.Object);
  public int hashCode();
}
Compiled from "Pair.java"
public class org.eclipse.recommenders.jayes.util.Pair<T1, T2> {
  public org.eclipse.recommenders.jayes.util.Pair(T1, T2);
  public T1 getFirst();
  public T2 getSecond();
  public boolean equals(java.lang.Object);
  protected static boolean bothNullOrEqual(java.lang.Object, java.lang.Object);
  public java.lang.String toString();
  public int hashCode();
  public static <S1, S2> org.eclipse.recommenders.jayes.util.Pair<S1, S2> newPair(S1, S2);
}
Compiled from "CanonicalArrayWrapperManager.java"
public class org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager {
  public org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager();
  public org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper getInstance(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
}
Compiled from "CanonicalArrayWrapperManager.java"
class org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager$1 extends org.eclipse.recommenders.jayes.util.sharing.CanonicalSet<org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper> {
  final org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager this$0;
  org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager$1(org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager);
  protected org.eclipse.recommenders.jayes.util.sharing.Entry<org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper> createEntry(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  protected boolean hasProperType(java.lang.Object);
  protected org.eclipse.recommenders.jayes.util.sharing.Entry createEntry(java.lang.Object);
}
Compiled from "CanonicalArrayWrapperManager.java"
class org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager$1$1 extends org.eclipse.recommenders.jayes.util.sharing.Entry<org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper> {
  final org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager$1 this$1;
  org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager$1$1(org.eclipse.recommenders.jayes.util.sharing.CanonicalArrayWrapperManager$1, org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  protected int computeHash(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  protected boolean equals(org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper, org.eclipse.recommenders.jayes.factor.arraywrapper.IArrayWrapper);
  protected boolean equals(java.lang.Object, java.lang.Object);
  protected int computeHash(java.lang.Object);
}
Compiled from "CanonicalIntArrayManager.java"
public class org.eclipse.recommenders.jayes.util.sharing.CanonicalIntArrayManager {
  public org.eclipse.recommenders.jayes.util.sharing.CanonicalIntArrayManager();
  public int[] getInstance(int[]);
}
Compiled from "CanonicalIntArraySet.java"
public final class org.eclipse.recommenders.jayes.util.sharing.CanonicalIntArraySet extends org.eclipse.recommenders.jayes.util.sharing.CanonicalSet<int[]> {
  public org.eclipse.recommenders.jayes.util.sharing.CanonicalIntArraySet();
  protected org.eclipse.recommenders.jayes.util.sharing.Entry<int[]> createEntry(int[]);
  protected boolean hasProperType(java.lang.Object);
  protected org.eclipse.recommenders.jayes.util.sharing.Entry createEntry(java.lang.Object);
}
Compiled from "CanonicalIntArraySet.java"
class org.eclipse.recommenders.jayes.util.sharing.CanonicalIntArraySet$IntArrayEntry extends org.eclipse.recommenders.jayes.util.sharing.Entry<int[]> {
  public org.eclipse.recommenders.jayes.util.sharing.CanonicalIntArraySet$IntArrayEntry(int[]);
  protected int computeHash(int[]);
  protected boolean equals(int[], int[]);
  protected boolean equals(java.lang.Object, java.lang.Object);
  protected int computeHash(java.lang.Object);
}
Compiled from "CanonicalSet.java"
public abstract class org.eclipse.recommenders.jayes.util.sharing.CanonicalSet<T> extends java.util.AbstractSet<T> {
  public org.eclipse.recommenders.jayes.util.sharing.CanonicalSet();
  public T get(T);
  protected abstract org.eclipse.recommenders.jayes.util.sharing.Entry<T> createEntry(T);
  public boolean add(T);
  public boolean contains(java.lang.Object);
  protected abstract boolean hasProperType(java.lang.Object);
  public java.util.Iterator<T> iterator();
  public boolean remove(java.lang.Object);
  public boolean retainAll(java.util.Collection<?>);
  public int size();
}
Compiled from "Entry.java"
public abstract class org.eclipse.recommenders.jayes.util.sharing.Entry<T> {
  public T entry;
  public org.eclipse.recommenders.jayes.util.sharing.Entry(T);
  protected abstract int computeHash(T);
  public int hashCode();
  public boolean equals(java.lang.Object);
  protected abstract boolean equals(T, T);
}
Compiled from "GraphElimination.java"
public class org.eclipse.recommenders.jayes.util.triangulation.GraphElimination implements java.lang.Iterable<java.util.List<java.lang.Integer>> {
  public org.eclipse.recommenders.jayes.util.triangulation.GraphElimination(org.eclipse.recommenders.jayes.util.Graph, double[], org.eclipse.recommenders.jayes.util.triangulation.IEliminationHeuristic);
  public java.util.Iterator<java.util.List<java.lang.Integer>> iterator();
  static java.util.List access$000(org.eclipse.recommenders.jayes.util.triangulation.GraphElimination);
  static org.eclipse.recommenders.jayes.util.Graph access$100(org.eclipse.recommenders.jayes.util.triangulation.GraphElimination);
  static org.eclipse.recommenders.jayes.util.triangulation.IEliminationHeuristic access$200(org.eclipse.recommenders.jayes.util.triangulation.GraphElimination);
  static double[] access$300(org.eclipse.recommenders.jayes.util.triangulation.GraphElimination);
}
Compiled from "GraphElimination.java"
class org.eclipse.recommenders.jayes.util.triangulation.GraphElimination$1 implements java.util.Iterator<java.util.List<java.lang.Integer>> {
  final org.eclipse.recommenders.jayes.util.triangulation.GraphElimination this$0;
  org.eclipse.recommenders.jayes.util.triangulation.GraphElimination$1(org.eclipse.recommenders.jayes.util.triangulation.GraphElimination);
  public boolean hasNext();
  public java.util.List<java.lang.Integer> next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "IEliminationHeuristic.java"
public interface org.eclipse.recommenders.jayes.util.triangulation.IEliminationHeuristic {
  public abstract int getHeuristicValue(org.eclipse.recommenders.jayes.util.triangulation.QuotientGraph, int);
}
Compiled from "MinDegree.java"
public class org.eclipse.recommenders.jayes.util.triangulation.MinDegree implements org.eclipse.recommenders.jayes.util.triangulation.IEliminationHeuristic {
  public org.eclipse.recommenders.jayes.util.triangulation.MinDegree();
  public int getHeuristicValue(org.eclipse.recommenders.jayes.util.triangulation.QuotientGraph, int);
}
Compiled from "MinFillIn.java"
public class org.eclipse.recommenders.jayes.util.triangulation.MinFillIn implements org.eclipse.recommenders.jayes.util.triangulation.IEliminationHeuristic {
  public org.eclipse.recommenders.jayes.util.triangulation.MinFillIn();
  public int getHeuristicValue(org.eclipse.recommenders.jayes.util.triangulation.QuotientGraph, int);
}
Compiled from "QuotientGraph.java"
public class org.eclipse.recommenders.jayes.util.triangulation.QuotientGraph {
  public org.eclipse.recommenders.jayes.util.triangulation.QuotientGraph(org.eclipse.recommenders.jayes.util.Graph);
  public java.util.Set<java.lang.Integer> getNeighbors(int);
  public void eliminate(int);
  public void merge(org.eclipse.recommenders.jayes.util.Graph, int, int);
}
Compiled from "Tutorial.java"
public class tutorial.Tutorial {
  public tutorial.Tutorial();
  public static void displayRes(org.eclipse.recommenders.jayes.BayesNode...);
  public static void displayBeliefs(org.eclipse.recommenders.jayes.inference.IBayesInferer, org.eclipse.recommenders.jayes.BayesNode...);
  public static void main(java.lang.String[]);
}
