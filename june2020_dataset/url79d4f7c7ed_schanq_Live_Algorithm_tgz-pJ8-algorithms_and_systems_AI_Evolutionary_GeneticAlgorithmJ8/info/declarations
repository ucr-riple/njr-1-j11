Compiled from "Chromosome.java"
public class algorithms_and_systems_AI_Evolutionary.Chromosome implements java.lang.Comparable<algorithms_and_systems_AI_Evolutionary.Chromosome> {
  public int[] scaleIntervals;
  public int fitness;
  public algorithms_and_systems_AI_Evolutionary.Phrase phrase;
  public java.util.Random random;
  public int levelOfTonality;
  public expert_system.Key keyGene;
  public expert_system.Scale scaleGene;
  public expert_system.Dynamic dynamicGene;
  public expert_system.DynamicShape dshapeGene;
  public java.util.ArrayList<expert_system.Rhythmic_Block> rhythmGenes;
  public algorithms_and_systems_AI_Evolutionary.Chromosome();
  public algorithms_and_systems_AI_Evolutionary.Chromosome(int, int);
  public algorithms_and_systems_AI_Evolutionary.Chromosome(int, int, expert_system.Key, expert_system.Scale);
  public void initGenePool();
  public void initGenes();
  public int getMin();
  public void setMin(int);
  public int getMax();
  public void setMax(int);
  public int[] getScaleIntervals();
  public void setScaleIntervals(int[]);
  public int getFitness();
  public void setFitness(int);
  public int getLevelOfTonality();
  public void setLevelOfTonality(int);
  public expert_system.Key getKeyGene();
  public void setKeyGene(expert_system.Key);
  public expert_system.Scale getScaleGene();
  public void setScaleGene(expert_system.Scale);
  public expert_system.Dynamic getDynamicGene();
  public void setDynamicGene(expert_system.Dynamic);
  public expert_system.Key[] getAllKeys();
  public expert_system.Scale[] getAllScales();
  public expert_system.Dynamic[] getAllDynamics();
  public expert_system.DynamicShape[] getAllDynamicShapes();
  public expert_system.Rhythmic_Block[] getAllRhythms();
  public expert_system.DynamicShape getDshapeGene();
  public void setDshapeGene(expert_system.DynamicShape);
  public algorithms_and_systems_AI_Evolutionary.Phrase getPhrase();
  public java.lang.String rhythmToString();
  public void spawnPhrase();
  public void print();
  public void printPlusPhrase();
  public void sortRhythm();
  public int compareTo(algorithms_and_systems_AI_Evolutionary.Chromosome);
  public static void main(java.lang.String[]);
  public int compareTo(java.lang.Object);
}
Compiled from "Chromosome.java"
public class algorithms_and_systems_AI_Evolutionary.Chromosome$RhythmicComparator implements java.util.Comparator<expert_system.Rhythmic_Block> {
  final algorithms_and_systems_AI_Evolutionary.Chromosome this$0;
  protected algorithms_and_systems_AI_Evolutionary.Chromosome$RhythmicComparator(algorithms_and_systems_AI_Evolutionary.Chromosome);
  public int compare(expert_system.Rhythmic_Block, expert_system.Rhythmic_Block);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "FuzzySystem.java"
public class algorithms_and_systems_AI_Evolutionary.FuzzySystem {
  public algorithms_and_systems_AI_Evolutionary.FuzzySystem();
  public double grade(double, double, double);
  public double inverseGrade(double, double, double);
  public double triangular(double, double, double, double);
  public double trapezoid(double, double, double, double, double);
  public double gaussian(double, double, double);
  public double sigmoid(double, double, double);
  public double A_LITTLE(double);
  public double SLIGHTLY(double);
  public double VERY(double);
  public double GREATLY(double);
  public double EXTREMELY(double);
  public double OR(double, double);
  public double AND(double, double);
  public double NOT(double);
  public double XOR(double, double);
  public double IMPLIES(double, double);
  public double NAND(double, double);
  public double NOR(double, double);
  public double NXOR(double, double);
  public double NOT_IMPLIES(double, double);
  public double OR(double[]);
  public void sort(double[]);
  public void sort(int[]);
  public double defuzz_Max(double[], double[]);
  public double defuzz_Singleton(double[], double[]);
  protected double averageDirection(int[]);
  public double convertNVToMillis(java.lang.String, double);
  public algorithms_and_systems_AI_Evolutionary.TargetChromosome determineTarget(int[], int[], double[], double);
  public static void main(java.lang.String[]);
}
Compiled from "GeneticAlgorithm.java"
public class algorithms_and_systems_AI_Evolutionary.GeneticAlgorithm {
  public expert_system.Tonality targetTonality;
  public expert_system.DesiredLoudness targetLoudness;
  public expert_system.Feel targetFeel;
  public int populationSize;
  public int totalFitnessOfPopulation;
  public int theFittest;
  public int minOctave;
  public int maxOctave;
  public java.util.List<algorithms_and_systems_AI_Evolutionary.Chromosome> citezens;
  public java.util.Random random;
  public algorithms_and_systems_AI_Evolutionary.GeneticAlgorithm(algorithms_and_systems_AI_Evolutionary.TargetChromosome, int, int);
  public int getPopulationSize();
  public void setPopulationSize(int);
  public void populate();
  public void calculateFitness(algorithms_and_systems_AI_Evolutionary.Chromosome);
  public algorithms_and_systems_AI_Evolutionary.Chromosome crossover(algorithms_and_systems_AI_Evolutionary.Chromosome, algorithms_and_systems_AI_Evolutionary.Chromosome);
  public void mutate(algorithms_and_systems_AI_Evolutionary.Chromosome);
  public algorithms_and_systems_AI_Evolutionary.Chromosome rouletteSelection();
  public void reproduce();
  public algorithms_and_systems_AI_Evolutionary.Chromosome produceBeauIdeal();
  public static void main(java.lang.String[]);
}
Compiled from "Note.java"
public class algorithms_and_systems_AI_Evolutionary.Note {
  public int tone;
  public int velocity;
  public java.lang.String noteVal;
  public java.lang.String noteData;
  public algorithms_and_systems_AI_Evolutionary.Note();
  public algorithms_and_systems_AI_Evolutionary.Note(int, int, java.lang.String);
  public int getTone();
  public void setTone(int);
  public int getVelocity();
  public void setVelocity(int);
  public java.lang.String getNoteVal();
  public void setNoteVal(java.lang.String);
  public java.lang.String getNoteData();
  public void setNoteData();
}
Compiled from "Phrase.java"
public class algorithms_and_systems_AI_Evolutionary.Phrase {
  public expert_system.DynamicShape theShape;
  public java.util.List<expert_system.Rhythmic_Block> rhythm;
  public int[] availableMidiNoteValues;
  public int[] availableMidiVelocityValues;
  public algorithms_and_systems_AI_Evolutionary.Note[] musicalPhrase;
  public algorithms_and_systems_AI_Evolutionary.Phrase(int, int, expert_system.Scale, expert_system.Dynamic, expert_system.DynamicShape, java.util.ArrayList<expert_system.Rhythmic_Block>);
  public algorithms_and_systems_AI_Evolutionary.Note[] getMusicalPhrase();
  public void generatePhrase();
  public java.lang.String toString();
  public void print();
  public static void main(java.lang.String[]);
}
Compiled from "Phrase.java"
class algorithms_and_systems_AI_Evolutionary.Phrase$1 {
  static final int[] $SwitchMap$expert_system$DynamicShape;
  static {};
}
Compiled from "TargetChromosome.java"
public class algorithms_and_systems_AI_Evolutionary.TargetChromosome {
  expert_system.Tonality targetTonality;
  expert_system.DesiredLoudness targetLoudness;
  expert_system.Feel targetFeel;
  public algorithms_and_systems_AI_Evolutionary.TargetChromosome(expert_system.Tonality, expert_system.DesiredLoudness);
  public algorithms_and_systems_AI_Evolutionary.TargetChromosome(expert_system.Tonality, expert_system.DesiredLoudness, expert_system.Feel);
  public expert_system.Tonality getTargetTonality();
  public void setTargetTonality(expert_system.Tonality);
  public expert_system.DesiredLoudness getTargetLoudness();
  public void setTargetLoudness(expert_system.DesiredLoudness);
  public expert_system.Feel getTargetFeel();
  public void setTargetFeel(expert_system.Feel);
  public void print();
}
Compiled from "Chord.java"
public final class expert_system.Chord extends java.lang.Enum<expert_system.Chord> {
  public static final expert_system.Chord MAJOR;
  public static final expert_system.Chord DOMINANT_7TH;
  public static final expert_system.Chord MINOR_DORIAN;
  public static final expert_system.Chord HALF_DIMINISHED;
  public static expert_system.Chord[] values();
  public static expert_system.Chord valueOf(java.lang.String);
  public expert_system.Scale[] getScales();
  static {};
}
Compiled from "DesiredLoudness.java"
public class expert_system.DesiredLoudness {
  public expert_system.Dynamic degreeOfLoudness;
  public expert_system.Dynamic[] allDynamics;
  public expert_system.DynamicShape theShape;
  public int[] howCloseAreTheDynamics;
  public expert_system.DesiredLoudness(expert_system.Dynamic);
  public expert_system.DesiredLoudness(expert_system.Dynamic, expert_system.DynamicShape);
  public void initHowCloseAreDynamics();
  public int[] getHowCloseAreTheDynamics();
  public void setHowCloseAreTheDynamics(int[]);
  public expert_system.DynamicShape getTheShape();
  public void setTheShape(expert_system.DynamicShape);
  public java.lang.String toString();
}
Compiled from "Dynamic.java"
public final class expert_system.Dynamic extends java.lang.Enum<expert_system.Dynamic> {
  public static final expert_system.Dynamic PIANISSIMO_POSSIBLE;
  public static final expert_system.Dynamic PIANISSIMO;
  public static final expert_system.Dynamic PIANO;
  public static final expert_system.Dynamic MEZZO_PIANO;
  public static final expert_system.Dynamic MEZZO_FORTE;
  public static final expert_system.Dynamic FORTE;
  public static final expert_system.Dynamic FORTISSIMO;
  public static final expert_system.Dynamic FORTISSIMO_POSSIBLE;
  public static expert_system.Dynamic[] values();
  public static expert_system.Dynamic valueOf(java.lang.String);
  public int getMinimumVelocity();
  public void setMinimumVelocity(int);
  public int getMaximumVelocity();
  public void setMaximumVelocity(int);
  public int[] getVelocityRange();
  public void setVelocityRange();
  public int getFitnessID();
  public void setFitnessID(int);
  static {};
}
Compiled from "DynamicShape.java"
public final class expert_system.DynamicShape extends java.lang.Enum<expert_system.DynamicShape> {
  public static final expert_system.DynamicShape SPORADIC;
  public static final expert_system.DynamicShape ON_BEAT_ACCENTS;
  public static final expert_system.DynamicShape OFF_BEAT_ACCENTS;
  public static final expert_system.DynamicShape CRESCENDO;
  public static final expert_system.DynamicShape DECRESCENDO;
  public static expert_system.DynamicShape[] values();
  public static expert_system.DynamicShape valueOf(java.lang.String);
  static {};
}
Compiled from "Feel.java"
public final class expert_system.Feel extends java.lang.Enum<expert_system.Feel> {
  public static final expert_system.Feel STRAIGHTWALK;
  public static final expert_system.Feel SWUNGWALK;
  public static final expert_system.Feel STRAIGHTSOLO;
  public static final expert_system.Feel SWUNGSOLO;
  public static final expert_system.Feel LATIN;
  public static final expert_system.Feel LASTNOTE;
  public static final expert_system.Feel END;
  public java.util.ArrayList<expert_system.Rhythmic_Block> fitRhythms;
  public static expert_system.Feel[] values();
  public static expert_system.Feel valueOf(java.lang.String);
  public java.util.ArrayList<expert_system.Rhythmic_Block> getFitRhythms();
  public void print();
  static {};
}
Compiled from "Key.java"
public final class expert_system.Key extends java.lang.Enum<expert_system.Key> {
  public static final expert_system.Key C;
  public static final expert_system.Key C_SHARP;
  public static final expert_system.Key D;
  public static final expert_system.Key D_SHARP;
  public static final expert_system.Key E;
  public static final expert_system.Key F;
  public static final expert_system.Key F_SHARP;
  public static final expert_system.Key G;
  public static final expert_system.Key G_SHARP;
  public static final expert_system.Key A;
  public static final expert_system.Key A_SHARP;
  public static final expert_system.Key B;
  public int[] majorIntervals;
  public int[] minorIntervals;
  public static expert_system.Key[] values();
  public static expert_system.Key valueOf(java.lang.String);
  public int[] getOctaves();
  public expert_system.Key getRelativeMinor();
  public void setRelativeMinor();
  public expert_system.Key[] getAllKeys();
  public expert_system.Chord getChord();
  public void setChord(expert_system.Chord);
  public int getOctave0();
  public void print();
  static {};
}
Compiled from "Rhythmic_Block.java"
public final class expert_system.Rhythmic_Block extends java.lang.Enum<expert_system.Rhythmic_Block> {
  public static final expert_system.Rhythmic_Block END;
  public static final expert_system.Rhythmic_Block LASTNOTE;
  public static final expert_system.Rhythmic_Block MINIM1;
  public static final expert_system.Rhythmic_Block CROTCHETS1;
  public static final expert_system.Rhythmic_Block CROTCHETS2;
  public static final expert_system.Rhythmic_Block CROTCHET_SWUNG_T1;
  public static final expert_system.Rhythmic_Block CROTCHET_SWUNG_T2;
  public static final expert_system.Rhythmic_Block CROTCHET_SWUNG_T3;
  public static final expert_system.Rhythmic_Block CROTCHET_SWUNG_T4;
  public static final expert_system.Rhythmic_Block TRIPLET_CROTCHETS_FULL;
  public static final expert_system.Rhythmic_Block TRIPLET_CROTCHETS_FIRST_OFF;
  public static final expert_system.Rhythmic_Block TRIPLET_CROTCHETS_SECOND_OFF;
  public static final expert_system.Rhythmic_Block TRIPLET_CROTCHETS_THIRD_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS2_FIRST_ON;
  public static final expert_system.Rhythmic_Block QUAVERS2_SECOND_ON;
  public static final expert_system.Rhythmic_Block QUAVERS2;
  public static final expert_system.Rhythmic_Block QUAVERS4;
  public static final expert_system.Rhythmic_Block QUAVERS4_FIRST_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS4_SECOND_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS4_THIRD_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS4_FORTH_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS4_FIRST_AND_SECOND_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS4_SECOND_AND_THIRD_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS4_THIRD_AND_FORTH_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS4_FIRST_AND_FORTH_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS4_FIRST_AND_THIRD_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS4_SECOND_AND_FORTH_OFF;
  public static final expert_system.Rhythmic_Block QUAVERS_SWUNG_T1;
  public static final expert_system.Rhythmic_Block QUAVERS_SWUNG_T2;
  public static final expert_system.Rhythmic_Block QUAVERS_SWUNG_T3;
  public static final expert_system.Rhythmic_Block QUAVERS_SWUNG_T4;
  public static final expert_system.Rhythmic_Block TRIPLET_QUAVERS_FULL;
  public static final expert_system.Rhythmic_Block TRIPLET_QUAVERS_FIRST_OFF;
  public static final expert_system.Rhythmic_Block TRIPLET_QUAVERS_SECOND_OFF;
  public static final expert_system.Rhythmic_Block TRIPLET_QUAVERS_THIRD_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4_FIRST_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4_SECOND_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4_THIRD_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4_FORTH_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4_FIRST_AND_SECOND_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4_SECOND_AND_THIRD_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4_THIRD_AND_FORTH_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4_FIRST_AND_THIRD_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS4_SECOND_AND_FORTH_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS8;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS8_FIRST_THIRD_FIFTH_AND_SEVENTH_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS8_SECOND_FORTH_SIXTH_AND_EIGTH_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS8_SECOND_THIRD_FIFTH_AND_SIXTH_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS8_FIRST_SECOND_FORTH_AND_FIFTH_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS8_SECOND_FIFTH_SEVENTH_AND_EIGTH_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS8_THIRD_SIXTH_AND_EIGTH_OFF;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS_SWUNG_T1;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS_SWUNG_T2;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS_SWUNG_T3;
  public static final expert_system.Rhythmic_Block SEMI_QUAVERS_SWUNG_T4;
  public static final expert_system.Rhythmic_Block TRIPLET_SEMI_QUAVERS_FULL;
  public static final expert_system.Rhythmic_Block TRIPLET_SEMI_QUAVERS_VAR1;
  public static final expert_system.Rhythmic_Block TRIPLET_SEMI_QUAVERS_VAR2;
  public static final expert_system.Rhythmic_Block TRIPLET_SEMI_QUAVERS_VAR3;
  public static final expert_system.Rhythmic_Block DEMI_SEMI_QUAVERS8;
  public static final expert_system.Rhythmic_Block DEMI_SEMI_QUAVERS8_FIRST_THIRD_FIFTH_AND_SEVENTH_OFF;
  public static final expert_system.Rhythmic_Block DEMI_SEMI_QUAVERS8_SECOND_FORTH_SIXTH_AND_EIGTH_OFF;
  public static final expert_system.Rhythmic_Block DEMI_SEMI_QUAVERS8_SECOND_THIRD_FIFTH_AND_SIXTH_OFF;
  public static final expert_system.Rhythmic_Block DEMI_SEMI_QUAVERS8_FIRST_SECOND_FORTH_AND_FIFTH_OFF;
  public static final expert_system.Rhythmic_Block DEMI_SEMI_QUAVERS8_SECOND_FIFTH_SEVENTH_AND_EIGTH_OFF;
  public static final expert_system.Rhythmic_Block DEMI_SEMI_QUAVERS8_THIRD_SIXTH_AND_EIGTH_OFF;
  public static final expert_system.Rhythmic_Block TRIPLET_DEMI_SEMI_QUAVERS_FULL;
  public static final expert_system.Rhythmic_Block TRIPLET_DEMI_SEMI_QUAVERS_VAR1;
  public static final expert_system.Rhythmic_Block TRIPLET_DEMI_SEMI_QUAVERS_VAR2;
  public static final expert_system.Rhythmic_Block TRIPLET_DEMI_SEMI_QUAVERS_VAR3;
  public static final expert_system.Rhythmic_Block LATIN_V1;
  public static final expert_system.Rhythmic_Block LATIN_V2;
  public static final expert_system.Rhythmic_Block LATIN_V3;
  public static final expert_system.Rhythmic_Block LATIN_V4;
  public static final expert_system.Rhythmic_Block LATIN_V5;
  public static final expert_system.Rhythmic_Block LATIN_V6;
  expert_system.Rhythmic_Value[] rhythmicValues;
  public static expert_system.Rhythmic_Block[] values();
  public static expert_system.Rhythmic_Block valueOf(java.lang.String);
  public int getBeatValue();
  public void setBeatValue(int);
  public expert_system.Rhythmic_Value[] getRhythmicValues();
  public void setRhythmicValues(expert_system.Rhythmic_Value[]);
  public void initialise();
  static {};
}
Compiled from "Rhythmic_Value.java"
public final class expert_system.Rhythmic_Value extends java.lang.Enum<expert_system.Rhythmic_Value> {
  public static final expert_system.Rhythmic_Value SEMIBREVE;
  public static final expert_system.Rhythmic_Value DOTTED_MINIM;
  public static final expert_system.Rhythmic_Value MINIM;
  public static final expert_system.Rhythmic_Value TRIPLET_MINIM;
  public static final expert_system.Rhythmic_Value DOTTED_CROTCHET;
  public static final expert_system.Rhythmic_Value CROTCHET;
  public static final expert_system.Rhythmic_Value TRIPLET_CROTCHET;
  public static final expert_system.Rhythmic_Value DOTTED_QUAVER;
  public static final expert_system.Rhythmic_Value QUAVER;
  public static final expert_system.Rhythmic_Value TRIPLET_QUAVER;
  public static final expert_system.Rhythmic_Value DOTTED_SEMI_QUAVER;
  public static final expert_system.Rhythmic_Value SEMI_QUAVER;
  public static final expert_system.Rhythmic_Value TRIPLET_SEMI_QUAVER;
  public static final expert_system.Rhythmic_Value DOTTED_DEMI_SEMI_QUAVER;
  public static final expert_system.Rhythmic_Value DEMI_SEMI_QUAVER;
  public static final expert_system.Rhythmic_Value TRIPLET_DEMI_SEMI_QUAVER;
  public static final expert_system.Rhythmic_Value DOTTED_HEMI_DEMI_SEMI_QUAVER;
  public static final expert_system.Rhythmic_Value HEMI_DEMI_SEMI_QUAVER;
  public static final expert_system.Rhythmic_Value ONE_TWO_EIGHT_NOTE;
  public static final expert_system.Rhythmic_Value SEMIBREVE_REST;
  public static final expert_system.Rhythmic_Value DOTTED_MINIM_REST;
  public static final expert_system.Rhythmic_Value MINIM_REST;
  public static final expert_system.Rhythmic_Value TRIPLET_MINIM_REST;
  public static final expert_system.Rhythmic_Value DOTTED_CROTCHET_REST;
  public static final expert_system.Rhythmic_Value CROTCHET_REST;
  public static final expert_system.Rhythmic_Value TRIPLET_CROTCHET_REST;
  public static final expert_system.Rhythmic_Value DOTTED_QUAVER_REST;
  public static final expert_system.Rhythmic_Value QUAVER_REST;
  public static final expert_system.Rhythmic_Value TRIPLET_QUAVER_REST;
  public static final expert_system.Rhythmic_Value DOTTED_SEMI_QUAVER_REST;
  public static final expert_system.Rhythmic_Value SEMI_QUAVER_REST;
  public static final expert_system.Rhythmic_Value TRIPLET_SEMI_QUAVER_REST;
  public static final expert_system.Rhythmic_Value DOTTED_DEMI_SEMI_QUAVER_REST;
  public static final expert_system.Rhythmic_Value DEMI_SEMI_QUAVER_REST;
  public static final expert_system.Rhythmic_Value TRIPLET_DEMI_SEMI_QUAVER_REST;
  public static final expert_system.Rhythmic_Value DOTTED_HEMI_DEMI_SEMI_QUAVER_REST;
  public static final expert_system.Rhythmic_Value HEMI_DEMI_SEMI_QUAVER_REST;
  public static final expert_system.Rhythmic_Value ONE_TWO_EIGHT_NOTE_REST;
  public java.lang.String noteVal;
  public double beatVal;
  public int noteOnOff;
  public int order;
  public static expert_system.Rhythmic_Value[] values();
  public static expert_system.Rhythmic_Value valueOf(java.lang.String);
  public java.lang.String getNoteVal();
  public double getBeatVal();
  public int getNoteOnOff();
  public int getOrder();
  public void setOrder(int);
  static {};
}
Compiled from "Scale.java"
public final class expert_system.Scale extends java.lang.Enum<expert_system.Scale> {
  public static final expert_system.Scale MAJOR;
  public static final expert_system.Scale DOMINANT_7TH;
  public static final expert_system.Scale MINOR_DORIAN;
  public static final expert_system.Scale LYDIAN;
  public static final expert_system.Scale LYDIAN_AUGMENTED;
  public static final expert_system.Scale LYDIAN_DOMINANT;
  public static final expert_system.Scale AUGMENTED;
  public static final expert_system.Scale BLUES;
  public static final expert_system.Scale HINDU;
  public static final expert_system.Scale CPARKER_MAJOR_FLAT6;
  public static final expert_system.Scale PURE_MINOR;
  public static final expert_system.Scale MELODIC_MINOR;
  public static final expert_system.Scale HARMONIC_MINOR;
  public static final expert_system.Scale PHRYGIAN;
  public static final expert_system.Scale WHOLE_TONE;
  public static final expert_system.Scale HALF_DIMINISHED_LOCRIAN;
  public static final expert_system.Scale HALF_DIMINISHED_LOCRIAN_SHARP2;
  public static final expert_system.Scale DIMINISHED;
  public static final expert_system.Scale DIMINISHED_HALFSTEP_FIRST;
  public static final expert_system.Scale DIMINISHED_WHOLE_TONE;
  public static expert_system.Scale[] values();
  public static expert_system.Scale valueOf(java.lang.String);
  public int[] getIntervals();
  public void setIntervals(int[]);
  public int[] getWholeScale();
  public void setWholeScale(int[]);
  public void setKey(expert_system.Key);
  public expert_system.Key getKey();
  public void setOctaves(int[]);
  public int[] getOctaves();
  public void initialise(expert_system.Key);
  public void constructScale();
  public int[] getScaleInRange(int, int);
  static {};
}
Compiled from "Tonality.java"
public class expert_system.Tonality {
  public expert_system.Key root;
  public expert_system.Key[] relatedKeys;
  public int Major_Minor_Tonality;
  public expert_system.Tonality(expert_system.Key, int);
  public expert_system.Key[] getRelatedKeys();
  public void setRelatedKeys();
  public expert_system.Key getRoot();
  public void setRoot(expert_system.Key);
  public int getMajor_Minor_Tonality();
  public void setMajor_Minor_Tonality(int);
  public java.lang.String toString();
  public static void main(java.lang.String[]);
}
Compiled from "F.java"
public class networking.F {
  networking.OSCClient theEar;
  public networking.F();
  public static void main(java.lang.String[]);
}
Compiled from "OSCClient.java"
public class networking.OSCClient {
  public oscP5.OscP5 oscP5;
  public netP5.NetAddress myRemoteLocation;
  int minimumRange;
  int maximumRange;
  double BPM;
  public int[] noteValues;
  public int[] velocityValues;
  public double[] millisValues;
  public boolean areTheNotesStored;
  public boolean areTheVelocitiesStored;
  public boolean areTheMillisStored;
  public boolean isTheRangeSet;
  public boolean isTheBPMSet;
  public boolean readyToGo;
  public algorithms_and_systems_AI_Evolutionary.FuzzySystem theFuzzySystem;
  public algorithms_and_systems_AI_Evolutionary.GeneticAlgorithm theGeneticAlgorithm;
  java.lang.String response;
  public networking.OSCClient();
  void oscEvent(oscP5.OscMessage);
  public void printParameters();
  public static void println(java.lang.String);
  public static void print(java.lang.String);
  public void setFalse();
  public int getMinimumRange();
  public void setMinimumRange(int);
  public int getMaximumRange();
  public void setMaximumRange(int);
  public double getBPM();
  public void setBPM(double);
  public int[] getNoteValues();
  public void setNoteValues(int[]);
  public int[] getVelocityValues();
  public void setVelocityValues(int[]);
  public double[] getMillisValues();
  public void setMillisValues(double[]);
  public boolean isTheRangeSet();
  public void setTheRangeSet(boolean);
  public boolean isAreTheNotesStored();
  public void setAreTheNotesStored(boolean);
  public boolean isAreTheVelocitiesStored();
  public void setAreTheVelocitiesStored(boolean);
  public boolean isAreTheMillisStored();
  public void setAreTheMillisStored(boolean);
  public boolean isTheBPMSet();
  public void setTheBPMSet(boolean);
  public boolean isReadyToGo();
  public void setReadyToGo(boolean);
  public static void main(java.lang.String[]);
}
Compiled from "OSCServer.java"
public class networking.OSCServer {
  public netP5.NetAddress myRemoteLocation;
  public java.lang.String theMessage;
  public networking.OSCServer(java.lang.String, int);
  void send();
  public static void main(java.lang.String[]);
}
