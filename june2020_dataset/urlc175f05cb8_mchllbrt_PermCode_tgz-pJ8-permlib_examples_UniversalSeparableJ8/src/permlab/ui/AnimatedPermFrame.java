
/*
 * AnimatedPermFrame.java
 *
 * Created on Apr 2, 2012, 2:08:31 PM
 */
package permlab.ui;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageTypeSpecifier;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.metadata.IIOMetadata;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.Timer;
import permlib.Permutation;
import permlib.property.PermProperty;
import permlib.property.Universal;
import permlab.utilities.ExportInterface;
import static permlab.utilities.ExportInterface.fileChooser;
import permlab.utilities.FileUtilities;
import permlab.utilities.PaintUtilities;

/**
 * The GUI class that represents the frame for displaying an animation of a
 * series of permutations.
 *
 * @author Michael Albert, M Belton
 */
public class AnimatedPermFrame extends javax.swing.JFrame {

    private Permutation[] perms = new Permutation[0];
    private int permIndex;
    private Timer timer;
    private static final int INITIAL_DELAY = 100; //ms
    private int delay = INITIAL_DELAY; // ms
    private AnimationTask parentTask;

    /**
     * Creates new AnimatedPermFrame with an AnimationTask.
     * 
     * @param parentTask thread generating permutations to display
     */
    public AnimatedPermFrame(AnimationTask parentTask) {
        this.parentTask = parentTask;
        this.timer = new Timer(delay, new TimeListener());
        this.perms = new Permutation[0];
        this.permIndex = -1;
        initComponents();
        totalFramesLabel.setText("of " + this.perms.length);
        addMenu();
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new HelpDispatcher("Animation window", "AnimatedPermFrameHelp.html", this));
    }

    /**
     * Creates new AnimatedPermFrame.
     */
    public AnimatedPermFrame() {
        this.parentTask = null;
        this.timer = new Timer(delay, new TimeListener());
        this.perms = new Permutation[0];
        this.permIndex = -1;
        initComponents();
        totalFramesLabel.setText("of " + this.perms.length);
        addMenu();
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new HelpDispatcher("Animation window", "AnimatedPermFrameHelp.html", this));
    }

    /**
     * Creates new AnimatedPermFrame from a collection of perms.
     * 
     * @param perms collection to animate
     */
    public AnimatedPermFrame(Collection<Permutation> perms) {
        initComponents();

        this.timer = new Timer(delay, new TimeListener());
        addPerms(perms);
        this.permIndex = -1;

        totalFramesLabel.setText("of " + this.perms.length);
        addMenu();
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new HelpDispatcher("Animation window", "AnimatedPermFrameHelp.html", this));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        controlPanel = new javax.swing.JPanel();
        displayPanel = new DisplayPanel();
        optionsPanel = new javax.swing.JPanel();
        stepButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        speedSlider = new javax.swing.JSlider();
        slowLabel = new javax.swing.JLabel();
        fastLabel = new javax.swing.JLabel();
        frameLabel = new javax.swing.JLabel();
        frameNumberTextField = new javax.swing.JTextField();
        totalFramesLabel = new javax.swing.JLabel();
        sortButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        displayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        displayPanel.setPreferredSize(new java.awt.Dimension(500, 300));
        displayPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                displayPanelpopupMenuHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                displayPanelpopupMenuHandler(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayPanelpopupMenuHandler(evt);
            }
        });

        org.jdesktop.layout.GroupLayout displayPanelLayout = new org.jdesktop.layout.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 321, Short.MAX_VALUE)
        );

        optionsPanel.setPreferredSize(new java.awt.Dimension(500, 300));

        stepButton.setText("Step");
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        slowLabel.setText("Slow");

        fastLabel.setText("Fast");

        frameLabel.setText("Frame Number");

        frameNumberTextField.setText("0");
        frameNumberTextField.setPreferredSize(new java.awt.Dimension(110, 28));
        frameNumberTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                frameNumberTextFieldMouseClicked(evt);
            }
        });
        frameNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frameNumberTextFieldActionPerformed(evt);
            }
        });

        totalFramesLabel.setText("of ???");

        sortButton.setText("Sort");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout optionsPanelLayout = new org.jdesktop.layout.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsPanelLayout.createSequentialGroup()
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(optionsPanelLayout.createSequentialGroup()
                        .add(71, 71, 71)
                        .add(sortButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(frameNumberTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(totalFramesLabel)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, optionsPanelLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, optionsPanelLayout.createSequentialGroup()
                                .add(slowLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(speedSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 321, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(fastLabel))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, optionsPanelLayout.createSequentialGroup()
                                .add(stepButton)
                                .add(18, 18, 18)
                                .add(startButton)
                                .add(18, 18, 18)
                                .add(stopButton)
                                .add(18, 18, 18)
                                .add(resetButton)
                                .add(12, 12, 12)))))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, optionsPanelLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(frameLabel)
                .add(150, 150, 150))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsPanelLayout.createSequentialGroup()
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(optionsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(fastLabel)
                            .add(slowLabel)))
                    .add(optionsPanelLayout.createSequentialGroup()
                        .add(speedSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(resetButton)
                            .add(stopButton)
                            .add(startButton)
                            .add(stepButton))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(frameLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(frameNumberTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(totalFramesLabel)
                    .add(sortButton))
                .add(78, 78, 78))
        );

        org.jdesktop.layout.GroupLayout controlPanelLayout = new org.jdesktop.layout.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(controlPanelLayout.createSequentialGroup()
                .add(optionsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(displayPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(controlPanelLayout.createSequentialGroup()
                .add(displayPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 132, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(controlPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(controlPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(0, 6, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sorts the collection of permutation being displayed in lexicographical
     * order.
     * 
     * @param evt event of button being pressed
     */
    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        timer.stop();
        Arrays.sort(perms);
        resetButtonActionPerformed(evt);
    }//GEN-LAST:event_sortButtonActionPerformed

    /**
     * Action responding to user specifying a permutation at a frame number to 
     * display.
     * 
     * @param evt event in the text field displaying the frame number
     */
    private void frameNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frameNumberTextFieldActionPerformed
        try {
            permIndex = Integer.parseInt(frameNumberTextField.getText()) - 1;
            refresh();
        } catch (NumberFormatException ex) {
        }
    }//GEN-LAST:event_frameNumberTextFieldActionPerformed

    /**
     * Stops the animation when the frame number text field is clicked.
     * 
     * @param evt event when mouse clicks the frame number text field.
     */
    private void frameNumberTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frameNumberTextFieldMouseClicked
        timer.stop();
    }//GEN-LAST:event_frameNumberTextFieldMouseClicked

    /**
     * Adjusts the spend that the animation is shown depending on the slider
     * value.
     * 
     * @param evt event of slider value being altered
     */
    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        if (!speedSlider.getValueIsAdjusting()) {
            int x = speedSlider.getValue();
            delay = x == 0 ? 10000 : (10000 / x - 100);
            timer.setDelay(delay);
        }
    }//GEN-LAST:event_speedSliderStateChanged

    /**
     * Resets the animation by going back to the first frame.
     * 
     * @param evt event of reset button being pressed
     */
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        timer.stop();
        permIndex = -1;
        frameNumberTextField.setText("" + (permIndex + 1));
        displayPanel.repaint();
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * Stops the animation being displayed.
     * 
     * @param evt event of the stop button being pressed
     */
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        timer.stop();
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * Starts the animation.
     * 
     * @param evt event of the start button being pressed
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        timer.start();
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * Steps through the animation by one frame.
     * 
     * @param evt event of the stop button being pressed
     */
    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        timer.stop();
        step();
    }//GEN-LAST:event_stepButtonActionPerformed

    /**
     * If the pop-up menu is triggered then stop the animation and show the menu
     * at the spot clicked.
     * 
     * @param evt the mouse being clicked
     */
    private void displayPanelpopupMenuHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelpopupMenuHandler
        if (evt.isPopupTrigger()) {
            timer.stop();
            popupMenu.show(evt.getComponent(),
                    evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_displayPanelpopupMenuHandler

    /**
     * As the window is closed stop the animation and the threads traversing the
     * collection and calculating the rest of the collection.
     * 
     * @param evt the window being closed
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        timer.stop();
        parentTask.cancel(true);
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnimatedPermFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnimatedPermFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnimatedPermFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnimatedPermFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AnimatedPermFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JLabel fastLabel;
    private javax.swing.JLabel frameLabel;
    private javax.swing.JTextField frameNumberTextField;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel slowLabel;
    private javax.swing.JButton sortButton;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stepButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel totalFramesLabel;
    // End of variables declaration//GEN-END:variables
    private JMenuItem exportOption = new JMenuItem("Export current");
    private JMenuItem exportAllAsTextOption = new JMenuItem("Export all in textbox");
    private JMenuItem exportAllAsGIF = new JMenuItem("Export all as a GIF");

    /**
     * Creates the pop-up menu.
     */
    private void addMenu() {
        popupMenu.add(exportOption);
        exportOption.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (permIndex >= 0) {
                    exportCurrent();
                }
            }
        });
        popupMenu.add(exportAllAsTextOption);
        exportAllAsTextOption.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                TextFrame textDisplay = new TextFrame();
                textDisplay.addText(perms);
                textDisplay.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                int x = displayPanel.getX();
                textDisplay.setLocation(
                        displayPanel.getX() + displayPanel.getWidth() + 10,
                        displayPanel.getY());
                textDisplay.pack();
                textDisplay.setVisible(true);
            }
        });
        popupMenu.add(exportAllAsGIF);
        exportAllAsGIF.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                exportPermCollectionAsGIF(perms, displayPanel.getWidth(), displayPanel.getHeight());
            }
        });
    }

    /**
     * Exports the entire collection as a GIF.
     * NOTE: This GIF is set up so that it will display all permutations once
     * without looping.
     * 
     * @param perms permutations to be exported
     * @param width width of the GIF
     * @param height height of the GIF
     */
    public void exportPermCollectionAsGIF(Permutation[] perms, int width, int height) {
        BufferedImage image;
        Graphics2D g;
        File savingFile = new File("GIF.gif");
        fileChooser.setSelectedFile(savingFile);
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            savingFile = fileChooser.getSelectedFile();
            if (FileUtilities.canSaveFileHere(this, savingFile)) {
                try {
                    Permutation p = perms[0];
                    image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
                    g = image.createGraphics();
                    PaintUtilities.paint(g, p, width, height, false);

                    ImageTypeSpecifier spec = new ImageTypeSpecifier(image);
                    ImageWriter wr = ImageIO.getImageWriters(spec, "GIF").next();
                    wr.setOutput(ImageIO.createImageOutputStream(savingFile));
                    ImageWriteParam param = wr.getDefaultWriteParam();
                    IIOMetadata meta = wr.getDefaultImageMetadata(spec, param);
                    wr.prepareWriteSequence(meta);

                    for (Permutation per : perms) {
                        image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
                        g = image.createGraphics();
                        PaintUtilities.paint(g, per, width, height, false);

                        wr.writeToSequence(new IIOImage(image, null, null), param);
                    }
                } catch (Exception excp) {
                }
            }
        }
    }

    /**
     * Export the current permutation being displayed.
     */
    private void exportCurrent() {
        ExportDialog ex = new ExportDialog(this, true);
        ex.setVisible(true);
        ExportInterface e = ex.getExportInterface();
        if (e != null) {
            e.export(this, perms[permIndex], this.getWidth(), this.getHeight(), false);
        }
    }

    /**
     * Add permutations to the current collection being displayed.
     * 
     * @param extraPerms additional permutations to add
     * @param prop property pertaining to permutation collection
     */
    void addPerms(Collection<Permutation> extraPerms, PermProperty prop) {
        if (prop instanceof Universal) {
            Permutation[] newPerms = new Permutation[this.perms.length + extraPerms.size()];
            extraPerms.toArray(newPerms);
            System.arraycopy(perms, 0, newPerms, extraPerms.size(), perms.length);
            this.perms = newPerms;
        } else {
            ArrayList<Permutation> temp = new ArrayList<Permutation>();
            for (Permutation p : extraPerms) {
                if (prop.isSatisfiedBy(p)) {
                    temp.add(p);
                }
            }
            Permutation[] newPerms = new Permutation[this.perms.length + temp.size()];
            temp.toArray(newPerms);
            System.arraycopy(perms, 0, newPerms, temp.size(), perms.length);
            this.perms = newPerms;
        }
        totalFramesLabel.setText("of " + perms.length);
        repaint();
    }

    /**
     * Add permutations to the current collection being displayed.
     * 
     * @param extraPerms additional permutations to add
     */
    void addPerms(Collection<Permutation> extraPerms) {
        addPerms(extraPerms, new Universal());
    }

    /**
     * Inner class acts as a timer to step through the frames and display the
     * collection as an animation.
     */
    private class TimeListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            step();
        }
    }

    /**
     * Move to next frame.
     */
    public void step() {
        permIndex++;
        refresh();
    }

    /**
     * Repaint the display to match the current frame number.
     */
    private void refresh() {
        permIndex = Math.max(0, Math.min(permIndex, perms.length - 1));
        frameNumberTextField.setText("" + (permIndex + 1));
        displayPanel.repaint();
    }

    /**
     * Panel to display the permutation at the current frame number.
     */
    private class DisplayPanel extends JPanel {

        public DisplayPanel() {
        }

        @Override
        public void paint(Graphics g) {
            Permutation p = null;
            if (0 <= permIndex && permIndex < perms.length) {
                p = perms[permIndex];
            }
            // NOTE: This paint method was moved to a utility class to make use of it when exporting to image formats.
            PaintUtilities.paint(g, p, getWidth(), getHeight(), false);
        }
    }
}