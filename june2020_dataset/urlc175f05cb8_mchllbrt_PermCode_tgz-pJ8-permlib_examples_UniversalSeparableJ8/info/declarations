Compiled from "A123Involutions.java"
public class permlab.examples.A123Involutions {
  public permlab.examples.A123Involutions();
  public static void main(java.lang.String[]);
}
Compiled from "A231Example.java"
public class permlab.examples.A231Example {
  public permlab.examples.A231Example();
  public static void main(java.lang.String[]);
}
Compiled from "ArrayVList.java"
public class permlab.examples.ArrayVList {
  public permlab.examples.ArrayVList();
  public static void main(java.lang.String[]);
}
Compiled from "ArrayVList.java"
class permlab.examples.ArrayVList$ArrayWrapper {
  public permlab.examples.ArrayVList$ArrayWrapper(int[]);
  public int hashCode();
  public boolean equals(java.lang.Object);
  static int[] access$002(permlab.examples.ArrayVList$ArrayWrapper, int[]);
}
Compiled from "Av1342Simple.java"
public class permlab.examples.Av1342Simple {
  public permlab.examples.Av1342Simple();
  public static void main(java.lang.String[]);
}
Compiled from "Av1342Simple.java"
final class permlab.examples.Av1342Simple$1 implements permlib.property.PermProperty {
  permlab.examples.Av1342Simple$1();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "Av231PlusStuff.java"
public class permlab.examples.Av231PlusStuff {
  public static java.util.HashMap<permlib.Permutation, permlib.Permutation> normalForms;
  public static java.util.HashMap<permlib.Permutation, java.util.HashSet<permlib.Permutation>> eqClasses;
  public static permlib.Permutation[] reps;
  public permlab.examples.Av231PlusStuff();
  public static void main(java.lang.String[]);
  public static void doCounts(permlib.Permutation, int, int);
  public static permlib.Permutation sum3(permlib.Permutation, permlib.Permutation, permlib.Permutation);
  public static void doAll(permlib.Permutation, permlib.Permutation, permlib.Permutation, int, int);
  public static void doX(int);
  public static void doWilf(int, int, boolean, int);
  public static java.util.HashSet<java.util.HashSet<permlib.Permutation>> buildClasses(int);
  public static java.util.HashSet<permlib.Permutation> children(permlib.Permutation);
  public static void splitBlock(java.util.HashSet<permlib.Permutation>, int, java.util.HashMap<permlib.Permutation, java.util.ArrayList<java.lang.Long>>);
  public static java.lang.String tikzMatchingForPerm(int[]);
  public static int countLRMax(permlib.Permutation);
  public static void generateClasses(int, boolean);
  public static permlib.Permutation transform(permlib.Permutation);
  static {};
}
Compiled from "Av231PlusStuff.java"
final class permlab.examples.Av231PlusStuff$1 implements permlib.processor.PermProcessor {
  long[] counts;
  final int val$maxLength;
  permlab.examples.Av231PlusStuff$1(int);
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
}
Compiled from "Av231PlusStuff.java"
class permlab.examples.Av231PlusStuff$Spectrum {
  long[] counts;
  public permlab.examples.Av231PlusStuff$Spectrum(long[]);
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "Av231Tree.java"
public class permlab.examples.Av231Tree {
  public permlab.examples.Av231Tree();
  public static void main(java.lang.String[]);
  java.math.BigInteger multiset(java.util.ArrayList<java.math.BigInteger>, int);
}
Compiled from "Av312Extensions.java"
public class permlab.examples.Av312Extensions {
  public permlab.examples.Av312Extensions();
  public static void main(java.lang.String[]);
}
Compiled from "Av321Wilf.java"
public class permlab.examples.Av321Wilf {
  public permlab.examples.Av321Wilf();
  public static void main(java.lang.String[]);
  public static void doCounts(permlib.Permutation, int, int);
  public static void doWilf(int, int, boolean, int);
  public static void doDiff(int, int, int);
  static permlib.Permutation diff(int, int);
}
Compiled from "Av321Wilf.java"
class permlab.examples.Av321Wilf$Spectrum {
  long[] counts;
  public permlab.examples.Av321Wilf$Spectrum(long[]);
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "AvoidanceTestSpeedTests.java"
public class permlab.examples.AvoidanceTestSpeedTests {
  public permlab.examples.AvoidanceTestSpeedTests();
  public static void printTime(java.util.Collection<permlib.Permutation>, permlib.property.HereditaryProperty, java.lang.String);
  public static void printPermutationsTime(int, permlib.property.HereditaryProperty, java.lang.String);
  public static void main(java.lang.String[]);
}
Compiled from "BasicBubbleClass.java"
public class permlab.examples.BasicBubbleClass implements permlib.classes.PermClassInterface {
  java.util.HashSet<permlib.Permutation> basis;
  permlib.classes.PermutationClass c;
  int nextLength;
  permlab.examples.BasicBubbleClass(java.util.Collection<permlib.Permutation>);
  public static void main(java.lang.String[]);
  public void processPerms(int, permlib.processor.PermProcessor);
  public java.util.Collection<permlib.Permutation> getPerms(int);
  public java.util.Collection<permlib.Permutation> getPermsTo(int);
  public boolean containsPermutation(permlib.Permutation);
  public java.util.Iterator<permlib.Permutation> getIterator(int, int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, int, permlib.property.PermProperty);
  void generatePermsTo(int);
}
Compiled from "BasicCMachine.java"
public class permlab.examples.BasicCMachine {
  public permlab.examples.BasicCMachine();
  public static void main(java.lang.String[]);
  public static void doStep(java.util.HashMap<permlab.examples.BasicCMachine$State, permlab.examples.BasicCMachine$Counter>);
}
Compiled from "BasicCMachine.java"
class permlab.examples.BasicCMachine$Counter {
  java.math.BigInteger current;
  java.math.BigInteger next;
  permlab.examples.BasicCMachine$Counter(java.math.BigInteger, java.math.BigInteger);
  permlab.examples.BasicCMachine$Counter();
  public void updateCount(java.math.BigInteger);
  public void reset();
  public java.lang.String toString();
}
Compiled from "BasicCMachine.java"
class permlab.examples.BasicCMachine$State {
  int a;
  int b;
  int c;
  boolean popEligible;
  permlab.examples.BasicCMachine$State[] children;
  public permlab.examples.BasicCMachine$State(int, int, int, boolean);
  public permlab.examples.BasicCMachine$State(permlab.examples.BasicCMachine$State);
  public void setPopEligible(boolean);
  public void generateChildren();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "BubbleClass.java"
public class permlab.examples.BubbleClass implements permlib.classes.PermClassInterface {
  permlib.classes.PermutationClass c;
  permlib.Permutation[] basis;
  public permlab.examples.BubbleClass(java.util.Collection<permlib.Permutation>);
  public void processPerms(int, permlib.processor.PermProcessor);
  public java.util.Collection<permlib.Permutation> getPerms(int);
  public java.util.Collection<permlib.Permutation> getPermsTo(int);
  public boolean containsPermutation(permlib.Permutation);
  public java.util.Iterator<permlib.Permutation> getIterator(int, int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, int, permlib.property.PermProperty);
}
Compiled from "CMachine.java"
public class permlab.examples.CMachine {
  java.util.HashMap<permlab.examples.CMachine$State, permlab.examples.CMachine$Counter> states;
  permlib.property.HereditaryProperty definingProperty;
  final permlab.examples.CMachine$State INITIAL_STATE;
  public permlab.examples.CMachine(permlib.property.HereditaryProperty);
  public void initialise();
  public void doStep();
  public java.math.BigInteger currentValue();
  public static void main(java.lang.String[]);
}
Compiled from "CMachine.java"
class permlab.examples.CMachine$Counter {
  java.math.BigInteger current;
  java.math.BigInteger next;
  final permlab.examples.CMachine this$0;
  public permlab.examples.CMachine$Counter(permlab.examples.CMachine);
  public void updateCount(java.math.BigInteger);
  public void reset();
  public java.lang.String toString();
}
Compiled from "CMachine.java"
class permlab.examples.CMachine$State {
  permlib.Permutation p;
  boolean popEligible;
  java.util.ArrayList<permlab.examples.CMachine$State> children;
  int[] insertionPoints;
  final permlab.examples.CMachine this$0;
  public permlab.examples.CMachine$State(permlab.examples.CMachine, permlib.Permutation, boolean);
  public permlab.examples.CMachine$State(permlab.examples.CMachine);
  public void generateChildren();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "ConsecutiveIsomorphismSpecification.java"
public class permlab.examples.ConsecutiveIsomorphismSpecification {
  java.util.HashMap<permlib.Permutation, permlib.Permutation> iso;
  java.util.HashSet<permlib.Permutation> basis;
  public permlab.examples.ConsecutiveIsomorphismSpecification();
  public permlab.examples.ConsecutiveIsomorphismSpecification(java.util.HashMap<permlib.Permutation, permlib.Permutation>);
  public permlab.examples.ConsecutiveIsomorphismSpecification applySymmetryPair(permlib.Symmetry, permlib.Symmetry);
  public void add(permlib.Permutation, permlib.Permutation);
  public void remove(permlib.Permutation);
  public boolean inDomain(permlib.Permutation);
  public boolean inRange(permlib.Permutation);
  public permlib.Permutation apply(permlib.Permutation);
  public java.util.HashSet<permlib.Permutation> apply(java.util.HashSet<permlib.Permutation>);
  public permlab.examples.ConsecutiveIsomorphismSpecification copy();
  public static java.util.HashSet<permlab.examples.ConsecutiveIsomorphismSpecification> symmetryRepresentatives(java.util.Collection<permlab.examples.ConsecutiveIsomorphismSpecification>);
  public java.util.HashMap<permlib.Permutation, permlib.Permutation> getIso();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.util.HashMap<java.util.HashSet<permlib.Permutation>, java.util.HashSet<permlib.Permutation>> possibleExtensions(int);
  public java.util.HashSet<permlab.examples.ConsecutiveIsomorphismSpecification> extensions(int);
  public permlab.examples.ConsecutiveIsomorphismSpecification oneExtension(int);
  public permlab.examples.ConsecutiveIsomorphismSpecification randomExtension(int);
  public java.lang.String toString();
  public static java.util.HashSet<permlab.examples.ConsecutiveIsomorphismSpecification> isoReps(java.util.HashSet<permlab.examples.ConsecutiveIsomorphismSpecification>);
  public boolean allExtended(int);
  void addBasis(permlib.Permutation...);
}
Compiled from "ConsecutiveOrder.java"
public class permlab.examples.ConsecutiveOrder {
  static java.util.HashMap<java.util.HashSet<permlib.Permutation>, java.util.HashSet<permlib.Permutation>> children;
  static java.util.HashMap<permlib.Permutation, java.util.HashSet<permlib.Permutation>> parents;
  static java.util.HashSet<java.lang.Integer> knownMaps;
  public permlab.examples.ConsecutiveOrder();
  public static java.util.HashSet<permlib.Permutation> children(permlib.Permutation);
  public static java.util.HashSet<permlib.Permutation> children(java.util.Collection<permlib.Permutation>);
  public static void buildMaps(int);
  public static java.util.HashSet<permlib.Permutation> allParents(java.util.Collection<permlib.Permutation>);
  public static java.util.HashSet<permlib.Permutation> parents(permlib.Permutation);
  public static java.util.HashSet<permlib.Permutation> siblings(permlib.Permutation);
  static {};
}
Compiled from "ConsecutivePatterns.java"
public class permlab.examples.ConsecutivePatterns {
  public permlab.examples.ConsecutivePatterns();
  public static void main(java.lang.String[]);
  public static void generalExample();
}
Compiled from "EdelmanGreene.java"
public class permlab.examples.EdelmanGreene {
  public permlab.examples.EdelmanGreene();
  public static void main(java.lang.String[]);
  public static boolean multFree(permlib.Permutation);
  public static void basisTo(int);
  static byte[] reducedWord(permlib.Permutation);
}
Compiled from "EdelmanGreene.java"
final class permlab.examples.EdelmanGreene$1 implements permlib.property.HereditaryProperty {
  permlab.examples.EdelmanGreene$1();
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "EdelmanGreene.java"
class permlab.examples.EdelmanGreene$IntEquivalence {
  java.util.HashMap<java.lang.Integer, java.util.HashSet<java.lang.Integer>> equivalenceClasses;
  java.util.HashMap<java.lang.Integer, java.lang.Integer> equivalenceReps;
  public permlab.examples.EdelmanGreene$IntEquivalence();
  public void ensureElement(int);
  public void addEquivalence(int, int);
  public int getRep(int);
  public int size();
  public java.lang.String toString();
}
Compiled from "EdelmanGreene.java"
class permlab.examples.EdelmanGreene$Word {
  final byte[] letters;
  int label;
  public permlab.examples.EdelmanGreene$Word(byte[], int);
  public permlab.examples.EdelmanGreene$Word(byte[]);
  public int getLabel();
  public void setLabel(int);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public permlab.examples.EdelmanGreene$Word ARule(int);
  public permlab.examples.EdelmanGreene$Word BRule(int);
  public permlab.examples.EdelmanGreene$Word CRule(int);
  public java.util.ArrayList<permlab.examples.EdelmanGreene$Word> EGNeighbours();
  public boolean hasEGNeighbour();
  public boolean ARuleApplies(int);
  public boolean CRuleApplies(int);
  public java.util.ArrayList<permlab.examples.EdelmanGreene$Word> OtherCoxeterNeighbours();
  public java.lang.String toString();
}
Compiled from "FourWedges.java"
public class permlab.examples.FourWedges {
  public permlab.examples.FourWedges();
  public static void main(java.lang.String[]);
}
Compiled from "GridExamples.java"
public class permlab.examples.GridExamples {
  public permlab.examples.GridExamples();
  public static void main(java.lang.String[]);
}
Compiled from "HowManyToCheck.java"
public class permlab.examples.HowManyToCheck {
  static java.lang.String[][] s;
  public permlab.examples.HowManyToCheck();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "InvolutionSchmerlTrotter.java"
public class permlab.examples.InvolutionSchmerlTrotter {
  public permlab.examples.InvolutionSchmerlTrotter();
  public static void main(java.lang.String[]);
}
Compiled from "KStackState.java"
public class permlab.examples.KStackState {
  public static final int EMPTY;
  int nextOut;
  java.lang.String operationSequence;
  int[] inputAndStack;
  int stackHead;
  int inputHead;
  int[] smallStack;
  int smallStackHead;
  public permlab.examples.KStackState(int);
  public permlab.examples.KStackState(int, int[]);
  public permlab.examples.KStackState mu();
  public permlab.examples.KStackState lambda();
  public permlab.examples.KStackState tau();
  public permlab.examples.KStackState rho();
  public boolean isSorted();
  public boolean finalRuleConfiguration();
  public java.lang.String toString();
  public static void main(java.lang.String[]);
  public void foo();
  public static java.lang.String toPSTricks(java.lang.String);
  public static java.lang.String toPSTricks(java.lang.String, int, int);
}
Compiled from "LCW.java"
public class permlab.examples.LCW {
  public permlab.examples.LCW();
  public static void main(java.lang.String[]);
  public static java.util.HashSet<java.util.ArrayList<java.lang.Integer>> splits(permlib.Permutation, int, java.util.Collection<java.util.ArrayList<java.lang.Integer>>);
  public static java.util.HashSet<java.util.ArrayList<java.lang.Integer>> splits(permlib.Permutation, int, java.util.ArrayList<java.lang.Integer>);
}
Compiled from "LCWTwoPlusOne.java"
public class permlab.examples.LCWTwoPlusOne {
  public permlab.examples.LCWTwoPlusOne();
  public static void main(java.lang.String[]);
}
Compiled from "LCWTwoPlusOne.java"
class permlab.examples.LCWTwoPlusOne$Rectangle implements java.lang.Comparable<permlab.examples.LCWTwoPlusOne$Rectangle> {
  int left;
  int right;
  int bottom;
  int top;
  public permlab.examples.LCWTwoPlusOne$Rectangle(int, int, int, int);
  public int getLeft();
  public int getRight();
  public int getBottom();
  public int getTop();
  public void shiftRight();
  public void shiftUp();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int compareTo(permlab.examples.LCWTwoPlusOne$Rectangle);
  public int compareTo(java.lang.Object);
  static permlab.examples.LCWTwoPlusOne$Rectangle access$000(permlab.examples.LCWTwoPlusOne$Rectangle);
  static permlab.examples.LCWTwoPlusOne$Rectangle access$100(permlab.examples.LCWTwoPlusOne$Rectangle, permlab.examples.LCWTwoPlusOne$Rectangle);
  static boolean access$200(permlab.examples.LCWTwoPlusOne$Rectangle, permlab.examples.LCWTwoPlusOne$Rectangle);
}
Compiled from "LCWTwoPlusOne.java"
class permlab.examples.LCWTwoPlusOne$RectangularizedPermutation {
  permlib.Permutation p;
  permlab.examples.LCWTwoPlusOne$Rectangle a;
  permlab.examples.LCWTwoPlusOne$Rectangle b;
  public int hashCode();
  public boolean equals(java.lang.Object);
  public permlab.examples.LCWTwoPlusOne$RectangularizedPermutation(permlib.Permutation, permlab.examples.LCWTwoPlusOne$Rectangle, permlab.examples.LCWTwoPlusOne$Rectangle);
  public permlib.Permutation getP();
  public java.util.HashSet<permlab.examples.LCWTwoPlusOne$RectangularizedPermutation> children(int);
  public java.util.HashSet<permlab.examples.LCWTwoPlusOne$RectangularizedPermutation> children();
  public java.lang.String toString();
}
Compiled from "LadderPlusIdentity.java"
public class permlab.examples.LadderPlusIdentity {
  public permlab.examples.LadderPlusIdentity();
  public static void main(java.lang.String[]);
}
Compiled from "LascouxSchutzenberger.java"
public class permlab.examples.LascouxSchutzenberger {
  static permlib.property.HereditaryProperty A2143;
  static java.lang.String[][] s;
  public permlab.examples.LascouxSchutzenberger();
  public static void main(java.lang.String[]);
  public static permlab.examples.LascouxSchutzenberger$RS rs(permlib.Permutation);
  public static java.util.ArrayDeque<permlib.Permutation> children(permlib.Permutation);
  public static int vex(permlib.Permutation);
  public static boolean vexBound(permlib.Permutation, int);
  public static void basisTo(int);
  static {};
}
Compiled from "LascouxSchutzenberger.java"
final class permlab.examples.LascouxSchutzenberger$1 implements permlib.property.HereditaryProperty {
  permlab.examples.LascouxSchutzenberger$1();
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "LascouxSchutzenberger.java"
class permlab.examples.LascouxSchutzenberger$RS {
  int r;
  int s;
  permlab.examples.LascouxSchutzenberger$RS();
}
Compiled from "LayeredDominates.java"
public class permlab.examples.LayeredDominates {
  static permlib.classes.PermutationClass layered;
  static java.util.HashMap<permlib.Permutation, permlib.property.HereditaryProperty> avoidance;
  public permlab.examples.LayeredDominates();
  public static void main(java.lang.String[]);
  public static void basicTest();
  static {};
}
Compiled from "MaxAutoClass.java"
public class permlab.examples.MaxAutoClass {
  public permlab.examples.MaxAutoClass();
  public static void main(java.lang.String[]);
  public static void doAll();
  public static java.lang.String report(java.util.HashMap<permlib.Permutation, permlib.Permutation>);
  public static void doSpecificGroup();
}
Compiled from "MeagreExamples.java"
public class permlab.examples.MeagreExamples {
  public permlab.examples.MeagreExamples();
  public static void main(java.lang.String[]);
}
Compiled from "MeagreExamples.java"
class permlab.examples.MeagreExamples$DetermineInvolvements implements permlib.processor.PermProcessor {
  java.util.HashSet<permlib.property.Involves> badTests;
  permlab.examples.MeagreExamples$DetermineInvolvements(java.util.HashSet<permlib.property.Involves>);
  public void process(permlib.Permutation);
  public int numberRemainingBad();
  public void reset();
  public java.lang.String report();
}
Compiled from "MeshInferenceExample.java"
public class permlab.examples.MeshInferenceExample {
  public permlab.examples.MeshInferenceExample();
  public static void main(java.lang.String[]);
}
Compiled from "Misc.java"
public class permlab.examples.Misc {
  public permlab.examples.Misc();
  public static void main(java.lang.String[]);
}
Compiled from "Moths.java"
public class permlab.examples.Moths {
  static final permlib.classes.InvolutionPermClass invs;
  static final permlib.processor.PermProcessor findExtensions;
  public permlab.examples.Moths();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "Moths.java"
final class permlab.examples.Moths$1 implements permlib.processor.PermProcessor {
  permlab.examples.Moths$1();
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
  static java.util.List access$000(permlab.examples.Moths$1, permlib.Permutation);
  static boolean access$100(permlab.examples.Moths$1, permlib.Permutation, int, permlib.property.PermProperty);
}
Compiled from "Moths.java"
class permlab.examples.Moths$1$1 implements permlib.processor.PermProcessor {
  final permlib.Permutation val$p;
  final permlab.examples.Moths$1 this$0;
  permlab.examples.Moths$1$1(permlab.examples.Moths$1, permlib.Permutation);
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
}
Compiled from "MultiplicityFree.java"
public class permlab.examples.MultiplicityFree {
  static final int MAX_LENGTH;
  static final int[] max3s;
  static final int[] largeValues;
  static final int[] smallValues;
  static int[] stack;
  static int stackTop;
  static final java.util.ArrayDeque<int[]> aq;
  static final java.util.ArrayDeque<int[]> arrayChildren;
  static int largeStackTop;
  static int smallStackTop;
  public permlab.examples.MultiplicityFree();
  public static void main(java.lang.String[]);
  public static boolean avoids2143(int[]);
  public static int vexillarity(int[]);
  static boolean isMultiplicityFree(int[]);
  static void createStack(int);
  static void push(int, int[]);
  static int pop(int[]);
  public static int inversions(int[]);
  public static java.util.ArrayDeque<int[]> children(int[]);
  public static permlab.examples.MultiplicityFree$RS rs(int[]);
  public static int[] decode(int, int);
  static {};
}
Compiled from "MultiplicityFree.java"
class permlab.examples.MultiplicityFree$1 {
}
Compiled from "MultiplicityFree.java"
class permlab.examples.MultiplicityFree$AW {
  int[] elements;
  permlab.examples.MultiplicityFree$AW(int[]);
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "MultiplicityFree.java"
class permlab.examples.MultiplicityFree$RS {
  int r;
  int s;
  permlab.examples.MultiplicityFree$RS();
}
Compiled from "MultiplicityFree.java"
class permlab.examples.MultiplicityFree$Tableau {
  java.util.ArrayList<permlab.examples.MultiplicityFree$Tableau$Row> rows;
  permlab.examples.MultiplicityFree$Tableau(int[]);
  public int[] shape();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "MultiplicityFree.java"
class permlab.examples.MultiplicityFree$Tableau$Row {
  int[] row;
  final permlab.examples.MultiplicityFree$Tableau this$0;
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  permlab.examples.MultiplicityFree$Tableau$Row(permlab.examples.MultiplicityFree$Tableau, int, permlab.examples.MultiplicityFree$1);
  static int access$100(permlab.examples.MultiplicityFree$Tableau$Row, int);
  permlab.examples.MultiplicityFree$Tableau$Row(permlab.examples.MultiplicityFree$Tableau, int, int, permlab.examples.MultiplicityFree$1);
  static int access$300(permlab.examples.MultiplicityFree$Tableau$Row);
}
Compiled from "PartialAutomorphism.java"
public class permlab.examples.PartialAutomorphism {
  java.util.HashMap<permlib.Permutation, permlib.Permutation> iso;
  java.util.ArrayList<permlib.Permutation> basis;
  int lengthKnown;
  public permlab.examples.PartialAutomorphism(java.util.HashMap<permlib.Permutation, permlib.Permutation>);
  public permlab.examples.PartialAutomorphism();
  public void addPair(permlib.Permutation, permlib.Permutation);
  public void setLengthKnown(int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.HashMap<permlib.Permutation, permlib.Permutation> getIsomorphism();
  public void extendToLength(int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "PartialAutomorphismSpecification.java"
public class permlab.examples.PartialAutomorphismSpecification {
  java.util.HashMap<permlib.Permutation, permlib.Permutation> specification;
  boolean preservesMonotone;
  boolean preservesSimples;
  permlib.Permutation[] nonmonotoneTripleImages;
  static final permlib.Permutation[] nm3;
  public java.util.HashMap<permlib.Permutation, permlib.Permutation> getSpecification();
  public permlab.examples.PartialAutomorphismSpecification(boolean, boolean, permlib.Permutation[]);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public static java.util.ArrayList<permlab.examples.PartialAutomorphismSpecification> getAllSpecifications();
  public static java.util.ArrayList<permlab.examples.PartialAutomorphismSpecification> getRepSpecifications();
  public java.lang.String toString();
  public permlab.examples.PartialAutomorphismSpecification applySymmetry(permlib.Symmetry);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "PartialIsomorphism.java"
public class permlab.examples.PartialIsomorphism {
  java.util.HashMap<permlib.Permutation, permlib.Permutation> iso;
  java.util.HashSet<permlib.Permutation> basis;
  int lengthKnown;
  public permlab.examples.PartialIsomorphism(java.util.HashMap<permlib.Permutation, permlib.Permutation>);
  public permlab.examples.PartialIsomorphism();
  public void addPair(permlib.Permutation, permlib.Permutation);
  public void setLengthKnown(int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.HashMap<permlib.Permutation, permlib.Permutation> getIsomorphism();
  public void extendToLength(int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "PartialIsomorphismSpecification.java"
public class permlab.examples.PartialIsomorphismSpecification {
  java.util.HashMap<permlib.Permutation, permlib.Permutation> specification;
  boolean preservesMonotone;
  boolean preservesSimples;
  permlib.Permutation[] nonmonotoneTripleImages;
  static final permlib.Permutation[] nm3;
  public java.util.HashMap<permlib.Permutation, permlib.Permutation> getSpecification();
  public permlab.examples.PartialIsomorphismSpecification(boolean, boolean, permlib.Permutation[]);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public static java.util.ArrayList<permlab.examples.PartialIsomorphismSpecification> getAllSpecifications();
  public static java.util.ArrayList<permlab.examples.PartialIsomorphismSpecification> getRepSpecifications();
  public java.lang.String toString();
  public permlab.examples.PartialIsomorphismSpecification applySymmetryPair(permlib.Symmetry, permlib.Symmetry);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "PeculiarBijections.java"
public class permlab.examples.PeculiarBijections {
  static permlib.property.PermProperty av231;
  static permlib.Permutation one;
  public permlab.examples.PeculiarBijections();
  public static void main(java.lang.String[]);
  public static permlib.Permutation P(permlib.Permutation);
  static {};
}
Compiled from "PolynomialTest.java"
public class permlab.examples.PolynomialTest {
  public permlab.examples.PolynomialTest();
  public static void main(java.lang.String[]);
}
Compiled from "PopDequeBasis.java"
public class permlab.examples.PopDequeBasis {
  public permlab.examples.PopDequeBasis();
  public static void main(java.lang.String[]);
}
Compiled from "PowerSeries.java"
public class permlab.examples.PowerSeries {
  static int LENGTH;
  java.util.ArrayList<java.math.BigInteger> c;
  public permlab.examples.PowerSeries();
  public static void setLength(int);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.math.BigInteger at(int);
  public static permlab.examples.PowerSeries add(permlab.examples.PowerSeries, permlab.examples.PowerSeries);
  public static permlab.examples.PowerSeries subtract(permlab.examples.PowerSeries, permlab.examples.PowerSeries);
  public static permlab.examples.PowerSeries multiply(permlab.examples.PowerSeries, permlab.examples.PowerSeries);
  public static permlab.examples.PowerSeries multiply(int, permlab.examples.PowerSeries);
  void computeTo(int);
  public java.lang.String toString();
  static {};
}
Compiled from "PowerSeries.java"
final class permlab.examples.PowerSeries$1 extends permlab.examples.PowerSeries {
  final permlab.examples.PowerSeries val$a;
  final permlab.examples.PowerSeries val$b;
  permlab.examples.PowerSeries$1(permlab.examples.PowerSeries, permlab.examples.PowerSeries);
  void computeTo(int);
}
Compiled from "PowerSeries.java"
final class permlab.examples.PowerSeries$2 extends permlab.examples.PowerSeries {
  final permlab.examples.PowerSeries val$a;
  final permlab.examples.PowerSeries val$b;
  permlab.examples.PowerSeries$2(permlab.examples.PowerSeries, permlab.examples.PowerSeries);
  void computeTo(int);
}
Compiled from "PowerSeries.java"
final class permlab.examples.PowerSeries$3 extends permlab.examples.PowerSeries {
  java.math.BigInteger bn;
  final int val$n;
  final permlab.examples.PowerSeries val$a;
  permlab.examples.PowerSeries$3(int, permlab.examples.PowerSeries);
  void computeTo(int);
}
Compiled from "PowerSeriesTest.java"
public class permlab.examples.PowerSeriesTest {
  public permlab.examples.PowerSeriesTest();
  public static void main(java.lang.String[]);
}
Compiled from "PowerSeriesTest.java"
final class permlab.examples.PowerSeriesTest$1 extends permlab.examples.PowerSeries {
  permlab.examples.PowerSeriesTest$1();
  void computeTo(int);
}
Compiled from "QueueStackState.java"
public class permlab.examples.QueueStackState {
  java.util.ArrayDeque<java.lang.Integer> q;
  java.util.ArrayDeque<java.lang.Integer> s;
  int nextOut;
  public permlab.examples.QueueStackState();
  public permlab.examples.QueueStackState(permlab.examples.QueueStackState);
  public permlab.examples.QueueStackState clone();
  public boolean sortable(int[]);
  public boolean sortable(permlib.Permutation);
  public boolean sortable(java.util.ArrayDeque<java.lang.Integer>);
  public static void main(java.lang.String[]);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "QueueStackState.java"
final class permlab.examples.QueueStackState$1 implements permlib.processor.PermProcessor {
  final java.util.HashSet val$basis;
  permlab.examples.QueueStackState$1(java.util.HashSet);
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
}
Compiled from "RandomAv321.java"
public class permlab.examples.RandomAv321 {
  public permlab.examples.RandomAv321();
  public static void main(java.lang.String[]);
  public static void doX();
  public static void doC();
}
Compiled from "SimpleNs.java"
public class permlab.examples.SimpleNs {
  public permlab.examples.SimpleNs();
  public static void main(java.lang.String[]);
}
Compiled from "TableauState.java"
public class permlab.examples.TableauState {
  static final int DONE;
  static final int NO_OP;
  static final int MAX_LENGTH;
  static final int[] max3s;
  static final int[] largeValues;
  static final int[] smallValues;
  static final java.util.ArrayDeque<int[]> aq;
  static final java.util.ArrayDeque<int[]> arrayChildren;
  static int largeStackTop;
  static int smallStackTop;
  public permlab.examples.TableauState(int[], int[]);
  public boolean tryOp(int);
  public static void main(java.lang.String[]);
  public java.lang.String toString();
  static int[] EGTableauShape(int[]);
  public static java.util.ArrayDeque<int[]> children(int[]);
  public static permlab.examples.TableauState$RS rs(int[]);
  public static boolean avoids2143(int[]);
  public static int[] decode(long, int);
  public static void checkExtensions(int[], int);
  public static void report(java.lang.String);
  public static boolean isMultiplicityFree(int[]);
  static {};
}
Compiled from "TableauState.java"
class permlab.examples.TableauState$RS {
  int r;
  int s;
  permlab.examples.TableauState$RS();
}
Compiled from "Test.java"
public class permlab.examples.Test {
  public permlab.examples.Test();
  public static void main(java.lang.String[]);
}
Compiled from "ThreadExperiments.java"
public class permlab.examples.ThreadExperiments {
  public permlab.examples.ThreadExperiments();
  public static void main(java.lang.String[]);
}
Compiled from "ThreadExperiments.java"
class permlab.examples.ThreadExperiments$ClassEnumerator implements java.lang.Runnable {
  permlib.classes.InvolutionPermClass c;
  public permlab.examples.ThreadExperiments$ClassEnumerator(permlib.classes.InvolutionPermClass);
  public void run();
}
Compiled from "TwoBin.java"
public class permlab.examples.TwoBin implements java.lang.Comparable<permlab.examples.TwoBin> {
  int n;
  boolean[][] a;
  boolean[][] b;
  static java.util.HashMap<permlab.examples.TwoBin, permlab.examples.TwoBin> isoReps;
  static permlab.examples.TwoBin[] scratch;
  public permlab.examples.TwoBin(int);
  public void setA(boolean[][]);
  public void setB(boolean[][]);
  public permlab.examples.TwoBin sub(int[]);
  public boolean avoids(java.util.Collection<permlab.examples.TwoBin>, int);
  public boolean iso(permlab.examples.TwoBin);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(permlab.examples.TwoBin);
  public permlab.examples.TwoBin isoRep();
  public java.util.HashSet<permlab.examples.TwoBin> extensions();
  public java.util.Collection<permlab.examples.TwoBin> isomorphs();
  public java.lang.String toString();
  public static void main(java.lang.String[]);
  public int compareTo(java.lang.Object);
  static {};
}
Compiled from "TwoStackState.java"
public class permlab.examples.TwoStackState {
  public static final int EMPTY;
  int nextOut;
  java.lang.String operationSequence;
  int[] inputAndStack;
  int stackHead;
  int inputHead;
  int smallStackContents;
  public permlab.examples.TwoStackState();
  public permlab.examples.TwoStackState(int[]);
  public permlab.examples.TwoStackState mu();
  public permlab.examples.TwoStackState lambda();
  public permlab.examples.TwoStackState tau();
  public permlab.examples.TwoStackState rho();
  public boolean isSorted();
  public java.lang.String toString();
  public static void main(java.lang.String[]);
}
Compiled from "VInceSumIndecomposable.java"
public class permlab.examples.VInceSumIndecomposable {
  static permlib.property.PermProperty si;
  public permlab.examples.VInceSumIndecomposable();
  public static void main(java.lang.String[]);
  public static int[] siSubSpec(permlib.Permutation);
  static permlib.Permutation[] sumIndecomposables(int);
  public static boolean badArray(int[]);
  public static boolean badPerm(permlib.Permutation);
  public static int[] siSpectrum(java.util.Collection<permlib.Permutation>, int);
  public static int[] siSpectrum(java.util.Collection<permlib.Permutation>);
  public boolean allowed(permlib.Permutation, java.util.Collection<permlib.Permutation>);
  static {};
}
Compiled from "Vex.java"
public class permlab.examples.Vex {
  static int BOUND;
  static final int MAX_LENGTH;
  static final int[] max3s;
  static final int[] largeValues;
  static final int[] smallValues;
  static final java.util.ArrayDeque<int[]> aq;
  static final java.util.ArrayDeque<int[]> arrayChildren;
  static int largeStackTop;
  static int smallStackTop;
  public permlab.examples.Vex();
  public static boolean avoids2143(int[]);
  public static boolean vexBounded(int[]);
  public static java.util.ArrayDeque<int[]> children(int[]);
  public static permlab.examples.Vex$RS rs(int[]);
  public static void checkExtensions(int[], int);
  public static int[] decode(int, int);
  public static void main(java.lang.String[]);
  public static void report(java.lang.String);
  static {};
}
Compiled from "Vex.java"
class permlab.examples.Vex$RS {
  int r;
  int s;
  permlab.examples.Vex$RS();
}
Compiled from "Vexillary.java"
public class permlab.examples.Vexillary {
  public permlab.examples.Vexillary();
  public static void main(java.lang.String[]);
}
Compiled from "INT_InvolutionPermClass.java"
public class permlab.int_classes.INT_InvolutionPermClass extends permlib.classes.InvolutionPermClass {
  public permlab.int_classes.INT_InvolutionPermClass(permlib.classes.InvolutionPermClass, javax.swing.SwingWorker);
  public void processClass(int, int, permlib.processor.PermProcessor);
}
Compiled from "INT_PermutationClass.java"
public class permlab.int_classes.INT_PermutationClass extends permlib.classes.PermutationClass {
  public permlab.int_classes.INT_PermutationClass(permlib.classes.PermClassInterface, javax.swing.SwingWorker);
  public void processPerms(int, permlib.processor.PermProcessor);
}
Compiled from "INT_SimplePermClass.java"
public class permlab.int_classes.INT_SimplePermClass extends permlib.classes.SimplePermClass {
  javax.swing.SwingWorker parentTask;
  permlib.classes.SimplePermClass parentClass;
  public permlab.int_classes.INT_SimplePermClass(permlib.classes.SimplePermClass, javax.swing.SwingWorker);
  public void DFSProcessSimples(permlib.classes.SimplePermClass$DecoratedSimplePerm, int, int, permlib.processor.PermProcessor);
  public void processPerms(int, permlib.processor.PermProcessor);
}
Compiled from "INT_UniversalPermClass.java"
public class permlab.int_classes.INT_UniversalPermClass extends permlib.classes.UniversalPermClass {
  public permlab.int_classes.INT_UniversalPermClass(permlib.classes.UniversalPermClass, javax.swing.SwingWorker);
  public void processClass(int, int, permlib.processor.PermProcessor);
}
Compiled from "AnimatedPermFrame.java"
public class permlab.ui.AnimatedPermFrame extends javax.swing.JFrame {
  public permlab.ui.AnimatedPermFrame(permlab.ui.AnimationTask);
  public permlab.ui.AnimatedPermFrame();
  public permlab.ui.AnimatedPermFrame(java.util.Collection<permlib.Permutation>);
  public static void main(java.lang.String[]);
  public void exportPermCollectionAsGIF(permlib.Permutation[], int, int);
  void addPerms(java.util.Collection<permlib.Permutation>, permlib.property.PermProperty);
  void addPerms(java.util.Collection<permlib.Permutation>);
  public void step();
  static void access$100(permlab.ui.AnimatedPermFrame, java.awt.event.WindowEvent);
  static void access$200(permlab.ui.AnimatedPermFrame, java.awt.event.MouseEvent);
  static void access$300(permlab.ui.AnimatedPermFrame, java.awt.event.ActionEvent);
  static void access$400(permlab.ui.AnimatedPermFrame, java.awt.event.ActionEvent);
  static void access$500(permlab.ui.AnimatedPermFrame, java.awt.event.ActionEvent);
  static void access$600(permlab.ui.AnimatedPermFrame, java.awt.event.ActionEvent);
  static void access$700(permlab.ui.AnimatedPermFrame, javax.swing.event.ChangeEvent);
  static void access$800(permlab.ui.AnimatedPermFrame, java.awt.event.MouseEvent);
  static void access$900(permlab.ui.AnimatedPermFrame, java.awt.event.ActionEvent);
  static void access$1000(permlab.ui.AnimatedPermFrame, java.awt.event.ActionEvent);
  static int access$1100(permlab.ui.AnimatedPermFrame);
  static void access$1200(permlab.ui.AnimatedPermFrame);
  static permlib.Permutation[] access$1300(permlab.ui.AnimatedPermFrame);
  static javax.swing.JPanel access$1400(permlab.ui.AnimatedPermFrame);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$1 extends java.awt.event.WindowAdapter {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$1(permlab.ui.AnimatedPermFrame);
  public void windowClosed(java.awt.event.WindowEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$10 implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$10(permlab.ui.AnimatedPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AnimatedPermFrame.java"
final class permlab.ui.AnimatedPermFrame$11 implements java.lang.Runnable {
  permlab.ui.AnimatedPermFrame$11();
  public void run();
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$12 implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$12(permlab.ui.AnimatedPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$13 implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$13(permlab.ui.AnimatedPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$14 implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$14(permlab.ui.AnimatedPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$2 extends java.awt.event.MouseAdapter {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$2(permlab.ui.AnimatedPermFrame);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$3 implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$3(permlab.ui.AnimatedPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$4 implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$4(permlab.ui.AnimatedPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$5 implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$5(permlab.ui.AnimatedPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$6 implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$6(permlab.ui.AnimatedPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$7 implements javax.swing.event.ChangeListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$7(permlab.ui.AnimatedPermFrame);
  public void stateChanged(javax.swing.event.ChangeEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$8 extends java.awt.event.MouseAdapter {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$8(permlab.ui.AnimatedPermFrame);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$9 implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  permlab.ui.AnimatedPermFrame$9(permlab.ui.AnimatedPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$DisplayPanel extends javax.swing.JPanel {
  final permlab.ui.AnimatedPermFrame this$0;
  public permlab.ui.AnimatedPermFrame$DisplayPanel(permlab.ui.AnimatedPermFrame);
  public void paint(java.awt.Graphics);
}
Compiled from "AnimatedPermFrame.java"
class permlab.ui.AnimatedPermFrame$TimeListener implements java.awt.event.ActionListener {
  final permlab.ui.AnimatedPermFrame this$0;
  public void actionPerformed(java.awt.event.ActionEvent);
  permlab.ui.AnimatedPermFrame$TimeListener(permlab.ui.AnimatedPermFrame, permlab.ui.AnimatedPermFrame$1);
}
Compiled from "AnimationTask.java"
public class permlab.ui.AnimationTask extends javax.swing.SwingWorker<java.lang.Void, java.util.Collection<permlib.Permutation>> {
  permlab.ui.ClassEnumerationFrame parent;
  int[] lengths;
  permlib.classes.PermClassInterface theClass;
  permlib.property.PermProperty additionalProperty;
  permlab.ui.AnimatedPermFrame frame;
  public permlab.ui.AnimationTask(permlib.classes.PermClassInterface, int[]);
  public permlab.ui.AnimationTask(permlib.classes.PermClassInterface, int[], permlib.property.PermProperty);
  protected java.lang.Void doInBackground() throws java.lang.Exception;
  protected void process(java.util.List<java.util.Collection<permlib.Permutation>>);
  protected java.lang.Object doInBackground() throws java.lang.Exception;
}
Compiled from "ClassEnumerationFrame.java"
public class permlab.ui.ClassEnumerationFrame extends javax.swing.JFrame {
  public permlab.ui.ClassEnumerationFrame();
  public static void main(java.lang.String[]);
  static void access$000(permlab.ui.ClassEnumerationFrame, java.awt.event.WindowEvent);
  static void access$100(permlab.ui.ClassEnumerationFrame, java.awt.event.ActionEvent);
  static void access$200(permlab.ui.ClassEnumerationFrame, java.awt.event.ActionEvent);
  static void access$300(permlab.ui.ClassEnumerationFrame, java.awt.event.ActionEvent);
}
Compiled from "ClassEnumerationFrame.java"
class permlab.ui.ClassEnumerationFrame$1 extends java.awt.event.WindowAdapter {
  final permlab.ui.ClassEnumerationFrame this$0;
  permlab.ui.ClassEnumerationFrame$1(permlab.ui.ClassEnumerationFrame);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "ClassEnumerationFrame.java"
class permlab.ui.ClassEnumerationFrame$2 implements java.awt.event.ActionListener {
  final permlab.ui.ClassEnumerationFrame this$0;
  permlab.ui.ClassEnumerationFrame$2(permlab.ui.ClassEnumerationFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ClassEnumerationFrame.java"
class permlab.ui.ClassEnumerationFrame$3 implements java.awt.event.ActionListener {
  final permlab.ui.ClassEnumerationFrame this$0;
  permlab.ui.ClassEnumerationFrame$3(permlab.ui.ClassEnumerationFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ClassEnumerationFrame.java"
class permlab.ui.ClassEnumerationFrame$4 implements java.awt.event.ActionListener {
  final permlab.ui.ClassEnumerationFrame this$0;
  permlab.ui.ClassEnumerationFrame$4(permlab.ui.ClassEnumerationFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ClassEnumerationFrame.java"
final class permlab.ui.ClassEnumerationFrame$5 implements java.lang.Runnable {
  permlab.ui.ClassEnumerationFrame$5();
  public void run();
}
Compiled from "ClassEnumerationFrameTask.java"
public class permlab.ui.ClassEnumerationFrameTask extends javax.swing.SwingWorker<java.lang.Void, long[]> {
  static final int MAX;
  public permlab.ui.ClassEnumerationFrameTask(int[], boolean, boolean, java.lang.String, javax.swing.JFrame);
  public permlab.ui.ClassEnumerationFrameTask(int);
  public permlab.ui.ClassEnumerationFrameTask(int[]);
  public permlab.ui.ClassEnumerationFrameTask(int[], permlab.ui.ClassEnumerationFrame);
  public permlab.ui.ClassEnumerationFrameTask(int, java.lang.String);
  public permlab.ui.ClassEnumerationFrameTask(int[], java.lang.String);
  public permlab.ui.ClassEnumerationFrameTask(int, java.lang.String, permlab.ui.ClassEnumerationFrame);
  public permlab.ui.ClassEnumerationFrameTask(int[], java.lang.String, permlab.ui.ClassEnumerationFrame);
  public java.lang.Void doInBackground();
  protected void process(java.util.List<long[]>);
  public java.lang.Object doInBackground() throws java.lang.Exception;
}
Compiled from "ClassEnumerationFrameTask.java"
class permlab.ui.ClassEnumerationFrameTask$CalcRun implements java.lang.Runnable {
  final permlab.ui.ClassEnumerationFrameTask this$0;
  public permlab.ui.ClassEnumerationFrameTask$CalcRun(permlab.ui.ClassEnumerationFrameTask, permlib.classes.PermClassInterface, int, permlib.processor.PermCounter, long[]);
  public boolean isCompleted();
  public void run();
}
Compiled from "EnumerationTableModel.java"
public final class permlab.ui.EnumerationTableModel extends javax.swing.table.AbstractTableModel {
  int[] lengths;
  java.lang.Long[][] data;
  java.lang.String[] titles;
  java.lang.String[] columnNames;
  public permlab.ui.EnumerationTableModel(int[], java.lang.String[]);
  public java.lang.String getColumnName(int);
  public int getRowCount();
  public int getColumnCount();
  public java.lang.Object getValueAt(int, int);
  public long getRowLength(int);
  public boolean isCellEditable(int, int);
  public java.lang.Class getColumnClass(int);
  public void setValueAt(java.lang.Object, int, int);
}
Compiled from "ExportDialog.java"
public class permlab.ui.ExportDialog extends javax.swing.JDialog {
  public static boolean saveAsFile;
  public permlab.ui.ExportDialog(java.awt.Frame, boolean);
  public permlab.utilities.ExportInterface getExportInterface();
  public static void main(java.lang.String[]);
  static void access$000(permlab.ui.ExportDialog, java.awt.event.ActionEvent);
  static void access$100(permlab.ui.ExportDialog, java.awt.event.ActionEvent);
  static void access$200(permlab.ui.ExportDialog, java.awt.event.ActionEvent);
  static void access$300(permlab.ui.ExportDialog, java.awt.event.ActionEvent);
  static void access$400(permlab.ui.ExportDialog, java.awt.event.ActionEvent);
  static {};
}
Compiled from "ExportDialog.java"
class permlab.ui.ExportDialog$1 implements java.awt.event.ActionListener {
  final permlab.ui.ExportDialog this$0;
  permlab.ui.ExportDialog$1(permlab.ui.ExportDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ExportDialog.java"
class permlab.ui.ExportDialog$2 implements java.awt.event.ActionListener {
  final permlab.ui.ExportDialog this$0;
  permlab.ui.ExportDialog$2(permlab.ui.ExportDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ExportDialog.java"
class permlab.ui.ExportDialog$3 implements java.awt.event.ActionListener {
  final permlab.ui.ExportDialog this$0;
  permlab.ui.ExportDialog$3(permlab.ui.ExportDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ExportDialog.java"
class permlab.ui.ExportDialog$4 implements java.awt.event.ActionListener {
  final permlab.ui.ExportDialog this$0;
  permlab.ui.ExportDialog$4(permlab.ui.ExportDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ExportDialog.java"
class permlab.ui.ExportDialog$5 implements java.awt.event.ActionListener {
  final permlab.ui.ExportDialog this$0;
  permlab.ui.ExportDialog$5(permlab.ui.ExportDialog);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "ExportDialog.java"
final class permlab.ui.ExportDialog$6 implements java.lang.Runnable {
  permlab.ui.ExportDialog$6();
  public void run();
}
Compiled from "ExportDialog.java"
class permlab.ui.ExportDialog$6$1 extends java.awt.event.WindowAdapter {
  final permlab.ui.ExportDialog$6 this$0;
  permlab.ui.ExportDialog$6$1(permlab.ui.ExportDialog$6);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "FrameDisplayer.java"
public class permlab.ui.FrameDisplayer implements permlib.processor.PermProcessor {
  public permlab.ui.FrameDisplayer(permlab.ui.TextFrame);
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
}
Compiled from "HelpDispatcher.java"
public class permlab.ui.HelpDispatcher implements java.awt.KeyEventDispatcher {
  public permlab.ui.HelpDispatcher(java.lang.String, java.lang.String, java.awt.Component);
  public permlab.ui.HelpFrame getHelpFrame();
  public boolean dispatchKeyEvent(java.awt.event.KeyEvent);
}
Compiled from "HelpFrame.java"
public class permlab.ui.HelpFrame extends javax.swing.JFrame {
  public permlab.ui.HelpFrame();
  public static void main(java.lang.String[]);
  void setPage(java.net.URL) throws java.io.IOException;
  void setTitleLabel(java.lang.String);
}
Compiled from "HelpFrame.java"
final class permlab.ui.HelpFrame$1 implements java.lang.Runnable {
  permlab.ui.HelpFrame$1();
  public void run();
}
Compiled from "ListTask.java"
public class permlab.ui.ListTask extends javax.swing.SwingWorker<java.lang.Void, permlib.Permutation> {
  int[] lengths;
  permlib.classes.PermClassInterface theClass;
  permlib.processor.PermCollector collector;
  permlab.ui.TextFrame textFrame;
  java.lang.String title;
  permlib.property.PermProperty additionalProperty;
  public permlab.ui.ListTask(permlib.classes.PermClassInterface, int[], permlib.property.PermProperty);
  protected java.lang.Void doInBackground() throws java.lang.Exception;
  protected void process(java.util.List<permlib.Permutation>);
  protected java.lang.Object doInBackground() throws java.lang.Exception;
}
Compiled from "PermLab.java"
public class permlab.ui.PermLab extends javax.swing.JFrame {
  public static final int MASK;
  public permlab.ui.PermLab();
  public static void main(java.lang.String[]);
  static void access$000(permlab.ui.PermLab, java.awt.event.ActionEvent);
  static void access$100(permlab.ui.PermLab, java.awt.event.ActionEvent);
  static {};
}
Compiled from "PermLab.java"
class permlab.ui.PermLab$1 implements java.awt.event.ActionListener {
  final permlab.ui.PermLab this$0;
  permlab.ui.PermLab$1(permlab.ui.PermLab);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PermLab.java"
class permlab.ui.PermLab$2 implements java.awt.event.ActionListener {
  final permlab.ui.PermLab this$0;
  permlab.ui.PermLab$2(permlab.ui.PermLab);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PermLab.java"
final class permlab.ui.PermLab$3 implements java.lang.Runnable {
  permlab.ui.PermLab$3();
  public void run();
}
Compiled from "StaticPermFrame.java"
public class permlab.ui.StaticPermFrame extends javax.swing.JFrame {
  public permlab.ui.StaticPermFrame();
  public static void main(java.lang.String[]);
  public boolean requiresSimple();
  static void access$000(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$100(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$200(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$300(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$400(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$500(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$600(permlab.ui.StaticPermFrame, java.awt.event.MouseEvent);
  static void access$700(permlab.ui.StaticPermFrame, java.awt.event.MouseEvent);
  static void access$800(permlab.ui.StaticPermFrame, java.awt.event.MouseEvent);
  static void access$900(permlab.ui.StaticPermFrame);
  static void access$1000(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$1100(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$1200(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$1300(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$1400(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$1500(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static void access$1600(permlab.ui.StaticPermFrame, java.awt.event.ActionEvent);
  static permlib.utilities.RestrictedPermutation access$2100(permlab.ui.StaticPermFrame);
  static javax.swing.JCheckBox access$2200(permlab.ui.StaticPermFrame);
  static java.util.ArrayList access$2300(permlab.ui.StaticPermFrame);
  static javax.swing.JPanel access$2400(permlab.ui.StaticPermFrame);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$1 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$1(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$10 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$10(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$11 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$11(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$12 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$12(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$13 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$13(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$14 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$14(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$15 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$15(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$16 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$16(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
final class permlab.ui.StaticPermFrame$17 implements java.lang.Runnable {
  permlab.ui.StaticPermFrame$17();
  public void run();
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$2 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$2(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$3 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$3(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$4 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$4(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$5 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$5(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$6 implements java.awt.event.ActionListener {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$6(permlab.ui.StaticPermFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$7 extends java.awt.event.MouseAdapter {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$7(permlab.ui.StaticPermFrame);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$8 extends java.awt.event.MouseMotionAdapter {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$8(permlab.ui.StaticPermFrame);
  public void mouseMoved(java.awt.event.MouseEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$9 extends java.awt.event.KeyAdapter {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$9(permlab.ui.StaticPermFrame);
  public void keyReleased(java.awt.event.KeyEvent);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$DisplayElement {
  final permlab.ui.StaticPermFrame this$0;
  permlab.ui.StaticPermFrame$DisplayElement(permlab.ui.StaticPermFrame, int, int);
  permlab.ui.StaticPermFrame$DisplayElement(permlab.ui.StaticPermFrame);
  permlab.ui.StaticPermFrame$DisplayElement involutionMate();
  static boolean access$1700(permlab.ui.StaticPermFrame$DisplayElement);
  static boolean access$1800(permlab.ui.StaticPermFrame$DisplayElement);
  static int access$1900(permlab.ui.StaticPermFrame$DisplayElement);
  static int access$2000(permlab.ui.StaticPermFrame$DisplayElement);
}
Compiled from "StaticPermFrame.java"
class permlab.ui.StaticPermFrame$DisplayPanel extends javax.swing.JPanel {
  final permlab.ui.StaticPermFrame this$0;
  public permlab.ui.StaticPermFrame$DisplayPanel(permlab.ui.StaticPermFrame);
  public void paint(java.awt.Graphics);
}
Compiled from "TableFrame.java"
public class permlab.ui.TableFrame extends javax.swing.JFrame {
  public permlab.ui.TableFrame(java.lang.String, int[], java.util.ArrayList<permlib.property.PermProperty>, permlab.ui.ClassEnumerationFrameTask);
  public permlab.ui.TableFrame(java.lang.String, int[], java.util.ArrayList<permlib.property.PermProperty>);
  public permlab.ui.TableFrame(permlib.classes.PermClassInterface, java.lang.String, int[], java.util.ArrayList<permlib.property.PermProperty>, permlab.ui.ClassEnumerationFrameTask);
  public javax.swing.table.TableModel getModel();
  public void doAnimationFromTable(permlib.classes.PermClassInterface, permlib.property.PermProperty, int[]);
  public void makeListFromTable(permlib.classes.PermClassInterface, permlib.property.PermProperty, int[]);
  public static void main(java.lang.String[]);
  public javax.swing.JLabel getTitleLabel();
  static void access$000(permlab.ui.TableFrame, java.awt.event.WindowEvent);
  static void access$100(permlab.ui.TableFrame, java.awt.event.MouseEvent);
  static void access$200(permlab.ui.TableFrame, java.awt.event.MouseEvent);
  static void access$300(permlab.ui.TableFrame, java.awt.event.KeyEvent);
  static void access$400(permlab.ui.TableFrame, java.awt.event.ActionEvent);
  static boolean access$500(permlab.ui.TableFrame);
  static int[] access$600(permlab.ui.TableFrame);
  static java.util.ArrayList access$700(permlab.ui.TableFrame);
  static permlib.classes.PermClassInterface access$800(permlab.ui.TableFrame);
  static int[] access$900(permlab.ui.TableFrame);
  static int[] access$1000(permlab.ui.TableFrame);
  static javax.swing.JTable access$1100(permlab.ui.TableFrame);
}
Compiled from "TableFrame.java"
class permlab.ui.TableFrame$1 extends java.awt.event.WindowAdapter {
  final permlab.ui.TableFrame this$0;
  permlab.ui.TableFrame$1(permlab.ui.TableFrame);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "TableFrame.java"
class permlab.ui.TableFrame$2 extends java.awt.event.MouseAdapter {
  final permlab.ui.TableFrame this$0;
  permlab.ui.TableFrame$2(permlab.ui.TableFrame);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "TableFrame.java"
class permlab.ui.TableFrame$3 extends java.awt.event.KeyAdapter {
  final permlab.ui.TableFrame this$0;
  permlab.ui.TableFrame$3(permlab.ui.TableFrame);
  public void keyTyped(java.awt.event.KeyEvent);
}
Compiled from "TableFrame.java"
class permlab.ui.TableFrame$4 implements java.awt.event.ActionListener {
  final permlab.ui.TableFrame this$0;
  permlab.ui.TableFrame$4(permlab.ui.TableFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "TableFrame.java"
class permlab.ui.TableFrame$5 implements java.awt.event.ActionListener {
  final permlab.ui.TableFrame this$0;
  permlab.ui.TableFrame$5(permlab.ui.TableFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "TableFrame.java"
class permlab.ui.TableFrame$6 implements java.awt.event.ActionListener {
  final permlab.ui.TableFrame this$0;
  permlab.ui.TableFrame$6(permlab.ui.TableFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "TableFrame.java"
class permlab.ui.TableFrame$7 implements java.awt.event.ActionListener {
  final permlab.ui.TableFrame this$0;
  permlab.ui.TableFrame$7(permlab.ui.TableFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "TableFrame.java"
final class permlab.ui.TableFrame$8 implements java.lang.Runnable {
  permlab.ui.TableFrame$8();
  public void run();
}
Compiled from "TableTextFrame.java"
public class permlab.ui.TableTextFrame extends javax.swing.JFrame {
  public permlab.ui.TableTextFrame();
  public permlab.ui.TableTextFrame(java.lang.String);
  public permlab.ui.TableTextFrame(java.lang.Long[][]);
  public javax.swing.JTextArea getTextArea();
  public static void main(java.lang.String[]);
}
Compiled from "TableTextFrame.java"
final class permlab.ui.TableTextFrame$1 implements java.lang.Runnable {
  permlab.ui.TableTextFrame$1();
  public void run();
}
Compiled from "TextFrame.java"
public class permlab.ui.TextFrame extends javax.swing.JFrame {
  public permlab.ui.TextFrame();
  public permlab.ui.TextFrame(java.lang.String);
  public javax.swing.JTextArea getTextArea();
  public static void main(java.lang.String[]);
  public void addText(permlib.Permutation...);
  public void addText(java.lang.String);
  static void access$000(permlab.ui.TextFrame, java.awt.event.ActionEvent);
  static void access$100(permlab.ui.TextFrame, java.awt.event.ActionEvent);
}
Compiled from "TextFrame.java"
class permlab.ui.TextFrame$1 implements java.awt.event.ActionListener {
  final permlab.ui.TextFrame this$0;
  permlab.ui.TextFrame$1(permlab.ui.TextFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "TextFrame.java"
class permlab.ui.TextFrame$2 implements java.awt.event.ActionListener {
  final permlab.ui.TextFrame this$0;
  permlab.ui.TextFrame$2(permlab.ui.TextFrame);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "TextFrame.java"
final class permlab.ui.TextFrame$3 implements java.lang.Runnable {
  permlab.ui.TextFrame$3();
  public void run();
}
Compiled from "ExportInterface.java"
public interface permlab.utilities.ExportInterface {
  public static final int DEFAULT_WIDTH;
  public static final int DEFAULT_HEIGHT;
  public static final javax.swing.JFileChooser fileChooser;
  public abstract void export(permlib.utilities.RestrictedPermutation);
  public abstract void export(permlib.Permutation);
  public abstract void export(permlib.utilities.RestrictedPermutation, boolean, boolean);
  public abstract void export(permlib.Permutation, boolean);
  public abstract void export(permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public abstract void export(permlib.Permutation, int, int, boolean);
  public abstract void export(javax.swing.JFrame, permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public abstract void export(javax.swing.JFrame, permlib.Permutation, int, int, boolean);
  static {};
}
Compiled from "ExportType.java"
public abstract class permlab.utilities.ExportType extends java.lang.Enum<permlab.utilities.ExportType> implements permlab.utilities.ExportInterface {
  public static final permlab.utilities.ExportType GIF;
  public static final permlab.utilities.ExportType PS;
  public static final permlab.utilities.ExportType PSTricks;
  public static final permlab.utilities.ExportType SVG;
  public static final permlab.utilities.ExportType TikZ;
  public static permlab.utilities.ExportType[] values();
  public static permlab.utilities.ExportType valueOf(java.lang.String);
  permlab.utilities.ExportType(java.lang.String, int, permlab.utilities.ExportType$1);
  static {};
}
Compiled from "ExportType.java"
final class permlab.utilities.ExportType$1 extends permlab.utilities.ExportType {
  permlab.utilities.ExportType$1(java.lang.String, int);
  public void export(permlib.utilities.RestrictedPermutation);
  public void export(permlib.Permutation);
  public void export(permlib.utilities.RestrictedPermutation, boolean, boolean);
  public void export(permlib.Permutation, boolean);
  public void export(permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(permlib.Permutation, int, int, boolean);
  public void export(javax.swing.JFrame, permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(javax.swing.JFrame, permlib.Permutation, int, int, boolean);
}
Compiled from "ExportType.java"
final class permlab.utilities.ExportType$2 extends permlab.utilities.ExportType {
  permlab.utilities.ExportType$2(java.lang.String, int);
  public void export(permlib.utilities.RestrictedPermutation);
  public void export(permlib.Permutation);
  public void export(permlib.utilities.RestrictedPermutation, boolean, boolean);
  public void export(permlib.Permutation, boolean);
  public void export(permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(permlib.Permutation, int, int, boolean);
  public void export(javax.swing.JFrame, permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(javax.swing.JFrame, permlib.Permutation, int, int, boolean);
}
Compiled from "ExportType.java"
final class permlab.utilities.ExportType$3 extends permlab.utilities.ExportType {
  permlab.utilities.ExportType$3(java.lang.String, int);
  public void export(permlib.utilities.RestrictedPermutation);
  public void export(permlib.Permutation);
  public void export(permlib.utilities.RestrictedPermutation, boolean, boolean);
  public void export(permlib.Permutation, boolean);
  public void export(permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(permlib.Permutation, int, int, boolean);
  public void export(javax.swing.JFrame, permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(javax.swing.JFrame, permlib.Permutation, int, int, boolean);
}
Compiled from "ExportType.java"
final class permlab.utilities.ExportType$4 extends permlab.utilities.ExportType {
  permlab.utilities.ExportType$4(java.lang.String, int);
  public void export(permlib.utilities.RestrictedPermutation);
  public void export(permlib.Permutation);
  public void export(permlib.utilities.RestrictedPermutation, boolean, boolean);
  public void export(permlib.Permutation, boolean);
  public void export(permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(permlib.Permutation, int, int, boolean);
  public void export(javax.swing.JFrame, permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(javax.swing.JFrame, permlib.Permutation, int, int, boolean);
}
Compiled from "ExportType.java"
final class permlab.utilities.ExportType$5 extends permlab.utilities.ExportType {
  permlab.utilities.ExportType$5(java.lang.String, int);
  public void export(permlib.utilities.RestrictedPermutation);
  public void export(permlib.Permutation);
  public void export(permlib.utilities.RestrictedPermutation, boolean, boolean);
  public void export(permlib.Permutation, boolean);
  public void export(permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(permlib.Permutation, int, int, boolean);
  public void export(javax.swing.JFrame, permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public void export(javax.swing.JFrame, permlib.Permutation, int, int, boolean);
}
Compiled from "FileUtilities.java"
public class permlab.utilities.FileUtilities {
  public permlab.utilities.FileUtilities();
  public static boolean canSaveFileHere(javax.swing.JFrame, java.io.File);
}
Compiled from "IOUtilities.java"
public class permlab.utilities.IOUtilities {
  public permlab.utilities.IOUtilities();
  public static int[] getNumbers(java.lang.String);
  public static boolean isNumbersString(java.lang.String);
  public static boolean isPermString(java.lang.String);
  public static boolean isPermsString(java.lang.String);
}
Compiled from "NumberList.java"
public final class permlab.utilities.NumberList {
  public permlab.utilities.NumberList(java.lang.String);
  public int[] getNumbers();
}
Compiled from "PaintUtilities.java"
public class permlab.utilities.PaintUtilities {
  public static final java.awt.Color RULE_RESTRICTED;
  public static final java.awt.Color USER_RESTRICTED;
  public static final int DEFAULT_POINT_SIZE;
  public permlab.utilities.PaintUtilities();
  public static void paint(java.awt.Graphics, permlib.utilities.RestrictedPermutation, int, int, boolean, boolean);
  public static void paint(java.awt.Graphics, permlib.Permutation, int, int, boolean);
  static {};
}
Compiled from "UIUtilities.java"
public class permlab.utilities.UIUtilities {
  public permlab.utilities.UIUtilities();
  public static permlib.classes.PermClassInterface createInterruptibleClass(permlib.classes.PermClassInterface, javax.swing.SwingWorker);
}
Compiled from "Involutions.java"
public class permlib.Involutions implements java.lang.Iterable<permlib.Permutation> {
  public permlib.Involutions(int, int, permlib.property.HereditaryProperty);
  public permlib.Involutions(int, int, permlib.classes.InvolutionPermClass);
  public permlib.Involutions(int, permlib.classes.InvolutionPermClass);
  public permlib.Involutions(int, permlib.Permutation...);
  public permlib.Involutions(int, int, permlib.Permutation...);
  public permlib.Involutions(int, int);
  public permlib.Involutions(int, permlib.property.HereditaryProperty);
  public permlib.Involutions(int);
  public java.util.Iterator<permlib.Permutation> iterator();
}
Compiled from "PermStatistics.java"
public class permlib.PermStatistics {
  public permlib.PermStatistics();
  public static int descents(permlib.Permutation);
  public static int inversions(permlib.Permutation);
  public static int fixPoints(permlib.Permutation);
  public static int excedances(permlib.Permutation);
  public static int cycles(permlib.Permutation);
  public static java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> cycleDecomposition(permlib.Permutation);
  public static int[] cycleType(permlib.Permutation);
  public static int depth(permlib.Permutation);
}
Compiled from "PermUtilities.java"
public class permlib.PermUtilities {
  public static final boolean SAFE;
  public static final int MAX_PERM_SIZE;
  public static final permlib.property.Simple SIMPLE;
  public static final permlib.property.Involution INVOLUTION;
  public static final permlib.property.MinusIndecomposable MINUSINDECOMPOSABLE;
  public static final permlib.property.PlusIndecomposable PLUSINDECOMPOSABLE;
  public static final permlib.property.MinusIrreducible MINUSIRREDUCIBLE;
  public static final permlib.property.PlusIrreducible PLUSIRREDUCIBLE;
  public static final permlib.property.PermProperty[] MAIN_PROPERTIES;
  static final java.util.Random R;
  public permlib.PermUtilities();
  public static java.lang.Iterable<permlib.Permutation> rightExtensions(permlib.Permutation);
  public static java.lang.Iterable<permlib.Permutation> rightExtensions(permlib.Permutation, long);
  public static permlib.Permutation[] exceptionalSimples(int);
  public static permlib.Permutation delete(permlib.Permutation, int);
  public static java.util.HashSet<permlib.Permutation> deletions(permlib.Permutation);
  public static boolean isSimple(permlib.Permutation);
  public static boolean isInvolution(permlib.Permutation);
  public static permlib.Permutation insert(permlib.Permutation, int, int);
  public static permlib.Permutation replace(permlib.Permutation, int, permlib.Permutation);
  public static permlib.Permutation insert(permlib.Permutation, int, int, permlib.Permutation);
  public static java.util.Collection<permlib.Permutation> getMinimals(java.util.Collection<permlib.Permutation>);
  public static permlib.Permutation[] plusComponents(permlib.Permutation);
  public static permlib.Permutation sum(permlib.Permutation, permlib.Permutation);
  public static permlib.Permutation skewSum(permlib.Permutation, permlib.Permutation);
  public static permlib.Permutation compose(permlib.Permutation, permlib.Permutation);
  public static java.util.Collection<permlib.Permutation> merge(permlib.Permutation, permlib.Permutation);
  public static int[][] tableau(permlib.Permutation);
  public static int LISLength(permlib.Permutation);
  public static int LDSLength(permlib.Permutation);
  public static java.util.Collection<permlib.Permutation> inferredBasis(java.util.Collection<permlib.Permutation>, int);
  public static permlib.Permutation reverse(permlib.Permutation);
  public static int[] reverse(int[]);
  public static permlib.Permutation complement(permlib.Permutation);
  public static int[] complement(int[]);
  public static permlib.Permutation inverse(permlib.Permutation);
  public static int[] inverse(int[]);
  public static boolean isSymmetryRep(permlib.Permutation);
  public static permlib.Permutation symmetryRep(permlib.Permutation);
  public static java.util.Collection<permlib.Permutation> commonSubpermutations(java.util.Collection<permlib.Permutation>);
  public static permlib.Permutation permFromPoints(java.util.List<permlib.utilities.IntPair>);
  public static permlib.property.HereditaryProperty avoidanceTest(java.lang.String);
  public static permlib.property.HereditaryProperty avoidanceTest(java.lang.String, boolean);
  public static permlib.property.HereditaryProperty avoidanceTest(permlib.Permutation);
  public static permlib.property.HereditaryProperty avoidanceTest(permlib.Permutation, boolean);
  public static permlib.Permutation increasingPermutation(int);
  public static permlib.Permutation decreasingPermutation(int);
  public static permlib.Permutation randomPermutation(int);
  public static permlib.Permutation subPermutation(permlib.Permutation, int[]);
  public static java.util.HashSet<permlib.Permutation> subpermutations(permlib.Permutation);
  public static java.util.HashSet<permlib.Permutation> subpermutations(java.util.Collection<permlib.Permutation>);
  public static java.lang.Iterable<permlib.Permutation> onePointExtensions(permlib.Permutation);
  public static permlib.Permutation selectByPosition(permlib.Permutation, boolean[]);
  public static permlib.Permutation skeleton(permlib.Permutation);
  static {};
}
Compiled from "Permutation.java"
public class permlib.Permutation implements java.lang.Comparable<permlib.Permutation> {
  public static final permlib.Permutation ONE;
  public int[] elements;
  public permlib.Permutation();
  public permlib.Permutation(int);
  public permlib.Permutation(int[], int, int);
  public permlib.Permutation(int[]);
  public permlib.Permutation(int[], boolean);
  public permlib.Permutation(java.lang.String);
  public permlib.Permutation(java.lang.Integer[]);
  public permlib.Permutation clone();
  public permlib.Permutation segment(int, int);
  public int at(int);
  public permlib.Permutation window(int, int, int, int);
  public int length();
  public permlib.Permutation inverse();
  public permlib.Permutation complement();
  public permlib.Permutation reverse();
  public permlib.Permutation insert(int, int);
  public void clean();
  public int compareTo(permlib.Permutation);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public permlib.Permutation patternAt(int[]);
  public permlib.Permutation delete(int);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  public int compareTo(java.lang.Object);
  static {};
}
Compiled from "Permutations.java"
public class permlib.Permutations implements java.lang.Iterable<permlib.Permutation> {
  public permlib.Permutations(permlib.classes.PermClassInterface, int, int);
  public permlib.Permutations(permlib.classes.PermClassInterface, int, permlib.property.PermProperty);
  public permlib.Permutations(permlib.classes.PermClassInterface, int);
  public permlib.Permutations(int, int, permlib.property.PermProperty);
  public permlib.Permutations(int, int);
  public permlib.Permutations(int, permlib.property.PermProperty);
  public permlib.Permutations(int);
  public permlib.Permutations(permlib.classes.PermClassInterface, int, int, permlib.property.PermProperty);
  public java.util.Iterator<permlib.Permutation> iterator();
}
Compiled from "SortingOperators.java"
public class permlib.SortingOperators {
  public permlib.SortingOperators();
  public static permlib.Permutation stackSort(permlib.Permutation);
  public static permlib.Permutation bubbleSort(permlib.Permutation);
}
Compiled from "Symmetry.java"
public abstract class permlib.Symmetry extends java.lang.Enum<permlib.Symmetry> {
  public static final permlib.Symmetry ID;
  public static final permlib.Symmetry R;
  public static final permlib.Symmetry C;
  public static final permlib.Symmetry RC;
  public static final permlib.Symmetry INV;
  public static final permlib.Symmetry IR;
  public static final permlib.Symmetry IC;
  public static final permlib.Symmetry IRC;
  public static permlib.Symmetry[] values();
  public static permlib.Symmetry valueOf(java.lang.String);
  public abstract permlib.Permutation on(permlib.Permutation);
  public permlib.Permutation[] onArray(permlib.Permutation[]);
  public abstract permlib.Symmetry inverse();
  permlib.Symmetry(java.lang.String, int, permlib.Symmetry$1);
  static {};
}
Compiled from "Symmetry.java"
final class permlib.Symmetry$1 extends permlib.Symmetry {
  permlib.Symmetry$1(java.lang.String, int);
  public permlib.Symmetry inverse();
  public permlib.Permutation on(permlib.Permutation);
}
Compiled from "Symmetry.java"
final class permlib.Symmetry$2 extends permlib.Symmetry {
  permlib.Symmetry$2(java.lang.String, int);
  public permlib.Symmetry inverse();
  public permlib.Permutation on(permlib.Permutation);
}
Compiled from "Symmetry.java"
final class permlib.Symmetry$3 extends permlib.Symmetry {
  permlib.Symmetry$3(java.lang.String, int);
  public permlib.Symmetry inverse();
  public permlib.Permutation on(permlib.Permutation);
}
Compiled from "Symmetry.java"
final class permlib.Symmetry$4 extends permlib.Symmetry {
  permlib.Symmetry$4(java.lang.String, int);
  public permlib.Symmetry inverse();
  public permlib.Permutation on(permlib.Permutation);
}
Compiled from "Symmetry.java"
final class permlib.Symmetry$5 extends permlib.Symmetry {
  permlib.Symmetry$5(java.lang.String, int);
  public permlib.Symmetry inverse();
  public permlib.Permutation on(permlib.Permutation);
}
Compiled from "Symmetry.java"
final class permlib.Symmetry$6 extends permlib.Symmetry {
  permlib.Symmetry$6(java.lang.String, int);
  public permlib.Symmetry inverse();
  public permlib.Permutation on(permlib.Permutation);
}
Compiled from "Symmetry.java"
final class permlib.Symmetry$7 extends permlib.Symmetry {
  permlib.Symmetry$7(java.lang.String, int);
  public permlib.Symmetry inverse();
  public permlib.Permutation on(permlib.Permutation);
}
Compiled from "Symmetry.java"
final class permlib.Symmetry$8 extends permlib.Symmetry {
  permlib.Symmetry$8(java.lang.String, int);
  public permlib.Symmetry inverse();
  public permlib.Permutation on(permlib.Permutation);
}
Compiled from "HereditaryPermClass.java"
public class permlib.classes.HereditaryPermClass implements permlib.classes.PermClassInterface {
  public permlib.classes.HereditaryPermClass(permlib.property.HereditaryProperty);
  public permlib.classes.PermClassInterface clone();
  public void processPerms(int, permlib.processor.PermProcessor);
  public java.util.Collection<permlib.Permutation> getPerms(int);
  public java.util.Collection<permlib.Permutation> getPermsTo(int);
  public boolean containsPermutation(permlib.Permutation);
  public java.util.Iterator<permlib.Permutation> getIterator(int, int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, int, permlib.property.PermProperty);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "InvolutionPermClass.java"
public class permlib.classes.InvolutionPermClass implements permlib.classes.PermClassInterface {
  public permlib.classes.InvolutionPermClass();
  public permlib.classes.InvolutionPermClass(permlib.property.HereditaryProperty);
  public permlib.classes.InvolutionPermClass(permlib.property.PermProperty);
  public permlib.classes.InvolutionPermClass(java.util.Collection<permlib.Permutation>);
  public permlib.classes.InvolutionPermClass(permlib.Permutation...);
  public permlib.classes.PermClassInterface clone();
  public void processPerms(int, permlib.processor.PermProcessor);
  public java.util.Collection<permlib.Permutation> getPerms(int);
  public java.util.Collection<permlib.Permutation> getPermsTo(int);
  public boolean containsPermutation(permlib.Permutation);
  public void processClass(int, int, permlib.processor.PermProcessor);
  public java.util.Iterator<permlib.Permutation> getIterator(int, int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, int, permlib.property.PermProperty);
  public java.util.Iterator<permlib.Permutation> getIterator(int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, permlib.property.PermProperty);
  public java.util.Iterator<permlib.Permutation> getSynchronizedIterator(int);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "InvolutionPermClass.java"
class permlib.classes.InvolutionPermClass$1 implements permlib.property.HereditaryProperty {
  final java.util.Collection val$perms;
  final permlib.property.PermProperty val$avoidanceTest;
  final permlib.classes.InvolutionPermClass this$0;
  permlib.classes.InvolutionPermClass$1(permlib.classes.InvolutionPermClass, java.util.Collection, permlib.property.PermProperty);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "InvolutionPermClass.java"
class permlib.classes.InvolutionPermClass$2 implements permlib.property.HereditaryProperty {
  final permlib.Permutation[] val$basis;
  final permlib.property.PermProperty val$avoidanceTest;
  final permlib.classes.InvolutionPermClass this$0;
  permlib.classes.InvolutionPermClass$2(permlib.classes.InvolutionPermClass, permlib.Permutation[], permlib.property.PermProperty);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "InvolutionPermClass.java"
class permlib.classes.InvolutionPermClass$InvolutionIterator implements java.util.Iterator<permlib.Permutation> {
  java.util.Deque<permlib.Permutation> stack;
  permlib.Permutation next;
  permlib.property.HereditaryProperty definingProperty;
  int low;
  int high;
  permlib.property.PermProperty extraProperty;
  public permlib.classes.InvolutionPermClass$InvolutionIterator(permlib.property.HereditaryProperty, int, int, permlib.property.PermProperty);
  public permlib.classes.InvolutionPermClass$InvolutionIterator(permlib.property.HereditaryProperty, int, permlib.property.PermProperty);
  public permlib.classes.InvolutionPermClass$InvolutionIterator(permlib.property.HereditaryProperty, int);
  public permlib.classes.InvolutionPermClass$InvolutionIterator(permlib.property.HereditaryProperty, int, int);
  public boolean hasNext();
  public permlib.Permutation next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "InvolutionPermClass.java"
class permlib.classes.InvolutionPermClass$InvolutionIterator$1 extends java.util.ArrayDeque<permlib.Permutation> {
  final permlib.classes.InvolutionPermClass$InvolutionIterator this$0;
  permlib.classes.InvolutionPermClass$InvolutionIterator$1(permlib.classes.InvolutionPermClass$InvolutionIterator);
}
Compiled from "MultiPermutationClass.java"
public class permlib.classes.MultiPermutationClass extends permlib.classes.PermutationClass {
  public permlib.classes.MultiPermutationClass(permlib.Permutation...);
  public permlib.classes.MultiPermutationClass(java.util.Collection<permlib.Permutation>);
  public permlib.classes.MultiPermutationClass(java.lang.String...);
  public permlib.classes.PermClassInterface clone();
  public boolean containsPermutation(permlib.Permutation);
  public boolean containsPermutation(permlib.Permutation, int);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "PermClassInterface.java"
public interface permlib.classes.PermClassInterface {
  public static final int MAXIMUM_STORED_LENGTH;
  public abstract void processPerms(int, permlib.processor.PermProcessor);
  public abstract java.util.Collection<permlib.Permutation> getPerms(int);
  public abstract java.util.Collection<permlib.Permutation> getPermsTo(int);
  public abstract boolean containsPermutation(permlib.Permutation);
  public abstract java.util.Iterator<permlib.Permutation> getIterator(int, int);
  public abstract java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, int, permlib.property.PermProperty);
}
Compiled from "PermutationClass.java"
public class permlib.classes.PermutationClass implements permlib.classes.PermClassInterface {
  protected permlib.Permutation[] basis;
  public permlib.classes.PermutationClass(permlib.Permutation...);
  public permlib.classes.PermutationClass(java.util.Collection<permlib.Permutation>);
  public permlib.classes.PermutationClass(java.lang.String...);
  public permlib.classes.PermutationClass();
  public permlib.classes.PermClassInterface clone();
  public java.lang.String toString();
  protected final void setupMasks();
  protected final void computeStoredPermutations();
  public boolean containsPermutation(permlib.Permutation);
  public boolean containsPermutation(permlib.Permutation, int);
  public java.util.Collection<permlib.Permutation> getPerms(int);
  public java.util.Collection<permlib.Permutation> getPermsTo(int);
  public void processPerms(int, permlib.processor.PermProcessor);
  public void processPerms(int, int, permlib.processor.PermProcessor);
  public java.util.Iterator<permlib.Permutation> getIterator(int, int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, int, permlib.property.PermProperty);
  public java.util.Iterator<permlib.Permutation> getIterator(int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, permlib.property.PermProperty);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static java.util.HashSet[] access$000(permlib.classes.PermutationClass);
  static long[] access$300();
  static long[] access$400();
}
Compiled from "PermutationClass.java"
class permlib.classes.PermutationClass$InsertionPerm {
  public permlib.classes.PermutationClass$InsertionPerm();
  public permlib.classes.PermutationClass$InsertionPerm(permlib.Permutation, long);
  public permlib.classes.PermutationClass$InsertionPerm(permlib.Permutation);
  public int length();
  static permlib.Permutation access$100(permlib.classes.PermutationClass$InsertionPerm);
  static long access$200(permlib.classes.PermutationClass$InsertionPerm);
  static void access$500(permlib.classes.PermutationClass$InsertionPerm, long);
}
Compiled from "PermutationClass.java"
class permlib.classes.PermutationClass$PermutationClassIterator implements java.util.Iterator<permlib.Permutation> {
  permlib.Permutation next;
  int low;
  int high;
  permlib.property.PermProperty restrictingProperty;
  java.util.Queue<java.util.Iterator<permlib.Permutation>> iterators;
  java.util.Iterator<permlib.Permutation> currentIterator;
  boolean safeIterator;
  final permlib.classes.PermutationClass this$0;
  permlib.classes.PermutationClass$PermutationClassIterator(permlib.classes.PermutationClass, int, int, permlib.property.PermProperty);
  public java.util.Iterator<permlib.Permutation> getIterator(int);
  public boolean hasNext();
  public permlib.Permutation next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "PermutationClass.java"
class permlib.classes.PermutationClass$PermutationClassIterator$StackIterator implements java.util.Iterator<permlib.Permutation>, permlib.classes.PermutationClass$SafeIterator {
  java.util.Deque<permlib.classes.PermutationClass$InsertionPerm> stack;
  permlib.Permutation stackNext;
  final permlib.classes.PermutationClass$PermutationClassIterator this$1;
  public permlib.classes.PermutationClass$PermutationClassIterator$StackIterator(permlib.classes.PermutationClass$PermutationClassIterator);
  public boolean hasNext();
  public permlib.Permutation next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "PermutationClass.java"
interface permlib.classes.PermutationClass$SafeIterator {
}
Compiled from "SimplePermClass.java"
public class permlib.classes.SimplePermClass implements permlib.classes.PermClassInterface {
  static final int DEFAULT_SIZE;
  permlib.property.PermProperty inClass;
  java.util.HashSet<permlib.classes.SimplePermClass$DecoratedSimplePerm>[] simples;
  public permlib.classes.SimplePermClass();
  public permlib.classes.SimplePermClass(permlib.Permutation...);
  public permlib.classes.SimplePermClass(java.util.Collection<permlib.Permutation>);
  public permlib.classes.SimplePermClass(permlib.property.PermProperty);
  public permlib.classes.SimplePermClass(java.lang.String...);
  public permlib.classes.PermClassInterface clone();
  public java.util.HashSet<permlib.Permutation> getSimples(int);
  public java.util.HashSet<permlib.Permutation> getPerms(int);
  public java.util.Collection<permlib.Permutation> getPermsTo(int);
  public void processPerms(int, permlib.processor.PermProcessor);
  public void processWithTo(permlib.processor.PermProcessor, int);
  public void DFSProcessSimples(permlib.classes.SimplePermClass$DecoratedSimplePerm, int, int, permlib.processor.PermProcessor);
  public boolean containsPermutation(permlib.Permutation);
  public java.util.Iterator<permlib.Permutation> getIterator(int, int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, int, permlib.property.PermProperty);
  public java.util.Iterator<permlib.Permutation> getIterator(int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, permlib.property.PermProperty);
  public static void main(java.lang.String[]);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  public java.util.Collection getPerms(int);
  static permlib.property.Simple access$000(permlib.classes.SimplePermClass);
}
Compiled from "SimplePermClass.java"
public class permlib.classes.SimplePermClass$DecoratedSimplePerm {
  permlib.Permutation p;
  int leftmostSimpleDeletionIndex;
  final permlib.classes.SimplePermClass this$0;
  public permlib.classes.SimplePermClass$DecoratedSimplePerm(permlib.classes.SimplePermClass, permlib.Permutation);
  public permlib.classes.SimplePermClass$DecoratedSimplePerm(permlib.classes.SimplePermClass, permlib.Permutation, int);
  public int getLeftmostSimpleDeletionIndex();
  public permlib.Permutation getPermutation();
  public java.util.ArrayList<permlib.classes.SimplePermClass$DecoratedSimplePerm> leftSimpleExtensions();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "SimplePermClass.java"
class permlib.classes.SimplePermClass$SimplePermIterator implements java.util.Iterator<permlib.Permutation> {
  java.util.Deque<permlib.Permutation> stack;
  permlib.Permutation next;
  permlib.property.PermProperty definingProperty;
  int low;
  int high;
  permlib.property.PermProperty extraProperty;
  final permlib.classes.SimplePermClass this$0;
  public permlib.classes.SimplePermClass$SimplePermIterator(permlib.classes.SimplePermClass, permlib.property.PermProperty, int, int, permlib.property.PermProperty);
  public permlib.classes.SimplePermClass$SimplePermIterator(permlib.classes.SimplePermClass, permlib.property.PermProperty, int, permlib.property.PermProperty);
  public permlib.classes.SimplePermClass$SimplePermIterator(permlib.classes.SimplePermClass, permlib.property.PermProperty, int);
  public boolean hasNext();
  public permlib.Permutation next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "SimplePermClass.java"
class permlib.classes.SimplePermClass$SimplePermIterator$1 extends java.util.ArrayDeque<permlib.Permutation> {
  final permlib.classes.SimplePermClass$SimplePermIterator this$1;
  permlib.classes.SimplePermClass$SimplePermIterator$1(permlib.classes.SimplePermClass$SimplePermIterator);
}
Compiled from "UniversalPermClass.java"
public class permlib.classes.UniversalPermClass implements permlib.classes.PermClassInterface, java.lang.Iterable<permlib.Permutation> {
  public permlib.classes.UniversalPermClass();
  public permlib.classes.UniversalPermClass(int);
  public permlib.classes.UniversalPermClass(int, int);
  public permlib.classes.PermClassInterface clone();
  public void setupBoundedIterator(int, int);
  public int getMinLength();
  public int getMaxLength();
  public permlib.classes.UniversalPermClass orLonger();
  public permlib.classes.UniversalPermClass to(int);
  public permlib.classes.UniversalPermClass from(int);
  public java.util.Collection<permlib.Permutation> getPerms(int);
  public java.util.Collection<permlib.Permutation> getPermsTo(int);
  public void processPerms(int, permlib.processor.PermProcessor);
  public void processClass(int, int, permlib.processor.PermProcessor);
  public boolean containsPermutation(permlib.Permutation);
  public java.util.Iterator<permlib.Permutation> getIterator(int, int);
  public java.util.Iterator<permlib.Permutation> getRestrictedIterator(int, int, permlib.property.PermProperty);
  public java.util.Iterator<permlib.Permutation> iterator();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static java.util.Iterator access$000(permlib.classes.UniversalPermClass);
  static int access$100(permlib.classes.UniversalPermClass);
  static int access$200(permlib.classes.UniversalPermClass);
  static int access$108(permlib.classes.UniversalPermClass);
  static java.util.Iterator access$002(permlib.classes.UniversalPermClass, java.util.Iterator);
  static permlib.property.PermProperty access$400(permlib.classes.UniversalPermClass);
}
Compiled from "UniversalPermClass.java"
class permlib.classes.UniversalPermClass$1 implements java.util.Iterator<permlib.Permutation> {
  final permlib.classes.UniversalPermClass this$0;
  permlib.classes.UniversalPermClass$1(permlib.classes.UniversalPermClass);
  public boolean hasNext();
  public permlib.Permutation next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "UniversalPermClass.java"
class permlib.classes.UniversalPermClass$SymmetricGroup implements java.lang.Iterable<permlib.Permutation> {
  final permlib.classes.UniversalPermClass this$0;
  public permlib.classes.UniversalPermClass$SymmetricGroup(permlib.classes.UniversalPermClass, int);
  public java.util.Iterator<permlib.Permutation> iterator();
  static int access$300(permlib.classes.UniversalPermClass$SymmetricGroup);
}
Compiled from "UniversalPermClass.java"
class permlib.classes.UniversalPermClass$SymmetricGroup$1 implements java.util.Iterator<permlib.Permutation> {
  final permlib.classes.UniversalPermClass$SymmetricGroup this$1;
  permlib.classes.UniversalPermClass$SymmetricGroup$1(permlib.classes.UniversalPermClass$SymmetricGroup);
  public boolean hasNext();
  public permlib.Permutation next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "ArchIntervalEquations.java"
public class permlib.examples.ArchIntervalEquations {
  public permlib.examples.ArchIntervalEquations();
  public static void main(java.lang.String[]);
  public static java.lang.String equationFor(int, permlib.Permutation[], permlib.Permutation[]);
  public static permlib.Permutation[] sumComponents(permlib.Permutation);
  public static int suffLength(permlib.Permutation[], int, permlib.Permutation);
}
Compiled from "AsAndArches.java"
public class permlib.examples.AsAndArches {
  public permlib.examples.AsAndArches();
  public static void main(java.lang.String[]);
  static java.util.HashMap<permlib.examples.AsAndArches$IntPair, java.util.HashSet<permlib.examples.AsAndArches$AAAtom>> generateAll(int, int);
}
Compiled from "AsAndArches.java"
class permlib.examples.AsAndArches$AAAtom {
  permlib.examples.AsAndArches$AASystem contents;
  char type;
  public permlib.examples.AsAndArches$AAAtom(permlib.examples.AsAndArches$AASystem);
  public permlib.examples.AsAndArches$AAAtom();
  public boolean isLetter();
  public boolean isArch();
  public permlib.examples.AsAndArches$AASystem contents();
  public int arches();
  public int as();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "AsAndArches.java"
class permlib.examples.AsAndArches$AASystem {
  java.util.ArrayList<permlib.examples.AsAndArches$AAAtom> atoms;
  public java.lang.String toString();
  public permlib.examples.AsAndArches$AASystem(java.util.ArrayList<permlib.examples.AsAndArches$AAAtom>);
  public permlib.examples.AsAndArches$AASystem();
  public boolean contains(permlib.examples.AsAndArches$AASystem);
  public int arches();
  public int as();
  public permlib.examples.AsAndArches$AAAtom lastAtom();
  public permlib.examples.AsAndArches$AASystem removeLastAtom();
  public permlib.examples.AsAndArches$AASystem uncoverLastAtom();
  public permlib.examples.AsAndArches$AASystem addLastAtom(permlib.examples.AsAndArches$AAAtom);
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "AsAndArches.java"
class permlib.examples.AsAndArches$IntPair {
  int aCount;
  int archCount;
  public permlib.examples.AsAndArches$IntPair(int, int);
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "Av231PlusOneGFs.java"
public class permlib.examples.Av231PlusOneGFs {
  public permlib.examples.Av231PlusOneGFs();
  public static void main(java.lang.String[]);
  static void do231();
  static void do321(int);
}
Compiled from "Av231PlusOneGFs.java"
class permlib.examples.Av231PlusOneGFs$Arches {
  java.util.ArrayList<permlib.examples.Av231PlusOneGFs$Arches> components;
  permlib.examples.Av231PlusOneGFs$Arches(permlib.Permutation);
  permlib.examples.Av231PlusOneGFs$Arches(permlib.examples.Av231PlusOneGFs$Arches...);
  permlib.examples.Av231PlusOneGFs$Arches(int[], int, int);
  permlib.examples.Av231PlusOneGFs$Arches(java.util.ArrayList<permlib.examples.Av231PlusOneGFs$Arches>);
  public boolean isAtom();
  public permlib.examples.Av231PlusOneGFs$Arches lastAtom();
  public permlib.examples.Av231PlusOneGFs$Arches interior();
  public permlib.examples.Av231PlusOneGFs$Arches tail();
  public permlib.examples.Av231PlusOneGFs$Arches tail(int);
  public permlib.examples.Av231PlusOneGFs$Arches head(int);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "Av231PlusOneGFs.java"
class permlib.examples.Av231PlusOneGFs$GF {
  static java.util.HashMap<permlib.examples.Av231PlusOneGFs$Arches, permlib.examples.Rational> gfs;
  permlib.examples.Av231PlusOneGFs$GF();
  static permlib.examples.Rational gf(permlib.examples.Av231PlusOneGFs$Arches);
  static {};
}
Compiled from "Av231PlusOneGFs.java"
class permlib.examples.Av231PlusOneGFs$Spectrum implements java.lang.Comparable {
  permlib.Permutation p;
  long[] spec;
  public permlib.examples.Av231PlusOneGFs$Spectrum(permlib.Permutation, long[]);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
}
Compiled from "Av321AvoidanceTiming.java"
public class permlib.examples.Av321AvoidanceTiming {
  public permlib.examples.Av321AvoidanceTiming();
  public static void main(java.lang.String[]);
}
Compiled from "Av321Trial.java"
public class permlib.examples.Av321Trial {
  public permlib.examples.Av321Trial();
  public static int[] type(int[]);
  public static int[] type(permlib.Permutation);
  public static void main(java.lang.String[]);
}
Compiled from "Av4231Machine.java"
public class permlib.examples.Av4231Machine {
  static permlib.classes.PermutationClass av231;
  static java.util.HashMap<permlib.Permutation, java.lang.Integer> popStateCounts;
  static java.util.HashMap<permlib.Permutation, java.lang.Integer> noPopStateCounts;
  public permlib.examples.Av4231Machine();
  public static void main(java.lang.String[]);
  static void increment(java.util.HashMap<permlib.Permutation, java.lang.Integer>, permlib.Permutation, int);
  static java.util.ArrayList<permlib.Permutation> children(permlib.Permutation);
  static {};
}
Compiled from "BasisForSubsClosureAv321.java"
public class permlib.examples.BasisForSubsClosureAv321 {
  public permlib.examples.BasisForSubsClosureAv321();
  public static void main(java.lang.String[]);
}
Compiled from "BasisOfSepMergeSep.java"
public class permlib.examples.BasisOfSepMergeSep {
  public permlib.examples.BasisOfSepMergeSep();
  public static void main(java.lang.String[]);
}
Compiled from "Conjecture19.java"
public class permlib.examples.Conjecture19 {
  public permlib.examples.Conjecture19();
  public static void main(java.lang.String[]);
  public static void testOne();
  public static void testTwo();
  public static void testThree(int);
  public static boolean smaller(permlib.classes.PermutationClass, permlib.classes.PermutationClass, int, int);
}
Compiled from "DSM.java"
public class permlib.examples.DSM {
  static final permlib.property.PermProperty ad;
  static final permlib.property.PermProperty ai;
  static final permlib.property.Griddable g;
  public permlib.examples.DSM();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "DeflatabilityExample.java"
public class permlib.examples.DeflatabilityExample {
  public permlib.examples.DeflatabilityExample();
  public static void main(java.lang.String[]);
}
Compiled from "DiamondClass.java"
public class permlib.examples.DiamondClass {
  static permlib.property.PermProperty I;
  static permlib.property.PermProperty D;
  public permlib.examples.DiamondClass();
  static {};
}
Compiled from "DiamondClass.java"
final class permlib.examples.DiamondClass$1 implements permlib.property.PermProperty {
  permlib.examples.DiamondClass$1();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "DiamondClass.java"
final class permlib.examples.DiamondClass$2 implements permlib.property.PermProperty {
  permlib.examples.DiamondClass$2();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "DoubleSkewMerged.java"
public class permlib.examples.DoubleSkewMerged {
  static final permlib.property.PermProperty ad;
  static final permlib.property.PermProperty ai;
  static final permlib.property.PermProperty g;
  public permlib.examples.DoubleSkewMerged();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "FibStateMachine.java"
public class permlib.examples.FibStateMachine {
  static java.util.HashMap<permlib.examples.FibStateMachine$State, java.math.BigInteger> noPop0;
  static java.util.HashMap<permlib.examples.FibStateMachine$State, java.math.BigInteger> yesPop0;
  static java.util.HashMap<permlib.examples.FibStateMachine$State, java.math.BigInteger> noPop1;
  static java.util.HashMap<permlib.examples.FibStateMachine$State, java.math.BigInteger> yesPop1;
  static java.util.HashMap<permlib.examples.FibStateMachine$State, java.math.BigInteger> noPop2;
  static java.util.HashMap<permlib.examples.FibStateMachine$State, java.math.BigInteger> yesPop2;
  public permlib.examples.FibStateMachine();
  public static void main(java.lang.String[]);
  static void doGeneration();
  static {};
}
Compiled from "FibStateMachine.java"
class permlib.examples.FibStateMachine$State {
  static java.util.HashMap<java.lang.Integer, permlib.examples.FibStateMachine$State> knownStates;
  int a;
  int b;
  permlib.examples.FibStateMachine$State pop;
  permlib.examples.FibStateMachine$State[] push;
  public static permlib.examples.FibStateMachine$State getState(int, int);
  public void computePop();
  public permlib.examples.FibStateMachine$State getPop();
  public void computePush();
  public permlib.examples.FibStateMachine$State[] getPush();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  static {};
}
Compiled from "FixedInAv4231And4321.java"
public class permlib.examples.FixedInAv4231And4321 {
  public permlib.examples.FixedInAv4231And4321();
  public static void main(java.lang.String[]);
}
Compiled from "IntervalAvoidanceGrowth.java"
public class permlib.examples.IntervalAvoidanceGrowth {
  public permlib.examples.IntervalAvoidanceGrowth();
  public static void main(java.lang.String[]);
}
Compiled from "IntervalBreakingExtensions.java"
public class permlib.examples.IntervalBreakingExtensions {
  public permlib.examples.IntervalBreakingExtensions();
  public static void main(java.lang.String[]);
  public static void check(permlib.Permutation, permlib.classes.PermutationClass);
}
Compiled from "MaxSimples.java"
public class permlib.examples.MaxSimples {
  public permlib.examples.MaxSimples();
  public static void main(java.lang.String[]);
}
Compiled from "MergeofSepAv1342.java"
public class permlib.examples.MergeofSepAv1342 {
  public permlib.examples.MergeofSepAv1342();
  public static void main(java.lang.String[]);
}
Compiled from "MinimalDepth.java"
public class permlib.examples.MinimalDepth {
  public permlib.examples.MinimalDepth();
  public static void main(java.lang.String[]);
  public static boolean hasMinimalDepth(permlib.Permutation);
}
Compiled from "PairsInAv231.java"
public class permlib.examples.PairsInAv231 {
  public permlib.examples.PairsInAv231();
  public static void main(java.lang.String[]);
  public static void doSpecial();
  public static void doWilf(int, boolean, int);
  public static void doWilf(int, int, boolean, int);
}
Compiled from "PairsInAv231.java"
class permlib.examples.PairsInAv231$PermPair implements java.lang.Comparable {
  permlib.Permutation a;
  permlib.Permutation b;
  permlib.examples.PairsInAv231$PermPair(permlib.Permutation, permlib.Permutation);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
}
Compiled from "PairsInAv231.java"
class permlib.examples.PairsInAv231$Spectrum {
  long[] counts;
  public permlib.examples.PairsInAv231$Spectrum(long[]);
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "PermErdosHajnal.java"
public class permlib.examples.PermErdosHajnal {
  public permlib.examples.PermErdosHajnal();
  public static void main(java.lang.String[]);
  public static void original();
  public static void funny();
  public static void sn(int);
}
Compiled from "PermIntervals.java"
public class permlib.examples.PermIntervals {
  public permlib.examples.PermIntervals();
  public static void main(java.lang.String[]);
  public static void doPerm(permlib.Permutation, int);
  public static long[] permSpec(permlib.Permutation, int);
  public static java.util.HashMap<permlib.Permutation, long[]> permSpecs(int, int);
  public static void doWilfImpliesJoint(int, int);
  public static void doPair(permlib.Permutation, permlib.Permutation, int);
  public static void doJointPair(permlib.Permutation, permlib.Permutation, int);
  public static void doClass(permlib.classes.PermutationClass, int, int);
}
Compiled from "PermIntervals.java"
class permlib.examples.PermIntervals$IntervalCounter implements permlib.processor.PermProcessor {
  int[] patValues;
  int count;
  public permlib.examples.PermIntervals$IntervalCounter(permlib.Permutation);
  public boolean process(int[]);
  public void process(permlib.Permutation);
  public void reset();
  public int getCount(permlib.Permutation);
  public java.lang.String report();
}
Compiled from "PermIntervals.java"
class permlib.examples.PermIntervals$NoIntervalProperty implements permlib.property.PermProperty {
  int[] patValues;
  public permlib.examples.PermIntervals$NoIntervalProperty(permlib.Permutation);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "Polynomial.java"
public class permlib.examples.Polynomial {
  static final boolean SAFE;
  static final permlib.examples.Polynomial ZERO;
  static final permlib.examples.Polynomial ONE;
  static final permlib.examples.Polynomial T;
  java.math.BigInteger[] coeffs;
  public permlib.examples.Polynomial(java.math.BigInteger[]);
  public permlib.examples.Polynomial(java.math.BigInteger[], boolean);
  public permlib.examples.Polynomial add(permlib.examples.Polynomial);
  public permlib.examples.Polynomial sub(permlib.examples.Polynomial);
  public permlib.examples.Polynomial negate();
  public permlib.examples.Polynomial mod(permlib.examples.Polynomial);
  public permlib.examples.Polynomial gcd(permlib.examples.Polynomial);
  public permlib.examples.Polynomial mul(java.math.BigInteger);
  public permlib.examples.Polynomial makePrimitive();
  public permlib.examples.Polynomial mul(permlib.examples.Polynomial);
  public permlib.examples.Polynomial div(permlib.examples.Polynomial);
  public int degree();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public java.lang.String textString(char);
  static {};
}
Compiled from "PropertyStar.java"
public class permlib.examples.PropertyStar implements permlib.property.PermProperty {
  public permlib.examples.PropertyStar(permlib.classes.PermClassInterface);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public static void main(java.lang.String[]);
}
Compiled from "RandomBTree.java"
public class permlib.examples.RandomBTree {
  static java.util.Random R;
  static boolean LEFT;
  static boolean RIGHT;
  public permlib.examples.RandomBTree();
  public static void main(java.lang.String[]);
  static permlib.utilities.BTree buildTree(int);
  static permlib.utilities.BTree extendOnce(permlib.utilities.BTree);
  static {};
}
Compiled from "RandomPermutationClass.java"
public class permlib.examples.RandomPermutationClass {
  public static final java.util.Random R;
  public permlib.examples.RandomPermutationClass();
  public static void main(java.lang.String[]);
  public static void example01(int);
  public static permlib.Permutation[] io(int);
  public static permlib.Permutation[] ul(int);
  public static permlib.Permutation[] ur(int);
  public static void example02();
  public static void rand321(int, int);
  static {};
}
Compiled from "Rational.java"
public class permlib.examples.Rational {
  static final boolean SAFE;
  static final permlib.examples.Rational T;
  static final permlib.examples.Rational ZERO;
  static final permlib.examples.Rational ONE;
  public permlib.examples.Rational(permlib.examples.Polynomial, permlib.examples.Polynomial);
  public permlib.examples.Rational(permlib.examples.Polynomial, permlib.examples.Polynomial, boolean);
  public permlib.examples.Rational(permlib.examples.Polynomial);
  public permlib.examples.Rational add(permlib.examples.Rational);
  public permlib.examples.Rational sub(permlib.examples.Rational);
  public permlib.examples.Rational negate();
  public permlib.examples.Rational mul(permlib.examples.Rational);
  permlib.examples.Rational div(permlib.examples.Rational);
  public permlib.examples.Rational mul(permlib.examples.Polynomial);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  static {};
}
Compiled from "Rev321.java"
public class permlib.examples.Rev321 {
  public permlib.examples.Rev321();
  public static void main(java.lang.String[]);
  public static void doClass();
}
Compiled from "Rev321.java"
class permlib.examples.Rev321$CodedPermutation {
  permlib.examples.Rev321$Point[] c;
  permlib.examples.Rev321$CodedPermutation(int[]);
  public permlib.Permutation getPermutation();
}
Compiled from "Rev321.java"
class permlib.examples.Rev321$CodedPermutation$1 implements java.util.Comparator<permlib.examples.Rev321$Point> {
  final permlib.examples.Rev321$CodedPermutation this$0;
  permlib.examples.Rev321$CodedPermutation$1(permlib.examples.Rev321$CodedPermutation);
  public int compare(permlib.examples.Rev321$Point, permlib.examples.Rev321$Point);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "Rev321.java"
class permlib.examples.Rev321$CodedPermutation$2 implements java.util.Comparator<permlib.examples.Rev321$Point> {
  final permlib.examples.Rev321$CodedPermutation this$0;
  permlib.examples.Rev321$CodedPermutation$2(permlib.examples.Rev321$CodedPermutation);
  public int compare(permlib.examples.Rev321$Point, permlib.examples.Rev321$Point);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "Rev321.java"
class permlib.examples.Rev321$Codes implements java.lang.Iterable<int[]> {
  int cells;
  int length;
  public permlib.examples.Rev321$Codes(int, int);
  public java.util.Iterator<int[]> iterator();
}
Compiled from "Rev321.java"
class permlib.examples.Rev321$Codes$1 implements java.util.Iterator<int[]> {
  int[] c;
  final permlib.examples.Rev321$Codes this$0;
  permlib.examples.Rev321$Codes$1(permlib.examples.Rev321$Codes);
  public boolean hasNext();
  public int[] next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "Rev321.java"
class permlib.examples.Rev321$Point {
  int c;
  int v;
  public permlib.examples.Rev321$Point(int);
  public java.lang.String toString();
}
Compiled from "ReverseFib.java"
public class permlib.examples.ReverseFib {
  public permlib.examples.ReverseFib();
  public static void main(java.lang.String[]);
}
Compiled from "ReverseFib.java"
class permlib.examples.ReverseFib$State {
  java.util.ArrayList<java.lang.Integer> out;
  java.util.ArrayList<java.lang.Integer> in;
  int next;
  boolean maxMustPop;
  boolean mayPop;
  public permlib.examples.ReverseFib$State(java.util.ArrayList<java.lang.Integer>, java.util.ArrayList<java.lang.Integer>, int);
  public permlib.examples.ReverseFib$State(permlib.examples.ReverseFib$State);
  public permlib.examples.ReverseFib$State();
  public java.util.ArrayList<permlib.examples.ReverseFib$State> children(int);
  public java.util.ArrayList<permlib.examples.ReverseFib$State> popChildren();
  public java.util.ArrayList<permlib.examples.ReverseFib$State> allPopChildren();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public java.util.ArrayList<permlib.Permutation> out();
  public permlib.Permutation outPerm();
}
Compiled from "SaganBijection.java"
public class permlib.examples.SaganBijection {
  public permlib.examples.SaganBijection();
  public static void main(java.lang.String[]);
}
Compiled from "SepPlusStuff.java"
public class permlib.examples.SepPlusStuff {
  static permlib.Permutation p2413;
  static permlib.Permutation p3142;
  static permlib.classes.PermutationClass sep;
  static int maxLength;
  public permlib.examples.SepPlusStuff();
  public static void main(java.lang.String[]);
  public static void splitBlock(java.util.HashSet<permlib.Permutation>, int, java.util.HashMap<permlib.Permutation, java.util.ArrayList<java.lang.Long>>);
  static {};
}
Compiled from "SepPopularity.java"
public class permlib.examples.SepPopularity {
  static final permlib.Permutation p2413;
  static final permlib.Permutation p3142;
  static final permlib.classes.PermutationClass c;
  static int maxLength;
  static final permlib.Permutation p25314;
  static final permlib.Permutation p246135;
  static final permlib.Permutation p362514;
  static final permlib.classes.PermutationClass x;
  public permlib.examples.SepPopularity();
  public static void main(java.lang.String[]);
  public static void doIt(int, int);
  public static void doIt2(int, int, permlib.classes.PermClassInterface);
  public static void doIt3(int, int, int, permlib.classes.PermClassInterface);
  static {};
}
Compiled from "SepPopularity.java"
class permlib.examples.SepPopularity$Counter {
  long value;
  permlib.examples.SepPopularity$Counter();
  void increment();
  long value();
}
Compiled from "SepPopularity.java"
class permlib.examples.SepPopularity$Counters {
  long[] counts;
  int low;
  public permlib.examples.SepPopularity$Counters(int, int);
  void increment(int);
  long[] value();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "SepStatistics.java"
public class permlib.examples.SepStatistics {
  public permlib.examples.SepStatistics();
  public static void main(java.lang.String[]);
  public static boolean hasNontrivialDistEq(java.util.HashMap<permlib.examples.SepStatistics$OccurrenceCounts, java.util.HashSet<permlib.Permutation>>);
  public static java.util.HashMap<permlib.examples.SepStatistics$OccurrenceCounts, java.util.HashSet<permlib.Permutation>> findDistClasses(int, int, permlib.classes.PermutationClass);
  public static void printClasses(java.util.HashMap<permlib.examples.SepStatistics$OccurrenceCounts, java.util.HashSet<permlib.Permutation>>);
  public static void printClasses(java.util.HashMap<permlib.examples.SepStatistics$OccurrenceCounts, java.util.HashSet<permlib.Permutation>>, java.lang.String);
  public static void printClasses(java.util.HashMap<permlib.examples.SepStatistics$OccurrenceCounts, java.util.HashSet<permlib.Permutation>>, boolean, java.lang.String);
}
Compiled from "SepStatistics.java"
class permlib.examples.SepStatistics$OccurrenceCounts {
  java.util.HashMap<java.lang.Integer, java.lang.Long> counts;
  permlib.examples.SepStatistics$OccurrenceCounts();
  void incrementCount(int);
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "SimpleReversals.java"
public class permlib.examples.SimpleReversals {
  static java.util.Random R;
  static java.util.HashMap<permlib.Permutation, java.lang.Integer> counts;
  public permlib.examples.SimpleReversals();
  public static void main(java.lang.String[]);
  public static void doMany();
  public static boolean isPlusDecomposable(int[]);
  public static boolean isMinusDecomposable(int[]);
  public static void reverse(int[], int, int);
  public static void randomReverse(int[]);
  public static int[] rotate(int[], int, int);
  public static boolean isToricSimple(permlib.Permutation);
  public static void doOne(int, int[]);
  public static java.util.HashMap<permlib.Permutation, java.lang.Integer> reversalDistances(int);
  static {};
}
Compiled from "SimpleStatistics.java"
public class permlib.examples.SimpleStatistics {
  public permlib.examples.SimpleStatistics();
  public static void main(java.lang.String[]);
  public static void exceptionalStats(int);
  public static void skeletonAfterReversals(int, int);
}
Compiled from "SimpleStatistics.java"
final class permlib.examples.SimpleStatistics$1 implements permlib.processor.PermProcessor {
  final permlib.property.HereditaryProperty[] val$avEx;
  final int[] val$avoidCounts;
  permlib.examples.SimpleStatistics$1(permlib.property.HereditaryProperty[], int[]);
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
  public int[] counts();
}
Compiled from "SimplesInAv2134AndAv1234.java"
public class permlib.examples.SimplesInAv2134AndAv1234 {
  public permlib.examples.SimplesInAv2134AndAv1234();
  public static void main(java.lang.String[]);
  public static void doClass(permlib.classes.SimplePermClass, int);
  public static void doMaxPos(permlib.classes.SimplePermClass, int);
  public static java.util.HashMap<java.lang.String, java.lang.Integer> getMaxPos(permlib.classes.SimplePermClass, int);
  public static void doMinPos(permlib.classes.SimplePermClass, int);
  public static void doMinMaxPos(permlib.classes.SimplePermClass, int);
  public static void doMaxCount(permlib.classes.SimplePermClass, int);
  public static void doMaxDeletable(permlib.classes.SimplePermClass, int);
  public static int maxDeletable(permlib.Permutation);
  public static boolean[] rightLeftMaxPos(permlib.Permutation);
  public static java.util.ArrayList<permlib.utilities.IntPair> rightLeftMaxPositionsAndValues(permlib.Permutation);
  public static java.lang.String asString(java.util.ArrayList<permlib.utilities.IntPair>);
  public static java.util.HashMap<permlib.Permutation, java.util.ArrayList<java.util.ArrayList<permlib.utilities.IntPair>>> dataForClass(permlib.classes.SimplePermClass, int);
  public static permlib.Permutation nonRLMaxPattern(permlib.Permutation);
  public static boolean[] leftRightMinPos(permlib.Permutation);
  public static int maxCount(permlib.Permutation);
  public static permlib.Permutation minsAndMaxes(permlib.Permutation);
  public static boolean[] minAndMaxPositions(permlib.Permutation);
}
Compiled from "StateMachine.java"
public class permlib.examples.StateMachine {
  static java.util.HashMap<permlib.examples.StateMachine$State, java.math.BigInteger> noPop0;
  static java.util.HashMap<permlib.examples.StateMachine$State, java.math.BigInteger> yesPop0;
  static java.util.HashMap<permlib.examples.StateMachine$State, java.math.BigInteger> noPop1;
  static java.util.HashMap<permlib.examples.StateMachine$State, java.math.BigInteger> yesPop1;
  static java.util.HashMap<permlib.examples.StateMachine$State, java.math.BigInteger> noPop2;
  static java.util.HashMap<permlib.examples.StateMachine$State, java.math.BigInteger> yesPop2;
  public permlib.examples.StateMachine();
  public static void main(java.lang.String[]);
  static void doGeneration();
  static {};
}
Compiled from "StateMachine.java"
class permlib.examples.StateMachine$State {
  static java.util.HashMap<java.lang.Integer, permlib.examples.StateMachine$State> knownStates;
  int a;
  int b;
  int c;
  permlib.examples.StateMachine$State pop;
  permlib.examples.StateMachine$State[] push;
  public static permlib.examples.StateMachine$State getState(int, int, int);
  public void computePop();
  public permlib.examples.StateMachine$State getPop();
  public void computePush();
  public permlib.examples.StateMachine$State[] getPush();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  static {};
}
Compiled from "StrongSimples.java"
public class permlib.examples.StrongSimples {
  public permlib.examples.StrongSimples();
  public static void main(java.lang.String[]);
}
Compiled from "StrongSimples.java"
class permlib.examples.StrongSimples$StrongSimple implements permlib.property.PermProperty {
  permlib.examples.StrongSimples$StrongSimple();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "Temp.java"
public class permlib.examples.Temp {
  public permlib.examples.Temp();
  public static void main(java.lang.String[]);
}
Compiled from "TwoByFourSymReps.java"
public class permlib.examples.TwoByFourSymReps {
  public permlib.examples.TwoByFourSymReps();
  public static void main(java.lang.String[]);
}
Compiled from "TwoByFourSymReps.java"
class permlib.examples.TwoByFourSymReps$PermPair implements java.lang.Comparable<permlib.examples.TwoByFourSymReps$PermPair> {
  permlib.Permutation p;
  permlib.Permutation q;
  final permlib.examples.TwoByFourSymReps this$0;
  public permlib.examples.TwoByFourSymReps$PermPair(permlib.examples.TwoByFourSymReps, permlib.Permutation, permlib.Permutation);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(permlib.examples.TwoByFourSymReps$PermPair);
  public int compareTo(java.lang.Object);
}
Compiled from "TwoLayerStateMachine.java"
public class permlib.examples.TwoLayerStateMachine {
  static java.util.HashMap<permlib.examples.TwoLayerStateMachine$State, java.math.BigInteger> noPop0;
  static java.util.HashMap<permlib.examples.TwoLayerStateMachine$State, java.math.BigInteger> yesPop0;
  static java.util.HashMap<permlib.examples.TwoLayerStateMachine$State, java.math.BigInteger> noPop1;
  static java.util.HashMap<permlib.examples.TwoLayerStateMachine$State, java.math.BigInteger> yesPop1;
  static java.util.HashMap<permlib.examples.TwoLayerStateMachine$State, java.math.BigInteger> noPop2;
  static java.util.HashMap<permlib.examples.TwoLayerStateMachine$State, java.math.BigInteger> yesPop2;
  public permlib.examples.TwoLayerStateMachine();
  public static void main(java.lang.String[]);
  static void doGeneration();
  static {};
}
Compiled from "TwoLayerStateMachine.java"
class permlib.examples.TwoLayerStateMachine$State {
  static java.util.HashMap<java.lang.Integer, permlib.examples.TwoLayerStateMachine$State> knownStates;
  int a;
  int b;
  permlib.examples.TwoLayerStateMachine$State pop;
  permlib.examples.TwoLayerStateMachine$State[] push;
  public static permlib.examples.TwoLayerStateMachine$State getState(int, int);
  public void computePop();
  public permlib.examples.TwoLayerStateMachine$State getPop();
  public void computePush();
  public permlib.examples.TwoLayerStateMachine$State[] getPush();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  static {};
}
Compiled from "UniversalSeparable.java"
public class permlib.examples.UniversalSeparable {
  public permlib.examples.UniversalSeparable();
  public static void main(java.lang.String[]);
}
Compiled from "Width3Simple.java"
public class permlib.examples.Width3Simple {
  public permlib.examples.Width3Simple();
  public static void main(java.lang.String[]);
}
Compiled from "Width3Simple.java"
final class permlib.examples.Width3Simple$1 implements permlib.property.PermProperty {
  permlib.examples.Width3Simple$1();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "WilfEquivalencesInAv231.java"
public class permlib.examples.WilfEquivalencesInAv231 {
  static java.util.HashSet<permlib.Permutation>[] T;
  static java.util.HashSet<permlib.Permutation>[] X;
  public permlib.examples.WilfEquivalencesInAv231();
  public static void generateClasses(int);
  public static java.util.HashSet<permlib.Permutation>[] getT();
  public static java.util.HashSet<permlib.Permutation> getT(int);
}
Compiled from "Yuval00.java"
public class permlib.examples.Yuval00 {
  public permlib.examples.Yuval00();
  public static void main(java.lang.String[]);
  public static permlib.Permutation condensation(permlib.Permutation);
  public static java.util.ArrayList<java.lang.Integer> descentSet(permlib.Permutation);
  public static void twoDesInFive();
  public static void example(int[][], int);
}
Compiled from "MeshInference.java"
public class permlib.mesh.MeshInference {
  permlib.Permutation[] instances;
  java.util.HashSet<permlib.mesh.MeshPattern> avoidedPatterns;
  public permlib.mesh.MeshInference(java.util.Collection<permlib.Permutation>);
  public permlib.mesh.MeshInference(permlib.Permutation[]);
  public java.util.Collection<permlib.mesh.MeshPattern> minimalPatternsFor(permlib.Permutation);
  public void computeAvoidedPatternsTo(int);
  public permlib.mesh.MeshPattern[] getAvoidedPatterns();
}
Compiled from "MeshPattern.java"
public class permlib.mesh.MeshPattern implements java.lang.Comparable<permlib.mesh.MeshPattern> {
  permlib.Permutation p;
  boolean[][] mesh;
  public permlib.mesh.MeshPattern(permlib.Permutation, boolean[][]);
  public permlib.mesh.MeshPattern(permlib.Permutation);
  public permlib.mesh.MeshPattern(java.lang.String);
  public void addShading(int, int);
  public void removeShading(int, int);
  public permlib.mesh.MeshPattern copy();
  public permlib.mesh.MeshPattern deletePoint(int);
  public boolean hasRedundantPoint();
  public boolean isRedundantPoint(int);
  public boolean isAvoidedAt(permlib.Permutation, int[]);
  public boolean isAvoidedBy(permlib.Permutation);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(permlib.mesh.MeshPattern);
  public boolean isFullPattern();
  public boolean isClassicalPattern();
  public void makeFullPattern();
  public static permlib.mesh.MeshPattern reducedPattern(permlib.mesh.MeshPattern, int[]);
  boolean[][] occupationRequirements(permlib.Permutation, int[]);
  java.util.Collection<permlib.mesh.MeshPattern> extensionsFor(permlib.Permutation, int[]);
  boolean contains(permlib.mesh.MeshPattern);
  public int compareTo(java.lang.Object);
}
Compiled from "PermCollector.java"
public class permlib.processor.PermCollector implements permlib.processor.PermProcessor {
  public permlib.processor.PermCollector();
  public permlib.processor.PermCollector(permlib.property.PermProperty);
  public void process(permlib.Permutation);
  public void reset();
  public java.util.HashSet<permlib.Permutation> getCollection();
  public java.lang.String report();
}
Compiled from "PermCounter.java"
public class permlib.processor.PermCounter implements permlib.processor.PermProcessor {
  permlib.property.PermProperty[] secondary;
  public permlib.processor.PermCounter();
  public permlib.processor.PermCounter(permlib.property.PermProperty);
  public permlib.processor.PermCounter(permlib.property.PermProperty, permlib.property.PermProperty[]);
  public permlib.processor.PermCounter(permlib.property.PermProperty, java.util.ArrayList<permlib.property.PermProperty>);
  public void process(permlib.Permutation);
  public void reset();
  public long getCount();
  public long[] getSecondaryCounts();
  public java.lang.String report();
}
Compiled from "PermPrinter.java"
public class permlib.processor.PermPrinter implements permlib.processor.PermProcessor {
  public permlib.processor.PermPrinter();
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
}
Compiled from "PermProcessor.java"
public interface permlib.processor.PermProcessor {
  public abstract void process(permlib.Permutation);
  public abstract void reset();
  public abstract java.lang.String report();
}
Compiled from "PermProcessorCollection.java"
public class permlib.processor.PermProcessorCollection implements permlib.processor.PermProcessor {
  public permlib.processor.PermProcessorCollection(java.util.Collection<permlib.processor.PermProcessor>);
  public permlib.processor.PermProcessorCollection(permlib.processor.PermProcessor...);
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
}
Compiled from "RestrictedPermProcessor.java"
public class permlib.processor.RestrictedPermProcessor implements permlib.processor.PermProcessor {
  public permlib.processor.RestrictedPermProcessor(permlib.processor.PermProcessor, permlib.property.PermProperty);
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
}
Compiled from "AvoidanceTest.java"
public class permlib.property.AvoidanceTest implements permlib.property.HereditaryProperty {
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public static permlib.property.HereditaryProperty getTest(permlib.Permutation, boolean);
  public static permlib.property.HereditaryProperty getTest(permlib.Permutation);
  public static permlib.property.HereditaryProperty getTest(java.lang.String);
}
Compiled from "AvoidanceTest.java"
class permlib.property.AvoidanceTest$1 {
}
Compiled from "AvoidanceTest.java"
abstract class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest extends java.lang.Enum<permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest> implements permlib.property.HereditaryProperty {
  public static final permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest A12;
  public static final permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest A21;
  public static final permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest A123;
  public static final permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest A132;
  public static final permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest A213;
  public static final permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest A312;
  public static final permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest A231;
  public static final permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest A321;
  public static final permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest A2143;
  public static permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest[] values();
  public static permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest valueOf(java.lang.String);
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest(java.lang.String, int, permlib.property.AvoidanceTest$1);
  static {};
}
Compiled from "AvoidanceTest.java"
final class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$1 extends permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest {
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$1(java.lang.String, int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "AvoidanceTest.java"
final class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$2 extends permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest {
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$2(java.lang.String, int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "AvoidanceTest.java"
final class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$3 extends permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest {
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$3(java.lang.String, int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "AvoidanceTest.java"
final class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$4 extends permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest {
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$4(java.lang.String, int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "AvoidanceTest.java"
final class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$5 extends permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest {
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$5(java.lang.String, int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "AvoidanceTest.java"
final class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$6 extends permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest {
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$6(java.lang.String, int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "AvoidanceTest.java"
final class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$7 extends permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest {
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$7(java.lang.String, int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "AvoidanceTest.java"
final class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$8 extends permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest {
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$8(java.lang.String, int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "AvoidanceTest.java"
final class permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$9 extends permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest {
  public static final int MAX_SIZE;
  int[] largeValues;
  int[] smallValues;
  int largeStackTop;
  int smallStackTop;
  permlib.property.AvoidanceTest$SpecialCaseAvoidanceTest$9(java.lang.String, int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "AvoidsDecreasing.java"
public final class permlib.property.AvoidsDecreasing implements permlib.property.HereditaryProperty {
  public permlib.property.AvoidsDecreasing(int);
  public final boolean isSatisfiedBy(permlib.Permutation);
  public final boolean isSatisfiedBy(int[]);
  public final java.util.Collection<permlib.Permutation> getBasis();
  public final java.util.Collection<permlib.Permutation> getBasisTo(int);
}
Compiled from "AvoidsDecreasingTest.java"
public class permlib.property.AvoidsDecreasingTest {
  public permlib.property.AvoidsDecreasingTest();
  public static void setUpClass();
  public static void tearDownClass();
  public void setUp();
  public void tearDown();
  public void testIsSatisfiedBy_Permutation();
}
Compiled from "AvoidsFromRight.java"
public final class permlib.property.AvoidsFromRight extends permlib.property.HereditaryPropertyAdapter {
  public permlib.property.AvoidsFromRight(permlib.Permutation);
  public permlib.property.AvoidsFromRight(java.lang.String);
  public final boolean isSatisfiedBy(permlib.Permutation);
  public final boolean isSatisfiedBy(permlib.Permutation, int);
  public boolean isSatisfiedBy(int[]);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.lang.String toString();
}
Compiled from "AvoidsIncreasing.java"
public final class permlib.property.AvoidsIncreasing implements permlib.property.HereditaryProperty {
  public permlib.property.AvoidsIncreasing(int);
  public final boolean isSatisfiedBy(int[]);
  public final boolean isSatisfiedBy(permlib.Permutation);
  public final java.util.Collection<permlib.Permutation> getBasis();
  public final java.util.Collection<permlib.Permutation> getBasisTo(int);
}
Compiled from "AvoidsIncreasingTest.java"
public class permlib.property.AvoidsIncreasingTest {
  public permlib.property.AvoidsIncreasingTest();
  public static void setUpClass();
  public static void tearDownClass();
  public void setUp();
  public void tearDown();
  public void testIsSatisfiedBy_Permutation();
}
Compiled from "BoundedInversions.java"
public final class permlib.property.BoundedInversions implements permlib.property.HereditaryProperty {
  public permlib.property.BoundedInversions(int);
  public final boolean isSatisfiedBy(permlib.Permutation);
  public final boolean isSatisfiedBy(int[]);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
}
Compiled from "BoundedLength.java"
public final class permlib.property.BoundedLength implements permlib.property.HereditaryProperty {
  public permlib.property.BoundedLength(int);
  public final boolean isSatisfiedBy(permlib.Permutation);
  public final boolean isSatisfiedBy(int[]);
  public final java.util.Collection<permlib.Permutation> getBasis();
  public final java.util.Collection<permlib.Permutation> getBasisTo(int);
}
Compiled from "Complement.java"
public final class permlib.property.Complement implements permlib.property.PermProperty {
  public permlib.property.Complement(permlib.property.PermProperty);
  public final boolean isSatisfiedBy(permlib.Permutation);
  public final boolean isSatisfiedBy(int[]);
}
Compiled from "ConsecutiveAvoidanceTest.java"
public class permlib.property.ConsecutiveAvoidanceTest implements permlib.property.PermProperty {
  public permlib.property.ConsecutiveAvoidanceTest(permlib.Permutation);
  public permlib.property.ConsecutiveAvoidanceTest(java.util.Collection<permlib.Permutation>);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "ConsecutiveInvolvementTest.java"
public class permlib.property.ConsecutiveInvolvementTest implements permlib.property.PermProperty {
  public permlib.property.ConsecutiveInvolvementTest(permlib.Permutation);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "Griddable.java"
public final class permlib.property.Griddable implements permlib.property.PermProperty {
  final permlib.property.PermProperty[][] propertyGrid;
  int rows;
  int cols;
  public permlib.property.Griddable(permlib.property.PermProperty[][]);
  public final boolean isSatisfiedBy(permlib.Permutation);
  public final boolean isSatisfiedBy(permlib.Permutation, boolean);
  public final boolean isSatisfiedBy(int[]);
}
Compiled from "HereditaryMerge.java"
public class permlib.property.HereditaryMerge implements permlib.property.HereditaryProperty {
  public permlib.property.HereditaryMerge(permlib.property.HereditaryProperty...);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public boolean isSatisfiedBy1(int[]);
  public boolean isSatisfiedBy2(int[]);
  public static void main(java.lang.String[]);
}
Compiled from "HereditaryMerge.java"
final class permlib.property.HereditaryMerge$1 implements permlib.processor.PermProcessor {
  final permlib.property.HereditaryProperty val$m;
  final java.util.HashSet val$basis;
  permlib.property.HereditaryMerge$1(permlib.property.HereditaryProperty, java.util.HashSet);
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
}
Compiled from "HereditaryProperty.java"
public interface permlib.property.HereditaryProperty extends permlib.property.PermProperty {
  public abstract java.util.Collection<permlib.Permutation> getBasis();
  public abstract java.util.Collection<permlib.Permutation> getBasisTo(int);
}
Compiled from "HereditaryPropertyAdapter.java"
public abstract class permlib.property.HereditaryPropertyAdapter implements permlib.property.HereditaryProperty {
  public permlib.property.HereditaryPropertyAdapter();
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public static permlib.property.HereditaryProperty forceHereditary(permlib.property.PermProperty);
  public java.lang.String toString();
}
Compiled from "HereditaryPropertyAdapter.java"
class permlib.property.HereditaryPropertyAdapter$1HP extends permlib.property.HereditaryPropertyAdapter {
  permlib.property.PermProperty property;
  public permlib.property.HereditaryPropertyAdapter$1HP(permlib.property.PermProperty);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "Intersection.java"
public class permlib.property.Intersection implements permlib.property.PermProperty {
  public permlib.property.Intersection(java.util.Collection<permlib.property.PermProperty>);
  public permlib.property.Intersection(permlib.property.PermProperty...);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public java.lang.String toString();
}
Compiled from "IntervalAvoidanceTest.java"
public class permlib.property.IntervalAvoidanceTest implements permlib.property.PermProperty {
  public int[] pattern;
  public permlib.property.IntervalAvoidanceTest(permlib.Permutation);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public static void main(java.lang.String[]);
}
Compiled from "Involution.java"
public class permlib.property.Involution implements permlib.property.PermProperty {
  public permlib.property.Involution();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public java.lang.String toString();
}
Compiled from "Involves.java"
public class permlib.property.Involves implements permlib.property.PermProperty {
  public permlib.property.Involves(permlib.Permutation);
  public permlib.property.Involves(java.lang.String);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public int[] involvedWhere(permlib.Permutation);
  public java.lang.String toString();
}
Compiled from "InvolvesFromRight.java"
public class permlib.property.InvolvesFromRight implements permlib.property.PermProperty {
  int[] indices;
  public permlib.property.InvolvesFromRight(permlib.Permutation);
  public permlib.property.InvolvesFromRight(java.lang.String);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public boolean isSatisfiedBy(permlib.Permutation, int);
  public boolean isSatisfiedBy(int[], int);
  public int[] involvedWhere(permlib.Permutation);
  public java.lang.String toString();
}
Compiled from "MinusIndecomposable.java"
public class permlib.property.MinusIndecomposable implements permlib.property.PermProperty {
  public permlib.property.MinusIndecomposable();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public java.lang.String toString();
}
Compiled from "MinusIrreducible.java"
public class permlib.property.MinusIrreducible implements permlib.property.PermProperty {
  public permlib.property.MinusIrreducible();
  public boolean isSatisfiedBy(permlib.Permutation);
  public java.lang.String toString();
  public boolean isSatisfiedBy(int[]);
}
Compiled from "MultipleAvoidsFromRight.java"
public class permlib.property.MultipleAvoidsFromRight implements permlib.property.HereditaryProperty {
  public static void main(java.lang.String[]);
  public permlib.property.MultipleAvoidsFromRight(java.util.Collection<permlib.Permutation>);
  public permlib.property.MultipleAvoidsFromRight(permlib.Permutation[]);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(permlib.Permutation, int);
  public boolean isSatisfiedBy(int[]);
  static int access$000(permlib.property.MultipleAvoidsFromRight);
}
Compiled from "MultipleAvoidsFromRight.java"
class permlib.property.MultipleAvoidsFromRight$ArrayWrapper {
  int[] elements;
  final permlib.property.MultipleAvoidsFromRight this$0;
  public java.lang.String toString();
  public permlib.property.MultipleAvoidsFromRight$ArrayWrapper(permlib.property.MultipleAvoidsFromRight, int[]);
  public permlib.property.MultipleAvoidsFromRight$ArrayWrapper(permlib.property.MultipleAvoidsFromRight, permlib.Permutation, int);
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "PermProperty.java"
public interface permlib.property.PermProperty {
  public static final permlib.property.PermProperty INCREASING;
  public static final permlib.property.PermProperty DECREASING;
  public static final permlib.property.PermProperty SIMPLE;
  public static final permlib.property.PermProperty EMPTY;
  public abstract boolean isSatisfiedBy(permlib.Permutation);
  public abstract boolean isSatisfiedBy(int[]);
  static {};
}
Compiled from "PermProperty.java"
final class permlib.property.PermProperty$1 implements permlib.property.PermProperty {
  permlib.property.PermProperty$1();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "PlusCompletion.java"
public final class permlib.property.PlusCompletion implements permlib.property.PermProperty {
  final permlib.property.PermProperty prop;
  public permlib.property.PlusCompletion(permlib.property.PermProperty);
  public final boolean isSatisfiedBy(permlib.Permutation);
  public final boolean isSatisfiedBy(int[]);
}
Compiled from "PlusIndecomposable.java"
public final class permlib.property.PlusIndecomposable implements permlib.property.PermProperty {
  public permlib.property.PlusIndecomposable();
  public final boolean isSatisfiedBy(permlib.Permutation);
  public final boolean isSatisfiedBy(int[]);
  public java.lang.String toString();
}
Compiled from "PlusIrreducible.java"
public class permlib.property.PlusIrreducible implements permlib.property.PermProperty {
  public permlib.property.PlusIrreducible();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public java.lang.String toString();
}
Compiled from "Simple.java"
public class permlib.property.Simple implements permlib.property.PermProperty {
  public permlib.property.Simple();
  public boolean isSatisfiedBy(permlib.Permutation);
  public java.lang.String toString();
  public boolean isSatisfiedBy(int[]);
}
Compiled from "SynchronizedHereditaryProperty.java"
public class permlib.property.SynchronizedHereditaryProperty implements permlib.property.HereditaryProperty {
  permlib.property.HereditaryProperty hProp;
  public permlib.property.SynchronizedHereditaryProperty(permlib.property.HereditaryProperty);
  public synchronized java.util.Collection<permlib.Permutation> getBasis();
  public synchronized java.util.Collection<permlib.Permutation> getBasisTo(int);
  public synchronized boolean isSatisfiedBy(permlib.Permutation);
  public synchronized boolean isSatisfiedBy(int[]);
}
Compiled from "Union.java"
public class permlib.property.Union implements permlib.property.PermProperty {
  public permlib.property.Union(java.util.Collection<permlib.property.PermProperty>);
  public permlib.property.Union(permlib.property.PermProperty...);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public java.lang.String toString();
}
Compiled from "Universal.java"
public class permlib.property.Universal implements permlib.property.HereditaryProperty {
  public permlib.property.Universal();
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public java.lang.String toString();
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
}
Compiled from "Vexillary.java"
public class permlib.property.Vexillary implements permlib.property.HereditaryProperty {
  static permlib.property.HereditaryProperty A2143;
  java.util.ArrayDeque<permlib.Permutation> q;
  java.util.ArrayDeque<permlib.Permutation> children;
  java.util.ArrayDeque<int[]> arrayChildren;
  java.util.ArrayDeque<int[]> aq;
  public permlib.property.Vexillary(int);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
  public java.util.ArrayDeque<permlib.Permutation> children(permlib.Permutation);
  public java.util.ArrayDeque<int[]> children(int[]);
  public boolean vexBound(permlib.Permutation, int);
  public boolean vexBound(int[], int);
  public permlib.property.Vexillary$RS rs(permlib.Permutation);
  public permlib.property.Vexillary$RS rs(int[]);
  public static void main(java.lang.String[]);
  public static void checkExtensions(permlib.Permutation, int, permlib.property.Vexillary);
  public static void checkExtensions(int[], int, permlib.property.Vexillary);
  static {};
}
Compiled from "Vexillary.java"
class permlib.property.Vexillary$RS {
  int r;
  int s;
  final permlib.property.Vexillary this$0;
  permlib.property.Vexillary$RS(permlib.property.Vexillary);
}
Compiled from "Staircase.java"
public class permlib.staircase.Staircase {
  static final permlib.property.HereditaryProperty A321;
  static final int NOT_FOUND;
  static final int DX;
  static final int DY;
  static final int unit;
  int[] blockEncoding;
  public permlib.staircase.Staircase(int[]);
  public static permlib.staircase.Staircase genericStaircase(int, int);
  public static permlib.staircase.Staircase randomStaircase(int, int);
  public static permlib.staircase.Staircase randBalStaircase(int, int);
  public permlib.Permutation toPermutation();
  public int[] firstRivets(int);
  public int[] nextRivets(int[]);
  public java.util.ArrayList<int[]> getRivets(int);
  public java.lang.String rivetsToPSTricks(int, int);
  public java.lang.String toPSTricks(int);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "BTree.java"
public class permlib.utilities.BTree {
  public permlib.utilities.BTree(permlib.utilities.BTree, permlib.utilities.BTree);
  public permlib.utilities.BTree();
  public permlib.utilities.BTree getLeft();
  public void setLeft(permlib.utilities.BTree);
  public permlib.utilities.BTree getRight();
  public void setRight(permlib.utilities.BTree);
  public static int getSize(permlib.utilities.BTree);
  public static java.lang.StringBuffer dyckStringBuffer(permlib.utilities.BTree);
  public static void dyckStringBuffer(permlib.utilities.BTree, java.lang.StringBuffer);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public static permlib.utilities.BTree descendingTree(permlib.Permutation);
  public static permlib.utilities.BTree descendingTree(int[], int, int);
  public java.lang.String toString();
  public static void main(java.lang.String[]);
  public int getSize();
}
Compiled from "Combinations.java"
public class permlib.utilities.Combinations implements java.lang.Iterable<int[]> {
  public static int[] complement(int, int[]);
  public permlib.utilities.Combinations(int, int);
  public java.util.Iterator<int[]> iterator();
  public static void main(java.lang.String[]);
  public static boolean nextCombination(int[], int);
  public static int[] firstCombination(int);
  static int access$000(permlib.utilities.Combinations);
  static int access$100(permlib.utilities.Combinations);
}
Compiled from "Combinations.java"
class permlib.utilities.Combinations$1 implements java.util.Iterator<int[]> {
  int[] c;
  final permlib.utilities.Combinations this$0;
  permlib.utilities.Combinations$1(permlib.utilities.Combinations);
  public boolean hasNext();
  public int[] next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "Composition.java"
public class permlib.utilities.Composition {
  int n;
  int k;
  int[] parts;
  public permlib.utilities.Composition(int, int);
  public boolean hasNext();
  public int[] next();
  public int[] getParts();
  public static void main(java.lang.String[]);
}
Compiled from "HereditaryUtilities.java"
public class permlib.utilities.HereditaryUtilities {
  public static final permlib.property.HereditaryProperty EMPTY;
  public permlib.utilities.HereditaryUtilities();
  public static permlib.property.HereditaryProperty merge(permlib.property.HereditaryProperty, permlib.property.HereditaryProperty);
  public static permlib.property.HereditaryProperty merge2(permlib.property.HereditaryProperty, permlib.property.HereditaryProperty);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "HereditaryUtilities.java"
final class permlib.utilities.HereditaryUtilities$1 implements permlib.property.HereditaryProperty {
  permlib.utilities.HereditaryUtilities$1();
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "HereditaryUtilities.java"
final class permlib.utilities.HereditaryUtilities$2 implements permlib.property.HereditaryProperty {
  final permlib.property.HereditaryProperty val$a;
  final permlib.property.HereditaryProperty val$b;
  permlib.utilities.HereditaryUtilities$2(permlib.property.HereditaryProperty, permlib.property.HereditaryProperty);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "HereditaryUtilities.java"
final class permlib.utilities.HereditaryUtilities$3 implements permlib.property.HereditaryProperty {
  final permlib.property.HereditaryProperty val$a;
  final permlib.property.HereditaryProperty val$b;
  permlib.utilities.HereditaryUtilities$3(permlib.property.HereditaryProperty, permlib.property.HereditaryProperty);
  public java.util.Collection<permlib.Permutation> getBasis();
  public java.util.Collection<permlib.Permutation> getBasisTo(int);
  public boolean isSatisfiedBy(permlib.Permutation);
  public boolean isSatisfiedBy(int[]);
}
Compiled from "HereditaryUtilities.java"
final class permlib.utilities.HereditaryUtilities$4 implements permlib.processor.PermProcessor {
  final permlib.property.HereditaryProperty val$m;
  final java.util.HashSet val$basis;
  permlib.utilities.HereditaryUtilities$4(permlib.property.HereditaryProperty, java.util.HashSet);
  public void process(permlib.Permutation);
  public void reset();
  public java.lang.String report();
}
Compiled from "IOUtilities.java"
public class permlib.utilities.IOUtilities {
  public permlib.utilities.IOUtilities();
  public static int[] getNumbers(java.lang.String);
  public static boolean isNumbersString(java.lang.String);
  public static boolean isPermString(java.lang.String);
  public static boolean isPermsString(java.lang.String);
}
Compiled from "IntPair.java"
public class permlib.utilities.IntPair implements java.lang.Comparable<permlib.utilities.IntPair> {
  public permlib.utilities.IntPair(int, int);
  public int getFirst();
  public int getSecond();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(permlib.utilities.IntPair);
  public permlib.utilities.IntPair reverse();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "InvolutionUtilities.java"
public class permlib.utilities.InvolutionUtilities {
  public permlib.utilities.InvolutionUtilities();
  public static java.util.List<permlib.Permutation> directInvolutionExtensions(permlib.Permutation);
  public static java.util.List<permlib.Permutation> directInvolutionExtensions(permlib.Permutation, permlib.property.PermProperty);
  public static boolean isInvolution(permlib.Permutation);
  public static permlib.Permutation insert(permlib.Permutation, int, int);
}
Compiled from "MultisetCodes.java"
public class permlib.utilities.MultisetCodes implements java.lang.Iterable<int[]> {
  int n;
  int k;
  java.util.Iterator<int[]> cs;
  public permlib.utilities.MultisetCodes(int, int);
  public java.util.Iterator<int[]> iterator();
  public static void main(java.lang.String[]);
}
Compiled from "MultisetCodes.java"
class permlib.utilities.MultisetCodes$1 implements java.util.Iterator<int[]> {
  int[] result;
  final permlib.utilities.MultisetCodes this$0;
  permlib.utilities.MultisetCodes$1(permlib.utilities.MultisetCodes);
  public boolean hasNext();
  public int[] next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "Multisets.java"
public class permlib.utilities.Multisets<T> implements java.lang.Iterable<java.util.Collection<T>> {
  T[] pool;
  final java.util.Iterator<int[]> m;
  public permlib.utilities.Multisets(java.util.Set<T>, int);
  public java.util.Iterator<java.util.Collection<T>> iterator();
  public static void main(java.lang.String[]);
}
Compiled from "Multisets.java"
class permlib.utilities.Multisets$1 implements java.util.Iterator<java.util.Collection<T>> {
  final permlib.utilities.Multisets this$0;
  permlib.utilities.Multisets$1(permlib.utilities.Multisets);
  public boolean hasNext();
  public java.util.Collection<T> next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "NumberList.java"
public final class permlib.utilities.NumberList {
  public permlib.utilities.NumberList(java.lang.String);
  public int[] getNumbers();
}
Compiled from "Partitions.java"
public class permlib.utilities.Partitions implements java.lang.Iterable<java.util.ArrayList<java.lang.Integer>> {
  static final int NO_RESTRICTIONS;
  final int n;
  final int k;
  public permlib.utilities.Partitions(int);
  public permlib.utilities.Partitions(int, int);
  public java.util.Iterator<java.util.ArrayList<java.lang.Integer>> iterator();
  public static java.util.ArrayList<permlib.utilities.IntPair> toExponentForm(java.util.ArrayList<java.lang.Integer>);
  public static void main(java.lang.String[]);
}
Compiled from "Partitions.java"
class permlib.utilities.Partitions$1 implements java.util.Iterator<java.util.ArrayList<java.lang.Integer>> {
  java.util.ArrayList<java.lang.Integer> p;
  boolean updated;
  final permlib.utilities.Partitions this$0;
  permlib.utilities.Partitions$1(permlib.utilities.Partitions);
  public boolean hasNext();
  public java.util.ArrayList<java.lang.Integer> next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "PermPropertyUtilities.java"
public final class permlib.utilities.PermPropertyUtilities {
  public permlib.utilities.PermPropertyUtilities();
  public static final permlib.property.PermProperty union(java.util.Collection<permlib.property.PermProperty>);
  public static final permlib.property.PermProperty union(permlib.property.PermProperty...);
  public static final permlib.property.PermProperty intersection(java.util.Collection<permlib.property.PermProperty>);
  public static final permlib.property.PermProperty intersection(permlib.property.PermProperty...);
  public static final permlib.property.PermProperty complement(permlib.property.PermProperty);
}
Compiled from "RestrictedPermutation.java"
public class permlib.utilities.RestrictedPermutation {
  java.lang.String basisString;
  java.lang.String permString;
  permlib.Permutation p;
  java.util.ArrayList<permlib.property.PermProperty> properties;
  boolean simple;
  boolean involution;
  java.util.HashSet<permlib.utilities.IntPair> forbiddenPairs;
  java.util.HashSet<permlib.utilities.IntPair> userForbiddenPairs;
  public static final int NO_MONOTONE_REQUIRMENTS;
  public static final int FORBIDDEN;
  public static final int SINGLETON;
  public static final int INCREASING;
  public static final int DECREASING;
  public permlib.utilities.RestrictedPermutation(java.lang.String, java.lang.String, boolean, boolean);
  public java.lang.String getBasisString();
  public java.lang.String getPermString();
  public boolean isSimple();
  public boolean isInvolution();
  public permlib.Permutation getPerm();
  public boolean hasProperties(permlib.Permutation);
  public boolean hasProperties();
  public boolean propertiesForbid(int, int);
  public boolean userForbids(int, int);
  public boolean forbids(int, int);
  public int montoneRequirements(int, int);
  public permlib.utilities.RestrictedPermutation addUserForbiddenPair(int, int);
  public permlib.utilities.RestrictedPermutation removeUserForbiddenPair(int, int);
  public permlib.utilities.RestrictedPermutation replacePoint(int, permlib.Permutation);
  public permlib.utilities.RestrictedPermutation replaceSpace(int, int, permlib.Permutation);
  public permlib.utilities.RestrictedPermutation changePerm(java.lang.String);
  public permlib.utilities.RestrictedPermutation updateBasis(java.lang.String);
  public permlib.utilities.RestrictedPermutation setSimpleState(boolean);
  public permlib.utilities.RestrictedPermutation setInvolutionState(boolean);
  public permlib.utilities.RestrictedPermutation addPoint(int, int);
  public permlib.utilities.RestrictedPermutation deletePointAt(int);
  public java.lang.String toString();
}
