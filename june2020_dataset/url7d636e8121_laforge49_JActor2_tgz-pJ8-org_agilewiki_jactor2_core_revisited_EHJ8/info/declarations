Compiled from "GwtIncompatible.java"
public interface org.agilewiki.jactor2.core.GwtIncompatible extends java.lang.annotation.Annotation {
  public abstract java.lang.String value();
}
Compiled from "Blade.java"
public interface org.agilewiki.jactor2.core.blades.Blade {
  public abstract org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "BladeBase.java"
public abstract class org.agilewiki.jactor2.core.blades.BladeBase implements org.agilewiki.jactor2.core.blades.Blade {
  public org.agilewiki.jactor2.core.blades.BladeBase();
  public int hashCode();
  public boolean isInitialized();
  protected void _initialize(org.agilewiki.jactor2.core.reactors.Reactor);
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
  protected <RESPONSE_TYPE> void send(org.agilewiki.jactor2.core.messages.AOp<RESPONSE_TYPE>);
  public boolean isDirectOk(org.agilewiki.jactor2.core.reactors.Reactor);
  public void directCheck(org.agilewiki.jactor2.core.reactors.Reactor);
}
Compiled from "BladeBase.java"
public abstract class org.agilewiki.jactor2.core.blades.BladeBase$AReq<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.AOp<RESPONSE_TYPE> {
  final org.agilewiki.jactor2.core.blades.BladeBase this$0;
  public org.agilewiki.jactor2.core.blades.BladeBase$AReq(org.agilewiki.jactor2.core.blades.BladeBase, java.lang.String);
}
Compiled from "BladeBase.java"
public abstract class org.agilewiki.jactor2.core.blades.BladeBase$ASig extends org.agilewiki.jactor2.core.messages.AIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.blades.BladeBase this$0;
  public org.agilewiki.jactor2.core.blades.BladeBase$ASig(org.agilewiki.jactor2.core.blades.BladeBase, java.lang.String);
}
Compiled from "BladeBase.java"
public abstract class org.agilewiki.jactor2.core.blades.BladeBase$OAReq<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.SAOp<RESPONSE_TYPE> {
  final org.agilewiki.jactor2.core.blades.BladeBase this$0;
  public org.agilewiki.jactor2.core.blades.BladeBase$OAReq(org.agilewiki.jactor2.core.blades.BladeBase, java.lang.String);
}
Compiled from "BladeBase.java"
public abstract class org.agilewiki.jactor2.core.blades.BladeBase$SReq<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.SOp<RESPONSE_TYPE> {
  final org.agilewiki.jactor2.core.blades.BladeBase this$0;
  public org.agilewiki.jactor2.core.blades.BladeBase$SReq(org.agilewiki.jactor2.core.blades.BladeBase, java.lang.String);
}
Compiled from "BladeBase.java"
public abstract class org.agilewiki.jactor2.core.blades.BladeBase$SSig extends org.agilewiki.jactor2.core.messages.SIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.blades.BladeBase this$0;
  public org.agilewiki.jactor2.core.blades.BladeBase$SSig(org.agilewiki.jactor2.core.blades.BladeBase, java.lang.String);
}
Compiled from "BlockingBlade.java"
public interface org.agilewiki.jactor2.core.blades.BlockingBlade extends org.agilewiki.jactor2.core.blades.Blade {
  public abstract org.agilewiki.jactor2.core.reactors.BlockingReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "BlockingBladeBase.java"
public class org.agilewiki.jactor2.core.blades.BlockingBladeBase extends org.agilewiki.jactor2.core.blades.BladeBase implements org.agilewiki.jactor2.core.blades.BlockingBlade {
  public org.agilewiki.jactor2.core.blades.BlockingBladeBase() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.blades.BlockingBladeBase(org.agilewiki.jactor2.core.reactors.BlockingReactor);
  public org.agilewiki.jactor2.core.reactors.BlockingReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "IsolationBlade.java"
public interface org.agilewiki.jactor2.core.blades.IsolationBlade extends org.agilewiki.jactor2.core.blades.Blade {
  public abstract org.agilewiki.jactor2.core.reactors.IsolationReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "IsolationBladeBase.java"
public class org.agilewiki.jactor2.core.blades.IsolationBladeBase extends org.agilewiki.jactor2.core.blades.BladeBase implements org.agilewiki.jactor2.core.blades.IsolationBlade {
  public org.agilewiki.jactor2.core.blades.IsolationBladeBase() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.blades.IsolationBladeBase(org.agilewiki.jactor2.core.reactors.IsolationReactor);
  public org.agilewiki.jactor2.core.reactors.IsolationReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "NamedBlade.java"
public interface org.agilewiki.jactor2.core.blades.NamedBlade {
  public abstract java.lang.String getName();
}
Compiled from "NonBlockingBlade.java"
public interface org.agilewiki.jactor2.core.blades.NonBlockingBlade extends org.agilewiki.jactor2.core.blades.Blade {
  public abstract org.agilewiki.jactor2.core.reactors.NonBlockingReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "NonBlockingBladeBase.java"
public class org.agilewiki.jactor2.core.blades.NonBlockingBladeBase extends org.agilewiki.jactor2.core.blades.BladeBase implements org.agilewiki.jactor2.core.blades.NonBlockingBlade {
  public org.agilewiki.jactor2.core.blades.NonBlockingBladeBase() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.blades.NonBlockingBladeBase(org.agilewiki.jactor2.core.reactors.NonBlockingReactor);
  public org.agilewiki.jactor2.core.reactors.NonBlockingReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "SwingBoundBlade.java"
public interface org.agilewiki.jactor2.core.blades.SwingBoundBlade extends org.agilewiki.jactor2.core.blades.Blade {
  public abstract org.agilewiki.jactor2.core.reactors.SwingBoundReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "SwingBoundBladeBase.java"
public class org.agilewiki.jactor2.core.blades.SwingBoundBladeBase extends org.agilewiki.jactor2.core.blades.BladeBase implements org.agilewiki.jactor2.core.blades.SwingBoundBlade {
  public org.agilewiki.jactor2.core.blades.SwingBoundBladeBase() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.blades.SwingBoundBladeBase(org.agilewiki.jactor2.core.reactors.SwingBoundReactor);
  public org.agilewiki.jactor2.core.reactors.SwingBoundReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "ThreadBoundBlade.java"
public interface org.agilewiki.jactor2.core.blades.ThreadBoundBlade extends org.agilewiki.jactor2.core.blades.Blade {
  public abstract org.agilewiki.jactor2.core.reactors.ThreadBoundReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "ThreadBoundBladeBase.java"
public class org.agilewiki.jactor2.core.blades.ThreadBoundBladeBase extends org.agilewiki.jactor2.core.blades.BladeBase implements org.agilewiki.jactor2.core.blades.ThreadBoundBlade {
  public org.agilewiki.jactor2.core.blades.ThreadBoundBladeBase() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.blades.ThreadBoundBladeBase(org.agilewiki.jactor2.core.reactors.ThreadBoundReactor);
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "AsyncHang.java"
public class org.agilewiki.jactor2.core.examples.AsyncHang extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.examples.AsyncHang() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> hangAOp();
}
Compiled from "AsyncHang.java"
class org.agilewiki.jactor2.core.examples.AsyncHang$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.examples.AsyncHang this$0;
  org.agilewiki.jactor2.core.examples.AsyncHang$1(org.agilewiki.jactor2.core.examples.AsyncHang, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Hanger.java"
class org.agilewiki.jactor2.core.examples.Hanger extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  org.agilewiki.jactor2.core.examples.Hanger() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.SIOp<java.lang.Void> looperSOp();
  org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> sleeperSOp();
}
Compiled from "Hanger.java"
class org.agilewiki.jactor2.core.examples.Hanger$1 extends org.agilewiki.jactor2.core.messages.SIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.examples.Hanger this$0;
  org.agilewiki.jactor2.core.examples.Hanger$1(org.agilewiki.jactor2.core.examples.Hanger, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "Hanger.java"
class org.agilewiki.jactor2.core.examples.Hanger$2 extends org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.examples.Hanger this$0;
  org.agilewiki.jactor2.core.examples.Hanger$2(org.agilewiki.jactor2.core.examples.Hanger, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  public java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  public java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "HungClose.java"
public class org.agilewiki.jactor2.core.examples.HungClose {
  public org.agilewiki.jactor2.core.examples.HungClose();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "InProcess.java"
public class org.agilewiki.jactor2.core.examples.InProcess extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.examples.InProcess() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> mightHangOp();
}
Compiled from "InProcess.java"
class org.agilewiki.jactor2.core.examples.InProcess$1 extends org.agilewiki.jactor2.core.messages.SAOp<java.lang.Void> {
  org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> responseProcessor;
  org.agilewiki.jactor2.core.messages.ExceptionHandler<java.lang.Void> exceptionHandler;
  final org.agilewiki.jactor2.core.examples.InProcess this$0;
  org.agilewiki.jactor2.core.examples.InProcess$1(org.agilewiki.jactor2.core.examples.InProcess, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl) throws java.lang.Exception;
  static org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl access$000(org.agilewiki.jactor2.core.examples.InProcess$1);
  static org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl access$100(org.agilewiki.jactor2.core.examples.InProcess$1);
}
Compiled from "InProcess.java"
class org.agilewiki.jactor2.core.examples.InProcess$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.examples.InProcess$1 this$1;
  org.agilewiki.jactor2.core.examples.InProcess$1$1(org.agilewiki.jactor2.core.examples.InProcess$1);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "InProcess.java"
class org.agilewiki.jactor2.core.examples.InProcess$1$2 extends org.agilewiki.jactor2.core.messages.ExceptionHandler<java.lang.Void> {
  final org.agilewiki.jactor2.core.examples.InProcess$1 this$1;
  org.agilewiki.jactor2.core.examples.InProcess$1$2(org.agilewiki.jactor2.core.examples.InProcess$1);
  public void processException(java.lang.Exception, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor) throws java.lang.Exception;
}
Compiled from "InProcess.java"
class org.agilewiki.jactor2.core.examples.InProcess$1$3 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.examples.IndirectDelay val$indirectDelay;
  final org.agilewiki.jactor2.core.examples.InProcess$1 this$1;
  org.agilewiki.jactor2.core.examples.InProcess$1$3(org.agilewiki.jactor2.core.examples.InProcess$1, org.agilewiki.jactor2.core.examples.IndirectDelay);
  public void processAsyncResponse(java.lang.Void);
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "InProcess.java"
class org.agilewiki.jactor2.core.examples.IndirectDelay extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.examples.IndirectDelay() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> iSleepOp();
}
Compiled from "InProcess.java"
class org.agilewiki.jactor2.core.examples.IndirectDelay$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.examples.IndirectDelay this$0;
  org.agilewiki.jactor2.core.examples.IndirectDelay$1(org.agilewiki.jactor2.core.examples.IndirectDelay, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "LooperMessageTimeout.java"
public class org.agilewiki.jactor2.core.examples.LooperMessageTimeout {
  public org.agilewiki.jactor2.core.examples.LooperMessageTimeout();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "OneWayError.java"
class org.agilewiki.jactor2.core.examples.OneRuntime extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.examples.OneRuntime() throws java.lang.Exception;
}
Compiled from "OneWayError.java"
public class org.agilewiki.jactor2.core.examples.OneRuntime$OneWaySOp extends org.agilewiki.jactor2.core.messages.SIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.examples.OneRuntime this$0;
  public org.agilewiki.jactor2.core.examples.OneRuntime$OneWaySOp(org.agilewiki.jactor2.core.examples.OneRuntime, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "OneWayError.java"
public class org.agilewiki.jactor2.core.examples.OneWayError extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.examples.OneWayError() throws java.lang.Exception;
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "OneWayError.java"
public class org.agilewiki.jactor2.core.examples.OneWayError$IndirectAOp extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.examples.OneWayError this$0;
  public org.agilewiki.jactor2.core.examples.OneWayError$IndirectAOp(org.agilewiki.jactor2.core.examples.OneWayError, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "SleeperMessageTimeout.java"
public class org.agilewiki.jactor2.core.examples.SleeperMessageTimeout {
  public org.agilewiki.jactor2.core.examples.SleeperMessageTimeout();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "CallTestBase.java"
public class org.agilewiki.jactor2.core.impl.CallTestBase extends junit.framework.TestCase {
  public org.agilewiki.jactor2.core.impl.CallTestBase();
  protected <RESPONSE_TYPE> RESPONSE_TYPE call(org.agilewiki.jactor2.core.messages.AOp<RESPONSE_TYPE>) throws java.lang.Exception;
  protected <RESPONSE_TYPE> RESPONSE_TYPE call(org.agilewiki.jactor2.core.messages.SOp<RESPONSE_TYPE>) throws java.lang.Exception;
}
Compiled from "Delay.java"
public class org.agilewiki.jactor2.core.impl.Delay extends org.agilewiki.jactor2.core.blades.BlockingBladeBase {
  public org.agilewiki.jactor2.core.impl.Delay() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.impl.Delay(org.agilewiki.jactor2.core.reactors.BlockingReactor);
  public org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> sleepSOp(int);
}
Compiled from "Delay.java"
class org.agilewiki.jactor2.core.impl.Delay$1 extends org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> {
  final int val$_delay;
  final org.agilewiki.jactor2.core.impl.Delay this$0;
  org.agilewiki.jactor2.core.impl.Delay$1(org.agilewiki.jactor2.core.impl.Delay, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, int);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "Plant.java"
public final class org.agilewiki.jactor2.core.impl.Plant extends org.agilewiki.jactor2.core.plant.impl.PlantBase {
  public org.agilewiki.jactor2.core.impl.Plant() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.impl.Plant(int) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.impl.Plant(org.agilewiki.jactor2.core.impl.mtPlant.PlantConfiguration) throws java.lang.Exception;
}
Compiled from "BladeA.java"
public class org.agilewiki.jactor2.core.impl.blades.BladeA {
  public final org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> throwAOp;
  public org.agilewiki.jactor2.core.impl.blades.BladeA(org.agilewiki.jactor2.core.reactors.Reactor);
}
Compiled from "BladeA.java"
class org.agilewiki.jactor2.core.impl.blades.BladeA$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.impl.blades.BladeA this$0;
  org.agilewiki.jactor2.core.impl.blades.BladeA$1(org.agilewiki.jactor2.core.impl.blades.BladeA, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "BladeC.java"
public class org.agilewiki.jactor2.core.impl.blades.BladeC {
  public org.agilewiki.jactor2.core.impl.blades.BladeC() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.String> throwAOp();
}
Compiled from "BladeC.java"
class org.agilewiki.jactor2.core.impl.blades.BladeC$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.String> {
  final org.agilewiki.jactor2.core.impl.blades.BladeC this$0;
  org.agilewiki.jactor2.core.impl.blades.BladeC$1(org.agilewiki.jactor2.core.impl.blades.BladeC, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.String>) throws java.lang.Exception;
}
Compiled from "BladeC.java"
class org.agilewiki.jactor2.core.impl.blades.BladeC$1$1 extends org.agilewiki.jactor2.core.messages.ExceptionHandler<java.lang.String> {
  final org.agilewiki.jactor2.core.impl.blades.BladeC$1 this$1;
  org.agilewiki.jactor2.core.impl.blades.BladeC$1$1(org.agilewiki.jactor2.core.impl.blades.BladeC$1);
  public java.lang.String processException(java.lang.Exception) throws java.lang.Exception;
  public java.lang.Object processException(java.lang.Exception) throws java.lang.Exception;
}
Compiled from "Test1.java"
public class org.agilewiki.jactor2.core.impl.blades.Test1 extends org.agilewiki.jactor2.core.impl.CallTestBase {
  public org.agilewiki.jactor2.core.impl.blades.Test1();
  public void testI() throws java.lang.Exception;
}
Compiled from "Test3.java"
public class org.agilewiki.jactor2.core.impl.blades.Test3 extends org.agilewiki.jactor2.core.impl.CallTestBase {
  public org.agilewiki.jactor2.core.impl.blades.Test3();
  public void testI() throws java.lang.Exception;
}
Compiled from "DataProcessor.java"
public interface org.agilewiki.jactor2.core.impl.blades.firehose.DataProcessor extends org.agilewiki.jactor2.core.blades.Blade {
  public abstract org.agilewiki.jactor2.core.messages.AIOp<java.lang.Void> processDataAOp(org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseData);
}
Compiled from "EndStage.java"
public class org.agilewiki.jactor2.core.impl.blades.firehose.EndStage extends org.agilewiki.jactor2.core.blades.IsolationBladeBase implements org.agilewiki.jactor2.core.impl.blades.firehose.DataProcessor {
  public org.agilewiki.jactor2.core.impl.blades.firehose.EndStage() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AIOp<java.lang.Void> processDataAOp(org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseData);
}
Compiled from "EndStage.java"
class org.agilewiki.jactor2.core.impl.blades.firehose.EndStage$1 extends org.agilewiki.jactor2.core.messages.AIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseData val$_firehoseData;
  final org.agilewiki.jactor2.core.impl.blades.firehose.EndStage this$0;
  org.agilewiki.jactor2.core.impl.blades.firehose.EndStage$1(org.agilewiki.jactor2.core.impl.blades.firehose.EndStage, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseData);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "FirehoseData.java"
public class org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseData {
  public org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseData(org.agilewiki.jactor2.core.messages.BoundResponseProcessor<java.lang.Void>, java.util.List<java.lang.Long>);
  public org.agilewiki.jactor2.core.messages.BoundResponseProcessor<java.lang.Void> getAck();
  public java.util.List<java.lang.Long> getContent();
}
Compiled from "FirehoseTest.java"
public class org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseTest extends junit.framework.TestCase {
  public org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseTest();
  public void test() throws java.lang.Exception;
}
Compiled from "FirstStage.java"
public class org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage extends org.agilewiki.jactor2.core.blades.IsolationBladeBase implements java.lang.Runnable {
  java.lang.Thread mainThread;
  long t0;
  public org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage(org.agilewiki.jactor2.core.impl.blades.firehose.DataProcessor, long, int) throws java.lang.Exception;
  public void run();
  static int access$000(org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage);
  static int access$002(org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage, int);
  static java.util.List access$100(org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage);
  static void access$200(org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage);
  static long access$300(org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage);
  static long access$400(org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage);
  static int access$500(org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage);
}
Compiled from "FirstStage.java"
class org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final long val$_count;
  final org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage this$0;
  org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage$1(org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage, long);
  public void processAsyncResponse(java.lang.Void);
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "FirstStage.java"
class org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage$2 extends org.agilewiki.jactor2.core.messages.SIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage this$0;
  org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage$2(org.agilewiki.jactor2.core.impl.blades.firehose.FirstStage, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "NullStage.java"
public class org.agilewiki.jactor2.core.impl.blades.firehose.NullStage extends org.agilewiki.jactor2.core.blades.IsolationBladeBase implements org.agilewiki.jactor2.core.impl.blades.firehose.DataProcessor {
  public long total;
  public org.agilewiki.jactor2.core.impl.blades.firehose.NullStage(org.agilewiki.jactor2.core.impl.blades.firehose.DataProcessor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AIOp<java.lang.Void> processDataAOp(org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseData);
  static org.agilewiki.jactor2.core.impl.blades.firehose.DataProcessor access$000(org.agilewiki.jactor2.core.impl.blades.firehose.NullStage);
}
Compiled from "NullStage.java"
class org.agilewiki.jactor2.core.impl.blades.firehose.NullStage$1 extends org.agilewiki.jactor2.core.messages.AIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseData val$_firehoseData;
  final org.agilewiki.jactor2.core.impl.blades.firehose.NullStage this$0;
  org.agilewiki.jactor2.core.impl.blades.firehose.NullStage$1(org.agilewiki.jactor2.core.impl.blades.firehose.NullStage, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, org.agilewiki.jactor2.core.impl.blades.firehose.FirehoseData);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "BoundResponseProcessorTest.java"
class org.agilewiki.jactor2.core.impl.messages.Application extends java.lang.Thread {
  public org.agilewiki.jactor2.core.impl.messages.Application(org.agilewiki.jactor2.core.messages.BoundResponseProcessor<java.lang.String>);
  public void run();
}
Compiled from "Blade11.java"
public class org.agilewiki.jactor2.core.impl.messages.Blade11 extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public org.agilewiki.jactor2.core.impl.messages.Blade11(org.agilewiki.jactor2.core.reactors.IsolationReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.SOp<java.lang.String> hiSOp();
}
Compiled from "Blade11.java"
class org.agilewiki.jactor2.core.impl.messages.Blade11$1 extends org.agilewiki.jactor2.core.messages.SOp<java.lang.String> {
  final org.agilewiki.jactor2.core.impl.messages.Blade11 this$0;
  org.agilewiki.jactor2.core.impl.messages.Blade11$1(org.agilewiki.jactor2.core.impl.messages.Blade11, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected java.lang.String processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "Blade3.java"
public class org.agilewiki.jactor2.core.impl.messages.Blade3 extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public org.agilewiki.jactor2.core.impl.messages.Blade3() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> hi3SOp();
}
Compiled from "Blade3.java"
class org.agilewiki.jactor2.core.impl.messages.Blade3$1 extends org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.impl.messages.Blade3 this$0;
  org.agilewiki.jactor2.core.impl.messages.Blade3$1(org.agilewiki.jactor2.core.impl.messages.Blade3, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "BoundResponseProcessorTest.java"
public class org.agilewiki.jactor2.core.impl.messages.BoundResponseProcessorTest extends org.agilewiki.jactor2.core.impl.CallTestBase {
  public org.agilewiki.jactor2.core.impl.messages.BoundResponseProcessorTest();
  public void test() throws java.lang.Exception;
}
Compiled from "BoundResponseProcessorTest.java"
class org.agilewiki.jactor2.core.impl.messages.Driver extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.impl.messages.Driver() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.String> doitAOp();
}
Compiled from "BoundResponseProcessorTest.java"
class org.agilewiki.jactor2.core.impl.messages.Driver$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.String> {
  final org.agilewiki.jactor2.core.impl.messages.Driver this$0;
  org.agilewiki.jactor2.core.impl.messages.Driver$1(org.agilewiki.jactor2.core.impl.messages.Driver, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.String>) throws java.lang.Exception;
}
Compiled from "Test1.java"
public class org.agilewiki.jactor2.core.impl.messages.Test1 extends org.agilewiki.jactor2.core.impl.CallTestBase {
  public org.agilewiki.jactor2.core.impl.messages.Test1();
  public void testa() throws java.lang.Exception;
}
Compiled from "Test3.java"
public class org.agilewiki.jactor2.core.impl.messages.Test3 extends org.agilewiki.jactor2.core.impl.CallTestBase {
  public org.agilewiki.jactor2.core.impl.messages.Test3();
  public void testb() throws java.lang.Exception;
}
Compiled from "AsyncRequestMtImpl.java"
public class org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImpl<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<RESPONSE_TYPE> implements org.agilewiki.jactor2.core.messages.alt.AsyncNativeRequest<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImpl(org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImpl(org.agilewiki.jactor2.core.reactors.Reactor);
  public java.lang.String getOpName();
  public org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE> asOperation();
  public void setNoHungRequestCheck();
  public final boolean hasNoPendingResponses();
  public final void setExpectedPendingResponses(int);
  public void processAsyncResponse(RESPONSE_TYPE);
  public void processAsyncException(java.lang.Exception);
  protected void processRequestMessage() throws java.lang.Exception;
  public void responseReceived(org.agilewiki.jactor2.core.messages.impl.RequestImpl<?>);
  public void responseProcessed();
  public <RT> void send(org.agilewiki.jactor2.core.messages.impl.RequestImpl<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public <RT, RT2> void send(org.agilewiki.jactor2.core.messages.impl.RequestImpl<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public org.agilewiki.jactor2.core.messages.ExceptionHandler<RESPONSE_TYPE> setExceptionHandler(org.agilewiki.jactor2.core.messages.ExceptionHandler<RESPONSE_TYPE>);
  public org.agilewiki.jactor2.core.messages.ExceptionHandler<RESPONSE_TYPE> getExceptionHandler();
  public void close();
  public boolean cancel(org.agilewiki.jactor2.core.messages.impl.RequestImpl<?>);
  public void cancelAll();
  public void cancel();
  protected void setResponse(java.lang.Object, org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl);
  public <RT> org.agilewiki.jactor2.core.messages.impl.RequestImpl<RT> send(org.agilewiki.jactor2.core.messages.SOp<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public <RT, RT2> org.agilewiki.jactor2.core.messages.impl.RequestImpl<RT> send(org.agilewiki.jactor2.core.messages.SOp<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public <RT> org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl<RT> send(org.agilewiki.jactor2.core.messages.AOp<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public <RT, RT2> org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl<RT> send(org.agilewiki.jactor2.core.messages.AOp<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public <RT> void send(org.agilewiki.jactor2.core.messages.alt.SyncNativeRequest<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public <RT, RT2> void send(org.agilewiki.jactor2.core.messages.alt.SyncNativeRequest<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public <RT> void send(org.agilewiki.jactor2.core.messages.alt.AsyncNativeRequest<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public <RT, RT2> void send(org.agilewiki.jactor2.core.messages.alt.AsyncNativeRequest<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public void onCancel(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void onCancel();
  public void onClose(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void onClose();
  public void doAsync(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.Operation asOperation();
}
Compiled from "AsyncRequestMtImpl.java"
class org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImpl$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT> {
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_dis;
  final java.lang.Object val$_fixedResponse;
  final org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImpl this$0;
  org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImpl$1(org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor, java.lang.Object);
  public void processAsyncResponse(RT) throws java.lang.Exception;
}
Compiled from "AsyncRequestMtImplWithData.java"
public class org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImplWithData<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImpl<RESPONSE_TYPE> implements org.agilewiki.jactor2.core.messages.alt.AsyncRequestImplWithData<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImplWithData(org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public org.agilewiki.jactor2.core.impl.mtMessages.AsyncRequestMtImplWithData(org.agilewiki.jactor2.core.reactors.Reactor);
  public double getDouble(int);
  public void setDouble(int, double);
  public java.lang.Object getObject(int);
  public void setObject(int, java.lang.Object);
}
Compiled from "RequestMtImpl.java"
public abstract class org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<RESPONSE_TYPE> extends java.util.concurrent.atomic.AtomicReference<java.lang.Object> implements org.agilewiki.jactor2.core.messages.impl.RequestImpl<RESPONSE_TYPE>, org.agilewiki.jactor2.core.messages.Operation<RESPONSE_TYPE> {
  protected boolean used;
  protected final org.agilewiki.jactor2.core.reactors.Reactor targetReactor;
  protected final org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl targetReactorImpl;
  protected org.agilewiki.jactor2.core.impl.mtMessages.RequestSource requestSource;
  protected org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?> oldMessage;
  protected org.agilewiki.jactor2.core.messages.ExceptionHandler<RESPONSE_TYPE> sourceExceptionHandler;
  protected org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE> responseProcessor;
  protected boolean incomplete;
  protected boolean closed;
  protected java.lang.Object response;
  protected boolean canceled;
  public org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl(org.agilewiki.jactor2.core.reactors.Reactor);
  public org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?> getOldRequest();
  public int hashCode();
  public boolean isForeign();
  public boolean isOneWay();
  public boolean isSignal();
  public org.agilewiki.jactor2.core.reactors.impl.ReactorImpl getTargetReactorImpl();
  public org.agilewiki.jactor2.core.reactors.Reactor getTargetReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getSourceReactor();
  public org.agilewiki.jactor2.core.impl.mtMessages.RequestSource getRequestSource();
  protected void use();
  public void signal();
  public void doSend(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>);
  public RESPONSE_TYPE call() throws java.lang.Exception;
  protected void setResponse(java.lang.Object, org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl);
  protected boolean processObjectResponse(java.lang.Object);
  public boolean isCanceled() throws org.agilewiki.jactor2.core.reactors.ReactorClosedException;
  public boolean _isCanceled();
  public boolean isComplete();
  public org.agilewiki.jactor2.core.reactors.IsolationReactor getIsolationReactor();
  public void close();
  public void cancel();
  public void eval();
  protected abstract void processRequestMessage() throws java.lang.Exception;
  public void responseReceived(org.agilewiki.jactor2.core.messages.impl.RequestImpl<?>);
  public void responseProcessed();
  protected void processResponseMessage();
  public void processException(org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl, java.lang.Exception);
  public java.lang.String toString();
  public <RT> RT syncDirect(org.agilewiki.jactor2.core.messages.SOp<RT>) throws java.lang.Exception;
  public <RT> RT syncDirect(org.agilewiki.jactor2.core.messages.alt.SyncNativeRequest<RT>) throws java.lang.Exception;
  public int compareTo(org.agilewiki.jactor2.core.messages.impl.RequestImpl);
  public void setMessageTimeoutMillis(int);
  public int getMessageTimeoutMillis();
  public int compareTo(java.lang.Object);
}
Compiled from "RequestMtImpl.java"
class org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE> {
  final org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl this$0;
  org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl$1(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl);
  public void processAsyncResponse(java.lang.Object);
}
Compiled from "RequestMtImpl.java"
final class org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl$CallResponseProcessor implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Object> {
  public static final org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl$CallResponseProcessor SINGLETON;
  public void processAsyncResponse(java.lang.Object);
  static {};
}
Compiled from "RequestMtImpl.java"
final class org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl$Pender implements org.agilewiki.jactor2.core.impl.mtMessages.RequestSource {
  java.lang.Object pend() throws java.lang.Exception;
  public void incomingResponse(org.agilewiki.jactor2.core.messages.impl.RequestImpl, org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl$Pender(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl$1);
}
Compiled from "RequestSource.java"
public interface org.agilewiki.jactor2.core.impl.mtMessages.RequestSource {
  public abstract void incomingResponse(org.agilewiki.jactor2.core.messages.impl.RequestImpl<?>, org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
}
Compiled from "SyncRequestMtImpl.java"
public class org.agilewiki.jactor2.core.impl.mtMessages.SyncRequestMtImpl<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<RESPONSE_TYPE> implements org.agilewiki.jactor2.core.messages.alt.SyncNativeRequest<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.impl.mtMessages.SyncRequestMtImpl(org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public org.agilewiki.jactor2.core.impl.mtMessages.SyncRequestMtImpl(org.agilewiki.jactor2.core.reactors.Reactor);
  public java.lang.String getOpName();
  public org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE> asOperation();
  protected void processRequestMessage() throws java.lang.Exception;
  public RESPONSE_TYPE doSync(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected RESPONSE_TYPE processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.Operation asOperation();
}
Compiled from "SyncRequestMtImplWithData.java"
public class org.agilewiki.jactor2.core.impl.mtMessages.SyncRequestMtImplWithData<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.impl.mtMessages.SyncRequestMtImpl<RESPONSE_TYPE> implements org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.impl.mtMessages.SyncRequestMtImplWithData(org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public org.agilewiki.jactor2.core.impl.mtMessages.SyncRequestMtImplWithData(org.agilewiki.jactor2.core.reactors.Reactor);
  public double getDouble(int);
  public void setDouble(int, double);
  public java.lang.Object getObject(int);
  public void setObject(int, java.lang.Object);
}
Compiled from "DefaultPlantScheduler.java"
public class org.agilewiki.jactor2.core.impl.mtPlant.DefaultPlantScheduler implements org.agilewiki.jactor2.core.plant.impl.PlantScheduler {
  public org.agilewiki.jactor2.core.impl.mtPlant.DefaultPlantScheduler();
  protected long getHeartbeatMillis();
  protected int getSchedulerPoolSize();
  public double currentTimeMillis();
  public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, int);
  public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, int);
  public void close();
  public void cancel(java.lang.Object);
  public java.lang.Object scheduleAtFixedRate(java.lang.Runnable, int);
  public java.lang.Object schedule(java.lang.Runnable, int);
  static double access$002(org.agilewiki.jactor2.core.impl.mtPlant.DefaultPlantScheduler, double);
}
Compiled from "DefaultPlantScheduler.java"
class org.agilewiki.jactor2.core.impl.mtPlant.DefaultPlantScheduler$1 implements java.lang.Runnable {
  final org.agilewiki.jactor2.core.impl.mtPlant.DefaultPlantScheduler this$0;
  org.agilewiki.jactor2.core.impl.mtPlant.DefaultPlantScheduler$1(org.agilewiki.jactor2.core.impl.mtPlant.DefaultPlantScheduler);
  public void run();
}
Compiled from "DefaultReactorPoolThreadFactory.java"
public final class org.agilewiki.jactor2.core.impl.mtPlant.DefaultReactorPoolThreadFactory implements java.util.concurrent.ThreadFactory {
  public org.agilewiki.jactor2.core.impl.mtPlant.DefaultReactorPoolThreadFactory();
  public org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThread newThread(java.lang.Runnable);
  public java.lang.Thread newThread(java.lang.Runnable);
}
Compiled from "DummyMetricsTimer.java"
public class org.agilewiki.jactor2.core.impl.mtPlant.DummyMetricsTimer implements org.agilewiki.jactor2.core.plant.impl.MetricsTimer {
  public static final org.agilewiki.jactor2.core.impl.mtPlant.DummyMetricsTimer getMetricsTimer(java.lang.String);
  public long nanos();
  public void updateNanos(long, boolean);
  static {};
}
Compiled from "PlantConfiguration.java"
public class org.agilewiki.jactor2.core.impl.mtPlant.PlantConfiguration {
  public final int reactorThreadPoolSize;
  public org.agilewiki.jactor2.core.impl.mtPlant.PlantConfiguration();
  public org.agilewiki.jactor2.core.impl.mtPlant.PlantConfiguration(int);
  protected org.agilewiki.jactor2.core.impl.mtPlant.Recovery createRecovery();
  public org.agilewiki.jactor2.core.impl.mtPlant.Recovery getRecovery();
  protected org.agilewiki.jactor2.core.plant.impl.PlantScheduler createPlantScheduler();
  public org.agilewiki.jactor2.core.plant.impl.PlantScheduler getPlantScheduler();
  protected java.util.concurrent.ThreadFactory createReactorPoolThreadFactory();
  public int getMaxThreadMigrations();
  public org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager createReactorPoolThreadManager();
  public int getInitialLocalMessageQueueSize();
  public int getInitialBufferSize();
}
Compiled from "PlantMtImpl.java"
public class org.agilewiki.jactor2.core.impl.mtPlant.PlantMtImpl extends org.agilewiki.jactor2.core.plant.impl.PlantImpl {
  public static final boolean DEBUG;
  public static org.agilewiki.jactor2.core.impl.mtPlant.PlantMtImpl getSingleton();
  public org.agilewiki.jactor2.core.impl.mtPlant.PlantMtImpl() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.impl.mtPlant.PlantMtImpl(int) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.impl.mtPlant.PlantMtImpl(org.agilewiki.jactor2.core.impl.mtPlant.PlantConfiguration) throws java.lang.Exception;
  public void removeThreadBoundReactor();
  public org.agilewiki.jactor2.core.reactors.impl.ReactorImpl getCurrentReactorImpl();
  public void validateCall();
  public org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createNonBlockingReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createBlockingReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createIsolationReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createSwingBoundReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createThreadBoundReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int, java.lang.Runnable);
  public <RESPONSE_TYPE> org.agilewiki.jactor2.core.messages.impl.RequestImpl<RESPONSE_TYPE> createSyncRequestImpl(org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public <RESPONSE_TYPE> org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl<RESPONSE_TYPE> createAsyncRequestImpl(org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public <RESPONSE_TYPE> org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<RESPONSE_TYPE> createSyncRequestImplWithData(org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public <RESPONSE_TYPE> org.agilewiki.jactor2.core.messages.alt.AsyncRequestImplWithData<RESPONSE_TYPE> createAsyncRequestImplWithData(org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImpl createCloseableImpl(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public void close() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.impl.mtPlant.PlantConfiguration getPlantConfiguration();
  public org.agilewiki.jactor2.core.plant.impl.PlantScheduler getPlantScheduler();
  public org.agilewiki.jactor2.core.impl.mtPlant.SchedulableSemaphore schedulableSemaphore(int);
  protected org.agilewiki.jactor2.core.reactors.facilities.Facility createInternalFacility() throws java.lang.Exception;
  public final void submit(org.agilewiki.jactor2.core.impl.mtReactors.PoolThreadReactorMtImpl);
  public org.agilewiki.jactor2.core.reactors.facilities.Facility getInternalFacility();
  public int getInitialLocalMessageQueueSize();
  public int getInitialBufferSize();
  static {};
}
Compiled from "PlantMtImpl.java"
class org.agilewiki.jactor2.core.impl.mtPlant.PlantMtImpl$1 implements java.lang.Runnable {
  final org.agilewiki.jactor2.core.impl.mtPlant.PlantMtImpl this$0;
  org.agilewiki.jactor2.core.impl.mtPlant.PlantMtImpl$1(org.agilewiki.jactor2.core.impl.mtPlant.PlantMtImpl);
  public void run();
}
Compiled from "ReactorPoolThread.java"
public class org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThread extends java.lang.Thread {
  public org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThread(java.lang.Runnable);
  public org.agilewiki.jactor2.core.reactors.impl.PoolThreadReactorImpl getCurrentReactorImpl();
  public void setCurrentReactor(org.agilewiki.jactor2.core.reactors.impl.PoolThreadReactorImpl);
  public void setMaxThreadMigrations(int);
  public void clearMigrationCount();
  public boolean checkMigrationCount();
  public void incMigrationCount();
}
Compiled from "ReactorPoolThreadManager.java"
public final class org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager {
  final org.slf4j.Logger logger;
  public org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager(int, int, java.util.concurrent.ThreadFactory);
  public final void execute(org.agilewiki.jactor2.core.impl.mtReactors.PoolThreadReactorMtImpl);
  public final void close();
  static java.util.concurrent.Semaphore access$000(org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager);
  static java.util.concurrent.ConcurrentLinkedQueue access$100(org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager);
  static boolean access$200(org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager);
}
Compiled from "ReactorPoolThreadManager.java"
class org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager$1 implements java.lang.Runnable {
  final org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager this$0;
  org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager$1(org.agilewiki.jactor2.core.impl.mtPlant.ReactorPoolThreadManager);
  public void run();
}
Compiled from "Recovery.java"
public class org.agilewiki.jactor2.core.impl.mtPlant.Recovery {
  public org.agilewiki.jactor2.core.impl.mtPlant.Recovery();
  public int getReactorPollMillis();
  public int getMessageTimeoutMillis(org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl);
  public void onMessageTimeout(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl) throws java.lang.Exception;
  public int getThreadInterruptMillis(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public void onHungThread(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public void onHungRequest(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>) throws java.lang.Exception;
  public void onStackOverflowError(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>, java.lang.StackOverflowError);
  public void onRuntimeException(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>, java.lang.RuntimeException);
  public org.agilewiki.jactor2.core.plant.impl.MetricsTimer getMetricsTimer(java.lang.String);
}
Compiled from "SchedulableSemaphore.java"
public class org.agilewiki.jactor2.core.impl.mtPlant.SchedulableSemaphore {
  public java.lang.Runnable runnable;
  public org.agilewiki.jactor2.core.impl.mtPlant.SchedulableSemaphore();
  public boolean acquire() throws java.lang.InterruptedException;
  public void release();
  static boolean access$002(org.agilewiki.jactor2.core.impl.mtPlant.SchedulableSemaphore, boolean);
  static java.util.concurrent.Semaphore access$100(org.agilewiki.jactor2.core.impl.mtPlant.SchedulableSemaphore);
}
Compiled from "SchedulableSemaphore.java"
class org.agilewiki.jactor2.core.impl.mtPlant.SchedulableSemaphore$1 implements java.lang.Runnable {
  final org.agilewiki.jactor2.core.impl.mtPlant.SchedulableSemaphore this$0;
  org.agilewiki.jactor2.core.impl.mtPlant.SchedulableSemaphore$1(org.agilewiki.jactor2.core.impl.mtPlant.SchedulableSemaphore);
  public void run();
}
Compiled from "BlockingReactorMtImpl.java"
public class org.agilewiki.jactor2.core.impl.mtReactors.BlockingReactorMtImpl extends org.agilewiki.jactor2.core.impl.mtReactors.PoolThreadReactorMtImpl {
  public org.agilewiki.jactor2.core.impl.mtReactors.BlockingReactorMtImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public org.agilewiki.jactor2.core.reactors.BlockingReactor asReactor();
  protected org.agilewiki.jactor2.core.impl.mtReactors.Inbox createInbox(int);
  protected void processMessage(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public boolean isSlow();
  public org.agilewiki.jactor2.core.reactors.Reactor asReactor();
}
Compiled from "CommonInbox.java"
public class org.agilewiki.jactor2.core.impl.mtReactors.CommonInbox extends org.agilewiki.jactor2.core.impl.mtReactors.Inbox {
  public org.agilewiki.jactor2.core.impl.mtReactors.CommonInbox(int);
  public boolean hasWork();
  public boolean isEmpty();
  public boolean isIdle();
  protected void offerLocal(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?> poll();
}
Compiled from "Inbox.java"
public abstract class org.agilewiki.jactor2.core.impl.mtReactors.Inbox implements java.lang.AutoCloseable {
  protected java.util.concurrent.ConcurrentLinkedQueue<java.lang.Object> concurrentQueue;
  public org.agilewiki.jactor2.core.impl.mtReactors.Inbox();
  public boolean hasConcurrent();
  public abstract boolean hasWork();
  public abstract boolean isEmpty();
  public abstract boolean isIdle();
  public void offer(boolean, org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public void offer(java.util.Queue<org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>>);
  protected abstract void offerLocal(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public abstract org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?> poll();
  public void requestBegin(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public void requestEnd(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public void close();
}
Compiled from "IsolationInbox.java"
public class org.agilewiki.jactor2.core.impl.mtReactors.IsolationInbox extends org.agilewiki.jactor2.core.impl.mtReactors.Inbox {
  public org.agilewiki.jactor2.core.impl.mtReactors.IsolationInbox(int);
  protected void offerLocal(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public boolean isEmpty();
  public boolean isIdle();
  public boolean hasWork();
  public org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?> poll();
  public void requestBegin(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public void requestEnd(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
}
Compiled from "IsolationReactorMtImpl.java"
public class org.agilewiki.jactor2.core.impl.mtReactors.IsolationReactorMtImpl extends org.agilewiki.jactor2.core.impl.mtReactors.PoolThreadReactorMtImpl {
  public org.agilewiki.jactor2.core.impl.mtReactors.IsolationReactorMtImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public org.agilewiki.jactor2.core.reactors.IsolationReactor asReactor();
  protected org.agilewiki.jactor2.core.impl.mtReactors.Inbox createInbox(int);
  protected void processMessage(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public void addResource(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public boolean isResource(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public org.agilewiki.jactor2.core.reactors.Reactor asReactor();
}
Compiled from "MigrationException.java"
public class org.agilewiki.jactor2.core.impl.mtReactors.MigrationException extends java.lang.RuntimeException {
  public final org.agilewiki.jactor2.core.impl.mtReactors.PoolThreadReactorMtImpl reactor;
  public org.agilewiki.jactor2.core.impl.mtReactors.MigrationException(org.agilewiki.jactor2.core.impl.mtReactors.PoolThreadReactorMtImpl);
  public java.lang.Throwable fillInStackTrace();
}
Compiled from "NonBlockingReactorMtImpl.java"
public class org.agilewiki.jactor2.core.impl.mtReactors.NonBlockingReactorMtImpl extends org.agilewiki.jactor2.core.impl.mtReactors.PoolThreadReactorMtImpl {
  public org.agilewiki.jactor2.core.impl.mtReactors.NonBlockingReactorMtImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public org.agilewiki.jactor2.core.reactors.NonBlockingReactor asReactor();
  protected org.agilewiki.jactor2.core.impl.mtReactors.Inbox createInbox(int);
  public org.agilewiki.jactor2.core.reactors.Reactor asReactor();
}
Compiled from "Outbox.java"
public class org.agilewiki.jactor2.core.impl.mtReactors.Outbox implements java.lang.AutoCloseable {
  public org.agilewiki.jactor2.core.impl.mtReactors.Outbox(int);
  public java.util.Iterator<java.util.Map$Entry<org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl, java.util.ArrayDeque<org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>>>> getIterator();
  public boolean buffer(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>, org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl);
  public void close();
}
Compiled from "PoolThreadReactorMtImpl.java"
public abstract class org.agilewiki.jactor2.core.impl.mtReactors.PoolThreadReactorMtImpl extends org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl implements org.agilewiki.jactor2.core.reactors.impl.PoolThreadReactorImpl {
  public org.agilewiki.jactor2.core.impl.mtReactors.PoolThreadReactorMtImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public int hashCode();
  public boolean isIdler();
  protected void notBusy() throws java.lang.Exception;
  protected void afterAdd();
  protected boolean flush(boolean) throws java.lang.Exception;
  public java.lang.Runnable getOnIdle();
  public void setOnIdle(java.lang.Runnable);
}
Compiled from "ReactorMtImpl.java"
public abstract class org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl extends org.agilewiki.jactor2.core.blades.BladeBase implements org.agilewiki.jactor2.core.reactors.impl.ReactorImpl,org.agilewiki.jactor2.core.impl.mtMessages.RequestSource {
  protected final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> threadReference;
  protected final org.slf4j.Logger logger;
  protected org.agilewiki.jactor2.core.impl.mtReactors.Inbox inbox;
  protected org.agilewiki.jactor2.core.impl.mtReactors.Outbox outbox;
  protected int initialBufferSize;
  protected int initialLocalQueueSize;
  public final org.agilewiki.jactor2.core.reactors.IsolationReactor parentReactor;
  public org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public void initialize(org.agilewiki.jactor2.core.reactors.Reactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.Reactor asReactor();
  public org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImpl asCloseableImpl();
  public java.util.concurrent.atomic.AtomicReference<java.lang.Thread> getThreadReference();
  public org.agilewiki.jactor2.core.reactors.IsolationReactor getParentReactor();
  public int getInitialBufferSize();
  public int getInitialLocalQueueSize();
  public final boolean isRunning();
  public org.slf4j.Logger getLogger();
  protected final boolean startedClosing();
  public final boolean isClosing();
  public void close() throws java.lang.Exception;
  public java.lang.String getReasonForFailure();
  public void fail(java.lang.String) throws java.lang.Exception;
  protected abstract org.agilewiki.jactor2.core.impl.mtReactors.Inbox createInbox(int);
  public final org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?> getCurrentRequest();
  public final void setCurrentRequest(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  public final boolean hasWork();
  public boolean hasConcurrent();
  public final boolean isInboxEmpty();
  public final org.agilewiki.jactor2.core.messages.ExceptionHandler<?> setExceptionHandler(org.agilewiki.jactor2.core.messages.ExceptionHandler<?>);
  public final org.agilewiki.jactor2.core.messages.ExceptionHandler<?> getExceptionHandler();
  public void unbufferedAddMessage(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>, boolean);
  public void unbufferedAddMessages(java.util.Queue<org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>>) throws java.lang.Exception;
  protected abstract void afterAdd();
  public boolean buffer(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>, org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl);
  protected void processMessage(org.agilewiki.jactor2.core.impl.mtMessages.RequestMtImpl<?>);
  protected abstract void notBusy() throws java.lang.Exception;
  public final void incomingResponse(org.agilewiki.jactor2.core.messages.impl.RequestImpl<?>, org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public void requestBegin(org.agilewiki.jactor2.core.messages.impl.RequestImpl<?>);
  public void requestEnd(org.agilewiki.jactor2.core.messages.impl.RequestImpl<?>);
  public void run();
  public org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> nullSOp();
  public void reactorPoll() throws java.lang.Exception;
  protected final java.util.Set<org.agilewiki.jactor2.core.reactors.closeable.Closeable> getCloseableSet();
  public boolean addCloseable(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public boolean removeCloseable(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public boolean isSlow();
  public boolean isCommonReactor();
  public org.agilewiki.jactor2.core.impl.mtPlant.Recovery getRecovery();
  public void setRecovery(org.agilewiki.jactor2.core.impl.mtPlant.Recovery);
  public org.agilewiki.jactor2.core.plant.impl.PlantScheduler getPlantScheduler();
  public void setPlantScheduler(org.agilewiki.jactor2.core.plant.impl.PlantScheduler);
  public void warn(java.lang.String);
  public void warn(java.lang.String, java.lang.Throwable);
  public void error(java.lang.String);
  public void error(java.lang.String, java.lang.Throwable);
  public void addResource(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public boolean isResource(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public org.agilewiki.jactor2.core.plant.impl.MetricsTimer getMetricsTimer(java.lang.String);
}
Compiled from "ReactorMtImpl.java"
class org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl$1 extends org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl this$0;
  org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl$1(org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "SwingBoundReactorMtImpl.java"
public class org.agilewiki.jactor2.core.impl.mtReactors.SwingBoundReactorMtImpl extends org.agilewiki.jactor2.core.impl.mtReactors.ThreadBoundReactorMtImpl {
  public static org.agilewiki.jactor2.core.impl.mtReactors.SwingBoundReactorMtImpl threadReactor();
  public org.agilewiki.jactor2.core.impl.mtReactors.SwingBoundReactorMtImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public org.agilewiki.jactor2.core.reactors.SwingBoundReactor asReactor();
  protected void afterAdd();
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor asReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor asReactor();
}
Compiled from "ThreadBoundReactorMtImpl.java"
public class org.agilewiki.jactor2.core.impl.mtReactors.ThreadBoundReactorMtImpl extends org.agilewiki.jactor2.core.impl.mtReactors.ReactorMtImpl {
  public static org.agilewiki.jactor2.core.impl.mtReactors.ThreadBoundReactorMtImpl threadReactor();
  public static void removeReactor();
  public org.agilewiki.jactor2.core.impl.mtReactors.ThreadBoundReactorMtImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int, java.lang.Runnable);
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor asReactor();
  public void run();
  protected void notBusy() throws java.lang.Exception;
  public boolean isIdler();
  protected org.agilewiki.jactor2.core.impl.mtReactors.Inbox createInbox(int);
  protected void afterAdd();
  public final boolean flush() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.Reactor asReactor();
  static {};
}
Compiled from "HungRequestTest.java"
class org.agilewiki.jactor2.core.impl.plant.Hanger extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.impl.plant.Hanger(org.agilewiki.jactor2.core.reactors.NonBlockingReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.String> hiAOp();
}
Compiled from "HungRequestTest.java"
class org.agilewiki.jactor2.core.impl.plant.Hanger$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.String> {
  final org.agilewiki.jactor2.core.impl.plant.Hanger this$0;
  org.agilewiki.jactor2.core.impl.plant.Hanger$1(org.agilewiki.jactor2.core.impl.plant.Hanger, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.String>) throws java.lang.Exception;
}
Compiled from "HungRequestTest.java"
class org.agilewiki.jactor2.core.impl.plant.Hung extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.impl.plant.Hung(org.agilewiki.jactor2.core.reactors.NonBlockingReactor, org.agilewiki.jactor2.core.impl.plant.Hanger) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.String> hoAOp();
  static org.agilewiki.jactor2.core.impl.plant.Hanger access$000(org.agilewiki.jactor2.core.impl.plant.Hung);
}
Compiled from "HungRequestTest.java"
class org.agilewiki.jactor2.core.impl.plant.Hung$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.String> {
  final org.agilewiki.jactor2.core.impl.plant.Hung this$0;
  org.agilewiki.jactor2.core.impl.plant.Hung$1(org.agilewiki.jactor2.core.impl.plant.Hung, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.String>) throws java.lang.Exception;
}
Compiled from "HungRequestTest.java"
public class org.agilewiki.jactor2.core.impl.plant.HungRequestTest extends org.agilewiki.jactor2.core.impl.CallTestBase {
  public org.agilewiki.jactor2.core.impl.plant.HungRequestTest();
  public void testa() throws java.lang.Exception;
}
Compiled from "Blade11.java"
public class org.agilewiki.jactor2.core.impl.reactors.Blade11 extends org.agilewiki.jactor2.core.blades.ThreadBoundBladeBase {
  public org.agilewiki.jactor2.core.impl.reactors.Blade11(org.agilewiki.jactor2.core.reactors.ThreadBoundReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.SOp<java.lang.String> hiSOp();
}
Compiled from "Blade11.java"
class org.agilewiki.jactor2.core.impl.reactors.Blade11$1 extends org.agilewiki.jactor2.core.messages.SOp<java.lang.String> {
  final org.agilewiki.jactor2.core.impl.reactors.Blade11 this$0;
  org.agilewiki.jactor2.core.impl.reactors.Blade11$1(org.agilewiki.jactor2.core.impl.reactors.Blade11, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected java.lang.String processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "CloseableSetTest.java"
public class org.agilewiki.jactor2.core.impl.reactors.CloseableSetTest extends junit.framework.TestCase {
  public org.agilewiki.jactor2.core.impl.reactors.CloseableSetTest();
  public void testReactor() throws java.lang.Exception;
}
Compiled from "IsolationTest.java"
class org.agilewiki.jactor2.core.impl.reactors.Foot extends org.agilewiki.jactor2.core.blades.IsolationBladeBase implements org.agilewiki.jactor2.core.impl.reactors.IsIt {
  public org.agilewiki.jactor2.core.impl.reactors.Foot(org.agilewiki.jactor2.core.reactors.IsolationReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> dAOp();
}
Compiled from "IsolationTest.java"
class org.agilewiki.jactor2.core.impl.reactors.Foot$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> {
  final org.agilewiki.jactor2.core.impl.reactors.Foot this$0;
  org.agilewiki.jactor2.core.impl.reactors.Foot$1(org.agilewiki.jactor2.core.impl.reactors.Foot, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Boolean>) throws java.lang.Exception;
}
Compiled from "IsolationTest.java"
class org.agilewiki.jactor2.core.impl.reactors.Head extends org.agilewiki.jactor2.core.blades.IsolationBladeBase implements org.agilewiki.jactor2.core.impl.reactors.IsIt {
  public org.agilewiki.jactor2.core.impl.reactors.Head(org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean>) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.impl.reactors.Head(org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean>, org.agilewiki.jactor2.core.reactors.IsolationReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> dAOp();
  static org.agilewiki.jactor2.core.messages.AOp access$000(org.agilewiki.jactor2.core.impl.reactors.Head);
}
Compiled from "IsolationTest.java"
class org.agilewiki.jactor2.core.impl.reactors.Head$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> {
  final org.agilewiki.jactor2.core.impl.reactors.Head this$0;
  org.agilewiki.jactor2.core.impl.reactors.Head$1(org.agilewiki.jactor2.core.impl.reactors.Head, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Boolean>) throws java.lang.Exception;
}
Compiled from "IsolationTest.java"
class org.agilewiki.jactor2.core.impl.reactors.Head$1$1 extends org.agilewiki.jactor2.core.messages.ExceptionHandler<java.lang.Boolean> {
  final org.agilewiki.jactor2.core.impl.reactors.Head$1 this$1;
  org.agilewiki.jactor2.core.impl.reactors.Head$1$1(org.agilewiki.jactor2.core.impl.reactors.Head$1);
  public java.lang.Boolean processException(java.lang.Exception) throws java.lang.Exception;
  public java.lang.Object processException(java.lang.Exception) throws java.lang.Exception;
}
Compiled from "ICloseTest.java"
public class org.agilewiki.jactor2.core.impl.reactors.ICloseTest extends org.agilewiki.jactor2.core.impl.CallTestBase {
  public org.agilewiki.jactor2.core.impl.reactors.ICloseTest();
  public void testa() throws java.lang.Exception;
}
Compiled from "ICloseTest.java"
class org.agilewiki.jactor2.core.impl.reactors.IHang extends org.agilewiki.jactor2.core.blades.BlockingBladeBase {
  org.agilewiki.jactor2.core.impl.reactors.IHang() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> goAOp();
}
Compiled from "ICloseTest.java"
class org.agilewiki.jactor2.core.impl.reactors.IHang$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.impl.reactors.IHang this$0;
  org.agilewiki.jactor2.core.impl.reactors.IHang$1(org.agilewiki.jactor2.core.impl.reactors.IHang, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "ICloseTest.java"
class org.agilewiki.jactor2.core.impl.reactors.IHang$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$noRspImpl;
  final org.agilewiki.jactor2.core.impl.reactors.IHang$1 this$1;
  org.agilewiki.jactor2.core.impl.reactors.IHang$1$1(org.agilewiki.jactor2.core.impl.reactors.IHang$1, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void processAsyncResponse(java.lang.Void);
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "ICloseTest.java"
class org.agilewiki.jactor2.core.impl.reactors.IHung extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  org.agilewiki.jactor2.core.impl.reactors.IHung() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> noRspAOp();
}
Compiled from "ICloseTest.java"
class org.agilewiki.jactor2.core.impl.reactors.IHung$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.impl.reactors.IHung this$0;
  org.agilewiki.jactor2.core.impl.reactors.IHung$1(org.agilewiki.jactor2.core.impl.reactors.IHung, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "IsolationTest.java"
class org.agilewiki.jactor2.core.impl.reactors.IVia extends org.agilewiki.jactor2.core.blades.IsolationBladeBase implements org.agilewiki.jactor2.core.impl.reactors.IsIt {
  public org.agilewiki.jactor2.core.impl.reactors.IVia(org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean>) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> dAOp();
  static org.agilewiki.jactor2.core.messages.AOp access$000(org.agilewiki.jactor2.core.impl.reactors.IVia);
}
Compiled from "IsolationTest.java"
class org.agilewiki.jactor2.core.impl.reactors.IVia$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> {
  final org.agilewiki.jactor2.core.impl.reactors.IVia this$0;
  org.agilewiki.jactor2.core.impl.reactors.IVia$1(org.agilewiki.jactor2.core.impl.reactors.IVia, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Boolean>) throws java.lang.Exception;
}
Compiled from "IsolationTest.java"
interface org.agilewiki.jactor2.core.impl.reactors.IsIt {
  public abstract org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> dAOp();
}
Compiled from "IsolationTest.java"
public class org.agilewiki.jactor2.core.impl.reactors.IsolationTest extends org.agilewiki.jactor2.core.impl.CallTestBase {
  public org.agilewiki.jactor2.core.impl.reactors.IsolationTest();
  public void test1() throws java.lang.Exception;
  public void test2() throws java.lang.Exception;
  public void test3() throws java.lang.Exception;
  public void test4() throws java.lang.Exception;
  public void test4a() throws java.lang.Exception;
  public void test5() throws java.lang.Exception;
  public void test6() throws java.lang.Exception;
}
Compiled from "CloseableSetTest.java"
class org.agilewiki.jactor2.core.impl.reactors.MyCloseable implements org.agilewiki.jactor2.core.reactors.closeable.Closeable {
  public volatile int closed;
  org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImpl closeableImpl;
  org.agilewiki.jactor2.core.impl.reactors.MyCloseable() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImpl asCloseableImpl();
  public void close() throws java.lang.Exception;
}
Compiled from "CloseableSetTest.java"
class org.agilewiki.jactor2.core.impl.reactors.MyFailedCloseable extends org.agilewiki.jactor2.core.impl.reactors.MyCloseable {
  org.agilewiki.jactor2.core.impl.reactors.MyFailedCloseable() throws java.lang.Exception;
  public void close() throws java.lang.Exception;
}
Compiled from "ThreadBoundTest.java"
public class org.agilewiki.jactor2.core.impl.reactors.ThreadBoundTest extends org.agilewiki.jactor2.core.impl.CallTestBase {
  org.agilewiki.jactor2.core.reactors.ThreadBoundReactor reactor;
  public org.agilewiki.jactor2.core.impl.reactors.ThreadBoundTest();
  public void testa() throws java.lang.Exception;
}
Compiled from "ThreadBoundTest.java"
class org.agilewiki.jactor2.core.impl.reactors.ThreadBoundTest$1 implements java.lang.Runnable {
  final org.agilewiki.jactor2.core.impl.reactors.ThreadBoundTest this$0;
  org.agilewiki.jactor2.core.impl.reactors.ThreadBoundTest$1(org.agilewiki.jactor2.core.impl.reactors.ThreadBoundTest);
  public void run();
}
Compiled from "IsolationTest.java"
class org.agilewiki.jactor2.core.impl.reactors.Via extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase implements org.agilewiki.jactor2.core.impl.reactors.IsIt {
  public org.agilewiki.jactor2.core.impl.reactors.Via(org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean>) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> dAOp();
  static org.agilewiki.jactor2.core.messages.AOp access$000(org.agilewiki.jactor2.core.impl.reactors.Via);
}
Compiled from "IsolationTest.java"
class org.agilewiki.jactor2.core.impl.reactors.Via$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> {
  final org.agilewiki.jactor2.core.impl.reactors.Via this$0;
  org.agilewiki.jactor2.core.impl.reactors.Via$1(org.agilewiki.jactor2.core.impl.reactors.Via, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Boolean>) throws java.lang.Exception;
}
Compiled from "AIOp.java"
public abstract class org.agilewiki.jactor2.core.messages.AIOp<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.AOp<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.messages.AIOp(java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  public void signal();
}
Compiled from "AOp.java"
public abstract class org.agilewiki.jactor2.core.messages.AOp<RESPONSE_TYPE> implements org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE> {
  public final org.agilewiki.jactor2.core.reactors.ReactorBase targetReactor;
  public java.lang.String getOpName();
  public org.agilewiki.jactor2.core.messages.AOp(java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  public int hashCode();
  public void doAsync(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
  protected abstract void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
  public RESPONSE_TYPE call() throws java.lang.Exception;
  public java.lang.String toString();
  public void cancelAll(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void onCancel(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void onClose(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
}
Compiled from "AsyncOperation.java"
public interface org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.Operation<RESPONSE_TYPE> {
  public abstract void onCancel(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public abstract void onClose(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public abstract void doAsync(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
}
Compiled from "AsyncResponseProcessor.java"
public interface org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE> {
  public abstract void processAsyncResponse(RESPONSE_TYPE) throws java.lang.Exception;
}
Compiled from "BoundResponseProcessor.java"
public class org.agilewiki.jactor2.core.messages.BoundResponseProcessor<RESPONSE_TYPE> implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.messages.BoundResponseProcessor(org.agilewiki.jactor2.core.blades.Blade, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>);
  public void processAsyncResponse(RESPONSE_TYPE);
  static org.agilewiki.jactor2.core.messages.AsyncResponseProcessor access$000(org.agilewiki.jactor2.core.messages.BoundResponseProcessor);
}
Compiled from "BoundResponseProcessor.java"
class org.agilewiki.jactor2.core.messages.BoundResponseProcessor$1 extends org.agilewiki.jactor2.core.messages.SIOp<java.lang.Void> {
  final java.lang.Object val$rsp;
  final org.agilewiki.jactor2.core.messages.BoundResponseProcessor this$0;
  org.agilewiki.jactor2.core.messages.BoundResponseProcessor$1(org.agilewiki.jactor2.core.messages.BoundResponseProcessor, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, java.lang.Object);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "ExceptionHandler.java"
public abstract class org.agilewiki.jactor2.core.messages.ExceptionHandler<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.messages.ExceptionHandler();
  public RESPONSE_TYPE processException(java.lang.Exception) throws java.lang.Exception;
  public void processException(java.lang.Exception, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
}
Compiled from "Operation.java"
public interface org.agilewiki.jactor2.core.messages.Operation<RESPONSE_TYPE> {
  public abstract java.lang.String getOpName();
}
Compiled from "SAOp.java"
public abstract class org.agilewiki.jactor2.core.messages.SAOp<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.AOp<RESPONSE_TYPE> implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.messages.SAOp(java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected final void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
  protected org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl getAsyncRequestImpl();
  protected org.agilewiki.jactor2.core.messages.AsyncResponseProcessor getAsyncResponseProcessor();
  public final void processAsyncResponse(RESPONSE_TYPE) throws java.lang.Exception;
  protected abstract void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl) throws java.lang.Exception;
}
Compiled from "SIOp.java"
public abstract class org.agilewiki.jactor2.core.messages.SIOp<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.SOp<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.messages.SIOp(java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  public void signal();
}
Compiled from "SOp.java"
public abstract class org.agilewiki.jactor2.core.messages.SOp<RESPONSE_TYPE> implements org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE> {
  public final org.agilewiki.jactor2.core.reactors.ReactorBase targetReactor;
  public org.agilewiki.jactor2.core.messages.SOp(java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  public java.lang.String getOpName();
  public int hashCode();
  public RESPONSE_TYPE doSync(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected abstract RESPONSE_TYPE processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  public RESPONSE_TYPE call() throws java.lang.Exception;
  public java.lang.String toString();
}
Compiled from "SyncOperation.java"
public interface org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.Operation<RESPONSE_TYPE> {
  public abstract RESPONSE_TYPE doSync(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "AsyncNativeRequest.java"
public interface org.agilewiki.jactor2.core.messages.alt.AsyncNativeRequest<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl<RESPONSE_TYPE> {
}
Compiled from "AsyncRequestImplWithData.java"
public interface org.agilewiki.jactor2.core.messages.alt.AsyncRequestImplWithData<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl<RESPONSE_TYPE>, org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<RESPONSE_TYPE> {
}
Compiled from "StaticAOp.java"
public abstract class org.agilewiki.jactor2.core.messages.alt.StaticAOp<B extends org.agilewiki.jactor2.core.blades.Blade, RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, org.agilewiki.jactor2.core.messages.alt.AsyncRequestImplWithData<RESPONSE_TYPE>> implements org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.messages.alt.StaticAOp(java.lang.Class<B>);
  protected final org.agilewiki.jactor2.core.messages.alt.AsyncRequestImplWithData<RESPONSE_TYPE> createInternalWithData(org.agilewiki.jactor2.core.reactors.Reactor);
  public void cancelAll(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void onCancel(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void onClose(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void doAsync(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
  protected final void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
  protected abstract void processAsyncOperation(B, org.agilewiki.jactor2.core.messages.alt.AsyncRequestImplWithData<RESPONSE_TYPE>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
  protected org.agilewiki.jactor2.core.messages.impl.RequestImplWithData createInternalWithData(org.agilewiki.jactor2.core.reactors.Reactor);
}
Compiled from "StaticOpBase.java"
public abstract class org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B extends org.agilewiki.jactor2.core.blades.Blade, RESPONSE_TYPE, RIWD extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<RESPONSE_TYPE>> implements org.agilewiki.jactor2.core.messages.Operation<RESPONSE_TYPE> {
  protected final org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.ObjectVar<B> blade;
  public final java.lang.String opName;
  public final org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.BooleanVar var(boolean);
  public final org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.ByteVar var(byte);
  public final org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.CharVar var(char);
  public final org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.ShortVar var(short);
  public final org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.IntVar var(int);
  public final org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.FloatVar var(float);
  public final org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.DoubleVar var(double);
  public final org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.LongVar var(long);
  public final <E> org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.ObjectVar<E> var(java.lang.Class<E>);
  public final <E> org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.ObjectVar<E> var(java.lang.Class<E>, E);
  protected org.agilewiki.jactor2.core.messages.alt.StaticOpBase(java.lang.Class<B>);
  public int hashCode();
  public final RIWD create(B);
  public final java.lang.String toString();
  protected abstract RIWD createInternalWithData(org.agilewiki.jactor2.core.reactors.Reactor);
  static int access$108(org.agilewiki.jactor2.core.messages.alt.StaticOpBase);
  static void access$200(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$Var);
  static int access$308(org.agilewiki.jactor2.core.messages.alt.StaticOpBase);
  static {};
}
Compiled from "StaticOpBase.java"
class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1 {
}
Compiled from "StaticOpBase.java"
public final class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$BooleanVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.PrimitiveVar {
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  public void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public boolean get(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public <R extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>> R set(R, boolean);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$BooleanVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, boolean, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticOpBase.java"
public final class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$ByteVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.PrimitiveVar {
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  public void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public byte get(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public <R extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>> R set(R, byte);
  public byte inc(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public byte dec(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$ByteVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, byte, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticOpBase.java"
public final class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$CharVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.PrimitiveVar {
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  public void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public char get(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public <R extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>> R set(R, char);
  public char inc(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public char dec(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$CharVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, char, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticOpBase.java"
public final class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$DoubleVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.PrimitiveVar {
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  public void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public double get(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public <R extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>> R set(R, double);
  public double inc(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public double dec(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$DoubleVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, double, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticOpBase.java"
public final class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$FloatVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.PrimitiveVar {
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  public void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public float get(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public <R extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>> R set(R, float);
  public float inc(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public float dec(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$FloatVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, float, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticOpBase.java"
public final class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$IntVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.PrimitiveVar {
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  public void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public int get(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public <R extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>> R set(R, int);
  public int inc(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public int dec(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$IntVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, int, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticOpBase.java"
public final class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$LongVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.NonPrimitiveVar {
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  public void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public long get(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public <R extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>> R set(R, long);
  public long inc(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public long dec(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$LongVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, long, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticOpBase.java"
abstract class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$NonPrimitiveVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase$Var {
  protected final int index;
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  protected org.agilewiki.jactor2.core.messages.alt.StaticOpBase$NonPrimitiveVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase);
}
Compiled from "StaticOpBase.java"
public final class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$ObjectVar<E> extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.NonPrimitiveVar {
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  public void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public E get(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public <R extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>> R set(R, E);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$ObjectVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, java.lang.Class, java.lang.Object, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticOpBase.java"
abstract class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$PrimitiveVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase$Var {
  protected final int index;
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  protected org.agilewiki.jactor2.core.messages.alt.StaticOpBase$PrimitiveVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase);
}
Compiled from "StaticOpBase.java"
public final class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$ShortVar extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, RIWD>.PrimitiveVar {
  final org.agilewiki.jactor2.core.messages.alt.StaticOpBase this$0;
  public void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public short get(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public <R extends org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>> R set(R, short);
  public short inc(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  public short dec(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$ShortVar(org.agilewiki.jactor2.core.messages.alt.StaticOpBase, short, org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticOpBase.java"
abstract class org.agilewiki.jactor2.core.messages.alt.StaticOpBase$Var {
  public abstract void init(org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<?>);
  org.agilewiki.jactor2.core.messages.alt.StaticOpBase$Var(org.agilewiki.jactor2.core.messages.alt.StaticOpBase$1);
}
Compiled from "StaticSOp.java"
public abstract class org.agilewiki.jactor2.core.messages.alt.StaticSOp<B extends org.agilewiki.jactor2.core.blades.Blade, RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.alt.StaticOpBase<B, RESPONSE_TYPE, org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<RESPONSE_TYPE>> implements org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE> {
  public org.agilewiki.jactor2.core.messages.alt.StaticSOp(java.lang.Class<B>);
  protected final org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<RESPONSE_TYPE> createInternalWithData(org.agilewiki.jactor2.core.reactors.Reactor);
  public final RESPONSE_TYPE doSync(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected abstract RESPONSE_TYPE processSyncOperation(B, org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<RESPONSE_TYPE>) throws java.lang.Exception;
}
Compiled from "SyncNativeRequest.java"
public interface org.agilewiki.jactor2.core.messages.alt.SyncNativeRequest<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.messages.impl.RequestImpl<RESPONSE_TYPE> {
}
Compiled from "AsyncRequestImpl.java"
public interface org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.impl.RequestImpl<RESPONSE_TYPE>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE> {
  public abstract void processAsyncResponse(RESPONSE_TYPE);
  public abstract void setNoHungRequestCheck();
  public abstract boolean hasNoPendingResponses();
  public abstract void processAsyncException(java.lang.Exception);
  public abstract org.agilewiki.jactor2.core.messages.ExceptionHandler<RESPONSE_TYPE> setExceptionHandler(org.agilewiki.jactor2.core.messages.ExceptionHandler<RESPONSE_TYPE>);
  public abstract <RT> void send(org.agilewiki.jactor2.core.messages.impl.RequestImpl<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public abstract <RT, RT2> void send(org.agilewiki.jactor2.core.messages.impl.RequestImpl<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public abstract boolean cancel(org.agilewiki.jactor2.core.messages.impl.RequestImpl<?>);
  public abstract void cancelAll();
  public abstract <RT> org.agilewiki.jactor2.core.messages.impl.RequestImpl<RT> send(org.agilewiki.jactor2.core.messages.SOp<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public abstract <RT, RT2> org.agilewiki.jactor2.core.messages.impl.RequestImpl<RT> send(org.agilewiki.jactor2.core.messages.SOp<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public abstract <RT> org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl<RT> send(org.agilewiki.jactor2.core.messages.AOp<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public abstract <RT, RT2> org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl<RT> send(org.agilewiki.jactor2.core.messages.AOp<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public abstract <RT> void send(org.agilewiki.jactor2.core.messages.alt.SyncNativeRequest<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public abstract <RT, RT2> void send(org.agilewiki.jactor2.core.messages.alt.SyncNativeRequest<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public abstract <RT> void send(org.agilewiki.jactor2.core.messages.alt.AsyncNativeRequest<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT>);
  public abstract <RT, RT2> void send(org.agilewiki.jactor2.core.messages.alt.AsyncNativeRequest<RT>, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RT2>, RT2);
  public abstract void onCancel(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public abstract void onClose(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public abstract void setExpectedPendingResponses(int);
}
Compiled from "OneWayResponseProcessor.java"
public final class org.agilewiki.jactor2.core.messages.impl.OneWayResponseProcessor implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  public static final org.agilewiki.jactor2.core.messages.impl.OneWayResponseProcessor SINGLETON;
  public void processAsyncResponse(java.lang.Void);
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
  static {};
}
Compiled from "RequestImpl.java"
public interface org.agilewiki.jactor2.core.messages.impl.RequestImpl<RESPONSE_TYPE> extends java.lang.AutoCloseable, java.lang.Comparable<org.agilewiki.jactor2.core.messages.impl.RequestImpl> {
  public abstract org.agilewiki.jactor2.core.messages.Operation<RESPONSE_TYPE> asOperation();
  public abstract void doSend(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>);
  public abstract boolean isCanceled() throws org.agilewiki.jactor2.core.reactors.ReactorClosedException;
  public abstract org.agilewiki.jactor2.core.reactors.Reactor getTargetReactor();
  public abstract org.agilewiki.jactor2.core.reactors.Reactor getSourceReactor();
  public abstract void signal();
  public abstract RESPONSE_TYPE call() throws java.lang.Exception;
  public abstract <RT> RT syncDirect(org.agilewiki.jactor2.core.messages.SOp<RT>) throws java.lang.Exception;
  public abstract <RT> RT syncDirect(org.agilewiki.jactor2.core.messages.alt.SyncNativeRequest<RT>) throws java.lang.Exception;
  public abstract void setMessageTimeoutMillis(int);
  public abstract int getMessageTimeoutMillis();
}
Compiled from "RequestImplWithData.java"
public interface org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.impl.RequestImpl<RESPONSE_TYPE> {
  public abstract double getDouble(int);
  public abstract void setDouble(int, double);
  public abstract java.lang.Object getObject(int);
  public abstract void setObject(int, java.lang.Object);
}
Compiled from "SignalResponseProcessor.java"
public final class org.agilewiki.jactor2.core.messages.impl.SignalResponseProcessor implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  public static final org.agilewiki.jactor2.core.messages.impl.SignalResponseProcessor SINGLETON;
  public void processAsyncResponse(java.lang.Void);
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
  static {};
}
Compiled from "DelayAOp.java"
public class org.agilewiki.jactor2.core.plant.DelayAOp extends org.agilewiki.jactor2.core.messages.SAOp<java.lang.Void> {
  public org.agilewiki.jactor2.core.plant.DelayAOp(int);
  public void onCancel(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void onClose(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl) throws java.lang.Exception;
  static org.agilewiki.jactor2.core.messages.AsyncResponseProcessor access$000(org.agilewiki.jactor2.core.plant.DelayAOp);
}
Compiled from "DelayAOp.java"
class org.agilewiki.jactor2.core.plant.DelayAOp$1 implements java.lang.Runnable {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.plant.DelayAOp this$0;
  org.agilewiki.jactor2.core.plant.DelayAOp$1(org.agilewiki.jactor2.core.plant.DelayAOp, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void run();
}
Compiled from "DelayAOp.java"
class org.agilewiki.jactor2.core.plant.DelayAOp$1$1 extends org.agilewiki.jactor2.core.messages.SIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.plant.DelayAOp$1 this$1;
  org.agilewiki.jactor2.core.plant.DelayAOp$1$1(org.agilewiki.jactor2.core.plant.DelayAOp$1, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "MetricsTimer.java"
public interface org.agilewiki.jactor2.core.plant.impl.MetricsTimer {
  public abstract long nanos();
  public abstract void updateNanos(long, boolean);
}
Compiled from "PlantBase.java"
public abstract class org.agilewiki.jactor2.core.plant.impl.PlantBase {
  public org.agilewiki.jactor2.core.plant.impl.PlantBase();
  public static void close() throws java.lang.Exception;
  public static org.agilewiki.jactor2.core.reactors.facilities.Facility getInternalFacility();
  public static org.agilewiki.jactor2.core.plant.impl.PlantScheduler getPlantScheduler();
}
Compiled from "PlantImpl.java"
public abstract class org.agilewiki.jactor2.core.plant.impl.PlantImpl {
  public static final java.lang.String PLANT_INTERNAL_FACILITY_NAME;
  public static org.agilewiki.jactor2.core.plant.impl.PlantImpl getSingleton();
  public org.agilewiki.jactor2.core.plant.impl.PlantImpl();
  public abstract org.agilewiki.jactor2.core.reactors.facilities.Facility getInternalFacility();
  public void close() throws java.lang.Exception;
  public abstract org.agilewiki.jactor2.core.reactors.impl.ReactorImpl getCurrentReactorImpl();
  public abstract org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createNonBlockingReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public abstract org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createBlockingReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public abstract org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createIsolationReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public abstract org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createSwingBoundReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public abstract org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createThreadBoundReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int, java.lang.Runnable);
  public abstract <RESPONSE_TYPE> org.agilewiki.jactor2.core.messages.impl.RequestImpl<RESPONSE_TYPE> createSyncRequestImpl(org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public abstract <RESPONSE_TYPE> org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl<RESPONSE_TYPE> createAsyncRequestImpl(org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public abstract <RESPONSE_TYPE> org.agilewiki.jactor2.core.messages.impl.RequestImplWithData<RESPONSE_TYPE> createSyncRequestImplWithData(org.agilewiki.jactor2.core.messages.SyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public abstract <RESPONSE_TYPE> org.agilewiki.jactor2.core.messages.alt.AsyncRequestImplWithData<RESPONSE_TYPE> createAsyncRequestImplWithData(org.agilewiki.jactor2.core.messages.AsyncOperation<RESPONSE_TYPE>, org.agilewiki.jactor2.core.reactors.Reactor);
  public abstract org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImpl createCloseableImpl(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public abstract int getInitialLocalMessageQueueSize();
  public abstract int getInitialBufferSize();
  public abstract org.agilewiki.jactor2.core.plant.impl.PlantScheduler getPlantScheduler();
}
Compiled from "PlantScheduler.java"
public interface org.agilewiki.jactor2.core.plant.impl.PlantScheduler {
  public abstract java.lang.Object schedule(java.lang.Runnable, int);
  public abstract java.lang.Object scheduleAtFixedRate(java.lang.Runnable, int);
  public abstract void cancel(java.lang.Object);
  public abstract double currentTimeMillis();
  public abstract void close();
}
Compiled from "BlockingReactor.java"
public class org.agilewiki.jactor2.core.reactors.BlockingReactor extends org.agilewiki.jactor2.core.reactors.ReactorBase implements org.agilewiki.jactor2.core.reactors.CommonReactor,org.agilewiki.jactor2.core.blades.BlockingBlade {
  public org.agilewiki.jactor2.core.reactors.BlockingReactor() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.BlockingReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.BlockingReactor(int, int) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.BlockingReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int) throws java.lang.Exception;
  public void setIdle(java.lang.Runnable);
  public org.agilewiki.jactor2.core.reactors.BlockingReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "CommonReactor.java"
public interface org.agilewiki.jactor2.core.reactors.CommonReactor extends org.agilewiki.jactor2.core.reactors.Reactor {
}
Compiled from "IsolationReactor.java"
public class org.agilewiki.jactor2.core.reactors.IsolationReactor extends org.agilewiki.jactor2.core.reactors.ReactorBase implements org.agilewiki.jactor2.core.blades.IsolationBlade {
  public org.agilewiki.jactor2.core.reactors.IsolationReactor() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.IsolationReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.IsolationReactor(int, int) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.IsolationReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int) throws java.lang.Exception;
  protected org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public void setIdle(java.lang.Runnable);
  public org.agilewiki.jactor2.core.reactors.IsolationReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "NonBlockingReactor.java"
public class org.agilewiki.jactor2.core.reactors.NonBlockingReactor extends org.agilewiki.jactor2.core.reactors.ReactorBase implements org.agilewiki.jactor2.core.reactors.CommonReactor,org.agilewiki.jactor2.core.blades.NonBlockingBlade {
  public org.agilewiki.jactor2.core.reactors.NonBlockingReactor() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.NonBlockingReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.NonBlockingReactor(int, int) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.NonBlockingReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int) throws java.lang.Exception;
  protected org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int);
  public void setIdle(java.lang.Runnable);
  public org.agilewiki.jactor2.core.reactors.NonBlockingReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "Reactor.java"
public interface org.agilewiki.jactor2.core.reactors.Reactor extends org.agilewiki.jactor2.core.reactors.closeable.Closeable,org.agilewiki.jactor2.core.blades.Blade {
  public abstract org.agilewiki.jactor2.core.reactors.impl.ReactorImpl asReactorImpl();
  public abstract org.agilewiki.jactor2.core.reactors.Reactor getReactor();
  public abstract void close() throws java.lang.Exception;
  public abstract void fail(java.lang.String) throws java.lang.Exception;
  public abstract boolean isInboxEmpty();
  public abstract org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> nullSOp();
  public abstract org.agilewiki.jactor2.core.reactors.Reactor getParentReactor();
  public abstract boolean addCloseable(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public abstract boolean removeCloseable(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public abstract void warn(java.lang.String);
  public abstract void warn(java.lang.String, java.lang.Throwable);
  public abstract void error(java.lang.String);
  public abstract void error(java.lang.String, java.lang.Throwable);
  public abstract void addResource(org.agilewiki.jactor2.core.reactors.Reactor);
  public abstract boolean isResource(org.agilewiki.jactor2.core.reactors.Reactor);
  public abstract org.agilewiki.jactor2.core.plant.impl.MetricsTimer getMetricsTimer(java.lang.String);
}
Compiled from "ReactorBase.java"
public abstract class org.agilewiki.jactor2.core.reactors.ReactorBase extends org.agilewiki.jactor2.core.blades.BladeBase implements org.agilewiki.jactor2.core.reactors.Reactor {
  public org.agilewiki.jactor2.core.reactors.ReactorBase();
  public static org.agilewiki.jactor2.core.reactors.Reactor getCurrentReactor();
  public void initialize(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.impl.ReactorImpl asReactorImpl();
  public org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImpl asCloseableImpl();
  public org.agilewiki.jactor2.core.reactors.IsolationReactor getParentReactor();
  public boolean addCloseable(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public boolean removeCloseable(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public void close() throws java.lang.Exception;
  public void fail(java.lang.String) throws java.lang.Exception;
  public boolean isInboxEmpty();
  public org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> nullSOp();
  public void warn(java.lang.String);
  public void warn(java.lang.String, java.lang.Throwable);
  public void error(java.lang.String);
  public void error(java.lang.String, java.lang.Throwable);
  public void addResource(org.agilewiki.jactor2.core.reactors.Reactor);
  public boolean isResource(org.agilewiki.jactor2.core.reactors.Reactor);
  public org.agilewiki.jactor2.core.plant.impl.MetricsTimer getMetricsTimer(java.lang.String);
  public org.agilewiki.jactor2.core.reactors.Reactor getParentReactor();
}
Compiled from "ReactorClosedException.java"
public class org.agilewiki.jactor2.core.reactors.ReactorClosedException extends java.lang.RuntimeException {
  public org.agilewiki.jactor2.core.reactors.ReactorClosedException();
  public org.agilewiki.jactor2.core.reactors.ReactorClosedException(java.lang.String);
  public org.agilewiki.jactor2.core.reactors.ReactorClosedException(java.lang.String, java.lang.Throwable);
  public org.agilewiki.jactor2.core.reactors.ReactorClosedException(java.lang.Throwable);
  public org.agilewiki.jactor2.core.reactors.ReactorClosedException(java.lang.String, java.lang.Throwable, boolean, boolean);
}
Compiled from "SwingBoundReactor.java"
public class org.agilewiki.jactor2.core.reactors.SwingBoundReactor extends org.agilewiki.jactor2.core.reactors.ThreadBoundReactor implements java.awt.event.WindowListener,org.agilewiki.jactor2.core.blades.SwingBoundBlade {
  public org.agilewiki.jactor2.core.reactors.SwingBoundReactor() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.SwingBoundReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.SwingBoundReactor(int, int) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.SwingBoundReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int) throws java.lang.Exception;
  protected org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int, java.lang.Runnable);
  public void run();
  public void windowOpened(java.awt.event.WindowEvent);
  public void windowClosing(java.awt.event.WindowEvent);
  public void windowClosed(java.awt.event.WindowEvent);
  public void windowIconified(java.awt.event.WindowEvent);
  public void windowDeiconified(java.awt.event.WindowEvent);
  public void windowActivated(java.awt.event.WindowEvent);
  public void windowDeactivated(java.awt.event.WindowEvent);
  public org.agilewiki.jactor2.core.reactors.SwingBoundReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "ThreadBoundReactor.java"
public class org.agilewiki.jactor2.core.reactors.ThreadBoundReactor extends org.agilewiki.jactor2.core.reactors.ReactorBase implements org.agilewiki.jactor2.core.reactors.CommonReactor,java.lang.Runnable,org.agilewiki.jactor2.core.blades.ThreadBoundBlade {
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor(java.lang.Runnable) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor, java.lang.Runnable) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor(int, int, java.lang.Runnable) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int, java.lang.Runnable) throws java.lang.Exception;
  protected org.agilewiki.jactor2.core.reactors.impl.ReactorImpl createReactorImpl(org.agilewiki.jactor2.core.reactors.IsolationReactor, int, int, java.lang.Runnable);
  public void run();
  public org.agilewiki.jactor2.core.reactors.ThreadBoundReactor getReactor();
  public org.agilewiki.jactor2.core.reactors.Reactor getReactor();
}
Compiled from "Closeable.java"
public interface org.agilewiki.jactor2.core.reactors.closeable.Closeable extends java.lang.AutoCloseable {
  public abstract org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImpl asCloseableImpl();
}
Compiled from "CloseableImpl.java"
public interface org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImpl extends java.lang.AutoCloseable {
  public abstract void addReactor(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public abstract void removeReactor(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
}
Compiled from "CloseableImplImpl.java"
public class org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImplImpl implements org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImpl {
  public org.agilewiki.jactor2.core.reactors.closeable.impl.CloseableImplImpl(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public int hashCode();
  public void addReactor(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public void removeReactor(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public void close() throws java.lang.Exception;
}
Compiled from "Facility.java"
public class org.agilewiki.jactor2.core.reactors.facilities.Facility extends org.agilewiki.jactor2.core.reactors.IsolationReactor implements org.agilewiki.jactor2.core.blades.NamedBlade {
  public final java.lang.String name;
  public org.agilewiki.jactor2.core.reactors.facilities.Facility(java.lang.String) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.facilities.Facility(java.lang.String, org.agilewiki.jactor2.core.reactors.facilities.Facility) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.facilities.Facility(java.lang.String, int, int) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.reactors.facilities.Facility(java.lang.String, java.lang.Void, int, int) throws java.lang.Exception;
  public java.lang.String getName();
  protected void validateName(java.lang.String);
}
Compiled from "RegistrationNotification.java"
public class org.agilewiki.jactor2.core.reactors.facilities.RegistrationNotification {
  public final org.agilewiki.jactor2.core.reactors.facilities.Facility facility;
  public final java.lang.String name;
  public final org.agilewiki.jactor2.core.blades.NamedBlade blade;
  public org.agilewiki.jactor2.core.reactors.facilities.RegistrationNotification(org.agilewiki.jactor2.core.reactors.facilities.Facility, java.lang.String, org.agilewiki.jactor2.core.blades.NamedBlade);
  public boolean isRegistration();
  public boolean isUnregistration();
}
Compiled from "PoolThreadReactorImpl.java"
public interface org.agilewiki.jactor2.core.reactors.impl.PoolThreadReactorImpl extends org.agilewiki.jactor2.core.reactors.impl.ReactorImpl {
  public abstract java.lang.Runnable getOnIdle();
  public abstract void setOnIdle(java.lang.Runnable);
}
Compiled from "ReactorImpl.java"
public interface org.agilewiki.jactor2.core.reactors.impl.ReactorImpl extends org.agilewiki.jactor2.core.reactors.closeable.Closeable,java.lang.Runnable,org.agilewiki.jactor2.core.blades.Blade {
  public abstract void initialize(org.agilewiki.jactor2.core.reactors.Reactor) throws java.lang.Exception;
  public abstract org.agilewiki.jactor2.core.reactors.Reactor asReactor();
  public abstract org.agilewiki.jactor2.core.reactors.IsolationReactor getParentReactor();
  public abstract int getInitialBufferSize();
  public abstract int getInitialLocalQueueSize();
  public abstract boolean isRunning();
  public abstract void fail(java.lang.String) throws java.lang.Exception;
  public abstract boolean isInboxEmpty();
  public abstract org.agilewiki.jactor2.core.messages.ExceptionHandler<?> setExceptionHandler(org.agilewiki.jactor2.core.messages.ExceptionHandler<?>);
  public abstract org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> nullSOp();
  public abstract boolean addCloseable(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public abstract boolean removeCloseable(org.agilewiki.jactor2.core.reactors.closeable.Closeable);
  public abstract void warn(java.lang.String);
  public abstract void warn(java.lang.String, java.lang.Throwable);
  public abstract void error(java.lang.String);
  public abstract void error(java.lang.String, java.lang.Throwable);
  public abstract void addResource(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public abstract boolean isResource(org.agilewiki.jactor2.core.reactors.impl.ReactorImpl);
  public abstract org.agilewiki.jactor2.core.plant.impl.MetricsTimer getMetricsTimer(java.lang.String);
}
Compiled from "Simple.java"
class org.agilewiki.jactor2.core.readme.blades.A extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  final org.agilewiki.jactor2.core.readme.blades.B b;
  public org.agilewiki.jactor2.core.readme.blades.A() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> startAOp();
}
Compiled from "Simple.java"
class org.agilewiki.jactor2.core.readme.blades.A$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.blades.A this$0;
  org.agilewiki.jactor2.core.readme.blades.A$1(org.agilewiki.jactor2.core.readme.blades.A, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Simple.java"
class org.agilewiki.jactor2.core.readme.blades.A$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.readme.blades.A$1 this$1;
  org.agilewiki.jactor2.core.readme.blades.A$1$1(org.agilewiki.jactor2.core.readme.blades.A$1, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Compound.java"
class org.agilewiki.jactor2.core.readme.blades.AA extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.readme.blades.AA() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> startAOp();
}
Compiled from "Compound.java"
class org.agilewiki.jactor2.core.readme.blades.AA$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.blades.AA this$0;
  org.agilewiki.jactor2.core.readme.blades.AA$1(org.agilewiki.jactor2.core.readme.blades.AA, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Compound.java"
class org.agilewiki.jactor2.core.readme.blades.AA$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.readme.blades.AA$1 this$1;
  org.agilewiki.jactor2.core.readme.blades.AA$1$1(org.agilewiki.jactor2.core.readme.blades.AA$1, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Decoupled.java"
class org.agilewiki.jactor2.core.readme.blades.AAA extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.readme.blades.AAA() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> startAOp(org.agilewiki.jactor2.core.readme.blades.BBB);
}
Compiled from "Decoupled.java"
class org.agilewiki.jactor2.core.readme.blades.AAA$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.blades.BBB val$_b;
  final org.agilewiki.jactor2.core.readme.blades.AAA this$0;
  org.agilewiki.jactor2.core.readme.blades.AAA$1(org.agilewiki.jactor2.core.readme.blades.AAA, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, org.agilewiki.jactor2.core.readme.blades.BBB);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Decoupled.java"
class org.agilewiki.jactor2.core.readme.blades.AAA$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.readme.blades.AAA$1 this$1;
  org.agilewiki.jactor2.core.readme.blades.AAA$1$1(org.agilewiki.jactor2.core.readme.blades.AAA$1, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Account.java"
public class org.agilewiki.jactor2.core.readme.blades.Account extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.readme.blades.Account() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> depositSOp(int);
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> transferAOp(int, org.agilewiki.jactor2.core.readme.blades.Account);
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static int access$000(org.agilewiki.jactor2.core.readme.blades.Account);
  static int access$002(org.agilewiki.jactor2.core.readme.blades.Account, int);
  static int access$100(org.agilewiki.jactor2.core.readme.blades.Account);
  static int access$102(org.agilewiki.jactor2.core.readme.blades.Account, int);
}
Compiled from "Account.java"
class org.agilewiki.jactor2.core.readme.blades.Account$1 extends org.agilewiki.jactor2.core.messages.SOp<java.lang.Void> {
  final int val$_amount;
  final org.agilewiki.jactor2.core.readme.blades.Account this$0;
  org.agilewiki.jactor2.core.readme.blades.Account$1(org.agilewiki.jactor2.core.readme.blades.Account, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, int);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "Account.java"
class org.agilewiki.jactor2.core.readme.blades.Account$2 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Boolean> {
  final int val$_amount;
  final org.agilewiki.jactor2.core.readme.blades.Account val$_account;
  final org.agilewiki.jactor2.core.readme.blades.Account this$0;
  org.agilewiki.jactor2.core.readme.blades.Account$2(org.agilewiki.jactor2.core.readme.blades.Account, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, int, org.agilewiki.jactor2.core.readme.blades.Account);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Boolean>) throws java.lang.Exception;
}
Compiled from "Account.java"
class org.agilewiki.jactor2.core.readme.blades.Account$2$1 extends org.agilewiki.jactor2.core.messages.ExceptionHandler<java.lang.Boolean> {
  final org.agilewiki.jactor2.core.readme.blades.Account$2 this$1;
  org.agilewiki.jactor2.core.readme.blades.Account$2$1(org.agilewiki.jactor2.core.readme.blades.Account$2);
  public java.lang.Boolean processException(java.lang.Exception) throws java.lang.Exception;
  public java.lang.Object processException(java.lang.Exception) throws java.lang.Exception;
}
Compiled from "Account.java"
class org.agilewiki.jactor2.core.readme.blades.Account$2$2 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.readme.blades.Account$2 this$1;
  org.agilewiki.jactor2.core.readme.blades.Account$2$2(org.agilewiki.jactor2.core.readme.blades.Account$2, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Simple.java"
class org.agilewiki.jactor2.core.readme.blades.B extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.readme.blades.B() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> add1AOp();
  static int access$000(org.agilewiki.jactor2.core.readme.blades.B);
  static int access$002(org.agilewiki.jactor2.core.readme.blades.B, int);
}
Compiled from "Simple.java"
class org.agilewiki.jactor2.core.readme.blades.B$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.blades.B this$0;
  org.agilewiki.jactor2.core.readme.blades.B$1(org.agilewiki.jactor2.core.readme.blades.B, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Compound.java"
class org.agilewiki.jactor2.core.readme.blades.BB extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  org.agilewiki.jactor2.core.readme.blades.BB() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> addValueAOp();
  static int access$000(org.agilewiki.jactor2.core.readme.blades.BB);
  static int access$002(org.agilewiki.jactor2.core.readme.blades.BB, int);
  static org.agilewiki.jactor2.core.readme.blades.CC access$100(org.agilewiki.jactor2.core.readme.blades.BB);
}
Compiled from "Compound.java"
class org.agilewiki.jactor2.core.readme.blades.BB$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.blades.BB this$0;
  org.agilewiki.jactor2.core.readme.blades.BB$1(org.agilewiki.jactor2.core.readme.blades.BB, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Compound.java"
class org.agilewiki.jactor2.core.readme.blades.BB$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Integer> {
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.readme.blades.BB$1 this$1;
  org.agilewiki.jactor2.core.readme.blades.BB$1$1(org.agilewiki.jactor2.core.readme.blades.BB$1, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Integer) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Decoupled.java"
interface org.agilewiki.jactor2.core.readme.blades.BBB {
  public abstract org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> add1AOp();
}
Compiled from "Decoupled.java"
class org.agilewiki.jactor2.core.readme.blades.BImpl extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase implements org.agilewiki.jactor2.core.readme.blades.BBB {
  int count;
  public org.agilewiki.jactor2.core.readme.blades.BImpl() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> add1AOp();
}
Compiled from "Decoupled.java"
class org.agilewiki.jactor2.core.readme.blades.BImpl$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.blades.BImpl this$0;
  org.agilewiki.jactor2.core.readme.blades.BImpl$1(org.agilewiki.jactor2.core.readme.blades.BImpl, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Compound.java"
class org.agilewiki.jactor2.core.readme.blades.CC extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  org.agilewiki.jactor2.core.readme.blades.CC() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Integer> valueAOp();
}
Compiled from "Compound.java"
class org.agilewiki.jactor2.core.readme.blades.CC$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Integer> {
  final org.agilewiki.jactor2.core.readme.blades.CC this$0;
  org.agilewiki.jactor2.core.readme.blades.CC$1(org.agilewiki.jactor2.core.readme.blades.CC, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Integer>) throws java.lang.Exception;
}
Compiled from "Compound.java"
public class org.agilewiki.jactor2.core.readme.blades.Compound {
  public org.agilewiki.jactor2.core.readme.blades.Compound();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Decoupled.java"
public class org.agilewiki.jactor2.core.readme.blades.Decoupled {
  public org.agilewiki.jactor2.core.readme.blades.Decoupled();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "ExceptionHandlerSample.java"
class org.agilewiki.jactor2.core.readme.blades.ExceptionBlade extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  org.agilewiki.jactor2.core.readme.blades.ExceptionBlade(org.agilewiki.jactor2.core.reactors.NonBlockingReactor) throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> exceptionAOp();
}
Compiled from "ExceptionHandlerSample.java"
class org.agilewiki.jactor2.core.readme.blades.ExceptionBlade$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.blades.ExceptionBlade this$0;
  org.agilewiki.jactor2.core.readme.blades.ExceptionBlade$1(org.agilewiki.jactor2.core.readme.blades.ExceptionBlade, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "ExceptionHandlerSample.java"
class org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade(org.agilewiki.jactor2.core.readme.blades.ExceptionBlade, org.agilewiki.jactor2.core.reactors.NonBlockingReactor) throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.String> testAOp();
  static org.agilewiki.jactor2.core.readme.blades.ExceptionBlade access$000(org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade);
}
Compiled from "ExceptionHandlerSample.java"
class org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.String> {
  final org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade this$0;
  org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade$1(org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.String>) throws java.lang.Exception;
}
Compiled from "ExceptionHandlerSample.java"
class org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade$1$1 extends org.agilewiki.jactor2.core.messages.ExceptionHandler<java.lang.String> {
  final org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade$1 this$1;
  org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade$1$1(org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerBlade$1);
  public java.lang.String processException(java.lang.Exception) throws java.lang.Exception;
  public java.lang.Object processException(java.lang.Exception) throws java.lang.Exception;
}
Compiled from "ExceptionHandlerSample.java"
public class org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerSample {
  public org.agilewiki.jactor2.core.readme.blades.ExceptionHandlerSample();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Simple.java"
public class org.agilewiki.jactor2.core.readme.blades.Simple {
  public org.agilewiki.jactor2.core.readme.blades.Simple();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Delays.java"
public class org.agilewiki.jactor2.core.readme.plant.Delays extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  org.agilewiki.jactor2.core.readme.plant.Delays(long) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> runAOp();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static long access$000(org.agilewiki.jactor2.core.readme.plant.Delays);
}
Compiled from "Delays.java"
class org.agilewiki.jactor2.core.readme.plant.Delays$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.plant.Delays this$0;
  org.agilewiki.jactor2.core.readme.plant.Delays$1(org.agilewiki.jactor2.core.readme.plant.Delays, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Delays.java"
class org.agilewiki.jactor2.core.readme.plant.Delays$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.readme.plant.Delays$1 this$1;
  org.agilewiki.jactor2.core.readme.plant.Delays$1$1(org.agilewiki.jactor2.core.readme.plant.Delays$1, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "SwingBoundReactorSample.java"
class org.agilewiki.jactor2.core.readme.reactors.HelloWorld extends org.agilewiki.jactor2.core.blades.SwingBoundBladeBase {
  org.agilewiki.jactor2.core.readme.reactors.HelloWorld(org.agilewiki.jactor2.core.reactors.SwingBoundReactor) throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AIOp<java.lang.Void> createAndShowAOp();
}
Compiled from "SwingBoundReactorSample.java"
class org.agilewiki.jactor2.core.readme.reactors.HelloWorld$1 extends org.agilewiki.jactor2.core.messages.AIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.reactors.HelloWorld this$0;
  org.agilewiki.jactor2.core.readme.reactors.HelloWorld$1(org.agilewiki.jactor2.core.readme.reactors.HelloWorld, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "ThreadBoundReactorSample.java"
class org.agilewiki.jactor2.core.readme.reactors.SampleThreadBoundBlade extends org.agilewiki.jactor2.core.blades.ThreadBoundBladeBase {
  org.agilewiki.jactor2.core.readme.reactors.SampleThreadBoundBlade(org.agilewiki.jactor2.core.reactors.ThreadBoundReactor) throws java.lang.Exception;
  void fin() throws java.lang.Exception;
}
Compiled from "SwingBoundReactorSample.java"
public class org.agilewiki.jactor2.core.readme.reactors.SwingBoundReactorSample {
  public org.agilewiki.jactor2.core.readme.reactors.SwingBoundReactorSample();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "ThreadBoundReactorSample.java"
public class org.agilewiki.jactor2.core.readme.reactors.ThreadBoundReactorSample {
  public org.agilewiki.jactor2.core.readme.reactors.ThreadBoundReactorSample();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "ThreadBoundReactorSample.java"
final class org.agilewiki.jactor2.core.readme.reactors.ThreadBoundReactorSample$1 implements java.lang.Runnable {
  final java.lang.Thread val$mainThread;
  org.agilewiki.jactor2.core.readme.reactors.ThreadBoundReactorSample$1(java.lang.Thread);
  public void run();
}
Compiled from "ThreadBoundReactorSample.java"
final class org.agilewiki.jactor2.core.readme.reactors.ThreadBoundReactorSample$2 extends org.agilewiki.jactor2.core.messages.SIOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.reactors.SampleThreadBoundBlade val$threadBoundBlade;
  org.agilewiki.jactor2.core.readme.reactors.ThreadBoundReactorSample$2(java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, org.agilewiki.jactor2.core.readme.reactors.SampleThreadBoundBlade);
  protected java.lang.Void processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "ExceptionSample.java"
class org.agilewiki.jactor2.core.readme.requests.A extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.readme.requests.A() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> startAOp();
}
Compiled from "ExceptionSample.java"
class org.agilewiki.jactor2.core.readme.requests.A$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.requests.A this$0;
  org.agilewiki.jactor2.core.readme.requests.A$1(org.agilewiki.jactor2.core.readme.requests.A, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "ExceptionSample.java"
class org.agilewiki.jactor2.core.readme.requests.A$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.readme.requests.A$1 this$1;
  org.agilewiki.jactor2.core.readme.requests.A$1$1(org.agilewiki.jactor2.core.readme.requests.A$1, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "ExceptionSample.java"
class org.agilewiki.jactor2.core.readme.requests.A$1$2 extends org.agilewiki.jactor2.core.messages.ExceptionHandler<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.requests.A$1 this$1;
  org.agilewiki.jactor2.core.readme.requests.A$1$2(org.agilewiki.jactor2.core.readme.requests.A$1);
  public void processException(java.lang.Exception, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "AllMain.java"
class org.agilewiki.jactor2.core.readme.requests.A1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  org.agilewiki.jactor2.core.readme.requests.A1(java.lang.String) throws java.lang.Exception;
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "AnyMain.java"
class org.agilewiki.jactor2.core.readme.requests.A2 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Long> {
  final long delay;
  org.agilewiki.jactor2.core.readme.requests.A2(java.lang.String, long) throws java.lang.Exception;
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Long>) throws java.lang.Exception;
}
Compiled from "AnyMain.java"
class org.agilewiki.jactor2.core.readme.requests.A3 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Long> {
  final long delay;
  org.agilewiki.jactor2.core.readme.requests.A3(java.lang.String, long) throws java.lang.Exception;
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Long>) throws java.lang.Exception;
}
Compiled from "AllMain.java"
class org.agilewiki.jactor2.core.readme.requests.All extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.AOp<java.lang.Void>[] requests;
  org.agilewiki.jactor2.core.readme.requests.All(org.agilewiki.jactor2.core.messages.AOp<java.lang.Void>...) throws java.lang.Exception;
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "AllMain.java"
class org.agilewiki.jactor2.core.readme.requests.All$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.readme.requests.All this$0;
  org.agilewiki.jactor2.core.readme.requests.All$1(org.agilewiki.jactor2.core.readme.requests.All, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "AllMain.java"
public class org.agilewiki.jactor2.core.readme.requests.AllMain {
  public org.agilewiki.jactor2.core.readme.requests.AllMain();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "AnyMain.java"
class org.agilewiki.jactor2.core.readme.requests.Any<RESPONSE_TYPE> extends org.agilewiki.jactor2.core.messages.AOp<RESPONSE_TYPE> {
  final org.agilewiki.jactor2.core.messages.AOp<RESPONSE_TYPE>[] requests;
  public org.agilewiki.jactor2.core.readme.requests.Any(org.agilewiki.jactor2.core.messages.AOp<RESPONSE_TYPE>...) throws java.lang.Exception;
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
}
Compiled from "AnyMain.java"
class org.agilewiki.jactor2.core.readme.requests.Any$1 extends org.agilewiki.jactor2.core.messages.ExceptionHandler<RESPONSE_TYPE> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.readme.requests.Any this$0;
  org.agilewiki.jactor2.core.readme.requests.Any$1(org.agilewiki.jactor2.core.readme.requests.Any, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void processException(java.lang.Exception, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<RESPONSE_TYPE>) throws java.lang.Exception;
}
Compiled from "AnyMain.java"
public class org.agilewiki.jactor2.core.readme.requests.AnyMain {
  public org.agilewiki.jactor2.core.readme.requests.AnyMain();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "ExceptionSample.java"
class org.agilewiki.jactor2.core.readme.requests.B extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  public org.agilewiki.jactor2.core.readme.requests.B() throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> woopsAOp();
}
Compiled from "ExceptionSample.java"
class org.agilewiki.jactor2.core.readme.requests.B$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Void> {
  final org.agilewiki.jactor2.core.readme.requests.B this$0;
  org.agilewiki.jactor2.core.readme.requests.B$1(org.agilewiki.jactor2.core.readme.requests.B, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "ExceptionSample.java"
public class org.agilewiki.jactor2.core.readme.requests.ExceptionSample {
  public org.agilewiki.jactor2.core.readme.requests.ExceptionSample();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "AnyMain.java"
class org.agilewiki.jactor2.core.readme.requests.ForcedException extends java.lang.Exception {
  org.agilewiki.jactor2.core.readme.requests.ForcedException();
}
Compiled from "RequestSample.java"
class org.agilewiki.jactor2.core.readme.requests.IndirectBlade extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  org.agilewiki.jactor2.core.readme.requests.IndirectBlade(org.agilewiki.jactor2.core.readme.requests.SampleBlade2, org.agilewiki.jactor2.core.reactors.NonBlockingReactor) throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AOp<java.lang.Integer> indirectAOp(int);
  static org.agilewiki.jactor2.core.readme.requests.SampleBlade2 access$000(org.agilewiki.jactor2.core.readme.requests.IndirectBlade);
}
Compiled from "RequestSample.java"
class org.agilewiki.jactor2.core.readme.requests.IndirectBlade$1 extends org.agilewiki.jactor2.core.messages.AOp<java.lang.Integer> {
  final int val$_newState;
  final org.agilewiki.jactor2.core.readme.requests.IndirectBlade this$0;
  org.agilewiki.jactor2.core.readme.requests.IndirectBlade$1(org.agilewiki.jactor2.core.readme.requests.IndirectBlade, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, int);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Integer>) throws java.lang.Exception;
}
Compiled from "RequestSample.java"
class org.agilewiki.jactor2.core.readme.requests.IndirectBlade$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Integer> {
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.readme.requests.IndirectBlade$1 this$1;
  org.agilewiki.jactor2.core.readme.requests.IndirectBlade$1$1(org.agilewiki.jactor2.core.readme.requests.IndirectBlade$1, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Integer) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "RequestSample.java"
public class org.agilewiki.jactor2.core.readme.requests.RequestSample {
  public org.agilewiki.jactor2.core.readme.requests.RequestSample();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "RequestSample.java"
class org.agilewiki.jactor2.core.readme.requests.SampleBlade2 extends org.agilewiki.jactor2.core.blades.NonBlockingBladeBase {
  org.agilewiki.jactor2.core.readme.requests.SampleBlade2(org.agilewiki.jactor2.core.reactors.NonBlockingReactor) throws java.lang.Exception;
  org.agilewiki.jactor2.core.messages.AIOp<java.lang.Integer> updateAOp(int);
  static int access$000(org.agilewiki.jactor2.core.readme.requests.SampleBlade2);
  static int access$002(org.agilewiki.jactor2.core.readme.requests.SampleBlade2, int);
}
Compiled from "RequestSample.java"
class org.agilewiki.jactor2.core.readme.requests.SampleBlade2$1 extends org.agilewiki.jactor2.core.messages.AIOp<java.lang.Integer> {
  final int val$_newState;
  final org.agilewiki.jactor2.core.readme.requests.SampleBlade2 this$0;
  org.agilewiki.jactor2.core.readme.requests.SampleBlade2$1(org.agilewiki.jactor2.core.readme.requests.SampleBlade2, java.lang.String, org.agilewiki.jactor2.core.reactors.Reactor, int);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Integer>) throws java.lang.Exception;
}
Compiled from "EH.java"
public class org.agilewiki.jactor2.core.revisited.EH extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  final org.agilewiki.jactor2.core.messages.ExceptionHandler exceptionHandler;
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "EH.java"
class org.agilewiki.jactor2.core.revisited.EH$1 extends org.agilewiki.jactor2.core.messages.ExceptionHandler {
  final org.agilewiki.jactor2.core.revisited.EH this$0;
  org.agilewiki.jactor2.core.revisited.EH$1(org.agilewiki.jactor2.core.revisited.EH);
  public void processException(java.lang.Exception, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor) throws java.lang.Exception;
}
Compiled from "EH.java"
class org.agilewiki.jactor2.core.revisited.EH$2 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final org.agilewiki.jactor2.core.revisited.EH this$0;
  org.agilewiki.jactor2.core.revisited.EH$2(org.agilewiki.jactor2.core.revisited.EH, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "EH.java"
class org.agilewiki.jactor2.core.revisited.EH$2$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.revisited.EH$2 this$1;
  org.agilewiki.jactor2.core.revisited.EH$2$1(org.agilewiki.jactor2.core.revisited.EH$2);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "EH.java"
class org.agilewiki.jactor2.core.revisited.Ex extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  org.agilewiki.jactor2.core.revisited.Ex() throws java.lang.Exception;
  org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> bad();
}
Compiled from "EH.java"
class org.agilewiki.jactor2.core.revisited.Ex$1 extends org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> {
  final org.agilewiki.jactor2.core.revisited.Ex this$0;
  org.agilewiki.jactor2.core.revisited.Ex$1(org.agilewiki.jactor2.core.revisited.Ex, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "HelloWorld.java"
public class org.agilewiki.jactor2.core.revisited.HelloWorld extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "HelloWorld.java"
class org.agilewiki.jactor2.core.revisited.HelloWorld$1 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final org.agilewiki.jactor2.core.revisited.HelloWorld this$0;
  org.agilewiki.jactor2.core.revisited.HelloWorld$1(org.agilewiki.jactor2.core.revisited.HelloWorld, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Isolation.java"
public class org.agilewiki.jactor2.core.revisited.Isolation extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Isolation.java"
class org.agilewiki.jactor2.core.revisited.Isolation$1 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final int val$_p;
  final org.agilewiki.jactor2.core.revisited.Isolation this$0;
  org.agilewiki.jactor2.core.revisited.Isolation$1(org.agilewiki.jactor2.core.revisited.Isolation, java.lang.String, int);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Isolation.java"
class org.agilewiki.jactor2.core.revisited.Isolation$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.revisited.Isolation$1 this$1;
  org.agilewiki.jactor2.core.revisited.Isolation$1$1(org.agilewiki.jactor2.core.revisited.Isolation$1, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Order.java"
public class org.agilewiki.jactor2.core.revisited.Order extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  org.agilewiki.jactor2.core.revisited.Other otherX;
  org.agilewiki.jactor2.core.revisited.Other otherY;
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Order.java"
class org.agilewiki.jactor2.core.revisited.Order$1 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final org.agilewiki.jactor2.core.revisited.Order this$0;
  org.agilewiki.jactor2.core.revisited.Order$1(org.agilewiki.jactor2.core.revisited.Order, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Order.java"
class org.agilewiki.jactor2.core.revisited.Order$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.revisited.Order$1 this$1;
  org.agilewiki.jactor2.core.revisited.Order$1$1(org.agilewiki.jactor2.core.revisited.Order$1);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Order.java"
class org.agilewiki.jactor2.core.revisited.Order$1$2 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$runResponseProcessor;
  final org.agilewiki.jactor2.core.revisited.Order$1 this$1;
  org.agilewiki.jactor2.core.revisited.Order$1$2(org.agilewiki.jactor2.core.revisited.Order$1, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Order.java"
class org.agilewiki.jactor2.core.revisited.Order$1$3 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$runResponseProcessor3;
  final org.agilewiki.jactor2.core.revisited.Order$1 this$1;
  org.agilewiki.jactor2.core.revisited.Order$1$3(org.agilewiki.jactor2.core.revisited.Order$1, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Order.java"
class org.agilewiki.jactor2.core.revisited.Order$1$4 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$runResponseProcessor2;
  final org.agilewiki.jactor2.core.revisited.Order$1 this$1;
  org.agilewiki.jactor2.core.revisited.Order$1$4(org.agilewiki.jactor2.core.revisited.Order$1, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Order.java"
class org.agilewiki.jactor2.core.revisited.Order$1$5 extends org.agilewiki.jactor2.core.messages.ExceptionHandler {
  final org.agilewiki.jactor2.core.revisited.Order$1 this$1;
  org.agilewiki.jactor2.core.revisited.Order$1$5(org.agilewiki.jactor2.core.revisited.Order$1);
  public void processException(java.lang.Exception, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor) throws java.lang.Exception;
}
Compiled from "Order.java"
class org.agilewiki.jactor2.core.revisited.Other extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  org.agilewiki.jactor2.core.revisited.Other() throws java.lang.Exception;
  org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> run(org.agilewiki.jactor2.core.revisited.Other, java.lang.String);
  org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> blip(java.lang.String);
}
Compiled from "Order.java"
class org.agilewiki.jactor2.core.revisited.Other$1 extends org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> {
  final org.agilewiki.jactor2.core.revisited.Other val$_other;
  final java.lang.String val$_i;
  final org.agilewiki.jactor2.core.revisited.Other this$0;
  org.agilewiki.jactor2.core.revisited.Other$1(org.agilewiki.jactor2.core.revisited.Other, java.lang.String, org.agilewiki.jactor2.core.revisited.Other, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor) throws java.lang.Exception;
}
Compiled from "Order.java"
class org.agilewiki.jactor2.core.revisited.Other$2 extends org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> {
  final java.lang.String val$_i;
  final org.agilewiki.jactor2.core.revisited.Other this$0;
  org.agilewiki.jactor2.core.revisited.Other$2(org.agilewiki.jactor2.core.revisited.Other, java.lang.String, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor) throws java.lang.Exception;
}
Compiled from "Parallel.java"
public class org.agilewiki.jactor2.core.revisited.Parallel extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Parallel.java"
class org.agilewiki.jactor2.core.revisited.Parallel$1 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final int val$_p;
  final org.agilewiki.jactor2.core.revisited.Parallel this$0;
  org.agilewiki.jactor2.core.revisited.Parallel$1(org.agilewiki.jactor2.core.revisited.Parallel, java.lang.String, int);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Parallel.java"
class org.agilewiki.jactor2.core.revisited.Parallel$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.revisited.Parallel$1 this$1;
  org.agilewiki.jactor2.core.revisited.Parallel$1$1(org.agilewiki.jactor2.core.revisited.Parallel$1, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Signal.java"
class org.agilewiki.jactor2.core.revisited.Ping extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  org.agilewiki.jactor2.core.revisited.Ping(org.agilewiki.jactor2.core.revisited.Signal) throws java.lang.Exception;
  org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> ping();
  static org.agilewiki.jactor2.core.revisited.Signal access$000(org.agilewiki.jactor2.core.revisited.Ping);
}
Compiled from "Signal.java"
class org.agilewiki.jactor2.core.revisited.Ping$1 extends org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> {
  final org.agilewiki.jactor2.core.revisited.Ping this$0;
  org.agilewiki.jactor2.core.revisited.Ping$1(org.agilewiki.jactor2.core.revisited.Ping, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Sequence.java"
public class org.agilewiki.jactor2.core.revisited.Sequence extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static org.agilewiki.jactor2.core.revisited.Worker access$002(org.agilewiki.jactor2.core.revisited.Sequence, org.agilewiki.jactor2.core.revisited.Worker);
  static org.agilewiki.jactor2.core.messages.AsyncResponseProcessor access$102(org.agilewiki.jactor2.core.revisited.Sequence, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  static org.agilewiki.jactor2.core.revisited.Worker access$000(org.agilewiki.jactor2.core.revisited.Sequence);
  static org.agilewiki.jactor2.core.messages.AsyncResponseProcessor access$100(org.agilewiki.jactor2.core.revisited.Sequence);
}
Compiled from "Sequence.java"
class org.agilewiki.jactor2.core.revisited.Sequence$1 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final int val$maxCount;
  final org.agilewiki.jactor2.core.revisited.Sequence this$0;
  org.agilewiki.jactor2.core.revisited.Sequence$1(org.agilewiki.jactor2.core.revisited.Sequence, java.lang.String, int);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Sequence.java"
class org.agilewiki.jactor2.core.revisited.Sequence$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl val$_asyncRequestImpl;
  final org.agilewiki.jactor2.core.revisited.Sequence$1 this$1;
  org.agilewiki.jactor2.core.revisited.Sequence$1$1(org.agilewiki.jactor2.core.revisited.Sequence$1, org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Signal.java"
public class org.agilewiki.jactor2.core.revisited.Signal extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
  void blip();
}
Compiled from "Signal.java"
class org.agilewiki.jactor2.core.revisited.Signal$1 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final org.agilewiki.jactor2.core.revisited.Signal this$0;
  org.agilewiki.jactor2.core.revisited.Signal$1(org.agilewiki.jactor2.core.revisited.Signal, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Signal.java"
class org.agilewiki.jactor2.core.revisited.Signal$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.revisited.Signal$1 this$1;
  org.agilewiki.jactor2.core.revisited.Signal$1$1(org.agilewiki.jactor2.core.revisited.Signal$1);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Signal.java"
class org.agilewiki.jactor2.core.revisited.Signal$2 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final org.agilewiki.jactor2.core.revisited.Signal this$0;
  org.agilewiki.jactor2.core.revisited.Signal$2(org.agilewiki.jactor2.core.revisited.Signal, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Simple.java"
public class org.agilewiki.jactor2.core.revisited.Simple extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Simple.java"
class org.agilewiki.jactor2.core.revisited.Simple$1 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final org.agilewiki.jactor2.core.revisited.Simple this$0;
  org.agilewiki.jactor2.core.revisited.Simple$1(org.agilewiki.jactor2.core.revisited.Simple, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Simple.java"
class org.agilewiki.jactor2.core.revisited.Simple$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.revisited.Simple$1 this$1;
  org.agilewiki.jactor2.core.revisited.Simple$1$1(org.agilewiki.jactor2.core.revisited.Simple$1);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Isolation.java"
class org.agilewiki.jactor2.core.revisited.Single extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  org.agilewiki.jactor2.core.revisited.Single() throws java.lang.Exception;
  public org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> run(int, long, int);
}
Compiled from "Isolation.java"
class org.agilewiki.jactor2.core.revisited.Single$1 extends org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> {
  final int val$i;
  final org.agilewiki.jactor2.core.revisited.Single this$0;
  org.agilewiki.jactor2.core.revisited.Single$1(org.agilewiki.jactor2.core.revisited.Single, java.lang.String, int);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Isolation.java"
class org.agilewiki.jactor2.core.revisited.Single$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.messages.AsyncResponseProcessor val$_asyncResponseProcessor;
  final org.agilewiki.jactor2.core.revisited.Single$1 this$1;
  org.agilewiki.jactor2.core.revisited.Single$1$1(org.agilewiki.jactor2.core.revisited.Single$1, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Timeout.java"
public class org.agilewiki.jactor2.core.revisited.Timeout extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Timeout.java"
class org.agilewiki.jactor2.core.revisited.Timeout$1 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final org.agilewiki.jactor2.core.revisited.Timeout this$0;
  org.agilewiki.jactor2.core.revisited.Timeout$1(org.agilewiki.jactor2.core.revisited.Timeout, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Timeout.java"
class org.agilewiki.jactor2.core.revisited.Timeout$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.revisited.Timeout$1 this$1;
  org.agilewiki.jactor2.core.revisited.Timeout$1$1(org.agilewiki.jactor2.core.revisited.Timeout$1);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Timeout.java"
class org.agilewiki.jactor2.core.revisited.Timeout$1$2 extends org.agilewiki.jactor2.core.messages.ExceptionHandler {
  final org.agilewiki.jactor2.core.revisited.Timeout$1 this$1;
  org.agilewiki.jactor2.core.revisited.Timeout$1$2(org.agilewiki.jactor2.core.revisited.Timeout$1);
  public void processException(java.lang.Exception, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor) throws java.lang.Exception;
}
Compiled from "VerySlow.java"
public class org.agilewiki.jactor2.core.revisited.VerySlow extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "VerySlow.java"
class org.agilewiki.jactor2.core.revisited.VerySlow$1 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final org.agilewiki.jactor2.core.revisited.VerySlow this$0;
  org.agilewiki.jactor2.core.revisited.VerySlow$1(org.agilewiki.jactor2.core.revisited.VerySlow, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "VerySlow.java"
class org.agilewiki.jactor2.core.revisited.VerySlow$1$1 implements org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void> {
  final org.agilewiki.jactor2.core.revisited.VerySlow$1 this$1;
  org.agilewiki.jactor2.core.revisited.VerySlow$1$1(org.agilewiki.jactor2.core.revisited.VerySlow$1);
  public void processAsyncResponse(java.lang.Void) throws java.lang.Exception;
  public void processAsyncResponse(java.lang.Object) throws java.lang.Exception;
}
Compiled from "Worker.java"
public class org.agilewiki.jactor2.core.revisited.Worker extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public final java.lang.String id;
  public org.agilewiki.jactor2.core.revisited.Worker(int) throws java.lang.Exception;
  public int getCount();
  public org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> run(long, int);
  static int access$004(org.agilewiki.jactor2.core.revisited.Worker);
  static int access$000(org.agilewiki.jactor2.core.revisited.Worker);
}
Compiled from "Worker.java"
class org.agilewiki.jactor2.core.revisited.Worker$1 extends org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.Void> {
  final int val$_timeoutMillis;
  final long val$_iterations;
  final org.agilewiki.jactor2.core.revisited.Worker this$0;
  org.agilewiki.jactor2.core.revisited.Worker$1(org.agilewiki.jactor2.core.revisited.Worker, java.lang.String, int, long);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "Blade11.java"
public class org.agilewiki.jactor2.metrics.Blade11 extends org.agilewiki.jactor2.core.blades.IsolationBladeBase {
  public org.agilewiki.jactor2.metrics.Blade11(org.agilewiki.jactor2.core.reactors.IsolationReactor) throws java.lang.Exception;
  public org.agilewiki.jactor2.core.blades.BladeBase$SReq<java.lang.String> hiSReq();
  public org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.String> hoAReq();
  public org.agilewiki.jactor2.core.blades.BladeBase$ASig humASig();
}
Compiled from "Blade11.java"
class org.agilewiki.jactor2.metrics.Blade11$1 extends org.agilewiki.jactor2.core.blades.BladeBase$SReq<java.lang.String> {
  final org.agilewiki.jactor2.metrics.Blade11 this$0;
  org.agilewiki.jactor2.metrics.Blade11$1(org.agilewiki.jactor2.metrics.Blade11, java.lang.String);
  protected java.lang.String processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
  protected java.lang.Object processSyncOperation(org.agilewiki.jactor2.core.messages.impl.RequestImpl) throws java.lang.Exception;
}
Compiled from "Blade11.java"
class org.agilewiki.jactor2.metrics.Blade11$2 extends org.agilewiki.jactor2.core.blades.BladeBase$AReq<java.lang.String> {
  final org.agilewiki.jactor2.metrics.Blade11 this$0;
  org.agilewiki.jactor2.metrics.Blade11$2(org.agilewiki.jactor2.metrics.Blade11, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.String>) throws java.lang.Exception;
}
Compiled from "Blade11.java"
class org.agilewiki.jactor2.metrics.Blade11$3 extends org.agilewiki.jactor2.core.blades.BladeBase$ASig {
  final org.agilewiki.jactor2.metrics.Blade11 this$0;
  org.agilewiki.jactor2.metrics.Blade11$3(org.agilewiki.jactor2.metrics.Blade11, java.lang.String);
  protected void processAsyncOperation(org.agilewiki.jactor2.core.messages.impl.AsyncRequestImpl, org.agilewiki.jactor2.core.messages.AsyncResponseProcessor<java.lang.Void>) throws java.lang.Exception;
}
Compiled from "MetricsPlantConfiguration.java"
public class org.agilewiki.jactor2.metrics.MetricsPlantConfiguration extends org.agilewiki.jactor2.core.impl.mtPlant.PlantConfiguration {
  public org.agilewiki.jactor2.metrics.MetricsPlantConfiguration();
  public org.agilewiki.jactor2.metrics.MetricsPlantConfiguration(int);
  protected org.agilewiki.jactor2.metrics.MetricsRecovery createRecovery();
  protected org.agilewiki.jactor2.core.impl.mtPlant.Recovery createRecovery();
}
Compiled from "MetricsPlantTest.java"
public class org.agilewiki.jactor2.metrics.MetricsPlantTest extends junit.framework.TestCase {
  public org.agilewiki.jactor2.metrics.MetricsPlantTest();
  public void test() throws java.lang.Exception;
}
Compiled from "MetricsRecovery.java"
public class org.agilewiki.jactor2.metrics.MetricsRecovery extends org.agilewiki.jactor2.core.impl.mtPlant.Recovery {
  public org.agilewiki.jactor2.metrics.MetricsRecovery();
  public org.agilewiki.jactor2.core.plant.impl.MetricsTimer getMetricsTimer(java.lang.String);
}
Compiled from "MetricsTimerImpl.java"
public class org.agilewiki.jactor2.metrics.MetricsTimerImpl extends com.codahale.metrics.Timer implements org.agilewiki.jactor2.core.plant.impl.MetricsTimer {
  public static final com.codahale.metrics.MetricRegistry REGISTRY;
  public final com.codahale.metrics.Meter failed;
  public final java.lang.String name;
  public static void setupConsoleReporter(long);
  public static synchronized org.agilewiki.jactor2.metrics.MetricsTimerImpl getMetricsTimer(java.lang.String);
  public final long nanos();
  public int hashCode();
  public java.lang.String toString();
  public final void updateNanos(long, boolean);
  public final void updateNanos(double, boolean);
  public final void updateMillis(long, boolean);
  public final void updateMillis(double, boolean);
  public final <T> T time(java.util.concurrent.Callable<T>) throws java.lang.Exception;
  public final void time(java.lang.Runnable) throws java.lang.Exception;
  static {};
}
Compiled from "Test11.java"
public class org.agilewiki.jactor2.metrics.Test11 extends junit.framework.TestCase {
  public org.agilewiki.jactor2.metrics.Test11();
  public void test() throws java.lang.Exception;
}
