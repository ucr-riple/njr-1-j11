Compiled from "BigCache.java"
public class com.ctriposs.bigcache.BigCache<K> implements com.ctriposs.bigcache.ICache<K> {
  public static final long DEFAULT_PURGE_INTERVAL;
  public static final long DEFAULT_MERGE_INTERVAL;
  public static final double DEFAULT_DIRTY_RATIO_THRESHOLD;
  public static final int DEFAULT_CONCURRENCY_LEVEL;
  public static final int MAX_VALUE_LENGTH;
  protected java.util.concurrent.atomic.AtomicLong hitCounter;
  protected java.util.concurrent.atomic.AtomicLong missCounter;
  protected java.util.concurrent.atomic.AtomicLong getCounter;
  protected java.util.concurrent.atomic.AtomicLong putCounter;
  protected java.util.concurrent.atomic.AtomicLong deleteCounter;
  protected java.util.concurrent.atomic.AtomicLong purgeCounter;
  protected java.util.concurrent.atomic.AtomicLong moveCounter;
  protected java.util.concurrent.atomic.AtomicLong usedSize;
  protected final java.util.concurrent.ConcurrentMap<K, com.ctriposs.bigcache.CacheValueWrapper> pointerMap;
  final com.ctriposs.bigcache.storage.StorageManager storageManager;
  public com.ctriposs.bigcache.BigCache(java.lang.String, com.ctriposs.bigcache.CacheConfig) throws java.io.IOException;
  public void put(K, byte[]) throws java.io.IOException;
  public void put(K, byte[], long) throws java.io.IOException;
  public byte[] get(K) throws java.io.IOException;
  public byte[] delete(K) throws java.io.IOException;
  public boolean contains(K);
  public void clear();
  public double hitRatio();
  protected void readLock(K);
  protected void readUnlock(K);
  protected void writeLock(K);
  protected void writeUnlock(K);
  protected java.util.concurrent.locks.ReadWriteLock getLock(K);
  public void close() throws java.io.IOException;
  public long count();
  public com.ctriposs.bigcache.BigCacheStats getStats();
  static java.util.concurrent.ScheduledExecutorService access$000(com.ctriposs.bigcache.BigCache);
  static java.util.concurrent.atomic.AtomicLong access$100(com.ctriposs.bigcache.BigCache);
  static double access$200(com.ctriposs.bigcache.BigCache);
  static java.util.concurrent.atomic.AtomicLong access$300(com.ctriposs.bigcache.BigCache);
}
Compiled from "BigCache.java"
class com.ctriposs.bigcache.BigCache$CacheCleaner<K> extends com.ctriposs.bigcache.BigCache$CacheDaemonWorker<K> {
  com.ctriposs.bigcache.BigCache$CacheCleaner(com.ctriposs.bigcache.BigCache<K>);
  public void process(com.ctriposs.bigcache.BigCache<K>) throws java.io.IOException;
}
Compiled from "BigCache.java"
abstract class com.ctriposs.bigcache.BigCache$CacheDaemonWorker<K> implements java.lang.Runnable {
  com.ctriposs.bigcache.BigCache$CacheDaemonWorker(com.ctriposs.bigcache.BigCache<K>);
  public void run();
  abstract void process(com.ctriposs.bigcache.BigCache<K>) throws java.io.IOException;
}
Compiled from "BigCache.java"
class com.ctriposs.bigcache.BigCache$CacheMerger<K> extends com.ctriposs.bigcache.BigCache$CacheDaemonWorker<K> {
  com.ctriposs.bigcache.BigCache$CacheMerger(com.ctriposs.bigcache.BigCache<K>);
  void process(com.ctriposs.bigcache.BigCache<K>) throws java.io.IOException;
}
Compiled from "BigCacheCleanerTest.java"
public class com.ctriposs.bigcache.BigCacheCleanerTest {
  public com.ctriposs.bigcache.CacheConfig$StorageMode storageMode;
  public com.ctriposs.bigcache.BigCacheCleanerTest();
  public static java.util.Collection<com.ctriposs.bigcache.CacheConfig$StorageMode[]> data() throws java.io.IOException;
  public void setUp();
  public void tearDown() throws java.io.IOException;
  public void cacheDestroyTest() throws java.io.IOException;
  public void simpleThreadPurgeTest() throws java.io.IOException;
  public void singleThreadMergeTest() throws java.io.IOException;
  public void multipleThreadPurgeTest();
  public void multipleThreadMergeTest();
  static int access$000(int);
  static int access$100();
  static java.util.concurrent.ThreadPoolExecutor access$200(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.List access$300(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.CountDownLatch access$400(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$500(com.ctriposs.bigcache.BigCacheCleanerTest);
  static com.ctriposs.bigcache.BigCache access$600(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$700(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$800(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$900(com.ctriposs.bigcache.BigCacheCleanerTest);
  static boolean access$1000(com.ctriposs.bigcache.BigCacheCleanerTest, byte[], byte[]);
  static java.util.concurrent.atomic.AtomicLong access$1100(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$1200(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$1300(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$1400(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$1500(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$1600(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$1700(com.ctriposs.bigcache.BigCacheCleanerTest);
  static java.util.concurrent.atomic.AtomicLong access$1800(com.ctriposs.bigcache.BigCacheCleanerTest);
  static {};
}
Compiled from "BigCacheCleanerTest.java"
class com.ctriposs.bigcache.BigCacheCleanerTest$DeleteWorker extends com.ctriposs.bigcache.BigCacheCleanerTest$Worker {
  final com.ctriposs.bigcache.BigCacheCleanerTest this$0;
  protected com.ctriposs.bigcache.BigCacheCleanerTest$DeleteWorker(com.ctriposs.bigcache.BigCacheCleanerTest, com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig);
  protected long doCacheOperation(java.lang.String, byte[]) throws java.io.IOException;
}
Compiled from "BigCacheCleanerTest.java"
class com.ctriposs.bigcache.BigCacheCleanerTest$ReadWorker extends com.ctriposs.bigcache.BigCacheCleanerTest$Worker {
  final com.ctriposs.bigcache.BigCacheCleanerTest this$0;
  com.ctriposs.bigcache.BigCacheCleanerTest$ReadWorker(com.ctriposs.bigcache.BigCacheCleanerTest, com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig);
  protected long doCacheOperation(java.lang.String, byte[]) throws java.io.IOException;
}
Compiled from "BigCacheCleanerTest.java"
final class com.ctriposs.bigcache.BigCacheCleanerTest$WORKERTYPE extends java.lang.Enum<com.ctriposs.bigcache.BigCacheCleanerTest$WORKERTYPE> {
  public static final com.ctriposs.bigcache.BigCacheCleanerTest$WORKERTYPE write;
  public static final com.ctriposs.bigcache.BigCacheCleanerTest$WORKERTYPE read;
  public static final com.ctriposs.bigcache.BigCacheCleanerTest$WORKERTYPE delete;
  public static com.ctriposs.bigcache.BigCacheCleanerTest$WORKERTYPE[] values();
  public static com.ctriposs.bigcache.BigCacheCleanerTest$WORKERTYPE valueOf(java.lang.String);
  static {};
}
Compiled from "BigCacheCleanerTest.java"
abstract class com.ctriposs.bigcache.BigCacheCleanerTest$Worker implements java.util.concurrent.Callable<java.lang.Long> {
  protected com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig config;
  static final boolean $assertionsDisabled;
  final com.ctriposs.bigcache.BigCacheCleanerTest this$0;
  com.ctriposs.bigcache.BigCacheCleanerTest$Worker(com.ctriposs.bigcache.BigCacheCleanerTest, com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig);
  public java.lang.Long call();
  protected abstract long doCacheOperation(java.lang.String, byte[]) throws java.io.IOException;
  public java.lang.Object call() throws java.lang.Exception;
  static {};
}
Compiled from "BigCacheCleanerTest.java"
class com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig {
  int ttl;
  int keyMax;
  int keyStart;
  int keyStep;
  int valueLen;
  int count;
  long sleepAfter;
  com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig();
  static com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig getConfig();
  public int getTtl();
  public int getKeyMax();
  public int getKeyStart();
  public int getKeyStep();
  public int getValueLen();
  public int getCount();
  public long getSleepAfter();
  public com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig setTtl(int);
  public com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig setKeyMax(int);
  public com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig setKeyStart(int);
  public com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig setKeyStep(int);
  public com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig setValueLen(int);
  public com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig setCount(int);
  public com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig setSleepAfter(long);
  public com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig build();
}
Compiled from "BigCacheCleanerTest.java"
class com.ctriposs.bigcache.BigCacheCleanerTest$WriteWorker extends com.ctriposs.bigcache.BigCacheCleanerTest$Worker {
  final com.ctriposs.bigcache.BigCacheCleanerTest this$0;
  com.ctriposs.bigcache.BigCacheCleanerTest$WriteWorker(com.ctriposs.bigcache.BigCacheCleanerTest, com.ctriposs.bigcache.BigCacheCleanerTest$WorkerConfig);
  protected long doCacheOperation(java.lang.String, byte[]) throws java.io.IOException;
}
Compiled from "BigCacheLimitTest.java"
public class com.ctriposs.bigcache.BigCacheLimitTest {
  public com.ctriposs.bigcache.BigCacheLimitTest();
  public static void main(java.lang.String[]) throws java.io.IOException;
  public static void close() throws java.io.IOException;
}
Compiled from "BigCachePerfTestA.java"
public class com.ctriposs.bigcache.BigCachePerfTestA {
  public com.ctriposs.bigcache.CacheConfig$StorageMode storageMode;
  public com.ctriposs.bigcache.BigCachePerfTestA();
  public static java.util.Collection<com.ctriposs.bigcache.CacheConfig$StorageMode[]> data() throws java.io.IOException;
  public void testSingleThreadReadWrite() throws java.io.IOException, java.lang.ClassNotFoundException;
  public void testMultiThreadReadWrite() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.io.IOException;
  public void close() throws java.io.IOException;
  static com.ctriposs.bigcache.BigCache access$000();
}
Compiled from "BigCachePerfTestA.java"
class com.ctriposs.bigcache.BigCachePerfTestA$1 implements java.lang.Runnable {
  final int val$finalI;
  final com.ctriposs.bigcache.BigCachePerfTestA this$0;
  com.ctriposs.bigcache.BigCachePerfTestA$1(com.ctriposs.bigcache.BigCachePerfTestA, int);
  public void run();
}
Compiled from "BigCachePerfTestB.java"
public class com.ctriposs.bigcache.BigCachePerfTestB {
  public com.ctriposs.bigcache.CacheConfig$StorageMode storageMode;
  public com.ctriposs.bigcache.BigCachePerfTestB();
  public static java.util.Collection<com.ctriposs.bigcache.CacheConfig$StorageMode[]> data() throws java.io.IOException;
  public void testProduceThenConsume() throws java.io.IOException, java.lang.InterruptedException;
  public void testProduceMixedConsume() throws java.io.IOException, java.lang.InterruptedException;
  static java.util.concurrent.atomic.AtomicInteger access$100(com.ctriposs.bigcache.BigCachePerfTestB);
  static java.util.concurrent.BlockingQueue access$200(com.ctriposs.bigcache.BigCachePerfTestB);
  static com.ctriposs.bigcache.BigCache access$300();
  static java.util.concurrent.atomic.AtomicInteger access$400(com.ctriposs.bigcache.BigCachePerfTestB);
}
Compiled from "BigCachePerfTestB.java"
class com.ctriposs.bigcache.BigCachePerfTestB$1 {
}
Compiled from "BigCachePerfTestB.java"
class com.ctriposs.bigcache.BigCachePerfTestB$Consumer extends java.lang.Thread {
  final com.ctriposs.bigcache.BigCachePerfTestB this$0;
  public com.ctriposs.bigcache.BigCachePerfTestB$Consumer(java.util.concurrent.CountDownLatch, java.util.Queue<com.ctriposs.bigcache.BigCachePerfTestB$Result>);
  public void run();
}
Compiled from "BigCachePerfTestB.java"
class com.ctriposs.bigcache.BigCachePerfTestB$Producer extends java.lang.Thread {
  final com.ctriposs.bigcache.BigCachePerfTestB this$0;
  public com.ctriposs.bigcache.BigCachePerfTestB$Producer(java.util.concurrent.CountDownLatch, java.util.Queue<com.ctriposs.bigcache.BigCachePerfTestB$Result>);
  public void run();
}
Compiled from "BigCachePerfTestB.java"
class com.ctriposs.bigcache.BigCachePerfTestB$Result {
  com.ctriposs.bigcache.BigCachePerfTestB$Status status;
  long duration;
  com.ctriposs.bigcache.BigCachePerfTestB$Result(com.ctriposs.bigcache.BigCachePerfTestB$1);
}
Compiled from "BigCachePerfTestB.java"
final class com.ctriposs.bigcache.BigCachePerfTestB$Status extends java.lang.Enum<com.ctriposs.bigcache.BigCachePerfTestB$Status> {
  public static final com.ctriposs.bigcache.BigCachePerfTestB$Status ERROR;
  public static final com.ctriposs.bigcache.BigCachePerfTestB$Status SUCCESS;
  public static com.ctriposs.bigcache.BigCachePerfTestB$Status[] values();
  public static com.ctriposs.bigcache.BigCachePerfTestB$Status valueOf(java.lang.String);
  static {};
}
Compiled from "BigCacheReadWriteStressTest.java"
public class com.ctriposs.bigcache.BigCacheReadWriteStressTest {
  public com.ctriposs.bigcache.CacheConfig$StorageMode storageMode;
  public com.ctriposs.bigcache.BigCacheReadWriteStressTest();
  public static java.util.Collection<com.ctriposs.bigcache.CacheConfig$StorageMode[]> data() throws java.io.IOException;
  public com.ctriposs.bigcache.BigCache<java.lang.String> cache(long) throws java.io.IOException;
  public void testWrite_ten_million() throws java.io.IOException;
  public void testRead_ten_million() throws java.io.IOException;
  public void testReadWrite_one_million() throws java.io.IOException;
  public void testReadWrite_two_million() throws java.io.IOException;
  public void testMultiThreadWriteTtl_two_million() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.io.IOException;
  public void close() throws java.io.IOException;
  static com.ctriposs.bigcache.BigCache access$000();
}
Compiled from "BigCacheReadWriteStressTest.java"
class com.ctriposs.bigcache.BigCacheReadWriteStressTest$1 implements java.lang.Runnable {
  final int val$finalI;
  final com.ctriposs.bigcache.BigCacheReadWriteStressTest this$0;
  com.ctriposs.bigcache.BigCacheReadWriteStressTest$1(com.ctriposs.bigcache.BigCacheReadWriteStressTest, int);
  public void run();
}
Compiled from "BigCacheStats.java"
public class com.ctriposs.bigcache.BigCacheStats {
  public com.ctriposs.bigcache.BigCacheStats(long, long, long, long, long, long, long, long, long, long, long, long, long, long);
  public com.ctriposs.bigcache.BigCacheStats();
  public com.ctriposs.bigcache.BigCacheStats getDeltaStats(com.ctriposs.bigcache.BigCacheStats);
  public long getCacheHit();
  public long getCacheMiss();
  public long getCacheGet();
  public long getCachePut();
  public long getCacheDelete();
  public long getCacheExpire();
  public long getCacheMove();
  public long getCacheTotalEntries();
  public long getStorageUsed();
  public long getStorageDirty();
  public long getStorageCapacity();
  public long getStorageUsedBlocks();
  public long getStorageFreeBlocks();
  public long getStorageTotalBlocks();
}
Compiled from "BigCacheStressTest.java"
public class com.ctriposs.bigcache.BigCacheStressTest {
  public com.ctriposs.bigcache.BigCacheStressTest();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  public static int compare(byte[], byte[]);
}
Compiled from "BigCacheTest.java"
public class com.ctriposs.bigcache.BigCacheTest {
  public com.ctriposs.bigcache.CacheConfig$StorageMode storageMode;
  public com.ctriposs.bigcache.BigCacheTest();
  public static java.util.Collection<com.ctriposs.bigcache.CacheConfig$StorageMode[]> data() throws java.io.IOException;
  public void testBigCache() throws java.io.IOException;
  public void testInvalidFileDir();
  public void testInvalidCacheConfig();
  public void close() throws java.io.IOException;
  static {};
}
Compiled from "BigCacheUnitTest.java"
public class com.ctriposs.bigcache.BigCacheUnitTest {
  public com.ctriposs.bigcache.CacheConfig$StorageMode storageMode;
  public com.ctriposs.bigcache.BigCacheUnitTest();
  public static java.util.Collection<com.ctriposs.bigcache.CacheConfig$StorageMode[]> data() throws java.io.IOException;
  public com.ctriposs.bigcache.BigCache<java.lang.Integer> cache6() throws java.io.IOException;
  public void testGet() throws java.io.IOException;
  public void testPut() throws java.io.IOException;
  public void testDelete() throws java.io.IOException;
  public void testContain() throws java.io.IOException;
  public void close() throws java.io.IOException;
  static {};
}
Compiled from "CacheConfig.java"
public class com.ctriposs.bigcache.CacheConfig {
  public com.ctriposs.bigcache.CacheConfig();
  public int getConcurrencyLevel();
  public com.ctriposs.bigcache.CacheConfig setConcurrencyLevel(int);
  public int getCapacityPerBlock();
  public com.ctriposs.bigcache.CacheConfig setCapacityPerBlock(int);
  public int getInitialNumberOfBlocks();
  public com.ctriposs.bigcache.CacheConfig setInitialNumberOfBlocks(int);
  public long getPurgeInterval();
  public com.ctriposs.bigcache.CacheConfig setPurgeInterval(long);
  public long getMergeInterval();
  public com.ctriposs.bigcache.CacheConfig setMergeInterval(long);
  public double getDirtyRatioThreshold();
  public com.ctriposs.bigcache.CacheConfig setDirtyRatioLimit(double);
  public com.ctriposs.bigcache.CacheConfig$StorageMode getStorageMode();
  public com.ctriposs.bigcache.CacheConfig setStorageMode(com.ctriposs.bigcache.CacheConfig$StorageMode);
  public com.ctriposs.bigcache.CacheConfig setMaxOffHeapMemorySize(long);
  public long getMaxOffHeapMemorySize();
}
Compiled from "CacheConfig.java"
public final class com.ctriposs.bigcache.CacheConfig$StorageMode extends java.lang.Enum<com.ctriposs.bigcache.CacheConfig$StorageMode> {
  public static final com.ctriposs.bigcache.CacheConfig$StorageMode PureFile;
  public static final com.ctriposs.bigcache.CacheConfig$StorageMode MemoryMappedPlusFile;
  public static final com.ctriposs.bigcache.CacheConfig$StorageMode OffHeapPlusFile;
  public static com.ctriposs.bigcache.CacheConfig$StorageMode[] values();
  public static com.ctriposs.bigcache.CacheConfig$StorageMode valueOf(java.lang.String);
  static {};
}
Compiled from "CacheValueWrapper.java"
public class com.ctriposs.bigcache.CacheValueWrapper {
  protected com.ctriposs.bigcache.storage.Pointer pointer;
  protected long lastAccessTime;
  protected long timeToIdle;
  public long getLastAccessTime();
  public com.ctriposs.bigcache.CacheValueWrapper(com.ctriposs.bigcache.storage.Pointer, long, long);
  public com.ctriposs.bigcache.CacheValueWrapper();
  public void setLastAccessTime(long);
  public long getTimeToIdle();
  public void setTimeToIdle(long);
  public com.ctriposs.bigcache.storage.Pointer getPointer();
  public void setPointer(com.ctriposs.bigcache.storage.Pointer);
  public boolean isExpired();
}
Compiled from "ICache.java"
public interface com.ctriposs.bigcache.ICache<K> extends java.io.Closeable {
  public abstract void put(K, byte[]) throws java.io.IOException;
  public abstract void put(K, byte[], long) throws java.io.IOException;
  public abstract byte[] get(K) throws java.io.IOException;
  public abstract byte[] delete(K) throws java.io.IOException;
  public abstract boolean contains(K);
  public abstract void clear();
  public abstract double hitRatio();
}
Compiled from "StripedReadWriteLock.java"
public class com.ctriposs.bigcache.lock.StripedReadWriteLock {
  public com.ctriposs.bigcache.lock.StripedReadWriteLock();
  public com.ctriposs.bigcache.lock.StripedReadWriteLock(int);
  public void readLock(int);
  public void readUnlock(int);
  public void writeLock(int);
  public void writeUnlock(int);
  public void writeLockForAll();
  public void writeUnlockForAll();
  public java.util.concurrent.locks.ReentrantReadWriteLock getLock(int);
}
Compiled from "BigCachePerfTest.java"
public class com.ctriposs.bigcache.sample.BigCachePerfTest {
  static final int N_THREADS;
  public com.ctriposs.bigcache.sample.BigCachePerfTest();
  public void testPut() throws java.io.IOException, java.lang.ClassNotFoundException;
  public void testMultThreadsPut() throws java.util.concurrent.ExecutionException, java.lang.InterruptedException, java.io.IOException;
  public void clear() throws java.io.IOException;
  public static java.lang.String users(java.lang.StringBuilder, int);
  static com.ctriposs.bigcache.ICache access$000(com.ctriposs.bigcache.sample.BigCachePerfTest);
  static {};
}
Compiled from "BigCachePerfTest.java"
class com.ctriposs.bigcache.sample.BigCachePerfTest$1 implements java.lang.Runnable {
  final int val$finalT;
  final com.ctriposs.bigcache.sample.BigCachePerfTest this$0;
  com.ctriposs.bigcache.sample.BigCachePerfTest$1(com.ctriposs.bigcache.sample.BigCachePerfTest, int);
  public void run();
}
Compiled from "HelloBigCache.java"
public class com.ctriposs.bigcache.sample.HelloBigCache {
  static java.lang.String cacheDir;
  public com.ctriposs.bigcache.sample.HelloBigCache();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SampleValue.java"
public class com.ctriposs.bigcache.sample.SampleValue implements java.io.Serializable {
  public java.lang.String aa;
  public java.lang.String bb;
  public com.ctriposs.bigcache.sample.SampleValue$BuySell cc;
  public com.ctriposs.bigcache.sample.SampleValue$BuySell dd;
  public int ee;
  public int ff;
  public double gg;
  public double hh;
  public long ii;
  public long jj;
  public com.ctriposs.bigcache.sample.SampleValue();
  public byte[] toBytes() throws java.io.IOException;
  public static com.ctriposs.bigcache.sample.SampleValue fromBytes(byte[]) throws java.lang.ClassNotFoundException, java.io.IOException;
}
Compiled from "SampleValue.java"
final class com.ctriposs.bigcache.sample.SampleValue$BuySell extends java.lang.Enum<com.ctriposs.bigcache.sample.SampleValue$BuySell> {
  public static final com.ctriposs.bigcache.sample.SampleValue$BuySell Buy;
  public static final com.ctriposs.bigcache.sample.SampleValue$BuySell Sell;
  public static com.ctriposs.bigcache.sample.SampleValue$BuySell[] values();
  public static com.ctriposs.bigcache.sample.SampleValue$BuySell valueOf(java.lang.String);
  static {};
}
Compiled from "AlignOffHeapStorage.java"
public class com.ctriposs.bigcache.storage.AlignOffHeapStorage extends com.ctriposs.bigcache.storage.OffHeapStorage {
  public com.ctriposs.bigcache.storage.AlignOffHeapStorage(int);
  public void close() throws java.io.IOException;
}
Compiled from "FileChannelStorage.java"
public class com.ctriposs.bigcache.storage.FileChannelStorage implements com.ctriposs.bigcache.storage.IStorage {
  public com.ctriposs.bigcache.storage.FileChannelStorage(java.lang.String, int, int) throws java.io.IOException;
  public void get(int, byte[]) throws java.io.IOException;
  public void put(int, byte[]) throws java.io.IOException;
  public void free();
  public void close() throws java.io.IOException;
}
Compiled from "FileChannelStorageTest.java"
public class com.ctriposs.bigcache.storage.FileChannelStorageTest {
  public com.ctriposs.bigcache.storage.FileChannelStorageTest();
  public void testFileChannelStorage() throws java.io.IOException;
  public void clear() throws java.io.IOException;
  static {};
}
Compiled from "IStorage.java"
public interface com.ctriposs.bigcache.storage.IStorage extends java.io.Closeable {
  public static final java.lang.String DATA_FILE_SUFFIX;
  public abstract void get(int, byte[]) throws java.io.IOException;
  public abstract void put(int, byte[]) throws java.io.IOException;
  public abstract void free();
}
Compiled from "IStorageBlock.java"
public interface com.ctriposs.bigcache.storage.IStorageBlock extends java.lang.Comparable<com.ctriposs.bigcache.storage.IStorageBlock>, java.io.Closeable {
  public abstract byte[] retrieve(com.ctriposs.bigcache.storage.Pointer) throws java.io.IOException;
  public abstract byte[] remove(com.ctriposs.bigcache.storage.Pointer) throws java.io.IOException;
  public abstract void removeLight(com.ctriposs.bigcache.storage.Pointer) throws java.io.IOException;
  public abstract com.ctriposs.bigcache.storage.Pointer store(byte[]) throws java.io.IOException;
  public abstract com.ctriposs.bigcache.storage.Pointer update(com.ctriposs.bigcache.storage.Pointer, byte[]) throws java.io.IOException;
  public abstract long getDirty();
  public abstract long getUsed();
  public abstract long getCapacity();
  public abstract double getDirtyRatio();
  public abstract int getIndex();
  public abstract void free();
}
Compiled from "MemoryMappedStorage.java"
public class com.ctriposs.bigcache.storage.MemoryMappedStorage implements com.ctriposs.bigcache.storage.IStorage {
  public com.ctriposs.bigcache.storage.MemoryMappedStorage(java.lang.String, int, int) throws java.io.IOException;
  public void close() throws java.io.IOException;
  public void get(int, byte[]) throws java.io.IOException;
  public void put(int, byte[]) throws java.io.IOException;
  public void free();
}
Compiled from "MemoryMappedStorage.java"
class com.ctriposs.bigcache.storage.MemoryMappedStorage$ThreadLocalByteBuffer extends java.lang.ThreadLocal<java.nio.ByteBuffer> {
  public com.ctriposs.bigcache.storage.MemoryMappedStorage$ThreadLocalByteBuffer(java.nio.ByteBuffer);
  public java.nio.ByteBuffer getSourceBuffer();
  protected synchronized java.nio.ByteBuffer initialValue();
  protected java.lang.Object initialValue();
}
Compiled from "OffHeapStorage.java"
public class com.ctriposs.bigcache.storage.OffHeapStorage implements com.ctriposs.bigcache.storage.IStorage {
  protected final java.util.concurrent.atomic.AtomicBoolean disposed;
  protected java.nio.ByteBuffer byteBuffer;
  static final boolean $assertionsDisabled;
  public com.ctriposs.bigcache.storage.OffHeapStorage(int);
  public com.ctriposs.bigcache.storage.OffHeapStorage(int, java.nio.ByteBuffer);
  public void close() throws java.io.IOException;
  public void get(int, byte[]) throws java.io.IOException;
  public void put(int, byte[]) throws java.io.IOException;
  public void free();
  static {};
}
Compiled from "Pointer.java"
public class com.ctriposs.bigcache.storage.Pointer {
  protected int position;
  protected int length;
  protected com.ctriposs.bigcache.storage.StorageBlock storageBlock;
  public com.ctriposs.bigcache.storage.Pointer(int, int, com.ctriposs.bigcache.storage.StorageBlock);
  public int getPosition();
  public void setPosition(int);
  public com.ctriposs.bigcache.storage.StorageBlock getStorageBlock();
  public void setStorageBlock(com.ctriposs.bigcache.storage.StorageBlock);
  public int getLength();
  public void setLength(int);
  public com.ctriposs.bigcache.storage.Pointer copy(com.ctriposs.bigcache.storage.Pointer);
}
Compiled from "StorageBlock.java"
public class com.ctriposs.bigcache.storage.StorageBlock implements com.ctriposs.bigcache.storage.IStorageBlock {
  public com.ctriposs.bigcache.storage.StorageBlock(java.lang.String, int, int, com.ctriposs.bigcache.CacheConfig$StorageMode) throws java.io.IOException;
  public byte[] retrieve(com.ctriposs.bigcache.storage.Pointer) throws java.io.IOException;
  public byte[] remove(com.ctriposs.bigcache.storage.Pointer) throws java.io.IOException;
  public void removeLight(com.ctriposs.bigcache.storage.Pointer) throws java.io.IOException;
  public com.ctriposs.bigcache.storage.Pointer store(byte[]) throws java.io.IOException;
  protected com.ctriposs.bigcache.storage.StorageBlock$Allocation allocate(byte[]);
  public com.ctriposs.bigcache.storage.Pointer store(com.ctriposs.bigcache.storage.StorageBlock$Allocation, byte[]) throws java.io.IOException;
  public com.ctriposs.bigcache.storage.Pointer update(com.ctriposs.bigcache.storage.Pointer, byte[]) throws java.io.IOException;
  public long getDirty();
  public double getDirtyRatio();
  public long getCapacity();
  public long getUsed();
  public void free();
  public int getIndex();
  public void close() throws java.io.IOException;
  public int compareTo(com.ctriposs.bigcache.storage.IStorageBlock);
  public int compareTo(java.lang.Object);
}
Compiled from "StorageBlock.java"
class com.ctriposs.bigcache.storage.StorageBlock$1 {
  static final int[] $SwitchMap$com$ctriposs$bigcache$CacheConfig$StorageMode;
  static {};
}
Compiled from "StorageBlock.java"
class com.ctriposs.bigcache.storage.StorageBlock$Allocation {
  public com.ctriposs.bigcache.storage.StorageBlock$Allocation(int, int);
  public int getOffset();
  public int getLength();
}
Compiled from "StorageBlockTest.java"
public class com.ctriposs.bigcache.storage.StorageBlockTest {
  public com.ctriposs.bigcache.CacheConfig$StorageMode storageMode;
  public com.ctriposs.bigcache.storage.StorageBlockTest();
  public static java.util.Collection<com.ctriposs.bigcache.CacheConfig$StorageMode[]> data() throws java.io.IOException;
  public void testBasic() throws java.io.IOException;
  public void testlimitNunberOfItems() throws java.io.IOException;
  public void testStoreOverflow() throws java.io.IOException;
  public void testUpdateOverflow() throws java.io.IOException;
  public void clear() throws java.io.IOException;
  static {};
}
Compiled from "StorageManager.java"
public class com.ctriposs.bigcache.storage.StorageManager implements com.ctriposs.bigcache.storage.IStorageBlock {
  public static final int DEFAULT_CAPACITY_PER_BLOCK;
  public static final int DEFAULT_INITIAL_NUMBER_OF_BLOCKS;
  public static final long DEFAULT_MAX_OFFHEAP_MEMORY_SIZE;
  public com.ctriposs.bigcache.storage.StorageManager(java.lang.String, int, int, com.ctriposs.bigcache.CacheConfig$StorageMode, long) throws java.io.IOException;
  public byte[] retrieve(com.ctriposs.bigcache.storage.Pointer) throws java.io.IOException;
  public byte[] remove(com.ctriposs.bigcache.storage.Pointer) throws java.io.IOException;
  public void removeLight(com.ctriposs.bigcache.storage.Pointer) throws java.io.IOException;
  public com.ctriposs.bigcache.storage.Pointer store(byte[]) throws java.io.IOException;
  public com.ctriposs.bigcache.storage.Pointer storeExcluding(byte[], com.ctriposs.bigcache.storage.StorageBlock) throws java.io.IOException;
  public com.ctriposs.bigcache.storage.Pointer update(com.ctriposs.bigcache.storage.Pointer, byte[]) throws java.io.IOException;
  public long getDirty();
  public long getCapacity();
  public double getDirtyRatio();
  public long getUsed();
  public void free();
  public void clean();
  public void close() throws java.io.IOException;
  public int compareTo(com.ctriposs.bigcache.storage.IStorageBlock);
  public int getIndex();
  public int getFreeBlockCount();
  public int getUsedBlockCount();
  public int getTotalBlockCount();
  public int compareTo(java.lang.Object);
}
Compiled from "StorageManagerTest.java"
public class com.ctriposs.bigcache.storage.StorageManagerTest {
  public com.ctriposs.bigcache.CacheConfig$StorageMode storageMode;
  public long size;
  public com.ctriposs.bigcache.storage.StorageManagerTest();
  public static java.util.Collection<java.lang.Object[]> data() throws java.io.IOException;
  public void testBasic() throws java.io.IOException;
  public void testlimitNunberOfItems() throws java.io.IOException;
  public void testStoreOverflow() throws java.io.IOException;
  public void testUpdateOverflow() throws java.io.IOException;
  public void clear() throws java.io.IOException;
  static {};
}
Compiled from "StorageUnitTest.java"
public class com.ctriposs.bigcache.storage.StorageUnitTest {
  public com.ctriposs.bigcache.storage.IStorage storage;
  public com.ctriposs.bigcache.storage.StorageUnitTest();
  public static java.util.Collection<com.ctriposs.bigcache.storage.IStorage[]> data() throws java.io.IOException;
  public void storage6() throws java.io.IOException;
  public void testGet() throws java.io.IOException;
  public void testPut() throws java.io.IOException;
  public void clear() throws java.io.IOException;
  public static void tearDown() throws java.io.IOException;
}
Compiled from "FileUtil.java"
public class com.ctriposs.bigcache.utils.FileUtil {
  public com.ctriposs.bigcache.utils.FileUtil();
  public static boolean isFilenameValid(java.lang.String);
  public static void deleteDirectory(java.io.File);
  public static void deleteFile(java.io.File);
  public static boolean copyDirectory(java.io.File, java.io.File);
  public static boolean copyDirectory(java.lang.String, java.lang.String);
  public static boolean copyDirectory(java.io.File, java.io.File, byte[]);
  public static boolean copyFile(java.io.File, java.io.File, byte[]);
}
Compiled from "TestSample.java"
public class com.ctriposs.bigcache.utils.TestSample implements java.io.Serializable {
  public java.lang.String stringA;
  public java.lang.String stringB;
  public com.ctriposs.bigcache.utils.TestSample$BuySell enumA;
  public com.ctriposs.bigcache.utils.TestSample$BuySell enumB;
  public int intA;
  public int intB;
  public double doubleA;
  public double doubleB;
  public long longA;
  public long longB;
  public com.ctriposs.bigcache.utils.TestSample();
  public byte[] toBytes() throws java.io.IOException;
  public static com.ctriposs.bigcache.utils.TestSample fromBytes(byte[]) throws java.lang.ClassNotFoundException, java.io.IOException;
  public static java.lang.String users(java.lang.StringBuilder, int);
}
Compiled from "TestSample.java"
final class com.ctriposs.bigcache.utils.TestSample$BuySell extends java.lang.Enum<com.ctriposs.bigcache.utils.TestSample$BuySell> {
  public static final com.ctriposs.bigcache.utils.TestSample$BuySell Buy;
  public static final com.ctriposs.bigcache.utils.TestSample$BuySell Sell;
  public static com.ctriposs.bigcache.utils.TestSample$BuySell[] values();
  public static com.ctriposs.bigcache.utils.TestSample$BuySell valueOf(java.lang.String);
  static {};
}
Compiled from "TestUtil.java"
public class com.ctriposs.bigcache.utils.TestUtil {
  static final java.lang.String AB;
  static java.util.Random rnd;
  public static final java.lang.String TEST_BASE_DIR;
  public com.ctriposs.bigcache.utils.TestUtil();
  public static java.lang.String randomString(int);
  public static void sleepQuietly(long);
  public static java.lang.String kbString(long);
  public static java.lang.String printMemoryFootprint();
  public static byte[] getBytes(java.lang.Object);
  public static java.lang.String convertToString(byte[]);
  static {};
}
