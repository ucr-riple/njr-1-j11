Compiled from "Argument.java"
public interface cz.mff.dpp.args.Argument extends java.lang.annotation.Annotation {
  public abstract boolean required();
  public abstract java.lang.String description();
  public abstract int index();
  public abstract int size();
  public abstract java.lang.String name();
  public abstract java.lang.Class<?> factory();
}
Compiled from "CharHandler.java"
final class cz.mff.dpp.args.CharHandler {
  public static char valueOf(java.lang.String);
  public static int compare(char, char);
}
Compiled from "CharacterHandler.java"
final class cz.mff.dpp.args.CharacterHandler {
  public static java.lang.Character valueOf(java.lang.String);
  public static int compare(java.lang.Character, java.lang.Character);
}
Compiled from "CheckException.java"
class cz.mff.dpp.args.CheckException extends java.lang.Exception {
  public cz.mff.dpp.args.CheckException();
  public cz.mff.dpp.args.CheckException(java.lang.String);
  public cz.mff.dpp.args.CheckException(java.lang.String, java.lang.Throwable);
  public cz.mff.dpp.args.CheckException(java.lang.Throwable);
  public cz.mff.dpp.args.CheckException(java.lang.String, java.lang.Object...);
  public cz.mff.dpp.args.CheckException(java.lang.Throwable, java.lang.String, java.lang.Object...);
  public static void wrap(java.lang.Throwable, java.lang.String, java.lang.Object...) throws cz.mff.dpp.args.CheckException;
  public static void wrap(java.lang.Throwable, java.lang.String) throws cz.mff.dpp.args.CheckException;
}
Compiled from "ConfException.java"
class cz.mff.dpp.args.ConfException extends java.lang.Exception {
  public cz.mff.dpp.args.ConfException();
  public cz.mff.dpp.args.ConfException(java.lang.String);
  public cz.mff.dpp.args.ConfException(java.lang.String, java.lang.Throwable);
  public cz.mff.dpp.args.ConfException(java.lang.Throwable);
  public cz.mff.dpp.args.ConfException(java.lang.String, java.lang.Object...);
  public cz.mff.dpp.args.ConfException(java.lang.Throwable, java.lang.String, java.lang.Object...);
  public static void wrap(java.lang.Throwable, java.lang.String, java.lang.Object...) throws cz.mff.dpp.args.ConfException;
  public static void wrap(java.lang.Throwable, java.lang.String) throws cz.mff.dpp.args.ConfException;
}
Compiled from "Configurator.java"
final class cz.mff.dpp.args.Configurator {
  static final boolean $assertionsDisabled;
  cz.mff.dpp.args.Configurator();
  public static void set(java.lang.Object, java.lang.reflect.AccessibleObject, java.util.List<java.lang.String>) throws cz.mff.dpp.args.ConfException, cz.mff.dpp.args.CheckException;
  static {};
}
Compiled from "Configurator.java"
final class cz.mff.dpp.args.Configurator$AccessibleState {
  public cz.mff.dpp.args.Configurator$AccessibleState(java.lang.reflect.AccessibleObject);
  public void restore();
  public void save();
  public void makeAccessible();
}
Compiled from "Constraint.java"
public interface cz.mff.dpp.args.Constraint extends java.lang.annotation.Annotation {
  public abstract java.lang.String min();
  public abstract java.lang.String max();
  public abstract java.lang.String[] allowedValues();
  public abstract java.lang.String regexp();
  public abstract boolean ignoreCase();
  public abstract java.lang.Class<?> comparator();
}
Compiled from "ConstraintUtils.java"
final class cz.mff.dpp.args.ConstraintUtils {
  cz.mff.dpp.args.ConstraintUtils();
  public static void checkStringValues(java.lang.reflect.AccessibleObject, java.util.List<java.lang.String>) throws cz.mff.dpp.args.CheckException;
  public static void checkValue(java.lang.reflect.AccessibleObject, java.lang.Object) throws cz.mff.dpp.args.CheckException, cz.mff.dpp.args.ConfException;
}
Compiled from "FactoryRegistry.java"
final class cz.mff.dpp.args.FactoryRegistry {
  public static void register(java.lang.Class<?>, java.lang.Class<?>);
  public static void unregister(java.lang.Class<?>);
  public static java.lang.Class<?> getFactoryType(java.lang.Class<?>);
  static {};
}
Compiled from "HelpUtils.java"
class cz.mff.dpp.args.HelpUtils {
  cz.mff.dpp.args.HelpUtils();
  public static void printHelp(cz.mff.dpp.args.Introspector);
  public static void printHelp(cz.mff.dpp.args.Introspector, java.io.PrintWriter);
}
Compiled from "Inspector.java"
final class cz.mff.dpp.args.Inspector {
  public cz.mff.dpp.args.Inspector(cz.mff.dpp.args.Introspector, cz.mff.dpp.args.OptionUtils$Used);
  public void check() throws cz.mff.dpp.args.CheckException;
}
Compiled from "Introspector.java"
final class cz.mff.dpp.args.Introspector {
  public cz.mff.dpp.args.Introspector(java.lang.Object) throws cz.mff.dpp.args.ConfException;
  public java.lang.reflect.AccessibleObject optionToAccesible(cz.mff.dpp.args.Option);
  public cz.mff.dpp.args.Option nameToOption(java.lang.String);
  public java.util.Collection<cz.mff.dpp.args.Option> getDeclaredOptions();
  public java.util.Set<java.util.Map$Entry<java.lang.reflect.AccessibleObject, cz.mff.dpp.args.Argument>> getArguments();
  public java.util.Set<java.lang.String> getAllOptionNames();
}
Compiled from "Logger.java"
public final class cz.mff.dpp.args.Logger {
  public cz.mff.dpp.args.Logger();
  static void severe(java.lang.String, java.lang.Object...);
  static void warning(java.lang.String, java.lang.Object...);
  static void info(java.lang.String, java.lang.Object...);
  static void fine(java.lang.String, java.lang.Object...);
  static void log(java.util.logging.Level, java.lang.String, java.lang.Object...);
  public static void setLevel(java.util.logging.Level);
  static {};
}
Compiled from "None.java"
final class cz.mff.dpp.args.None {
}
Compiled from "Option.java"
public interface cz.mff.dpp.args.Option extends java.lang.annotation.Annotation {
  public abstract boolean required();
  public abstract java.lang.String name();
  public abstract java.lang.String[] aliases();
  public abstract java.lang.String[] incompatible();
  public abstract java.lang.String[] mustUseWith();
  public abstract java.lang.String description();
  public abstract java.lang.Class<?> factory();
  public abstract java.lang.String[] defaultValues();
}
Compiled from "OptionUtils.java"
final class cz.mff.dpp.args.OptionUtils {
  public static final java.lang.String SIMPLE_OPTION_PREFIX;
  public static final java.lang.String LONG_OPTION_PREFIX;
  public static final java.lang.String OPTION_LIST_TERMINATOR;
  cz.mff.dpp.args.OptionUtils();
  public static boolean isSimpleOption(java.lang.String);
  public static boolean isLongOption(java.lang.String);
  public static boolean isOption(java.lang.String);
  public static java.util.List<java.lang.String> getDefaultValues(cz.mff.dpp.args.Option);
}
Compiled from "OptionUtils.java"
public final class cz.mff.dpp.args.OptionUtils$Used {
  int position;
  public cz.mff.dpp.args.OptionUtils$Used();
  public void addOption(cz.mff.dpp.args.Option, java.util.List<java.lang.String>) throws cz.mff.dpp.args.ParseException;
  public void addArgument(java.lang.String);
  public void addArgument(java.util.List<java.lang.String>);
  public java.lang.String getArgument(int) throws cz.mff.dpp.args.ConfException;
  public boolean isArgumentUsed(int);
  public java.util.List<java.lang.String> getArgument(int, int) throws cz.mff.dpp.args.ConfException;
  public java.util.List<java.lang.String> getOptionParams(cz.mff.dpp.args.Option);
  public int getOptionPosition(cz.mff.dpp.args.Option);
  public java.util.Collection<cz.mff.dpp.args.Option> getUsedOptions();
  public boolean isOptionUsed(cz.mff.dpp.args.Option);
}
Compiled from "ParseException.java"
public class cz.mff.dpp.args.ParseException extends java.lang.Exception {
  public cz.mff.dpp.args.ParseException();
  public cz.mff.dpp.args.ParseException(java.lang.String);
  public cz.mff.dpp.args.ParseException(java.lang.String, java.lang.Throwable);
  public cz.mff.dpp.args.ParseException(java.lang.Throwable);
  public cz.mff.dpp.args.ParseException(java.lang.String, java.lang.Object...);
  public cz.mff.dpp.args.ParseException(java.lang.Throwable, java.lang.String, java.lang.Object...);
  public static void wrap(java.lang.Throwable, java.lang.String, java.lang.Object...) throws cz.mff.dpp.args.ParseException;
  public static void wrap(java.lang.Throwable, java.lang.String) throws cz.mff.dpp.args.ParseException;
}
Compiled from "Parser.java"
public class cz.mff.dpp.args.Parser {
  static final boolean $assertionsDisabled;
  public cz.mff.dpp.args.Parser(java.lang.Object) throws java.lang.IllegalArgumentException;
  public void parse(java.lang.String[]) throws cz.mff.dpp.args.ParseException;
  public void usage();
  public void usage(java.io.PrintStream);
  public void usage(java.io.PrintWriter);
  public java.lang.String getUsageString();
  static {};
}
Compiled from "ReflectUtils.java"
final class cz.mff.dpp.args.ReflectUtils {
  static final boolean $assertionsDisabled;
  cz.mff.dpp.args.ReflectUtils();
  public static boolean isFlagType(java.lang.reflect.AccessibleObject);
  public static boolean isArrayType(java.lang.reflect.AccessibleObject);
  public static boolean isSimpleType(java.lang.reflect.AccessibleObject);
  public static boolean isSupportedOption(java.lang.reflect.AccessibleObject);
  public static boolean isSupportedArgument(java.lang.reflect.AccessibleObject);
  public static java.lang.Object valueFromString(java.lang.Class<?>, java.lang.String) throws cz.mff.dpp.args.ConfException;
  public static java.lang.Class<?> getType(java.lang.reflect.AccessibleObject);
  public static java.lang.Class<?> getValueType(java.lang.reflect.AccessibleObject);
  public static java.lang.String getValueTypeName(java.lang.reflect.AccessibleObject);
  public static boolean isEnumType(java.lang.reflect.AccessibleObject);
  public static java.lang.String getEnumConstants(java.lang.reflect.AccessibleObject);
  public static cz.mff.dpp.args.Option getOption(java.lang.reflect.AccessibleObject);
  public static cz.mff.dpp.args.Argument getArgument(java.lang.reflect.AccessibleObject);
  public static cz.mff.dpp.args.Constraint getConstraint(java.lang.reflect.AccessibleObject);
  public static java.lang.reflect.Method getMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>[]) throws java.lang.Exception;
  public static boolean isFieldAssignableFrom(java.lang.Class<?>, java.lang.reflect.Method);
  static {};
}
Compiled from "Tokenizer.java"
final class cz.mff.dpp.args.Tokenizer implements java.lang.Iterable<java.lang.String> {
  public cz.mff.dpp.args.Tokenizer(cz.mff.dpp.args.Introspector, java.lang.String[]);
  public java.util.Iterator<java.lang.String> iterator();
  static java.lang.String[] access$000(cz.mff.dpp.args.Tokenizer);
  static cz.mff.dpp.args.Introspector access$100(cz.mff.dpp.args.Tokenizer);
}
Compiled from "Tokenizer.java"
class cz.mff.dpp.args.Tokenizer$1 implements java.util.Iterator<java.lang.String> {
  boolean options_terminated;
  final cz.mff.dpp.args.Tokenizer this$0;
  cz.mff.dpp.args.Tokenizer$1(cz.mff.dpp.args.Tokenizer);
  public boolean hasNext();
  public java.lang.String next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "CharTest.java"
public class cz.mff.dpp.args.examples.CharTest {
  static final boolean $assertionsDisabled;
  public cz.mff.dpp.args.examples.CharTest();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "CharTest.java"
class cz.mff.dpp.args.examples.CharTest$CharTestOptions {
  public char c;
  java.lang.Character character;
  public char charFromSetter;
  public java.lang.Character characterFromSetter;
  char ch;
  cz.mff.dpp.args.examples.CharTest$CharTestOptions();
  public void charSetter(char);
  public void charSetter(java.lang.Character);
}
Compiled from "CharTest.java"
public final class cz.mff.dpp.args.examples.CharTest$Handler {
  public static int compare(char, char);
}
Compiled from "ConstraintTest.java"
public class cz.mff.dpp.args.examples.ConstraintTest {
  public cz.mff.dpp.args.examples.ConstraintTest();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "ConstraintTest.java"
class cz.mff.dpp.args.examples.ConstraintTest$1 {
}
Compiled from "ConstraintTest.java"
final class cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions {
  java.lang.String day;
  java.lang.String threeLetters;
  double port;
  java.util.List<java.lang.Integer> ports;
  java.lang.String[] days;
  char[] someLetters;
  cz.mff.dpp.args.examples.ConstraintTest$TestClass testClass;
  cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions(cz.mff.dpp.args.examples.ConstraintTest$1);
}
Compiled from "ConstraintTest.java"
public final class cz.mff.dpp.args.examples.ConstraintTest$TestClass {
  public cz.mff.dpp.args.examples.ConstraintTest$TestClass(java.lang.String);
  public java.lang.String toString();
}
Compiled from "EnumTest.java"
public final class cz.mff.dpp.args.examples.EnumTest {
  static final boolean $assertionsDisabled;
  public cz.mff.dpp.args.examples.EnumTest();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "EnumTest.java"
final class cz.mff.dpp.args.examples.EnumTest$Day extends java.lang.Enum<cz.mff.dpp.args.examples.EnumTest$Day> {
  public static final cz.mff.dpp.args.examples.EnumTest$Day SUNDAY;
  public static final cz.mff.dpp.args.examples.EnumTest$Day MONDAY;
  public static final cz.mff.dpp.args.examples.EnumTest$Day TUESDAY;
  public static final cz.mff.dpp.args.examples.EnumTest$Day WEDNESDAY;
  public static final cz.mff.dpp.args.examples.EnumTest$Day THURSDAY;
  public static final cz.mff.dpp.args.examples.EnumTest$Day FRIDAY;
  public static final cz.mff.dpp.args.examples.EnumTest$Day SATURDAY;
  public static cz.mff.dpp.args.examples.EnumTest$Day[] values();
  public static cz.mff.dpp.args.examples.EnumTest$Day valueOf(java.lang.String);
  static {};
}
Compiled from "EnumTest.java"
class cz.mff.dpp.args.examples.EnumTest$EnumTestOptions {
  public cz.mff.dpp.args.examples.EnumTest$Day day;
  public cz.mff.dpp.args.examples.EnumTest$Day dayFromSetter;
  cz.mff.dpp.args.examples.EnumTest$EnumTestOptions();
  public void daySetter(cz.mff.dpp.args.examples.EnumTest$Day);
}
Compiled from "Example2.java"
public class cz.mff.dpp.args.examples.Example2 {
  java.util.List<java.lang.String> list;
  java.lang.Integer n;
  public cz.mff.dpp.args.examples.Example2$MyClass myClass;
  public cz.mff.dpp.args.examples.Example2();
  public static void main(java.lang.String[]);
}
Compiled from "Example2.java"
class cz.mff.dpp.args.examples.Example2$1 {
  static final int[] $SwitchMap$cz$mff$dpp$args$examples$Example2$Animal;
  static {};
}
Compiled from "Example2.java"
final class cz.mff.dpp.args.examples.Example2$Animal extends java.lang.Enum<cz.mff.dpp.args.examples.Example2$Animal> {
  public static final cz.mff.dpp.args.examples.Example2$Animal DOG;
  public static final cz.mff.dpp.args.examples.Example2$Animal CAT;
  public static final cz.mff.dpp.args.examples.Example2$Animal PIG;
  public static cz.mff.dpp.args.examples.Example2$Animal[] values();
  public static cz.mff.dpp.args.examples.Example2$Animal valueOf(java.lang.String);
  static {};
}
Compiled from "Example2.java"
public class cz.mff.dpp.args.examples.Example2$MyClass {
  public java.lang.String s1;
  public java.lang.String s2;
  public cz.mff.dpp.args.examples.Example2$MyClass(java.lang.String, java.lang.String);
  public static cz.mff.dpp.args.examples.Example2$MyClass valueOf(java.lang.String);
}
Compiled from "HelpTest.java"
public class cz.mff.dpp.args.examples.HelpTest {
  public cz.mff.dpp.args.examples.HelpTest();
  public static void main(java.lang.String[]) throws cz.mff.dpp.args.ParseException;
}
Compiled from "HelpTest.java"
final class cz.mff.dpp.args.examples.HelpTest$Day extends java.lang.Enum<cz.mff.dpp.args.examples.HelpTest$Day> {
  public static final cz.mff.dpp.args.examples.HelpTest$Day SUNDAY;
  public static final cz.mff.dpp.args.examples.HelpTest$Day MONDAY;
  public static final cz.mff.dpp.args.examples.HelpTest$Day TUESDAY;
  public static final cz.mff.dpp.args.examples.HelpTest$Day WEDNESDAY;
  public static final cz.mff.dpp.args.examples.HelpTest$Day THURSDAY;
  public static final cz.mff.dpp.args.examples.HelpTest$Day FRIDAY;
  public static final cz.mff.dpp.args.examples.HelpTest$Day SATURDAY;
  public static cz.mff.dpp.args.examples.HelpTest$Day[] values();
  public static cz.mff.dpp.args.examples.HelpTest$Day valueOf(java.lang.String);
  static {};
}
Compiled from "HelpTest.java"
final class cz.mff.dpp.args.examples.HelpTest$HelpTestOptions {
  boolean version;
  java.lang.String login_name;
  java.lang.String config_file;
  java.lang.String hostname;
  java.lang.String[] list;
  char c;
  cz.mff.dpp.args.examples.HelpTest$Day day;
  cz.mff.dpp.args.examples.HelpTest$HelpTestOptions();
  void setPort(int);
}
Compiled from "MultiValuedExample.java"
public class cz.mff.dpp.args.examples.MultiValuedExample {
  public cz.mff.dpp.args.examples.MultiValuedExample();
  public static void main(java.lang.String[]) throws cz.mff.dpp.args.ParseException;
}
Compiled from "MultiValuedExample.java"
class cz.mff.dpp.args.examples.MultiValuedExample$1 {
}
Compiled from "MultiValuedExample.java"
final class cz.mff.dpp.args.examples.MultiValuedExample$Options {
  java.util.List<java.lang.Double> doubles;
  java.util.List<java.lang.String> freeArguments;
  void stringArraySetter(java.lang.String[]);
  cz.mff.dpp.args.examples.MultiValuedExample$Options(cz.mff.dpp.args.examples.MultiValuedExample$1);
}
Compiled from "OptionListTerminator.java"
public class cz.mff.dpp.args.examples.OptionListTerminator {
  static final boolean $assertionsDisabled;
  public cz.mff.dpp.args.examples.OptionListTerminator();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "OptionListTerminator.java"
public class cz.mff.dpp.args.examples.OptionListTerminator$Options {
  int a;
  java.lang.String bee;
  java.lang.String[] arguments;
  public cz.mff.dpp.args.examples.OptionListTerminator$Options();
}
Compiled from "SetterTest.java"
public class cz.mff.dpp.args.examples.SetterTest {
  public cz.mff.dpp.args.examples.SetterTest();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "SetterTest.java"
public class cz.mff.dpp.args.examples.SetterTest$Options {
  java.lang.String bee;
  java.lang.String[] arguments;
  public cz.mff.dpp.args.examples.SetterTest$Options();
  boolean test();
}
Compiled from "TimeCommand.java"
public class cz.mff.dpp.args.examples.TimeCommand {
  public cz.mff.dpp.args.examples.TimeCommand();
  public static void main(java.lang.String[]);
}
Compiled from "TimeCommand.java"
class cz.mff.dpp.args.examples.TimeCommand$1 {
}
Compiled from "TimeCommand.java"
final class cz.mff.dpp.args.examples.TimeCommand$TimeOptions {
  public boolean printVersion;
  public boolean printUsage;
  public boolean verbose;
  public boolean append;
  public boolean portability;
  public java.lang.String format;
  public java.lang.String outputFile;
  java.lang.String command;
  public java.lang.String[] arguments;
  void setVerbose();
  cz.mff.dpp.args.examples.TimeCommand$TimeOptions(cz.mff.dpp.args.examples.TimeCommand$1);
}
