Compiled from "Checksum.java"
class hep.io.root.output.Checksum {
  hep.io.root.output.Checksum();
  void compute(java.lang.String);
  void compute(int);
  int getValue();
}
Compiled from "ChecksumTest.java"
public class hep.io.root.output.ChecksumTest {
  public hep.io.root.output.ChecksumTest();
  public void testChecksum1();
  public void testChecksum2();
}
Compiled from "HistogramTest.java"
public class hep.io.root.output.HistogramTest {
  public hep.io.root.output.HistogramTest();
  public void test1() throws java.io.IOException;
  public void test2() throws java.io.IOException;
  public void test3() throws java.io.IOException;
  public void test4() throws java.io.IOException;
  public void test5() throws java.io.IOException;
}
Compiled from "NestedDirectoryTest.java"
public class hep.io.root.output.NestedDirectoryTest {
  public hep.io.root.output.NestedDirectoryTest();
  public void test1() throws java.io.IOException;
  public void test2() throws java.io.IOException;
}
Compiled from "POJOTest.java"
public class hep.io.root.output.POJOTest {
  public hep.io.root.output.POJOTest();
  public void test1() throws java.io.IOException;
  static long computeChecksum(java.io.File) throws java.io.FileNotFoundException, java.io.IOException;
}
Compiled from "Pointer.java"
class hep.io.root.output.Pointer {
  public static hep.io.root.output.Pointer ZERO;
  hep.io.root.output.Pointer(long);
  void set(long);
  long get();
  static {};
}
Compiled from "RootBufferedOutputStream.java"
class hep.io.root.output.RootBufferedOutputStream extends java.io.DataOutputStream implements hep.io.root.output.RootOutputNonPublic {
  hep.io.root.output.RootBufferedOutputStream(hep.io.root.output.TFile, int, boolean);
  public void writeObject(java.lang.Object) throws java.io.IOException;
  public void writeObjectRef(java.lang.Object) throws java.io.IOException;
  public boolean isLargeFile();
  void writeTo(hep.io.root.output.RootOutputNonPublic, int) throws java.io.IOException;
  int uncompressedSize();
  public void seek(long);
  public long getFilePointer();
  public java.util.Map<java.lang.String, java.lang.Long> getClassMap();
  public java.util.Map<java.lang.String, hep.io.root.output.TStreamerInfo> getStreamerInfos();
  static void writeObject(hep.io.root.output.RootOutputNonPublic, java.lang.Object) throws java.io.IOException;
  static void writeObject(hep.io.root.output.RootOutputNonPublic, java.lang.Object, java.lang.Class) throws java.io.IOException;
  static void writeObjectRef(hep.io.root.output.RootOutputNonPublic, java.lang.Object) throws java.io.IOException;
  static void writeObjectRef(hep.io.root.output.RootOutputNonPublic, java.lang.Object, java.lang.Class) throws java.io.IOException;
}
Compiled from "RootBufferedOutputStream.java"
class hep.io.root.output.RootBufferedOutputStream$1 {
}
Compiled from "RootBufferedOutputStream.java"
class hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream extends java.io.ByteArrayOutputStream {
  hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream(hep.io.root.output.RootBufferedOutputStream$1);
  static void access$100(hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream, hep.io.root.output.RootOutputNonPublic, int) throws java.io.IOException;
  static void access$200(hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream, long);
  static long access$300(hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream);
}
Compiled from "RootOutput.java"
public interface hep.io.root.output.RootOutput extends java.io.DataOutput {
  public abstract void writeObject(java.lang.Object) throws java.io.IOException;
  public abstract void writeObjectRef(java.lang.Object) throws java.io.IOException;
  public abstract boolean isLargeFile();
}
Compiled from "RootOutputNonPublic.java"
interface hep.io.root.output.RootOutputNonPublic extends hep.io.root.output.RootOutput,java.io.Closeable {
  public abstract void seek(long) throws java.io.IOException;
  public abstract long getFilePointer() throws java.io.IOException;
  public abstract java.util.Map<java.lang.String, java.lang.Long> getClassMap();
  public abstract java.util.Map<java.lang.String, hep.io.root.output.TStreamerInfo> getStreamerInfos();
}
Compiled from "RootRandomAccessFile.java"
class hep.io.root.output.RootRandomAccessFile extends java.io.RandomAccessFile implements hep.io.root.output.RootOutputNonPublic {
  hep.io.root.output.RootRandomAccessFile(java.io.File, hep.io.root.output.TFile) throws java.io.FileNotFoundException;
  public void writeObject(java.lang.Object) throws java.io.IOException;
  public boolean isLargeFile();
  public void writeObjectRef(java.lang.Object) throws java.io.IOException;
  public java.util.Map<java.lang.String, java.lang.Long> getClassMap();
  public java.util.Map<java.lang.String, hep.io.root.output.TStreamerInfo> getStreamerInfos();
}
Compiled from "StreamerClassInfo.java"
class hep.io.root.output.StreamerClassInfo {
  hep.io.root.output.StreamerClassInfo(java.lang.Class);
  void resolveDependencies() throws hep.io.root.output.StreamerInfoException;
  public java.lang.String getName();
  public int getVersion();
  public boolean hasStandardHeader();
  public java.lang.String getTitle();
  boolean suppressStreamerInfo();
  int getCheckSum();
  java.util.Collection<hep.io.root.output.StreamerFieldInfo> getFields();
  hep.io.root.output.StreamerFieldInfo findField(java.lang.String);
  void addField(hep.io.root.output.StreamerFieldInfo);
  hep.io.root.output.Type getType();
  int getSize();
  java.lang.String getTypeName();
  hep.io.root.output.StreamerClassInfo getSuperClass();
  void write(hep.io.root.output.RootOutput, java.lang.Object) throws java.io.IOException, hep.io.root.output.StreamerInfoException;
}
Compiled from "StreamerFieldInfo.java"
class hep.io.root.output.StreamerFieldInfo {
  hep.io.root.output.StreamerFieldInfo(hep.io.root.output.StreamerClassInfo, java.lang.reflect.Field) throws hep.io.root.output.StreamerInfoException;
  boolean isBasicType();
  boolean isArray();
  public boolean isSuper();
  java.lang.String getName();
  java.lang.String getTypeName();
  int getArrayDim();
  int getMaxIndex(int);
  java.lang.String getTitle();
  hep.io.root.output.Type getType();
  hep.io.root.output.StreamerClassInfo getAsSuperClass();
  java.lang.String getCountName();
  java.lang.String getCountClass();
  int getCountVersion();
  boolean isBasicPointer();
  int getSize();
  void write(hep.io.root.output.RootOutput, java.lang.Object) throws java.io.IOException;
}
Compiled from "StreamerFieldInfo.java"
class hep.io.root.output.StreamerFieldInfo$1 {
  static final int[] $SwitchMap$hep$io$root$output$Type;
  static {};
}
Compiled from "StreamerInfoException.java"
class hep.io.root.output.StreamerInfoException extends java.lang.Exception {
  hep.io.root.output.StreamerInfoException(java.lang.String);
  hep.io.root.output.StreamerInfoException(java.lang.String, hep.io.root.output.StreamerInfoException);
  void setField(java.lang.String, java.lang.String);
  public java.lang.String getMessage();
}
Compiled from "StreamerUtilities.java"
class hep.io.root.output.StreamerUtilities {
  hep.io.root.output.StreamerUtilities();
  static hep.io.root.output.StreamerClassInfo getClassInfo(java.lang.Class);
  static hep.io.root.output.TStreamerInfo getStreamerInfo(java.lang.Class) throws hep.io.root.output.StreamerInfoException;
}
Compiled from "TDirectory.java"
public class hep.io.root.output.TDirectory extends hep.io.root.output.classes.TNamed {
  hep.io.root.output.TDirectory(java.lang.String, java.lang.String, hep.io.root.output.TDirectory);
  void addOwnRecords(hep.io.root.output.Pointer);
  public void add(java.lang.Object);
  public hep.io.root.output.TDirectory findDir(java.lang.String);
  public hep.io.root.output.TDirectory findDir(java.lang.String, boolean);
  public hep.io.root.output.TDirectory mkdir(java.lang.String) throws java.lang.IllegalArgumentException;
  public hep.io.root.output.TDirectory mkdir(java.lang.String, boolean);
  int getNBytesName();
  java.lang.Object getUUID();
  void streamer(hep.io.root.output.RootOutput) throws java.io.IOException;
  static void setTimeWarp(boolean);
  static java.util.Date getTimeWarp();
}
Compiled from "TDirectory.java"
class hep.io.root.output.TDirectory$1 {
}
Compiled from "TDirectory.java"
class hep.io.root.output.TDirectory$KeyList {
  hep.io.root.output.TDirectory$KeyList(hep.io.root.output.TDirectory$1);
  static void access$100(hep.io.root.output.TDirectory$KeyList, hep.io.root.output.TKey);
}
Compiled from "TFile.java"
public class hep.io.root.output.TFile extends hep.io.root.output.TDirectory implements java.io.Closeable {
  public hep.io.root.output.TFile(java.lang.String) throws java.io.FileNotFoundException, java.io.IOException;
  public hep.io.root.output.TFile(java.io.File) throws java.io.FileNotFoundException, java.io.IOException;
  public void flush() throws java.io.IOException;
  public void close() throws java.io.IOException;
  boolean isLargeFile();
  public int getCompressionLevel();
  public void setCompressionLevel(int);
  java.util.Map<java.lang.String, hep.io.root.output.TStreamerInfo> getStreamerInfos();
  hep.io.root.output.TKey addRecord(java.lang.Class, java.lang.String, java.lang.String, hep.io.root.output.Pointer, boolean);
  hep.io.root.output.TKey addKeyListRecord(java.lang.Class, java.lang.String, java.lang.String, hep.io.root.output.Pointer, boolean);
  static void setTimeWarp(boolean);
  void streamer(hep.io.root.output.RootOutput) throws java.io.IOException;
}
Compiled from "TKey.java"
class hep.io.root.output.TKey extends hep.io.root.output.classes.TNamed {
  int size;
  hep.io.root.output.TKey(hep.io.root.output.TFile, java.lang.Class, java.lang.String, java.lang.String, hep.io.root.output.Pointer, boolean);
  void writeRecord(hep.io.root.output.RootRandomAccessFile) throws java.io.IOException;
  void rewrite(hep.io.root.output.RootRandomAccessFile) throws java.io.IOException;
  void setCompressionLevel(int);
  hep.io.root.output.Pointer getSeekKey();
  void add(java.lang.Object);
  java.lang.Class getObjectClass();
  void streamer(hep.io.root.output.RootOutput) throws java.io.IOException;
}
Compiled from "TStreamerBase.java"
class hep.io.root.output.TStreamerBase extends hep.io.root.output.TStreamerElement {
  hep.io.root.output.TStreamerBase(hep.io.root.output.StreamerClassInfo);
}
Compiled from "TStreamerBasicPointer.java"
class hep.io.root.output.TStreamerBasicPointer extends hep.io.root.output.TStreamerElement {
  hep.io.root.output.TStreamerBasicPointer(hep.io.root.output.StreamerFieldInfo);
}
Compiled from "TStreamerBasicType.java"
class hep.io.root.output.TStreamerBasicType extends hep.io.root.output.TStreamerElement {
  hep.io.root.output.TStreamerBasicType(hep.io.root.output.StreamerFieldInfo);
}
Compiled from "TStreamerElement.java"
abstract class hep.io.root.output.TStreamerElement extends hep.io.root.output.classes.TNamed {
  int fType;
  int fSize;
  java.lang.String fTypeName;
  hep.io.root.output.TStreamerElement(hep.io.root.output.StreamerFieldInfo);
  hep.io.root.output.TStreamerElement(hep.io.root.output.StreamerClassInfo);
  static hep.io.root.output.TStreamerElement create(hep.io.root.output.StreamerClassInfo);
  static hep.io.root.output.TStreamerElement create(hep.io.root.output.StreamerFieldInfo);
}
Compiled from "TStreamerElement.java"
class hep.io.root.output.TStreamerElement$1 {
  static final int[] $SwitchMap$hep$io$root$output$Type;
  static {};
}
Compiled from "TStreamerInfo.java"
class hep.io.root.output.TStreamerInfo extends hep.io.root.output.classes.TNamed {
  hep.io.root.output.TStreamerInfo(hep.io.root.output.StreamerClassInfo);
}
Compiled from "TStreamerObject.java"
class hep.io.root.output.TStreamerObject extends hep.io.root.output.TStreamerElement {
  hep.io.root.output.TStreamerObject(hep.io.root.output.StreamerFieldInfo);
}
Compiled from "TStreamerObjectAny.java"
class hep.io.root.output.TStreamerObjectAny extends hep.io.root.output.TStreamerElement {
  hep.io.root.output.TStreamerObjectAny(hep.io.root.output.StreamerFieldInfo);
}
Compiled from "TStreamerObjectPointer.java"
class hep.io.root.output.TStreamerObjectPointer extends hep.io.root.output.TStreamerElement {
  hep.io.root.output.TStreamerObjectPointer(hep.io.root.output.StreamerFieldInfo);
}
Compiled from "TStreamerString.java"
class hep.io.root.output.TStreamerString extends hep.io.root.output.TStreamerElement {
  hep.io.root.output.TStreamerString(hep.io.root.output.StreamerFieldInfo);
}
Compiled from "Type.java"
public final class hep.io.root.output.Type extends java.lang.Enum<hep.io.root.output.Type> {
  public static final hep.io.root.output.Type kBase;
  public static final hep.io.root.output.Type kCounter;
  public static final hep.io.root.output.Type kCharStar;
  public static final hep.io.root.output.Type kChar;
  public static final hep.io.root.output.Type kShort;
  public static final hep.io.root.output.Type kInt;
  public static final hep.io.root.output.Type kEnum;
  public static final hep.io.root.output.Type kLong;
  public static final hep.io.root.output.Type kFloat;
  public static final hep.io.root.output.Type kDouble;
  public static final hep.io.root.output.Type kDouble32;
  public static final hep.io.root.output.Type kLegacyChar;
  public static final hep.io.root.output.Type kUChar;
  public static final hep.io.root.output.Type kUShort;
  public static final hep.io.root.output.Type kUInt;
  public static final hep.io.root.output.Type kULong;
  public static final hep.io.root.output.Type kBits;
  public static final hep.io.root.output.Type kLong64;
  public static final hep.io.root.output.Type kULong64;
  public static final hep.io.root.output.Type kBool;
  public static final hep.io.root.output.Type kFloat16;
  public static final hep.io.root.output.Type kCharArray;
  public static final hep.io.root.output.Type kShortArray;
  public static final hep.io.root.output.Type kIntArray;
  public static final hep.io.root.output.Type kLongArray;
  public static final hep.io.root.output.Type kFloatArray;
  public static final hep.io.root.output.Type kDoubleArray;
  public static final hep.io.root.output.Type kDouble32Array;
  public static final hep.io.root.output.Type kObject;
  public static final hep.io.root.output.Type kAny;
  public static final hep.io.root.output.Type kObjectp;
  public static final hep.io.root.output.Type kObjectP;
  public static final hep.io.root.output.Type kTString;
  public static final hep.io.root.output.Type kTObject;
  public static final hep.io.root.output.Type kTNamed;
  static final java.util.Map<java.lang.Class, hep.io.root.output.Type> javaToRoot;
  public static hep.io.root.output.Type[] values();
  public static hep.io.root.output.Type valueOf(java.lang.String);
  int getValue();
  hep.io.root.output.Type arrayType();
  java.lang.String getName();
  int getSize();
  static hep.io.root.output.Type forClass(java.lang.Class);
  static {};
}
Compiled from "ClassDef.java"
public interface hep.io.root.output.annotations.ClassDef extends java.lang.annotation.Annotation {
  public abstract java.lang.String className();
  public abstract int version();
  public abstract boolean hasStandardHeader();
  public abstract int checkSum();
  public abstract boolean suppressTStreamerInfo();
}
Compiled from "Counter.java"
public interface hep.io.root.output.annotations.Counter extends java.lang.annotation.Annotation {
  public abstract java.lang.String value();
}
Compiled from "FieldType.java"
public interface hep.io.root.output.annotations.FieldType extends java.lang.annotation.Annotation {
  public abstract hep.io.root.output.Type value();
}
Compiled from "Super.java"
public interface hep.io.root.output.annotations.Super extends java.lang.annotation.Annotation {
}
Compiled from "Title.java"
public interface hep.io.root.output.annotations.Title extends java.lang.annotation.Annotation {
  public abstract java.lang.String value();
}
Compiled from "TArrayD.java"
public class hep.io.root.output.classes.TArrayD {
  public hep.io.root.output.classes.TArrayD(double[]);
}
Compiled from "TCollection.java"
public abstract class hep.io.root.output.classes.TCollection<A> extends hep.io.root.output.classes.TObject implements java.lang.Iterable<A> {
  java.lang.String name;
  transient java.util.Collection<A> list;
  public hep.io.root.output.classes.TCollection();
  public void add(A);
  public java.util.Iterator<A> iterator();
}
Compiled from "TDatime.java"
public class hep.io.root.output.classes.TDatime {
  public hep.io.root.output.classes.TDatime();
  public hep.io.root.output.classes.TDatime(java.util.Date);
}
Compiled from "THashList.java"
public class hep.io.root.output.classes.THashList extends hep.io.root.output.classes.TList {
  public hep.io.root.output.classes.THashList();
}
Compiled from "TList.java"
public class hep.io.root.output.classes.TList<A> extends hep.io.root.output.classes.TSeqCollection<A> {
  public hep.io.root.output.classes.TList(java.util.Collection<A>);
  public hep.io.root.output.classes.TList();
}
Compiled from "TNamed.java"
public class hep.io.root.output.classes.TNamed extends hep.io.root.output.classes.TObject {
  java.lang.String name;
  java.lang.String title;
  public hep.io.root.output.classes.TNamed(java.lang.String, java.lang.String);
  public void setTitle(java.lang.String);
  public java.lang.String getName();
  public java.lang.String getTitle();
}
Compiled from "TObjArray.java"
public class hep.io.root.output.classes.TObjArray<A> extends hep.io.root.output.classes.TSeqCollection<A> {
  public hep.io.root.output.classes.TObjArray();
}
Compiled from "TObjString.java"
public class hep.io.root.output.classes.TObjString extends hep.io.root.output.classes.TObject {
  java.lang.String fString;
  public hep.io.root.output.classes.TObjString(java.lang.String);
}
Compiled from "TObject.java"
public class hep.io.root.output.classes.TObject {
  public hep.io.root.output.classes.TObject();
}
Compiled from "TSeqCollection.java"
public class hep.io.root.output.classes.TSeqCollection<A> extends hep.io.root.output.classes.TCollection<A> {
  public hep.io.root.output.classes.TSeqCollection();
}
Compiled from "TString.java"
public class hep.io.root.output.classes.TString {
  static final hep.io.root.output.classes.TString empty;
  public hep.io.root.output.classes.TString(java.lang.String);
  public static hep.io.root.output.classes.TString empty();
  public java.lang.String toString();
  static {};
}
Compiled from "TUUID.java"
public class hep.io.root.output.classes.TUUID {
  public hep.io.root.output.classes.TUUID();
  public hep.io.root.output.classes.TUUID(java.util.UUID);
}
Compiled from "EErrorType.java"
public final class hep.io.root.output.classes.hist.EErrorType extends java.lang.Enum<hep.io.root.output.classes.hist.EErrorType> {
  public static final hep.io.root.output.classes.hist.EErrorType kERRORMEAN;
  public static final hep.io.root.output.classes.hist.EErrorType kERRORSPREAD;
  public static final hep.io.root.output.classes.hist.EErrorType kERRORSPREADI;
  public static final hep.io.root.output.classes.hist.EErrorType kERRORSPREADG;
  public static hep.io.root.output.classes.hist.EErrorType[] values();
  public static hep.io.root.output.classes.hist.EErrorType valueOf(java.lang.String);
  static {};
}
Compiled from "TAttAxis.java"
public class hep.io.root.output.classes.hist.TAttAxis {
  public hep.io.root.output.classes.hist.TAttAxis();
}
Compiled from "TAttFill.java"
public class hep.io.root.output.classes.hist.TAttFill {
  public hep.io.root.output.classes.hist.TAttFill();
}
Compiled from "TAttLine.java"
public class hep.io.root.output.classes.hist.TAttLine {
  public hep.io.root.output.classes.hist.TAttLine();
}
Compiled from "TAttMarker.java"
public class hep.io.root.output.classes.hist.TAttMarker {
  public hep.io.root.output.classes.hist.TAttMarker();
}
Compiled from "TAxis.java"
public class hep.io.root.output.classes.hist.TAxis extends hep.io.root.output.classes.TNamed {
  int fNbins;
  double fXmin;
  double fXmax;
  hep.io.root.output.classes.hist.TAxis(java.lang.String, int, double, double);
  public void settAttAxis(hep.io.root.output.classes.hist.TAttAxis);
  public void setfNbins(int);
  public void setfXmin(double);
  public void setfXmax(double);
  public void setfXbins(hep.io.root.output.classes.TArrayD);
  public void setfFirst(int);
  public void setfLast(int);
  public void setfBits2(short);
  public void setfTimeDisplay(boolean);
  public void setfTimeFormat(java.lang.String);
  public void setfLabels(hep.io.root.output.classes.THashList);
}
Compiled from "TH1.java"
public class hep.io.root.output.classes.hist.TH1 extends hep.io.root.output.classes.TNamed {
  int fNcells;
  hep.io.root.output.classes.hist.TAxis fYaxis;
  double fEntries;
  double fTsumw;
  double fTsumw2;
  double fTsumwx;
  double fTsumwx2;
  public hep.io.root.output.classes.hist.TH1(java.lang.String, int, double, double);
  public void setEntries(double);
  public void settAttLine(hep.io.root.output.classes.hist.TAttLine);
  public void settAttFill(hep.io.root.output.classes.hist.TAttFill);
  public void settAttMarker(hep.io.root.output.classes.hist.TAttMarker);
  public void setfNcells(int);
  public void setfXaxis(hep.io.root.output.classes.hist.TAxis);
  public void setfYaxis(hep.io.root.output.classes.hist.TAxis);
  public void setfZaxis(hep.io.root.output.classes.hist.TAxis);
  public void setfBarOffset(short);
  public void setfBarWidth(short);
  public void setfEntries(double);
  public void setfTsumw(double);
  public void setfTsumw2(double);
  public void setfTsumwx(double);
  public void setfTsumwx2(double);
  public void setfMaximum(double);
  public void setfMinimum(double);
  public void setfNormFactor(double);
  public void setfContour(hep.io.root.output.classes.TArrayD);
  public void setfSumw2(hep.io.root.output.classes.TArrayD);
  public void setfOption(java.lang.String);
  public void setfFunctions(hep.io.root.output.classes.TList);
  public void setfBufferSize(int);
  public void setfBuffer(double[]);
  public hep.io.root.output.classes.hist.TAttLine gettAttLine();
  public hep.io.root.output.classes.hist.TAttFill gettAttFill();
  public hep.io.root.output.classes.hist.TAttMarker gettAttMarker();
  public int getfNcells();
  public hep.io.root.output.classes.hist.TAxis getfXaxis();
  public hep.io.root.output.classes.hist.TAxis getfYaxis();
  public hep.io.root.output.classes.hist.TAxis getfZaxis();
  public short getfBarOffset();
  public short getfBarWidth();
  public double getfEntries();
  public double getfTsumw();
  public double getfTsumw2();
  public double getfTsumwx();
  public double getfTsumwx2();
  public double getfMaximum();
  public double getfMinimum();
  public double getfNormFactor();
  public hep.io.root.output.classes.TArrayD getfContour();
  public hep.io.root.output.classes.TArrayD getfSumw2();
  public java.lang.String getfOption();
  public hep.io.root.output.classes.TList getfFunctions();
  public int getfBufferSize();
  public double[] getfBuffer();
}
Compiled from "TH1.java"
final class hep.io.root.output.classes.hist.TH1$EBinErrorOpt extends java.lang.Enum<hep.io.root.output.classes.hist.TH1$EBinErrorOpt> {
  public static final hep.io.root.output.classes.hist.TH1$EBinErrorOpt kNormal;
  public static final hep.io.root.output.classes.hist.TH1$EBinErrorOpt kPoisson;
  public static final hep.io.root.output.classes.hist.TH1$EBinErrorOpt kPoisson2;
  public static hep.io.root.output.classes.hist.TH1$EBinErrorOpt[] values();
  public static hep.io.root.output.classes.hist.TH1$EBinErrorOpt valueOf(java.lang.String);
  static {};
}
Compiled from "TH1D.java"
public class hep.io.root.output.classes.hist.TH1D extends hep.io.root.output.classes.hist.TH1 {
  public hep.io.root.output.classes.hist.TH1D(java.lang.String, int, double, double, double[]);
}
Compiled from "TH2.java"
public class hep.io.root.output.classes.hist.TH2 extends hep.io.root.output.classes.hist.TH1 {
  public hep.io.root.output.classes.hist.TH2(java.lang.String, int, double, double, int, double, double);
  public double getfScalefactor();
  public void setfScalefactor(double);
  public double getfTsumwy();
  public void setfTsumwy(double);
  public double getfTsumwy2();
  public void setfTsumwy2(double);
  public double getfTsumwxy();
  public void setfTsumwxy(double);
}
Compiled from "TH2D.java"
public class hep.io.root.output.classes.hist.TH2D extends hep.io.root.output.classes.hist.TH2 {
  public hep.io.root.output.classes.hist.TH2D(java.lang.String, int, double, double, int, double, double, double[]);
}
Compiled from "TProfile.java"
public class hep.io.root.output.classes.hist.TProfile extends hep.io.root.output.classes.hist.TH1D {
  public hep.io.root.output.classes.hist.TProfile(java.lang.String, int, double, double, double[], double[], double[], double[]);
  public void setfTsumwy(double);
  public void setfTsumwy2(double);
}
Compiled from "TProfile2D.java"
public class hep.io.root.output.classes.hist.TProfile2D extends hep.io.root.output.classes.hist.TH2D {
  public hep.io.root.output.classes.hist.TProfile2D(java.lang.String, int, double, double, int, double, double, double[], double[], double[], double[]);
  public void setfTsumwz(double);
  public void setfTsumwz2(double);
}
Compiled from "HistogramDemo.java"
public class hep.io.root.output.demo.HistogramDemo {
  public hep.io.root.output.demo.HistogramDemo();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "NestedDirectoryDemo.java"
public class hep.io.root.output.demo.NestedDirectoryDemo {
  public hep.io.root.output.demo.NestedDirectoryDemo();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "POJODemo.java"
public class hep.io.root.output.demo.POJODemo {
  public hep.io.root.output.demo.POJODemo();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "POJODemo.java"
public class hep.io.root.output.demo.POJODemo$POJO {
  int i;
  double d;
  java.lang.String hello;
  public hep.io.root.output.demo.POJODemo$POJO();
}
Compiled from "SimpleHistogramFiller.java"
public class hep.io.root.output.demo.SimpleHistogramFiller {
  public hep.io.root.output.demo.SimpleHistogramFiller();
  public hep.io.root.output.demo.SimpleHistogramFiller(java.util.Random);
  public hep.io.root.output.classes.hist.TH1D create1DHistogram(java.lang.String, java.lang.String);
  public hep.io.root.output.classes.hist.TH2D create2DHistogram(java.lang.String, java.lang.String);
  public hep.io.root.output.classes.hist.TProfile createProfile(java.lang.String, java.lang.String);
  public hep.io.root.output.classes.hist.TProfile2D createProfile2D(java.lang.String, java.lang.String);
}
