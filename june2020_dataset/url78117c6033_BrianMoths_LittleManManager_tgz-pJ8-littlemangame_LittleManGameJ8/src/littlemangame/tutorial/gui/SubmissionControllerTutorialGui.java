/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package littlemangame.tutorial.gui;

import java.awt.event.ActionListener;
import littlemangame.notebookdeveloper.submissioncontrols.SubmissionControlGui;
import littlemangame.tutorial.tutorialnotebookdeveloper.TutorialNotebookDeveloper;

/**
 *
 * @author brian
 */
public class SubmissionControllerTutorialGui extends SubmissionControlGui<TutorialNotebookDeveloper> {

    private final TutorialDialogue tutorialDialogue;

    /**
     * Creates new form SubmissionControllerTutorialGui
     */
    public SubmissionControllerTutorialGui() {
        super();
        tutorialDialogue = new TutorialDialogue();
        replaceDummyPanel(tutorialDialogue);
    }

    @Override
    protected void hidePanels() {
        super.hidePanels();
        tutorialDialogue.setVisible(false);
    }

    public void showDialoguePanel() {
        hidePanels();
        tutorialDialogue.setVisible(true);
    }

    public void printDialogue(String message) {
        tutorialDialogue.setText(message);
    }

    public void addDialogueActionListener(ActionListener l) {
        tutorialDialogue.addActionListener(l);
    }

    public void removeDialogueActionListener(ActionListener l) {
        tutorialDialogue.removeActionListener(l);
    }

    public void setDialogueButtonIsEnabled(boolean isEnabled) {
        tutorialDialogue.setButtonIsEnabled(isEnabled);
    }

    public void setEditMemoryEnabled(boolean isEnabled) {
        editMemoryButton.setEnabled(isEnabled);
    }

    public void setSubmitButtonEnabled(boolean isEnabled) {
        submitButton.setEnabled(isEnabled);
    }

    public void setTestButtonEnabled(boolean isEnabled) {
        testButton.setEnabled(isEnabled);
    }

    public void addTestButtonActionListener(ActionListener l) {
        final ActionListener[] originalActionListeners = testButton.getActionListeners();
        for (ActionListener actionListener : originalActionListeners) {
            testButton.removeActionListener(actionListener);
        }
        testButton.addActionListener(l);
        for (ActionListener actionListener : originalActionListeners) {
            testButton.addActionListener(actionListener);
        }
    }

    public void removeTestButtonActionListener(ActionListener l) {
        testButton.removeActionListener(l);
    }

    public void addSubmitButtonActionListener(ActionListener l) {
        submitButton.addActionListener(l);
    }

    public void removeSubmitButtonActionListener(ActionListener l) {
        submitButton.removeActionListener(l);
    }

    @Override
    public void printResultMessage(String message) {
        consoleTextArea.setText("");
        super.printResultMessage(message);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
