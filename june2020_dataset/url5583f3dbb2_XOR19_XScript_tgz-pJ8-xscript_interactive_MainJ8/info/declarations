Compiled from "Main.java"
public class Main {
  public Main();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "XArrayList.java"
class xscript.XArrayList<T> extends java.util.AbstractList<T> {
  xscript.XArrayList(T...);
  public T get(int);
  public int size();
}
Compiled from "XBasicDiagnosticListener.java"
public class xscript.XBasicDiagnosticListener implements javax.tools.DiagnosticListener<java.lang.String> {
  public xscript.XBasicDiagnosticListener();
  public void report(javax.tools.Diagnostic<? extends java.lang.String>);
  public javax.tools.Diagnostic<? extends java.lang.String> getFirstError();
}
Compiled from "XCallFrame.java"
public class xscript.XCallFrame {
  int line;
  public int instructionpointer;
  final int basepointer;
  public xscript.XCallFrame(xscript.object.XRuntime, xscript.XCallFrame, xscript.values.XValue, int, boolean);
  public int readByte();
  public int readUByte();
  public int readShort();
  public int readUShort();
  public int readUInt();
  public int readIntP();
  public long readLongP();
  public float readFloatP();
  public double readDoubleP();
  public java.lang.String readStringP();
  public xscript.XCallFrame getParent();
  public boolean isFinished();
  public void jumpTo(int);
  public void exit();
  public void addToStackTrace(xscript.object.XRuntime, java.util.List<java.lang.StackTraceElement>);
  public xscript.XCatchHandler getCatchHandler();
  public void addCatchHandler(int, int);
  public void setVisible(xscript.object.XRuntime);
  public xscript.XClosure getClosure(int);
  public xscript.values.XValue getModule();
  public xscript.values.XValue getMethodClass();
  public java.lang.String getMethodName();
  public xscript.values.XValue getConstPool();
}
Compiled from "XCatchHandler.java"
class xscript.XCatchHandler {
  public xscript.XCatchHandler(int, int, xscript.XCatchHandler);
  public int getStackPointer();
  public int getInstructionPointer();
  public xscript.XCatchHandler getNext();
}
Compiled from "XClosure.java"
public class xscript.XClosure {
  xscript.values.XValue value;
  xscript.XClosure(xscript.XExec, xscript.XClosure);
  public xscript.values.XValue getValue();
  public void setValue(xscript.values.XValue);
  public void decRefs();
  public xscript.XClosure getNext();
  public xscript.XClosure incRef();
  public void setVisible(xscript.object.XRuntime);
}
Compiled from "XExec.java"
public class xscript.XExec {
  public xscript.XExec(xscript.object.XRuntime, boolean, int, xscript.values.XValue, xscript.values.XValue, xscript.values.XValue...);
  public xscript.XClosure getClosure(int);
  public xscript.values.XValue pop();
  public void pop(int);
  public void push(xscript.values.XValue);
  public xscript.object.XRuntime getRuntime();
  public xscript.values.XValue get(int);
  public xscript.values.XValue getTop(int);
  public void set(int, xscript.values.XValue);
  public void setTop(int, xscript.values.XValue);
  public void call(xscript.values.XValue, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public void call(xscript.values.XValue, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>, boolean);
  public boolean updateWaiting();
  public int run(int);
  void removeClosure(xscript.values.XValueClosure);
  xscript.XClosure getOrReplaceFirstClosure(xscript.XClosure);
  public void setWait();
  public void setWait(long);
  public void resume();
  public java.lang.StackTraceElement[] getStackTrace(boolean);
  public void fillStackTrace(java.util.List<java.lang.StackTraceElement>, boolean);
  public xscript.XExec$State getState();
  public xscript.values.XValue getException();
  public void setVisible();
  public boolean isGenerator();
  xscript.XCallFrame getCallFrame();
  static {};
}
Compiled from "XExec.java"
class xscript.XExec$1 {
  static final int[] $SwitchMap$xscript$XOpcode;
  static {};
}
Compiled from "XExec.java"
public final class xscript.XExec$State extends java.lang.Enum<xscript.XExec$State> {
  public static final xscript.XExec$State WAITING;
  public static final xscript.XExec$State WAITING_TIMED;
  public static final xscript.XExec$State ERRORED;
  public static final xscript.XExec$State TERMINATED;
  public static final xscript.XExec$State RUNNING;
  public static final xscript.XExec$State YIELDING;
  public static final xscript.XExec$State GENERATOR_WAIT;
  public static xscript.XExec$State[] values();
  public static xscript.XExec$State valueOf(java.lang.String);
  static {};
}
Compiled from "XFakeObjectInput.java"
class xscript.XFakeObjectInput extends java.io.DataInputStream implements java.io.ObjectInput {
  public xscript.XFakeObjectInput(java.io.InputStream);
  public java.lang.Object readObject() throws java.lang.ClassNotFoundException, java.io.IOException;
}
Compiled from "XFlags.java"
public class xscript.XFlags {
  public static final boolean DEBUG;
  public xscript.XFlags();
}
Compiled from "XInvocationHandler.java"
class xscript.XInvocationHandler implements java.lang.reflect.InvocationHandler {
  public xscript.XInvocationHandler(xscript.XScriptEngine, java.lang.Object);
  public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable;
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions {
  xscript.XNativeFunctions();
  static java.util.Map<java.lang.String, xscript.object.XFunctionData> getFunctions();
  static {};
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$1 {
}
Compiled from "XNativeFunctions.java"
final class xscript.XNativeFunctions$__builtin__ {
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__dir implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__dir(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__exec implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__exec(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__exit implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__exit(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__fillStackTrace implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__fillStackTrace(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__getModule implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__getModule(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__importModule implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__importModule(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__importParent implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__importParent(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__initModule implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__initModule(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__linkNative implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__linkNative(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__pollInput implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__pollInput(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__print implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__print(xscript.XNativeFunctions$1);
}
Compiled from "XNativeFunctions.java"
class xscript.XNativeFunctions$__builtin__$__sleep implements xscript.object.XFunction {
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  xscript.XNativeFunctions$__builtin__$__sleep(xscript.XNativeFunctions$1);
}
Compiled from "XOpcode.java"
public class xscript.XOpcode extends java.lang.Enum<xscript.XOpcode> {
  public static final xscript.XOpcode NOP;
  public static final xscript.XOpcode LINE1;
  public static final xscript.XOpcode LINE2;
  public static final xscript.XOpcode LINE4;
  public static final xscript.XOpcode LOADN;
  public static final xscript.XOpcode LOADB;
  public static final xscript.XOpcode LOADS;
  public static final xscript.XOpcode LOADI;
  public static final xscript.XOpcode LOADL;
  public static final xscript.XOpcode LOADF;
  public static final xscript.XOpcode LOADD;
  public static final xscript.XOpcode LOADT;
  public static final xscript.XOpcode LOAD_TRUE;
  public static final xscript.XOpcode LOAD_FALSE;
  public static final xscript.XOpcode LOADI_M1;
  public static final xscript.XOpcode LOADI_0;
  public static final xscript.XOpcode LOADI_1;
  public static final xscript.XOpcode LOADI_2;
  public static final xscript.XOpcode LOADD_M1;
  public static final xscript.XOpcode LOADD_0;
  public static final xscript.XOpcode LOADD_1;
  public static final xscript.XOpcode LOADD_2;
  public static final xscript.XOpcode LOADT_E;
  public static final xscript.XOpcode SWAP;
  public static final xscript.XOpcode DUP;
  public static final xscript.XOpcode GETTOP1;
  public static final xscript.XOpcode SETTOP1;
  public static final xscript.XOpcode GETTOP2;
  public static final xscript.XOpcode SETTOP2;
  public static final xscript.XOpcode GETBOTTOM1;
  public static final xscript.XOpcode SETBOTTOM1;
  public static final xscript.XOpcode GETBOTTOM2;
  public static final xscript.XOpcode SETBOTTOM2;
  public static final xscript.XOpcode POP;
  public static final xscript.XOpcode POP_1;
  public static final xscript.XOpcode RET;
  public static final xscript.XOpcode RETN;
  public static final xscript.XOpcode JUMP;
  public static final xscript.XOpcode JUMP_IF_ZERO;
  public static final xscript.XOpcode JUMP_IF_NON_ZERO;
  public static final xscript.XOpcode GET_GLOBAL;
  public static final xscript.XOpcode SET_GLOBAL;
  public static final xscript.XOpcode DEL_GLOBAL;
  public static final xscript.XOpcode GET_CLOSURE;
  public static final xscript.XOpcode SET_CLOSURE;
  public static final xscript.XOpcode GET_ATTR;
  public static final xscript.XOpcode SET_ATTR;
  public static final xscript.XOpcode DEL_ATTR;
  public static final xscript.XOpcode GET_INDEX;
  public static final xscript.XOpcode SET_INDEX;
  public static final xscript.XOpcode DEL_INDEX;
  public static final xscript.XOpcode ADD;
  public static final xscript.XOpcode LADD;
  public static final xscript.XOpcode SUB;
  public static final xscript.XOpcode LSUB;
  public static final xscript.XOpcode MUL;
  public static final xscript.XOpcode LMUL;
  public static final xscript.XOpcode DIV;
  public static final xscript.XOpcode LDIV;
  public static final xscript.XOpcode IDIV;
  public static final xscript.XOpcode LIDIV;
  public static final xscript.XOpcode MOD;
  public static final xscript.XOpcode LMOD;
  public static final xscript.XOpcode POW;
  public static final xscript.XOpcode LPOW;
  public static final xscript.XOpcode OR;
  public static final xscript.XOpcode LOR;
  public static final xscript.XOpcode AND;
  public static final xscript.XOpcode LAND;
  public static final xscript.XOpcode XOR;
  public static final xscript.XOpcode LXOR;
  public static final xscript.XOpcode SHL;
  public static final xscript.XOpcode LSHL;
  public static final xscript.XOpcode SHR;
  public static final xscript.XOpcode LSHR;
  public static final xscript.XOpcode ISHR;
  public static final xscript.XOpcode LISHR;
  public static final xscript.XOpcode POS;
  public static final xscript.XOpcode NEG;
  public static final xscript.XOpcode NOT;
  public static final xscript.XOpcode INVERT;
  public static final xscript.XOpcode EQUAL;
  public static final xscript.XOpcode NOT_EQUAL;
  public static final xscript.XOpcode SAME;
  public static final xscript.XOpcode NOT_SAME;
  public static final xscript.XOpcode SMALLER;
  public static final xscript.XOpcode GREATER;
  public static final xscript.XOpcode SMALLER_EQUAL;
  public static final xscript.XOpcode GREATER_EQUAL;
  public static final xscript.XOpcode COMPARE;
  public static final xscript.XOpcode COPY;
  public static final xscript.XOpcode INC;
  public static final xscript.XOpcode SINC;
  public static final xscript.XOpcode DEC;
  public static final xscript.XOpcode SDEC;
  public static final xscript.XOpcode CALL;
  public static final xscript.XOpcode CALL_LIST;
  public static final xscript.XOpcode CALL_MAP;
  public static final xscript.XOpcode CALL_LIST_MAP;
  public static final xscript.XOpcode CALL_KW;
  public static final xscript.XOpcode CALL_LIST_KW;
  public static final xscript.XOpcode CALL_MAP_KW;
  public static final xscript.XOpcode CALL_LIST_MAP_KW;
  public static final xscript.XOpcode MAKE_LIST;
  public static final xscript.XOpcode MAKE_TUPLE;
  public static final xscript.XOpcode MAKE_MAP;
  public static final xscript.XOpcode MAKE_CLASS;
  public static final xscript.XOpcode MAKE_FUNC;
  public static final xscript.XOpcode MAKE_METH;
  public static final xscript.XOpcode TYPEOF;
  public static final xscript.XOpcode INSTANCEOF;
  public static final xscript.XOpcode ISDERIVEDOF;
  public static final xscript.XOpcode YIELD;
  public static final xscript.XOpcode THROW;
  public static final xscript.XOpcode START_TRY;
  public static final xscript.XOpcode END_TRY;
  public static final xscript.XOpcode IMPORT;
  public static final xscript.XOpcode IMPORT_SAVE;
  public static final xscript.XOpcode SWITCH;
  public static final xscript.XOpcode END_FINALLY;
  public static final xscript.XOpcode SUPER;
  public static xscript.XOpcode[] values();
  public static xscript.XOpcode valueOf(java.lang.String);
  public int getStackChange();
  public int getStackChange(int);
  xscript.XOpcode(java.lang.String, int, int, xscript.XOpcode$1);
  static {};
}
Compiled from "XOpcode.java"
final class xscript.XOpcode$1 extends xscript.XOpcode {
  xscript.XOpcode$1(java.lang.String, int, int);
  public int getStackChange(int);
}
Compiled from "XOpcode.java"
final class xscript.XOpcode$2 extends xscript.XOpcode {
  xscript.XOpcode$2(java.lang.String, int, int);
  public int getStackChange(int);
}
Compiled from "XOpcode.java"
final class xscript.XOpcode$3 extends xscript.XOpcode {
  xscript.XOpcode$3(java.lang.String, int, int);
  public int getStackChange(int);
}
Compiled from "XOpcode.java"
final class xscript.XOpcode$4 extends xscript.XOpcode {
  xscript.XOpcode$4(java.lang.String, int, int);
  public int getStackChange(int);
}
Compiled from "XRuntimeException.java"
public class xscript.XRuntimeException extends java.lang.RuntimeException {
  public xscript.XRuntimeException(java.lang.String, java.lang.String, java.lang.Object...);
  public java.lang.String getType();
  public java.lang.String toString();
}
Compiled from "XRuntimeScriptException.java"
public class xscript.XRuntimeScriptException extends java.lang.RuntimeException {
  public xscript.XRuntimeScriptException(xscript.XScriptException);
}
Compiled from "XScriptEngine.java"
public class xscript.XScriptEngine extends javax.script.AbstractScriptEngine implements javax.script.Invocable,java.io.Externalizable,xscript.object.XRuntime,java.lang.Runnable {
  public xscript.XScriptEngine();
  public xscript.XScriptEngine(xscript.XScriptEngineFactory);
  public java.lang.Object eval(java.lang.String, javax.script.ScriptContext) throws javax.script.ScriptException;
  public java.lang.Object eval(java.io.Reader, javax.script.ScriptContext) throws javax.script.ScriptException;
  public javax.script.Bindings createBindings();
  public javax.script.ScriptEngineFactory getFactory();
  public java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object...) throws javax.script.ScriptException, java.lang.NoSuchMethodException;
  public java.lang.Object invokeMethod(java.lang.Object, int, java.lang.String, java.lang.Object...) throws javax.script.ScriptException, java.lang.NoSuchMethodException;
  public java.lang.Object invokeFunction(java.lang.String, java.lang.Object...) throws javax.script.ScriptException, java.lang.NoSuchMethodException;
  public java.lang.Object invokeFunction(java.lang.String, int, java.lang.Object...) throws javax.script.ScriptException, java.lang.NoSuchMethodException;
  public xscript.values.XValue getModule(java.lang.String);
  public void run();
  public void run(int, int);
  public <T> T getInterface(java.lang.Class<T>);
  public <T> T getInterface(java.lang.Object, java.lang.Class<T>);
  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public xscript.values.XValue getBaseType(int);
  public xscript.object.XObject getObject(int);
  public xscript.object.XObject getObject(xscript.values.XValue);
  public boolean delete(xscript.object.XObject);
  public xscript.values.XValue alloc(xscript.values.XValue);
  public xscript.values.XValue alloc(xscript.values.XValue, java.lang.Object...);
  public xscript.values.XValue alloc(java.lang.String);
  public xscript.values.XValue createTuple(java.util.List<xscript.values.XValue>);
  public xscript.values.XValue createTuple(xscript.values.XValue...);
  public xscript.values.XValue createList(java.util.List<xscript.values.XValue>);
  public xscript.values.XValue createMap(java.util.Map<java.lang.String, xscript.values.XValue>);
  public xscript.object.XFunctionData getFunction(java.lang.String);
  public void addNativeMethod(java.lang.String, xscript.object.XFunctionData);
  public xscript.values.XValue createFunction(java.lang.String);
  public void gc();
  public long getTime();
  public xscript.values.XValue getBuiltinModule();
  public xscript.object.XConstPoolImpl loadModule(java.lang.String);
  public byte[] compile(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.io.Reader, javax.tools.DiagnosticListener<java.lang.String>, boolean);
  public boolean doInit();
  public xscript.values.XValue tryImportModule(java.lang.String);
  public java.io.PrintStream getOut();
  public java.io.PrintStream getErr();
  public java.io.InputStream getIn();
  public void exit(int);
  public boolean isRunning();
  public boolean hasThreads();
  public xscript.object.XConstPool loadModule(java.lang.String);
}
Compiled from "XScriptEngine.java"
class xscript.XScriptEngine$1 {
  static final int[] $SwitchMap$xscript$XExec$State;
  static {};
}
Compiled from "XScriptEngine.java"
class xscript.XScriptEngine$Save implements java.io.Serializable,java.io.Externalizable {
  xscript.XScriptEngine$Save();
  xscript.XScriptEngine$Save(xscript.XScriptEngine);
  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
}
Compiled from "XScriptEngineFactory.java"
public class xscript.XScriptEngineFactory implements javax.script.ScriptEngineFactory {
  public static xscript.XScriptEngineFactory getDefaultEngineFactory();
  public static void setDefaultEngineFactory(xscript.XScriptEngineFactory);
  public xscript.XScriptEngineFactory();
  public java.lang.String getEngineName();
  public java.lang.String getEngineVersion();
  public java.util.List<java.lang.String> getExtensions();
  public java.lang.String getLanguageName();
  public java.lang.String getLanguageVersion();
  public java.lang.String getMethodCallSyntax(java.lang.String, java.lang.String, java.lang.String...);
  public java.util.List<java.lang.String> getMimeTypes();
  public java.util.List<java.lang.String> getNames();
  public java.lang.String getOutputStatement(java.lang.String);
  public java.lang.Object getParameter(java.lang.String);
  public java.lang.String getProgram(java.lang.String...);
  public javax.script.ScriptEngine getScriptEngine();
  static {};
}
Compiled from "XScriptException.java"
public class xscript.XScriptException extends javax.script.ScriptException {
  public xscript.XScriptException();
  public xscript.XScriptException(java.lang.String);
  public xscript.XScriptException(java.lang.String, java.lang.String);
  public xscript.XScriptException(java.lang.String, java.lang.String, int);
  public xscript.XScriptException(java.lang.Throwable);
  public xscript.XScriptException(java.lang.String, java.lang.Throwable);
  public xscript.XScriptException(java.lang.String, java.lang.String, java.lang.Throwable);
  public xscript.XScriptException(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public java.lang.String getFileName();
  public int getLineNumber();
  public java.lang.String getMessage();
  public synchronized java.lang.Throwable getCause();
}
Compiled from "XScriptLang.java"
public final class xscript.XScriptLang {
  public static final java.lang.String ENGINE_NAME;
  public static final java.lang.String ENGINE_VERSION;
  public static final int ENGINE_VERSION_INT;
  public static final java.util.List<java.lang.String> EXTENSIONS;
  public static final java.lang.String LANG_NAME;
  public static final java.lang.String LANG_VERSION;
  public static final java.util.List<java.lang.String> MIME_TYPES;
  public static final java.util.List<java.lang.String> NAMES;
  public static final java.lang.String ENGINE_ATTR_SOURCE_FILE;
  public static final java.lang.String ENGINE_ATTR_FUNCTIONS_BINDING;
  public static final java.lang.String ENGINE_ATTR_COMPILER_MAP;
  public static final java.lang.String ENGINE_ATTR_FILE_SYSTEM;
  public static final java.lang.String ENGINE_ATTR_FILE_SYSTEM_ROOTS;
  public static final java.lang.String ENGINE_ATTR_OUT;
  public static final java.lang.String ENGINE_ATTR_ERR;
  public static final java.lang.String ENGINE_ATTR_IN;
  public static final java.lang.String ENGINE_ATTR_INTERACTIVE;
  public static final java.lang.String ENGINE_ATTR_INSTS_TO_RUN_ON_DIRECT_INVOKE;
  public static final java.lang.String ENGINE_ATTR_TIMEOUT_DIRECT_INVOKE;
  public static final java.lang.String ENGINE_ATTR_INSTS_TO_RUN_ON_BLOCK;
  public static final java.lang.String ENGINE_ATTR_BLOCKS_TO_RUN_ON_INVOKE;
  public static final java.lang.String ENGINE_ATTR_EXIT_STATE;
  public static final java.lang.String COMPILER_OPT_COMPILER;
  public static final java.lang.String COMPILER_OPT_REMOVE_LINES;
  public static final java.lang.String COMPILER_OPT_REMOVE_ASSERTS;
  public static final java.lang.String COMPILER_OPT_OPTIMIZATION_LEVEL;
  static {};
}
Compiled from "XStaticInvocationHandler.java"
class xscript.XStaticInvocationHandler implements java.lang.reflect.InvocationHandler {
  public xscript.XStaticInvocationHandler(xscript.XScriptEngine);
  public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable;
}
Compiled from "XUtils.java"
public class xscript.XUtils {
  public static final int NULL;
  public static final int BOOL;
  public static final int NUMBER;
  public static final int INT;
  public static final int FLOAT;
  public static final int FUNC;
  public static final int LIST;
  public static final int NATIVE_FUNC;
  public static final int STRING;
  public static final int TUPLE;
  public static final int TYPE;
  public static final int OBJECT;
  public static final int MAP;
  public static final int WEAK_REF;
  public static final int MODULE;
  public static final int CONST_POOL;
  public static final int NUM_BASE_TYPES;
  public xscript.XUtils();
  public static xscript.values.XValue lookupTry(xscript.object.XRuntime, xscript.values.XValue, java.lang.String, int);
  public static xscript.values.XValue lookup(xscript.object.XRuntime, xscript.values.XValue, java.lang.String, int);
  public static xscript.values.XValue set(xscript.object.XRuntime, xscript.values.XValue, java.lang.String, xscript.values.XValue, int);
  public static xscript.values.XValue del(xscript.object.XRuntime, xscript.values.XValue, java.lang.String, int);
  public static xscript.values.XValue getDeclaring(xscript.object.XRuntime, xscript.values.XValue, java.lang.String, int);
  public static boolean isOverwritten(xscript.object.XRuntime, xscript.values.XValue, java.lang.String);
  public static java.util.List<xscript.values.XValue> asList(xscript.object.XRuntime, xscript.values.XValue);
  public static void putAtMapItem(xscript.object.XRuntime, xscript.values.XValue, java.lang.String, xscript.values.XValue);
  public static java.lang.String getString(xscript.object.XRuntime, xscript.values.XValue);
  public static <T> T getDataAs(xscript.object.XRuntime, xscript.values.XValue, java.lang.Class<T>);
  public static xscript.object.XObjectData getData(xscript.object.XRuntime, xscript.values.XValue);
  public static boolean isInstanceOf(xscript.object.XRuntime, xscript.values.XValue, xscript.values.XValue);
  public static boolean isDerivedOf(xscript.object.XRuntime, xscript.values.XValue, xscript.values.XValue);
  public static void rethrow(java.lang.Throwable);
  public static xscript.values.XValue[] wrap(xscript.object.XRuntime, java.lang.Object[]);
  public static xscript.values.XValue wrap(xscript.object.XRuntime, java.lang.Object);
  public static javax.script.ScriptException getException(xscript.object.XRuntime, xscript.values.XValue);
  public static xscript.values.XValue valide(xscript.values.XValue);
  public static void throwException(xscript.object.XRuntime, xscript.values.XValue) throws javax.script.ScriptException;
  public static void check(xscript.object.XRuntime, xscript.values.XValue, xscript.values.XValue);
  public static void check(xscript.object.XRuntime, xscript.values.XValue, int);
  public static xscript.values.XValue convertStackTrace(xscript.object.XRuntime, java.lang.StackTraceElement[]);
  public static java.util.List<java.lang.String> dir(xscript.object.XRuntime, xscript.values.XValue);
}
Compiled from "XClassAttr.java"
public class xscript.compiler.XClassAttr extends xscript.compiler.XVar {
  public xscript.compiler.XClassAttr(xscript.compiler.tree.XTree, java.lang.String, xscript.compiler.XVar);
  public xscript.compiler.XVar getAccess();
}
Compiled from "XClosureVar.java"
public class xscript.compiler.XClosureVar extends xscript.compiler.XVar {
  public xscript.compiler.XVar base;
  public xscript.compiler.XVar var;
  public xscript.compiler.XClosureVar(xscript.compiler.XVar);
  public int getPosition();
  public java.lang.String toString();
}
Compiled from "XCodeGen.java"
public class xscript.compiler.XCodeGen {
  protected java.util.List<xscript.compiler.inst.XInst> instructions;
  protected int stack;
  protected int stackstart;
  public xscript.compiler.XCodeGen();
  public xscript.compiler.XCodeGen(int);
  public void addInstruction(xscript.compiler.tree.XTree, xscript.XOpcode);
  public void addInstruction(xscript.compiler.tree.XTree, xscript.XOpcode, int);
  public void addInstructionB(xscript.compiler.tree.XTree, xscript.XOpcode, int);
  public void addInstruction(xscript.compiler.tree.XTree, xscript.XOpcode, xscript.compiler.XJumpTarget);
  public void addInstruction(xscript.compiler.tree.XTree, xscript.XOpcode, java.lang.String);
  public void addInstruction(xscript.compiler.tree.XTree, xscript.compiler.XVar);
  public void addInstruction2(xscript.compiler.tree.XTree, xscript.XOpcode, xscript.compiler.XVar);
  public void addInstruction(xscript.compiler.tree.XTree, java.lang.String[], int, int, int);
  public void addInstruction(xscript.compiler.tree.XTree, xscript.compiler.XJumpTarget);
  public void addInstruction(xscript.compiler.inst.XInst);
  public void addInstructions(xscript.compiler.XCodeGen);
  public int resolve(xscript.compiler.inst.XInst);
  public void tryWay(int, int, int[]);
  public void generateFinalCode(xscript.compiler.XCompilerOptions);
  public xscript.compiler.inst.XInst[] getInstructions();
  public boolean isEmpty();
  public java.util.List<xscript.compiler.inst.XInst> getInstructionList();
  public void getCode(xscript.compiler.XDataOutput, xscript.compiler.XCompilerOptions);
  static void access$100(xscript.compiler.XCodeGen, xscript.compiler.inst.XInst, xscript.compiler.inst.XInst);
  static void access$200(xscript.compiler.XCodeGen, xscript.compiler.inst.XInst);
}
Compiled from "XCodeGen.java"
class xscript.compiler.XCodeGen$1 {
}
Compiled from "XCodeGen.java"
class xscript.compiler.XCodeGen$ListWrapper extends java.util.AbstractList<xscript.compiler.inst.XInst> {
  final xscript.compiler.XCodeGen this$0;
  public xscript.compiler.inst.XInst get(int);
  public int size();
  public boolean add(xscript.compiler.inst.XInst);
  public xscript.compiler.inst.XInst set(int, xscript.compiler.inst.XInst);
  public void add(int, xscript.compiler.inst.XInst);
  public xscript.compiler.inst.XInst remove(int);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public void clear();
  public boolean addAll(int, java.util.Collection<? extends xscript.compiler.inst.XInst>);
  public boolean contains(java.lang.Object);
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public boolean remove(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public java.lang.String toString();
  public java.lang.Object remove(int);
  public void add(int, java.lang.Object);
  public java.lang.Object set(int, java.lang.Object);
  public java.lang.Object get(int);
  public boolean add(java.lang.Object);
  xscript.compiler.XCodeGen$ListWrapper(xscript.compiler.XCodeGen, xscript.compiler.XCodeGen$1);
}
Compiled from "XCompiledPart.java"
public class xscript.compiler.XCompiledPart {
  protected xscript.compiler.tree.XTree t;
  public xscript.compiler.XCompiledPart(xscript.compiler.tree.XTree);
  public xscript.compiler.XCompiledPart asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public int setup(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public int setupAndGetThis(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart setupAndGet(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart set(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart del(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public boolean isConstValue();
  public java.lang.Object getConst();
  public boolean isFalse();
  public boolean isDead();
  public xscript.compiler.XCompiledPart setDead(boolean);
}
Compiled from "XCompiledPartAttr.java"
public class xscript.compiler.XCompiledPartAttr extends xscript.compiler.XCompiledPart {
  public xscript.compiler.XCompiledPartAttr(xscript.compiler.tree.XTree, xscript.compiler.XCompiledPart, java.lang.String);
  public xscript.compiler.XCompiledPartAttr asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public int setup(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public int setupAndGetThis(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPartAttr get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPartAttr set(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPartAttr del(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart del(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart set(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
}
Compiled from "XCompiledPartCall.java"
public class xscript.compiler.XCompiledPartCall extends xscript.compiler.XCompiledPart {
  public xscript.compiler.XCompiledPartCall(xscript.compiler.tree.XTree, xscript.compiler.XCompiledPart, xscript.compiler.XCompiledPart[], java.lang.String[], int, int);
  public xscript.compiler.XCompiledPart asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public int setup(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart set(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart del(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
}
Compiled from "XCompiledPartCode.java"
public class xscript.compiler.XCompiledPartCode extends xscript.compiler.XCompiledPart {
  public xscript.compiler.XCompiledPartCode(xscript.compiler.tree.XTree);
  public xscript.compiler.XCompiledPartCode asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCodeGen getCode();
  public xscript.compiler.XCompiledPart asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
}
Compiled from "XCompiledPartCodeExpr.java"
public class xscript.compiler.XCompiledPartCodeExpr extends xscript.compiler.XCompiledPart {
  public xscript.compiler.XCompiledPartCodeExpr(xscript.compiler.tree.XTree);
  public xscript.compiler.XCompiledPartCodeExpr asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCodeGen getCode();
  public xscript.compiler.XCompiledPart asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
}
Compiled from "XCompiledPartConst.java"
public class xscript.compiler.XCompiledPartConst extends xscript.compiler.XCompiledPart {
  public xscript.compiler.XCompiledPartConst(xscript.compiler.tree.XTree, java.lang.Object);
  public xscript.compiler.XCompiledPartConst get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public boolean isConstValue();
  public java.lang.Object getConst();
  public xscript.compiler.XCompiledPart get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
}
Compiled from "XCompiledPartIndex.java"
public class xscript.compiler.XCompiledPartIndex extends xscript.compiler.XCompiledPart {
  public xscript.compiler.XCompiledPartIndex(xscript.compiler.tree.XTree, xscript.compiler.XCompiledPart, xscript.compiler.XCompiledPart);
  public xscript.compiler.XCompiledPart asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public int setupAndGetThis(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public int setup(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart set(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart del(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
}
Compiled from "XCompiledPartTupel.java"
public class xscript.compiler.XCompiledPartTupel extends xscript.compiler.XCompiledPart {
  public xscript.compiler.XCompiledPartTupel(xscript.compiler.tree.XTree, xscript.compiler.XCompiledPart[]);
  public xscript.compiler.XCompiledPart asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
}
Compiled from "XCompiledPartVar.java"
public class xscript.compiler.XCompiledPartVar extends xscript.compiler.XCompiledPart {
  public xscript.compiler.XCompiledPartVar(xscript.compiler.tree.XTree, xscript.compiler.scopes.XScope, xscript.compiler.tree.XTree$XTreeIdent, xscript.compiler.XVarAccess);
  public xscript.compiler.XCompiledPart asStatement(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public int setup(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public int setupAndGetThis(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public static void getVar(xscript.compiler.tree.XTree, xscript.compiler.XVar, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart get(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart set(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public xscript.compiler.XCompiledPart del(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
  public boolean isConstValue();
  public java.lang.Object getConst();
  public boolean isFalse();
  public boolean setup2(xscript.compiler.XTreeCompiler, xscript.compiler.XCodeGen);
}
Compiled from "XCompiledPartVar.java"
class xscript.compiler.XCompiledPartVar$1 {
  static final int[] $SwitchMap$xscript$compiler$scopes$XScope$Result$R;
  static {};
}
Compiled from "XCompiler.java"
public interface xscript.compiler.XCompiler {
  public abstract byte[] compile(java.util.Map<java.lang.String, java.lang.Object>, xscript.compiler.XFileReader, javax.tools.DiagnosticListener<java.lang.String>, boolean);
}
Compiled from "XCompilerOptions.java"
public class xscript.compiler.XCompilerOptions {
  public static final java.lang.String COMPILER_OPT_REMOVE_LINES;
  public static final java.lang.String COMPILER_OPT_REMOVE_ASSERTS;
  public static final java.lang.String COMPILER_OPT_OPTIMIZATION_LEVEL;
  public boolean removeLines;
  public int optimizionLevel;
  public boolean removeAsserts;
  public xscript.compiler.XCompilerOptions();
  public void from(java.util.Map<java.lang.String, java.lang.Object>);
}
Compiled from "XDataOutput.java"
public class xscript.compiler.XDataOutput implements java.io.DataOutput {
  public xscript.compiler.XDataOutput();
  public void write(int);
  public void write(byte[]) throws java.io.IOException;
  public void write(byte[], int, int);
  public void writeBoolean(boolean);
  public void writeByte(int);
  public void writeBytes(java.lang.String) throws java.io.IOException;
  public void writeChar(int);
  public void writeChars(java.lang.String);
  public void writeDouble(double);
  public void writeFloat(float);
  public void writeInt(int);
  public void writeLong(long);
  public void writeShort(int);
  public void writeUTF(java.lang.String);
  public byte[] toByteArray(xscript.compiler.XCodeGen, xscript.compiler.XCompilerOptions);
  public void writeCode(xscript.compiler.XCodeGen);
}
Compiled from "XDiagnostic.java"
public class xscript.compiler.XDiagnostic implements javax.tools.Diagnostic<java.lang.String> {
  public xscript.compiler.XDiagnostic(xscript.compiler.XPosition, java.lang.String, java.lang.Object...);
  public xscript.compiler.XDiagnostic(xscript.compiler.XPosition, long, java.lang.String, java.lang.Object...);
  public xscript.compiler.XDiagnostic(xscript.compiler.XPosition, long, long, java.lang.String, java.lang.Object...);
  public void setEnd(long);
  public java.lang.String getCode();
  public long getColumnNumber();
  public long getEndPosition();
  public javax.tools.Diagnostic$Kind getKind();
  public long getLineNumber();
  public java.lang.String getMessage(java.util.Locale);
  public long getPosition();
  public java.lang.String getSource();
  public long getStartPosition();
  public java.lang.String toString();
  public java.lang.Object[] getArgs();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.util.logging.LogRecord asLogRecord();
  public java.lang.Object getSource();
  static {};
}
Compiled from "XDiagnostic.java"
class xscript.compiler.XDiagnostic$1 {
  static final int[] $SwitchMap$javax$tools$Diagnostic$Kind;
  static {};
}
Compiled from "XFileReader.java"
public class xscript.compiler.XFileReader extends java.io.Reader {
  public xscript.compiler.XFileReader(java.lang.String, java.io.Reader);
  public xscript.compiler.XPosition getPosition();
  public int read();
  public int read(char[], int, int) throws java.io.IOException;
  public void close() throws java.io.IOException;
}
Compiled from "XGlobal.java"
public class xscript.compiler.XGlobal extends xscript.compiler.XVar {
  public xscript.compiler.XGlobal(xscript.compiler.tree.XTree, java.lang.String);
}
Compiled from "XInternCompiler.java"
public class xscript.compiler.XInternCompiler implements xscript.compiler.XCompiler {
  public static final xscript.compiler.XInternCompiler COMPILER;
  public static final java.lang.String VERSION;
  public byte[] compile(java.util.Map<java.lang.String, java.lang.Object>, xscript.compiler.XFileReader, javax.tools.DiagnosticListener<java.lang.String>, boolean);
  static {};
}
Compiled from "XJump.java"
public class xscript.compiler.XJump {
  public xscript.compiler.XJump();
  public void gen(xscript.compiler.tree.XTree, xscript.compiler.XCodeGen);
  public void genRet(xscript.compiler.tree.XTree, xscript.compiler.XCodeGen);
  public void addFinally(xscript.compiler.XJumpTarget);
  public void setTarget(xscript.compiler.XJumpTarget);
  public int getPops();
  public void addPops(int);
}
Compiled from "XJumpTarget.java"
public class xscript.compiler.XJumpTarget {
  public xscript.compiler.inst.XInst target;
  public xscript.compiler.XJumpTarget();
  public void addJump();
  public int jumps();
  public boolean is(xscript.compiler.inst.XInst);
  public int resolve(xscript.compiler.XCodeGen);
  public void replace(xscript.compiler.inst.XInst, xscript.compiler.inst.XInst);
  public int resolve(java.util.List<xscript.compiler.inst.XInst>);
}
Compiled from "XLabel.java"
public class xscript.compiler.XLabel {
  public java.lang.String name;
  public int uses;
  public xscript.compiler.XLabel(java.lang.String);
}
Compiled from "XOperator.java"
public class xscript.compiler.XOperator extends java.lang.Enum<xscript.compiler.XOperator> {
  public static final xscript.compiler.XOperator NONE;
  public static final xscript.compiler.XOperator ADD;
  public static final xscript.compiler.XOperator SUB;
  public static final xscript.compiler.XOperator MUL;
  public static final xscript.compiler.XOperator DIV;
  public static final xscript.compiler.XOperator IDIV;
  public static final xscript.compiler.XOperator MOD;
  public static final xscript.compiler.XOperator POW;
  public static final xscript.compiler.XOperator SHR;
  public static final xscript.compiler.XOperator ISHR;
  public static final xscript.compiler.XOperator SHL;
  public static final xscript.compiler.XOperator POS;
  public static final xscript.compiler.XOperator NEG;
  public static final xscript.compiler.XOperator BOR;
  public static final xscript.compiler.XOperator BAND;
  public static final xscript.compiler.XOperator XOR;
  public static final xscript.compiler.XOperator OR;
  public static final xscript.compiler.XOperator AND;
  public static final xscript.compiler.XOperator NOT;
  public static final xscript.compiler.XOperator BNOT;
  public static final xscript.compiler.XOperator EQ;
  public static final xscript.compiler.XOperator REQ;
  public static final xscript.compiler.XOperator NEQ;
  public static final xscript.compiler.XOperator RNEQ;
  public static final xscript.compiler.XOperator BIG;
  public static final xscript.compiler.XOperator BEQ;
  public static final xscript.compiler.XOperator SMA;
  public static final xscript.compiler.XOperator SEQ;
  public static final xscript.compiler.XOperator COMP;
  public static final xscript.compiler.XOperator LET;
  public static final xscript.compiler.XOperator LETADD;
  public static final xscript.compiler.XOperator LETSUB;
  public static final xscript.compiler.XOperator LETMUL;
  public static final xscript.compiler.XOperator LETPOW;
  public static final xscript.compiler.XOperator LETDIV;
  public static final xscript.compiler.XOperator LETIDIV;
  public static final xscript.compiler.XOperator LETMOD;
  public static final xscript.compiler.XOperator LETOR;
  public static final xscript.compiler.XOperator LETAND;
  public static final xscript.compiler.XOperator LETXOR;
  public static final xscript.compiler.XOperator LETSHR;
  public static final xscript.compiler.XOperator LETSHL;
  public static final xscript.compiler.XOperator LETISHR;
  public static final xscript.compiler.XOperator COPY;
  public static final xscript.compiler.XOperator INC;
  public static final xscript.compiler.XOperator DEC;
  public static final xscript.compiler.XOperator INCS;
  public static final xscript.compiler.XOperator DECS;
  public static final xscript.compiler.XOperator COPYS;
  public static final xscript.compiler.XOperator ELEMENT;
  public static final xscript.compiler.XOperator IF;
  public static final xscript.compiler.XOperator COMMA;
  public static final xscript.compiler.XOperator UNPACKLIST;
  public static final xscript.compiler.XOperator UNPACKMAP;
  public static final boolean[] L2R;
  public final java.lang.String op;
  public final xscript.compiler.XOperator$Type type;
  public final int priority;
  public final boolean canBeOverwritten;
  public final xscript.XOpcode opcode;
  public static xscript.compiler.XOperator[] values();
  public static xscript.compiler.XOperator valueOf(java.lang.String);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
  xscript.compiler.XOperator(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode, xscript.compiler.XOperator$1);
  xscript.compiler.XOperator(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, boolean, xscript.XOpcode, xscript.compiler.XOperator$1);
  static {};
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$1 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$1(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$10 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$10(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$11 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$11(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$12 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$12(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$13 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$13(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$14 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$14(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$15 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$15(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$16 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$16(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$17 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$17(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$18 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$18(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$19 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$19(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$2 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$2(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$20 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$20(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, boolean, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$21 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$21(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$22 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$22(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, boolean, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$23 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$23(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$24 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$24(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$25 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$25(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$26 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$26(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$27 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$27(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$28 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$28(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$29 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$29(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$3 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$3(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$30 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$30(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$31 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$31(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$32 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$32(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$33 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$33(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$4 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$4(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$5 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$5(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$6 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$6(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$7 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$7(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$8 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$8(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
final class xscript.compiler.XOperator$9 extends xscript.compiler.XOperator {
  xscript.compiler.XOperator$9(java.lang.String, int, java.lang.String, xscript.compiler.XOperator$Type, int, xscript.XOpcode);
  public java.lang.Object calc(java.lang.Object, java.lang.Object);
}
Compiled from "XOperator.java"
public final class xscript.compiler.XOperator$Type extends java.lang.Enum<xscript.compiler.XOperator$Type> {
  public static final xscript.compiler.XOperator$Type PREFIX;
  public static final xscript.compiler.XOperator$Type INFIX;
  public static final xscript.compiler.XOperator$Type SUFFIX;
  public static xscript.compiler.XOperator$Type[] values();
  public static xscript.compiler.XOperator$Type valueOf(java.lang.String);
  static {};
}
Compiled from "XOptimizer.java"
public interface xscript.compiler.XOptimizer {
  public abstract boolean optimize(java.util.List<xscript.compiler.inst.XInst>);
}
Compiled from "XPosition.java"
public class xscript.compiler.XPosition implements java.lang.Cloneable {
  public java.lang.String source;
  public long pos;
  public int line;
  public int column;
  public xscript.compiler.XPosition(java.lang.String);
  public xscript.compiler.XPosition(java.lang.String, long, int, int);
  public xscript.compiler.XPosition clone();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "XTreeCompiler.java"
public class xscript.compiler.XTreeCompiler implements xscript.compiler.tree.XVisitor {
  public xscript.compiler.XTreeCompiler(javax.tools.DiagnosticListener<java.lang.String>, xscript.compiler.XCompilerOptions);
  public void visitError(xscript.compiler.tree.XTree$XTreeError);
  public void visitScope(xscript.compiler.tree.XTree$XTreeScope);
  public void visitClass(xscript.compiler.tree.XTree$XTreeClass);
  public void visitFunc(xscript.compiler.tree.XTree$XTreeFunc);
  public void visitModule(xscript.compiler.tree.XTree$XTreeModule);
  public void visitImportEntry(xscript.compiler.tree.XTree$XTreeImportEntry);
  public void visitImport(xscript.compiler.tree.XTree$XTreeImport);
  public void visitImportFrom(xscript.compiler.tree.XTree$XTreeImportFrom);
  public void visitIf(xscript.compiler.tree.XTree$XTreeIf);
  public void visitFor(xscript.compiler.tree.XTree$XTreeFor);
  public void visitForeach(xscript.compiler.tree.XTree$XTreeForeach);
  public void visitWhile(xscript.compiler.tree.XTree$XTreeWhile);
  public void visitDo(xscript.compiler.tree.XTree$XTreeDo);
  public void visitSynchronized(xscript.compiler.tree.XTree$XTreeSynchronized);
  public void visitBreak(xscript.compiler.tree.XTree$XTreeBreak);
  public void visitContinue(xscript.compiler.tree.XTree$XTreeContinue);
  public void visitReturn(xscript.compiler.tree.XTree$XTreeReturn);
  public void visitYield(xscript.compiler.tree.XTree$XTreeYield);
  public void visitThis(xscript.compiler.tree.XTree$XTreeThis);
  public void visitLabel(xscript.compiler.tree.XTree$XTreeLabel);
  public void visitSuper(xscript.compiler.tree.XTree$XTreeSuper);
  public void visitThrow(xscript.compiler.tree.XTree$XTreeThrow);
  public void visitAssert(xscript.compiler.tree.XTree$XTreeAssert);
  public void visitCatch(xscript.compiler.tree.XTree$XTreeCatch);
  public void visitTry(xscript.compiler.tree.XTree$XTreeTry);
  public void visitGroup(xscript.compiler.tree.XTree$XTreeGroup);
  public void visitOperator(xscript.compiler.tree.XTree$XTreeOperator);
  public void visitOperatorIf(xscript.compiler.tree.XTree$XTreeOperatorIf);
  public void visitOperatorPrefixSuffix(xscript.compiler.tree.XTree$XTreeOperatorPrefixSuffix);
  public void visitIdent(xscript.compiler.tree.XTree$XTreeIdent);
  public void visitIndex(xscript.compiler.tree.XTree$XTreeIndex);
  public void visitInstanceof(xscript.compiler.tree.XTree$XTreeInstanceof);
  public void visitIssubclass(xscript.compiler.tree.XTree$XTreeIssubclass);
  public void visitTypeof(xscript.compiler.tree.XTree$XTreeTypeof);
  public void visitSwitch(xscript.compiler.tree.XTree$XTreeSwitch);
  public void visitCase(xscript.compiler.tree.XTree$XTreeCase);
  public void visitConstant(xscript.compiler.tree.XTree$XTreeConstant);
  public void visitCall(xscript.compiler.tree.XTree$XTreeCall);
  public void visitMakeTuple(xscript.compiler.tree.XTree$XTreeMakeTuple);
  public void visitMakeList(xscript.compiler.tree.XTree$XTreeMakeList);
  public void visitMakeMap(xscript.compiler.tree.XTree$XTreeMakeMap);
  public void visitMapEntry(xscript.compiler.tree.XTree$XTreeMapEntry);
  public void visitEmpty(xscript.compiler.tree.XTree$XTreeEmpty);
  public void visitVarDecl(xscript.compiler.tree.XTree$XTreeVarDecl);
  public void visitVarDeclEntry(xscript.compiler.tree.XTree$XTreeVarDeclEntry);
  public void visitDelete(xscript.compiler.tree.XTree$XTreeDelete);
  void addDiagnostic(xscript.compiler.tree.XTree, java.lang.String, java.lang.Object...);
  public byte[] getBytes();
  public xscript.compiler.XCompiledPart compFuncBody(xscript.compiler.tree.XTree, xscript.compiler.scopes.XBaseScope);
}
Compiled from "XTreeCompiler.java"
class xscript.compiler.XTreeCompiler$1 {
  static final int[] $SwitchMap$xscript$compiler$scopes$XScope$Result$R;
  static {};
}
Compiled from "XTreePosition.java"
public class xscript.compiler.XTreePosition implements java.lang.Cloneable {
  public xscript.compiler.XPosition position;
  public long start;
  public long end;
  public xscript.compiler.XTreePosition(xscript.compiler.XPosition, long, long);
  public xscript.compiler.XTreePosition clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "XVar.java"
public class xscript.compiler.XVar {
  public xscript.compiler.tree.XTree t;
  public java.lang.String name;
  public int position;
  public boolean usedInClosure;
  public xscript.compiler.XVar(xscript.compiler.tree.XTree, java.lang.String);
  public java.lang.String toString();
}
Compiled from "XVarAccess.java"
public final class xscript.compiler.XVarAccess extends java.lang.Enum<xscript.compiler.XVarAccess> {
  public static final xscript.compiler.XVarAccess LOCAL;
  public static final xscript.compiler.XVarAccess NONLOCAL;
  public static final xscript.compiler.XVarAccess GLOBAL;
  public static final xscript.compiler.XVarAccess NONE;
  public static xscript.compiler.XVarAccess[] values();
  public static xscript.compiler.XVarAccess valueOf(java.lang.String);
  static {};
}
Compiled from "XVarUse.java"
public class xscript.compiler.XVarUse {
  public xscript.compiler.XVarUse(xscript.compiler.XVar);
  public xscript.compiler.XVarUse(xscript.compiler.XVarUse);
  public void setConst(java.lang.Object);
  public void setUnknownStateChangeable();
  public void setUnknownState();
  public boolean isConst();
  public java.lang.Object getConst();
  public boolean isInitialized();
  public void combine(xscript.compiler.XVarUse);
  public void combine(xscript.compiler.XVarUse, xscript.compiler.XVarUse);
  static {};
}
Compiled from "XVarWrite.java"
public class xscript.compiler.XVarWrite {
  public xscript.compiler.XVarWrite();
}
Compiled from "XWrapper.java"
final class xscript.compiler.XWrapper {
  public static boolean isLong(java.lang.Object);
  public static long asLong(java.lang.Object);
  public static boolean isNumber(java.lang.Object);
  public static double asNumber(java.lang.Object);
  public static boolean isString(java.lang.Object);
  public static java.lang.String asString(java.lang.Object);
  public static boolean isBool(java.lang.Object);
  public static boolean asBool(java.lang.Object);
}
Compiled from "XInst.java"
public class xscript.compiler.inst.XInst {
  protected xscript.XOpcode opcode;
  public int line;
  public xscript.compiler.inst.XInst(int, xscript.XOpcode);
  public void delInst(xscript.compiler.XCodeGen, java.util.List<xscript.compiler.inst.XInst>, xscript.compiler.inst.XInst);
  public boolean pointingTo(xscript.compiler.inst.XInst);
  public void resolve(xscript.compiler.XCodeGen, java.util.List<xscript.compiler.inst.XInst>);
  public xscript.compiler.inst.XInst replaceWith(xscript.compiler.XCodeGen, java.util.List<xscript.compiler.inst.XInst>);
  public void replace(xscript.compiler.XCodeGen, xscript.compiler.inst.XInst, xscript.compiler.inst.XInst, java.util.List<xscript.compiler.inst.XInst>);
  public void resolvePost(xscript.compiler.XCodeGen, java.util.List<xscript.compiler.inst.XInst>);
  public boolean isNormalJump();
  public boolean isAlwaysJump();
  public int getStackChange();
  public int tryWay(xscript.compiler.XCodeGen, int, int, int[]);
  public void toCode(xscript.compiler.XDataOutput);
  public java.lang.String toString();
  public xscript.XOpcode getOpcode();
  public int getSize();
  public void compileSubparts();
}
Compiled from "XInst1B.java"
public class xscript.compiler.inst.XInst1B extends xscript.compiler.inst.XInst {
  public int i;
  public xscript.compiler.inst.XInst1B(int, xscript.XOpcode, int);
  public void toCode(xscript.compiler.XDataOutput);
  public java.lang.String toString();
  public int getStackChange();
  public int getSize();
}
Compiled from "XInst1S.java"
public class xscript.compiler.inst.XInst1S extends xscript.compiler.inst.XInst {
  public xscript.compiler.inst.XInst1S(int, xscript.XOpcode, java.lang.String);
  public void toCode(xscript.compiler.XDataOutput);
  public java.lang.String toString();
  public int getSize();
}
Compiled from "XInst1Sh.java"
public class xscript.compiler.inst.XInst1Sh extends xscript.compiler.inst.XInst {
  public int i;
  public xscript.compiler.inst.XInst1Sh(int, xscript.XOpcode, int);
  public void toCode(xscript.compiler.XDataOutput);
  public java.lang.String toString();
  public int getStackChange();
  public int getSize();
}
Compiled from "XInstCall.java"
public class xscript.compiler.inst.XInstCall extends xscript.compiler.inst.XInst {
  public xscript.compiler.inst.XInstCall(int, java.lang.String[], int, int, int);
  public int getStackChange();
  public void toCode(xscript.compiler.XDataOutput);
  public int getSize();
  public java.lang.String toString();
}
Compiled from "XInstConst.java"
public class xscript.compiler.inst.XInstConst extends xscript.compiler.inst.XInst {
  public xscript.compiler.inst.XInstConst(int, java.lang.Object);
  public void toCode(xscript.compiler.XDataOutput);
  public java.lang.String toString();
  public int getSize();
}
Compiled from "XInstConst.java"
class xscript.compiler.inst.XInstConst$1 {
  static final int[] $SwitchMap$xscript$XOpcode;
  static {};
}
Compiled from "XInstDumyDel.java"
public class xscript.compiler.inst.XInstDumyDel extends xscript.compiler.inst.XInst {
  public xscript.compiler.inst.XInstDumyDel();
  public void toCode(xscript.compiler.XDataOutput);
  public int getSize();
}
Compiled from "XInstJump.java"
public class xscript.compiler.inst.XInstJump extends xscript.compiler.inst.XInst {
  public xscript.compiler.XJumpTarget target;
  public int resolved;
  public int resolved2;
  public xscript.compiler.inst.XInstJump(int, xscript.XOpcode, xscript.compiler.XJumpTarget);
  public boolean pointingTo(xscript.compiler.inst.XInst);
  public void resolve(xscript.compiler.XCodeGen, java.util.List<xscript.compiler.inst.XInst>);
  public boolean isNormalJump();
  public boolean isAlwaysJump();
  public int tryWay(xscript.compiler.XCodeGen, int, int, int[]);
  public void replace(xscript.compiler.XCodeGen, xscript.compiler.inst.XInst, xscript.compiler.inst.XInst, java.util.List<xscript.compiler.inst.XInst>);
  public void toCode(xscript.compiler.XDataOutput);
  public java.lang.String toString();
  public int getSize();
}
Compiled from "XInstLine.java"
public class xscript.compiler.inst.XInstLine extends xscript.compiler.inst.XInst {
  public xscript.compiler.inst.XInstLine(int);
  public void toCode(xscript.compiler.XDataOutput);
  public java.lang.String toString();
  public int getSize();
}
Compiled from "XInstMakeFunc.java"
public class xscript.compiler.inst.XInstMakeFunc extends xscript.compiler.inst.XInst {
  public xscript.compiler.inst.XInstMakeFunc(int, xscript.XOpcode, xscript.compiler.tree.XTree, java.lang.String, java.lang.String[], int, int, int, xscript.compiler.scopes.XBaseScope, xscript.compiler.XTreeCompiler);
  public void compileSubparts();
  public void toCode(xscript.compiler.XDataOutput);
  public java.lang.String toString();
  public int getSize();
}
Compiled from "XInstSwitch.java"
public class xscript.compiler.inst.XInstSwitch extends xscript.compiler.inst.XInst {
  public xscript.compiler.XJumpTarget _default;
  public xscript.compiler.inst.XInstSwitch(int);
  public boolean pointingTo(xscript.compiler.inst.XInst);
  public void resolve(xscript.compiler.XCodeGen, java.util.List<xscript.compiler.inst.XInst>);
  public void replace(xscript.compiler.XCodeGen, xscript.compiler.inst.XInst, xscript.compiler.inst.XInst, java.util.List<xscript.compiler.inst.XInst>);
  public boolean isNormalJump();
  public boolean isAlwaysJump();
  public int tryWay(xscript.compiler.XCodeGen, int, int, int[]);
  public void toCode(xscript.compiler.XDataOutput);
  public int getSize();
  public boolean putIfNonExist(java.lang.Object, xscript.compiler.XJumpTarget);
  static {};
}
Compiled from "XInstSwitch.java"
class xscript.compiler.inst.XInstSwitch$1 {
}
Compiled from "XInstSwitch.java"
class xscript.compiler.inst.XInstSwitch$DoubleComparator implements java.util.Comparator<java.lang.Number> {
  public int compare(java.lang.Number, java.lang.Number);
  public int compare(java.lang.Object, java.lang.Object);
  xscript.compiler.inst.XInstSwitch$DoubleComparator(xscript.compiler.inst.XInstSwitch$1);
}
Compiled from "XInstSwitch.java"
class xscript.compiler.inst.XInstSwitch$LongComparator implements java.util.Comparator<java.lang.Number> {
  public int compare(java.lang.Number, java.lang.Number);
  public int compare(java.lang.Object, java.lang.Object);
  xscript.compiler.inst.XInstSwitch$LongComparator(xscript.compiler.inst.XInstSwitch$1);
}
Compiled from "XInstVarDecl.java"
public class xscript.compiler.inst.XInstVarDecl extends xscript.compiler.inst.XInst {
  public xscript.compiler.inst.XInstVarDecl(int, xscript.compiler.XVar);
  public int tryWay(xscript.compiler.XCodeGen, int, int, int[]);
  public void toCode(xscript.compiler.XDataOutput);
  public int getSize();
  public java.lang.String toString();
}
Compiled from "XInstVarLookup.java"
public class xscript.compiler.inst.XInstVarLookup extends xscript.compiler.inst.XInst {
  public xscript.compiler.inst.XInstVarLookup(int, xscript.XOpcode, xscript.compiler.XVar);
  public void toCode(xscript.compiler.XDataOutput);
  public java.lang.String toString();
  public int getSize();
}
Compiled from "Main.java"
public class xscript.compiler.main.Main {
  public static void main(java.lang.String[]);
  public static int process(java.lang.String[]);
  void error(java.lang.String, java.lang.Object...);
  static xscript.executils.Log access$000(xscript.compiler.main.Main);
  static java.lang.String access$100(xscript.compiler.main.Main);
  static java.lang.String access$200(xscript.compiler.main.Main);
  static java.util.List access$300(xscript.compiler.main.Main);
  static java.io.File access$402(xscript.compiler.main.Main, java.io.File);
  static java.util.Map access$500(xscript.compiler.main.Main);
}
Compiled from "Main.java"
class xscript.compiler.main.Main$1 implements xscript.compiler.main.OptionHelper {
  final xscript.compiler.main.Main this$0;
  xscript.compiler.main.Main$1(xscript.compiler.main.Main);
  public xscript.executils.Log getLog();
  public java.lang.String getOwnName();
  public java.lang.String getCommandLine();
  public boolean addSourceDir(java.io.File);
  public boolean setOutputDir(java.io.File);
  public void error(java.lang.String, java.lang.Object...);
  public void putOption(java.lang.String, java.lang.String);
}
Compiled from "Main.java"
class xscript.compiler.main.Main$2 implements java.io.FileFilter {
  final java.util.regex.Pattern val$pattern;
  final xscript.compiler.main.Main this$0;
  xscript.compiler.main.Main$2(xscript.compiler.main.Main, java.util.regex.Pattern);
  public boolean accept(java.io.File);
}
Compiled from "Option.java"
abstract class xscript.compiler.main.Option extends java.lang.Enum<xscript.compiler.main.Option> {
  public static final xscript.compiler.main.Option O;
  public static final xscript.compiler.main.Option RL;
  public static final xscript.compiler.main.Option RA;
  public static final xscript.compiler.main.Option SOURCEPATH;
  public static final xscript.compiler.main.Option D;
  public static final xscript.compiler.main.Option VERSION;
  public static final xscript.compiler.main.Option HELP;
  public static xscript.compiler.main.Option[] values();
  public static xscript.compiler.main.Option valueOf(java.lang.String);
  abstract boolean process(xscript.compiler.main.OptionHelper, java.lang.String);
  void help(xscript.executils.Log);
  public boolean hasArg();
  public static xscript.compiler.main.Option getOption(java.lang.String);
  xscript.compiler.main.Option(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, xscript.compiler.main.Option$1);
  xscript.compiler.main.Option(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], xscript.compiler.main.Option$1);
  static {};
}
Compiled from "Option.java"
final class xscript.compiler.main.Option$1 extends xscript.compiler.main.Option {
  xscript.compiler.main.Option$1(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String);
  boolean process(xscript.compiler.main.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.compiler.main.Option$2 extends xscript.compiler.main.Option {
  xscript.compiler.main.Option$2(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String);
  boolean process(xscript.compiler.main.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.compiler.main.Option$3 extends xscript.compiler.main.Option {
  xscript.compiler.main.Option$3(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String);
  boolean process(xscript.compiler.main.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.compiler.main.Option$4 extends xscript.compiler.main.Option {
  xscript.compiler.main.Option$4(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String...);
  boolean process(xscript.compiler.main.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.compiler.main.Option$5 extends xscript.compiler.main.Option {
  xscript.compiler.main.Option$5(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String);
  boolean process(xscript.compiler.main.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.compiler.main.Option$6 extends xscript.compiler.main.Option {
  xscript.compiler.main.Option$6(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String...);
  boolean process(xscript.compiler.main.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.compiler.main.Option$7 extends xscript.compiler.main.Option {
  xscript.compiler.main.Option$7(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String...);
  boolean process(xscript.compiler.main.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.compiler.main.Option$Options {
  static final java.util.Map<java.lang.String, xscript.compiler.main.Option> OPTIONS;
  static {};
}
Compiled from "OptionHelper.java"
interface xscript.compiler.main.OptionHelper {
  public abstract xscript.executils.Log getLog();
  public abstract java.lang.String getOwnName();
  public abstract java.lang.String getCommandLine();
  public abstract boolean addSourceDir(java.io.File);
  public abstract boolean setOutputDir(java.io.File);
  public abstract void error(java.lang.String, java.lang.Object...);
  public abstract void putOption(java.lang.String, java.lang.String);
}
Compiled from "XOptimizerCombinePop.java"
public class xscript.compiler.optimizers.XOptimizerCombinePop implements xscript.compiler.XOptimizer {
  public xscript.compiler.optimizers.XOptimizerCombinePop();
  public boolean optimize(java.util.List<xscript.compiler.inst.XInst>);
}
Compiled from "XOptimizerDeleteDeadCode.java"
public class xscript.compiler.optimizers.XOptimizerDeleteDeadCode implements xscript.compiler.XOptimizer {
  public xscript.compiler.optimizers.XOptimizerDeleteDeadCode();
  public boolean optimize(java.util.List<xscript.compiler.inst.XInst>);
}
Compiled from "XOptimizerRemoveUnusedStackLine.java"
public class xscript.compiler.optimizers.XOptimizerRemoveUnusedStackLine implements xscript.compiler.XOptimizer {
  public xscript.compiler.optimizers.XOptimizerRemoveUnusedStackLine();
  public boolean optimize(java.util.List<xscript.compiler.inst.XInst>);
}
Compiled from "XToken.java"
public class xscript.compiler.parser.XToken {
  public xscript.compiler.parser.XTokenKind kind;
  public xscript.compiler.XPosition pos;
  public long end;
  public int spaces;
  public int newLines;
  public java.lang.Object data;
  public java.lang.String doc;
  public xscript.compiler.parser.XToken(xscript.compiler.parser.XTokenKind, xscript.compiler.XPosition, long, int, int, java.lang.Object, java.lang.String);
  public java.lang.String toString();
}
Compiled from "XToken.java"
class xscript.compiler.parser.XToken$1 {
  static final int[] $SwitchMap$xscript$compiler$parser$XTokenKind;
  static {};
}
Compiled from "XTokenKind.java"
public final class xscript.compiler.parser.XTokenKind extends java.lang.Enum<xscript.compiler.parser.XTokenKind> {
  public static final xscript.compiler.parser.XTokenKind EOF;
  public static final xscript.compiler.parser.XTokenKind STRING;
  public static final xscript.compiler.parser.XTokenKind INT;
  public static final xscript.compiler.parser.XTokenKind FLOAT;
  public static final xscript.compiler.parser.XTokenKind IDENT;
  public static final xscript.compiler.parser.XTokenKind KEYWORD;
  public static xscript.compiler.parser.XTokenKind[] values();
  public static xscript.compiler.parser.XTokenKind valueOf(java.lang.String);
  static {};
}
Compiled from "XTokenizer.java"
public class xscript.compiler.parser.XTokenizer implements java.util.Iterator<xscript.compiler.parser.XToken> {
  public xscript.compiler.parser.XTokenizer(xscript.compiler.XFileReader, javax.tools.DiagnosticListener<java.lang.String>);
  public xscript.compiler.parser.XToken getToken();
  public xscript.compiler.parser.XToken next();
  public boolean hasNext();
  public void remove();
  public void mark();
  public void apply();
  public void reset();
  public java.lang.Object next();
}
Compiled from "XBaseScope.java"
public class xscript.compiler.scopes.XBaseScope extends xscript.compiler.scopes.XScope {
  public xscript.compiler.scopes.XBaseScope(xscript.compiler.scopes.XScope, boolean);
  xscript.compiler.scopes.XBaseScope(xscript.compiler.scopes.XBaseScope);
  xscript.compiler.scopes.XBaseScope();
  protected void addClosure(xscript.compiler.XClosureVar);
  public java.util.List<xscript.compiler.XClosureVar> getClosures();
  public xscript.compiler.scopes.XScope lock();
}
Compiled from "XClassScope.java"
public class xscript.compiler.scopes.XClassScope extends xscript.compiler.scopes.XScope {
  public xscript.compiler.scopes.XClassScope(xscript.compiler.scopes.XScope, xscript.compiler.XVar);
  public xscript.compiler.scopes.XClassScope(xscript.compiler.scopes.XClassScope);
  protected xscript.compiler.XVar create(xscript.compiler.tree.XTree, java.lang.String);
  public xscript.compiler.XVar getClasz();
  public xscript.compiler.scopes.XScope lock();
}
Compiled from "XFinallyScope.java"
public class xscript.compiler.scopes.XFinallyScope extends xscript.compiler.scopes.XScope {
  public xscript.compiler.scopes.XFinallyScope();
  public xscript.compiler.scopes.XFinallyScope(xscript.compiler.scopes.XScope, xscript.compiler.XJumpTarget);
  protected boolean getJumpTarget(java.lang.String, int, xscript.compiler.XJump);
  public xscript.compiler.scopes.XScope lock();
}
Compiled from "XModuleScope.java"
public class xscript.compiler.scopes.XModuleScope extends xscript.compiler.scopes.XBaseScope {
  public xscript.compiler.scopes.XModuleScope();
  protected xscript.compiler.XVar create(xscript.compiler.tree.XTree, java.lang.String);
  public xscript.compiler.XGlobal getOrCreateGlobal(xscript.compiler.tree.XTree, java.lang.String);
  public boolean getJump(java.lang.String, int, xscript.compiler.XJump);
  public int getLocalsCount();
  public xscript.compiler.scopes.XScope lock();
}
Compiled from "XScope.java"
public class xscript.compiler.scopes.XScope {
  protected final xscript.compiler.scopes.XModuleScope module;
  protected final xscript.compiler.scopes.XBaseScope base;
  protected final xscript.compiler.scopes.XScope parent;
  protected final xscript.compiler.scopes.XClassScope lastClassScope;
  protected final java.util.Map<java.lang.String, xscript.compiler.XVar> locals;
  protected final java.util.Map<java.lang.String, xscript.compiler.XVar> accessed;
  protected final boolean localsAllowed;
  protected final xscript.compiler.XJumpTarget _break;
  protected final xscript.compiler.XJumpTarget _continue;
  protected final java.util.List<xscript.compiler.XLabel> labels;
  protected final int pops;
  protected final boolean breakOnlyByName;
  xscript.compiler.scopes.XScope(xscript.compiler.scopes.XScope);
  public xscript.compiler.scopes.XScope(xscript.compiler.scopes.XScope, boolean, xscript.compiler.XJumpTarget, xscript.compiler.XJumpTarget, java.util.List<xscript.compiler.XLabel>, int);
  public xscript.compiler.scopes.XScope(xscript.compiler.scopes.XScope, boolean, xscript.compiler.XJumpTarget, java.util.List<xscript.compiler.XLabel>, int);
  public xscript.compiler.scopes.XScope(xscript.compiler.scopes.XScope, boolean);
  xscript.compiler.scopes.XScope();
  public xscript.compiler.scopes.XScope$Result get(xscript.compiler.tree.XTree, java.lang.String, xscript.compiler.XVarAccess);
  protected xscript.compiler.XVar getNonLocal(xscript.compiler.tree.XTree, java.lang.String, xscript.compiler.XVarAccess);
  protected xscript.compiler.XVar create(xscript.compiler.tree.XTree, java.lang.String);
  public xscript.compiler.scopes.XScope getParent();
  public boolean getJump(java.lang.String, int, xscript.compiler.XJump);
  protected boolean getJumpTarget(java.lang.String, int, xscript.compiler.XJump);
  public int getLocalsCount();
  public xscript.compiler.XVar getLastClass();
  public java.util.Map<java.lang.String, xscript.compiler.XVar> getLocals();
  public xscript.compiler.scopes.XScope lock();
  public boolean isGloabl();
  public java.lang.String toString();
}
Compiled from "XScope.java"
class xscript.compiler.scopes.XScope$1 {
  static final int[] $SwitchMap$xscript$compiler$XVarAccess;
  static {};
}
Compiled from "XScope.java"
public class xscript.compiler.scopes.XScope$Result {
  public xscript.compiler.scopes.XScope$Result$R r;
  public xscript.compiler.XVar var;
  public xscript.compiler.scopes.XScope$Result(xscript.compiler.XVar);
  public xscript.compiler.scopes.XScope$Result(xscript.compiler.XVar, xscript.compiler.scopes.XScope$Result$R);
}
Compiled from "XScope.java"
public final class xscript.compiler.scopes.XScope$Result$R extends java.lang.Enum<xscript.compiler.scopes.XScope$Result$R> {
  public static final xscript.compiler.scopes.XScope$Result$R FOUND;
  public static final xscript.compiler.scopes.XScope$Result$R DUPLICATED;
  public static final xscript.compiler.scopes.XScope$Result$R NOT_FOUND;
  public static final xscript.compiler.scopes.XScope$Result$R DECLARED;
  public static xscript.compiler.scopes.XScope$Result$R[] values();
  public static xscript.compiler.scopes.XScope$Result$R valueOf(java.lang.String);
  static {};
}
Compiled from "XTree.java"
public abstract class xscript.compiler.tree.XTree {
  public xscript.compiler.XTreePosition position;
  public xscript.compiler.tree.XTree(xscript.compiler.XTreePosition);
  public abstract void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeAssert extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeExpr condition;
  public xscript.compiler.tree.XTree$XTreeExpr message;
  public xscript.compiler.tree.XTree$XTreeAssert(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeBreak extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeIdent lable;
  public xscript.compiler.tree.XTree$XTreeBreak(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeIdent);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeCall extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeExpr method;
  public java.util.List<xscript.compiler.tree.XTree$XTreeExpr> params;
  public java.util.List<xscript.compiler.tree.XTree$XTreeIdent> kws;
  public xscript.compiler.tree.XTree$XTreeCall(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, java.util.List<xscript.compiler.tree.XTree$XTreeExpr>, java.util.List<xscript.compiler.tree.XTree$XTreeIdent>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeCase extends xscript.compiler.tree.XTree {
  public xscript.compiler.tree.XTree$XTreeExpr key;
  public java.util.List<xscript.compiler.tree.XTree$XTreeStatement> block;
  public xscript.compiler.tree.XTree$XTreeCase(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, java.util.List<xscript.compiler.tree.XTree$XTreeStatement>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeCatch extends xscript.compiler.tree.XTree$XTreeStatement {
  public java.util.List<xscript.compiler.tree.XTree$XTreeExpr> excType;
  public xscript.compiler.tree.XTree$XTreeIdent varName;
  public xscript.compiler.tree.XTree$XTreeScope body;
  public xscript.compiler.tree.XTree$XTreeCatch(xscript.compiler.XTreePosition, java.util.List<xscript.compiler.tree.XTree$XTreeExpr>, xscript.compiler.tree.XTree$XTreeIdent, xscript.compiler.tree.XTree$XTreeScope);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeClass extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.XVarAccess access;
  public xscript.compiler.tree.XTree$XTreeIdent name;
  public xscript.compiler.tree.XTree$XTreeExpr superClasses;
  public xscript.compiler.tree.XTree$XTreeScope init;
  public xscript.compiler.tree.XTree$XTreeClass(xscript.compiler.XTreePosition, xscript.compiler.XVarAccess, xscript.compiler.tree.XTree$XTreeIdent, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeScope);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeConstant extends xscript.compiler.tree.XTree$XTreeExpr {
  public java.lang.Object value;
  public xscript.compiler.tree.XTree$XTreeConstant(xscript.compiler.XTreePosition, java.lang.Object);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeContinue extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeIdent lable;
  public xscript.compiler.tree.XTree$XTreeContinue(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeIdent);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeDelete extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeExpr expr;
  public xscript.compiler.tree.XTree$XTreeDelete(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeDo extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeExpr condition;
  public xscript.compiler.tree.XTree$XTreeStatement body;
  public xscript.compiler.tree.XTree$XTreeDo(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeStatement);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeEmpty extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeEmpty(xscript.compiler.XTreePosition);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeError extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeError(xscript.compiler.XTreePosition);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public abstract class xscript.compiler.tree.XTree$XTreeExpr extends xscript.compiler.tree.XTree$XTreeLowExpr {
  public xscript.compiler.tree.XTree$XTreeExpr(xscript.compiler.XTreePosition);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeFor extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeLowExpr init;
  public xscript.compiler.tree.XTree$XTreeExpr condition;
  public xscript.compiler.tree.XTree$XTreeExpr inc;
  public xscript.compiler.tree.XTree$XTreeStatement body;
  public xscript.compiler.tree.XTree$XTreeFor(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeLowExpr, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeStatement);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeForeach extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeLowExpr var;
  public xscript.compiler.tree.XTree$XTreeExpr in;
  public xscript.compiler.tree.XTree$XTreeStatement body;
  public xscript.compiler.tree.XTree$XTreeForeach(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeLowExpr, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeStatement);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeFunc extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.XVarAccess access;
  public xscript.compiler.tree.XTree$XTreeIdent name;
  public java.util.List<xscript.compiler.tree.XTree$XTreeIdent> params;
  public int listParam;
  public int kwParam;
  public java.util.List<xscript.compiler.tree.XTree$XTreeExpr> defaults;
  public xscript.compiler.tree.XTree$XTreeScope body;
  public xscript.compiler.tree.XTree$XTreeFunc(xscript.compiler.XTreePosition, xscript.compiler.XVarAccess, xscript.compiler.tree.XTree$XTreeIdent, java.util.List<xscript.compiler.tree.XTree$XTreeIdent>, int, int, java.util.List<xscript.compiler.tree.XTree$XTreeExpr>, xscript.compiler.tree.XTree$XTreeScope);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeGroup extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeExpr group;
  public xscript.compiler.tree.XTree$XTreeGroup(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeIdent extends xscript.compiler.tree.XTree$XTreeExpr {
  public java.lang.String name;
  public xscript.compiler.tree.XTree$XTreeIdent(xscript.compiler.XTreePosition, java.lang.String);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeIf extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeExpr condition;
  public xscript.compiler.tree.XTree$XTreeStatement onTrue;
  public xscript.compiler.tree.XTree$XTreeStatement onFalse;
  public xscript.compiler.tree.XTree$XTreeIf(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeStatement, xscript.compiler.tree.XTree$XTreeStatement);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeImport extends xscript.compiler.tree.XTree$XTreeStatement {
  public java.util.List<xscript.compiler.tree.XTree$XTreeImportEntry> imports;
  public xscript.compiler.tree.XTree$XTreeImport(xscript.compiler.XTreePosition, java.util.List<xscript.compiler.tree.XTree$XTreeImportEntry>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeImportEntry extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeIdent _import;
  public xscript.compiler.tree.XTree$XTreeIdent as;
  public xscript.compiler.tree.XTree$XTreeImportEntry(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeIdent, xscript.compiler.tree.XTree$XTreeIdent);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeImportFrom extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeIdent from;
  public java.util.List<xscript.compiler.tree.XTree$XTreeImportEntry> imports;
  public xscript.compiler.tree.XTree$XTreeImportFrom(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeIdent, java.util.List<xscript.compiler.tree.XTree$XTreeImportEntry>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeIndex extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeExpr array;
  public xscript.compiler.tree.XTree$XTreeExpr index;
  public xscript.compiler.tree.XTree$XTreeIndex(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeInstanceof extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeExpr statement;
  public xscript.compiler.tree.XTree$XTreeExpr type;
  public xscript.compiler.tree.XTree$XTreeInstanceof(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeIssubclass extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeExpr statement;
  public xscript.compiler.tree.XTree$XTreeExpr type;
  public xscript.compiler.tree.XTree$XTreeIssubclass(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeLabel extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeIdent label;
  public xscript.compiler.tree.XTree$XTreeStatement statement;
  public xscript.compiler.tree.XTree$XTreeLabel(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeIdent, xscript.compiler.tree.XTree$XTreeStatement);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public abstract class xscript.compiler.tree.XTree$XTreeLowExpr extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeLowExpr(xscript.compiler.XTreePosition);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeMakeList extends xscript.compiler.tree.XTree$XTreeExpr {
  public java.util.List<xscript.compiler.tree.XTree$XTreeExpr> exprs;
  public xscript.compiler.tree.XTree$XTreeMakeList(xscript.compiler.XTreePosition, java.util.List<xscript.compiler.tree.XTree$XTreeExpr>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeMakeMap extends xscript.compiler.tree.XTree$XTreeExpr {
  public java.util.List<xscript.compiler.tree.XTree$XTreeMapEntry> entries;
  public xscript.compiler.tree.XTree$XTreeMakeMap(xscript.compiler.XTreePosition, java.util.List<xscript.compiler.tree.XTree$XTreeMapEntry>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeMakeTuple extends xscript.compiler.tree.XTree$XTreeExpr {
  public java.util.List<xscript.compiler.tree.XTree$XTreeExpr> exprs;
  public xscript.compiler.tree.XTree$XTreeMakeTuple(xscript.compiler.XTreePosition, java.util.List<xscript.compiler.tree.XTree$XTreeExpr>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeMapEntry extends xscript.compiler.tree.XTree {
  public xscript.compiler.tree.XTree$XTreeExpr key;
  public xscript.compiler.tree.XTree$XTreeExpr expr;
  public xscript.compiler.tree.XTree$XTreeMapEntry(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeModule extends xscript.compiler.tree.XTree {
  public java.lang.String source;
  public xscript.compiler.tree.XTree$XTreeScope body;
  public xscript.compiler.tree.XTree$XTreeModule(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeScope);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeOperator extends xscript.compiler.tree.XTree$XTreeExpr {
  public java.util.List<xscript.compiler.tree.XTree$XTreeExpr> exprs;
  public java.util.List<xscript.compiler.XOperator> operators;
  public xscript.compiler.tree.XTree$XTreeOperator(xscript.compiler.XTreePosition, java.util.List<xscript.compiler.tree.XTree$XTreeExpr>, java.util.List<xscript.compiler.XOperator>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeOperatorIf extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeExpr condition;
  public xscript.compiler.tree.XTree$XTreeExpr onTrue;
  public xscript.compiler.tree.XTree$XTreeExpr onFalse;
  public xscript.compiler.tree.XTree$XTreeOperatorIf(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeOperatorPrefixSuffix extends xscript.compiler.tree.XTree$XTreeExpr {
  public java.util.List<xscript.compiler.XOperator> prefix;
  public xscript.compiler.tree.XTree$XTreeExpr expr;
  public java.util.List<xscript.compiler.XOperator> suffix;
  public xscript.compiler.tree.XTree$XTreeOperatorPrefixSuffix(xscript.compiler.XTreePosition, java.util.List<xscript.compiler.XOperator>, xscript.compiler.tree.XTree$XTreeExpr, java.util.List<xscript.compiler.XOperator>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeReturn extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeExpr _return;
  public xscript.compiler.tree.XTree$XTreeReturn(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeScope extends xscript.compiler.tree.XTree$XTreeStatement {
  public java.util.List<xscript.compiler.tree.XTree$XTreeStatement> statements;
  public xscript.compiler.tree.XTree$XTreeScope(xscript.compiler.XTreePosition, java.util.List<xscript.compiler.tree.XTree$XTreeStatement>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public abstract class xscript.compiler.tree.XTree$XTreeStatement extends xscript.compiler.tree.XTree {
  public xscript.compiler.tree.XTree$XTreeStatement(xscript.compiler.XTreePosition);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeSuper extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeSuper(xscript.compiler.XTreePosition);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeSwitch extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeExpr statement;
  public java.util.List<xscript.compiler.tree.XTree$XTreeCase> cases;
  public xscript.compiler.tree.XTree$XTreeSwitch(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, java.util.List<xscript.compiler.tree.XTree$XTreeCase>);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeSynchronized extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeExpr sync;
  public xscript.compiler.tree.XTree$XTreeScope body;
  public xscript.compiler.tree.XTree$XTreeSynchronized(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeScope);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeThis extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeThis(xscript.compiler.XTreePosition);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeThrow extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeExpr _throw;
  public xscript.compiler.tree.XTree$XTreeThrow(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeTry extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeScope resources;
  public xscript.compiler.tree.XTree$XTreeScope body;
  public java.util.List<xscript.compiler.tree.XTree$XTreeCatch> catches;
  public xscript.compiler.tree.XTree$XTreeScope _finally;
  public xscript.compiler.tree.XTree$XTreeTry(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeScope, xscript.compiler.tree.XTree$XTreeScope, java.util.List<xscript.compiler.tree.XTree$XTreeCatch>, xscript.compiler.tree.XTree$XTreeScope);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeTypeof extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeExpr statement;
  public xscript.compiler.tree.XTree$XTreeTypeof(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeVarDecl extends xscript.compiler.tree.XTree$XTreeLowExpr {
  public java.util.List<xscript.compiler.tree.XTree$XTreeVarDeclEntry> entries;
  public xscript.compiler.XVarAccess access;
  public xscript.compiler.tree.XTree$XTreeVarDecl(xscript.compiler.XTreePosition, java.util.List<xscript.compiler.tree.XTree$XTreeVarDeclEntry>, xscript.compiler.XVarAccess);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeVarDeclEntry extends xscript.compiler.tree.XTree {
  public xscript.compiler.tree.XTree$XTreeIdent ident;
  public xscript.compiler.tree.XTree$XTreeExpr def;
  public xscript.compiler.tree.XTree$XTreeVarDeclEntry(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeIdent, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeWhile extends xscript.compiler.tree.XTree$XTreeStatement {
  public xscript.compiler.tree.XTree$XTreeExpr condition;
  public xscript.compiler.tree.XTree$XTreeStatement body;
  public xscript.compiler.tree.XTree$XTreeWhile(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr, xscript.compiler.tree.XTree$XTreeStatement);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTree.java"
public class xscript.compiler.tree.XTree$XTreeYield extends xscript.compiler.tree.XTree$XTreeExpr {
  public xscript.compiler.tree.XTree$XTreeExpr _return;
  public xscript.compiler.tree.XTree$XTreeYield(xscript.compiler.XTreePosition, xscript.compiler.tree.XTree$XTreeExpr);
  public void accept(xscript.compiler.tree.XVisitor);
}
Compiled from "XTreeChanger.java"
public class xscript.compiler.tree.XTreeChanger implements xscript.compiler.tree.XVisitor {
  protected static final java.lang.Object REMOVE;
  public xscript.compiler.tree.XTreeChanger();
  public <T extends xscript.compiler.tree.XTree> T visitTree(T);
  public <T extends xscript.compiler.tree.XTree> java.util.List<T> visitTree(java.util.List<T>);
  public void visitError(xscript.compiler.tree.XTree$XTreeError);
  public void visitScope(xscript.compiler.tree.XTree$XTreeScope);
  public void visitClass(xscript.compiler.tree.XTree$XTreeClass);
  public void visitFunc(xscript.compiler.tree.XTree$XTreeFunc);
  public void visitModule(xscript.compiler.tree.XTree$XTreeModule);
  public void visitImportEntry(xscript.compiler.tree.XTree$XTreeImportEntry);
  public void visitImport(xscript.compiler.tree.XTree$XTreeImport);
  public void visitImportFrom(xscript.compiler.tree.XTree$XTreeImportFrom);
  public void visitIf(xscript.compiler.tree.XTree$XTreeIf);
  public void visitFor(xscript.compiler.tree.XTree$XTreeFor);
  public void visitForeach(xscript.compiler.tree.XTree$XTreeForeach);
  public void visitWhile(xscript.compiler.tree.XTree$XTreeWhile);
  public void visitDo(xscript.compiler.tree.XTree$XTreeDo);
  public void visitSynchronized(xscript.compiler.tree.XTree$XTreeSynchronized);
  public void visitBreak(xscript.compiler.tree.XTree$XTreeBreak);
  public void visitContinue(xscript.compiler.tree.XTree$XTreeContinue);
  public void visitReturn(xscript.compiler.tree.XTree$XTreeReturn);
  public void visitYield(xscript.compiler.tree.XTree$XTreeYield);
  public void visitThis(xscript.compiler.tree.XTree$XTreeThis);
  public void visitLabel(xscript.compiler.tree.XTree$XTreeLabel);
  public void visitSuper(xscript.compiler.tree.XTree$XTreeSuper);
  public void visitThrow(xscript.compiler.tree.XTree$XTreeThrow);
  public void visitAssert(xscript.compiler.tree.XTree$XTreeAssert);
  public void visitCatch(xscript.compiler.tree.XTree$XTreeCatch);
  public void visitTry(xscript.compiler.tree.XTree$XTreeTry);
  public void visitGroup(xscript.compiler.tree.XTree$XTreeGroup);
  public void visitOperator(xscript.compiler.tree.XTree$XTreeOperator);
  public void visitOperatorIf(xscript.compiler.tree.XTree$XTreeOperatorIf);
  public void visitOperatorPrefixSuffix(xscript.compiler.tree.XTree$XTreeOperatorPrefixSuffix);
  public void visitIdent(xscript.compiler.tree.XTree$XTreeIdent);
  public void visitIndex(xscript.compiler.tree.XTree$XTreeIndex);
  public void visitInstanceof(xscript.compiler.tree.XTree$XTreeInstanceof);
  public void visitIssubclass(xscript.compiler.tree.XTree$XTreeIssubclass);
  public void visitTypeof(xscript.compiler.tree.XTree$XTreeTypeof);
  public void visitSwitch(xscript.compiler.tree.XTree$XTreeSwitch);
  public void visitCase(xscript.compiler.tree.XTree$XTreeCase);
  public void visitConstant(xscript.compiler.tree.XTree$XTreeConstant);
  public void visitCall(xscript.compiler.tree.XTree$XTreeCall);
  public void visitMakeTuple(xscript.compiler.tree.XTree$XTreeMakeTuple);
  public void visitMakeList(xscript.compiler.tree.XTree$XTreeMakeList);
  public void visitMakeMap(xscript.compiler.tree.XTree$XTreeMakeMap);
  public void visitMapEntry(xscript.compiler.tree.XTree$XTreeMapEntry);
  public void visitEmpty(xscript.compiler.tree.XTree$XTreeEmpty);
  public void visitVarDecl(xscript.compiler.tree.XTree$XTreeVarDecl);
  public void visitVarDeclEntry(xscript.compiler.tree.XTree$XTreeVarDeclEntry);
  public void visitDelete(xscript.compiler.tree.XTree$XTreeDelete);
  static {};
}
Compiled from "XTreeMakeEasy.java"
public class xscript.compiler.tree.XTreeMakeEasy extends xscript.compiler.tree.XTreeChanger {
  public xscript.compiler.tree.XTreeMakeEasy(javax.tools.DiagnosticListener<java.lang.String>);
  public <T extends xscript.compiler.tree.XTree> T visitTree(T);
  public void visitOperator(xscript.compiler.tree.XTree$XTreeOperator);
  public void visitOperatorPrefixSuffix(xscript.compiler.tree.XTree$XTreeOperatorPrefixSuffix);
  public void visitWhile(xscript.compiler.tree.XTree$XTreeWhile);
  public void visitFor(xscript.compiler.tree.XTree$XTreeFor);
  public void visitIf(xscript.compiler.tree.XTree$XTreeIf);
  public void visitGroup(xscript.compiler.tree.XTree$XTreeGroup);
  public void visitOperatorIf(xscript.compiler.tree.XTree$XTreeOperatorIf);
}
Compiled from "XTreePrinter.java"
public class xscript.compiler.tree.XTreePrinter implements xscript.compiler.tree.XVisitor {
  public xscript.compiler.tree.XTreePrinter();
  public void visitError(xscript.compiler.tree.XTree$XTreeError);
  public void visitScope(xscript.compiler.tree.XTree$XTreeScope);
  public void visitClass(xscript.compiler.tree.XTree$XTreeClass);
  public void visitFunc(xscript.compiler.tree.XTree$XTreeFunc);
  public void visitModule(xscript.compiler.tree.XTree$XTreeModule);
  public void visitImportEntry(xscript.compiler.tree.XTree$XTreeImportEntry);
  public void visitImport(xscript.compiler.tree.XTree$XTreeImport);
  public void visitImportFrom(xscript.compiler.tree.XTree$XTreeImportFrom);
  public void visitIf(xscript.compiler.tree.XTree$XTreeIf);
  public void visitFor(xscript.compiler.tree.XTree$XTreeFor);
  public void visitForeach(xscript.compiler.tree.XTree$XTreeForeach);
  public void visitWhile(xscript.compiler.tree.XTree$XTreeWhile);
  public void visitDo(xscript.compiler.tree.XTree$XTreeDo);
  public void visitSynchronized(xscript.compiler.tree.XTree$XTreeSynchronized);
  public void visitBreak(xscript.compiler.tree.XTree$XTreeBreak);
  public void visitContinue(xscript.compiler.tree.XTree$XTreeContinue);
  public void visitReturn(xscript.compiler.tree.XTree$XTreeReturn);
  public void visitYield(xscript.compiler.tree.XTree$XTreeYield);
  public void visitThis(xscript.compiler.tree.XTree$XTreeThis);
  public void visitLabel(xscript.compiler.tree.XTree$XTreeLabel);
  public void visitSuper(xscript.compiler.tree.XTree$XTreeSuper);
  public void visitThrow(xscript.compiler.tree.XTree$XTreeThrow);
  public void visitAssert(xscript.compiler.tree.XTree$XTreeAssert);
  public void visitCatch(xscript.compiler.tree.XTree$XTreeCatch);
  public void visitTry(xscript.compiler.tree.XTree$XTreeTry);
  public void visitGroup(xscript.compiler.tree.XTree$XTreeGroup);
  public void visitOperator(xscript.compiler.tree.XTree$XTreeOperator);
  public void visitOperatorIf(xscript.compiler.tree.XTree$XTreeOperatorIf);
  public void visitOperatorPrefixSuffix(xscript.compiler.tree.XTree$XTreeOperatorPrefixSuffix);
  public void visitIdent(xscript.compiler.tree.XTree$XTreeIdent);
  public void visitIndex(xscript.compiler.tree.XTree$XTreeIndex);
  public void visitInstanceof(xscript.compiler.tree.XTree$XTreeInstanceof);
  public void visitIssubclass(xscript.compiler.tree.XTree$XTreeIssubclass);
  public void visitTypeof(xscript.compiler.tree.XTree$XTreeTypeof);
  public void visitSwitch(xscript.compiler.tree.XTree$XTreeSwitch);
  public void visitCase(xscript.compiler.tree.XTree$XTreeCase);
  public void visitConstant(xscript.compiler.tree.XTree$XTreeConstant);
  public void visitCall(xscript.compiler.tree.XTree$XTreeCall);
  public void visitMakeTuple(xscript.compiler.tree.XTree$XTreeMakeTuple);
  public void visitMakeList(xscript.compiler.tree.XTree$XTreeMakeList);
  public void visitMakeMap(xscript.compiler.tree.XTree$XTreeMakeMap);
  public void visitMapEntry(xscript.compiler.tree.XTree$XTreeMapEntry);
  public void visitEmpty(xscript.compiler.tree.XTree$XTreeEmpty);
  public void visitVarDecl(xscript.compiler.tree.XTree$XTreeVarDecl);
  public void visitVarDeclEntry(xscript.compiler.tree.XTree$XTreeVarDeclEntry);
  public void visitDelete(xscript.compiler.tree.XTree$XTreeDelete);
}
Compiled from "XVisitor.java"
public interface xscript.compiler.tree.XVisitor {
  public abstract void visitError(xscript.compiler.tree.XTree$XTreeError);
  public abstract void visitScope(xscript.compiler.tree.XTree$XTreeScope);
  public abstract void visitClass(xscript.compiler.tree.XTree$XTreeClass);
  public abstract void visitFunc(xscript.compiler.tree.XTree$XTreeFunc);
  public abstract void visitModule(xscript.compiler.tree.XTree$XTreeModule);
  public abstract void visitImportEntry(xscript.compiler.tree.XTree$XTreeImportEntry);
  public abstract void visitImport(xscript.compiler.tree.XTree$XTreeImport);
  public abstract void visitImportFrom(xscript.compiler.tree.XTree$XTreeImportFrom);
  public abstract void visitIf(xscript.compiler.tree.XTree$XTreeIf);
  public abstract void visitFor(xscript.compiler.tree.XTree$XTreeFor);
  public abstract void visitForeach(xscript.compiler.tree.XTree$XTreeForeach);
  public abstract void visitWhile(xscript.compiler.tree.XTree$XTreeWhile);
  public abstract void visitDo(xscript.compiler.tree.XTree$XTreeDo);
  public abstract void visitSynchronized(xscript.compiler.tree.XTree$XTreeSynchronized);
  public abstract void visitBreak(xscript.compiler.tree.XTree$XTreeBreak);
  public abstract void visitContinue(xscript.compiler.tree.XTree$XTreeContinue);
  public abstract void visitReturn(xscript.compiler.tree.XTree$XTreeReturn);
  public abstract void visitYield(xscript.compiler.tree.XTree$XTreeYield);
  public abstract void visitThis(xscript.compiler.tree.XTree$XTreeThis);
  public abstract void visitLabel(xscript.compiler.tree.XTree$XTreeLabel);
  public abstract void visitSuper(xscript.compiler.tree.XTree$XTreeSuper);
  public abstract void visitThrow(xscript.compiler.tree.XTree$XTreeThrow);
  public abstract void visitAssert(xscript.compiler.tree.XTree$XTreeAssert);
  public abstract void visitCatch(xscript.compiler.tree.XTree$XTreeCatch);
  public abstract void visitTry(xscript.compiler.tree.XTree$XTreeTry);
  public abstract void visitGroup(xscript.compiler.tree.XTree$XTreeGroup);
  public abstract void visitOperator(xscript.compiler.tree.XTree$XTreeOperator);
  public abstract void visitOperatorIf(xscript.compiler.tree.XTree$XTreeOperatorIf);
  public abstract void visitOperatorPrefixSuffix(xscript.compiler.tree.XTree$XTreeOperatorPrefixSuffix);
  public abstract void visitIdent(xscript.compiler.tree.XTree$XTreeIdent);
  public abstract void visitIndex(xscript.compiler.tree.XTree$XTreeIndex);
  public abstract void visitInstanceof(xscript.compiler.tree.XTree$XTreeInstanceof);
  public abstract void visitIssubclass(xscript.compiler.tree.XTree$XTreeIssubclass);
  public abstract void visitTypeof(xscript.compiler.tree.XTree$XTreeTypeof);
  public abstract void visitSwitch(xscript.compiler.tree.XTree$XTreeSwitch);
  public abstract void visitCase(xscript.compiler.tree.XTree$XTreeCase);
  public abstract void visitConstant(xscript.compiler.tree.XTree$XTreeConstant);
  public abstract void visitCall(xscript.compiler.tree.XTree$XTreeCall);
  public abstract void visitMakeTuple(xscript.compiler.tree.XTree$XTreeMakeTuple);
  public abstract void visitMakeList(xscript.compiler.tree.XTree$XTreeMakeList);
  public abstract void visitMakeMap(xscript.compiler.tree.XTree$XTreeMakeMap);
  public abstract void visitMapEntry(xscript.compiler.tree.XTree$XTreeMapEntry);
  public abstract void visitEmpty(xscript.compiler.tree.XTree$XTreeEmpty);
  public abstract void visitVarDecl(xscript.compiler.tree.XTree$XTreeVarDecl);
  public abstract void visitVarDeclEntry(xscript.compiler.tree.XTree$XTreeVarDeclEntry);
  public abstract void visitDelete(xscript.compiler.tree.XTree$XTreeDelete);
}
Compiled from "XKeyword.java"
public final class xscript.compiler.treemaker.XKeyword extends java.lang.Enum<xscript.compiler.treemaker.XKeyword> {
  public static final xscript.compiler.treemaker.XKeyword NULL;
  public static final xscript.compiler.treemaker.XKeyword TRUE;
  public static final xscript.compiler.treemaker.XKeyword FALSE;
  public static final xscript.compiler.treemaker.XKeyword FUNC;
  public static final xscript.compiler.treemaker.XKeyword CLASS;
  public static final xscript.compiler.treemaker.XKeyword IF;
  public static final xscript.compiler.treemaker.XKeyword ELSE;
  public static final xscript.compiler.treemaker.XKeyword FOR;
  public static final xscript.compiler.treemaker.XKeyword FOREACH;
  public static final xscript.compiler.treemaker.XKeyword WHILE;
  public static final xscript.compiler.treemaker.XKeyword DO;
  public static final xscript.compiler.treemaker.XKeyword TRY;
  public static final xscript.compiler.treemaker.XKeyword CATCH;
  public static final xscript.compiler.treemaker.XKeyword FINALLY;
  public static final xscript.compiler.treemaker.XKeyword SWITCH;
  public static final xscript.compiler.treemaker.XKeyword CASE;
  public static final xscript.compiler.treemaker.XKeyword DEFAULT;
  public static final xscript.compiler.treemaker.XKeyword BREAK;
  public static final xscript.compiler.treemaker.XKeyword CONTINUE;
  public static final xscript.compiler.treemaker.XKeyword THROW;
  public static final xscript.compiler.treemaker.XKeyword RETURN;
  public static final xscript.compiler.treemaker.XKeyword YIELD;
  public static final xscript.compiler.treemaker.XKeyword IMPORT;
  public static final xscript.compiler.treemaker.XKeyword FROM;
  public static final xscript.compiler.treemaker.XKeyword INSTANCEOF;
  public static final xscript.compiler.treemaker.XKeyword TYPEOF;
  public static final xscript.compiler.treemaker.XKeyword ISSUBCLASS;
  public static final xscript.compiler.treemaker.XKeyword SAND;
  public static final xscript.compiler.treemaker.XKeyword SOR;
  public static final xscript.compiler.treemaker.XKeyword SXOR;
  public static final xscript.compiler.treemaker.XKeyword SBAND;
  public static final xscript.compiler.treemaker.XKeyword SBOR;
  public static final xscript.compiler.treemaker.XKeyword SMOD;
  public static final xscript.compiler.treemaker.XKeyword SNOT;
  public static final xscript.compiler.treemaker.XKeyword SBNOT;
  public static final xscript.compiler.treemaker.XKeyword SPOW;
  public static final xscript.compiler.treemaker.XKeyword THIS;
  public static final xscript.compiler.treemaker.XKeyword SUPER;
  public static final xscript.compiler.treemaker.XKeyword ASSERT;
  public static final xscript.compiler.treemaker.XKeyword ADD;
  public static final xscript.compiler.treemaker.XKeyword SUB;
  public static final xscript.compiler.treemaker.XKeyword MUL;
  public static final xscript.compiler.treemaker.XKeyword DIV;
  public static final xscript.compiler.treemaker.XKeyword IDIV;
  public static final xscript.compiler.treemaker.XKeyword MOD;
  public static final xscript.compiler.treemaker.XKeyword AND;
  public static final xscript.compiler.treemaker.XKeyword OR;
  public static final xscript.compiler.treemaker.XKeyword XOR;
  public static final xscript.compiler.treemaker.XKeyword NOT;
  public static final xscript.compiler.treemaker.XKeyword INVERSE;
  public static final xscript.compiler.treemaker.XKeyword EQUAL;
  public static final xscript.compiler.treemaker.XKeyword GREATER;
  public static final xscript.compiler.treemaker.XKeyword SMALLER;
  public static final xscript.compiler.treemaker.XKeyword COMMA;
  public static final xscript.compiler.treemaker.XKeyword DOT;
  public static final xscript.compiler.treemaker.XKeyword QUESTIONMARK;
  public static final xscript.compiler.treemaker.XKeyword COLON;
  public static final xscript.compiler.treemaker.XKeyword LBRAKET;
  public static final xscript.compiler.treemaker.XKeyword RBRAKET;
  public static final xscript.compiler.treemaker.XKeyword LSCOPE;
  public static final xscript.compiler.treemaker.XKeyword RSCOPE;
  public static final xscript.compiler.treemaker.XKeyword LINDEX;
  public static final xscript.compiler.treemaker.XKeyword RINDEX;
  public static final xscript.compiler.treemaker.XKeyword SEMICOLON;
  public static final xscript.compiler.treemaker.XKeyword LOCAL;
  public static final xscript.compiler.treemaker.XKeyword GLOBAL;
  public static final xscript.compiler.treemaker.XKeyword NONLOCAL;
  public static final xscript.compiler.treemaker.XKeyword DELETE;
  public static final xscript.compiler.treemaker.XKeyword SYNCHRONIZED;
  public static final xscript.compiler.treemaker.XKeyword AS;
  public final java.lang.String name;
  public static xscript.compiler.treemaker.XKeyword[] values();
  public static xscript.compiler.treemaker.XKeyword valueOf(java.lang.String);
  public java.lang.String toString();
  public static xscript.compiler.treemaker.XKeyword getKeyword(java.lang.String);
  static {};
}
Compiled from "XKeyword.java"
final class xscript.compiler.treemaker.XKeyword$Data {
  static final java.util.HashMap<java.lang.String, xscript.compiler.treemaker.XKeyword> keywords;
  static {};
}
Compiled from "XTreeMaker.java"
public class xscript.compiler.treemaker.XTreeMaker {
  public xscript.compiler.treemaker.XTreeMaker(xscript.compiler.parser.XTokenizer, javax.tools.DiagnosticListener<java.lang.String>);
  public xscript.compiler.tree.XTree$XTreeModule makeModule();
  public xscript.compiler.tree.XTree$XTreeModule makeModuleInteractive();
  public xscript.compiler.tree.XTree$XTreeLowExpr makeExprOrDecl();
  public xscript.compiler.tree.XTree$XTreeStatement makeStatement();
  public xscript.compiler.tree.XTree$XTreeStatement makeStatementInteractive();
  public boolean isOperator();
  public xscript.compiler.XOperator readOperator(xscript.compiler.XOperator$Type, boolean);
}
Compiled from "XTreeMaker.java"
class xscript.compiler.treemaker.XTreeMaker$1 {
  static final int[] $SwitchMap$xscript$compiler$treemaker$XKeyword;
  static final int[] $SwitchMap$xscript$compiler$parser$XTokenKind;
  static {};
}
Compiled from "ArgReader.java"
public class xscript.executils.ArgReader {
  public xscript.executils.ArgReader(java.lang.String[]);
  public java.lang.String next() throws java.io.IOException, xscript.executils.ArgReader$RecuresiveFileException;
}
Compiled from "ArgReader.java"
class xscript.executils.ArgReader$FileArgReader {
  final java.io.File file;
  xscript.executils.ArgReader$FileArgReader(java.io.File) throws java.io.IOException;
  boolean hasNext();
  java.lang.String next() throws java.io.IOException;
  void close() throws java.io.IOException;
}
Compiled from "ArgReader.java"
public class xscript.executils.ArgReader$RecuresiveFileException extends java.lang.Exception {
  public final java.io.File f;
  public final java.lang.String opend;
  public xscript.executils.ArgReader$RecuresiveFileException(java.io.File, java.lang.String);
}
Compiled from "InputToOutputStream.java"
public class xscript.executils.InputToOutputStream extends java.io.InputStream {
  public xscript.executils.InputToOutputStream(java.io.InputStream, java.io.OutputStream);
  public int read() throws java.io.IOException;
  public int read(byte[]) throws java.io.IOException;
  public int read(byte[], int, int) throws java.io.IOException;
  public long skip(long) throws java.io.IOException;
  public int available() throws java.io.IOException;
  public void close() throws java.io.IOException;
}
Compiled from "Localizer.java"
public class xscript.executils.Localizer {
  public xscript.executils.Localizer(java.util.ResourceBundle);
  public java.lang.String localize(java.lang.String, java.lang.Object...);
}
Compiled from "Log.java"
public class xscript.executils.Log implements javax.tools.DiagnosticListener<java.lang.String> {
  public xscript.executils.Log(java.io.PrintWriter, java.io.PrintWriter, java.io.PrintWriter, xscript.executils.Localizer);
  public xscript.executils.Log(xscript.executils.Localizer);
  public void println();
  public void println(java.lang.String, java.lang.Object...);
  public void print(java.lang.String, java.lang.Object...);
  public void rawprintln(java.lang.String, java.lang.Object...);
  public void rawprint(java.lang.String, java.lang.Object...);
  public void rawprintln(java.lang.String);
  public void rawprint(java.lang.String);
  public java.lang.String localize(java.lang.String);
  public java.lang.String localize(java.lang.String, java.lang.Object...);
  public java.io.PrintWriter getWriter(xscript.executils.Log$Kind);
  public void rawprintln(xscript.executils.Log$Kind, java.lang.String);
  public void rawprint(xscript.executils.Log$Kind, java.lang.String);
  public static void rawprintln(java.io.PrintWriter, java.lang.String);
  public static void rawprint(java.io.PrintWriter, java.lang.String);
  public void report(javax.tools.Diagnostic<? extends java.lang.String>);
  public static java.lang.String format(java.lang.String, java.lang.Object...);
  public void flush();
}
Compiled from "Log.java"
class xscript.executils.Log$1 {
  static final int[] $SwitchMap$xscript$executils$Log$Kind;
  static final int[] $SwitchMap$javax$tools$Diagnostic$Kind;
  static {};
}
Compiled from "Log.java"
public final class xscript.executils.Log$Kind extends java.lang.Enum<xscript.executils.Log$Kind> {
  public static final xscript.executils.Log$Kind NOTICE;
  public static final xscript.executils.Log$Kind WARNING;
  public static final xscript.executils.Log$Kind ERROR;
  public static xscript.executils.Log$Kind[] values();
  public static xscript.executils.Log$Kind valueOf(java.lang.String);
  static {};
}
Compiled from "MultiplexOutputStream.java"
public class xscript.executils.MultiplexOutputStream extends java.io.OutputStream {
  public xscript.executils.MultiplexOutputStream();
  public void addOutputStream(java.io.OutputStream);
  public void removeOutputStream(java.io.OutputStream);
  public void write(int) throws java.io.IOException;
  public void write(byte[]) throws java.io.IOException;
  public void write(byte[], int, int) throws java.io.IOException;
  public void flush() throws java.io.IOException;
  public void close() throws java.io.IOException;
}
Compiled from "Utils.java"
public class xscript.executils.Utils {
  public static final int OK;
  public static final int ERROR;
  public static final int CMDERR;
  public static final int SYSERR;
  public static final int ABNORMAL;
  public xscript.executils.Utils();
  public static void initConsoleIfNeeded(java.lang.String);
  public static java.lang.String getCommandLineRebuild(java.lang.Class<?>);
  public static java.lang.String getOwnName(java.lang.Class<?>);
  public static void setConsoleTitle(java.lang.String);
}
Compiled from "Console.java"
public class xscript.executils.console.Console extends javax.swing.JFrame {
  public xscript.executils.console.Console(java.lang.String);
  public java.io.PrintStream getOut();
  public java.io.PrintStream getErr();
  public java.io.InputStream getIn();
  public java.io.PrintStream getOutWithAttrs(javax.swing.text.AttributeSet);
}
Compiled from "ConsoleDocumentFilter.java"
public class xscript.executils.console.ConsoleDocumentFilter extends javax.swing.text.DocumentFilter {
  public xscript.executils.console.ConsoleDocumentFilter(xscript.executils.console.ConsoleIO);
  public void remove(javax.swing.text.DocumentFilter$FilterBypass, int, int) throws javax.swing.text.BadLocationException;
  public void insertString(javax.swing.text.DocumentFilter$FilterBypass, int, java.lang.String, javax.swing.text.AttributeSet) throws javax.swing.text.BadLocationException;
  public void replace(javax.swing.text.DocumentFilter$FilterBypass, int, int, java.lang.String, javax.swing.text.AttributeSet) throws javax.swing.text.BadLocationException;
}
Compiled from "ConsoleIO.java"
public class xscript.executils.console.ConsoleIO {
  javax.swing.JTextPane textPane;
  public xscript.executils.console.ConsoleIO(javax.swing.text.AttributeSet);
  public boolean doWrite();
  public boolean expectInput();
  public int getInputOffset();
  public void append(java.lang.String, javax.swing.text.AttributeSet);
  public void nonInput(int);
  public void inputreplace(int, int, java.lang.String);
  public java.lang.String readInput();
  public javax.swing.text.AttributeSet getInputAttrs(javax.swing.text.AttributeSet);
  static {};
}
Compiled from "ConsoleInputStream.java"
public class xscript.executils.console.ConsoleInputStream extends java.io.InputStream {
  public xscript.executils.console.ConsoleInputStream(xscript.executils.console.ConsoleIO);
  public int read() throws java.io.IOException;
  public int read(byte[]) throws java.io.IOException;
  public int read(byte[], int, int) throws java.io.IOException;
}
Compiled from "ConsoleOutputStream.java"
public class xscript.executils.console.ConsoleOutputStream extends java.io.OutputStream {
  public xscript.executils.console.ConsoleOutputStream(xscript.executils.console.ConsoleIO, javax.swing.text.AttributeSet);
  public void write(int) throws java.io.IOException;
  public void write(byte[]) throws java.io.IOException;
  public void write(byte[], int, int) throws java.io.IOException;
}
Compiled from "JWrappableTextPane.java"
public class xscript.executils.console.JWrappableTextPane extends javax.swing.JTextPane {
  boolean wrap;
  boolean word;
  public xscript.executils.console.JWrappableTextPane();
  public xscript.executils.console.JWrappableTextPane(javax.swing.text.StyledDocument);
  protected javax.swing.text.EditorKit createDefaultEditorKit();
  public void setLineWrap(boolean);
  public boolean getLineWrap();
  public void setWrapStyleWord(boolean);
  public boolean getWrapStyleWord();
}
Compiled from "JWrappableTextPane.java"
class xscript.executils.console.JWrappableTextPane$1 {
}
Compiled from "JWrappableTextPane.java"
class xscript.executils.console.JWrappableTextPane$WrapColumnFactory implements javax.swing.text.ViewFactory {
  final xscript.executils.console.JWrappableTextPane this$0;
  public javax.swing.text.View create(javax.swing.text.Element);
  xscript.executils.console.JWrappableTextPane$WrapColumnFactory(xscript.executils.console.JWrappableTextPane, xscript.executils.console.JWrappableTextPane$1);
}
Compiled from "JWrappableTextPane.java"
class xscript.executils.console.JWrappableTextPane$WrapEditorKit extends javax.swing.text.StyledEditorKit {
  public xscript.executils.console.JWrappableTextPane$WrapEditorKit(javax.swing.text.ViewFactory);
  public javax.swing.text.ViewFactory getViewFactory();
}
Compiled from "JWrappableTextPane.java"
class xscript.executils.console.JWrappableTextPane$WrapLabelView extends javax.swing.text.LabelView {
  final xscript.executils.console.JWrappableTextPane this$0;
  public xscript.executils.console.JWrappableTextPane$WrapLabelView(xscript.executils.console.JWrappableTextPane, javax.swing.text.Element);
  public float getMinimumSpan(int);
  public int getBreakWeight(int, float, float);
  public javax.swing.text.View breakView(int, int, float, float);
}
Compiled from "Exec.java"
public class xscript.interactive.Exec {
  public xscript.interactive.Exec(javax.script.ScriptEngine, xscript.executils.Log, java.lang.String[]);
  public int run();
  void error(java.lang.String, java.lang.Object...);
  static xscript.executils.Log access$000(xscript.interactive.Exec);
  static java.lang.String access$100(xscript.interactive.Exec);
  static java.lang.String access$200(xscript.interactive.Exec);
  static xscript.XScriptEngine access$300(xscript.interactive.Exec);
  static boolean access$402(xscript.interactive.Exec, boolean);
  static java.util.List access$500(xscript.interactive.Exec);
}
Compiled from "Exec.java"
class xscript.interactive.Exec$1 implements xscript.interactive.OptionHelper {
  final xscript.interactive.Exec this$0;
  xscript.interactive.Exec$1(xscript.interactive.Exec);
  public xscript.executils.Log getLog();
  public java.lang.String getOwnName();
  public java.lang.String getCommandLine();
  public javax.script.ScriptEngine getScriptEngine();
  public void noFileNeeded();
  public boolean addSearchPath(java.io.File);
}
Compiled from "Interactive.java"
public class xscript.interactive.Interactive {
  public xscript.interactive.Interactive(javax.script.ScriptEngine, xscript.executils.Log);
  public int run();
  static {};
}
Compiled from "Main.java"
public class xscript.interactive.Main {
  public xscript.interactive.Main();
  public static void main(java.lang.String[]);
  public static int run(java.lang.String[]);
}
Compiled from "Option.java"
abstract class xscript.interactive.Option extends java.lang.Enum<xscript.interactive.Option> {
  public static final xscript.interactive.Option SEARCHPATH;
  public static final xscript.interactive.Option VERSION;
  public static final xscript.interactive.Option HELP;
  public static xscript.interactive.Option[] values();
  public static xscript.interactive.Option valueOf(java.lang.String);
  abstract boolean process(xscript.interactive.OptionHelper, java.lang.String);
  void help(xscript.executils.Log);
  public boolean hasArg();
  public static xscript.interactive.Option getOption(java.lang.String);
  xscript.interactive.Option(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], xscript.interactive.Option$1);
  static {};
}
Compiled from "Option.java"
final class xscript.interactive.Option$1 extends xscript.interactive.Option {
  xscript.interactive.Option$1(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String...);
  boolean process(xscript.interactive.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.interactive.Option$2 extends xscript.interactive.Option {
  xscript.interactive.Option$2(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String...);
  boolean process(xscript.interactive.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.interactive.Option$3 extends xscript.interactive.Option {
  xscript.interactive.Option$3(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String...);
  boolean process(xscript.interactive.OptionHelper, java.lang.String);
}
Compiled from "Option.java"
final class xscript.interactive.Option$Options {
  static final java.util.Map<java.lang.String, xscript.interactive.Option> OPTIONS;
  static {};
}
Compiled from "OptionHelper.java"
interface xscript.interactive.OptionHelper {
  public abstract xscript.executils.Log getLog();
  public abstract java.lang.String getOwnName();
  public abstract java.lang.String getCommandLine();
  public abstract javax.script.ScriptEngine getScriptEngine();
  public abstract void noFileNeeded();
  public abstract boolean addSearchPath(java.io.File);
}
Compiled from "XConstPool.java"
public interface xscript.object.XConstPool {
  public abstract int getIntP(int);
  public abstract long getLongP(int);
  public abstract float getFloatP(int);
  public abstract double getDoubleP(int);
  public abstract java.lang.String getStringP(int);
  public abstract byte[] getBytes(int);
  public abstract void save(java.io.ObjectOutput) throws java.io.IOException;
}
Compiled from "XConstPoolImpl.java"
public class xscript.object.XConstPoolImpl implements xscript.object.XConstPool {
  public xscript.object.XConstPoolImpl(java.io.ObjectInput) throws java.io.IOException;
  public int getIntP(int);
  public long getLongP(int);
  public float getFloatP(int);
  public double getDoubleP(int);
  public java.lang.String getStringP(int);
  public byte[] getBytes(int);
  public java.lang.String toString();
  public void save(java.io.ObjectOutput) throws java.io.IOException;
}
Compiled from "XFunction.java"
public interface xscript.object.XFunction {
  public static final xscript.values.XValue NO_PUSH;
  public abstract xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>) throws java.lang.Throwable;
  static {};
}
Compiled from "XFunction.java"
final class xscript.object.XFunction$1 extends xscript.values.XValue {
  xscript.object.XFunction$1();
  public java.lang.Object toJava(xscript.object.XRuntime);
  public boolean noneZero();
  public int hashCode();
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public boolean equals(java.lang.Object);
}
Compiled from "XFunctionData.java"
public class xscript.object.XFunctionData {
  final xscript.object.XFunction function;
  final java.lang.String[] paramNames;
  final int defaultStart;
  final boolean useList;
  final boolean useMap;
  public xscript.object.XFunctionData(xscript.object.XFunction);
  public xscript.object.XFunctionData(xscript.object.XFunction, java.lang.String...);
  public xscript.object.XFunctionData(xscript.object.XFunction, int, java.lang.String...);
  public xscript.object.XFunctionData(xscript.object.XFunction, boolean, boolean, java.lang.String...);
  public xscript.object.XFunctionData(xscript.object.XFunction, int, boolean, boolean, java.lang.String...);
  static {};
}
Compiled from "XObject.java"
public final class xscript.object.XObject {
  public xscript.object.XObject(xscript.object.XRuntime, int, xscript.values.XValue, java.lang.Object[]);
  public xscript.object.XObject(int, java.io.ObjectInput) throws java.io.IOException;
  public xscript.values.XValue getType();
  public xscript.values.XValue setType(xscript.object.XRuntime, xscript.values.XValue);
  public void incRef(xscript.object.XRuntime);
  public boolean decRef(xscript.object.XRuntime);
  public void incExtRef(xscript.object.XRuntime);
  public boolean decExtRef(xscript.object.XRuntime);
  public boolean tryDelete(xscript.object.XRuntime);
  public boolean delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void resetVisible();
  public boolean isVisible();
  public boolean isExternalUsed();
  public xscript.values.XValue getRaw(java.lang.String);
  public xscript.values.XValue setRaw(java.lang.String, xscript.values.XValue);
  public xscript.values.XValue replaceRaw(java.lang.String, xscript.values.XValue);
  public xscript.values.XValue delRaw(java.lang.String);
  public int getPointer();
  public xscript.object.XObjectData getData();
  public void setTypeData(xscript.object.XRuntime, xscript.object.XTypeData);
  public java.lang.Object toJava(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public void loadData(xscript.object.XRuntime, java.io.ObjectInput) throws java.io.IOException;
  public void saveData(java.io.ObjectOutput) throws java.io.IOException;
  public boolean isType(xscript.object.XRuntime);
  public xscript.values.XValue getWeakRef(xscript.object.XRuntime);
  public void releaseWeakRef();
  public java.util.Set<java.lang.String> getKeys();
}
Compiled from "XObjectData.java"
public interface xscript.object.XObjectData {
  public abstract void delete(xscript.object.XRuntime, boolean);
  public abstract void setVisible(xscript.object.XRuntime);
  public abstract void save(java.io.ObjectOutput) throws java.io.IOException;
  public abstract java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
}
Compiled from "XObjectDataConstPool.java"
public class xscript.object.XObjectDataConstPool implements xscript.object.XObjectData {
  public xscript.object.XObjectDataConstPool(xscript.object.XConstPool);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public xscript.object.XConstPool getConstPool();
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
}
Compiled from "XObjectDataFunc.java"
public class xscript.object.XObjectDataFunc implements xscript.object.XObjectData {
  public xscript.object.XObjectDataFunc(xscript.object.XRuntime, java.lang.String, java.lang.String[], int, int, int, xscript.values.XValue, xscript.values.XValue, xscript.values.XValue, xscript.values.XValue, int, xscript.XClosure[]);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public java.lang.String getName();
  public java.lang.String[] getParamNames();
  public int getKwParam();
  public int getListParam();
  public int getDefStart();
  public xscript.values.XValue getDef();
  public xscript.object.XConstPool getConstPool(xscript.object.XRuntime);
  public byte[] getInstructions(xscript.object.XRuntime);
  public java.lang.String getFileName(xscript.object.XRuntime);
  public java.lang.String getFullPath(xscript.object.XRuntime);
  public xscript.XClosure[] getClosures();
  public xscript.values.XValue getModule();
  public xscript.values.XValue getDeclaringClass();
  public xscript.values.XValue getConstPool();
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
}
Compiled from "XObjectDataList.java"
public class xscript.object.XObjectDataList extends java.util.AbstractList<xscript.values.XValue> implements xscript.object.XObjectData {
  public xscript.object.XObjectDataList(java.util.List<xscript.values.XValue>);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public boolean add(xscript.values.XValue);
  public void add(int, xscript.values.XValue);
  public void clear();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public xscript.values.XValue get(int);
  public int indexOf(java.lang.Object);
  public boolean isEmpty();
  public java.util.Iterator<xscript.values.XValue> iterator();
  public int lastIndexOf(java.lang.Object);
  public boolean remove(java.lang.Object);
  public xscript.values.XValue remove(int);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public xscript.values.XValue set(int, xscript.values.XValue);
  public int size();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
  public java.lang.Object remove(int);
  public void add(int, java.lang.Object);
  public java.lang.Object set(int, java.lang.Object);
  public java.lang.Object get(int);
  public boolean add(java.lang.Object);
}
Compiled from "XObjectDataMap.java"
public class xscript.object.XObjectDataMap implements xscript.object.XObjectData, java.util.Map<java.lang.String, xscript.values.XValue> {
  public xscript.object.XObjectDataMap(java.util.Map<java.lang.String, xscript.values.XValue>);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public int size();
  public boolean isEmpty();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public xscript.values.XValue get(java.lang.Object);
  public xscript.values.XValue put(java.lang.String, xscript.values.XValue);
  public xscript.values.XValue remove(java.lang.Object);
  public void putAll(java.util.Map<? extends java.lang.String, ? extends xscript.values.XValue>);
  public void clear();
  public java.util.Set<java.lang.String> keySet();
  public java.util.Collection<xscript.values.XValue> values();
  public java.util.Set<java.util.Map$Entry<java.lang.String, xscript.values.XValue>> entrySet();
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object get(java.lang.Object);
}
Compiled from "XObjectDataModule.java"
public class xscript.object.XObjectDataModule implements xscript.object.XObjectData {
  public xscript.object.XObjectDataModule(xscript.object.XRuntime, xscript.values.XValue, java.lang.String);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public xscript.values.XValue getConstPool();
  public java.lang.String getName();
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
}
Compiled from "XObjectDataNativeFunc.java"
public class xscript.object.XObjectDataNativeFunc implements xscript.object.XObjectData {
  public xscript.object.XObjectDataNativeFunc(java.lang.String, xscript.object.XFunctionData);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public java.lang.String getName();
  public xscript.object.XFunction getFunction();
  public java.lang.String[] getParamNames();
  public int getDefStart();
  public boolean getUseList();
  public boolean getUseMap();
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
}
Compiled from "XObjectDataString.java"
public class xscript.object.XObjectDataString implements xscript.object.XObjectData {
  public xscript.object.XObjectDataString(java.lang.String);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public java.lang.String getString();
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
}
Compiled from "XObjectDataTuple.java"
public class xscript.object.XObjectDataTuple extends java.util.AbstractList<xscript.values.XValue> implements xscript.object.XObjectData {
  public xscript.object.XObjectDataTuple(java.util.List<xscript.values.XValue>);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public void clear();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public xscript.values.XValue get(int);
  public int indexOf(java.lang.Object);
  public boolean isEmpty();
  public int lastIndexOf(java.lang.Object);
  public int size();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
  public java.lang.Object get(int);
}
Compiled from "XObjectDataWeakRef.java"
public class xscript.object.XObjectDataWeakRef implements xscript.object.XObjectData {
  public xscript.object.XObjectDataWeakRef(xscript.values.XValue);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public xscript.values.XValue getRef();
  public void release();
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
}
Compiled from "XRuntime.java"
public interface xscript.object.XRuntime {
  public abstract xscript.values.XValue getBaseType(int);
  public abstract xscript.object.XObject getObject(int);
  public abstract xscript.object.XObject getObject(xscript.values.XValue);
  public abstract boolean delete(xscript.object.XObject);
  public abstract xscript.values.XValue alloc(xscript.values.XValue);
  public abstract xscript.values.XValue alloc(xscript.values.XValue, java.lang.Object...);
  public abstract xscript.values.XValue alloc(java.lang.String);
  public abstract xscript.values.XValue createTuple(java.util.List<xscript.values.XValue>);
  public abstract xscript.values.XValue createTuple(xscript.values.XValue...);
  public abstract xscript.values.XValue createList(java.util.List<xscript.values.XValue>);
  public abstract xscript.values.XValue createMap(java.util.Map<java.lang.String, xscript.values.XValue>);
  public abstract xscript.object.XFunctionData getFunction(java.lang.String);
  public abstract void addNativeMethod(java.lang.String, xscript.object.XFunctionData);
  public abstract xscript.values.XValue createFunction(java.lang.String);
  public abstract void gc();
  public abstract long getTime();
  public abstract xscript.values.XValue getBuiltinModule();
  public abstract xscript.object.XConstPool loadModule(java.lang.String);
  public abstract boolean doInit();
  public abstract byte[] compile(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.io.Reader, javax.tools.DiagnosticListener<java.lang.String>, boolean);
  public abstract xscript.values.XValue getModule(java.lang.String);
  public abstract xscript.values.XValue tryImportModule(java.lang.String);
  public abstract java.io.PrintStream getOut();
  public abstract java.io.PrintStream getErr();
  public abstract java.io.InputStream getIn();
  public abstract void exit(int);
  public abstract boolean isRunning();
  public abstract java.lang.Object get(java.lang.String);
}
Compiled from "XTypeData.java"
public class xscript.object.XTypeData implements xscript.object.XObjectData {
  public xscript.object.XTypeData(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.util.List<xscript.values.XValue>);
  public xscript.object.XTypeData(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, xscript.values.XValue);
  public xscript.object.XTypeData(xscript.object.XRuntime, xscript.object.XObject, java.lang.String);
  xscript.object.XTypeData(xscript.object.XRuntime, xscript.object.XObject);
  xscript.object.XTypeData(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
  public void init(xscript.object.XRuntime, xscript.object.XObject);
  public void delete(xscript.object.XRuntime, boolean);
  public void setVisible(xscript.object.XRuntime);
  public void save(java.io.ObjectOutput) throws java.io.IOException;
  public java.util.List<xscript.values.XValue> getCRO();
  public java.util.List<xscript.values.XValue> setBases(xscript.object.XRuntime, java.util.List<xscript.values.XValue>);
  public java.util.List<xscript.values.XValue> getBases();
  public static java.util.List<xscript.values.XValue> calcCRO(xscript.object.XRuntime, java.util.List<xscript.values.XValue>, xscript.values.XValue);
  public java.lang.String getName();
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue getAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public xscript.values.XValue setAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int, xscript.values.XValue);
  public xscript.values.XValue delAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getAttributes();
  public java.lang.String[] getMethods();
  public xscript.values.XValue alloc(xscript.object.XRuntime, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.Object toJava(xscript.object.XRuntime, xscript.object.XObject);
}
Compiled from "XTypeData.java"
class xscript.object.XTypeData$TypeFunc implements xscript.object.XFunction {
  final xscript.object.XTypeData this$0;
  xscript.object.XTypeData$TypeFunc(xscript.object.XTypeData, int);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
}
Compiled from "XTypeDataBool.java"
public class xscript.object.XTypeDataBool extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataBool(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.values.XValue alloc(xscript.object.XRuntime, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataBool.java"
final class xscript.object.XTypeDataBool$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataBool$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataConstPool.java"
public class xscript.object.XTypeDataConstPool extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataConstPool(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  static {};
}
Compiled from "XTypeDataConstPool.java"
final class xscript.object.XTypeDataConstPool$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataConstPool$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataFactory.java"
public abstract class xscript.object.XTypeDataFactory {
  public xscript.object.XTypeDataFactory();
  static xscript.object.XTypeData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  static xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  protected abstract xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected abstract xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
  static {};
}
Compiled from "XTypeDataFloat.java"
public class xscript.object.XTypeDataFloat extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataFloat(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.values.XValue alloc(xscript.object.XRuntime, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataFloat.java"
final class xscript.object.XTypeDataFloat$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataFloat$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataFunc.java"
public class xscript.object.XTypeDataFunc extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataFunc(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue getAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public xscript.values.XValue setAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int, xscript.values.XValue);
  public xscript.values.XValue delAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public java.lang.String[] getAttributes();
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataFunc.java"
final class xscript.object.XTypeDataFunc$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataFunc$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataInt.java"
public class xscript.object.XTypeDataInt extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataInt(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.values.XValue alloc(xscript.object.XRuntime, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataInt.java"
final class xscript.object.XTypeDataInt$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataInt$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataList.java"
public class xscript.object.XTypeDataList extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataList(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataList.java"
final class xscript.object.XTypeDataList$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataList$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataMap.java"
public class xscript.object.XTypeDataMap extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataMap(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataMap.java"
final class xscript.object.XTypeDataMap$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataMap$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataModule.java"
public class xscript.object.XTypeDataModule extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataModule(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue getAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public xscript.values.XValue setAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int, xscript.values.XValue);
  public xscript.values.XValue delAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public java.lang.String[] getAttributes();
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataModule.java"
final class xscript.object.XTypeDataModule$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataModule$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataNativeFunc.java"
public class xscript.object.XTypeDataNativeFunc extends xscript.object.XTypeData {
  public xscript.object.XTypeDataNativeFunc(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataNull.java"
public class xscript.object.XTypeDataNull extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataNull(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.values.XValue alloc(xscript.object.XRuntime, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataNull.java"
final class xscript.object.XTypeDataNull$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataNull$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataNumber.java"
public class xscript.object.XTypeDataNumber extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataNumber(xscript.object.XRuntime, xscript.object.XObject);
  static {};
}
Compiled from "XTypeDataNumber.java"
final class xscript.object.XTypeDataNumber$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataNumber$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataObject.java"
public class xscript.object.XTypeDataObject extends xscript.object.XTypeData {
  public xscript.object.XTypeDataObject(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.values.XValue getAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public xscript.values.XValue setAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int, xscript.values.XValue);
  public xscript.values.XValue delAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public java.lang.String[] getAttributes();
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataString.java"
public class xscript.object.XTypeDataString extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataString(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.values.XValue alloc(xscript.object.XRuntime, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue getAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public xscript.values.XValue setAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int, xscript.values.XValue);
  public xscript.values.XValue delAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public java.lang.String[] getAttributes();
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataString.java"
final class xscript.object.XTypeDataString$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataString$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataTuple.java"
public class xscript.object.XTypeDataTuple extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataTuple(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataTuple.java"
final class xscript.object.XTypeDataTuple$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataTuple$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XTypeDataType.java"
public class xscript.object.XTypeDataType extends xscript.object.XTypeData {
  public xscript.object.XTypeDataType(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue getAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public xscript.values.XValue setAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int, xscript.values.XValue);
  public xscript.values.XValue delAttr(xscript.object.XRuntime, xscript.values.XValue, xscript.object.XObject, int);
  public java.lang.String[] getAttributes();
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public xscript.values.XValue _new(xscript.object.XRuntime, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataWeakRef.java"
public class xscript.object.XTypeDataWeakRef extends xscript.object.XTypeData {
  public static final xscript.object.XTypeDataFactory FACTORY;
  public xscript.object.XTypeDataWeakRef(xscript.object.XRuntime, xscript.object.XObject);
  public xscript.values.XValue alloc(xscript.object.XRuntime, xscript.values.XValue, java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public xscript.object.XObjectData loadData(xscript.object.XRuntime, xscript.object.XObject, java.io.ObjectInput) throws java.io.IOException;
  public xscript.object.XObjectData createData(xscript.object.XRuntime, xscript.object.XObject, java.lang.Object[]);
  public xscript.values.XValue invoke(xscript.object.XRuntime, xscript.XExec, int, xscript.values.XValue, xscript.values.XValue[], java.util.List<xscript.values.XValue>, java.util.Map<java.lang.String, xscript.values.XValue>);
  public java.lang.String[] getMethods();
  static {};
}
Compiled from "XTypeDataWeakRef.java"
final class xscript.object.XTypeDataWeakRef$1 extends xscript.object.XTypeDataFactory {
  xscript.object.XTypeDataWeakRef$1();
  protected xscript.object.XTypeData create(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.lang.Object[]);
  protected xscript.object.XTypeData load(xscript.object.XRuntime, xscript.object.XObject, java.lang.String, java.io.ObjectInput) throws java.io.IOException;
}
Compiled from "XContainer.java"
interface xscript.values.XContainer {
  public abstract xscript.values.XValue getValue();
}
Compiled from "XValue.java"
public abstract class xscript.values.XValue extends java.lang.Number implements java.io.Serializable,java.lang.Cloneable {
  public static final int REF_NONE;
  public static final int REF_INTERN;
  public static final int REF_EXTERN;
  public xscript.values.XValue();
  public static xscript.values.XValue incRef(xscript.object.XRuntime, xscript.values.XValue, int);
  public static xscript.values.XValue incRefNN(xscript.object.XRuntime, xscript.values.XValue, int);
  public static xscript.values.XValue unpackContainer(xscript.values.XValue);
  public abstract xscript.values.XValue getType(xscript.object.XRuntime);
  public xscript.values.XValue incRef(xscript.object.XRuntime);
  public boolean decRef(xscript.object.XRuntime);
  public xscript.values.XValue incExtRef(xscript.object.XRuntime);
  public boolean decExtRef(xscript.object.XRuntime);
  public void setVisible(xscript.object.XRuntime);
  public abstract boolean noneZero();
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public xscript.values.XValue clone();
  public abstract java.lang.Object toJava(xscript.object.XRuntime);
  public xscript.values.XValue getRaw(xscript.object.XRuntime, java.lang.String);
  public xscript.values.XValue setRaw(xscript.object.XRuntime, java.lang.String, xscript.values.XValue);
  public xscript.values.XValue delRaw(xscript.object.XRuntime, java.lang.String);
  public static void write(java.io.ObjectOutput, xscript.values.XValue) throws java.io.IOException;
  public static xscript.values.XValue read(java.io.ObjectInput) throws java.io.IOException;
  public long getInt();
  public double getFloat();
  public boolean getBool();
  public boolean isNumber();
  public boolean isFloat();
  public boolean isInt();
  public boolean isBool();
  public boolean isObject();
  public int intValue();
  public long longValue();
  public float floatValue();
  public double doubleValue();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "XValueAccess.java"
public class xscript.values.XValueAccess extends xscript.values.XValue {
  public xscript.values.XValueAccess(xscript.values.XValueObj);
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public void setVisible(xscript.object.XRuntime);
  public boolean noneZero();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Object toJava(xscript.object.XRuntime);
  public boolean isObject();
  public xscript.values.XValueObj getHolding();
}
Compiled from "XValueAttr.java"
public class xscript.values.XValueAttr extends xscript.values.XValue {
  public xscript.values.XValueAttr(int);
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public boolean noneZero();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Object toJava(xscript.object.XRuntime);
  public int getAttrID();
}
Compiled from "XValueBool.java"
public final class xscript.values.XValueBool extends xscript.values.XValueNumber {
  public static final xscript.values.XValueBool TRUE;
  public static final xscript.values.XValueBool FALSE;
  public static xscript.values.XValueBool valueOf(boolean);
  public boolean getValue();
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public long getInt();
  public double getFloat();
  public boolean getBool();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public xscript.values.XValueBool clone();
  public java.lang.String toString();
  public java.lang.Object toJava(xscript.object.XRuntime);
  public boolean isBool();
  public xscript.values.XValue clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static {};
}
Compiled from "XValueClosure.java"
public class xscript.values.XValueClosure extends xscript.values.XValue implements xscript.values.XContainer {
  public final int stackptr;
  public final xscript.XClosure closure;
  public xscript.values.XValue value;
  public xscript.values.XValueClosure(int, xscript.values.XValue, xscript.XClosure);
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public xscript.values.XValue incRef(xscript.object.XRuntime);
  public boolean decRef(xscript.object.XRuntime);
  public xscript.values.XValue incExtRef(xscript.object.XRuntime);
  public boolean decExtRef(xscript.object.XRuntime);
  public void setVisible(xscript.object.XRuntime);
  public boolean noneZero();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public xscript.values.XValue clone();
  public java.lang.Object toJava(xscript.object.XRuntime);
  public xscript.values.XValue getRaw(xscript.object.XRuntime, java.lang.String);
  public xscript.values.XValue setRaw(xscript.object.XRuntime, java.lang.String, xscript.values.XValue);
  public xscript.values.XValue delRaw(xscript.object.XRuntime, java.lang.String);
  public long getInt();
  public double getFloat();
  public boolean getBool();
  public boolean isNumber();
  public boolean isFloat();
  public boolean isObject();
  public xscript.values.XValue getValue();
  public boolean isInt();
  public boolean isBool();
  public int intValue();
  public long longValue();
  public float floatValue();
  public double doubleValue();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "XValueFloat.java"
public class xscript.values.XValueFloat extends xscript.values.XValueNumber {
  public xscript.values.XValueFloat(double);
  public double getValue();
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public long getInt();
  public double getFloat();
  public boolean getBool();
  public boolean isFloat();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.Object toJava(xscript.object.XRuntime);
}
Compiled from "XValueInt.java"
public final class xscript.values.XValueInt extends xscript.values.XValueNumber {
  public static xscript.values.XValueInt valueOf(long);
  public xscript.values.XValueInt(long);
  public long getValue();
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public long getInt();
  public double getFloat();
  public boolean getBool();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public java.lang.Object toJava(xscript.object.XRuntime);
  public boolean isInt();
  static {};
}
Compiled from "XValueNull.java"
public final class xscript.values.XValueNull extends xscript.values.XValue {
  public static final xscript.values.XValueNull NULL;
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public boolean noneZero();
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Object toJava(xscript.object.XRuntime);
  static {};
}
Compiled from "XValueNumber.java"
public abstract class xscript.values.XValueNumber extends xscript.values.XValue {
  public xscript.values.XValueNumber();
  public boolean noneZero();
  public boolean isNumber();
}
Compiled from "XValueObj.java"
public final class xscript.values.XValueObj extends xscript.values.XValue {
  public xscript.values.XValueObj(int);
  public int getPointer();
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public xscript.values.XValue incRef(xscript.object.XRuntime);
  public boolean decRef(xscript.object.XRuntime);
  public xscript.values.XValue incExtRef(xscript.object.XRuntime);
  public boolean decExtRef(xscript.object.XRuntime);
  public void setVisible(xscript.object.XRuntime);
  public boolean noneZero();
  public xscript.values.XValue getRaw(xscript.object.XRuntime, java.lang.String);
  public xscript.values.XValue setRaw(xscript.object.XRuntime, java.lang.String, xscript.values.XValue);
  public xscript.values.XValue delRaw(xscript.object.XRuntime, java.lang.String);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.Object toJava(xscript.object.XRuntime);
  public boolean isObject();
  public long getInt();
}
Compiled from "XValueObjSuper.java"
public final class xscript.values.XValueObjSuper extends xscript.values.XValue implements xscript.values.XContainer {
  public xscript.values.XValueObjSuper(xscript.values.XValue, int);
  public int getCastToType();
  public xscript.values.XValue getType(xscript.object.XRuntime);
  public xscript.values.XValue incRef(xscript.object.XRuntime);
  public boolean decRef(xscript.object.XRuntime);
  public xscript.values.XValue incExtRef(xscript.object.XRuntime);
  public boolean decExtRef(xscript.object.XRuntime);
  public void setVisible(xscript.object.XRuntime);
  public boolean noneZero();
  public xscript.values.XValue getRaw(xscript.object.XRuntime, java.lang.String);
  public xscript.values.XValue setRaw(xscript.object.XRuntime, java.lang.String, xscript.values.XValue);
  public xscript.values.XValue delRaw(xscript.object.XRuntime, java.lang.String);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.Object toJava(xscript.object.XRuntime);
  public long getInt();
  public double getFloat();
  public boolean getBool();
  public boolean isNumber();
  public boolean isFloat();
  public boolean isInt();
  public boolean isBool();
  public boolean isObject();
  public xscript.values.XValue getValue();
  public int intValue();
  public long longValue();
  public float floatValue();
  public double doubleValue();
}
Compiled from "XValueSerialized.java"
final class xscript.values.XValueSerialized implements java.io.Externalizable {
  xscript.values.XValueSerialized();
  xscript.values.XValueSerialized(xscript.values.XValue);
  public void readExternal(java.io.ObjectInput) throws java.io.IOException;
  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  xscript.values.XValue getValue();
}
