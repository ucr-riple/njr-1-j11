Compiled from "AnnotationChooser.java"
public interface hadoopCode.AnnotationChooser {
  public abstract boolean shouldKeepSpan(mythrift.Span);
  public abstract boolean shouldKeepAnnotation(mythrift.Annotation);
  public abstract java.lang.String getId(mythrift.Span, mythrift.Annotation);
}
Compiled from "AverageReducer.java"
public class hadoopCode.AverageReducer extends org.apache.hadoop.mapreduce.Reducer<org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable> {
  public hadoopCode.AverageReducer();
  public void reduce(org.apache.hadoop.io.Text, java.lang.Iterable<org.apache.hadoop.io.LongWritable>, org.apache.hadoop.mapreduce.Reducer<org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable>.Context) throws java.io.IOException, java.lang.InterruptedException;
  public void reduce(java.lang.Object, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException;
}
Compiled from "Chooser.java"
public class hadoopCode.Chooser implements hadoopCode.AnnotationChooser {
  static final long duration;
  static final java.lang.String span1;
  static final java.lang.String span2;
  static final java.lang.String annot1;
  static final java.lang.String annot2;
  static final long threshold;
  public hadoopCode.Chooser();
  public boolean shouldKeepSpan(mythrift.Span);
  public boolean shouldKeepAnnotation(mythrift.Annotation);
  public java.lang.String getId(mythrift.Span, mythrift.Annotation);
  static {};
}
Compiled from "OrderReducer.java"
public class hadoopCode.OrderReducer extends org.apache.hadoop.mapreduce.Reducer<org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.NullWritable> {
  public hadoopCode.OrderReducer();
  public void reduce(org.apache.hadoop.io.LongWritable, java.lang.Iterable<org.apache.hadoop.io.LongWritable>, org.apache.hadoop.mapreduce.Reducer<org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.NullWritable>.Context) throws java.io.IOException, java.lang.InterruptedException;
  public void reduce(java.lang.Object, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException;
}
Compiled from "Recent.java"
public class hadoopCode.Recent {
  public hadoopCode.Recent();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "RecentMapper.java"
public class hadoopCode.RecentMapper extends org.apache.hadoop.mapreduce.Mapper<org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable> {
  hadoopCode.AnnotationChooser chooser;
  public hadoopCode.RecentMapper();
  public void map(org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.mapreduce.Mapper<org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable>.Context) throws java.io.IOException, java.lang.InterruptedException;
  public void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException;
}
Compiled from "RecentReduce.java"
public class hadoopCode.RecentReduce extends org.apache.hadoop.mapreduce.Reducer<org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable> {
  public hadoopCode.RecentReduce();
  public void reduce(org.apache.hadoop.io.Text, java.lang.Iterable<org.apache.hadoop.io.LongWritable>, org.apache.hadoop.mapreduce.Reducer<org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.io.LongWritable>.Context) throws java.io.IOException, java.lang.InterruptedException;
  public void reduce(java.lang.Object, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException;
}
Compiled from "Annotation.java"
public class mythrift.Annotation implements org.apache.thrift.TBase<mythrift.Annotation, mythrift.Annotation$_Fields>, java.io.Serializable, java.lang.Cloneable, java.lang.Comparable<mythrift.Annotation> {
  public long timestamp;
  public java.lang.String value;
  public mythrift.Endpoint host;
  public static final java.util.Map<mythrift.Annotation$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public mythrift.Annotation();
  public mythrift.Annotation(long, java.lang.String);
  public mythrift.Annotation(mythrift.Annotation);
  public mythrift.Annotation deepCopy();
  public void clear();
  public long getTimestamp();
  public mythrift.Annotation setTimestamp(long);
  public void unsetTimestamp();
  public boolean isSetTimestamp();
  public void setTimestampIsSet(boolean);
  public java.lang.String getValue();
  public mythrift.Annotation setValue(java.lang.String);
  public void unsetValue();
  public boolean isSetValue();
  public void setValueIsSet(boolean);
  public mythrift.Endpoint getHost();
  public mythrift.Annotation setHost(mythrift.Endpoint);
  public void unsetHost();
  public boolean isSetHost();
  public void setHostIsSet(boolean);
  public void setFieldValue(mythrift.Annotation$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(mythrift.Annotation$_Fields);
  public boolean isSet(mythrift.Annotation$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(mythrift.Annotation);
  public int hashCode();
  public int compareTo(mythrift.Annotation);
  public mythrift.Annotation$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$300();
  static org.apache.thrift.protocol.TField access$400();
  static org.apache.thrift.protocol.TField access$500();
  static org.apache.thrift.protocol.TField access$600();
  static {};
}
Compiled from "Annotation.java"
class mythrift.Annotation$1 {
  static final int[] $SwitchMap$mythrift$Annotation$_Fields;
  static {};
}
Compiled from "Annotation.java"
class mythrift.Annotation$AnnotationStandardScheme extends org.apache.thrift.scheme.StandardScheme<mythrift.Annotation> {
  public void read(org.apache.thrift.protocol.TProtocol, mythrift.Annotation) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, mythrift.Annotation) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  mythrift.Annotation$AnnotationStandardScheme(mythrift.Annotation$1);
}
Compiled from "Annotation.java"
class mythrift.Annotation$AnnotationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public mythrift.Annotation$AnnotationStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  mythrift.Annotation$AnnotationStandardSchemeFactory(mythrift.Annotation$1);
}
Compiled from "Annotation.java"
class mythrift.Annotation$AnnotationTupleScheme extends org.apache.thrift.scheme.TupleScheme<mythrift.Annotation> {
  public void write(org.apache.thrift.protocol.TProtocol, mythrift.Annotation) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, mythrift.Annotation) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  mythrift.Annotation$AnnotationTupleScheme(mythrift.Annotation$1);
}
Compiled from "Annotation.java"
class mythrift.Annotation$AnnotationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public mythrift.Annotation$AnnotationTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  mythrift.Annotation$AnnotationTupleSchemeFactory(mythrift.Annotation$1);
}
Compiled from "Annotation.java"
public final class mythrift.Annotation$_Fields extends java.lang.Enum<mythrift.Annotation$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static final mythrift.Annotation$_Fields TIMESTAMP;
  public static final mythrift.Annotation$_Fields VALUE;
  public static final mythrift.Annotation$_Fields HOST;
  public static mythrift.Annotation$_Fields[] values();
  public static mythrift.Annotation$_Fields valueOf(java.lang.String);
  public static mythrift.Annotation$_Fields findByThriftId(int);
  public static mythrift.Annotation$_Fields findByThriftIdOrThrow(int);
  public static mythrift.Annotation$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "AnnotationType.java"
public final class mythrift.AnnotationType extends java.lang.Enum<mythrift.AnnotationType> implements org.apache.thrift.TEnum {
  public static final mythrift.AnnotationType BOOL;
  public static final mythrift.AnnotationType BYTES;
  public static final mythrift.AnnotationType I16;
  public static final mythrift.AnnotationType I32;
  public static final mythrift.AnnotationType I64;
  public static final mythrift.AnnotationType DOUBLE;
  public static final mythrift.AnnotationType STRING;
  public static mythrift.AnnotationType[] values();
  public static mythrift.AnnotationType valueOf(java.lang.String);
  public int getValue();
  public static mythrift.AnnotationType findByValue(int);
  static {};
}
Compiled from "BinaryAnnotation.java"
public class mythrift.BinaryAnnotation implements org.apache.thrift.TBase<mythrift.BinaryAnnotation, mythrift.BinaryAnnotation$_Fields>, java.io.Serializable, java.lang.Cloneable, java.lang.Comparable<mythrift.BinaryAnnotation> {
  public java.lang.String key;
  public java.nio.ByteBuffer value;
  public mythrift.AnnotationType annotation_type;
  public mythrift.Endpoint host;
  public static final java.util.Map<mythrift.BinaryAnnotation$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public mythrift.BinaryAnnotation();
  public mythrift.BinaryAnnotation(java.lang.String, java.nio.ByteBuffer, mythrift.AnnotationType);
  public mythrift.BinaryAnnotation(mythrift.BinaryAnnotation);
  public mythrift.BinaryAnnotation deepCopy();
  public void clear();
  public java.lang.String getKey();
  public mythrift.BinaryAnnotation setKey(java.lang.String);
  public void unsetKey();
  public boolean isSetKey();
  public void setKeyIsSet(boolean);
  public byte[] getValue();
  public java.nio.ByteBuffer bufferForValue();
  public mythrift.BinaryAnnotation setValue(byte[]);
  public mythrift.BinaryAnnotation setValue(java.nio.ByteBuffer);
  public void unsetValue();
  public boolean isSetValue();
  public void setValueIsSet(boolean);
  public mythrift.AnnotationType getAnnotation_type();
  public mythrift.BinaryAnnotation setAnnotation_type(mythrift.AnnotationType);
  public void unsetAnnotation_type();
  public boolean isSetAnnotation_type();
  public void setAnnotation_typeIsSet(boolean);
  public mythrift.Endpoint getHost();
  public mythrift.BinaryAnnotation setHost(mythrift.Endpoint);
  public void unsetHost();
  public boolean isSetHost();
  public void setHostIsSet(boolean);
  public void setFieldValue(mythrift.BinaryAnnotation$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(mythrift.BinaryAnnotation$_Fields);
  public boolean isSet(mythrift.BinaryAnnotation$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(mythrift.BinaryAnnotation);
  public int hashCode();
  public int compareTo(mythrift.BinaryAnnotation);
  public mythrift.BinaryAnnotation$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$300();
  static org.apache.thrift.protocol.TField access$400();
  static org.apache.thrift.protocol.TField access$500();
  static org.apache.thrift.protocol.TField access$600();
  static org.apache.thrift.protocol.TField access$700();
  static {};
}
Compiled from "BinaryAnnotation.java"
class mythrift.BinaryAnnotation$1 {
  static final int[] $SwitchMap$mythrift$BinaryAnnotation$_Fields;
  static {};
}
Compiled from "BinaryAnnotation.java"
class mythrift.BinaryAnnotation$BinaryAnnotationStandardScheme extends org.apache.thrift.scheme.StandardScheme<mythrift.BinaryAnnotation> {
  public void read(org.apache.thrift.protocol.TProtocol, mythrift.BinaryAnnotation) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, mythrift.BinaryAnnotation) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  mythrift.BinaryAnnotation$BinaryAnnotationStandardScheme(mythrift.BinaryAnnotation$1);
}
Compiled from "BinaryAnnotation.java"
class mythrift.BinaryAnnotation$BinaryAnnotationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public mythrift.BinaryAnnotation$BinaryAnnotationStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  mythrift.BinaryAnnotation$BinaryAnnotationStandardSchemeFactory(mythrift.BinaryAnnotation$1);
}
Compiled from "BinaryAnnotation.java"
class mythrift.BinaryAnnotation$BinaryAnnotationTupleScheme extends org.apache.thrift.scheme.TupleScheme<mythrift.BinaryAnnotation> {
  public void write(org.apache.thrift.protocol.TProtocol, mythrift.BinaryAnnotation) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, mythrift.BinaryAnnotation) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  mythrift.BinaryAnnotation$BinaryAnnotationTupleScheme(mythrift.BinaryAnnotation$1);
}
Compiled from "BinaryAnnotation.java"
class mythrift.BinaryAnnotation$BinaryAnnotationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public mythrift.BinaryAnnotation$BinaryAnnotationTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  mythrift.BinaryAnnotation$BinaryAnnotationTupleSchemeFactory(mythrift.BinaryAnnotation$1);
}
Compiled from "BinaryAnnotation.java"
public final class mythrift.BinaryAnnotation$_Fields extends java.lang.Enum<mythrift.BinaryAnnotation$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static final mythrift.BinaryAnnotation$_Fields KEY;
  public static final mythrift.BinaryAnnotation$_Fields VALUE;
  public static final mythrift.BinaryAnnotation$_Fields ANNOTATION_TYPE;
  public static final mythrift.BinaryAnnotation$_Fields HOST;
  public static mythrift.BinaryAnnotation$_Fields[] values();
  public static mythrift.BinaryAnnotation$_Fields valueOf(java.lang.String);
  public static mythrift.BinaryAnnotation$_Fields findByThriftId(int);
  public static mythrift.BinaryAnnotation$_Fields findByThriftIdOrThrow(int);
  public static mythrift.BinaryAnnotation$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "Endpoint.java"
public class mythrift.Endpoint implements org.apache.thrift.TBase<mythrift.Endpoint, mythrift.Endpoint$_Fields>, java.io.Serializable, java.lang.Cloneable, java.lang.Comparable<mythrift.Endpoint> {
  public int ipv4;
  public short port;
  public java.lang.String service_name;
  public static final java.util.Map<mythrift.Endpoint$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public mythrift.Endpoint();
  public mythrift.Endpoint(int, short, java.lang.String);
  public mythrift.Endpoint(mythrift.Endpoint);
  public mythrift.Endpoint deepCopy();
  public void clear();
  public int getIpv4();
  public mythrift.Endpoint setIpv4(int);
  public void unsetIpv4();
  public boolean isSetIpv4();
  public void setIpv4IsSet(boolean);
  public short getPort();
  public mythrift.Endpoint setPort(short);
  public void unsetPort();
  public boolean isSetPort();
  public void setPortIsSet(boolean);
  public java.lang.String getService_name();
  public mythrift.Endpoint setService_name(java.lang.String);
  public void unsetService_name();
  public boolean isSetService_name();
  public void setService_nameIsSet(boolean);
  public void setFieldValue(mythrift.Endpoint$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(mythrift.Endpoint$_Fields);
  public boolean isSet(mythrift.Endpoint$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(mythrift.Endpoint);
  public int hashCode();
  public int compareTo(mythrift.Endpoint);
  public mythrift.Endpoint$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$300();
  static org.apache.thrift.protocol.TField access$400();
  static org.apache.thrift.protocol.TField access$500();
  static org.apache.thrift.protocol.TField access$600();
  static {};
}
Compiled from "Endpoint.java"
class mythrift.Endpoint$1 {
  static final int[] $SwitchMap$mythrift$Endpoint$_Fields;
  static {};
}
Compiled from "Endpoint.java"
class mythrift.Endpoint$EndpointStandardScheme extends org.apache.thrift.scheme.StandardScheme<mythrift.Endpoint> {
  public void read(org.apache.thrift.protocol.TProtocol, mythrift.Endpoint) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, mythrift.Endpoint) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  mythrift.Endpoint$EndpointStandardScheme(mythrift.Endpoint$1);
}
Compiled from "Endpoint.java"
class mythrift.Endpoint$EndpointStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public mythrift.Endpoint$EndpointStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  mythrift.Endpoint$EndpointStandardSchemeFactory(mythrift.Endpoint$1);
}
Compiled from "Endpoint.java"
class mythrift.Endpoint$EndpointTupleScheme extends org.apache.thrift.scheme.TupleScheme<mythrift.Endpoint> {
  public void write(org.apache.thrift.protocol.TProtocol, mythrift.Endpoint) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, mythrift.Endpoint) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  mythrift.Endpoint$EndpointTupleScheme(mythrift.Endpoint$1);
}
Compiled from "Endpoint.java"
class mythrift.Endpoint$EndpointTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public mythrift.Endpoint$EndpointTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  mythrift.Endpoint$EndpointTupleSchemeFactory(mythrift.Endpoint$1);
}
Compiled from "Endpoint.java"
public final class mythrift.Endpoint$_Fields extends java.lang.Enum<mythrift.Endpoint$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static final mythrift.Endpoint$_Fields IPV4;
  public static final mythrift.Endpoint$_Fields PORT;
  public static final mythrift.Endpoint$_Fields SERVICE_NAME;
  public static mythrift.Endpoint$_Fields[] values();
  public static mythrift.Endpoint$_Fields valueOf(java.lang.String);
  public static mythrift.Endpoint$_Fields findByThriftId(int);
  public static mythrift.Endpoint$_Fields findByThriftIdOrThrow(int);
  public static mythrift.Endpoint$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "MyZipkinThrift.java"
public class mythrift.MyZipkinThrift {
  public mythrift.MyZipkinThrift();
  public static void main(java.lang.String[]);
}
Compiled from "Span.java"
public class mythrift.Span implements org.apache.thrift.TBase<mythrift.Span, mythrift.Span$_Fields>, java.io.Serializable, java.lang.Cloneable, java.lang.Comparable<mythrift.Span> {
  public long trace_id;
  public java.lang.String name;
  public long id;
  public long parent_id;
  public java.util.List<mythrift.Annotation> annotations;
  public java.util.List<mythrift.BinaryAnnotation> binary_annotations;
  public static final java.util.Map<mythrift.Span$_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  public mythrift.Span();
  public mythrift.Span(long, java.lang.String, long, java.util.List<mythrift.Annotation>, java.util.List<mythrift.BinaryAnnotation>);
  public mythrift.Span(mythrift.Span);
  public mythrift.Span deepCopy();
  public void clear();
  public long getTrace_id();
  public mythrift.Span setTrace_id(long);
  public void unsetTrace_id();
  public boolean isSetTrace_id();
  public void setTrace_idIsSet(boolean);
  public java.lang.String getName();
  public mythrift.Span setName(java.lang.String);
  public void unsetName();
  public boolean isSetName();
  public void setNameIsSet(boolean);
  public long getId();
  public mythrift.Span setId(long);
  public void unsetId();
  public boolean isSetId();
  public void setIdIsSet(boolean);
  public long getParent_id();
  public mythrift.Span setParent_id(long);
  public void unsetParent_id();
  public boolean isSetParent_id();
  public void setParent_idIsSet(boolean);
  public int getAnnotationsSize();
  public java.util.Iterator<mythrift.Annotation> getAnnotationsIterator();
  public void addToAnnotations(mythrift.Annotation);
  public java.util.List<mythrift.Annotation> getAnnotations();
  public mythrift.Span setAnnotations(java.util.List<mythrift.Annotation>);
  public void unsetAnnotations();
  public boolean isSetAnnotations();
  public void setAnnotationsIsSet(boolean);
  public int getBinary_annotationsSize();
  public java.util.Iterator<mythrift.BinaryAnnotation> getBinary_annotationsIterator();
  public void addToBinary_annotations(mythrift.BinaryAnnotation);
  public java.util.List<mythrift.BinaryAnnotation> getBinary_annotations();
  public mythrift.Span setBinary_annotations(java.util.List<mythrift.BinaryAnnotation>);
  public void unsetBinary_annotations();
  public boolean isSetBinary_annotations();
  public void setBinary_annotationsIsSet(boolean);
  public void setFieldValue(mythrift.Span$_Fields, java.lang.Object);
  public java.lang.Object getFieldValue(mythrift.Span$_Fields);
  public boolean isSet(mythrift.Span$_Fields);
  public boolean equals(java.lang.Object);
  public boolean equals(mythrift.Span);
  public int hashCode();
  public int compareTo(mythrift.Span);
  public mythrift.Span$_Fields fieldForId(int);
  public void read(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol) throws org.apache.thrift.TException;
  public java.lang.String toString();
  public void validate() throws org.apache.thrift.TException;
  public org.apache.thrift.TBase deepCopy();
  public void setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object);
  public java.lang.Object getFieldValue(org.apache.thrift.TFieldIdEnum);
  public boolean isSet(org.apache.thrift.TFieldIdEnum);
  public org.apache.thrift.TFieldIdEnum fieldForId(int);
  public int compareTo(java.lang.Object);
  static org.apache.thrift.protocol.TStruct access$300();
  static org.apache.thrift.protocol.TField access$400();
  static org.apache.thrift.protocol.TField access$500();
  static org.apache.thrift.protocol.TField access$600();
  static org.apache.thrift.protocol.TField access$700();
  static org.apache.thrift.protocol.TField access$800();
  static org.apache.thrift.protocol.TField access$900();
  static {};
}
Compiled from "Span.java"
class mythrift.Span$1 {
  static final int[] $SwitchMap$mythrift$Span$_Fields;
  static {};
}
Compiled from "Span.java"
class mythrift.Span$SpanStandardScheme extends org.apache.thrift.scheme.StandardScheme<mythrift.Span> {
  public void read(org.apache.thrift.protocol.TProtocol, mythrift.Span) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, mythrift.Span) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  mythrift.Span$SpanStandardScheme(mythrift.Span$1);
}
Compiled from "Span.java"
class mythrift.Span$SpanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public mythrift.Span$SpanStandardScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  mythrift.Span$SpanStandardSchemeFactory(mythrift.Span$1);
}
Compiled from "Span.java"
class mythrift.Span$SpanTupleScheme extends org.apache.thrift.scheme.TupleScheme<mythrift.Span> {
  public void write(org.apache.thrift.protocol.TProtocol, mythrift.Span) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, mythrift.Span) throws org.apache.thrift.TException;
  public void write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  public void read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase) throws org.apache.thrift.TException;
  mythrift.Span$SpanTupleScheme(mythrift.Span$1);
}
Compiled from "Span.java"
class mythrift.Span$SpanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  public mythrift.Span$SpanTupleScheme getScheme();
  public org.apache.thrift.scheme.IScheme getScheme();
  mythrift.Span$SpanTupleSchemeFactory(mythrift.Span$1);
}
Compiled from "Span.java"
public final class mythrift.Span$_Fields extends java.lang.Enum<mythrift.Span$_Fields> implements org.apache.thrift.TFieldIdEnum {
  public static final mythrift.Span$_Fields TRACE_ID;
  public static final mythrift.Span$_Fields NAME;
  public static final mythrift.Span$_Fields ID;
  public static final mythrift.Span$_Fields PARENT_ID;
  public static final mythrift.Span$_Fields ANNOTATIONS;
  public static final mythrift.Span$_Fields BINARY_ANNOTATIONS;
  public static mythrift.Span$_Fields[] values();
  public static mythrift.Span$_Fields valueOf(java.lang.String);
  public static mythrift.Span$_Fields findByThriftId(int);
  public static mythrift.Span$_Fields findByThriftIdOrThrow(int);
  public static mythrift.Span$_Fields findByName(java.lang.String);
  public short getThriftFieldId();
  public java.lang.String getFieldName();
  static {};
}
Compiled from "zipkinCoreConstants.java"
public class mythrift.zipkinCoreConstants {
  public static final java.lang.String CLIENT_SEND;
  public static final java.lang.String CLIENT_RECV;
  public static final java.lang.String SERVER_SEND;
  public static final java.lang.String SERVER_RECV;
  public mythrift.zipkinCoreConstants();
}
