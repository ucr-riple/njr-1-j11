Compiled from "DialogoAutori.java"
public class GUI.DialogoAutori extends javax.swing.JDialog {
  public GUI.DialogoAutori();
}
Compiled from "FinestraPrincipale.java"
public class GUI.FinestraPrincipale extends javax.swing.JFrame {
  main.FileItaco fileItaco;
  public static void main(java.lang.String[]);
  public GUI.FinestraPrincipale();
}
Compiled from "FinestraPrincipale.java"
final class GUI.FinestraPrincipale$1 implements java.lang.Runnable {
  GUI.FinestraPrincipale$1();
  public void run();
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$10 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$10(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$11 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$11(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$12 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$12(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$13 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$13(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$14 implements java.awt.event.ActionListener {
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$14(GUI.FinestraPrincipale);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$15 implements java.awt.event.ActionListener {
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$15(GUI.FinestraPrincipale);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$16 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$16(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$17 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$17(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$18 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$18(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$19 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$19(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$2 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$2(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$20 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$20(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$21 extends java.util.logging.Handler {
  final javax.swing.JTextArea val$PaneLogger;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$21(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void publish(java.util.logging.LogRecord);
  public void flush();
  public void close() throws java.lang.SecurityException;
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$21$1 implements java.lang.Runnable {
  final java.util.logging.LogRecord val$record;
  final GUI.FinestraPrincipale$21 this$1;
  GUI.FinestraPrincipale$21$1(GUI.FinestraPrincipale$21, java.util.logging.LogRecord);
  public void run();
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$3 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$3(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$4 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$4(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$5 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$5(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$6 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$6(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$7 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$7(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$8 implements java.awt.event.ActionListener {
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$8(GUI.FinestraPrincipale);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraPrincipale.java"
class GUI.FinestraPrincipale$9 implements java.awt.event.ActionListener {
  final javax.swing.JTextArea val$Panecodice;
  final GUI.FinestraPrincipale this$0;
  GUI.FinestraPrincipale$9(GUI.FinestraPrincipale, javax.swing.JTextArea);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FinestraSintassi.java"
public class GUI.FinestraSintassi extends javax.swing.JFrame {
  public GUI.FinestraSintassi();
}
Compiled from "Blocco.java"
public interface compilatore.Blocco extends compilatore.Produzione {
}
Compiled from "CTarget.java"
public class compilatore.CTarget extends compilatore.ScrittoreTarget {
  public void registraVariabile(java.lang.String) throws compilatore.EccezioneSemantica;
  public void caricaVariabile(java.lang.String) throws compilatore.EccezioneSemantica;
  public void storeInVariabile(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void costante(int) throws compilatore.EccezioneSemantica;
  public void costante(java.lang.String) throws compilatore.EccezioneSemantica;
  public void somma(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void sottrazione(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void prodotto(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void divisione(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void maggiore(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void minore(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void uguaglianza(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void espressioneInParentesi(compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void stampa(compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void stampa(java.lang.String) throws compilatore.EccezioneSemantica;
  public void leggi(java.lang.String) throws compilatore.EccezioneSemantica;
  public void leggiElementoVettore(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void se(compilatore.Espressione, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void seAltrimenti(compilatore.Espressione, compilatore.Blocco, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void finche(compilatore.Espressione, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void definisciVettore(java.lang.String, java.lang.Integer) throws compilatore.EccezioneSemantica;
  public void caricaElementoVettore(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void storeElementoVettore(java.lang.String, compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void definisciFunzione(java.lang.String, java.lang.String[], java.lang.String, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void eseguiFunzione(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void eseguiFunzioneSenzaRitorno(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void scriviMain(compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void caricaVettore(java.lang.String) throws compilatore.EccezioneSemantica;
  public void caricaDimensioneVettore(java.lang.String) throws compilatore.EccezioneSemantica;
  public static void compilaFile(java.lang.String) throws java.lang.Exception;
}
Compiled from "CTarget.java"
class compilatore.CTarget$AggiungiVirgola extends java.io.PrintStream {
  compilatore.CTarget$AggiungiVirgola(java.io.PrintStream);
  public void print(java.lang.String);
}
Compiled from "EccezioneSemantica.java"
public class compilatore.EccezioneSemantica extends java.lang.Exception {
  public compilatore.EccezioneSemantica(java.lang.String);
}
Compiled from "Espressione.java"
public interface compilatore.Espressione extends compilatore.Produzione {
}
Compiled from "JasminException.java"
public class compilatore.JasminException extends java.lang.Exception {
  compilatore.JasminException(java.lang.String);
}
Compiled from "JasminTarget.java"
public class compilatore.JasminTarget extends compilatore.ScrittoreTarget {
  public void registraVariabile(java.lang.String) throws compilatore.EccezioneSemantica;
  protected int idVariabile(java.lang.String) throws compilatore.EccezioneSemantica;
  protected int numeroVariabili() throws compilatore.EccezioneSemantica;
  protected void pushScope() throws compilatore.EccezioneSemantica;
  protected void popScope() throws compilatore.EccezioneSemantica;
  public compilatore.JasminTarget(java.lang.String, java.io.OutputStream) throws java.io.IOException;
  public void somma(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void caricaVariabile(java.lang.String) throws compilatore.EccezioneSemantica;
  public void costante(int) throws compilatore.EccezioneSemantica;
  public void sottrazione(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void prodotto(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void divisione(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void maggiore(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void minore(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void uguaglianza(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void stampa(compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void leggi(java.lang.String) throws compilatore.EccezioneSemantica;
  public void se(compilatore.Espressione, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void seAltrimenti(compilatore.Espressione, compilatore.Blocco, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void storeInVariabile(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void espressioneInParentesi(compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void finche(compilatore.Espressione, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public static void compilaFile(java.lang.String, boolean) throws edu.tum.cup2.generator.exceptions.GeneratorException, java.io.FileNotFoundException, edu.tum.cup2.parser.exceptions.LRParserException, java.io.IOException, compilatore.JasminException, compilatore.EccezioneSemantica;
  public void costante(java.lang.String) throws compilatore.EccezioneSemantica;
  public void stampa(java.lang.String) throws compilatore.EccezioneSemantica;
  public void definisciVettore(java.lang.String, java.lang.Integer) throws compilatore.EccezioneSemantica;
  public void leggiElementoVettore(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void caricaElementoVettore(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void storeElementoVettore(java.lang.String, compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public java.lang.String generaLabel() throws compilatore.EccezioneSemantica;
  public void scriviMain(compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void definisciFunzione(java.lang.String, java.lang.String[], java.lang.String, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void eseguiFunzione(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void caricaVettore(java.lang.String) throws compilatore.EccezioneSemantica;
  public void caricaDimensioneVettore(java.lang.String) throws compilatore.EccezioneSemantica;
  public void eseguiFunzioneSenzaRitorno(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
}
Compiled from "Produzione.java"
public interface compilatore.Produzione {
  public abstract void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "RubyTarget.java"
public class compilatore.RubyTarget extends compilatore.ScrittoreTarget {
  public void registraVariabile(java.lang.String) throws compilatore.EccezioneSemantica;
  public void caricaVariabile(java.lang.String) throws compilatore.EccezioneSemantica;
  public void storeInVariabile(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void costante(int) throws compilatore.EccezioneSemantica;
  public void costante(java.lang.String) throws compilatore.EccezioneSemantica;
  public void somma(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void sottrazione(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void prodotto(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void divisione(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void maggiore(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void minore(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void uguaglianza(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void espressioneInParentesi(compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void stampa(compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void stampa(java.lang.String) throws compilatore.EccezioneSemantica;
  public void leggi(java.lang.String) throws compilatore.EccezioneSemantica;
  public void leggiElementoVettore(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void se(compilatore.Espressione, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void seAltrimenti(compilatore.Espressione, compilatore.Blocco, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void finche(compilatore.Espressione, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void definisciVettore(java.lang.String, java.lang.Integer) throws compilatore.EccezioneSemantica;
  public void caricaElementoVettore(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void storeElementoVettore(java.lang.String, compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void definisciFunzione(java.lang.String, java.lang.String[], java.lang.String, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void eseguiFunzione(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void eseguiFunzioneSenzaRitorno(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public void scriviMain(compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public void caricaVettore(java.lang.String) throws compilatore.EccezioneSemantica;
  public void caricaDimensioneVettore(java.lang.String) throws compilatore.EccezioneSemantica;
  public static void compilaFile(java.lang.String) throws java.lang.Exception;
}
Compiled from "RubyTarget.java"
class compilatore.RubyTarget$AggiungiVirgola extends java.io.PrintStream {
  compilatore.RubyTarget$AggiungiVirgola(java.io.PrintStream);
  public void print(java.lang.String);
}
Compiled from "ScrittoreTarget.java"
public abstract class compilatore.ScrittoreTarget {
  public compilatore.ScrittoreTarget();
  public abstract void registraVariabile(java.lang.String) throws compilatore.EccezioneSemantica;
  public abstract void caricaVariabile(java.lang.String) throws compilatore.EccezioneSemantica;
  public abstract void storeInVariabile(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void costante(int) throws compilatore.EccezioneSemantica;
  public abstract void costante(java.lang.String) throws compilatore.EccezioneSemantica;
  public abstract void somma(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void sottrazione(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void prodotto(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void divisione(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void maggiore(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void minore(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void uguaglianza(compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void espressioneInParentesi(compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void stampa(compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void stampa(java.lang.String) throws compilatore.EccezioneSemantica;
  public abstract void leggi(java.lang.String) throws compilatore.EccezioneSemantica;
  public abstract void leggiElementoVettore(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void se(compilatore.Espressione, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public abstract void seAltrimenti(compilatore.Espressione, compilatore.Blocco, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public abstract void finche(compilatore.Espressione, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public abstract void definisciVettore(java.lang.String, java.lang.Integer) throws compilatore.EccezioneSemantica;
  public abstract void caricaElementoVettore(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void storeElementoVettore(java.lang.String, compilatore.Espressione, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void caricaVettore(java.lang.String) throws compilatore.EccezioneSemantica;
  public abstract void caricaDimensioneVettore(java.lang.String) throws compilatore.EccezioneSemantica;
  public abstract void definisciFunzione(java.lang.String, java.lang.String[], java.lang.String, compilatore.Blocco) throws compilatore.EccezioneSemantica;
  public abstract void eseguiFunzione(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void eseguiFunzioneSenzaRitorno(java.lang.String, compilatore.Espressione) throws compilatore.EccezioneSemantica;
  public abstract void scriviMain(compilatore.Blocco) throws compilatore.EccezioneSemantica;
}
Compiled from "AssegnamentoVariabile.java"
public class istruzioni.AssegnamentoVariabile implements istruzioni.I {
  public istruzioni.AssegnamentoVariabile(java.lang.String, istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "AssegnamentoVettore.java"
public class istruzioni.AssegnamentoVettore implements istruzioni.I {
  public istruzioni.AssegnamentoVettore(java.lang.String, istruzioni.espressioni.E, istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "C.java"
public interface istruzioni.C extends istruzioni.N,compilatore.Produzione {
}
Compiled from "CicloFinche.java"
public class istruzioni.CicloFinche implements istruzioni.C {
  public istruzioni.CicloFinche(istruzioni.logiche.B, istruzioni.N);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "CondizionaleAltrimenti.java"
public class istruzioni.CondizionaleAltrimenti implements istruzioni.C {
  public istruzioni.CondizionaleAltrimenti(istruzioni.logiche.B, istruzioni.N, istruzioni.N);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "CondizionaleSe.java"
public class istruzioni.CondizionaleSe implements istruzioni.C {
  public istruzioni.CondizionaleSe(istruzioni.logiche.B, istruzioni.N);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "DefinizioneAssegnamentoVariabile.java"
public class istruzioni.DefinizioneAssegnamentoVariabile implements istruzioni.I {
  public istruzioni.DefinizioneAssegnamentoVariabile(java.lang.String, istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "DefinizioneMain.java"
public class istruzioni.DefinizioneMain implements istruzioni.S {
  public istruzioni.DefinizioneMain(istruzioni.N);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "DefinizioneVettore.java"
public class istruzioni.DefinizioneVettore implements istruzioni.I {
  public istruzioni.DefinizioneVettore(java.lang.String, java.lang.Integer);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "I.java"
public interface istruzioni.I extends istruzioni.N {
}
Compiled from "LetturaDaTastiera.java"
public class istruzioni.LetturaDaTastiera implements istruzioni.I {
  java.lang.String identificatore;
  public istruzioni.LetturaDaTastiera(java.lang.String);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "LetturaTastieraElementoVettore.java"
public class istruzioni.LetturaTastieraElementoVettore implements istruzioni.I {
  public istruzioni.LetturaTastieraElementoVettore(java.lang.String, istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "N.java"
public interface istruzioni.N extends compilatore.Blocco,istruzioni.Z {
}
Compiled from "S.java"
public interface istruzioni.S extends compilatore.Produzione {
}
Compiled from "Stampa.java"
public class istruzioni.Stampa implements istruzioni.I {
  public istruzioni.Stampa(istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "StampaStringa.java"
public class istruzioni.StampaStringa implements istruzioni.I {
  public istruzioni.StampaStringa(java.lang.String);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "SuccessioneCN.java"
public class istruzioni.SuccessioneCN implements istruzioni.N {
  public istruzioni.SuccessioneCN(istruzioni.C, istruzioni.N);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "SuccessioneIstruzioni.java"
public class istruzioni.SuccessioneIstruzioni implements istruzioni.N {
  public istruzioni.SuccessioneIstruzioni(compilatore.Produzione, compilatore.Produzione);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "Z.java"
public interface istruzioni.Z extends compilatore.Produzione,istruzioni.S {
}
Compiled from "Costante.java"
public class istruzioni.espressioni.Costante implements istruzioni.espressioni.F {
  public istruzioni.espressioni.Costante(int);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "Divisione.java"
public class istruzioni.espressioni.Divisione implements istruzioni.espressioni.T {
  public istruzioni.espressioni.Divisione(istruzioni.espressioni.T, istruzioni.espressioni.F);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "E.java"
public interface istruzioni.espressioni.E extends compilatore.Espressione,istruzioni.espressioni.U {
}
Compiled from "ElementoVettore.java"
public class istruzioni.espressioni.ElementoVettore implements istruzioni.espressioni.F {
  public istruzioni.espressioni.ElementoVettore(java.lang.String, istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "EspressioneInParentesi.java"
public class istruzioni.espressioni.EspressioneInParentesi implements istruzioni.espressioni.F {
  public istruzioni.espressioni.EspressioneInParentesi(istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "F.java"
public interface istruzioni.espressioni.F extends istruzioni.espressioni.T {
}
Compiled from "Prodotto.java"
public class istruzioni.espressioni.Prodotto implements istruzioni.espressioni.T {
  public istruzioni.espressioni.Prodotto(istruzioni.espressioni.T, istruzioni.espressioni.F);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "Somma.java"
public class istruzioni.espressioni.Somma implements istruzioni.espressioni.E {
  public istruzioni.espressioni.Somma(istruzioni.espressioni.E, istruzioni.espressioni.T);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "Sottrazione.java"
public class istruzioni.espressioni.Sottrazione implements istruzioni.espressioni.E {
  public istruzioni.espressioni.Sottrazione(istruzioni.espressioni.E, istruzioni.espressioni.T);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "T.java"
public interface istruzioni.espressioni.T extends istruzioni.espressioni.E {
}
Compiled from "U.java"
public interface istruzioni.espressioni.U extends compilatore.Produzione,istruzioni.espressioni.W2 {
}
Compiled from "Variabile.java"
public class istruzioni.espressioni.Variabile implements istruzioni.espressioni.F {
  public istruzioni.espressioni.Variabile(java.lang.String);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "W.java"
public interface istruzioni.espressioni.W extends compilatore.Espressione {
}
Compiled from "W2.java"
public interface istruzioni.espressioni.W2 extends istruzioni.espressioni.W {
}
Compiled from "A.java"
public interface istruzioni.funzioni.A {
  public abstract void aggiungiALista(java.util.List<java.lang.String>);
}
Compiled from "A2.java"
public interface istruzioni.funzioni.A2 extends istruzioni.funzioni.A {
}
Compiled from "ArgomentiChiamataFunzione.java"
public class istruzioni.funzioni.ArgomentiChiamataFunzione implements istruzioni.espressioni.W2 {
  public istruzioni.funzioni.ArgomentiChiamataFunzione(istruzioni.espressioni.U, istruzioni.espressioni.W2);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "ArgomentiDefinizioneFunzione.java"
public class istruzioni.funzioni.ArgomentiDefinizioneFunzione implements istruzioni.funzioni.A2 {
  public istruzioni.funzioni.ArgomentiDefinizioneFunzione(istruzioni.funzioni.R, istruzioni.funzioni.A2);
  public void aggiungiALista(java.util.List<java.lang.String>);
}
Compiled from "ArgomentoVariabileDefinizioneFunzione.java"
public class istruzioni.funzioni.ArgomentoVariabileDefinizioneFunzione implements istruzioni.funzioni.R {
  public istruzioni.funzioni.ArgomentoVariabileDefinizioneFunzione(java.lang.String);
  public void aggiungiALista(java.util.List<java.lang.String>);
}
Compiled from "ArgomentoVettoreChiamataFunzione.java"
public class istruzioni.funzioni.ArgomentoVettoreChiamataFunzione implements istruzioni.espressioni.U {
  public istruzioni.funzioni.ArgomentoVettoreChiamataFunzione(java.lang.String);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "ArgomentoVettoreDefinizioneFunzione.java"
public class istruzioni.funzioni.ArgomentoVettoreDefinizioneFunzione implements istruzioni.funzioni.R {
  public istruzioni.funzioni.ArgomentoVettoreDefinizioneFunzione(java.lang.String, java.lang.String);
  public void aggiungiALista(java.util.List<java.lang.String>);
}
Compiled from "ChiamaFunzione.java"
public class istruzioni.funzioni.ChiamaFunzione implements istruzioni.espressioni.F,istruzioni.I {
  public istruzioni.funzioni.ChiamaFunzione(java.lang.String, istruzioni.espressioni.W);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "ChiamaFunzioneSenzaRitorno.java"
public class istruzioni.funzioni.ChiamaFunzioneSenzaRitorno implements istruzioni.espressioni.F,istruzioni.I {
  public istruzioni.funzioni.ChiamaFunzioneSenzaRitorno(java.lang.String, istruzioni.espressioni.W);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "DefinizioneFunzione.java"
public class istruzioni.funzioni.DefinizioneFunzione implements istruzioni.Z {
  public istruzioni.funzioni.DefinizioneFunzione(java.lang.String, istruzioni.funzioni.A, java.lang.String, istruzioni.N);
  public istruzioni.funzioni.DefinizioneFunzione(java.lang.String, istruzioni.funzioni.A, istruzioni.N);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "R.java"
public interface istruzioni.funzioni.R extends istruzioni.funzioni.A2 {
}
Compiled from "B.java"
public interface istruzioni.logiche.B extends compilatore.Espressione {
}
Compiled from "Maggiore.java"
public class istruzioni.logiche.Maggiore implements istruzioni.logiche.B {
  public istruzioni.logiche.Maggiore(istruzioni.espressioni.E, istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "Minore.java"
public class istruzioni.logiche.Minore implements istruzioni.logiche.B {
  public istruzioni.logiche.Minore(istruzioni.espressioni.E, istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "Uguaglianza.java"
public class istruzioni.logiche.Uguaglianza implements istruzioni.logiche.B {
  public istruzioni.logiche.Uguaglianza(istruzioni.espressioni.E, istruzioni.espressioni.E);
  public void scriviCodice(compilatore.ScrittoreTarget) throws compilatore.EccezioneSemantica;
}
Compiled from "ElencoLinguaggi.java"
public final class main.ElencoLinguaggi extends java.lang.Enum<main.ElencoLinguaggi> {
  public static final main.ElencoLinguaggi CLASS;
  public static final main.ElencoLinguaggi JASMIN;
  public static final main.ElencoLinguaggi C;
  public static final main.ElencoLinguaggi RUBY;
  public static main.ElencoLinguaggi[] values();
  public static main.ElencoLinguaggi valueOf(java.lang.String);
  static {};
}
Compiled from "FileItaco.java"
public class main.FileItaco {
  java.util.logging.Logger itacoLogger;
  public main.FileItaco();
  public main.FileItaco(java.lang.String);
  public boolean fileSalvato();
  public boolean salvaFile(java.lang.String);
  public boolean salvaFile(java.lang.String, java.lang.String);
  public boolean compila(main.ElencoLinguaggi);
  public boolean esegui();
  public java.lang.String getContenuto();
}
Compiled from "FileItaco.java"
class main.FileItaco$1 {
  static final int[] $SwitchMap$main$ElencoLinguaggi;
  static {};
}
Compiled from "ParserSpec.java"
public class main.ParserSpec extends edu.tum.cup2.spec.CUP2Specification {
  public main.ParserSpec();
}
Compiled from "ParserSpec.java"
class main.ParserSpec$1 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$1(main.ParserSpec);
  public istruzioni.S a(istruzioni.Z, istruzioni.S);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$10 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$10(main.ParserSpec);
  public istruzioni.funzioni.R a(java.lang.String, java.lang.String);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$11 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$11(main.ParserSpec);
  public istruzioni.N a(istruzioni.I);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$12 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$12(main.ParserSpec);
  public istruzioni.N a(istruzioni.I, istruzioni.N);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$13 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$13(main.ParserSpec);
  public istruzioni.N a(istruzioni.C, istruzioni.N);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$14 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$14(main.ParserSpec);
  public istruzioni.N a(istruzioni.C);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$15 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$15(main.ParserSpec);
  public istruzioni.I a(istruzioni.espressioni.E, java.lang.String);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$16 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$16(main.ParserSpec);
  public istruzioni.I a(istruzioni.espressioni.E, java.lang.String);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$17 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$17(main.ParserSpec);
  public istruzioni.I a(java.lang.String);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$18 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$18(main.ParserSpec);
  public istruzioni.I a(java.lang.String);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$19 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$19(main.ParserSpec);
  public istruzioni.I a(java.lang.String, java.lang.Integer);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$2 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$2(main.ParserSpec);
  public istruzioni.S a(istruzioni.N);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$20 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$20(main.ParserSpec);
  public istruzioni.I a(istruzioni.espressioni.E, java.lang.String, istruzioni.espressioni.E);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$21 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$21(main.ParserSpec);
  public istruzioni.I a(istruzioni.espressioni.E);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$22 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$22(main.ParserSpec);
  public istruzioni.I a(java.lang.String);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$23 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$23(main.ParserSpec);
  public istruzioni.I a(java.lang.String, istruzioni.espressioni.E);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$24 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$24(main.ParserSpec);
  public istruzioni.I a(java.lang.String, istruzioni.espressioni.W);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$25 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$25(main.ParserSpec);
  public istruzioni.C a(istruzioni.logiche.B, istruzioni.N);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$26 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$26(main.ParserSpec);
  public istruzioni.C a(istruzioni.logiche.B, istruzioni.N, istruzioni.N);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$27 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$27(main.ParserSpec);
  public istruzioni.C a(istruzioni.logiche.B, istruzioni.N);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$28 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$28(main.ParserSpec);
  public istruzioni.logiche.B a(istruzioni.espressioni.E, istruzioni.espressioni.E);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$29 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$29(main.ParserSpec);
  public istruzioni.logiche.B a(istruzioni.espressioni.E, istruzioni.espressioni.E);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$3 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$3(main.ParserSpec);
  public istruzioni.Z a(java.lang.String, istruzioni.funzioni.A, java.lang.String, istruzioni.N);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$30 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$30(main.ParserSpec);
  public istruzioni.logiche.B a(istruzioni.espressioni.E, istruzioni.espressioni.E);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$31 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$31(main.ParserSpec);
  public istruzioni.espressioni.E a(istruzioni.espressioni.E, istruzioni.espressioni.T);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$32 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$32(main.ParserSpec);
  public istruzioni.espressioni.E a(istruzioni.espressioni.E, istruzioni.espressioni.T);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$33 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$33(main.ParserSpec);
  public istruzioni.espressioni.E a(istruzioni.espressioni.T);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$34 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$34(main.ParserSpec);
  public istruzioni.espressioni.T a(istruzioni.espressioni.T, istruzioni.espressioni.F);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$35 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$35(main.ParserSpec);
  public istruzioni.espressioni.T a(istruzioni.espressioni.T, istruzioni.espressioni.F);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$36 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$36(main.ParserSpec);
  public istruzioni.espressioni.T a(istruzioni.espressioni.F);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$37 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$37(main.ParserSpec);
  public istruzioni.espressioni.F a(java.lang.String);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$38 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$38(main.ParserSpec);
  public istruzioni.espressioni.F a(java.lang.Integer);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$39 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$39(main.ParserSpec);
  public istruzioni.espressioni.F a(istruzioni.espressioni.E);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$4 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$4(main.ParserSpec);
  public istruzioni.Z a(java.lang.String, istruzioni.funzioni.A, istruzioni.N);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$40 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$40(main.ParserSpec);
  public istruzioni.espressioni.F a(java.lang.String, istruzioni.espressioni.E);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$41 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$41(main.ParserSpec);
  public istruzioni.espressioni.F a(java.lang.String, istruzioni.espressioni.W);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$42 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$42(main.ParserSpec);
  public istruzioni.espressioni.W a();
}
Compiled from "ParserSpec.java"
class main.ParserSpec$43 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$43(main.ParserSpec);
  public istruzioni.espressioni.W a(istruzioni.espressioni.W2);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$44 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$44(main.ParserSpec);
  public istruzioni.espressioni.W2 a(istruzioni.espressioni.U, istruzioni.espressioni.W2);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$45 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$45(main.ParserSpec);
  public istruzioni.espressioni.W2 a(istruzioni.espressioni.U);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$46 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$46(main.ParserSpec);
  public istruzioni.espressioni.U a(istruzioni.espressioni.E);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$47 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$47(main.ParserSpec);
  public istruzioni.espressioni.U a(java.lang.String);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$5 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$5(main.ParserSpec);
  public istruzioni.funzioni.A a();
}
Compiled from "ParserSpec.java"
class main.ParserSpec$6 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$6(main.ParserSpec);
  public istruzioni.funzioni.A a(istruzioni.funzioni.A2);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$7 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$7(main.ParserSpec);
  public istruzioni.funzioni.A2 a(istruzioni.funzioni.R);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$8 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$8(main.ParserSpec);
  public istruzioni.funzioni.A2 a(istruzioni.funzioni.R, istruzioni.funzioni.A2);
}
Compiled from "ParserSpec.java"
class main.ParserSpec$9 extends edu.tum.cup2.semantics.Action {
  final main.ParserSpec this$0;
  main.ParserSpec$9(main.ParserSpec);
  public istruzioni.funzioni.R a(java.lang.String);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$A extends edu.tum.cup2.semantics.SymbolValue<istruzioni.funzioni.A> {
  final main.ParserSpec this$0;
  public main.ParserSpec$A(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$A2 extends edu.tum.cup2.semantics.SymbolValue<istruzioni.funzioni.A2> {
  final main.ParserSpec this$0;
  public main.ParserSpec$A2(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$B extends edu.tum.cup2.semantics.SymbolValue<istruzioni.logiche.B> {
  final main.ParserSpec this$0;
  public main.ParserSpec$B(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$C extends edu.tum.cup2.semantics.SymbolValue<istruzioni.C> {
  final main.ParserSpec this$0;
  public main.ParserSpec$C(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$E extends edu.tum.cup2.semantics.SymbolValue<istruzioni.espressioni.E> {
  final main.ParserSpec this$0;
  public main.ParserSpec$E(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$F extends edu.tum.cup2.semantics.SymbolValue<istruzioni.espressioni.F> {
  final main.ParserSpec this$0;
  public main.ParserSpec$F(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$I extends edu.tum.cup2.semantics.SymbolValue<istruzioni.I> {
  final main.ParserSpec this$0;
  public main.ParserSpec$I(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$IDENTIFICATORE extends edu.tum.cup2.semantics.SymbolValue<java.lang.String> {
  final main.ParserSpec this$0;
  public main.ParserSpec$IDENTIFICATORE(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$N extends edu.tum.cup2.semantics.SymbolValue<istruzioni.N> {
  final main.ParserSpec this$0;
  public main.ParserSpec$N(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$NUMERO_INTERO extends edu.tum.cup2.semantics.SymbolValue<java.lang.Integer> {
  final main.ParserSpec this$0;
  public main.ParserSpec$NUMERO_INTERO(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public final class main.ParserSpec$NonTerminals extends java.lang.Enum<main.ParserSpec$NonTerminals> implements edu.tum.cup2.grammar.NonTerminal {
  public static final main.ParserSpec$NonTerminals S;
  public static final main.ParserSpec$NonTerminals Z;
  public static final main.ParserSpec$NonTerminals N;
  public static final main.ParserSpec$NonTerminals I;
  public static final main.ParserSpec$NonTerminals E;
  public static final main.ParserSpec$NonTerminals T;
  public static final main.ParserSpec$NonTerminals F;
  public static final main.ParserSpec$NonTerminals B;
  public static final main.ParserSpec$NonTerminals C;
  public static final main.ParserSpec$NonTerminals A;
  public static final main.ParserSpec$NonTerminals A2;
  public static final main.ParserSpec$NonTerminals R;
  public static final main.ParserSpec$NonTerminals W;
  public static final main.ParserSpec$NonTerminals W2;
  public static final main.ParserSpec$NonTerminals U;
  public static main.ParserSpec$NonTerminals[] values();
  public static main.ParserSpec$NonTerminals valueOf(java.lang.String);
  static {};
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$R extends edu.tum.cup2.semantics.SymbolValue<istruzioni.funzioni.R> {
  final main.ParserSpec this$0;
  public main.ParserSpec$R(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$S extends edu.tum.cup2.semantics.SymbolValue<istruzioni.S> {
  final main.ParserSpec this$0;
  public main.ParserSpec$S(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$STRINGA extends edu.tum.cup2.semantics.SymbolValue<java.lang.String> {
  final main.ParserSpec this$0;
  public main.ParserSpec$STRINGA(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$T extends edu.tum.cup2.semantics.SymbolValue<istruzioni.espressioni.T> {
  final main.ParserSpec this$0;
  public main.ParserSpec$T(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public final class main.ParserSpec$Terminals extends java.lang.Enum<main.ParserSpec$Terminals> implements edu.tum.cup2.grammar.Terminal {
  public static final main.ParserSpec$Terminals SE;
  public static final main.ParserSpec$Terminals ALTRIMENTI;
  public static final main.ParserSpec$Terminals FINCHE;
  public static final main.ParserSpec$Terminals INTERO;
  public static final main.ParserSpec$Terminals PARENTESI_QUADRA_APERTA;
  public static final main.ParserSpec$Terminals PARENTESI_QUADRA_CHIUSA;
  public static final main.ParserSpec$Terminals DUE_PUNTI;
  public static final main.ParserSpec$Terminals PUNTO;
  public static final main.ParserSpec$Terminals VIRGOLA;
  public static final main.ParserSpec$Terminals PARENTESI_TONDA_APERTA;
  public static final main.ParserSpec$Terminals PARENTESI_TONDA_CHIUSA;
  public static final main.ParserSpec$Terminals UGUALE;
  public static final main.ParserSpec$Terminals LEGGI;
  public static final main.ParserSpec$Terminals SCRIVI;
  public static final main.ParserSpec$Terminals IDENTIFICATORE;
  public static final main.ParserSpec$Terminals NUMERO_INTERO;
  public static final main.ParserSpec$Terminals SOMMA;
  public static final main.ParserSpec$Terminals SOTTRAZIONE;
  public static final main.ParserSpec$Terminals PRODOTTO;
  public static final main.ParserSpec$Terminals DIVISIONE;
  public static final main.ParserSpec$Terminals ASSEGNAZIONE;
  public static final main.ParserSpec$Terminals STRINGA;
  public static final main.ParserSpec$Terminals MINORE;
  public static final main.ParserSpec$Terminals MAGGIORE;
  public static final main.ParserSpec$Terminals VETTORE;
  public static final main.ParserSpec$Terminals FUNZIONE;
  public static final main.ParserSpec$Terminals PIPE;
  public static final main.ParserSpec$Terminals PUNTO_VIRGOLA;
  public static main.ParserSpec$Terminals[] values();
  public static main.ParserSpec$Terminals valueOf(java.lang.String);
  static {};
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$U extends edu.tum.cup2.semantics.SymbolValue<istruzioni.espressioni.U> {
  final main.ParserSpec this$0;
  public main.ParserSpec$U(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$W extends edu.tum.cup2.semantics.SymbolValue<istruzioni.espressioni.W> {
  final main.ParserSpec this$0;
  public main.ParserSpec$W(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$W2 extends edu.tum.cup2.semantics.SymbolValue<istruzioni.espressioni.W2> {
  final main.ParserSpec this$0;
  public main.ParserSpec$W2(main.ParserSpec);
}
Compiled from "ParserSpec.java"
public class main.ParserSpec$Z extends edu.tum.cup2.semantics.SymbolValue<istruzioni.Z> {
  final main.ParserSpec this$0;
  public main.ParserSpec$Z(main.ParserSpec);
}
Compiled from "Runner.java"
public class main.Runner {
  public main.Runner();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  public static void generaCodiceC(java.lang.String) throws java.lang.Exception;
  public static void generaCodiceRuby(java.lang.String) throws java.lang.Exception;
  public static void generaCodiceJasmin(java.lang.String) throws java.lang.Exception;
  public static void generaByteCodeJava(java.lang.String) throws java.lang.Exception;
}
Compiled from "Scanner.java"
public class main.Scanner implements edu.tum.cup2.scanner.Scanner {
  public static final int YYEOF;
  public static final int STRING;
  public static final int YYINITIAL;
  java.lang.StringBuffer string;
  public main.Scanner(java.io.Reader);
  public main.Scanner(java.io.InputStream);
  public final void yyclose() throws java.io.IOException;
  public final void yyreset(java.io.Reader);
  public final int yystate();
  public final void yybegin(int);
  public final java.lang.String yytext();
  public final char yycharat(int);
  public final int yylength();
  public void yypushback(int);
  public edu.tum.cup2.scanner.ScannerToken<java.lang.Object> readNextTerminal() throws java.io.IOException;
  static {};
}
Compiled from "AllTests.java"
public class test.AllTests {
  public test.AllTests();
}
Compiled from "ErrorTest.java"
public class test.ErrorTest {
  public test.ErrorTest();
  public void testDoppiaDefinizioneFunzione();
  public void testDoppiaDefinizioneVariabile();
  public void testUsoVariabileNonAssegnata();
  public void testAssegnamentoValoreDiUnaFunzioneVoid();
  static {};
}
Compiled from "JasminTest.java"
public class test.JasminTest {
  public test.JasminTest();
  public void testCalcoloArea();
  public void testScriviStringa();
  public void testEspressioneComplessa();
  public void testVettori();
  public void testCondizionaleSe();
  public void testFinche();
  public void testFunzioneRicorsiva();
  public void testFunzioneDiVettori();
  public void testFunzioneVoid();
  public void testBubbleSort();
  static {};
}
