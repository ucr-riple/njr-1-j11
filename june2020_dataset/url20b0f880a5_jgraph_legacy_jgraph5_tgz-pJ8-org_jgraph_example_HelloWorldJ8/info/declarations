Compiled from "JGraphAlgebra.java"
public class com.jgraph.algebra.JGraphAlgebra {
  protected static com.jgraph.algebra.JGraphAlgebra sharedInstance;
  public static com.jgraph.algebra.JGraphAlgebra getSharedInstance();
  public static void setSharedInstance(com.jgraph.algebra.JGraphAlgebra);
  protected com.jgraph.algebra.JGraphAlgebra();
  public java.lang.Object[] getShortestPath(org.jgraph.graph.GraphModel, java.lang.Object, java.lang.Object, com.jgraph.algebra.cost.JGraphCostFunction, int, boolean);
  public java.lang.Object[] getMinimumSpanningTree(org.jgraph.graph.GraphModel, java.lang.Object[], com.jgraph.algebra.cost.JGraphCostFunction, boolean);
  public java.lang.Object[] getMinimumSpanningTree(org.jgraph.graph.GraphModel, java.lang.Object[], java.lang.Object[], com.jgraph.algebra.cost.JGraphCostFunction);
  public com.jgraph.algebra.JGraphUnionFind getConnectionComponents(org.jgraph.graph.GraphModel, java.lang.Object[], java.lang.Object[]);
  public java.util.List sort(java.lang.Object[], com.jgraph.algebra.cost.JGraphCostFunction);
  public double sum(java.lang.Object[], com.jgraph.algebra.cost.JGraphCostFunction);
  protected com.jgraph.algebra.JGraphUnionFind createUnionFind(java.lang.Object[]);
  protected com.jgraph.algebra.JGraphFibonacciHeap createPriorityQueue();
  static {};
}
Compiled from "JGraphAlgebra.java"
class com.jgraph.algebra.JGraphAlgebra$1 implements java.util.Comparator {
  final com.jgraph.algebra.cost.JGraphCostFunction val$cf;
  final com.jgraph.algebra.JGraphAlgebra this$0;
  com.jgraph.algebra.JGraphAlgebra$1(com.jgraph.algebra.JGraphAlgebra, com.jgraph.algebra.cost.JGraphCostFunction);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "JGraphFibonacciHeap.java"
public class com.jgraph.algebra.JGraphFibonacciHeap {
  protected java.util.Map nodes;
  protected com.jgraph.algebra.JGraphFibonacciHeap$Node min;
  protected int size;
  public com.jgraph.algebra.JGraphFibonacciHeap();
  public com.jgraph.algebra.JGraphFibonacciHeap$Node getNode(java.lang.Object, boolean);
  public boolean isEmpty();
  public void decreaseKey(com.jgraph.algebra.JGraphFibonacciHeap$Node, double);
  public void delete(com.jgraph.algebra.JGraphFibonacciHeap$Node);
  public void insert(com.jgraph.algebra.JGraphFibonacciHeap$Node, double);
  public com.jgraph.algebra.JGraphFibonacciHeap$Node min();
  public com.jgraph.algebra.JGraphFibonacciHeap$Node removeMin();
  public int size();
  public static com.jgraph.algebra.JGraphFibonacciHeap union(com.jgraph.algebra.JGraphFibonacciHeap, com.jgraph.algebra.JGraphFibonacciHeap);
  protected void cascadingCut(com.jgraph.algebra.JGraphFibonacciHeap$Node);
  protected void consolidate();
  protected void cut(com.jgraph.algebra.JGraphFibonacciHeap$Node, com.jgraph.algebra.JGraphFibonacciHeap$Node);
  protected void link(com.jgraph.algebra.JGraphFibonacciHeap$Node, com.jgraph.algebra.JGraphFibonacciHeap$Node);
}
Compiled from "JGraphFibonacciHeap.java"
public class com.jgraph.algebra.JGraphFibonacciHeap$Node {
  java.lang.Object userObject;
  com.jgraph.algebra.JGraphFibonacciHeap$Node child;
  com.jgraph.algebra.JGraphFibonacciHeap$Node left;
  com.jgraph.algebra.JGraphFibonacciHeap$Node parent;
  com.jgraph.algebra.JGraphFibonacciHeap$Node right;
  boolean mark;
  double key;
  int degree;
  public com.jgraph.algebra.JGraphFibonacciHeap$Node(java.lang.Object, double);
  public final double getKey();
  public java.lang.Object getUserObject();
  public void setUserObject(java.lang.Object);
}
Compiled from "JGraphUnionFind.java"
public class com.jgraph.algebra.JGraphUnionFind {
  protected java.util.Map nodes;
  public com.jgraph.algebra.JGraphUnionFind(java.lang.Object[]);
  public com.jgraph.algebra.JGraphUnionFind$Node getNode(java.lang.Object);
  public com.jgraph.algebra.JGraphUnionFind$Node find(com.jgraph.algebra.JGraphUnionFind$Node);
  public void union(com.jgraph.algebra.JGraphUnionFind$Node, com.jgraph.algebra.JGraphUnionFind$Node);
  public boolean differ(java.lang.Object, java.lang.Object);
}
Compiled from "JGraphUnionFind.java"
public class com.jgraph.algebra.JGraphUnionFind$Node {
  protected com.jgraph.algebra.JGraphUnionFind$Node parent;
  protected int size;
  final com.jgraph.algebra.JGraphUnionFind this$0;
  public com.jgraph.algebra.JGraphUnionFind$Node(com.jgraph.algebra.JGraphUnionFind);
  public com.jgraph.algebra.JGraphUnionFind$Node getParent();
  public void setParent(com.jgraph.algebra.JGraphUnionFind$Node);
  public int getSize();
  public void setSize(int);
}
Compiled from "JGraphConstantCostFunction.java"
public class com.jgraph.algebra.cost.JGraphConstantCostFunction implements com.jgraph.algebra.cost.JGraphCostFunction {
  protected double cost;
  public com.jgraph.algebra.cost.JGraphConstantCostFunction(double);
  public double getCost(java.lang.Object);
}
Compiled from "JGraphCostFunction.java"
public interface com.jgraph.algebra.cost.JGraphCostFunction {
  public abstract double getCost(java.lang.Object);
}
Compiled from "JGraphDistanceCostFunction.java"
public class com.jgraph.algebra.cost.JGraphDistanceCostFunction implements com.jgraph.algebra.cost.JGraphCostFunction {
  protected org.jgraph.graph.CellMapper mapper;
  public com.jgraph.algebra.cost.JGraphDistanceCostFunction(org.jgraph.graph.CellMapper);
  public double getCost(java.lang.Object);
  public static double getLength(org.jgraph.graph.CellView);
}
Compiled from "OverviewExample.java"
public class com.jgraph.components.OverviewExample extends com.jgraph.example.GraphEdX {
  public com.jgraph.components.OverviewExample();
  protected void populateContentPane();
  public static void main(java.lang.String[]);
}
Compiled from "RichTextExample.java"
public class com.jgraph.components.RichTextExample extends com.jgraph.example.GraphEdX {
  public com.jgraph.components.RichTextExample();
  protected org.jgraph.JGraph createGraph();
  protected org.jgraph.graph.DefaultGraphCell createDefaultGraphCell();
  public static void main(java.lang.String[]);
}
Compiled from "RichTextExample.java"
class com.jgraph.components.RichTextExample$1 extends org.jgraph.graph.DefaultCellViewFactory {
  final com.jgraph.components.RichTextExample this$0;
  com.jgraph.components.RichTextExample$1(com.jgraph.components.RichTextExample);
  protected org.jgraph.graph.VertexView createVertexView(java.lang.Object);
}
Compiled from "CellConstants.java"
public class com.jgraph.components.labels.CellConstants extends org.jgraph.graph.GraphConstants {
  public static final java.lang.String STRETCHIMAGE;
  public static final java.lang.String VERTEXSHAPE;
  public com.jgraph.components.labels.CellConstants();
  public static final boolean isStretchImage(java.util.Map);
  public static final void setStretchImage(java.util.Map, boolean);
  public static final void setVertexShape(java.util.Map, int);
  public static final int getVertexShape(java.util.Map);
}
Compiled from "MultiLineVertexRenderer.java"
public class com.jgraph.components.labels.MultiLineVertexRenderer extends org.jgraph.graph.VertexRenderer {
  public static java.lang.String CLIENTPROPERTY_SHOWFOLDINGICONS;
  public static java.awt.Dimension ZERO_DIMENSION;
  public static int INSET;
  public static java.awt.Rectangle handle;
  protected org.jgraph.JGraph graph;
  public static final int SHAPE_RECTANGLE;
  public static final int SHAPE_CIRCLE;
  public static final int SHAPE_DIAMOND;
  public static final int SHAPE_ROUNDED;
  public static final int SHAPE_CYLINDER;
  public static final int SHAPE_TRIANGLE;
  public static javax.swing.JTextPane textPane;
  protected static javax.swing.JComponent wrapperRenderer;
  protected java.lang.Object userObject;
  protected int shape;
  protected boolean isRichText;
  protected boolean stretchImage;
  protected boolean isEditing;
  protected boolean showFoldingIcons;
  protected boolean isGroup;
  protected java.awt.Color graphBackground;
  protected java.awt.Color graphForeground;
  protected java.awt.Component valueComponent;
  protected java.awt.geom.Area cylinderArea;
  protected java.awt.Polygon diamond;
  protected int roundRectArc;
  protected transient boolean showHeavyweight;
  public com.jgraph.components.labels.MultiLineVertexRenderer();
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
  public void paint(java.awt.Graphics);
  protected void paintBackground(java.awt.Graphics);
  protected void paintRichText(java.awt.Graphics);
  protected void paintShapeBorder(java.awt.Graphics);
  protected void paintFoldingIcon(java.awt.Graphics);
  public static int getArcSize(int, int);
  public java.awt.geom.Point2D getPerimeterPoint(org.jgraph.graph.VertexView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  public java.awt.geom.Point2D getCirclePerimeterPoint(org.jgraph.graph.VertexView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  public java.awt.geom.Point2D getDiamondPerimeterPoint(org.jgraph.graph.VertexView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  public java.awt.geom.Point2D getTrianglePerimeterPoint(org.jgraph.graph.VertexView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  protected java.awt.geom.Point2D intersection(java.awt.geom.Point2D, java.awt.geom.Point2D, java.awt.geom.Point2D, java.awt.geom.Point2D);
  public java.awt.Dimension getPreferredSize();
  protected void resetAttributes();
  public void installAttributes(org.jgraph.graph.CellView);
  public boolean inHitRegion(java.awt.geom.Point2D);
  static {};
}
Compiled from "MultiLineVertexRenderer.java"
class com.jgraph.components.labels.MultiLineVertexRenderer$1 extends javax.swing.JComponent {
  final com.jgraph.components.labels.MultiLineVertexRenderer this$0;
  com.jgraph.components.labels.MultiLineVertexRenderer$1(com.jgraph.components.labels.MultiLineVertexRenderer);
  public void paint(java.awt.Graphics);
}
Compiled from "MultiLineVertexView.java"
public class com.jgraph.components.labels.MultiLineVertexView extends org.jgraph.graph.VertexView {
  public static com.jgraph.components.labels.RichTextEditor editor;
  public static com.jgraph.components.labels.RedirectingEditor redirector;
  public static com.jgraph.components.labels.MultiLineVertexRenderer renderer;
  public com.jgraph.components.labels.MultiLineVertexView();
  public com.jgraph.components.labels.MultiLineVertexView(java.lang.Object);
  public org.jgraph.graph.GraphCellEditor getEditor();
  public org.jgraph.graph.CellViewRenderer getRenderer();
  static {};
}
Compiled from "RedirectingEditor.java"
public class com.jgraph.components.labels.RedirectingEditor extends org.jgraph.graph.DefaultGraphCellEditor {
  public com.jgraph.components.labels.RedirectingEditor();
  protected org.jgraph.graph.GraphCellEditor createGraphCellEditor();
}
Compiled from "RedirectingEditor.java"
class com.jgraph.components.labels.RedirectingEditor$RealCellEditor extends javax.swing.AbstractCellEditor implements org.jgraph.graph.GraphCellEditor {
  java.awt.Component componentValue;
  final com.jgraph.components.labels.RedirectingEditor this$0;
  com.jgraph.components.labels.RedirectingEditor$RealCellEditor(com.jgraph.components.labels.RedirectingEditor);
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
  public java.lang.Object getCellEditorValue();
  public boolean stopCellEditing();
  public void cancelCellEditing();
  public boolean shouldSelectCell(java.util.EventObject);
}
Compiled from "RedirectingEditor.java"
class com.jgraph.components.labels.RedirectingEditor$RealCellEditor$1 extends javax.swing.AbstractAction {
  final com.jgraph.components.labels.RedirectingEditor$RealCellEditor this$1;
  com.jgraph.components.labels.RedirectingEditor$RealCellEditor$1(com.jgraph.components.labels.RedirectingEditor$RealCellEditor);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RichTextBusinessObject.java"
public class com.jgraph.components.labels.RichTextBusinessObject implements java.lang.Cloneable,java.io.Serializable {
  public static java.lang.String valueKey;
  protected java.util.Map properties;
  public com.jgraph.components.labels.RichTextBusinessObject();
  public com.jgraph.components.labels.RichTextBusinessObject(java.lang.Object);
  public java.util.Map getProperties();
  public void setProperties(java.util.Map);
  public void setValue(java.lang.Object);
  public java.lang.Object getValue();
  public boolean isRichText();
  public boolean isComponent();
  public java.lang.Object putProperty(java.lang.Object, java.lang.Object);
  public java.lang.Object getProperty(java.lang.Object);
  public java.lang.String getTooltip();
  protected java.lang.String chopString(java.lang.String, int);
  public java.lang.String toString();
  public java.lang.Object clone();
  static {};
}
Compiled from "RichTextEditor.java"
public class com.jgraph.components.labels.RichTextEditor extends org.jgraph.graph.DefaultGraphCellEditor {
  public com.jgraph.components.labels.RichTextEditor();
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
  protected org.jgraph.graph.GraphCellEditor createGraphCellEditor();
  protected java.awt.Container createContainer();
  static java.awt.Container access$000(com.jgraph.components.labels.RichTextEditor);
  static java.awt.Component access$100(com.jgraph.components.labels.RichTextEditor);
  static java.awt.Component access$200(com.jgraph.components.labels.RichTextEditor);
}
Compiled from "RichTextEditor.java"
class com.jgraph.components.labels.RichTextEditor$ModifiedEditorContainer extends org.jgraph.graph.DefaultGraphCellEditor$EditorContainer {
  final com.jgraph.components.labels.RichTextEditor this$0;
  com.jgraph.components.labels.RichTextEditor$ModifiedEditorContainer(com.jgraph.components.labels.RichTextEditor);
  public void doLayout();
}
Compiled from "RichTextEditor.java"
class com.jgraph.components.labels.RichTextEditor$RealCellEditor extends javax.swing.AbstractCellEditor implements org.jgraph.graph.GraphCellEditor {
  javax.swing.JTextPane editorComponent;
  final com.jgraph.components.labels.RichTextEditor this$0;
  public com.jgraph.components.labels.RichTextEditor$RealCellEditor(com.jgraph.components.labels.RichTextEditor);
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
  public java.lang.Object getCellEditorValue();
  public boolean shouldSelectCell(java.util.EventObject);
}
Compiled from "RichTextEditor.java"
class com.jgraph.components.labels.RichTextEditor$RealCellEditor$1 extends javax.swing.AbstractAction {
  final com.jgraph.components.labels.RichTextEditor val$this$0;
  final com.jgraph.components.labels.RichTextEditor$RealCellEditor this$1;
  com.jgraph.components.labels.RichTextEditor$RealCellEditor$1(com.jgraph.components.labels.RichTextEditor$RealCellEditor, com.jgraph.components.labels.RichTextEditor);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RichTextEditor.java"
class com.jgraph.components.labels.RichTextEditor$RealCellEditor$2 extends javax.swing.AbstractAction {
  final com.jgraph.components.labels.RichTextEditor val$this$0;
  final com.jgraph.components.labels.RichTextEditor$RealCellEditor this$1;
  com.jgraph.components.labels.RichTextEditor$RealCellEditor$2(com.jgraph.components.labels.RichTextEditor$RealCellEditor, com.jgraph.components.labels.RichTextEditor);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "RichTextEditor.java"
class com.jgraph.components.labels.RichTextEditor$RealCellEditor$3 implements javax.swing.event.DocumentListener {
  final com.jgraph.components.labels.RichTextEditor$RealCellEditor this$1;
  com.jgraph.components.labels.RichTextEditor$RealCellEditor$3(com.jgraph.components.labels.RichTextEditor$RealCellEditor);
  public void updateSize();
  public void insertUpdate(javax.swing.event.DocumentEvent);
  public void removeUpdate(javax.swing.event.DocumentEvent);
  public void changedUpdate(javax.swing.event.DocumentEvent);
}
Compiled from "RichTextEditor.java"
class com.jgraph.components.labels.RichTextEditor$RealCellEditor$3$1 implements java.lang.Runnable {
  final com.jgraph.components.labels.RichTextEditor$RealCellEditor$3 this$2;
  com.jgraph.components.labels.RichTextEditor$RealCellEditor$3$1(com.jgraph.components.labels.RichTextEditor$RealCellEditor$3);
  public void run();
}
Compiled from "RichTextGraphModel.java"
public class com.jgraph.components.labels.RichTextGraphModel extends org.jgraph.graph.DefaultGraphModel {
  public static final java.lang.Object VALUE_EMPTY;
  public com.jgraph.components.labels.RichTextGraphModel();
  public boolean acceptsSource(java.lang.Object, java.lang.Object);
  public boolean acceptsTarget(java.lang.Object, java.lang.Object);
  public com.jgraph.components.labels.RichTextGraphModel(java.util.List, org.jgraph.graph.AttributeMap, org.jgraph.graph.ConnectionSet);
  protected java.lang.Object cloneUserObject(java.lang.Object);
  public java.lang.Object valueForCellChanged(java.lang.Object, java.lang.Object);
  protected java.util.Map handleAttributes(java.util.Map);
  static {};
}
Compiled from "RichTextValue.java"
public class com.jgraph.components.labels.RichTextValue implements java.io.Serializable,java.lang.Cloneable {
  public static javax.swing.text.rtf.RTFEditorKit editorKit;
  protected java.lang.String richText;
  protected java.lang.String plainText;
  public com.jgraph.components.labels.RichTextValue();
  public com.jgraph.components.labels.RichTextValue(javax.swing.text.Document);
  public com.jgraph.components.labels.RichTextValue(java.lang.String);
  public void insertInto(javax.swing.text.Document);
  public java.lang.String getRichText();
  public void setRichText(java.lang.String);
  public java.lang.String toString();
  public static java.lang.String getRichText(javax.swing.text.Document);
  public static java.lang.String getPlainText(com.jgraph.components.labels.RichTextValue);
  protected static javax.swing.text.Document createDefaultDocument();
  public static javax.swing.text.Document createDefaultDocument(java.lang.String);
  static {};
}
Compiled from "EditorGraph.java"
public class com.jgraph.example.EditorGraph extends org.jgraph.JGraph {
  public com.jgraph.example.EditorGraph();
  public com.jgraph.example.EditorGraph(org.jgraph.graph.GraphModel);
  public void updateUI();
  public static void main(java.lang.String[]);
}
Compiled from "EditorGraph.java"
public class com.jgraph.example.EditorGraph$EditorGraphUI extends org.jgraph.plaf.basic.BasicGraphUI {
  protected javax.swing.event.CellEditorListener cellEditorListener;
  protected javax.swing.JFrame editDialog;
  final com.jgraph.example.EditorGraph this$0;
  public com.jgraph.example.EditorGraph$EditorGraphUI(com.jgraph.example.EditorGraph);
  protected void createEditDialog(java.lang.Object);
  protected void completeEditing(boolean, boolean, boolean);
  protected boolean startEditing(java.lang.Object, java.awt.event.MouseEvent);
  static void access$000(com.jgraph.example.EditorGraph$EditorGraphUI);
}
Compiled from "EditorGraph.java"
class com.jgraph.example.EditorGraph$EditorGraphUI$1 extends java.awt.event.WindowAdapter {
  final com.jgraph.example.EditorGraph$EditorGraphUI this$1;
  com.jgraph.example.EditorGraph$EditorGraphUI$1(com.jgraph.example.EditorGraph$EditorGraphUI);
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "GraphEdMV.java"
public class com.jgraph.example.GraphEdMV extends org.jgraph.example.GraphEd implements org.jgraph.event.GraphSelectionListener,java.awt.event.KeyListener {
  protected static org.jgraph.graph.GraphModel model;
  protected static org.jgraph.graph.GraphUndoManager undoManager;
  protected static java.util.ArrayList instances;
  protected javax.swing.Action undo;
  protected javax.swing.Action redo;
  protected javax.swing.Action remove;
  protected javax.swing.Action group;
  protected javax.swing.Action ungroup;
  protected javax.swing.Action tofront;
  protected javax.swing.Action toback;
  protected javax.swing.Action cut;
  protected javax.swing.Action copy;
  protected javax.swing.Action paste;
  public static void main(java.lang.String[]);
  public com.jgraph.example.GraphEdMV();
  public void group(java.lang.Object[]);
  protected static void updateAllHistoryButtons();
  static {};
}
Compiled from "GraphEdMV.java"
final class com.jgraph.example.GraphEdMV$1 extends org.jgraph.graph.GraphUndoManager {
  com.jgraph.example.GraphEdMV$1();
  public void undoableEditHappened(javax.swing.event.UndoableEditEvent);
}
Compiled from "GraphEdX.java"
public class com.jgraph.example.GraphEdX extends org.jgraph.example.GraphEd {
  protected com.jgraph.example.JGraphGraphFactory graphFactory;
  protected com.jgraph.example.JGraphFoldingManager foldingManager;
  protected javax.swing.Action hide;
  protected javax.swing.Action collapse;
  protected javax.swing.Action expand;
  protected javax.swing.Action expandAll;
  protected javax.swing.Action configure;
  protected javax.swing.JFileChooser fileChooser;
  public com.jgraph.example.GraphEdX();
  public void init();
  protected org.jgraph.JGraph createGraph();
  protected void installListeners(org.jgraph.JGraph);
  protected void uninstallListeners(org.jgraph.JGraph);
  public void valueChanged(org.jgraph.event.GraphSelectionEvent);
  public void group(java.lang.Object[]);
  protected org.jgraph.graph.DefaultGraphCell createGroupCell(java.awt.geom.Rectangle2D);
  public java.util.Map createCellAttributes(java.awt.geom.Point2D);
  public java.util.Map createEdgeAttributes();
  public javax.swing.JToolBar createToolBar();
  public void serializeGraph();
  public void deserializeGraph();
  public void saveFile();
  public void openFile();
  protected void initFileChooser();
  protected void configureEncoder(java.beans.XMLEncoder);
  public static void main(java.lang.String[]);
  public static void makeCellViewFieldsTransient(java.lang.Class);
  static org.jgraph.JGraph access$000(com.jgraph.example.GraphEdX);
  static org.jgraph.JGraph access$100(com.jgraph.example.GraphEdX);
  static org.jgraph.JGraph access$200(com.jgraph.example.GraphEdX);
  static org.jgraph.JGraph access$300(com.jgraph.example.GraphEdX);
  static org.jgraph.JGraph access$400(com.jgraph.example.GraphEdX);
  static org.jgraph.JGraph access$500(com.jgraph.example.GraphEdX);
  static org.jgraph.JGraph access$600(com.jgraph.example.GraphEdX);
  static {};
}
Compiled from "GraphEdX.java"
class com.jgraph.example.GraphEdX$1 extends javax.swing.AbstractAction {
  final com.jgraph.example.GraphEdX this$0;
  com.jgraph.example.GraphEdX$1(com.jgraph.example.GraphEdX);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEdX.java"
class com.jgraph.example.GraphEdX$2 extends javax.swing.AbstractAction {
  final com.jgraph.example.GraphEdX this$0;
  com.jgraph.example.GraphEdX$2(com.jgraph.example.GraphEdX);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEdX.java"
class com.jgraph.example.GraphEdX$3 extends javax.swing.AbstractAction {
  final com.jgraph.example.GraphEdX this$0;
  com.jgraph.example.GraphEdX$3(com.jgraph.example.GraphEdX);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEdX.java"
class com.jgraph.example.GraphEdX$4 extends javax.swing.filechooser.FileFilter {
  final com.jgraph.example.GraphEdX this$0;
  com.jgraph.example.GraphEdX$4(com.jgraph.example.GraphEdX);
  public boolean accept(java.io.File);
  public java.lang.String getDescription();
}
Compiled from "GraphEdX.java"
class com.jgraph.example.GraphEdX$5 implements java.beans.ExceptionListener {
  final com.jgraph.example.GraphEdX this$0;
  com.jgraph.example.GraphEdX$5(com.jgraph.example.GraphEdX);
  public void exceptionThrown(java.lang.Exception);
}
Compiled from "GraphEdX.java"
class com.jgraph.example.GraphEdX$6 extends java.beans.PersistenceDelegate {
  final com.jgraph.example.GraphEdX this$0;
  com.jgraph.example.GraphEdX$6(com.jgraph.example.GraphEdX);
  protected java.beans.Expression instantiate(java.lang.Object, java.beans.Encoder);
}
Compiled from "GraphEdX.java"
class com.jgraph.example.GraphEdX$7 extends java.beans.PersistenceDelegate {
  final com.jgraph.example.GraphEdX this$0;
  com.jgraph.example.GraphEdX$7(com.jgraph.example.GraphEdX);
  protected java.beans.Expression instantiate(java.lang.Object, java.beans.Encoder);
}
Compiled from "GraphEdX.java"
class com.jgraph.example.GraphEdX$8 extends java.beans.PersistenceDelegate {
  final com.jgraph.example.GraphEdX this$0;
  com.jgraph.example.GraphEdX$8(com.jgraph.example.GraphEdX);
  protected java.beans.Expression instantiate(java.lang.Object, java.beans.Encoder);
}
Compiled from "GraphEdX.java"
public class com.jgraph.example.GraphEdX$MyGraphModel extends org.jgraph.graph.DefaultGraphModel {
  public com.jgraph.example.GraphEdX$MyGraphModel();
  public com.jgraph.example.GraphEdX$MyGraphModel(java.util.List, org.jgraph.graph.AttributeMap);
  public boolean acceptsSource(java.lang.Object, java.lang.Object);
  public boolean acceptsTarget(java.lang.Object, java.lang.Object);
}
Compiled from "GraphEdXMenuBar.java"
public class com.jgraph.example.GraphEdXMenuBar extends javax.swing.JMenuBar {
  protected com.jgraph.example.JGraphGraphFactory graphFactory;
  public com.jgraph.example.GraphEdXMenuBar(com.jgraph.example.GraphEdX, com.jgraph.example.JGraphGraphFactory);
  public javax.swing.JRadioButtonMenuItem createRadioMenuItem(javax.swing.ButtonGroup, javax.swing.Action);
}
Compiled from "GraphEdXMenuBar.java"
class com.jgraph.example.GraphEdXMenuBar$1 extends javax.swing.AbstractAction {
  final com.jgraph.example.GraphEdX val$app;
  final com.jgraph.example.GraphEdXMenuBar this$0;
  com.jgraph.example.GraphEdXMenuBar$1(com.jgraph.example.GraphEdXMenuBar, java.lang.String, com.jgraph.example.GraphEdX);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEdXMenuBar.java"
class com.jgraph.example.GraphEdXMenuBar$2 extends javax.swing.AbstractAction {
  final com.jgraph.example.GraphEdX val$app;
  final com.jgraph.example.GraphEdXMenuBar this$0;
  com.jgraph.example.GraphEdXMenuBar$2(com.jgraph.example.GraphEdXMenuBar, java.lang.String, com.jgraph.example.GraphEdX);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEdXMenuBar.java"
class com.jgraph.example.GraphEdXMenuBar$3 extends javax.swing.AbstractAction {
  final com.jgraph.example.GraphEdX val$app;
  final com.jgraph.example.GraphEdXMenuBar this$0;
  com.jgraph.example.GraphEdXMenuBar$3(com.jgraph.example.GraphEdXMenuBar, java.lang.String, com.jgraph.example.GraphEdX);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEdXMenuBar.java"
class com.jgraph.example.GraphEdXMenuBar$4 extends javax.swing.AbstractAction {
  final com.jgraph.example.GraphEdX val$app;
  final com.jgraph.example.GraphEdXMenuBar this$0;
  com.jgraph.example.GraphEdXMenuBar$4(com.jgraph.example.GraphEdXMenuBar, java.lang.String, com.jgraph.example.GraphEdX);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEdXMenuBar.java"
class com.jgraph.example.GraphEdXMenuBar$5 extends javax.swing.AbstractAction {
  final com.jgraph.example.GraphEdX val$app;
  final com.jgraph.example.GraphEdXMenuBar this$0;
  com.jgraph.example.GraphEdXMenuBar$5(com.jgraph.example.GraphEdXMenuBar, java.lang.String, com.jgraph.example.GraphEdX);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEdXMenuBar.java"
class com.jgraph.example.GraphEdXMenuBar$6 extends javax.swing.AbstractAction {
  final com.jgraph.example.GraphEdX val$app;
  final com.jgraph.example.GraphEdXMenuBar this$0;
  com.jgraph.example.GraphEdXMenuBar$6(com.jgraph.example.GraphEdXMenuBar, java.lang.String, com.jgraph.example.GraphEdX);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphSelectionDemo.java"
public class com.jgraph.example.GraphSelectionDemo extends javax.swing.tree.DefaultTreeModel implements org.jgraph.event.GraphModelListener {
  public static void main(java.lang.String[]);
  public com.jgraph.example.GraphSelectionDemo(org.jgraph.graph.GraphModel);
  public void graphChanged(org.jgraph.event.GraphModelEvent);
  static javax.swing.JTree access$000();
  static org.jgraph.JGraph access$100();
  static com.jgraph.example.GraphSelectionDemo$SyncGraphSelectionListener access$200();
  static com.jgraph.example.GraphSelectionDemo$GraphModelTreeNode access$300();
  static {};
}
Compiled from "GraphSelectionDemo.java"
public class com.jgraph.example.GraphSelectionDemo$GraphModelTreeNode implements javax.swing.tree.TreeNode {
  protected org.jgraph.graph.GraphModel model;
  public com.jgraph.example.GraphSelectionDemo$GraphModelTreeNode(org.jgraph.graph.GraphModel);
  public java.util.Enumeration children();
  public boolean getAllowsChildren();
  public javax.swing.tree.TreeNode getChildAt(int);
  public int getChildCount();
  public int getIndex(javax.swing.tree.TreeNode);
  public javax.swing.tree.TreeNode getParent();
  public boolean isLeaf();
  public java.lang.String toString();
}
Compiled from "GraphSelectionDemo.java"
public class com.jgraph.example.GraphSelectionDemo$MyMouseListener extends javax.swing.event.MouseInputAdapter {
  public com.jgraph.example.GraphSelectionDemo$MyMouseListener();
  public void mouseReleased(java.awt.event.MouseEvent);
}
Compiled from "GraphSelectionDemo.java"
public class com.jgraph.example.GraphSelectionDemo$SyncGraphSelectionListener implements org.jgraph.event.GraphSelectionListener {
  public com.jgraph.example.GraphSelectionDemo$SyncGraphSelectionListener();
  public void valueChanged(org.jgraph.event.GraphSelectionEvent);
  public java.util.ArrayList computeTreePathSelection(java.util.ArrayList, java.lang.Object, java.lang.Object);
}
Compiled from "GraphSelectionDemo.java"
public class com.jgraph.example.GraphSelectionDemo$SyncTreeSelectionListener implements javax.swing.event.TreeSelectionListener {
  public com.jgraph.example.GraphSelectionDemo$SyncTreeSelectionListener();
  public void valueChanged(javax.swing.event.TreeSelectionEvent);
}
Compiled from "GraphTreeModel.java"
public class com.jgraph.example.GraphTreeModel extends javax.swing.tree.DefaultTreeModel implements org.jgraph.event.GraphModelListener {
  public static void main(java.lang.String[]);
  public com.jgraph.example.GraphTreeModel(org.jgraph.graph.GraphModel);
  public void graphChanged(org.jgraph.event.GraphModelEvent);
}
Compiled from "GraphTreeModel.java"
public class com.jgraph.example.GraphTreeModel$GraphModelTreeNode implements javax.swing.tree.TreeNode {
  protected org.jgraph.graph.GraphModel model;
  public com.jgraph.example.GraphTreeModel$GraphModelTreeNode(org.jgraph.graph.GraphModel);
  public java.util.Enumeration children();
  public boolean getAllowsChildren();
  public javax.swing.tree.TreeNode getChildAt(int);
  public int getChildCount();
  public int getIndex(javax.swing.tree.TreeNode);
  public javax.swing.tree.TreeNode getParent();
  public boolean isLeaf();
  public java.lang.String toString();
}
Compiled from "JGraphFoldingManager.java"
public class com.jgraph.example.JGraphFoldingManager extends javax.swing.event.MouseInputAdapter {
  public com.jgraph.example.JGraphFoldingManager();
  public void mouseReleased(java.awt.event.MouseEvent);
  public static org.jgraph.graph.CellView getGroupByFoldingHandle(org.jgraph.JGraph, java.awt.geom.Point2D);
}
Compiled from "JGraphGraphFactory.java"
public class com.jgraph.example.JGraphGraphFactory {
  public static final int FULLY_CONNECTED;
  public static final int RANDOM_CONNECTED;
  public static final int TREE;
  public static final int FLOW;
  protected int numNodes;
  protected int numEdges;
  protected int maxNodesPerTreeLevel;
  protected com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog dialog;
  public com.jgraph.example.JGraphGraphFactory();
  public void insertGraph(org.jgraph.JGraph, int, java.util.Map, java.util.Map);
  public java.lang.Object insertTreeSampleData(org.jgraph.JGraph, java.util.Map, java.util.Map);
  public java.lang.Object insertTreeSampleData(org.jgraph.graph.GraphModel, java.util.Map, java.util.Map);
  protected void connectNextLevel(org.jgraph.graph.GraphModel, java.lang.Object[], java.util.Map);
  protected void connectChildrenVertices(org.jgraph.graph.GraphModel, java.lang.Object[], java.lang.Object, java.util.Map);
  public void insertConnectedGraphSampleData(org.jgraph.JGraph, java.util.Map, java.util.Map);
  public void insertFullyConnectedGraphSampleData(org.jgraph.JGraph, java.util.Map, java.util.Map);
  public void insertSampleFlowGraph(org.jgraph.JGraph, java.util.Map, java.util.Map);
  protected org.jgraph.graph.DefaultGraphCell createVertex(java.lang.Object, java.awt.geom.Point2D, java.util.Map);
  protected org.jgraph.graph.Edge createEdge(java.util.Map, org.jgraph.graph.Port, org.jgraph.graph.Port);
  protected void initialise(org.jgraph.JGraph);
  protected void insertIntoGraph(org.jgraph.JGraph, java.lang.Object[]);
  public static void insert(org.jgraph.graph.GraphModel, java.lang.Object[]);
  public static void insert(org.jgraph.graph.GraphModel, java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap);
  public boolean isInsertIntoModel();
  public void setInsertIntoModel(boolean);
  public int getNumEdges();
  public void setNumEdges(int);
  public int getNumNodes();
  public void setNumNodes(int);
  public int getMaxNodesPerTreeLevel();
  public void setMaxNodesPerTreeLevel(int);
  public static void center(java.awt.Window);
}
Compiled from "JGraphGraphFactory.java"
public class com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog extends javax.swing.JDialog {
  protected boolean insertGraph;
  protected org.jgraph.JGraph graph;
  protected int graphType;
  protected java.util.Map defaultVertexAttributes;
  protected java.util.Map defaultEdgeAttributes;
  protected javax.swing.JTextField maxTreeNodeChildren;
  protected javax.swing.JTextField numNodes;
  protected javax.swing.JTextField numEdges;
  protected javax.swing.JCheckBox insertIntoModel;
  final com.jgraph.example.JGraphGraphFactory this$0;
  public com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog(com.jgraph.example.JGraphGraphFactory);
  public void configureLayout(org.jgraph.JGraph, int, java.util.Map, java.util.Map);
  protected void applyValues();
}
Compiled from "JGraphGraphFactory.java"
class com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog$1 implements java.awt.event.ActionListener {
  final com.jgraph.example.JGraphGraphFactory val$this$0;
  final com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog this$1;
  com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog$1(com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog, com.jgraph.example.JGraphGraphFactory);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphGraphFactory.java"
class com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog$2 implements java.awt.event.ActionListener {
  final com.jgraph.example.JGraphGraphFactory val$this$0;
  final com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog this$1;
  com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog$2(com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog, com.jgraph.example.JGraphGraphFactory);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphGroupRenderer.java"
public class com.jgraph.example.JGraphGroupRenderer extends org.jgraph.graph.VertexRenderer {
  public static java.awt.Rectangle handle;
  protected boolean isGroup;
  protected java.awt.Color handleColor;
  protected java.awt.Color graphForeground;
  public com.jgraph.example.JGraphGroupRenderer();
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
  public void paint(java.awt.Graphics);
  public boolean inHitRegion(java.awt.geom.Point2D);
  static {};
}
Compiled from "JGraphShadowBorder.java"
public class com.jgraph.example.JGraphShadowBorder implements javax.swing.border.Border,java.io.Serializable {
  protected java.awt.Insets insets;
  public static com.jgraph.example.JGraphShadowBorder sharedInstance;
  public java.awt.Insets getBorderInsets(java.awt.Component);
  public boolean isBorderOpaque();
  public void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int);
  public static com.jgraph.example.JGraphShadowBorder getSharedInstance();
  static {};
}
Compiled from "Main.java"
public class com.jgraph.example.Main {
  static javax.swing.JFrame f;
  public com.jgraph.example.Main();
  public static void main(java.lang.String[]);
  public static javax.swing.JButton createButton(java.lang.Class, java.lang.String[]);
  public static void run(java.lang.Class, java.lang.String[]);
  static {};
}
Compiled from "Main.java"
final class com.jgraph.example.Main$1 implements java.awt.event.ActionListener {
  final java.lang.Class val$aClass;
  final java.lang.String[] val$args;
  com.jgraph.example.Main$1(java.lang.Class, java.lang.String[]);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "MyPortView.java"
public class com.jgraph.example.MyPortView extends org.jgraph.graph.PortView {
  protected static javax.swing.ImageIcon portIcon;
  protected static com.jgraph.example.MyPortView$MyPortRenderer renderer;
  public static void main(java.lang.String[]);
  public com.jgraph.example.MyPortView(java.lang.Object);
  public java.awt.geom.Rectangle2D getBounds();
  public org.jgraph.graph.CellViewRenderer getRenderer();
  static {};
}
Compiled from "MyPortView.java"
final class com.jgraph.example.MyPortView$1 extends org.jgraph.graph.DefaultCellViewFactory {
  com.jgraph.example.MyPortView$1();
  protected org.jgraph.graph.PortView createPortView(org.jgraph.graph.Port);
}
Compiled from "MyPortView.java"
public class com.jgraph.example.MyPortView$MyPortRenderer extends org.jgraph.graph.PortRenderer {
  public com.jgraph.example.MyPortView$MyPortRenderer();
  public void paint(java.awt.Graphics);
}
Compiled from "SerialGraph.java"
public class com.jgraph.example.SerialGraph {
  public static java.lang.String FILENAME;
  public com.jgraph.example.SerialGraph();
  public static void main(java.lang.String[]);
  public static void writeObject(java.lang.Object, java.lang.String);
  public static java.lang.Object readObject(java.lang.String);
  static {};
}
Compiled from "JGraphAdapterBackend.java"
public interface com.jgraph.example.adapter.JGraphAdapterBackend {
  public abstract void commit() throws java.lang.Exception;
  public abstract void rollback() throws java.lang.Exception;
  public abstract void vertexAdded(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, boolean) throws java.lang.Exception;
  public abstract void edgeAdded(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public abstract void cellRemoved(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, boolean) throws java.lang.Exception;
  public abstract void parentChanged(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public abstract void sourceChanged(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public abstract void targetChanged(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public abstract void attributesChanged(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.util.Map, boolean) throws java.lang.Exception;
}
Compiled from "JGraphAdapterExample.java"
public class com.jgraph.example.adapter.JGraphAdapterExample extends org.jgraph.example.GraphEd {
  protected javax.swing.Action hide;
  protected javax.swing.Action collapse;
  protected javax.swing.Action expand;
  protected javax.swing.Action expandAll;
  protected static javax.swing.JTextArea console;
  protected static com.jgraph.example.adapter.JGraphSQLBackend backend;
  protected static java.sql.Connection conn;
  public com.jgraph.example.adapter.JGraphAdapterExample(com.jgraph.example.adapter.JGraphAdapterBackend);
  public java.util.Map createCellAttributes(java.awt.geom.Point2D);
  public java.util.Map createEdgeAttributes();
  protected org.jgraph.graph.DefaultGraphCell createGroupCell();
  protected org.jgraph.graph.DefaultGraphCell createDefaultGraphCell();
  protected static org.jgraph.graph.DefaultGraphCell createAdapterVertex();
  protected org.jgraph.graph.DefaultEdge createDefaultEdge();
  protected static org.jgraph.graph.DefaultEdge createAdapterEdge();
  public javax.swing.JToolBar createToolBar();
  public void valueChanged(org.jgraph.event.GraphSelectionEvent);
  public static void main(java.lang.String[]);
  public static void println(java.lang.String);
  static void access$000(com.jgraph.example.adapter.JGraphAdapterExample);
  static org.jgraph.JGraph access$100(com.jgraph.example.adapter.JGraphAdapterExample);
  static org.jgraph.JGraph access$200(com.jgraph.example.adapter.JGraphAdapterExample);
  static org.jgraph.JGraph access$300(com.jgraph.example.adapter.JGraphAdapterExample);
  static org.jgraph.JGraph access$400(com.jgraph.example.adapter.JGraphAdapterExample);
  static org.jgraph.JGraph access$500(com.jgraph.example.adapter.JGraphAdapterExample);
  static org.jgraph.JGraph access$600(com.jgraph.example.adapter.JGraphAdapterExample);
  static org.jgraph.JGraph access$700(com.jgraph.example.adapter.JGraphAdapterExample);
  static org.jgraph.JGraph access$800(com.jgraph.example.adapter.JGraphAdapterExample);
  static org.jgraph.JGraph access$900(com.jgraph.example.adapter.JGraphAdapterExample);
  static {};
}
Compiled from "JGraphAdapterExample.java"
class com.jgraph.example.adapter.JGraphAdapterExample$1 extends org.jgraph.graph.GraphUndoManager {
  final com.jgraph.example.adapter.JGraphAdapterExample this$0;
  com.jgraph.example.adapter.JGraphAdapterExample$1(com.jgraph.example.adapter.JGraphAdapterExample);
  public void undoableEditHappened(javax.swing.event.UndoableEditEvent);
}
Compiled from "JGraphAdapterExample.java"
class com.jgraph.example.adapter.JGraphAdapterExample$2 extends javax.swing.AbstractAction {
  final com.jgraph.example.adapter.JGraphAdapterExample this$0;
  com.jgraph.example.adapter.JGraphAdapterExample$2(com.jgraph.example.adapter.JGraphAdapterExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphAdapterExample.java"
class com.jgraph.example.adapter.JGraphAdapterExample$3 extends javax.swing.AbstractAction {
  final com.jgraph.example.adapter.JGraphAdapterExample this$0;
  com.jgraph.example.adapter.JGraphAdapterExample$3(com.jgraph.example.adapter.JGraphAdapterExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphAdapterExample.java"
class com.jgraph.example.adapter.JGraphAdapterExample$4 extends javax.swing.AbstractAction {
  final com.jgraph.example.adapter.JGraphAdapterExample this$0;
  com.jgraph.example.adapter.JGraphAdapterExample$4(com.jgraph.example.adapter.JGraphAdapterExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphAdapterExample.java"
class com.jgraph.example.adapter.JGraphAdapterExample$5 extends javax.swing.AbstractAction {
  final com.jgraph.example.adapter.JGraphAdapterExample this$0;
  com.jgraph.example.adapter.JGraphAdapterExample$5(com.jgraph.example.adapter.JGraphAdapterExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphAdapterExample.java"
final class com.jgraph.example.adapter.JGraphAdapterExample$6 extends java.awt.event.WindowAdapter {
  com.jgraph.example.adapter.JGraphAdapterExample$6();
  public void windowClosed(java.awt.event.WindowEvent);
}
Compiled from "JGraphAdapterModel.java"
public class com.jgraph.example.adapter.JGraphAdapterModel extends org.jgraph.graph.DefaultGraphModel {
  public static final java.lang.String VERSION;
  protected java.util.Map mapping;
  protected com.jgraph.example.adapter.JGraphAdapterBackend backend;
  public com.jgraph.example.adapter.JGraphAdapterModel();
  public com.jgraph.example.adapter.JGraphAdapterModel(java.util.List, org.jgraph.graph.AttributeMap);
  public com.jgraph.example.adapter.JGraphAdapterModel(java.util.List, org.jgraph.graph.AttributeMap, com.jgraph.example.adapter.JGraphAdapterBackend);
  public void addProperty(java.lang.Object, java.lang.Object, java.lang.Object);
  protected java.util.Map handleAttributes(java.util.Map);
  public com.jgraph.example.adapter.JGraphAdapterBackend getBackend();
  public void setBackend(com.jgraph.example.adapter.JGraphAdapterBackend);
  public java.lang.Object getMapping(java.lang.Object);
  protected void putMapping(java.lang.Object, java.lang.Object);
  protected void removeMapping(java.lang.Object);
  public java.lang.Object getParentUserObject(java.lang.Object);
  public java.lang.Object getSourceVertexUserObject(java.lang.Object);
  public java.lang.Object getTargetVertexUserObject(java.lang.Object);
  public void edit(java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  protected java.lang.Object cloneUserObject(java.lang.Object);
  public java.lang.Object valueForCellChanged(java.lang.Object, java.lang.Object);
  public void insert(java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public void remove(java.lang.Object[]);
  public void processInsert(java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, boolean) throws java.lang.Exception;
  protected void processRemove(java.lang.Object[], boolean) throws java.lang.Exception;
  protected void processConnectionSet(org.jgraph.graph.ConnectionSet, boolean) throws java.lang.Exception;
  protected void processParentMap(org.jgraph.graph.ParentMap, boolean) throws java.lang.Exception;
  protected void processNestedAttributes(java.util.Map, boolean) throws java.lang.Exception;
  protected org.jgraph.graph.DefaultGraphModel$GraphModelEdit createEdit(java.lang.Object[], java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap);
  public void fireCommit() throws java.lang.Exception;
  public void fireRollback() throws java.lang.Exception;
  public void fireVertexAdded(java.lang.Object, boolean) throws java.lang.Exception;
  public void fireEdgeAdded(java.lang.Object, java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public void fireCellRemoved(java.lang.Object, boolean) throws java.lang.Exception;
  public void fireParentChanged(java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public void fireSourceChanged(java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public void fireTargetChanged(java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public void fireAttributesChanged(java.lang.Object, java.util.Map, boolean) throws java.lang.Exception;
}
Compiled from "JGraphAdapterModel.java"
public class com.jgraph.example.adapter.JGraphAdapterModel$BusinessModelEdit extends org.jgraph.graph.DefaultGraphModel$GraphModelEdit {
  protected boolean inProgress;
  final com.jgraph.example.adapter.JGraphAdapterModel this$0;
  public com.jgraph.example.adapter.JGraphAdapterModel$BusinessModelEdit(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object[], java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap);
  public void execute();
}
Compiled from "JGraphBusinessObject.java"
public class com.jgraph.example.adapter.JGraphBusinessObject implements java.lang.Cloneable,java.io.Serializable {
  protected java.util.Map properties;
  protected java.lang.String valueKey;
  public com.jgraph.example.adapter.JGraphBusinessObject();
  public com.jgraph.example.adapter.JGraphBusinessObject(java.lang.Object);
  public java.util.Map getProperties();
  public void setProperties(java.util.Map);
  public void setValue(java.lang.Object);
  public java.lang.Object getValue();
  public java.lang.String getValueKey();
  public void setValueKey(java.lang.String);
  public java.lang.Object putProperty(java.lang.Object, java.lang.Object);
  public java.lang.Object getProperty(java.lang.Object);
  public java.lang.String toString();
  public java.lang.Object clone();
}
Compiled from "JGraphSQLBackend.java"
public class com.jgraph.example.adapter.JGraphSQLBackend implements com.jgraph.example.adapter.JGraphAdapterBackend {
  protected static final java.lang.String NO_ID;
  protected int lastId;
  protected boolean trxInProgress;
  protected java.lang.Object vertexPrototype;
  protected java.lang.Object edgePrototype;
  protected java.sql.Connection conn;
  public com.jgraph.example.adapter.JGraphSQLBackend(java.sql.Connection, java.lang.Object, java.lang.Object) throws java.lang.ClassNotFoundException, java.sql.SQLException;
  public void commit() throws java.lang.Exception;
  public void rollback() throws java.lang.Exception;
  public void vertexAdded(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, boolean) throws java.lang.Exception;
  public void edgeAdded(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  protected java.lang.Object objectAdded(java.lang.Object) throws java.sql.SQLException;
  public void cellRemoved(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, boolean) throws java.lang.Exception;
  public void parentChanged(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public void sourceChanged(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public void targetChanged(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object, boolean) throws java.lang.Exception;
  public void attributesChanged(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.util.Map, boolean) throws java.lang.Exception;
  public void propertiesChanged(java.lang.Object, java.util.Map) throws java.lang.Exception;
  public void propertyChanged(com.jgraph.example.adapter.JGraphSQLEntity, java.lang.Object, java.lang.Object) throws java.lang.Exception;
  public void propertyAdded(com.jgraph.example.adapter.JGraphSQLEntity, java.lang.Object, java.lang.Object) throws java.lang.Exception;
  public java.util.Collection findVertices(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object) throws java.sql.SQLException;
  protected java.util.Collection findCells(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.String) throws java.sql.SQLException;
  public java.lang.Object getParent(java.lang.Object);
  public java.lang.Object getSource(java.lang.Object);
  public java.lang.Object getTarget(java.lang.Object);
  public java.lang.Object createCell(com.jgraph.example.adapter.JGraphAdapterModel, com.jgraph.example.adapter.JGraphSQLEntity) throws java.sql.SQLException;
  public java.util.Collection findEdges(com.jgraph.example.adapter.JGraphAdapterModel, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, boolean) throws java.sql.SQLException;
  protected java.lang.String createFilter(java.lang.Object);
  protected java.util.Collection find(java.lang.String) throws java.sql.SQLException;
  protected synchronized java.lang.Object getNextEntityId();
  public com.jgraph.example.adapter.JGraphSQLEntity get(java.lang.Object) throws java.sql.SQLException;
  public synchronized void query(java.lang.String) throws java.sql.SQLException;
  public void dump(java.sql.ResultSet) throws java.sql.SQLException;
  public synchronized void update(java.lang.String) throws java.sql.SQLException;
  protected static void println(java.lang.String);
}
Compiled from "JGraphSQLBusinessModel.java"
public class com.jgraph.example.adapter.JGraphSQLBusinessModel extends com.jgraph.example.adapter.JGraphAdapterModel {
  public com.jgraph.example.adapter.JGraphSQLBusinessModel();
  public com.jgraph.example.adapter.JGraphSQLBusinessModel(java.util.List, org.jgraph.graph.AttributeMap);
  public com.jgraph.example.adapter.JGraphSQLBusinessModel(java.util.List, org.jgraph.graph.AttributeMap, com.jgraph.example.adapter.JGraphAdapterBackend);
  public void addProperty(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.util.Collection findVertices(java.lang.String, java.lang.Object) throws java.sql.SQLException;
  public java.util.Collection findEdges(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, boolean) throws java.sql.SQLException;
}
Compiled from "JGraphSQLEntity.java"
public class com.jgraph.example.adapter.JGraphSQLEntity extends com.jgraph.example.adapter.JGraphBusinessObject {
  protected java.lang.Object id;
  protected com.jgraph.example.adapter.JGraphSQLEntity parent;
  public com.jgraph.example.adapter.JGraphSQLEntity();
  public com.jgraph.example.adapter.JGraphSQLEntity(java.lang.Object);
  public com.jgraph.example.adapter.JGraphSQLEntity(java.lang.Object, com.jgraph.example.adapter.JGraphSQLEntity);
  public com.jgraph.example.adapter.JGraphSQLEntity(java.lang.Object, java.lang.Object, com.jgraph.example.adapter.JGraphSQLEntity);
  public java.lang.Object getID();
  public void setID(java.lang.Object);
  public com.jgraph.example.adapter.JGraphSQLEntity getParent();
  public void setParent(com.jgraph.example.adapter.JGraphSQLEntity);
  public java.lang.Object clone();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "JGraphSQLQueryPane.java"
public class com.jgraph.example.adapter.JGraphSQLQueryPane extends javax.swing.JPanel {
  public com.jgraph.example.adapter.JGraphSQLQueryPane(com.jgraph.example.adapter.JGraphAdapterExample, org.jgraph.JGraph);
  protected static void println(java.lang.String);
}
Compiled from "JGraphSQLQueryPane.java"
class com.jgraph.example.adapter.JGraphSQLQueryPane$1 extends java.awt.event.KeyAdapter {
  final javax.swing.JTextField val$input;
  final com.jgraph.example.adapter.JGraphSQLBusinessModel val$businessModel;
  final javax.swing.tree.DefaultTreeModel val$treeModel;
  final javax.swing.JTree val$tree;
  final com.jgraph.example.adapter.JGraphSQLQueryPane this$0;
  com.jgraph.example.adapter.JGraphSQLQueryPane$1(com.jgraph.example.adapter.JGraphSQLQueryPane, javax.swing.JTextField, com.jgraph.example.adapter.JGraphSQLBusinessModel, javax.swing.tree.DefaultTreeModel, javax.swing.JTree);
  public void keyPressed(java.awt.event.KeyEvent);
}
Compiled from "JGraphSQLQueryPane.java"
class com.jgraph.example.adapter.JGraphSQLQueryPane$2 extends java.awt.event.MouseAdapter {
  final javax.swing.JTree val$tree;
  final com.jgraph.example.adapter.JGraphSQLBusinessModel val$businessModel;
  final org.jgraph.JGraph val$graph;
  final com.jgraph.example.adapter.JGraphAdapterExample val$adapter;
  final com.jgraph.example.adapter.JGraphSQLQueryPane this$0;
  com.jgraph.example.adapter.JGraphSQLQueryPane$2(com.jgraph.example.adapter.JGraphSQLQueryPane, javax.swing.JTree, com.jgraph.example.adapter.JGraphSQLBusinessModel, org.jgraph.JGraph, com.jgraph.example.adapter.JGraphAdapterExample);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "JGraphSQLRelation.java"
public class com.jgraph.example.adapter.JGraphSQLRelation extends com.jgraph.example.adapter.JGraphSQLEntity {
  protected com.jgraph.example.adapter.JGraphSQLEntity source;
  protected com.jgraph.example.adapter.JGraphSQLEntity target;
  public com.jgraph.example.adapter.JGraphSQLRelation();
  public com.jgraph.example.adapter.JGraphSQLRelation(java.lang.Object);
  public com.jgraph.example.adapter.JGraphSQLRelation(java.lang.Object, com.jgraph.example.adapter.JGraphSQLEntity, com.jgraph.example.adapter.JGraphSQLEntity, com.jgraph.example.adapter.JGraphSQLEntity);
  public com.jgraph.example.adapter.JGraphSQLRelation(java.lang.Object, java.lang.Object, com.jgraph.example.adapter.JGraphSQLEntity, com.jgraph.example.adapter.JGraphSQLEntity, com.jgraph.example.adapter.JGraphSQLEntity);
  public com.jgraph.example.adapter.JGraphSQLEntity getSource();
  public void setSource(com.jgraph.example.adapter.JGraphSQLEntity);
  public com.jgraph.example.adapter.JGraphSQLEntity getTarget();
  public void setTarget(com.jgraph.example.adapter.JGraphSQLEntity);
}
Compiled from "FastCellViewFactory.java"
public class com.jgraph.example.fastgraph.FastCellViewFactory implements org.jgraph.graph.CellViewFactory,java.io.Serializable {
  public com.jgraph.example.fastgraph.FastCellViewFactory();
  public org.jgraph.graph.CellView createView(org.jgraph.graph.GraphModel, java.lang.Object);
  protected org.jgraph.graph.EdgeView createEdgeView(java.lang.Object);
  protected org.jgraph.graph.PortView createPortView(java.lang.Object);
  protected org.jgraph.graph.VertexView createVertexView(java.lang.Object);
}
Compiled from "FastCircleCell.java"
public class com.jgraph.example.fastgraph.FastCircleCell extends org.jgraph.graph.DefaultGraphCell {
  public com.jgraph.example.fastgraph.FastCircleCell();
  public com.jgraph.example.fastgraph.FastCircleCell(java.lang.Object);
  public com.jgraph.example.fastgraph.FastCircleCell(java.lang.Object, org.jgraph.graph.AttributeMap);
}
Compiled from "FastCircleView.java"
public class com.jgraph.example.fastgraph.FastCircleView extends com.jgraph.example.fastgraph.FastVertexView {
  public static transient com.jgraph.example.fastgraph.FastCircleView$JGraphEllipseRenderer renderer;
  public com.jgraph.example.fastgraph.FastCircleView();
  public com.jgraph.example.fastgraph.FastCircleView(java.lang.Object);
  public java.awt.geom.Point2D getPerimeterPoint(java.awt.geom.Point2D, java.awt.geom.Point2D);
  public org.jgraph.graph.CellViewRenderer getRenderer();
  static {};
}
Compiled from "FastCircleView.java"
public class com.jgraph.example.fastgraph.FastCircleView$JGraphEllipseRenderer extends org.jgraph.graph.VertexRenderer {
  public com.jgraph.example.fastgraph.FastCircleView$JGraphEllipseRenderer();
  public java.awt.Dimension getPreferredSize();
  public void paint(java.awt.Graphics);
}
Compiled from "FastEdge.java"
public class com.jgraph.example.fastgraph.FastEdge extends org.jgraph.graph.DefaultEdge {
  public com.jgraph.example.fastgraph.FastEdge(java.lang.Object, org.jgraph.graph.AttributeMap);
  public void setAttributes(org.jgraph.graph.AttributeMap);
}
Compiled from "FastEdgeView.java"
public class com.jgraph.example.fastgraph.FastEdgeView extends org.jgraph.graph.EdgeView {
  public org.jgraph.graph.CellViewRenderer getRenderer();
  public com.jgraph.example.fastgraph.FastEdgeView(java.lang.Object);
  protected org.jgraph.graph.AttributeMap createAttributeMap();
  protected org.jgraph.graph.AttributeMap getCellAttributes(org.jgraph.graph.GraphModel);
  protected void mergeAttributes();
  public void setAttributes(org.jgraph.graph.AttributeMap);
  public java.util.Map changeAttributes(org.jgraph.graph.GraphLayoutCache, java.util.Map);
  public boolean intersects(org.jgraph.JGraph, java.awt.geom.Rectangle2D);
  public void update(org.jgraph.graph.GraphLayoutCache);
  public java.awt.geom.Rectangle2D getBounds();
}
Compiled from "FastGraph.java"
public class com.jgraph.example.fastgraph.FastGraph extends org.jgraph.example.GraphEd {
  protected com.jgraph.example.JGraphGraphFactory graphFactory;
  protected javax.swing.JDialog sampleDialog;
  public com.jgraph.example.fastgraph.FastGraph();
  protected org.jgraph.JGraph createGraph();
  public java.util.Map createCellAttributes(java.awt.geom.Point2D);
  protected org.jgraph.graph.DefaultGraphCell createDefaultGraphCell();
  public java.util.Map createEdgeAttributes();
  public static void main(java.lang.String[]);
}
Compiled from "FastGraph.java"
public class com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar extends javax.swing.JMenuBar {
  final com.jgraph.example.fastgraph.FastGraph this$0;
  public com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar(com.jgraph.example.fastgraph.FastGraph, com.jgraph.example.fastgraph.FastGraph);
}
Compiled from "FastGraph.java"
class com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar$1 extends javax.swing.AbstractAction {
  final com.jgraph.example.fastgraph.FastGraph val$this$0;
  final com.jgraph.example.fastgraph.FastGraph val$app;
  final com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar this$1;
  com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar$1(com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar, java.lang.String, com.jgraph.example.fastgraph.FastGraph, com.jgraph.example.fastgraph.FastGraph);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FastGraph.java"
class com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar$2 extends javax.swing.AbstractAction {
  final com.jgraph.example.fastgraph.FastGraph val$this$0;
  final com.jgraph.example.fastgraph.FastGraph val$app;
  final com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar this$1;
  com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar$2(com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar, java.lang.String, com.jgraph.example.fastgraph.FastGraph, com.jgraph.example.fastgraph.FastGraph);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FastGraph.java"
class com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar$3 extends javax.swing.AbstractAction {
  final com.jgraph.example.fastgraph.FastGraph val$this$0;
  final com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar this$1;
  com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar$3(com.jgraph.example.fastgraph.FastGraph$FastGraphMenuBar, java.lang.String, com.jgraph.example.fastgraph.FastGraph);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "FastGraph.java"
public class com.jgraph.example.fastgraph.FastGraph$FastMarqueeHandler extends org.jgraph.example.GraphEd$MyMarqueeHandler {
  final com.jgraph.example.fastgraph.FastGraph this$0;
  public com.jgraph.example.fastgraph.FastGraph$FastMarqueeHandler(com.jgraph.example.fastgraph.FastGraph);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
}
Compiled from "FastGraph.java"
public class com.jgraph.example.fastgraph.FastGraph$MyFastGraph extends org.jgraph.JGraph {
  public com.jgraph.example.fastgraph.FastGraph$MyFastGraph(org.jgraph.graph.GraphModel);
  public void updateUI();
}
Compiled from "FastGraphFactory.java"
public class com.jgraph.example.fastgraph.FastGraphFactory extends com.jgraph.example.JGraphGraphFactory {
  public com.jgraph.example.fastgraph.FastGraphFactory();
  protected org.jgraph.graph.DefaultGraphCell createVertex(java.lang.Object, java.awt.geom.Point2D, java.util.Map);
  protected org.jgraph.graph.Edge createEdge(java.util.Map, org.jgraph.graph.Port, org.jgraph.graph.Port);
}
Compiled from "FastGraphFactory.java"
public class com.jgraph.example.fastgraph.FastGraphFactory$FastFactoryConfigDialog extends com.jgraph.example.JGraphGraphFactory$FactoryConfigDialog {
  final com.jgraph.example.fastgraph.FastGraphFactory this$0;
  public com.jgraph.example.fastgraph.FastGraphFactory$FastFactoryConfigDialog(com.jgraph.example.fastgraph.FastGraphFactory);
  protected void applyValues();
}
Compiled from "FastGraphModel.java"
public class com.jgraph.example.fastgraph.FastGraphModel extends org.jgraph.graph.DefaultGraphModel {
  protected boolean undoDisabled;
  public com.jgraph.example.fastgraph.FastGraphModel();
  public boolean acceptsSource(java.lang.Object, java.lang.Object);
  public boolean acceptsTarget(java.lang.Object, java.lang.Object);
  public void insert(java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public void edit(java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  protected java.util.Map handleAttributes(java.util.Map);
}
Compiled from "FastGraphUI.java"
public class com.jgraph.example.fastgraph.FastGraphUI extends org.jgraph.plaf.basic.BasicGraphUI {
  public com.jgraph.example.fastgraph.FastGraphUI();
  public void paintCell(java.awt.Graphics, org.jgraph.graph.CellView, java.awt.geom.Rectangle2D, boolean);
  protected void updateCachedPreferredSize();
}
Compiled from "FastPortView.java"
public class com.jgraph.example.fastgraph.FastPortView extends org.jgraph.graph.PortView {
  public com.jgraph.example.fastgraph.FastPortView(java.lang.Object);
  protected org.jgraph.graph.AttributeMap createAttributeMap();
  protected org.jgraph.graph.AttributeMap getCellAttributes(org.jgraph.graph.GraphModel);
  protected void mergeAttributes();
  public void setAttributes(org.jgraph.graph.AttributeMap);
  public java.util.Map changeAttributes(org.jgraph.graph.GraphLayoutCache, java.util.Map);
}
Compiled from "FastVertexView.java"
public class com.jgraph.example.fastgraph.FastVertexView extends org.jgraph.graph.VertexView {
  public com.jgraph.example.fastgraph.FastVertexView();
  public com.jgraph.example.fastgraph.FastVertexView(java.lang.Object);
  protected org.jgraph.graph.AttributeMap createAttributeMap();
  protected org.jgraph.graph.AttributeMap getCellAttributes(org.jgraph.graph.GraphModel);
  protected void mergeAttributes();
  public void setAttributes(org.jgraph.graph.AttributeMap);
  public java.util.Map changeAttributes(org.jgraph.graph.GraphLayoutCache, java.util.Map);
}
Compiled from "EditableGroupDemo.java"
public class com.jgraph.example.groupeditor.EditableGroupDemo extends com.jgraph.example.GraphEdX {
  protected com.jgraph.example.groupeditor.GroupManager foldingManager;
  protected void installListeners(org.jgraph.JGraph);
  protected void uninstallListeners(org.jgraph.JGraph);
  public com.jgraph.example.groupeditor.EditableGroupDemo();
  public static void main(java.lang.String[]);
}
Compiled from "EditableGroupRenderer.java"
public class com.jgraph.example.groupeditor.EditableGroupRenderer extends org.jgraph.graph.VertexRenderer {
  public static java.awt.Rectangle editorButton;
  public com.jgraph.example.groupeditor.EditableGroupRenderer();
  public void paint(java.awt.Graphics);
  public boolean isEditAsked(java.awt.geom.Point2D, java.awt.geom.Rectangle2D);
  static {};
}
Compiled from "GroupManager.java"
public class com.jgraph.example.groupeditor.GroupManager extends javax.swing.event.MouseInputAdapter {
  public com.jgraph.example.groupeditor.GroupManager();
  public void mouseReleased(java.awt.event.MouseEvent);
  public static org.jgraph.graph.CellView getGroupByFoldingHandle(org.jgraph.JGraph, java.awt.geom.Point2D);
}
Compiled from "BusinessObjectEditor.java"
public class com.jgraph.example.mycellmodeleditor.BusinessObjectEditor extends org.jgraph.graph.DefaultGraphCellEditor {
  public static boolean editorInsideCell;
  public com.jgraph.example.mycellmodeleditor.BusinessObjectEditor();
  protected org.jgraph.graph.GraphCellEditor createGraphCellEditor();
  static {};
}
Compiled from "BusinessObjectEditor.java"
class com.jgraph.example.mycellmodeleditor.BusinessObjectEditor$RealCellEditor extends javax.swing.AbstractCellEditor implements org.jgraph.graph.GraphCellEditor {
  com.jgraph.example.mycellmodeleditor.MyEditorComponent editorComponent;
  final com.jgraph.example.mycellmodeleditor.BusinessObjectEditor this$0;
  com.jgraph.example.mycellmodeleditor.BusinessObjectEditor$RealCellEditor(com.jgraph.example.mycellmodeleditor.BusinessObjectEditor);
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
  public java.lang.Object getCellEditorValue();
}
Compiled from "BusinessObjectWrapper.java"
public class com.jgraph.example.mycellmodeleditor.BusinessObjectWrapper {
  public com.jgraph.example.mycellmodeleditor.BusinessObjectWrapper();
  public java.lang.String getLabel();
  public void setLabel(java.lang.String);
  public javax.swing.tree.DefaultMutableTreeNode getValue();
  public void setValue(javax.swing.tree.DefaultMutableTreeNode);
  public java.lang.String toString();
}
Compiled from "MyCellModelEditor.java"
public class com.jgraph.example.mycellmodeleditor.MyCellModelEditor {
  public com.jgraph.example.mycellmodeleditor.MyCellModelEditor();
  public static void main(java.lang.String[]);
}
Compiled from "MyEditorComponent.java"
public class com.jgraph.example.mycellmodeleditor.MyEditorComponent extends javax.swing.JComponent implements java.awt.event.ActionListener,java.awt.event.ItemListener,javax.swing.event.TreeSelectionListener {
  public static javax.swing.CellEditor cellEditor;
  public com.jgraph.example.mycellmodeleditor.MyEditorComponent(javax.swing.CellEditor);
  public void installValue(com.jgraph.example.mycellmodeleditor.BusinessObjectWrapper);
  public com.jgraph.example.mycellmodeleditor.BusinessObjectWrapper getValue();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void valueChanged(javax.swing.event.TreeSelectionEvent);
  public void itemStateChanged(java.awt.event.ItemEvent);
  static {};
}
Compiled from "GPCellViewFactory.java"
public class com.jgraph.example.mycellview.GPCellViewFactory extends org.jgraph.graph.DefaultCellViewFactory {
  public static final java.lang.String VIEW_CLASS_KEY;
  public com.jgraph.example.mycellview.GPCellViewFactory();
  public static final void setViewClass(java.util.Map, java.lang.String);
  protected org.jgraph.graph.VertexView createVertexView(java.lang.Object);
}
Compiled from "JGraphEllipseView.java"
public class com.jgraph.example.mycellview.JGraphEllipseView extends org.jgraph.graph.VertexView {
  public static transient com.jgraph.example.mycellview.JGraphEllipseView$JGraphEllipseRenderer renderer;
  public com.jgraph.example.mycellview.JGraphEllipseView();
  public com.jgraph.example.mycellview.JGraphEllipseView(java.lang.Object);
  public java.awt.geom.Point2D getPerimeterPoint(org.jgraph.graph.EdgeView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  public org.jgraph.graph.CellViewRenderer getRenderer();
  static {};
}
Compiled from "JGraphEllipseView.java"
public class com.jgraph.example.mycellview.JGraphEllipseView$JGraphEllipseRenderer extends org.jgraph.graph.VertexRenderer {
  public com.jgraph.example.mycellview.JGraphEllipseView$JGraphEllipseRenderer();
  public java.awt.Dimension getPreferredSize();
  public void paint(java.awt.Graphics);
}
Compiled from "JGraphRoundRectView.java"
public class com.jgraph.example.mycellview.JGraphRoundRectView extends org.jgraph.graph.VertexView {
  public static transient com.jgraph.example.mycellview.JGraphRoundRectView$ActivityRenderer renderer;
  public com.jgraph.example.mycellview.JGraphRoundRectView();
  public com.jgraph.example.mycellview.JGraphRoundRectView(java.lang.Object);
  public static int getArcSize(int, int);
  public org.jgraph.graph.CellViewRenderer getRenderer();
  static {};
}
Compiled from "JGraphRoundRectView.java"
public class com.jgraph.example.mycellview.JGraphRoundRectView$ActivityRenderer extends org.jgraph.graph.VertexRenderer {
  public com.jgraph.example.mycellview.JGraphRoundRectView$ActivityRenderer();
  public java.awt.Dimension getPreferredSize();
  public void paint(java.awt.Graphics);
}
Compiled from "MyCellView.java"
public class com.jgraph.example.mycellview.MyCellView {
  public com.jgraph.example.mycellview.MyCellView();
  public static void main(java.lang.String[]);
  public static org.jgraph.graph.DefaultGraphCell createVertex(double, double, double, double, java.awt.Color, boolean, org.jgraph.graph.DefaultGraphCell, java.lang.String);
}
Compiled from "BusinessObjectEditor2.java"
public class com.jgraph.example.panelexample.BusinessObjectEditor2 extends org.jgraph.graph.DefaultGraphCellEditor {
  public static boolean editorInsideCell;
  public com.jgraph.example.panelexample.BusinessObjectEditor2();
  protected org.jgraph.graph.GraphCellEditor createGraphCellEditor();
  static {};
}
Compiled from "BusinessObjectEditor2.java"
class com.jgraph.example.panelexample.BusinessObjectEditor2$RealCellEditor extends javax.swing.AbstractCellEditor implements org.jgraph.graph.GraphCellEditor {
  com.jgraph.example.panelexample.FlyweightUIComponent editorComponent;
  final com.jgraph.example.panelexample.BusinessObjectEditor2 this$0;
  com.jgraph.example.panelexample.BusinessObjectEditor2$RealCellEditor(com.jgraph.example.panelexample.BusinessObjectEditor2);
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
  public java.lang.Object getCellEditorValue();
}
Compiled from "BusinessObjectWrapper2.java"
public class com.jgraph.example.panelexample.BusinessObjectWrapper2 {
  public com.jgraph.example.panelexample.BusinessObjectWrapper2();
  public java.lang.String getLabel();
  public void setLabel(java.lang.String);
  public javax.swing.tree.DefaultMutableTreeNode getValue();
  public void setValue(javax.swing.tree.DefaultMutableTreeNode);
  public java.lang.String toString();
  public org.jgraph.graph.CellView[] getPortviews();
  public void setPortviews(org.jgraph.graph.CellView[]);
}
Compiled from "FlyweightUIComponent.java"
public class com.jgraph.example.panelexample.FlyweightUIComponent extends javax.swing.JPanel implements java.awt.event.ActionListener,java.awt.event.ItemListener,javax.swing.event.TreeSelectionListener {
  public javax.swing.JPanel east;
  public javax.swing.JPanel west;
  public javax.swing.JPanel north;
  public javax.swing.JPanel south;
  public javax.swing.JPanel center;
  public static boolean editorInsideCell;
  public com.jgraph.example.panelexample.FlyweightUIComponent(javax.swing.CellEditor);
  public void paint(java.awt.Graphics);
  protected void installAttributes(java.lang.Object, org.jgraph.graph.CellView, boolean, org.jgraph.JGraph);
  public com.jgraph.example.panelexample.BusinessObjectWrapper2 getValue();
  public void actionPerformed(java.awt.event.ActionEvent);
  public void valueChanged(javax.swing.event.TreeSelectionEvent);
  public void itemStateChanged(java.awt.event.ItemEvent);
  static {};
}
Compiled from "PortLabelCell.java"
public class com.jgraph.example.panelexample.PortLabelCell extends org.jgraph.graph.DefaultGraphCell {
  protected int numLeftPorts;
  protected int numRightPorts;
  public com.jgraph.example.panelexample.PortLabelCell();
  public com.jgraph.example.panelexample.PortLabelCell(java.lang.Object);
  public org.jgraph.graph.Port addLeftPort(int, java.lang.String, java.util.Map, org.jgraph.graph.ParentMap);
  public org.jgraph.graph.Port addLeftPort(int, org.jgraph.graph.Port, java.util.Map, org.jgraph.graph.ParentMap);
  public org.jgraph.graph.Port addRightPort(int, java.lang.String, java.util.Map, org.jgraph.graph.ParentMap);
  public org.jgraph.graph.Port addRightPort(int, org.jgraph.graph.Port, java.util.Map, org.jgraph.graph.ParentMap);
  public void removeLeftPort(int, java.util.Map, org.jgraph.graph.ParentMap);
  public void removeRightPort(int, java.util.Map, org.jgraph.graph.ParentMap);
  public int getNumLeftPorts();
  public void setNumLeftPorts(int);
  public int getNumRightPorts();
  public void setNumRightPorts(int);
}
Compiled from "PortLabelGraph.java"
public class com.jgraph.example.panelexample.PortLabelGraph extends org.jgraph.example.GraphEd {
  protected javax.swing.JDialog sampleDialog;
  public com.jgraph.example.panelexample.PortLabelGraph();
  public java.util.Map createCellAttributes(java.awt.geom.Point2D);
  protected org.jgraph.graph.DefaultGraphCell createDefaultGraphCell();
  public static double roundPortPos(double);
  public static void main(java.lang.String[]);
}
Compiled from "PortLabelGraph.java"
class com.jgraph.example.panelexample.PortLabelGraph$1 extends org.jgraph.graph.DefaultCellViewFactory {
  final com.jgraph.example.panelexample.PortLabelGraph this$0;
  com.jgraph.example.panelexample.PortLabelGraph$1(com.jgraph.example.panelexample.PortLabelGraph);
  protected org.jgraph.graph.EdgeView createEdgeView(java.lang.Object);
  protected org.jgraph.graph.PortView createPortView(java.lang.Object);
  protected org.jgraph.graph.VertexView createVertexView(java.lang.Object);
}
Compiled from "PortLabelVertexView.java"
public class com.jgraph.example.panelexample.PortLabelVertexView extends org.jgraph.graph.VertexView {
  protected static com.jgraph.example.panelexample.PortLabelVertexView$WrapperPortLabelRenderer renderer;
  protected org.jgraph.graph.CellView[] ports;
  public static transient org.jgraph.graph.GraphCellEditor cellEditor;
  public org.jgraph.graph.GraphCellEditor getEditor();
  public com.jgraph.example.panelexample.PortLabelVertexView();
  public com.jgraph.example.panelexample.PortLabelVertexView(java.lang.Object);
  public org.jgraph.graph.CellViewRenderer getRenderer();
  static {};
}
Compiled from "PortLabelVertexView.java"
public class com.jgraph.example.panelexample.PortLabelVertexView$WrapperPortLabelRenderer extends javax.swing.JPanel implements org.jgraph.graph.CellViewRenderer {
  com.jgraph.example.panelexample.FlyweightUIComponent uiPanel;
  public com.jgraph.example.panelexample.PortLabelVertexView$WrapperPortLabelRenderer();
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
}
Compiled from "PortLabelCell.java"
public class com.jgraph.example.portlabels.PortLabelCell extends org.jgraph.graph.DefaultGraphCell {
  protected int numLeftPorts;
  protected int numRightPorts;
  public com.jgraph.example.portlabels.PortLabelCell();
  public com.jgraph.example.portlabels.PortLabelCell(java.lang.Object);
  public org.jgraph.graph.Port addLeftPort(int, java.lang.String, java.util.Map, org.jgraph.graph.ParentMap);
  public org.jgraph.graph.Port addLeftPort(int, org.jgraph.graph.Port, java.util.Map, org.jgraph.graph.ParentMap);
  public org.jgraph.graph.Port addRightPort(int, java.lang.String, java.util.Map, org.jgraph.graph.ParentMap);
  public org.jgraph.graph.Port addRightPort(int, org.jgraph.graph.Port, java.util.Map, org.jgraph.graph.ParentMap);
  public void removeLeftPort(int, java.util.Map, org.jgraph.graph.ParentMap);
  public void removeRightPort(int, java.util.Map, org.jgraph.graph.ParentMap);
  public int getNumLeftPorts();
  public void setNumLeftPorts(int);
  public int getNumRightPorts();
  public void setNumRightPorts(int);
}
Compiled from "PortLabelGraph.java"
public class com.jgraph.example.portlabels.PortLabelGraph extends org.jgraph.example.GraphEd {
  protected com.jgraph.example.JGraphGraphFactory graphFactory;
  protected javax.swing.JDialog sampleDialog;
  public com.jgraph.example.portlabels.PortLabelGraph();
  public java.util.Map createCellAttributes(java.awt.geom.Point2D);
  protected org.jgraph.graph.DefaultGraphCell createDefaultGraphCell();
  public static void main(java.lang.String[]);
}
Compiled from "PortLabelGraph.java"
class com.jgraph.example.portlabels.PortLabelGraph$1 extends org.jgraph.graph.DefaultCellViewFactory {
  final com.jgraph.example.portlabels.PortLabelGraph this$0;
  com.jgraph.example.portlabels.PortLabelGraph$1(com.jgraph.example.portlabels.PortLabelGraph);
  protected org.jgraph.graph.EdgeView createEdgeView(java.lang.Object);
  protected org.jgraph.graph.PortView createPortView(java.lang.Object);
  protected org.jgraph.graph.VertexView createVertexView(java.lang.Object);
}
Compiled from "PortLabelVertexView.java"
public class com.jgraph.example.portlabels.PortLabelVertexView extends org.jgraph.graph.VertexView {
  protected static com.jgraph.example.portlabels.PortLabelVertexView$WrapperPortLabelRenderer renderer;
  protected org.jgraph.graph.CellView[] ports;
  public com.jgraph.example.portlabels.PortLabelVertexView();
  public com.jgraph.example.portlabels.PortLabelVertexView(java.lang.Object);
  public org.jgraph.graph.CellViewRenderer getRenderer();
  static {};
}
Compiled from "PortLabelVertexView.java"
public class com.jgraph.example.portlabels.PortLabelVertexView$PortLabelVertexRenderer extends org.jgraph.graph.VertexRenderer {
  protected org.jgraph.graph.CellView[] ports;
  protected java.awt.FontMetrics fontMetrics;
  public static transient int PORTLABELSPACING;
  public static transient int MINIMUMHORIZONTALSPACING;
  public static transient int MINIMUMVERTICALSPACING;
  public static transient int COLORHEIGHTBUFFER;
  public static transient int MAXLABELWIDTH;
  public com.jgraph.example.portlabels.PortLabelVertexView$PortLabelVertexRenderer();
  public void paint(java.awt.Graphics);
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
  protected void installAttributes(org.jgraph.graph.CellView);
  public static void drawPortLabel(java.awt.Graphics, java.lang.String, double, double, java.awt.Color, boolean);
  public void paintPortLabels(java.awt.Graphics);
  public java.awt.Dimension getPreferredSize();
  static {};
}
Compiled from "PortLabelVertexView.java"
public class com.jgraph.example.portlabels.PortLabelVertexView$WrapperPortLabelRenderer extends javax.swing.JPanel implements org.jgraph.graph.CellViewRenderer {
  protected transient org.jgraph.JGraph graph;
  protected transient java.awt.Color gradientColor;
  protected transient boolean hasFocus;
  protected transient boolean selected;
  protected transient boolean preview;
  protected transient java.awt.Color defaultForeground;
  protected transient java.awt.Color defaultBackground;
  public com.jgraph.example.portlabels.PortLabelVertexView$WrapperPortLabelRenderer();
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
  public void paint(java.awt.Graphics);
  public java.awt.geom.Point2D getPerimeterPoint(org.jgraph.graph.VertexView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  protected void installAttributes(org.jgraph.graph.CellView);
  static {};
}
Compiled from "SVGEdgeWriter.java"
public class com.jgraph.io.svg.SVGEdgeWriter {
  public static java.lang.String DEFAULT_LINE_COLOR;
  public com.jgraph.io.svg.SVGEdgeWriter();
  public org.w3c.dom.Node createNode(com.jgraph.io.svg.SVGGraphWriter, org.w3c.dom.Document, org.jgraph.graph.CellView, double, double);
  static {};
}
Compiled from "SVGGraphConstants.java"
public class com.jgraph.io.svg.SVGGraphConstants {
  public static final int NO_SHAPE_SPECIFIED;
  public static final int SHAPE_RECTANGLE;
  public static final int SHAPE_ELLIPSE;
  public static final int SHAPE_ROUNDRECT;
  public static final int SHAPE_CYLINDER;
  public static final int SHAPE_DIAMOND;
  protected static int defaultShape;
  public static final java.lang.String VERTEXSHAPE;
  public static final java.lang.String VERTEXSHADOW;
  public com.jgraph.io.svg.SVGGraphConstants();
  public static void setShape(java.util.Map, int);
  public static int getShape(java.util.Map);
  public static void setShadow(java.util.Map, boolean);
  public static boolean isShadow(java.util.Map);
  static {};
}
Compiled from "SVGGraphWriter.java"
public class com.jgraph.io.svg.SVGGraphWriter {
  public static java.awt.Font TITLE_FONT;
  public static int TITLE_VSPACING;
  public static double FONT_PROPORTION_FACTOR;
  public static java.lang.String TITLE_HEXCOLOR;
  protected com.jgraph.io.svg.SVGVertexWriter vertexFactory;
  protected com.jgraph.io.svg.SVGEdgeWriter edgeFactory;
  protected java.util.Map gradients;
  protected java.awt.Rectangle viewBox;
  public com.jgraph.io.svg.SVGGraphWriter();
  public void write(java.io.OutputStream, java.lang.String, org.jgraph.graph.GraphLayoutCache, int);
  protected org.w3c.dom.Node createNode(org.w3c.dom.Document, java.lang.String, org.jgraph.graph.GraphLayoutCache, int) throws javax.xml.parsers.ParserConfigurationException;
  protected org.w3c.dom.Node createRoot(org.w3c.dom.Document, double, double, int);
  public org.w3c.dom.Node getGradient(org.w3c.dom.Document, java.lang.String, java.lang.String);
  protected org.w3c.dom.Node createGradient(org.w3c.dom.Document, java.lang.String, java.lang.String, java.lang.String);
  public org.w3c.dom.Node createShapeNode(org.w3c.dom.Document, int, java.awt.geom.Rectangle2D, double, double, java.lang.String, java.lang.String, java.lang.String, float, double, boolean);
  public org.w3c.dom.Node createTextNode(org.w3c.dom.Document, java.lang.String, java.lang.String, java.awt.Font, java.lang.String, int, int);
  protected org.w3c.dom.Node createDropShadowFilter(org.w3c.dom.Document, int, int, int);
  public java.lang.Object[] getLabels(org.jgraph.graph.CellView);
  static {};
}
Compiled from "SVGUtils.java"
public class com.jgraph.io.svg.SVGUtils {
  public static int LINESPACING;
  public static java.lang.String HEXCOLOR_BLACK;
  public static java.lang.String HEXCOLOR_WHITE;
  public com.jgraph.io.svg.SVGUtils();
  public static java.lang.String getHexEncoding(java.awt.Color);
  static {};
}
Compiled from "SVGVertexRenderer.java"
public class com.jgraph.io.svg.SVGVertexRenderer extends org.jgraph.graph.VertexRenderer {
  protected int shape;
  public com.jgraph.io.svg.SVGVertexRenderer();
  public java.awt.geom.Point2D getPerimeterPoint(org.jgraph.graph.VertexView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  public void installAttributes(org.jgraph.graph.CellView);
  public java.awt.geom.Point2D getEllipsePerimeterPoint(org.jgraph.graph.VertexView, java.awt.geom.Point2D, java.awt.geom.Point2D);
}
Compiled from "SVGVertexWriter.java"
public class com.jgraph.io.svg.SVGVertexWriter {
  public static java.lang.String HEXCOLOR_SHADOW;
  public static double SHADOW_OPACITY;
  public static int SHADOW_DISTANCE;
  public com.jgraph.io.svg.SVGVertexWriter();
  public org.w3c.dom.Node createNode(com.jgraph.io.svg.SVGGraphWriter, org.w3c.dom.Document, org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.CellView, double, double);
  static {};
}
Compiled from "DataGraphLayoutCache.java"
public class com.jgraph.layout.DataGraphLayoutCache extends org.jgraph.graph.GraphLayoutCache implements org.jgraph.event.GraphModelListener {
  public com.jgraph.layout.DataGraphLayoutCache();
  public com.jgraph.layout.DataGraphLayoutCache(org.jgraph.graph.GraphModel, org.jgraph.graph.CellViewFactory);
  public com.jgraph.layout.DataGraphLayoutCache(org.jgraph.graph.GraphModel, org.jgraph.graph.CellViewFactory, boolean);
  public com.jgraph.layout.DataGraphLayoutCache(org.jgraph.graph.GraphModel, org.jgraph.graph.CellViewFactory, org.jgraph.graph.CellView[], org.jgraph.graph.CellView[], boolean);
  public void graphChanged(org.jgraph.event.GraphModelEvent);
}
Compiled from "JGraphCompoundLayout.java"
public class com.jgraph.layout.JGraphCompoundLayout implements com.jgraph.layout.JGraphLayout {
  protected java.util.List layouts;
  public com.jgraph.layout.JGraphCompoundLayout();
  public com.jgraph.layout.JGraphCompoundLayout(com.jgraph.layout.JGraphLayout[]);
  public void run(com.jgraph.layout.JGraphFacade);
  public void add(com.jgraph.layout.JGraphLayout);
  public void remove(com.jgraph.layout.JGraphLayout);
  public java.util.List getLayouts();
}
Compiled from "JGraphExampleGraph.java"
public class com.jgraph.layout.JGraphExampleGraph extends org.jgraph.example.GraphEd$MyGraph {
  protected int delay;
  protected int steps;
  protected int step;
  protected java.util.Map oldBounds;
  protected java.util.Map newBounds;
  protected java.awt.geom.Rectangle2D oldClipBounds;
  protected java.awt.geom.Rectangle2D newClipBounds;
  public com.jgraph.layout.JGraphExampleGraph(org.jgraph.graph.GraphModel);
  public com.jgraph.layout.JGraphExampleGraph(org.jgraph.graph.GraphModel, org.jgraph.graph.GraphLayoutCache);
  public void morph(java.util.Map, java.util.Set);
  protected java.util.Set initMorphing(java.util.Map, java.util.Set);
  protected void restore();
  protected void morphCell(java.lang.Object, int);
  protected void setCellBounds(java.lang.Object, java.awt.geom.Rectangle2D);
}
Compiled from "JGraphExampleGraph.java"
class com.jgraph.layout.JGraphExampleGraph$1 extends javax.swing.AbstractAction {
  final java.util.Map val$nestedMap;
  final org.jgraph.graph.CellView[] val$edgeViews;
  final com.jgraph.layout.JGraphExampleGraph this$0;
  com.jgraph.layout.JGraphExampleGraph$1(com.jgraph.layout.JGraphExampleGraph, java.util.Map, org.jgraph.graph.CellView[]);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphExampleLayoutCache.java"
public class com.jgraph.layout.JGraphExampleLayoutCache extends org.jgraph.graph.GraphLayoutCache {
  protected transient javax.swing.JDialog configDialog;
  protected transient com.l2fprod.common.propertysheet.PropertySheetPanel propertySheet;
  protected transient com.jgraph.layout.JGraphExampleGraph graph;
  protected boolean ignoreChildren;
  protected boolean ignoreHidden;
  protected boolean ignoreUnconnected;
  protected boolean layoutDirectedGraph;
  protected boolean layoutIgnoreGrid;
  protected boolean layoutFlushOrigin;
  protected boolean layoutMoveSelection;
  protected boolean morphing;
  protected transient boolean autolayout;
  protected transient com.jgraph.layout.JGraphLayout layout;
  public com.jgraph.layout.JGraphExampleLayoutCache();
  public com.jgraph.layout.JGraphExampleLayoutCache(com.jgraph.layout.JGraphExampleGraph);
  public void setGraph(com.jgraph.layout.JGraphExampleGraph);
  public com.jgraph.layout.JGraphExampleLayoutCache(org.jgraph.graph.GraphModel, org.jgraph.graph.CellViewFactory, org.jgraph.graph.CellView[], org.jgraph.graph.CellView[], boolean);
  public void edit(java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public void layout(java.util.Map);
  protected void processResult(com.jgraph.layout.JGraphFacade, java.util.Map);
  public java.awt.geom.Rectangle2D getBounds(java.lang.Object, java.util.Map);
  public boolean getPartial();
  public void configureLayout();
}
Compiled from "JGraphExampleLayoutCache.java"
class com.jgraph.layout.JGraphExampleLayoutCache$1 implements java.beans.PropertyChangeListener {
  final javax.swing.ProgressMonitor val$progressMonitor;
  final com.jgraph.layout.JGraphLayoutProgress val$progress;
  final com.jgraph.layout.JGraphExampleLayoutCache this$0;
  com.jgraph.layout.JGraphExampleLayoutCache$1(com.jgraph.layout.JGraphExampleLayoutCache, javax.swing.ProgressMonitor, com.jgraph.layout.JGraphLayoutProgress);
  public void propertyChange(java.beans.PropertyChangeEvent);
}
Compiled from "JGraphExampleLayoutCache.java"
class com.jgraph.layout.JGraphExampleLayoutCache$2 extends java.lang.Thread {
  final com.jgraph.layout.JGraphLayoutProgress val$progress;
  final java.beans.PropertyChangeListener val$propertyChangeListener;
  final com.jgraph.layout.JGraphFacade val$facade;
  final javax.swing.ProgressMonitor val$progressMonitor;
  final java.util.Map val$nestedMap;
  final com.jgraph.layout.JGraphExampleLayoutCache this$0;
  com.jgraph.layout.JGraphExampleLayoutCache$2(com.jgraph.layout.JGraphExampleLayoutCache, com.jgraph.layout.JGraphLayoutProgress, java.beans.PropertyChangeListener, com.jgraph.layout.JGraphFacade, javax.swing.ProgressMonitor, java.util.Map);
  public void run();
}
Compiled from "JGraphExampleLayoutCache.java"
class com.jgraph.layout.JGraphExampleLayoutCache$2$1 implements java.lang.Runnable {
  final com.jgraph.layout.JGraphExampleLayoutCache$2 this$1;
  com.jgraph.layout.JGraphExampleLayoutCache$2$1(com.jgraph.layout.JGraphExampleLayoutCache$2);
  public void run();
}
Compiled from "JGraphExampleLayoutCache.java"
class com.jgraph.layout.JGraphExampleLayoutCache$3 implements java.awt.event.ActionListener {
  final com.jgraph.layout.JGraphExampleLayoutCache this$0;
  com.jgraph.layout.JGraphExampleLayoutCache$3(com.jgraph.layout.JGraphExampleLayoutCache);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphExampleLayoutCache.java"
class com.jgraph.layout.JGraphExampleLayoutCache$4 implements java.awt.event.ActionListener {
  final com.jgraph.layout.JGraphExampleLayoutCache this$0;
  com.jgraph.layout.JGraphExampleLayoutCache$4(com.jgraph.layout.JGraphExampleLayoutCache);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphExampleLayoutCache.java"
public class com.jgraph.layout.JGraphExampleLayoutCache$JGraphMoveSelectionFacade extends com.jgraph.layout.JGraphFacade {
  final com.jgraph.layout.JGraphExampleLayoutCache this$0;
  public com.jgraph.layout.JGraphExampleLayoutCache$JGraphMoveSelectionFacade(com.jgraph.layout.JGraphExampleLayoutCache, org.jgraph.JGraph, java.lang.Object[]);
  public boolean isMoveable(java.lang.Object);
}
Compiled from "JGraphFacade.java"
public class com.jgraph.layout.JGraphFacade {
  protected boolean ignoresHiddenCells;
  protected boolean ignoresUnconnectedCells;
  protected boolean ignoresCellsInGroups;
  protected boolean directed;
  protected boolean edgePromotion;
  protected boolean ordered;
  protected transient org.jgraph.JGraph graph;
  protected transient org.jgraph.graph.GraphLayoutCache graphLayoutCache;
  protected transient org.jgraph.graph.GraphModel model;
  protected transient java.util.Hashtable attributes;
  protected transient java.util.Comparator order;
  protected transient com.jgraph.algebra.cost.JGraphCostFunction distanceCostFunction;
  protected transient com.jgraph.algebra.JGraphAlgebra algebra;
  protected transient java.util.List roots;
  protected transient java.util.Set verticesFilter;
  protected transient java.util.List groupHierarchies;
  protected double circleRadiusFactor;
  public com.jgraph.layout.JGraphFacade(org.jgraph.JGraph);
  public com.jgraph.layout.JGraphFacade(org.jgraph.JGraph, java.lang.Object[]);
  public com.jgraph.layout.JGraphFacade(org.jgraph.JGraph, java.lang.Object[], boolean, boolean, boolean, boolean);
  public com.jgraph.layout.JGraphFacade(org.jgraph.JGraph, java.lang.Object[], boolean, boolean, boolean, boolean, com.jgraph.algebra.cost.JGraphCostFunction, com.jgraph.algebra.JGraphAlgebra);
  public com.jgraph.layout.JGraphFacade(org.jgraph.graph.GraphLayoutCache);
  public com.jgraph.layout.JGraphFacade(org.jgraph.graph.GraphLayoutCache, java.lang.Object[], boolean, boolean, boolean, boolean, com.jgraph.algebra.cost.JGraphCostFunction, com.jgraph.algebra.JGraphAlgebra);
  public com.jgraph.layout.JGraphFacade(org.jgraph.graph.GraphModel, java.lang.Object[], boolean, boolean, boolean, boolean, com.jgraph.algebra.cost.JGraphCostFunction, com.jgraph.algebra.JGraphAlgebra);
  public com.jgraph.layout.JGraphFacade(org.jgraph.graph.GraphModel, org.jgraph.graph.GraphLayoutCache, java.lang.Object[], boolean, boolean, boolean, boolean, com.jgraph.algebra.cost.JGraphCostFunction, com.jgraph.algebra.JGraphAlgebra);
  public void run(com.jgraph.layout.JGraphLayout, boolean);
  public void resetControlPoints();
  public void resetControlPoints(boolean, org.jgraph.graph.Edge$Routing);
  public boolean isVertex(java.lang.Object);
  public boolean isEdge(java.lang.Object);
  public java.util.List getNeighbours(java.lang.Object, boolean);
  public java.util.List getNeighbours(java.lang.Object, java.util.Set, boolean);
  public double getLength(java.lang.Object);
  public double getDistance(java.lang.Object, java.lang.Object, int);
  public java.lang.Object[] getPath(java.lang.Object, java.lang.Object, int, com.jgraph.algebra.cost.JGraphCostFunction);
  public com.jgraph.algebra.JGraphUnionFind getConnectionComponents(java.lang.Object[], java.lang.Object[]);
  public java.lang.Object[] getMinimumSpanningTree(java.lang.Object[], com.jgraph.algebra.cost.JGraphCostFunction);
  public java.util.Collection getVertices();
  public java.util.Collection getUnconnectedVertices(boolean);
  public java.util.Collection getEdges();
  public java.lang.Object[] getEdges(java.lang.Object);
  public java.lang.Object[] getEdges(java.lang.Object, boolean);
  public java.lang.Object getSource(java.lang.Object);
  public java.lang.Object getTarget(java.lang.Object);
  public java.lang.Object getSourcePort(java.lang.Object);
  public java.lang.Object getTargetPort(java.lang.Object);
  protected java.util.List getAll();
  protected java.util.Collection getCells(java.util.Collection, boolean, boolean);
  public java.lang.Object getCellView(java.lang.Object);
  public java.util.Collection getVertices(java.util.Collection, boolean);
  public java.util.List getOutgoingEdges(java.lang.Object, java.util.Set, boolean, boolean);
  public java.util.List getIncomingEdges(java.lang.Object, java.util.Set, boolean, boolean);
  public java.util.Map createNestedMap(java.util.Map);
  public java.util.Map createNestedMap(boolean, boolean);
  public java.util.Map createNestedMap(boolean, java.awt.geom.Point2D);
  public java.util.List getComponents();
  public double norm(java.awt.geom.Point2D);
  public java.util.Hashtable getAttributes();
  public void setAttributes(java.util.Hashtable);
  public java.util.Map getAttributes(java.lang.Object);
  public boolean isMoveable(java.lang.Object);
  public void setAttributes(java.lang.Object, java.util.Map);
  public java.awt.geom.Rectangle2D getBounds(java.util.List);
  public java.awt.geom.Rectangle2D getGraphBounds();
  public java.awt.geom.Point2D getGraphOrigin();
  public java.awt.geom.Rectangle2D getCellBounds();
  public void translateCells(java.util.Collection, double, double);
  public void scale(java.awt.geom.Rectangle2D);
  public void scale(java.util.Collection, double, double, double, double);
  public void randomize(java.util.Collection, int, int);
  public void tilt(java.util.Collection, int, int);
  public void circle(java.util.Collection);
  public java.awt.geom.Rectangle2D getBounds(java.lang.Object);
  public void setBounds(java.util.Map);
  public void setBounds(java.lang.Object, java.awt.geom.Rectangle2D);
  public double[][] getLocations(java.lang.Object[]);
  public double[][] getBounds(java.lang.Object[]);
  public java.awt.geom.Point2D getLocation(java.lang.Object);
  public void setLocations(java.lang.Object[], double[][]);
  public void setBounds(java.lang.Object[], double[][]);
  public void setLocation(java.lang.Object, double, double);
  public void setLocation(java.lang.Object, double, double, boolean);
  public void translate(java.lang.Object, double, double);
  public java.awt.Dimension getMaxSize(java.util.Collection);
  public void setSize(java.lang.Object, double, double);
  public java.awt.geom.Dimension2D getSize(java.lang.Object);
  public java.util.List getPoints(java.lang.Object);
  public void setPoints(java.lang.Object, java.util.List);
  public void setIntermediatePoints(java.lang.Object, java.util.List<com.mxgraph.util.mxPoint>);
  public void disableRouting(java.lang.Object);
  public java.lang.Object[] getEdgesBetween(java.lang.Object, java.lang.Object, boolean);
  protected void determineLayoutHierarchies();
  protected void populateGroupHierarchies(java.lang.Object);
  public void syncMxBridge(org.jgraph.graph.mxGraphBridge);
  public int getRootCount();
  public java.lang.Object getRootAt(int);
  public boolean isRoot(java.lang.Object);
  public java.util.List getRoots();
  public void setRoots(java.util.List);
  public boolean isDirected();
  public void setDirected(boolean);
  public java.util.Comparator getOrder();
  public void setOrder(java.util.Comparator);
  public boolean IsIgnoresCellsInGroups();
  public void setIgnoresCellsInGroups(boolean);
  public boolean isIgnoresHiddenCells();
  public void setIgnoresHiddenCells(boolean);
  public boolean isIgnoresUnconnectedCells();
  public void setIgnoresUnconnectedCells(boolean);
  public boolean isEdgePromotion();
  public void setEdgePromotion(boolean);
  public java.util.Set getVerticesFilter();
  public void setVerticesFilter(java.util.Set);
  public java.util.List getGroupHierarchies();
  public void setGroupHierarchies(java.util.List);
  public double getCircleRadiusFactor();
  public void setCircleRadiusFactor(double);
  public void dfs(java.lang.Object, com.jgraph.layout.JGraphFacade$CellVisitor);
  public void dfs(java.lang.Object, java.lang.Object, java.lang.Object, com.jgraph.layout.JGraphFacade$CellVisitor, java.util.Set, int, int);
  public void dfs(java.lang.Object, java.lang.Object, java.lang.Object, com.jgraph.layout.JGraphFacade$CellVisitor, java.util.Set, java.util.Set, int, int);
  public void bfs(java.lang.Object, com.jgraph.layout.JGraphFacade$CellVisitor);
  public void findTreeRoots();
  public boolean isOrdered();
  public void setOrdered(boolean);
  public void setLoggerLevel(java.util.logging.Level);
  static {};
}
Compiled from "JGraphFacade.java"
public interface com.jgraph.layout.JGraphFacade$CellVisitor {
  public abstract void visit(java.lang.Object, java.lang.Object, java.lang.Object, int, int);
}
Compiled from "JGraphFacade.java"
public class com.jgraph.layout.JGraphFacade$DefaultComparator implements java.util.Comparator {
  final com.jgraph.layout.JGraphFacade this$0;
  public com.jgraph.layout.JGraphFacade$DefaultComparator(com.jgraph.layout.JGraphFacade);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "JGraphHeadlessLayoutExample.java"
public class com.jgraph.layout.JGraphHeadlessLayoutExample {
  public com.jgraph.layout.JGraphHeadlessLayoutExample();
  public static void main(java.lang.String[]);
  public static org.jgraph.graph.DefaultGraphCell createVertex(java.lang.String, double, double, double, double);
}
Compiled from "JGraphLayout.java"
public interface com.jgraph.layout.JGraphLayout {
  public static final java.lang.String VERSION;
  public abstract void run(com.jgraph.layout.JGraphFacade);
}
Compiled from "JGraphLayout.java"
public interface com.jgraph.layout.JGraphLayout$Stoppable {
  public abstract com.jgraph.layout.JGraphLayoutProgress getProgress();
}
Compiled from "JGraphLayoutExample.java"
public class com.jgraph.layout.JGraphLayoutExample extends com.jgraph.example.GraphEdX {
  protected com.jgraph.layout.JGraphExampleLayoutCache layoutCache;
  protected javax.swing.Action[] layoutActions;
  protected javax.swing.JToggleButton autoLayoutButton;
  protected boolean isInsideLayout;
  protected int edgeCount;
  public com.jgraph.layout.JGraphLayoutExample();
  public void init();
  protected org.jgraph.JGraph createGraph();
  public java.util.Map createEdgeAttributes();
  protected org.jgraph.graph.DefaultEdge createDefaultEdge();
  public void createLayoutActions();
  public javax.swing.Action createLayoutAction(java.lang.String, java.lang.String, com.jgraph.layout.JGraphLayout);
  public void valueChanged(org.jgraph.event.GraphSelectionEvent);
  protected void configureEncoder(java.beans.XMLEncoder);
  public javax.swing.JToolBar createToolBar();
  public void openFile();
  protected java.lang.String getVersion();
  public static void main(java.lang.String[]);
}
Compiled from "JGraphLayoutExample.java"
class com.jgraph.layout.JGraphLayoutExample$1 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayout val$layout;
  final com.jgraph.layout.JGraphLayoutExample this$0;
  com.jgraph.layout.JGraphLayoutExample$1(com.jgraph.layout.JGraphLayoutExample, java.lang.String, com.jgraph.layout.JGraphLayout);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExample.java"
class com.jgraph.layout.JGraphLayoutExample$2 extends java.beans.PersistenceDelegate {
  final com.jgraph.layout.JGraphLayoutExample this$0;
  com.jgraph.layout.JGraphLayoutExample$2(com.jgraph.layout.JGraphLayoutExample);
  protected java.beans.Expression instantiate(java.lang.Object, java.beans.Encoder);
}
Compiled from "JGraphLayoutExample.java"
class com.jgraph.layout.JGraphLayoutExample$3 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayoutExample this$0;
  com.jgraph.layout.JGraphLayoutExample$3(com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExample.java"
class com.jgraph.layout.JGraphLayoutExample$4 implements java.awt.event.ActionListener {
  final com.jgraph.layout.JGraphLayoutExample this$0;
  com.jgraph.layout.JGraphLayoutExample$4(com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExampleMenuBar.java"
public class com.jgraph.layout.JGraphLayoutExampleMenuBar extends com.jgraph.example.GraphEdXMenuBar {
  protected com.jgraph.example.JGraphGraphFactory graphFactory;
  public com.jgraph.layout.JGraphLayoutExampleMenuBar(com.jgraph.layout.JGraphLayoutExample, com.jgraph.example.JGraphGraphFactory);
}
Compiled from "JGraphLayoutExampleMenuBar.java"
class com.jgraph.layout.JGraphLayoutExampleMenuBar$1 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayoutExample val$app;
  final com.jgraph.layout.JGraphLayoutExampleMenuBar this$0;
  com.jgraph.layout.JGraphLayoutExampleMenuBar$1(com.jgraph.layout.JGraphLayoutExampleMenuBar, java.lang.String, com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExampleMenuBar.java"
class com.jgraph.layout.JGraphLayoutExampleMenuBar$2 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayoutExample val$app;
  final com.jgraph.layout.JGraphLayoutExampleMenuBar this$0;
  com.jgraph.layout.JGraphLayoutExampleMenuBar$2(com.jgraph.layout.JGraphLayoutExampleMenuBar, java.lang.String, com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExampleMenuBar.java"
class com.jgraph.layout.JGraphLayoutExampleMenuBar$3 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayoutExample val$app;
  final com.jgraph.layout.JGraphLayoutExampleMenuBar this$0;
  com.jgraph.layout.JGraphLayoutExampleMenuBar$3(com.jgraph.layout.JGraphLayoutExampleMenuBar, java.lang.String, com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExampleMenuBar.java"
class com.jgraph.layout.JGraphLayoutExampleMenuBar$4 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayoutExample val$app;
  final com.jgraph.layout.JGraphLayoutExampleMenuBar this$0;
  com.jgraph.layout.JGraphLayoutExampleMenuBar$4(com.jgraph.layout.JGraphLayoutExampleMenuBar, java.lang.String, com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExampleMenuBar.java"
class com.jgraph.layout.JGraphLayoutExampleMenuBar$5 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayoutExample val$app;
  final com.jgraph.layout.JGraphLayoutExampleMenuBar this$0;
  com.jgraph.layout.JGraphLayoutExampleMenuBar$5(com.jgraph.layout.JGraphLayoutExampleMenuBar, java.lang.String, com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExampleMenuBar.java"
class com.jgraph.layout.JGraphLayoutExampleMenuBar$6 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayoutExample val$app;
  final com.jgraph.layout.JGraphLayoutExampleMenuBar this$0;
  com.jgraph.layout.JGraphLayoutExampleMenuBar$6(com.jgraph.layout.JGraphLayoutExampleMenuBar, java.lang.String, com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExampleMenuBar.java"
class com.jgraph.layout.JGraphLayoutExampleMenuBar$7 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayoutExample val$app;
  final com.jgraph.layout.JGraphLayoutExampleMenuBar this$0;
  com.jgraph.layout.JGraphLayoutExampleMenuBar$7(com.jgraph.layout.JGraphLayoutExampleMenuBar, java.lang.String, com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutExampleMenuBar.java"
class com.jgraph.layout.JGraphLayoutExampleMenuBar$8 extends javax.swing.AbstractAction {
  final com.jgraph.layout.JGraphLayoutExample val$app;
  final com.jgraph.layout.JGraphLayoutExampleMenuBar this$0;
  com.jgraph.layout.JGraphLayoutExampleMenuBar$8(com.jgraph.layout.JGraphLayoutExampleMenuBar, java.lang.String, com.jgraph.layout.JGraphLayoutExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutProgress.java"
public class com.jgraph.layout.JGraphLayoutProgress {
  public static final java.lang.String MAXIMUM_PROPERTY;
  public static final java.lang.String PROGRESS_PROPERTY;
  public static final java.lang.String ISSTOPPED_PROPERTY;
  protected java.beans.PropertyChangeSupport changeSupport;
  protected int maximum;
  protected int progress;
  protected boolean isStopped;
  public com.jgraph.layout.JGraphLayoutProgress();
  public com.jgraph.layout.JGraphLayoutProgress(int);
  public void reset(int);
  public java.beans.PropertyChangeSupport getChangeSupport();
  public void setChangeSupport(java.beans.PropertyChangeSupport);
  public boolean isStopped();
  public void setStopped(boolean);
  public int getMaximum();
  public void setMaximum(int);
  public int getProgress();
  public void setProgress(int);
  public void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public void removePropertyChangeListener(java.beans.PropertyChangeListener);
}
Compiled from "JGraphModelFacade.java"
public class com.jgraph.layout.JGraphModelFacade extends com.jgraph.layout.JGraphFacade {
  public com.jgraph.layout.JGraphModelFacade(org.jgraph.graph.GraphModel);
  public com.jgraph.layout.JGraphModelFacade(org.jgraph.graph.GraphModel, java.lang.Object[]);
  public com.jgraph.layout.JGraphModelFacade(org.jgraph.graph.GraphModel, java.lang.Object[], boolean, boolean, boolean, boolean);
  public com.jgraph.layout.JGraphModelFacade(org.jgraph.graph.GraphModel, java.lang.Object[], boolean, boolean, boolean, boolean, com.jgraph.algebra.cost.JGraphCostFunction, com.jgraph.algebra.JGraphAlgebra);
  public java.util.List getNeighbours(java.lang.Object, boolean);
  public java.util.List getNeighbours(java.lang.Object, java.util.Set, boolean);
  public java.util.List getOutgoingEdges(java.lang.Object, java.util.Set, boolean, boolean);
  public java.util.List getIncomingEdges(java.lang.Object, java.util.Set, boolean, boolean);
  public java.awt.geom.Rectangle2D getGraphBounds();
}
Compiled from "JGraphModelLayoutExample.java"
public class com.jgraph.layout.JGraphModelLayoutExample {
  public static org.jgraph.graph.GraphModel persistModel;
  public com.jgraph.layout.JGraphModelLayoutExample();
  public static void main(java.lang.String[]);
}
Compiled from "JGraphWordBrowser.java"
public class com.jgraph.layout.JGraphWordBrowser extends org.jgraph.graph.DefaultGraphModel {
  protected java.util.Map mapping;
  public com.jgraph.layout.JGraphWordBrowser();
  public java.lang.Object addVertex(java.lang.Object);
  public java.lang.Object addVertex(java.lang.Object, java.lang.String);
  public java.lang.Object addEdge(java.lang.Object, java.lang.Object);
  public java.lang.Object addEdge(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object addEdge(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.String);
  public java.lang.Object addEdge(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.String, java.lang.String);
  protected java.lang.Object createCell(java.lang.Object, java.lang.String, boolean);
  public java.lang.Object createVertex(java.lang.Object);
  public java.lang.Object createEdge(java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.Object getDefaultPort(java.lang.Object);
  public void add(java.lang.String, java.lang.String);
  public java.util.List getWords(java.lang.String);
  public java.util.List getContent(java.lang.String) throws java.io.IOException;
  public static void layout(org.jgraph.JGraph, boolean, boolean);
  public void sendEdgesToBack();
  protected static com.jgraph.layout.JGraphFacade createFacade(org.jgraph.JGraph);
  public static void main(java.lang.String[]);
}
Compiled from "JGraphWordBrowser.java"
final class com.jgraph.layout.JGraphWordBrowser$1 extends org.jgraph.JGraph {
  com.jgraph.layout.JGraphWordBrowser$1(org.jgraph.graph.GraphModel);
  public void updateUI();
}
Compiled from "JGraphWordBrowser.java"
class com.jgraph.layout.JGraphWordBrowser$1$1 extends org.jgraph.plaf.basic.BasicGraphUI {
  final com.jgraph.layout.JGraphWordBrowser$1 this$0;
  com.jgraph.layout.JGraphWordBrowser$1$1(com.jgraph.layout.JGraphWordBrowser$1);
  protected boolean startEditing(java.lang.Object, java.awt.event.MouseEvent);
}
Compiled from "JGraphWordBrowser.java"
final class com.jgraph.layout.JGraphWordBrowser$2 extends java.awt.event.KeyAdapter {
  final org.jgraph.JGraph val$graph;
  final javax.swing.JTextField val$text;
  com.jgraph.layout.JGraphWordBrowser$2(org.jgraph.JGraph, javax.swing.JTextField);
  public void keyPressed(java.awt.event.KeyEvent);
}
Compiled from "JGraphWordBrowser.java"
public class com.jgraph.layout.JGraphWordBrowser$SynonymRenderer extends org.jgraph.graph.VertexRenderer {
  public com.jgraph.layout.JGraphWordBrowser$SynonymRenderer();
  public void installAttributes(org.jgraph.graph.CellView);
}
Compiled from "JGraphLayoutDemo.java"
public class com.jgraph.layout.demo.JGraphLayoutDemo extends javax.swing.JApplet {
  public com.jgraph.layout.demo.JGraphLayoutDemo();
  public void start();
  public static void main(java.lang.String[]);
}
Compiled from "JGraphLayoutMorphingManager.java"
public class com.jgraph.layout.demo.JGraphLayoutMorphingManager implements java.awt.event.ActionListener {
  protected int delay;
  protected int steps;
  protected org.jgraph.JGraph graph;
  protected transient int step;
  protected transient java.util.Map oldBounds;
  protected transient java.util.Map newBounds;
  protected transient org.jgraph.graph.CellView[] context;
  protected transient java.awt.Shape clip;
  protected transient java.util.Map nestedMap;
  public com.jgraph.layout.demo.JGraphLayoutMorphingManager();
  public synchronized void morph(org.jgraph.JGraph, java.util.Map);
  protected boolean isAnimatable(java.lang.Object);
  protected void initialize();
  public void actionPerformed(java.awt.event.ActionEvent);
  protected void execute();
  protected void updateCell(java.lang.Object);
  protected void setCellBounds(java.lang.Object, java.awt.geom.Rectangle2D);
  public static void fitViewport(org.jgraph.JGraph);
}
Compiled from "JGraphLayoutPanel.java"
public class com.jgraph.layout.demo.JGraphLayoutPanel extends javax.swing.JPanel {
  protected static com.jgraph.example.JGraphGraphFactory graphFactory;
  protected org.jgraph.JGraph graph;
  protected com.l2fprod.common.swing.JTaskPane taskPane;
  protected javax.swing.JCheckBox flushOriginCheckBox;
  protected javax.swing.JCheckBox directedCheckBox;
  protected com.jgraph.layout.demo.JGraphLayoutMorphingManager morpher;
  public com.jgraph.layout.demo.JGraphLayoutPanel();
  public void init();
  public void reset();
  public void execute(com.jgraph.layout.JGraphLayout);
  protected com.jgraph.layout.JGraphFacade createFacade(org.jgraph.JGraph);
  protected javax.swing.ProgressMonitor createProgressMonitor(org.jgraph.JGraph, com.jgraph.layout.JGraphLayout$Stoppable);
  public java.util.Map createCellAttributes(java.awt.geom.Point2D);
  public java.util.Map createEdgeAttributes();
  static {};
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$1 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$1(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$10 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$10(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$11 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$11(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$12 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$12(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$13 extends java.lang.Thread {
  final com.jgraph.layout.JGraphLayout val$layout;
  final com.jgraph.layout.JGraphFacade val$facade;
  final javax.swing.ProgressMonitor val$progressMonitor;
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$13(com.jgraph.layout.demo.JGraphLayoutPanel, com.jgraph.layout.JGraphLayout, com.jgraph.layout.JGraphFacade, javax.swing.ProgressMonitor);
  public void run();
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$13$1 implements java.lang.Runnable {
  final com.jgraph.layout.demo.JGraphLayoutPanel$13 this$1;
  com.jgraph.layout.demo.JGraphLayoutPanel$13$1(com.jgraph.layout.demo.JGraphLayoutPanel$13);
  public void run();
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$2 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$2(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$3 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$3(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$4 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$4(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$5 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$5(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$6 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$6(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$7 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$7(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$8 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$8(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutPanel.java"
class com.jgraph.layout.demo.JGraphLayoutPanel$9 extends javax.swing.AbstractAction {
  final com.jgraph.layout.demo.JGraphLayoutPanel this$0;
  com.jgraph.layout.demo.JGraphLayoutPanel$9(com.jgraph.layout.demo.JGraphLayoutPanel, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphLayoutProgressMonitor.java"
public class com.jgraph.layout.demo.JGraphLayoutProgressMonitor extends javax.swing.ProgressMonitor implements java.beans.PropertyChangeListener {
  protected com.jgraph.layout.JGraphLayoutProgress progress;
  public com.jgraph.layout.demo.JGraphLayoutProgressMonitor(java.awt.Component, com.jgraph.layout.JGraphLayoutProgress, java.lang.String);
  public void propertyChange(java.beans.PropertyChangeEvent);
  public void close();
}
Compiled from "JGraphAnnealingLayout.java"
public class com.jgraph.layout.graph.JGraphAnnealingLayout extends com.jgraph.layout.organic.JGraphOrganicLayout {
  public com.jgraph.layout.graph.JGraphAnnealingLayout();
  public com.jgraph.layout.graph.JGraphAnnealingLayout(java.awt.geom.Rectangle2D);
  public java.lang.String toString();
}
Compiled from "JGraphFRLayout.java"
public class com.jgraph.layout.graph.JGraphFRLayout extends com.jgraph.layout.organic.JGraphFastOrganicLayout {
  public com.jgraph.layout.graph.JGraphFRLayout();
  public java.lang.String toString();
}
Compiled from "JGraphISOMLayout.java"
public class com.jgraph.layout.graph.JGraphISOMLayout extends com.jgraph.layout.organic.JGraphSelfOrganizingOrganicLayout {
  public com.jgraph.layout.graph.JGraphISOMLayout();
  public java.lang.String toString();
}
Compiled from "JGraphSimpleLayout.java"
public class com.jgraph.layout.graph.JGraphSimpleLayout implements com.jgraph.layout.JGraphLayout {
  public static final int TYPE_CIRCLE;
  public static final int TYPE_TILT;
  public static final int TYPE_RANDOM;
  protected int type;
  protected int maxx;
  protected int maxy;
  public com.jgraph.layout.graph.JGraphSimpleLayout(int);
  public com.jgraph.layout.graph.JGraphSimpleLayout(int, int, int);
  public void run(com.jgraph.layout.JGraphFacade);
  public int getMaxx();
  public void setMaxx(int);
  public int getMaxy();
  public void setMaxy(int);
  public java.lang.String toString();
}
Compiled from "JGraphSpringLayout.java"
public class com.jgraph.layout.graph.JGraphSpringLayout implements com.jgraph.layout.JGraphLayout,com.jgraph.layout.JGraphLayout$Stoppable {
  protected transient java.util.Map displacement;
  protected double replusiveForce;
  protected double springForce;
  protected double springLength;
  protected int iteration;
  protected int maxIterations;
  protected java.lang.Object[] vertexArray;
  protected double[] dispX;
  protected double[] dispY;
  protected double[] cellLocationX;
  protected double[] cellLocationY;
  protected boolean[] isMoveable;
  protected int[][] neighbours;
  protected com.jgraph.layout.JGraphLayoutProgress progress;
  public com.jgraph.layout.graph.JGraphSpringLayout();
  public com.jgraph.layout.graph.JGraphSpringLayout(int);
  public com.jgraph.layout.JGraphLayoutProgress getProgress();
  public void run(com.jgraph.layout.JGraphFacade);
  protected void repulse();
  protected void attract();
  protected void reposition(com.jgraph.layout.JGraphFacade);
  public void setMaxIterations(int);
  public int getMaxIterations();
  public double getSpringLength();
  public void setSpringLength(double);
  public double getSpringForce();
  public void setSpringForce(double);
  public double getReplusiveForce();
  public void setReplusiveForce(double);
  public java.lang.String toString();
}
Compiled from "JGraphHierarchicalLayout.java"
public class com.jgraph.layout.hierarchical.JGraphHierarchicalLayout implements com.jgraph.layout.JGraphLayout,com.jgraph.layout.JGraphLayout$Stoppable {
  protected double intraCellSpacing;
  protected double interRankCellSpacing;
  protected double interHierarchySpacing;
  protected double parallelEdgeSpacing;
  protected int orientation;
  protected boolean fineTuning;
  protected boolean compactLayout;
  protected boolean deterministic;
  protected boolean fixRoots;
  protected boolean layoutFromSinks;
  protected com.jgraph.layout.JGraphLayoutProgress progress;
  public com.jgraph.layout.hierarchical.JGraphHierarchicalLayout();
  public com.jgraph.layout.hierarchical.JGraphHierarchicalLayout(boolean);
  public void run(com.jgraph.layout.JGraphFacade);
  public java.lang.String toString();
  public com.jgraph.layout.JGraphLayoutProgress getProgress();
  public double getIntraCellSpacing();
  public void setIntraCellSpacing(double);
  public double getInterRankCellSpacing();
  public void setInterRankCellSpacing(double);
  public int getOrientation();
  public void setOrientation(int);
  public double getInterHierarchySpacing();
  public void setInterHierarchySpacing(double);
  public double getParallelEdgeSpacing();
  public void setParallelEdgeSpacing(double);
  public boolean isFineTuning();
  public void setFineTuning(boolean);
  public boolean isDeterministic();
  public void setDeterministic(boolean);
  public boolean isCompactLayout();
  public void setCompactLayout(boolean);
  public boolean isFixRoots();
  public void setFixRoots(boolean);
  public boolean isLayoutFromSinks();
  public void setLayoutFromSinks(boolean);
  public void setLoggerLevel(java.util.logging.Level);
  static {};
}
Compiled from "JGraphFastOrganicLayout.java"
public class com.jgraph.layout.organic.JGraphFastOrganicLayout implements com.jgraph.layout.JGraphLayout,com.jgraph.layout.JGraphLayout$Stoppable {
  protected double forceConstant;
  protected double forceConstantSquared;
  protected double temperature;
  protected double initialTemp;
  protected int iteration;
  protected int maxIterations;
  protected java.lang.Object[] vertexArray;
  protected double[] dispX;
  protected double[] dispY;
  protected double[][] cellLocation;
  protected double[] radius;
  protected double[] radiusSquared;
  protected boolean[] isMoveable;
  protected int[][] neighbours;
  protected com.jgraph.layout.JGraphLayoutProgress progress;
  protected double minDistanceLimit;
  protected double minDistanceLimitSquared;
  public com.jgraph.layout.organic.JGraphFastOrganicLayout();
  public com.jgraph.layout.JGraphLayoutProgress getProgress();
  public void run(com.jgraph.layout.JGraphFacade);
  public void calcPositions();
  public void calcAttraction();
  public void calcRepulsion();
  public double getForceConstant();
  public void setForceConstant(double);
  public int getMaxIterations();
  public void setMaxIterations(int);
  public double getInitialTemp();
  public void setInitialTemp(double);
  public java.lang.String toString();
}
Compiled from "JGraphOrganicLayout.java"
public class com.jgraph.layout.organic.JGraphOrganicLayout implements com.jgraph.layout.JGraphLayout,com.jgraph.layout.JGraphLayout$Stoppable {
  protected boolean isOptimizeEdgeDistance;
  protected boolean isOptimizeEdgeCrossing;
  protected boolean isOptimizeEdgeLength;
  protected boolean isOptimizeBorderLine;
  protected boolean isOptimizeNodeDistribution;
  protected double minMoveRadius;
  protected double moveRadius;
  protected double initialMoveRadius;
  protected double radiusScaleFactor;
  protected double averageNodeArea;
  protected double fineTuningRadius;
  protected int maxIterations;
  protected double edgeDistanceCostFactor;
  protected double edgeCrossingCostFactor;
  protected double nodeDistributionCostFactor;
  protected double borderLineCostFactor;
  protected double edgeLengthCostFactor;
  protected double boundsX;
  protected double boundsY;
  protected double boundsWidth;
  protected double boundsHeight;
  protected int iteration;
  protected int triesPerCell;
  protected double minDistanceLimit;
  protected double minDistanceLimitSquared;
  protected double maxDistanceLimit;
  protected double maxDistanceLimitSquared;
  protected int unchangedEnergyRoundCount;
  protected int unchangedEnergyRoundTermination;
  protected boolean isDeterministic;
  protected boolean approxNodeDimensions;
  protected com.jgraph.layout.organic.JGraphOrganicLayout$CellWrapper[] v;
  protected com.jgraph.layout.organic.JGraphOrganicLayout$CellWrapper[] e;
  protected boolean isFineTuning;
  protected com.jgraph.layout.JGraphFacade facade;
  protected com.jgraph.layout.JGraphLayoutProgress progress;
  public com.jgraph.layout.organic.JGraphOrganicLayout();
  public com.jgraph.layout.organic.JGraphOrganicLayout(java.awt.geom.Rectangle2D);
  public com.jgraph.layout.JGraphLayoutProgress getProgress();
  public void run(com.jgraph.layout.JGraphFacade);
  protected void performRound();
  protected double calcEnergyDelta(int, double, double, double, double, double, double);
  protected int[] createPermutation(int);
  protected double getNodeDistribution(int);
  protected double getBorderline(int);
  protected double getEdgeLengthAffectedEdges(int);
  protected double getEdgeLength(int);
  protected double getEdgeCrossingAffectedEdges(int);
  protected double getEdgeCrossing(int);
  protected double getEdgeDistanceFromNode(int);
  protected double getEdgeDistanceAffectedNodes(int);
  protected double getEdgeDistanceFromEdge(int);
  protected double getAdditionFactorsEnergy(int);
  protected int[] getRelevantEdges(int);
  protected int[] getConnectedEdges(int);
  public java.lang.String toString();
  public double getAverageNodeArea();
  public void setAverageNodeArea(double);
  public double getBorderLineCostFactor();
  public void setBorderLineCostFactor(double);
  public double getEdgeCrossingCostFactor();
  public void setEdgeCrossingCostFactor(double);
  public double getEdgeDistanceCostFactor();
  public void setEdgeDistanceCostFactor(double);
  public double getEdgeLengthCostFactor();
  public void setEdgeLengthCostFactor(double);
  public double getFineTuningRadius();
  public void setFineTuningRadius(double);
  public double getInitialMoveRadius();
  public void setInitialMoveRadius(double);
  public boolean isFineTuning();
  public void setFineTuning(boolean);
  public boolean isOptimizeBorderLine();
  public void setOptimizeBorderLine(boolean);
  public boolean isOptimizeEdgeCrossing();
  public void setOptimizeEdgeCrossing(boolean);
  public boolean isOptimizeEdgeDistance();
  public void setOptimizeEdgeDistance(boolean);
  public boolean isOptimizeEdgeLength();
  public void setOptimizeEdgeLength(boolean);
  public boolean isOptimizeNodeDistribution();
  public void setOptimizeNodeDistribution(boolean);
  public int getMaxIterations();
  public void setMaxIterations(int);
  public double getMinDistanceLimit();
  public void setMinDistanceLimit(double);
  public double getMinMoveRadius();
  public void setMinMoveRadius(double);
  public double getNodeDistributionCostFactor();
  public void setNodeDistributionCostFactor(double);
  public double getRadiusScaleFactor();
  public void setRadiusScaleFactor(double);
  public int getTriesPerCell();
  public void setTriesPerCell(int);
  public int getUnchangedEnergyRoundTermination();
  public void setUnchangedEnergyRoundTermination(int);
  public double getMaxDistanceLimit();
  public void setMaxDistanceLimit(double);
  public boolean isDeterministic();
  public void setDeterministic(boolean);
  public void setLoggerLevel(java.util.logging.Level);
  public boolean isApproxNodeDimensions();
  public void setApproxNodeDimensions(boolean);
  static {};
}
Compiled from "JGraphOrganicLayout.java"
public class com.jgraph.layout.organic.JGraphOrganicLayout$CellWrapper {
  protected java.lang.Object cell;
  protected int[] relevantEdges;
  protected int[] connectedEdges;
  protected double x;
  protected double y;
  protected double radiusSquared;
  protected double heightSquared;
  protected int source;
  protected int target;
  final com.jgraph.layout.organic.JGraphOrganicLayout this$0;
  public com.jgraph.layout.organic.JGraphOrganicLayout$CellWrapper(com.jgraph.layout.organic.JGraphOrganicLayout, java.lang.Object);
  public int[] getRelevantEdges();
  public void setRelevantEdges(int[]);
  public int[] getConnectedEdges();
  public void setConnectedEdges(int[]);
  public double getX();
  public void setX(double);
  public double getY();
  public void setY(double);
  public double getRadiusSquared();
  public void setRadiusSquared(double);
  public double getHeightSquared();
  public void setHeightSquared(double);
  public int getSource();
  public void setSource(int);
  public int getTarget();
  public void setTarget(int);
  public java.lang.Object getCell();
}
Compiled from "JGraphSelfOrganizingOrganicLayout.java"
public class com.jgraph.layout.organic.JGraphSelfOrganizingOrganicLayout implements com.jgraph.layout.JGraphLayout {
  protected java.awt.geom.Rectangle2D bounds;
  protected int totalIterations;
  protected int maxIterationsMultiple;
  protected int iteration;
  protected int radius;
  protected int startRadius;
  protected int minRadius;
  protected double densityFactor;
  protected int narrowingInterval;
  protected double adaption;
  protected double maxAdaption;
  protected double minAdaption;
  protected double coolingFactor;
  protected java.util.Stack stack;
  protected int[][] neighbours;
  protected java.lang.Object[] vertexArray;
  protected boolean[] vertexVisited;
  protected int[] vertexDistance;
  protected double[][] cellLocation;
  protected double randomX;
  protected double randomY;
  public com.jgraph.layout.organic.JGraphSelfOrganizingOrganicLayout();
  public void run(com.jgraph.layout.JGraphFacade);
  protected void updateToRandomNode();
  public double getCoolingFactor();
  public void setCoolingFactor(double);
  public int getMaxIterationsMultiple();
  public void setMaxIterationsMultiple(int);
  public double getMinAdaption();
  public void setMinAdaption(double);
  public int getStartRadius();
  public void setStartRadius(int);
  public double getMaxAdaption();
  public void setMaxAdaption(double);
  public int getMinRadius();
  public void setMinRadius(int);
  public double getDensityFactor();
  public void setDensityFactor(double);
  public java.lang.String toString();
}
Compiled from "JGraphParallelRouter.java"
public class com.jgraph.layout.routing.JGraphParallelRouter extends org.jgraph.util.ParallelEdgeRouter {
  public com.jgraph.layout.routing.JGraphParallelRouter();
}
Compiled from "SimpleGridLayout.java"
public class com.jgraph.layout.simple.SimpleGridLayout implements com.jgraph.layout.JGraphLayout {
  protected int numCellsPerRow;
  protected int heightSpacing;
  protected int widthSpacing;
  protected int offsetX;
  protected int offsetY;
  protected boolean actOnUnconnectedVerticesOnly;
  protected boolean ordered;
  public com.jgraph.layout.simple.SimpleGridLayout();
  public void run(com.jgraph.layout.JGraphFacade);
  public int getNumCellsPerRow();
  public void setNumCellsPerRow(int);
  public boolean isActOnUnconnectedVerticesOnly();
  public void setActOnUnconnectedVerticesOnly(boolean);
  public int getHeightSpacing();
  public void setHeightSpacing(int);
  public int getWidthSpacing();
  public void setWidthSpacing(int);
  public boolean isOrdered();
  public void setOrdered(boolean);
  public int getOffsetX();
  public void setOffsetX(int);
  public int getOffsetY();
  public void setOffsetY(int);
}
Compiled from "SVGExample.java"
public class com.jgraph.layout.svg.SVGExample extends com.jgraph.example.GraphEdX {
  protected java.awt.Color background;
  protected javax.swing.JFileChooser SVGFileChooser;
  public com.jgraph.layout.svg.SVGExample();
  public void setDefaultBackgroundColor(java.awt.Color);
  public java.awt.Color getDefaultBackgroundColour();
  protected void initSVGFileChooser();
  protected void exportSVG();
  public static void main(java.lang.String[]);
}
Compiled from "SVGExample.java"
class com.jgraph.layout.svg.SVGExample$1 extends javax.swing.filechooser.FileFilter {
  final com.jgraph.layout.svg.SVGExample this$0;
  com.jgraph.layout.svg.SVGExample$1(com.jgraph.layout.svg.SVGExample);
  public boolean accept(java.io.File);
  public java.lang.String getDescription();
}
Compiled from "SVGMenuBar.java"
public class com.jgraph.layout.svg.SVGMenuBar extends javax.swing.JMenuBar {
  protected com.jgraph.example.JGraphGraphFactory graphFactory;
  public com.jgraph.layout.svg.SVGMenuBar(com.jgraph.layout.svg.SVGExample, com.jgraph.example.JGraphGraphFactory);
  public javax.swing.JRadioButtonMenuItem createRadioMenuItem(javax.swing.ButtonGroup, javax.swing.Action);
}
Compiled from "SVGMenuBar.java"
class com.jgraph.layout.svg.SVGMenuBar$1 extends javax.swing.AbstractAction {
  final com.jgraph.layout.svg.SVGExample val$app;
  final com.jgraph.layout.svg.SVGMenuBar this$0;
  com.jgraph.layout.svg.SVGMenuBar$1(com.jgraph.layout.svg.SVGMenuBar, java.lang.String, com.jgraph.layout.svg.SVGExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SVGMenuBar.java"
class com.jgraph.layout.svg.SVGMenuBar$2 extends javax.swing.AbstractAction {
  final com.jgraph.layout.svg.SVGExample val$app;
  final com.jgraph.layout.svg.SVGMenuBar this$0;
  com.jgraph.layout.svg.SVGMenuBar$2(com.jgraph.layout.svg.SVGMenuBar, java.lang.String, com.jgraph.layout.svg.SVGExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SVGMenuBar.java"
class com.jgraph.layout.svg.SVGMenuBar$3 extends javax.swing.AbstractAction {
  final com.jgraph.layout.svg.SVGExample val$app;
  final com.jgraph.layout.svg.SVGMenuBar this$0;
  com.jgraph.layout.svg.SVGMenuBar$3(com.jgraph.layout.svg.SVGMenuBar, java.lang.String, com.jgraph.layout.svg.SVGExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SVGMenuBar.java"
class com.jgraph.layout.svg.SVGMenuBar$4 extends javax.swing.AbstractAction {
  final com.jgraph.layout.svg.SVGExample val$app;
  final com.jgraph.layout.svg.SVGMenuBar this$0;
  com.jgraph.layout.svg.SVGMenuBar$4(com.jgraph.layout.svg.SVGMenuBar, java.lang.String, com.jgraph.layout.svg.SVGExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SVGMenuBar.java"
class com.jgraph.layout.svg.SVGMenuBar$5 extends javax.swing.AbstractAction {
  final com.jgraph.layout.svg.SVGExample val$app;
  final com.jgraph.layout.svg.SVGMenuBar this$0;
  com.jgraph.layout.svg.SVGMenuBar$5(com.jgraph.layout.svg.SVGMenuBar, java.lang.String, com.jgraph.layout.svg.SVGExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SVGMenuBar.java"
class com.jgraph.layout.svg.SVGMenuBar$6 extends javax.swing.AbstractAction {
  final com.jgraph.layout.svg.SVGExample val$app;
  final com.jgraph.layout.svg.SVGMenuBar this$0;
  com.jgraph.layout.svg.SVGMenuBar$6(com.jgraph.layout.svg.SVGMenuBar, java.lang.String, com.jgraph.layout.svg.SVGExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "SVGMenuBar.java"
class com.jgraph.layout.svg.SVGMenuBar$7 extends javax.swing.AbstractAction {
  final com.jgraph.layout.svg.SVGExample val$app;
  final com.jgraph.layout.svg.SVGMenuBar this$0;
  com.jgraph.layout.svg.SVGMenuBar$7(com.jgraph.layout.svg.SVGMenuBar, java.lang.String, com.jgraph.layout.svg.SVGExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphAbstractTreeLayout.java"
public abstract class com.jgraph.layout.tree.JGraphAbstractTreeLayout implements com.jgraph.layout.JGraphLayout {
  protected transient java.util.Map nodes;
  protected int orientation;
  protected double levelDistance;
  protected double nodeDistance;
  protected boolean positionMultipleTrees;
  protected double treeDistance;
  protected double treeBoundary;
  protected java.awt.geom.Point2D oldOrigin;
  protected com.jgraph.layout.JGraphFacade graph;
  protected boolean routeTreeEdges;
  protected double[] lowerLevelValues;
  protected double[] upperLevelValues;
  public com.jgraph.layout.tree.JGraphAbstractTreeLayout();
  public void run(com.jgraph.layout.JGraphFacade);
  public void setOrientation(int);
  public void setLevelDistance(double);
  public void setNodeDistance(int);
  public double getLevelDistance();
  public double getNodeDistance();
  public int getOrientation();
  public boolean isPositionMultipleTrees();
  public void setPositionMultipleTrees(boolean);
  public double getTreeDistance();
  public void setTreeDistance(int);
  public boolean getRouteTreeEdges();
  public void setRouteTreeEdges(boolean);
}
Compiled from "JGraphAbstractTreeLayout.java"
public class com.jgraph.layout.tree.JGraphAbstractTreeLayout$TreeNode {
  protected double width;
  protected double height;
  protected double x;
  protected double y;
  protected java.lang.Object cell;
  final com.jgraph.layout.tree.JGraphAbstractTreeLayout this$0;
  public com.jgraph.layout.tree.JGraphAbstractTreeLayout$TreeNode(com.jgraph.layout.tree.JGraphAbstractTreeLayout, java.lang.Object);
  protected void routeEdges(java.awt.geom.Point2D);
  public double getWidth();
  public void setWidth(double);
}
Compiled from "JGraphCompactTreeLayout.java"
public class com.jgraph.layout.tree.JGraphCompactTreeLayout extends com.jgraph.layout.tree.JGraphAbstractTreeLayout {
  public static final int LEFT_TO_RIGHT;
  public static final int UP_TO_DOWN;
  public static final int DEFAULT_ORIENTATION;
  public com.jgraph.layout.tree.JGraphCompactTreeLayout();
  public void run(com.jgraph.layout.JGraphFacade);
  protected void layoutTree(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode);
  protected com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode getTreeLayoutNode(java.lang.Object);
  protected com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode getTreeLayoutNode(java.lang.Object, boolean);
  protected void dispatchResult(java.util.Collection);
  protected void layout(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode);
  protected void attachParent(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode, double);
  protected void layoutLeaf(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode);
  protected double join(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode);
  protected double merge(com.jgraph.layout.tree.JGraphCompactTreeLayout$Polygon, com.jgraph.layout.tree.JGraphCompactTreeLayout$Polygon);
  protected double offset(double, double, double, double, double, double);
  protected com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine bridge(com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine, double, double, com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine, double, double);
  protected void branch(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode, com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode, com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode);
  protected void unzip(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode);
  protected void zip(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode);
  protected void leftRightNodeLayout(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode, double, double);
  protected void upDownNodeLayout(com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode, com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode, double, double);
  public void setOrientation(int);
  public int getOrientation();
  public void setChildParentDistance(double);
  public double getChildParentDistance();
  public double getNodeBorder();
  public void setNodeBorder(double);
  public java.lang.String toString();
}
Compiled from "JGraphCompactTreeLayout.java"
class com.jgraph.layout.tree.JGraphCompactTreeLayout$1 implements com.jgraph.layout.JGraphFacade$CellVisitor {
  final com.jgraph.layout.tree.JGraphCompactTreeLayout this$0;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$1(com.jgraph.layout.tree.JGraphCompactTreeLayout);
  public void visit(java.lang.Object, java.lang.Object, java.lang.Object, int, int);
}
Compiled from "JGraphCompactTreeLayout.java"
public class com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode extends com.jgraph.layout.tree.JGraphAbstractTreeLayout$TreeNode {
  com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode parent;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode child;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode sibling;
  protected double offsetX;
  protected double offsetY;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$Polygon contour;
  final com.jgraph.layout.tree.JGraphCompactTreeLayout this$0;
  public com.jgraph.layout.tree.JGraphCompactTreeLayout$CompactTreeNode(com.jgraph.layout.tree.JGraphCompactTreeLayout, java.lang.Object);
  public java.lang.Object getCell();
}
Compiled from "JGraphCompactTreeLayout.java"
class com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine {
  final double dx;
  final double dy;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine link;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine(double, double, com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine);
}
Compiled from "JGraphCompactTreeLayout.java"
class com.jgraph.layout.tree.JGraphCompactTreeLayout$Polygon {
  com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine lowerHead;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine lowerTail;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine upperHead;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$PolyLine upperTail;
  com.jgraph.layout.tree.JGraphCompactTreeLayout$Polygon(com.jgraph.layout.tree.JGraphCompactTreeLayout$1);
}
Compiled from "JGraphMoenLayout.java"
public class com.jgraph.layout.tree.JGraphMoenLayout extends com.jgraph.layout.tree.JGraphCompactTreeLayout {
  public com.jgraph.layout.tree.JGraphMoenLayout();
  public java.lang.String toString();
}
Compiled from "JGraphRadialTreeLayout.java"
public class com.jgraph.layout.tree.JGraphRadialTreeLayout implements com.jgraph.layout.JGraphLayout {
  protected java.lang.Object virtualRootCell;
  protected boolean moveRoots;
  protected double angleOffset;
  protected boolean autoRadius;
  protected double minradiusx;
  protected double minradiusy;
  protected double maxradiusx;
  protected double maxradiusy;
  protected double radiusx;
  protected double radiusy;
  protected double rootx;
  protected double rooty;
  protected transient java.util.Map nodes;
  public com.jgraph.layout.tree.JGraphRadialTreeLayout();
  public void run(com.jgraph.layout.JGraphFacade);
  public com.jgraph.layout.tree.JGraphRadialTreeLayout$TreeNode getTreeNode(java.lang.Object);
  public double getRadiusx();
  public void setRadiusx(double);
  public double getRadiusy();
  public void setRadiusy(double);
  public double getAngleOffset();
  public void setAngleOffset(double);
  public boolean isAutoRadius();
  public void setAutoRadius(boolean);
  public boolean isMoveRoots();
  public void setMoveRoots(boolean);
  public double getMaxradiusx();
  public void setMaxradiusx(double);
  public double getMaxradiusy();
  public void setMaxradiusy(double);
  public double getMinradiusx();
  public void setMinradiusx(double);
  public double getMinradiusy();
  public void setMinradiusy(double);
  public java.lang.String toString();
}
Compiled from "JGraphRadialTreeLayout.java"
class com.jgraph.layout.tree.JGraphRadialTreeLayout$1 implements com.jgraph.layout.JGraphFacade$CellVisitor {
  final com.jgraph.layout.tree.JGraphRadialTreeLayout this$0;
  com.jgraph.layout.tree.JGraphRadialTreeLayout$1(com.jgraph.layout.tree.JGraphRadialTreeLayout);
  public void visit(java.lang.Object, java.lang.Object, java.lang.Object, int, int);
}
Compiled from "JGraphRadialTreeLayout.java"
class com.jgraph.layout.tree.JGraphRadialTreeLayout$TreeNode {
  public double angle;
  public double x;
  public double y;
  public double rightBisector;
  public double leftBisector;
  public double rightTangent;
  public double leftTangent;
  com.jgraph.layout.tree.JGraphRadialTreeLayout$TreeNode(java.lang.Object);
  public int getDepth();
  public java.lang.Object getCell();
  public void addChild(com.jgraph.layout.tree.JGraphRadialTreeLayout$TreeNode);
  public java.util.List getChildren();
  public boolean hasChildren();
  public double leftLimit();
  public double rightLimit();
  static java.util.List access$000(com.jgraph.layout.tree.JGraphRadialTreeLayout$TreeNode);
}
Compiled from "JGraphTreeLayout.java"
public class com.jgraph.layout.tree.JGraphTreeLayout extends com.jgraph.layout.tree.JGraphAbstractTreeLayout {
  protected int alignment;
  protected boolean combineLevelNodes;
  public com.jgraph.layout.tree.JGraphTreeLayout();
  public void run(com.jgraph.layout.JGraphFacade);
  protected com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode getTreeNode(java.lang.Object);
  protected void layout(com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode);
  protected void join(com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode);
  protected com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode getLeftMostX(com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode);
  protected com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode getRightMostX(com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode);
  protected void merge(com.jgraph.layout.tree.JGraphTreeLayout$PolyLine, com.jgraph.layout.tree.JGraphTreeLayout$PolyLine, double);
  protected int distance(com.jgraph.layout.tree.JGraphTreeLayout$PolyLine, com.jgraph.layout.tree.JGraphTreeLayout$PolyLine);
  protected void setPosition(java.util.List);
  protected void setLevelHeights(com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode);
  protected void spaceMultipleTrees(com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode);
  public int getAlignment();
  public void setAlignment(int);
  public boolean isCombineLevelNodes();
  public void setCombineLevelNodes(boolean);
  public java.lang.String toString();
}
Compiled from "JGraphTreeLayout.java"
class com.jgraph.layout.tree.JGraphTreeLayout$1 implements com.jgraph.layout.JGraphFacade$CellVisitor {
  final com.jgraph.layout.tree.JGraphTreeLayout this$0;
  com.jgraph.layout.tree.JGraphTreeLayout$1(com.jgraph.layout.tree.JGraphTreeLayout);
  public void visit(java.lang.Object, java.lang.Object, java.lang.Object, int, int);
}
Compiled from "JGraphTreeLayout.java"
public class com.jgraph.layout.tree.JGraphTreeLayout$PolyLine {
  double dx;
  com.jgraph.layout.tree.JGraphTreeLayout$PolyLine next;
  final com.jgraph.layout.tree.JGraphTreeLayout this$0;
  public com.jgraph.layout.tree.JGraphTreeLayout$PolyLine(com.jgraph.layout.tree.JGraphTreeLayout, double);
}
Compiled from "JGraphTreeLayout.java"
public class com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode extends com.jgraph.layout.tree.JGraphAbstractTreeLayout$TreeNode {
  java.util.List children;
  double levelheight;
  com.jgraph.layout.tree.JGraphTreeLayout$PolyLine leftContour;
  com.jgraph.layout.tree.JGraphTreeLayout$PolyLine rightContour;
  protected com.jgraph.layout.tree.JGraphAbstractTreeLayout$TreeNode parent;
  final com.jgraph.layout.tree.JGraphTreeLayout this$0;
  public com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode(com.jgraph.layout.tree.JGraphTreeLayout, java.lang.Object);
  public java.util.Iterator getChildren();
  public int getLeftWidth();
  public int getRightWidth();
  public double getHeight();
  public void addChild(com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode);
  public void setPosition(java.awt.geom.Point2D, double);
  public java.util.List getNodesByLevel();
  public int getDepth();
  public void setDepth(int);
  public com.jgraph.layout.tree.JGraphAbstractTreeLayout$TreeNode getParent();
  public void setParent(com.jgraph.layout.tree.JGraphAbstractTreeLayout$TreeNode);
}
Compiled from "OrganizationalChart.java"
public class com.jgraph.layout.tree.OrganizationalChart extends com.jgraph.layout.tree.JGraphTreeLayout {
  protected int vertexDepthOrientationSwitch;
  protected int childrenLimitOrientationSwitch;
  protected java.util.Set horizontalParentsSet;
  protected int verticalEdgeLeftInset;
  protected int verticalEdgeRightInset;
  public com.jgraph.layout.tree.OrganizationalChart();
  public void run(com.jgraph.layout.JGraphFacade);
  protected com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode getTreeNode(java.lang.Object);
  protected void layout(com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode);
}
Compiled from "OrganizationalChart.java"
public class com.jgraph.layout.tree.OrganizationalChart$OrganizationalTreeNode extends com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode {
  protected boolean verticalStyleChildren;
  final com.jgraph.layout.tree.OrganizationalChart this$0;
  public com.jgraph.layout.tree.OrganizationalChart$OrganizationalTreeNode(com.jgraph.layout.tree.OrganizationalChart, java.lang.Object);
  public void addChild(com.jgraph.layout.tree.JGraphTreeLayout$StandardTreeNode);
  public boolean isVerticalStyleChildren();
  public void setVerticalStyleChildren(boolean);
  public void setDepth(int);
  public void setPosition(java.awt.geom.Point2D, double);
  protected void positionVerticalChildren(java.awt.geom.Point2D);
}
Compiled from "GraphNavigator.java"
public class com.jgraph.navigation.GraphNavigator extends javax.swing.JPanel implements org.jgraph.event.GraphLayoutCacheListener,org.jgraph.event.GraphModelListener,java.beans.PropertyChangeListener,java.awt.event.AdjustmentListener {
  protected static final java.awt.Cursor CURSOR_DEFAULT;
  protected static final java.awt.Cursor CURSOR_HAND;
  protected java.awt.event.ComponentListener componentListener;
  protected transient org.jgraph.graph.GraphLayoutCache initialLayoutCache;
  protected org.jgraph.JGraph backingGraph;
  protected java.lang.ref.WeakReference currentGraph;
  protected com.jgraph.navigation.GraphNavigator$NavigatorPane navigatorPane;
  protected double maximumScale;
  public com.jgraph.navigation.GraphNavigator(org.jgraph.JGraph);
  public com.jgraph.navigation.GraphNavigator$NavigatorPane getScrollPane();
  public double getMaximumScale();
  public void setMaximumScale(double);
  public org.jgraph.JGraph getBackingGraph();
  public void setBackingGraph(org.jgraph.JGraph);
  public org.jgraph.JGraph getCurrentGraph();
  public void setCurrentGraph(org.jgraph.JGraph);
  protected void updateScale();
  public void graphLayoutCacheChanged(org.jgraph.event.GraphLayoutCacheEvent);
  public void graphChanged(org.jgraph.event.GraphModelEvent);
  public void propertyChange(java.beans.PropertyChangeEvent);
  public void adjustmentValueChanged(java.awt.event.AdjustmentEvent);
  public static javax.swing.JScrollPane getParentScrollPane(java.awt.Component);
  public static org.jgraph.JGraph getParentGraph(java.awt.Component);
  public static com.jgraph.navigation.GraphNavigator createInstance(org.jgraph.JGraph);
  static {};
}
Compiled from "GraphNavigator.java"
class com.jgraph.navigation.GraphNavigator$1 extends java.awt.event.ComponentAdapter {
  final com.jgraph.navigation.GraphNavigator this$0;
  com.jgraph.navigation.GraphNavigator$1(com.jgraph.navigation.GraphNavigator);
  public void componentResized(java.awt.event.ComponentEvent);
}
Compiled from "GraphNavigator.java"
class com.jgraph.navigation.GraphNavigator$2 implements java.lang.Runnable {
  final com.jgraph.navigation.GraphNavigator this$0;
  com.jgraph.navigation.GraphNavigator$2(com.jgraph.navigation.GraphNavigator);
  public void run();
}
Compiled from "GraphNavigator.java"
public class com.jgraph.navigation.GraphNavigator$NavigatorPane extends javax.swing.JScrollPane implements java.awt.event.MouseListener,java.awt.event.MouseMotionListener {
  protected java.awt.Rectangle currentViewport;
  protected java.awt.Point lastPoint;
  final com.jgraph.navigation.GraphNavigator this$0;
  public com.jgraph.navigation.GraphNavigator$NavigatorPane(com.jgraph.navigation.GraphNavigator, org.jgraph.JGraph);
  public void paint(java.awt.Graphics);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
}
Compiled from "NavigationExample.java"
public class com.jgraph.navigation.NavigationExample extends com.jgraph.example.GraphEdX {
  public com.jgraph.navigation.NavigationExample();
  protected void populateContentPane();
  public java.util.Map createCellAttributes(java.awt.geom.Point2D);
  protected org.jgraph.graph.DefaultGraphCell createDefaultGraphCell();
  protected org.jgraph.graph.DefaultGraphCell createBranchCell();
  public java.util.Map createEdgeAttributes();
  public javax.swing.JToolBar createToolBar();
  public static void main(java.lang.String[]);
}
Compiled from "NavigationToolBar.java"
public class com.jgraph.navigation.NavigationToolBar {
  protected org.jgraph.graph.BasicMarqueeHandler connectorHandler;
  public com.jgraph.navigation.NavigationToolBar();
  public javax.swing.JToolBar createToolBar(com.jgraph.navigation.NavigationExample, org.jgraph.JGraph);
}
Compiled from "NavigationToolBar.java"
class com.jgraph.navigation.NavigationToolBar$1 extends javax.swing.AbstractAction {
  final org.jgraph.JGraph val$graph;
  final org.jgraph.graph.BasicMarqueeHandler val$panningHandler;
  final javax.swing.ImageIcon val$selectingIcon;
  final javax.swing.ImageIcon val$panningIcon;
  final com.jgraph.navigation.NavigationToolBar this$0;
  com.jgraph.navigation.NavigationToolBar$1(com.jgraph.navigation.NavigationToolBar, java.lang.String, javax.swing.Icon, org.jgraph.JGraph, org.jgraph.graph.BasicMarqueeHandler, javax.swing.ImageIcon, javax.swing.ImageIcon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "NavigationToolBar.java"
class com.jgraph.navigation.NavigationToolBar$2 extends javax.swing.AbstractAction {
  final com.jgraph.navigation.NavigationExample val$app;
  final com.jgraph.navigation.NavigationToolBar this$0;
  com.jgraph.navigation.NavigationToolBar$2(com.jgraph.navigation.NavigationToolBar, java.lang.String, javax.swing.Icon, com.jgraph.navigation.NavigationExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "NavigationToolBar.java"
class com.jgraph.navigation.NavigationToolBar$3 extends javax.swing.AbstractAction {
  final com.jgraph.navigation.NavigationExample val$app;
  final com.jgraph.navigation.NavigationToolBar this$0;
  com.jgraph.navigation.NavigationToolBar$3(com.jgraph.navigation.NavigationToolBar, java.lang.String, javax.swing.Icon, com.jgraph.navigation.NavigationExample);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "NavigationToolBar.java"
class com.jgraph.navigation.NavigationToolBar$4 extends javax.swing.AbstractAction {
  final org.jgraph.JGraph val$graph;
  final com.jgraph.navigation.NavigationToolBar this$0;
  com.jgraph.navigation.NavigationToolBar$4(com.jgraph.navigation.NavigationToolBar, java.lang.String, javax.swing.Icon, org.jgraph.JGraph);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "NavigationToolBar.java"
class com.jgraph.navigation.NavigationToolBar$5 extends javax.swing.AbstractAction {
  final org.jgraph.JGraph val$graph;
  final com.jgraph.navigation.NavigationToolBar this$0;
  com.jgraph.navigation.NavigationToolBar$5(com.jgraph.navigation.NavigationToolBar, java.lang.String, javax.swing.Icon, org.jgraph.JGraph);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "NavigationToolBar.java"
class com.jgraph.navigation.NavigationToolBar$6 extends javax.swing.AbstractAction {
  final org.jgraph.JGraph val$graph;
  final com.jgraph.navigation.NavigationToolBar this$0;
  com.jgraph.navigation.NavigationToolBar$6(com.jgraph.navigation.NavigationToolBar, java.lang.String, javax.swing.Icon, org.jgraph.JGraph);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "NavigationToolBar.java"
class com.jgraph.navigation.NavigationToolBar$7 extends javax.swing.AbstractAction {
  final org.jgraph.JGraph val$graph;
  final com.jgraph.navigation.NavigationToolBar this$0;
  com.jgraph.navigation.NavigationToolBar$7(com.jgraph.navigation.NavigationToolBar, java.lang.String, javax.swing.Icon, org.jgraph.JGraph);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "PanningTool.java"
public class com.jgraph.navigation.PanningTool extends org.jgraph.graph.BasicMarqueeHandler {
  protected int m_XDifference;
  protected int m_YDifference;
  protected int dx;
  protected int dy;
  protected java.awt.Cursor panningCursor;
  public com.jgraph.navigation.PanningTool();
  public boolean isForceMarqueeEvent(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  protected void processMouseDraggedEvent(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public java.awt.Cursor getPanningCursor();
  public void setPanningCursor(java.awt.Cursor);
}
Compiled from "JGraphPrintingScrollPane.java"
public class com.jgraph.util.JGraphPrintingScrollPane extends javax.swing.JScrollPane implements java.awt.print.Printable {
  public static final double DEFAULT_PAGESCALE;
  protected java.awt.print.PageFormat pageFormat;
  protected boolean isPageVisible;
  protected double pageScale;
  protected org.jgraph.JGraph graph;
  public static java.lang.String PROPERTY_METRIC;
  public static java.lang.String PROPERTY_PAGEVISIBLE;
  public static java.lang.String PROPERTY_BACKGROUNDIMAGE;
  public static java.lang.String PROPERTY_RULERSVISIBLE;
  public static java.lang.String PROPERTY_PAGEFORMAT;
  public static java.lang.String PROPERTY_AUTOSCALEPOLICY;
  public static java.lang.String PROPERTY_PAGESCALE;
  public com.jgraph.util.JGraphPrintingScrollPane();
  public org.jgraph.JGraph getGraph();
  public java.awt.print.PageFormat getPageFormat();
  public void setPageFormat(java.awt.print.PageFormat);
  public double getPageScale();
  public void setPageScale(double);
  protected void updateMinimumSize();
  protected double computeWindowScale(int);
  protected double computePageScale();
  protected double computePageWidthScale(int);
  public int print(java.awt.Graphics, java.awt.print.PageFormat, int);
  public boolean isPageVisible();
  public void setPageVisible(boolean);
  static {};
}
Compiled from "JGraphPrintingScrollPane.java"
public class com.jgraph.util.JGraphPrintingScrollPane$Viewport extends javax.swing.JViewport {
  final com.jgraph.util.JGraphPrintingScrollPane this$0;
  public com.jgraph.util.JGraphPrintingScrollPane$Viewport(com.jgraph.util.JGraphPrintingScrollPane);
  public void paint(java.awt.Graphics);
  protected void paintBackgroundImage(java.awt.Graphics2D);
  protected void paintBackgroundPages(java.awt.Graphics2D);
}
Compiled from "mxBasicCanvas.java"
public abstract class com.mxgraph.canvas.mxBasicCanvas implements com.mxgraph.canvas.mxICanvas {
  public static java.lang.String DEFAULT_IMAGEBASEPATH;
  protected java.lang.String imageBasePath;
  protected java.awt.Point translate;
  protected double scale;
  protected boolean drawLabels;
  public com.mxgraph.canvas.mxBasicCanvas();
  public void setTranslate(int, int);
  public java.awt.Point getTranslate();
  public void setScale(double);
  public double getScale();
  public void setDrawLabels(boolean);
  public java.lang.String getImageBasePath();
  public void setImageBasePath(java.lang.String);
  public boolean isDrawLabels();
  public java.lang.String getImageForStyle(java.util.Map<java.lang.String, java.lang.Object>);
  static {};
}
Compiled from "mxHtmlCanvas.java"
public class com.mxgraph.canvas.mxHtmlCanvas extends com.mxgraph.canvas.mxBasicCanvas {
  protected org.w3c.dom.Document document;
  public com.mxgraph.canvas.mxHtmlCanvas();
  public com.mxgraph.canvas.mxHtmlCanvas(org.w3c.dom.Document);
  public void appendHtmlElement(org.w3c.dom.Element);
  public void setDocument(org.w3c.dom.Document);
  public org.w3c.dom.Document getDocument();
  public java.lang.Object drawCell(com.mxgraph.view.mxCellState);
  public java.lang.Object drawLabel(java.lang.String, com.mxgraph.view.mxCellState, boolean);
  public org.w3c.dom.Element drawShape(int, int, int, int, java.util.Map<java.lang.String, java.lang.Object>);
  public void drawLine(java.util.List<com.mxgraph.util.mxPoint>, java.util.Map<java.lang.String, java.lang.Object>);
  protected void drawSegment(int, int, int, int, java.lang.String, int);
  public org.w3c.dom.Element drawText(java.lang.String, int, int, int, int, java.util.Map<java.lang.String, java.lang.Object>);
}
Compiled from "mxICanvas.java"
public interface com.mxgraph.canvas.mxICanvas {
  public abstract void setTranslate(int, int);
  public abstract java.awt.Point getTranslate();
  public abstract void setScale(double);
  public abstract double getScale();
  public abstract java.lang.Object drawCell(com.mxgraph.view.mxCellState);
  public abstract java.lang.Object drawLabel(java.lang.String, com.mxgraph.view.mxCellState, boolean);
}
Compiled from "mxSvgCanvas.java"
public class com.mxgraph.canvas.mxSvgCanvas extends com.mxgraph.canvas.mxBasicCanvas {
  protected org.w3c.dom.Document document;
  public com.mxgraph.canvas.mxSvgCanvas();
  public com.mxgraph.canvas.mxSvgCanvas(org.w3c.dom.Document);
  public void appendSvgElement(org.w3c.dom.Element);
  public void setDocument(org.w3c.dom.Document);
  public org.w3c.dom.Document getDocument();
  public java.lang.Object drawCell(com.mxgraph.view.mxCellState);
  public java.lang.Object drawLabel(java.lang.String, com.mxgraph.view.mxCellState, boolean);
  public org.w3c.dom.Element drawShape(int, int, int, int, java.util.Map<java.lang.String, java.lang.Object>);
  public org.w3c.dom.Element drawLine(java.util.List<com.mxgraph.util.mxPoint>, java.util.Map<java.lang.String, java.lang.Object>);
  public com.mxgraph.util.mxPoint drawMarker(org.w3c.dom.Element, java.lang.Object, com.mxgraph.util.mxPoint, com.mxgraph.util.mxPoint, float, float, java.lang.String);
  public java.lang.Object drawText(java.lang.String, int, int, int, int, java.util.Map<java.lang.String, java.lang.Object>);
}
Compiled from "mxVmlCanvas.java"
public class com.mxgraph.canvas.mxVmlCanvas extends com.mxgraph.canvas.mxBasicCanvas {
  protected org.w3c.dom.Document document;
  public com.mxgraph.canvas.mxVmlCanvas();
  public com.mxgraph.canvas.mxVmlCanvas(org.w3c.dom.Document);
  public void setDocument(org.w3c.dom.Document);
  public org.w3c.dom.Document getDocument();
  public void appendVmlElement(org.w3c.dom.Element);
  public java.lang.Object drawCell(com.mxgraph.view.mxCellState);
  public java.lang.Object drawLabel(java.lang.String, com.mxgraph.view.mxCellState, boolean);
  public org.w3c.dom.Element drawShape(int, int, int, int, java.util.Map<java.lang.String, java.lang.Object>);
  public org.w3c.dom.Element drawLine(java.util.List<com.mxgraph.util.mxPoint>, java.util.Map<java.lang.String, java.lang.Object>);
  public org.w3c.dom.Element drawText(java.lang.String, int, int, int, int, java.util.Map<java.lang.String, java.lang.Object>);
}
Compiled from "mxCellCodec.java"
public class com.mxgraph.io.mxCellCodec extends com.mxgraph.io.mxObjectCodec {
  public com.mxgraph.io.mxCellCodec();
  public com.mxgraph.io.mxCellCodec(java.lang.Object);
  public com.mxgraph.io.mxCellCodec(java.lang.Object, java.lang.String[], java.lang.String[], java.util.Map<java.lang.String, java.lang.String>);
  public boolean isExcluded(java.lang.Object, java.lang.String, java.lang.Object, boolean);
  public org.w3c.dom.Node afterEncode(com.mxgraph.io.mxCodec, java.lang.Object, org.w3c.dom.Node);
  public org.w3c.dom.Node beforeDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
}
Compiled from "mxChildChangeCodec.java"
public class com.mxgraph.io.mxChildChangeCodec extends com.mxgraph.io.mxObjectCodec {
  public com.mxgraph.io.mxChildChangeCodec();
  public com.mxgraph.io.mxChildChangeCodec(java.lang.Object, java.lang.String[], java.lang.String[], java.util.Map<java.lang.String, java.lang.String>);
  public boolean isReference(java.lang.Object, java.lang.String, java.lang.Object, boolean);
  public org.w3c.dom.Node afterEncode(com.mxgraph.io.mxCodec, java.lang.Object, org.w3c.dom.Node);
  public org.w3c.dom.Node beforeDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  public java.lang.Object afterDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
}
Compiled from "mxCodec.java"
public class com.mxgraph.io.mxCodec {
  protected org.w3c.dom.Document document;
  protected java.util.Map<java.lang.String, java.lang.Object> objects;
  protected boolean encodeDefaults;
  public com.mxgraph.io.mxCodec();
  public com.mxgraph.io.mxCodec(org.w3c.dom.Document);
  public org.w3c.dom.Document getDocument();
  public void setDocument(org.w3c.dom.Document);
  public boolean isEncodeDefaults();
  public void setEncodeDefaults(boolean);
  public java.util.Map<java.lang.String, java.lang.Object> getObjects();
  public java.lang.Object putObject(java.lang.String, java.lang.Object);
  public java.lang.Object getObject(java.lang.String);
  public java.lang.Object lookup(java.lang.String);
  public org.w3c.dom.Node getElementById(java.lang.String);
  public org.w3c.dom.Node getElementById(java.lang.String, java.lang.String);
  public java.lang.String getId(java.lang.Object);
  public java.lang.String reference(java.lang.Object);
  public org.w3c.dom.Node encode(java.lang.Object);
  public java.lang.Object decode(org.w3c.dom.Node);
  public java.lang.Object decode(org.w3c.dom.Node, java.lang.Object);
  public void encodeCell(com.mxgraph.model.mxICell, org.w3c.dom.Node, boolean);
  public com.mxgraph.model.mxICell decodeCell(org.w3c.dom.Node, boolean);
  public void insertIntoGraph(com.mxgraph.model.mxICell);
  public static void setAttribute(org.w3c.dom.Node, java.lang.String, java.lang.Object);
}
Compiled from "mxCodecRegistry.java"
public class com.mxgraph.io.mxCodecRegistry {
  protected static java.util.Hashtable<java.lang.String, com.mxgraph.io.mxObjectCodec> codecs;
  protected static java.util.Hashtable<java.lang.String, java.lang.String> aliases;
  protected static java.util.List<java.lang.String> packages;
  public com.mxgraph.io.mxCodecRegistry();
  public static com.mxgraph.io.mxObjectCodec register(com.mxgraph.io.mxObjectCodec);
  public static void addAlias(java.lang.String, java.lang.String);
  public static com.mxgraph.io.mxObjectCodec getCodec(java.lang.String);
  public static void addPackage(java.lang.String);
  public static java.lang.Object getInstanceForName(java.lang.String);
  public static java.lang.Class<?> getClassForName(java.lang.String);
  public static java.lang.String getName(java.lang.Object);
  static {};
}
Compiled from "mxGenericChangeCodec.java"
public class com.mxgraph.io.mxGenericChangeCodec extends com.mxgraph.io.mxObjectCodec {
  protected java.lang.String fieldname;
  public com.mxgraph.io.mxGenericChangeCodec(java.lang.Object, java.lang.String);
  public com.mxgraph.io.mxGenericChangeCodec(java.lang.Object, java.lang.String[], java.lang.String[], java.util.Map<java.lang.String, java.lang.String>, java.lang.String);
  public java.lang.Object afterDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
}
Compiled from "mxModelCodec.java"
public class com.mxgraph.io.mxModelCodec extends com.mxgraph.io.mxObjectCodec {
  public com.mxgraph.io.mxModelCodec();
  public com.mxgraph.io.mxModelCodec(java.lang.Object);
  public com.mxgraph.io.mxModelCodec(java.lang.Object, java.lang.String[], java.lang.String[], java.util.Map<java.lang.String, java.lang.String>);
  public org.w3c.dom.Node encode(com.mxgraph.io.mxCodec, java.lang.Object);
  public org.w3c.dom.Node beforeDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
}
Compiled from "mxObjectCodec.java"
public class com.mxgraph.io.mxObjectCodec {
  protected java.lang.Object template;
  protected java.util.Set<java.lang.String> exclude;
  protected java.util.Set<java.lang.String> idrefs;
  protected java.util.Map<java.lang.String, java.lang.String> mapping;
  protected java.util.Map<java.lang.String, java.lang.String> reverse;
  public com.mxgraph.io.mxObjectCodec(java.lang.Object);
  public com.mxgraph.io.mxObjectCodec(java.lang.Object, java.lang.String[], java.lang.String[], java.util.Map<java.lang.String, java.lang.String>);
  public java.lang.String getName();
  public java.lang.Object getTemplate();
  protected java.lang.Object cloneTemplate(org.w3c.dom.Node);
  public boolean isExcluded(java.lang.Object, java.lang.String, java.lang.Object, boolean);
  public boolean isReference(java.lang.Object, java.lang.String, java.lang.Object, boolean);
  public org.w3c.dom.Node encode(com.mxgraph.io.mxCodec, java.lang.Object);
  protected void encodeObject(com.mxgraph.io.mxCodec, java.lang.Object, org.w3c.dom.Node);
  protected void encodeFields(com.mxgraph.io.mxCodec, java.lang.Object, org.w3c.dom.Node);
  protected void encodeElements(com.mxgraph.io.mxCodec, java.lang.Object, org.w3c.dom.Node);
  protected void encodeValue(com.mxgraph.io.mxCodec, java.lang.Object, java.lang.String, java.lang.Object, org.w3c.dom.Node);
  protected boolean isPrimitiveValue(java.lang.Object);
  protected void writeAttribute(com.mxgraph.io.mxCodec, java.lang.Object, java.lang.String, java.lang.Object, org.w3c.dom.Node);
  protected void writePrimitiveAttribute(com.mxgraph.io.mxCodec, java.lang.Object, java.lang.String, java.lang.Object, org.w3c.dom.Node);
  protected void writeComplexAttribute(com.mxgraph.io.mxCodec, java.lang.Object, java.lang.String, java.lang.Object, org.w3c.dom.Node);
  protected java.lang.Object convertValueToXml(java.lang.Object);
  protected java.lang.Object convertValueFromXml(java.lang.Class<?>, java.lang.Object);
  protected java.lang.String getAttributeName(java.lang.String);
  protected java.lang.String getFieldName(java.lang.String);
  protected java.lang.reflect.Field getField(java.lang.Object, java.lang.String);
  protected java.lang.reflect.Method getAccessor(java.lang.Object, java.lang.reflect.Field, boolean);
  protected java.lang.reflect.Method getMethod(java.lang.Object, java.lang.String, java.lang.Class[]);
  protected java.lang.Object getFieldValue(java.lang.Object, java.lang.String);
  protected void setFieldValue(java.lang.Object, java.lang.String, java.lang.Object);
  public java.lang.Object beforeEncode(com.mxgraph.io.mxCodec, java.lang.Object, org.w3c.dom.Node);
  public org.w3c.dom.Node afterEncode(com.mxgraph.io.mxCodec, java.lang.Object, org.w3c.dom.Node);
  public java.lang.Object decode(com.mxgraph.io.mxCodec, org.w3c.dom.Node);
  public java.lang.Object decode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  protected void decodeNode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  protected void decodeAttributes(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  protected void decodeAttribute(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  protected void decodeChildren(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  protected void decodeChild(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  public boolean processInclude(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  public org.w3c.dom.Node beforeDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  public java.lang.Object afterDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  static {};
}
Compiled from "mxRootChangeCodec.java"
public class com.mxgraph.io.mxRootChangeCodec extends com.mxgraph.io.mxObjectCodec {
  public com.mxgraph.io.mxRootChangeCodec();
  public com.mxgraph.io.mxRootChangeCodec(java.lang.Object, java.lang.String[], java.lang.String[], java.util.Map<java.lang.String, java.lang.String>);
  public org.w3c.dom.Node afterEncode(com.mxgraph.io.mxCodec, java.lang.Object, org.w3c.dom.Node);
  public org.w3c.dom.Node beforeDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
  public java.lang.Object afterDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
}
Compiled from "mxStylesheetCodec.java"
public class com.mxgraph.io.mxStylesheetCodec extends com.mxgraph.io.mxObjectCodec {
  public com.mxgraph.io.mxStylesheetCodec();
  public com.mxgraph.io.mxStylesheetCodec(java.lang.Object);
  public com.mxgraph.io.mxStylesheetCodec(java.lang.Object, java.lang.String[], java.lang.String[], java.util.Map<java.lang.String, java.lang.String>);
  public org.w3c.dom.Node encode(com.mxgraph.io.mxCodec, java.lang.Object);
  public java.lang.Object decode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
}
Compiled from "mxTerminalChangeCodec.java"
public class com.mxgraph.io.mxTerminalChangeCodec extends com.mxgraph.io.mxObjectCodec {
  public com.mxgraph.io.mxTerminalChangeCodec();
  public com.mxgraph.io.mxTerminalChangeCodec(java.lang.Object, java.lang.String[], java.lang.String[], java.util.Map<java.lang.String, java.lang.String>);
  public java.lang.Object afterDecode(com.mxgraph.io.mxCodec, org.w3c.dom.Node, java.lang.Object);
}
Compiled from "mxGraphAbstractHierarchyCell.java"
public abstract class com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell {
  public int maxRank;
  public int minRank;
  public double[] x;
  public double[] y;
  public double width;
  public double height;
  protected java.util.List<com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell>[] nextLayerConnectedCells;
  protected java.util.List<com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell>[] previousLayerConnectedCells;
  public int[] temp;
  public com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell();
  public abstract java.util.List<com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell> getNextLayerConnectedCells(int);
  public abstract java.util.List<com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell> getPreviousLayerConnectedCells(int);
  public abstract boolean isEdge();
  public abstract boolean isVertex();
  public abstract int getGeneralPurposeVariable(int);
  public abstract void setGeneralPurposeVariable(int, int);
  public void setX(int, double);
  public double getX(int);
  public void setY(int, double);
}
Compiled from "mxGraphHierarchyEdge.java"
public class com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge extends com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell {
  public java.util.List<java.lang.Object> edges;
  public com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode source;
  public com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode target;
  protected boolean isReversed;
  public com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge(java.util.List<java.lang.Object>);
  public void invert();
  public boolean isReversed();
  public void setReversed(boolean);
  public java.util.List<com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell> getNextLayerConnectedCells(int);
  public java.util.List<com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell> getPreviousLayerConnectedCells(int);
  public boolean isEdge();
  public boolean isVertex();
  public int getGeneralPurposeVariable(int);
  public void setGeneralPurposeVariable(int, int);
}
Compiled from "mxGraphHierarchyModel.java"
public class com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel {
  protected boolean scanRanksFromSinks;
  public int maxRank;
  protected java.util.Map<java.lang.Object, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode> vertexMapper;
  protected java.util.Map<java.lang.Object, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge> edgeMapper;
  public java.util.Map<java.lang.Integer, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyRank> ranks;
  public java.util.List<java.lang.Object> roots;
  public java.lang.Object parent;
  protected int dfsCount;
  protected boolean deterministic;
  public com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel(com.mxgraph.layout.hierarchical.mxHierarchicalLayout, java.lang.Object[], java.util.List<java.lang.Object>, java.lang.Object, boolean, boolean, boolean);
  public void formOrderedHierarchy(com.mxgraph.layout.hierarchical.mxHierarchicalLayout, java.lang.Object[], java.lang.Object);
  protected void createInternalCells(com.mxgraph.layout.hierarchical.mxHierarchicalLayout, java.lang.Object[], com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode[]);
  public void initialRank();
  public void fixRanks();
  public void visit(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel$CellVisitor, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode[], boolean, java.util.Set<com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode>);
  public void dfs(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel$CellVisitor, java.util.Set<com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode>, int);
  public void dfs(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel$CellVisitor, java.util.Set<com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode>, int[], int, int);
  public java.util.Map<java.lang.Object, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode> getVertexMapper();
  public void setVertexMapper(java.util.Map<java.lang.Object, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode>);
  public java.util.Map<java.lang.Object, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge> getEdgeMapper();
  public void setEdgeMapper(java.util.Map<java.lang.Object, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge>);
  public int getDfsCount();
  public void setDfsCount(int);
  public boolean isDeterministic();
  public void setDeterministic(boolean);
}
Compiled from "mxGraphHierarchyModel.java"
class com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel$1 implements com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel$CellVisitor {
  final com.mxgraph.layout.hierarchical.model.mxGraphHierarchyRank[] val$rankList;
  final com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel this$0;
  com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel$1(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyRank[]);
  public void visit(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge, int, int);
}
Compiled from "mxGraphHierarchyModel.java"
public interface com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel$CellVisitor {
  public abstract void visit(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge, int, int);
}
Compiled from "mxGraphHierarchyNode.java"
public class com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode extends com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell {
  public static java.util.Collection<com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge> emptyConnectionMap;
  public java.lang.Object cell;
  public java.util.Collection<com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge> connectsAsTarget;
  public java.util.Collection<com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge> connectsAsSource;
  public int[] hashCode;
  public com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode(java.lang.Object);
  public int getRankValue();
  public java.util.List<com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell> getNextLayerConnectedCells(int);
  public java.util.List<com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell> getPreviousLayerConnectedCells(int);
  public boolean isEdge();
  public boolean isVertex();
  public int getGeneralPurposeVariable(int);
  public void setGeneralPurposeVariable(int, int);
  public boolean isAncestor(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode);
  static {};
}
Compiled from "mxGraphHierarchyRank.java"
public class com.mxgraph.layout.hierarchical.model.mxGraphHierarchyRank extends java.util.LinkedHashSet<com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell> {
  public com.mxgraph.layout.hierarchical.model.mxGraphHierarchyRank();
}
Compiled from "mxHierarchicalLayout.java"
public class com.mxgraph.layout.hierarchical.mxHierarchicalLayout extends com.mxgraph.layout.mxGraphLayout {
  protected java.util.List<java.lang.Object> roots;
  protected boolean resizeParent;
  protected boolean moveParent;
  protected int parentBorder;
  protected double intraCellSpacing;
  protected double interRankCellSpacing;
  protected double interHierarchySpacing;
  protected double parallelEdgeSpacing;
  protected int orientation;
  protected boolean disableEdgeStyle;
  protected boolean fineTuning;
  protected boolean deterministic;
  protected boolean fixRoots;
  protected boolean layoutFromSinks;
  protected com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel model;
  public com.mxgraph.layout.hierarchical.mxHierarchicalLayout(com.mxgraph.view.mxGraph);
  public com.mxgraph.layout.hierarchical.mxHierarchicalLayout(com.mxgraph.view.mxGraph, int);
  public com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel getModel();
  public void execute(java.lang.Object);
  public void execute(java.lang.Object, java.util.List<java.lang.Object>);
  public void run(java.lang.Object);
  public void cycleStage(java.lang.Object);
  public void layeringStage();
  public void crossingStage(java.lang.Object);
  public double placementStage(double, java.lang.Object);
  public boolean isResizeParent();
  public void setResizeParent(boolean);
  public boolean isMoveParent();
  public void setMoveParent(boolean);
  public int getParentBorder();
  public void setParentBorder(int);
  public double getIntraCellSpacing();
  public void setIntraCellSpacing(double);
  public double getInterRankCellSpacing();
  public void setInterRankCellSpacing(double);
  public int getOrientation();
  public void setOrientation(int);
  public double getInterHierarchySpacing();
  public void setInterHierarchySpacing(double);
  public double getParallelEdgeSpacing();
  public void setParallelEdgeSpacing(double);
  public boolean isFineTuning();
  public void setFineTuning(boolean);
  public boolean isDisableEdgeStyle();
  public void setDisableEdgeStyle(boolean);
  public boolean isDeterministic();
  public void setDeterministic(boolean);
  public boolean isFixRoots();
  public void setFixRoots(boolean);
  public boolean isLayoutFromSinks();
  public void setLayoutFromSinks(boolean);
  public void setLoggerLevel(java.util.logging.Level);
  public java.lang.String toString();
  static {};
}
Compiled from "mxCoordinateAssignment.java"
public class com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment implements com.mxgraph.layout.hierarchical.stage.mxHierarchicalLayoutStage {
  protected com.mxgraph.layout.hierarchical.mxHierarchicalLayout layout;
  protected double intraCellSpacing;
  protected double interRankCellSpacing;
  protected double parallelEdgeSpacing;
  protected double vertexConnectionBuffer;
  protected int maxIterations;
  protected int orientation;
  protected double initialX;
  protected double limitX;
  protected double currentXDelta;
  protected int widestRank;
  protected double[] rankTopY;
  protected double[] rankBottomY;
  protected double widestRankValue;
  protected double[] rankWidths;
  protected double[] rankY;
  protected boolean fineTuning;
  protected boolean disableEdgeStyle;
  protected com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$HierarchicalEdgeStyle edgeStyle;
  protected com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell[][] nextLayerConnectedCache;
  protected com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell[][] previousLayerConnectedCache;
  public com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment(com.mxgraph.layout.hierarchical.mxHierarchicalLayout, double, double, int, double, double);
  public void execute(java.lang.Object);
  protected void rankMedianPosition(int, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel, int);
  protected void rankCoordinates(int, com.mxgraph.view.mxGraph, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel);
  protected void calculateWidestRank(com.mxgraph.view.mxGraph, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel);
  protected void minPath(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel);
  protected boolean repositionValid(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel, com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell, int, double);
  protected void setCellLocations(com.mxgraph.view.mxGraph, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel);
  protected void setEdgePosition(com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell);
  protected void setVertexLocation(com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell);
  protected void processReversedEdge(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge, java.lang.Object);
  public double getInterRankCellSpacing();
  public void setInterRankCellSpacing(double);
  public double getIntraCellSpacing();
  public void setIntraCellSpacing(double);
  public int getOrientation();
  public void setOrientation(int);
  public double getLimitX();
  public void setLimitX(double);
  public boolean isFineTuning();
  public void setFineTuning(boolean);
  public void setLoggerLevel(java.util.logging.Level);
  static {};
}
Compiled from "mxCoordinateAssignment.java"
public class com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$AreaSpatialCache extends java.awt.geom.Rectangle2D$Double {
  public java.util.Set<java.lang.Object> cells;
  final com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment this$0;
  protected com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$AreaSpatialCache(com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment);
}
Compiled from "mxCoordinateAssignment.java"
final class com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$HierarchicalEdgeStyle extends java.lang.Enum<com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$HierarchicalEdgeStyle> {
  public static final com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$HierarchicalEdgeStyle ORTHOGONAL;
  public static final com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$HierarchicalEdgeStyle POLYLINE;
  public static final com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$HierarchicalEdgeStyle STRAIGHT;
  public static com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$HierarchicalEdgeStyle[] values();
  public static com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$HierarchicalEdgeStyle valueOf(java.lang.String);
  static {};
}
Compiled from "mxCoordinateAssignment.java"
public class com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$WeightedCellSorter implements java.lang.Comparable<java.lang.Object> {
  public int weightedValue;
  public boolean nudge;
  public boolean visited;
  public int rankIndex;
  public com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell cell;
  final com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment this$0;
  public com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$WeightedCellSorter(com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment);
  public com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment$WeightedCellSorter(com.mxgraph.layout.hierarchical.stage.mxCoordinateAssignment, com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell, int);
  public int compareTo(java.lang.Object);
}
Compiled from "mxHierarchicalLayoutStage.java"
public interface com.mxgraph.layout.hierarchical.stage.mxHierarchicalLayoutStage {
  public abstract void execute(java.lang.Object);
}
Compiled from "mxMedianHybridCrossingReduction.java"
public class com.mxgraph.layout.hierarchical.stage.mxMedianHybridCrossingReduction implements com.mxgraph.layout.hierarchical.stage.mxHierarchicalLayoutStage {
  protected com.mxgraph.layout.hierarchical.mxHierarchicalLayout layout;
  protected int maxIterations;
  protected com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell[][] nestedBestRanks;
  protected int currentBestCrossings;
  protected int iterationsWithoutImprovement;
  protected int maxNoImprovementIterations;
  public com.mxgraph.layout.hierarchical.stage.mxMedianHybridCrossingReduction(com.mxgraph.layout.hierarchical.mxHierarchicalLayout);
  public void execute(java.lang.Object);
  protected int calculateRankCrossing(int, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel);
}
Compiled from "mxMedianHybridCrossingReduction.java"
public class com.mxgraph.layout.hierarchical.stage.mxMedianHybridCrossingReduction$MedianCellSorter implements java.lang.Comparable<java.lang.Object> {
  public double medianValue;
  public boolean nudge;
  com.mxgraph.layout.hierarchical.model.mxGraphAbstractHierarchyCell cell;
  final com.mxgraph.layout.hierarchical.stage.mxMedianHybridCrossingReduction this$0;
  protected com.mxgraph.layout.hierarchical.stage.mxMedianHybridCrossingReduction$MedianCellSorter(com.mxgraph.layout.hierarchical.stage.mxMedianHybridCrossingReduction);
  public int compareTo(java.lang.Object);
}
Compiled from "mxMinimumCycleRemover.java"
public class com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover implements com.mxgraph.layout.hierarchical.stage.mxHierarchicalLayoutStage {
  protected com.mxgraph.layout.hierarchical.mxHierarchicalLayout layout;
  public com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover(com.mxgraph.layout.hierarchical.mxHierarchicalLayout);
  public void execute(java.lang.Object);
}
Compiled from "mxMinimumCycleRemover.java"
class com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover$1 implements com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel$CellVisitor {
  final java.util.Set val$seenNodes;
  final java.util.Set val$unseenNodes;
  final com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover this$0;
  com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover$1(com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover, java.util.Set, java.util.Set);
  public void visit(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge, int, int);
}
Compiled from "mxMinimumCycleRemover.java"
class com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover$2 implements com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel$CellVisitor {
  final java.util.Set val$seenNodes;
  final java.util.Set val$unseenNodes;
  final com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover this$0;
  com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover$2(com.mxgraph.layout.hierarchical.stage.mxMinimumCycleRemover, java.util.Set, java.util.Set);
  public void visit(com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyNode, com.mxgraph.layout.hierarchical.model.mxGraphHierarchyEdge, int, int);
}
Compiled from "mxCircleLayout.java"
public class com.mxgraph.layout.mxCircleLayout extends com.mxgraph.layout.mxGraphLayout {
  protected double radius;
  protected boolean moveCircle;
  protected double x0;
  protected double y0;
  protected boolean resetEdges;
  protected boolean disableEdgeStyle;
  public com.mxgraph.layout.mxCircleLayout(com.mxgraph.view.mxGraph);
  public com.mxgraph.layout.mxCircleLayout(com.mxgraph.view.mxGraph, double);
  public double getRadius();
  public void setRadius(double);
  public boolean isMoveCircle();
  public void setMoveCircle(boolean);
  public double getX0();
  public void setX0(double);
  public double getY0();
  public void setY0(double);
  public boolean isResetEdges();
  public void setResetEdges(boolean);
  public boolean isDisableEdgeStyle();
  public void setDisableEdgeStyle(boolean);
  public void execute(java.lang.Object);
  public void circle(java.lang.Object[], double, double, double);
}
Compiled from "mxCompactTreeLayout.java"
public class com.mxgraph.layout.mxCompactTreeLayout extends com.mxgraph.layout.mxGraphLayout {
  protected boolean horizontal;
  protected boolean invert;
  protected boolean resizeParent;
  protected boolean moveTree;
  protected boolean resetEdges;
  protected int levelDistance;
  protected int nodeDistance;
  public com.mxgraph.layout.mxCompactTreeLayout(com.mxgraph.view.mxGraph);
  public com.mxgraph.layout.mxCompactTreeLayout(com.mxgraph.view.mxGraph, boolean);
  public com.mxgraph.layout.mxCompactTreeLayout(com.mxgraph.view.mxGraph, boolean, boolean);
  public boolean isVertexIgnored(java.lang.Object);
  public boolean isHorizontal();
  public void setHorizontal(boolean);
  public boolean isInvert();
  public void setInvert(boolean);
  public boolean isResizeParent();
  public void setResizeParent(boolean);
  public boolean isMoveTree();
  public void setMoveTree(boolean);
  public boolean isResetEdges();
  public void setResetEdges(boolean);
  public int getLevelDistance();
  public void setLevelDistance(int);
  public int getNodeDistance();
  public void setNodeDistance(int);
  public void execute(java.lang.Object);
  public void execute(java.lang.Object, java.lang.Object);
  protected void moveNode(com.mxgraph.layout.mxCompactTreeLayout$TreeNode, double, double);
  protected com.mxgraph.layout.mxCompactTreeLayout$TreeNode dfs(java.lang.Object, java.lang.Object, java.util.Set<java.lang.Object>);
  protected void layout(com.mxgraph.layout.mxCompactTreeLayout$TreeNode);
  protected com.mxgraph.util.mxRectangle horizontalLayout(com.mxgraph.layout.mxCompactTreeLayout$TreeNode, double, double, com.mxgraph.util.mxRectangle);
  protected com.mxgraph.util.mxRectangle verticalLayout(com.mxgraph.layout.mxCompactTreeLayout$TreeNode, java.lang.Object, double, double, com.mxgraph.util.mxRectangle);
  protected void attachParent(com.mxgraph.layout.mxCompactTreeLayout$TreeNode, double);
  protected void layoutLeaf(com.mxgraph.layout.mxCompactTreeLayout$TreeNode);
  protected double join(com.mxgraph.layout.mxCompactTreeLayout$TreeNode);
  protected double merge(com.mxgraph.layout.mxCompactTreeLayout$Polygon, com.mxgraph.layout.mxCompactTreeLayout$Polygon);
  protected double offset(double, double, double, double, double, double);
  protected com.mxgraph.layout.mxCompactTreeLayout$Polyline bridge(com.mxgraph.layout.mxCompactTreeLayout$Polyline, double, double, com.mxgraph.layout.mxCompactTreeLayout$Polyline, double, double);
  protected com.mxgraph.layout.mxCompactTreeLayout$TreeNode createNode(java.lang.Object);
  protected com.mxgraph.util.mxRectangle apply(com.mxgraph.layout.mxCompactTreeLayout$TreeNode, com.mxgraph.util.mxRectangle);
  protected com.mxgraph.layout.mxCompactTreeLayout$Polyline createLine(double, double, com.mxgraph.layout.mxCompactTreeLayout$Polyline);
}
Compiled from "mxCompactTreeLayout.java"
public class com.mxgraph.layout.mxCompactTreeLayout$Polygon {
  protected com.mxgraph.layout.mxCompactTreeLayout$Polyline lowerHead;
  protected com.mxgraph.layout.mxCompactTreeLayout$Polyline lowerTail;
  protected com.mxgraph.layout.mxCompactTreeLayout$Polyline upperHead;
  protected com.mxgraph.layout.mxCompactTreeLayout$Polyline upperTail;
  protected com.mxgraph.layout.mxCompactTreeLayout$Polygon();
}
Compiled from "mxCompactTreeLayout.java"
public class com.mxgraph.layout.mxCompactTreeLayout$Polyline {
  protected double dx;
  protected double dy;
  protected com.mxgraph.layout.mxCompactTreeLayout$Polyline next;
  protected com.mxgraph.layout.mxCompactTreeLayout$Polyline(double, double, com.mxgraph.layout.mxCompactTreeLayout$Polyline);
}
Compiled from "mxCompactTreeLayout.java"
public class com.mxgraph.layout.mxCompactTreeLayout$TreeNode {
  protected java.lang.Object cell;
  protected double x;
  protected double y;
  protected double width;
  protected double height;
  protected double offsetX;
  protected double offsetY;
  protected com.mxgraph.layout.mxCompactTreeLayout$TreeNode child;
  protected com.mxgraph.layout.mxCompactTreeLayout$TreeNode next;
  protected com.mxgraph.layout.mxCompactTreeLayout$Polygon contour;
  public com.mxgraph.layout.mxCompactTreeLayout$TreeNode(java.lang.Object);
}
Compiled from "mxEdgeLabelLayout.java"
public class com.mxgraph.layout.mxEdgeLabelLayout extends com.mxgraph.layout.mxGraphLayout {
  public com.mxgraph.layout.mxEdgeLabelLayout(com.mxgraph.view.mxGraph);
  public void execute(java.lang.Object);
  protected void placeLabels(java.lang.Object[], java.lang.Object[]);
  protected void avoid(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState);
}
Compiled from "mxFastOrganicLayout.java"
public class com.mxgraph.layout.mxFastOrganicLayout extends com.mxgraph.layout.mxGraphLayout {
  protected boolean useInputOrigin;
  protected boolean resetEdges;
  protected boolean disableEdgeStyle;
  protected double forceConstant;
  protected double forceConstantSquared;
  protected double minDistanceLimit;
  protected double minDistanceLimitSquared;
  protected double initialTemp;
  protected double temperature;
  protected int maxIterations;
  protected int iteration;
  protected java.lang.Object[] vertexArray;
  protected double[] dispX;
  protected double[] dispY;
  protected double[][] cellLocation;
  protected double[] radius;
  protected double[] radiusSquared;
  protected boolean[] isMoveable;
  protected int[][] neighbours;
  protected boolean allowedToRun;
  protected java.util.Hashtable<java.lang.Object, java.lang.Integer> indices;
  public com.mxgraph.layout.mxFastOrganicLayout(com.mxgraph.view.mxGraph);
  public boolean isVertexIgnored(java.lang.Object);
  public boolean isUseInputOrigin();
  public void setUseInputOrigin(boolean);
  public boolean isResetEdges();
  public void setResetEdges(boolean);
  public boolean isDisableEdgeStyle();
  public void setDisableEdgeStyle(boolean);
  public int getMaxIterations();
  public void setMaxIterations(int);
  public double getForceConstant();
  public void setForceConstant(double);
  public double getMinDistanceLimit();
  public void setMinDistanceLimit(double);
  public double getInitialTemp();
  public void setInitialTemp(double);
  protected void reduceTemperature();
  public void moveCell(java.lang.Object, double, double);
  public void execute(java.lang.Object);
  protected void calcPositions();
  protected void calcAttraction();
  protected void calcRepulsion();
}
Compiled from "mxGraphLayout.java"
public abstract class com.mxgraph.layout.mxGraphLayout implements com.mxgraph.layout.mxIGraphLayout {
  protected com.mxgraph.view.mxGraph graph;
  protected boolean useBoundingBox;
  public com.mxgraph.layout.mxGraphLayout(com.mxgraph.view.mxGraph);
  public void moveCell(java.lang.Object, double, double);
  public com.mxgraph.view.mxGraph getGraph();
  public java.lang.Object getConstraint(java.lang.Object, java.lang.Object);
  public java.lang.Object getConstraint(java.lang.Object, java.lang.Object, java.lang.Object, boolean);
  public boolean isUseBoundingBox();
  public void setUseBoundingBox(boolean);
  public boolean isVertexMovable(java.lang.Object);
  public boolean isVertexIgnored(java.lang.Object);
  public boolean isEdgeIgnored(java.lang.Object);
  public void setEdgeStyleEnabled(java.lang.Object, boolean);
  public void setOrthogonalEdge(java.lang.Object, boolean);
  public void setEdgePoints(java.lang.Object, java.util.List<com.mxgraph.util.mxPoint>);
  public com.mxgraph.util.mxRectangle getVertexBounds(java.lang.Object);
  public com.mxgraph.util.mxRectangle setVertexLocation(java.lang.Object, double, double);
}
Compiled from "mxIGraphLayout.java"
public interface com.mxgraph.layout.mxIGraphLayout {
  public abstract void execute(java.lang.Object);
  public abstract void moveCell(java.lang.Object, double, double);
}
Compiled from "mxOrganicLayout.java"
public class com.mxgraph.layout.mxOrganicLayout extends com.mxgraph.layout.mxGraphLayout {
  protected boolean isOptimizeEdgeDistance;
  protected boolean isOptimizeEdgeCrossing;
  protected boolean isOptimizeEdgeLength;
  protected boolean isOptimizeBorderLine;
  protected boolean isOptimizeNodeDistribution;
  protected double minMoveRadius;
  protected double moveRadius;
  protected double initialMoveRadius;
  protected double radiusScaleFactor;
  protected double averageNodeArea;
  protected double fineTuningRadius;
  protected int maxIterations;
  protected double edgeDistanceCostFactor;
  protected double edgeCrossingCostFactor;
  protected double nodeDistributionCostFactor;
  protected double borderLineCostFactor;
  protected double edgeLengthCostFactor;
  protected double boundsX;
  protected double boundsY;
  protected double boundsWidth;
  protected double boundsHeight;
  protected int iteration;
  protected int triesPerCell;
  protected double minDistanceLimit;
  protected double minDistanceLimitSquared;
  protected double maxDistanceLimit;
  protected double maxDistanceLimitSquared;
  protected int unchangedEnergyRoundCount;
  protected int unchangedEnergyRoundTermination;
  protected boolean approxNodeDimensions;
  protected com.mxgraph.layout.mxOrganicLayout$CellWrapper[] v;
  protected com.mxgraph.layout.mxOrganicLayout$CellWrapper[] e;
  protected double[] xNormTry;
  protected double[] yNormTry;
  protected boolean isFineTuning;
  public com.mxgraph.layout.mxOrganicLayout(com.mxgraph.view.mxGraph);
  public com.mxgraph.layout.mxOrganicLayout(com.mxgraph.view.mxGraph, java.awt.geom.Rectangle2D);
  public boolean isVertexIgnored(java.lang.Object);
  public void execute(java.lang.Object);
  protected void performRound();
  protected double calcEnergyDelta(int, double, double, double, double, double, double);
  protected double getNodeDistribution(int);
  protected double getBorderline(int);
  protected double getEdgeLengthAffectedEdges(int);
  protected double getEdgeLength(int);
  protected double getEdgeCrossingAffectedEdges(int);
  protected double getEdgeCrossing(int);
  protected double getEdgeDistanceFromNode(int);
  protected double getEdgeDistanceAffectedNodes(int);
  protected double getEdgeDistanceFromEdge(int);
  protected double getAdditionFactorsEnergy(int);
  protected int[] getRelevantEdges(int);
  protected int[] getConnectedEdges(int);
  public java.lang.String toString();
  public double getAverageNodeArea();
  public void setAverageNodeArea(double);
  public double getBorderLineCostFactor();
  public void setBorderLineCostFactor(double);
  public double getEdgeCrossingCostFactor();
  public void setEdgeCrossingCostFactor(double);
  public double getEdgeDistanceCostFactor();
  public void setEdgeDistanceCostFactor(double);
  public double getEdgeLengthCostFactor();
  public void setEdgeLengthCostFactor(double);
  public double getFineTuningRadius();
  public void setFineTuningRadius(double);
  public double getInitialMoveRadius();
  public void setInitialMoveRadius(double);
  public boolean isFineTuning();
  public void setFineTuning(boolean);
  public boolean isOptimizeBorderLine();
  public void setOptimizeBorderLine(boolean);
  public boolean isOptimizeEdgeCrossing();
  public void setOptimizeEdgeCrossing(boolean);
  public boolean isOptimizeEdgeDistance();
  public void setOptimizeEdgeDistance(boolean);
  public boolean isOptimizeEdgeLength();
  public void setOptimizeEdgeLength(boolean);
  public boolean isOptimizeNodeDistribution();
  public void setOptimizeNodeDistribution(boolean);
  public int getMaxIterations();
  public void setMaxIterations(int);
  public double getMinDistanceLimit();
  public void setMinDistanceLimit(double);
  public double getMinMoveRadius();
  public void setMinMoveRadius(double);
  public double getNodeDistributionCostFactor();
  public void setNodeDistributionCostFactor(double);
  public double getRadiusScaleFactor();
  public void setRadiusScaleFactor(double);
  public int getTriesPerCell();
  public void setTriesPerCell(int);
  public int getUnchangedEnergyRoundTermination();
  public void setUnchangedEnergyRoundTermination(int);
  public double getMaxDistanceLimit();
  public void setMaxDistanceLimit(double);
  public boolean isApproxNodeDimensions();
  public void setApproxNodeDimensions(boolean);
}
Compiled from "mxOrganicLayout.java"
public class com.mxgraph.layout.mxOrganicLayout$CellWrapper {
  protected java.lang.Object cell;
  protected int[] relevantEdges;
  protected int[] connectedEdges;
  protected double x;
  protected double y;
  protected double radiusSquared;
  protected double heightSquared;
  protected int source;
  protected int target;
  final com.mxgraph.layout.mxOrganicLayout this$0;
  public com.mxgraph.layout.mxOrganicLayout$CellWrapper(com.mxgraph.layout.mxOrganicLayout, java.lang.Object);
  public int[] getRelevantEdges();
  public void setRelevantEdges(int[]);
  public int[] getConnectedEdges();
  public void setConnectedEdges(int[]);
  public double getX();
  public void setX(double);
  public double getY();
  public void setY(double);
  public double getRadiusSquared();
  public void setRadiusSquared(double);
  public double getHeightSquared();
  public void setHeightSquared(double);
  public int getSource();
  public void setSource(int);
  public int getTarget();
  public void setTarget(int);
  public java.lang.Object getCell();
}
Compiled from "mxParallelEdgeLayout.java"
public class com.mxgraph.layout.mxParallelEdgeLayout extends com.mxgraph.layout.mxGraphLayout {
  protected int spacing;
  public com.mxgraph.layout.mxParallelEdgeLayout(com.mxgraph.view.mxGraph);
  public com.mxgraph.layout.mxParallelEdgeLayout(com.mxgraph.view.mxGraph, int);
  public void execute(java.lang.Object);
  protected java.util.Map<java.lang.String, java.util.List<java.lang.Object>> findParallels(java.lang.Object);
  protected java.lang.String getEdgeId(java.lang.Object);
  protected void layout(java.util.List<java.lang.Object>);
  protected void route(java.lang.Object, double, double);
}
Compiled from "mxPartitionLayout.java"
public class com.mxgraph.layout.mxPartitionLayout extends com.mxgraph.layout.mxGraphLayout {
  protected boolean horizontal;
  protected int spacing;
  protected int border;
  protected boolean resizeVertices;
  public com.mxgraph.layout.mxPartitionLayout(com.mxgraph.view.mxGraph);
  public com.mxgraph.layout.mxPartitionLayout(com.mxgraph.view.mxGraph, boolean);
  public com.mxgraph.layout.mxPartitionLayout(com.mxgraph.view.mxGraph, boolean, int);
  public com.mxgraph.layout.mxPartitionLayout(com.mxgraph.view.mxGraph, boolean, int, int);
  public void moveCell(java.lang.Object, double, double);
  public com.mxgraph.util.mxRectangle getContainerSize();
  public void execute(java.lang.Object);
}
Compiled from "mxStackLayout.java"
public class com.mxgraph.layout.mxStackLayout extends com.mxgraph.layout.mxGraphLayout {
  protected boolean horizontal;
  protected int spacing;
  protected int x0;
  protected int y0;
  protected int border;
  protected boolean fill;
  protected boolean resizeParent;
  protected int wrap;
  public com.mxgraph.layout.mxStackLayout(com.mxgraph.view.mxGraph);
  public com.mxgraph.layout.mxStackLayout(com.mxgraph.view.mxGraph, boolean);
  public com.mxgraph.layout.mxStackLayout(com.mxgraph.view.mxGraph, boolean, int);
  public com.mxgraph.layout.mxStackLayout(com.mxgraph.view.mxGraph, boolean, int, int, int, int);
  public boolean isHorizontal();
  public void moveCell(java.lang.Object, double, double);
  public com.mxgraph.util.mxRectangle getContainerSize();
  public void execute(java.lang.Object);
}
Compiled from "mxCell.java"
public class com.mxgraph.model.mxCell implements com.mxgraph.model.mxICell,java.lang.Cloneable,java.io.Serializable {
  protected java.lang.String id;
  protected java.lang.Object value;
  protected com.mxgraph.model.mxGeometry geometry;
  protected java.lang.String style;
  protected boolean vertex;
  protected boolean edge;
  protected boolean connectable;
  protected boolean visible;
  protected boolean collapsed;
  protected com.mxgraph.model.mxICell parent;
  protected com.mxgraph.model.mxICell source;
  protected com.mxgraph.model.mxICell target;
  protected java.util.List<java.lang.Object> children;
  protected java.util.List<java.lang.Object> edges;
  public com.mxgraph.model.mxCell();
  public com.mxgraph.model.mxCell(java.lang.Object);
  public com.mxgraph.model.mxCell(java.lang.Object, com.mxgraph.model.mxGeometry, java.lang.String);
  public java.lang.String getId();
  public void setId(java.lang.String);
  public java.lang.Object getValue();
  public void setValue(java.lang.Object);
  public com.mxgraph.model.mxGeometry getGeometry();
  public void setGeometry(com.mxgraph.model.mxGeometry);
  public java.lang.String getStyle();
  public void setStyle(java.lang.String);
  public boolean isVertex();
  public void setVertex(boolean);
  public boolean isEdge();
  public void setEdge(boolean);
  public boolean isConnectable();
  public void setConnectable(boolean);
  public boolean isVisible();
  public void setVisible(boolean);
  public boolean isCollapsed();
  public void setCollapsed(boolean);
  public com.mxgraph.model.mxICell getParent();
  public void setParent(com.mxgraph.model.mxICell);
  public com.mxgraph.model.mxICell getSource();
  public void setSource(com.mxgraph.model.mxICell);
  public com.mxgraph.model.mxICell getTarget();
  public void setTarget(com.mxgraph.model.mxICell);
  public com.mxgraph.model.mxICell getTerminal(boolean);
  public com.mxgraph.model.mxICell setTerminal(com.mxgraph.model.mxICell, boolean);
  public int getChildCount();
  public int getIndex(com.mxgraph.model.mxICell);
  public com.mxgraph.model.mxICell getChildAt(int);
  public com.mxgraph.model.mxICell insert(com.mxgraph.model.mxICell);
  public com.mxgraph.model.mxICell insert(com.mxgraph.model.mxICell, int);
  public com.mxgraph.model.mxICell remove(int);
  public com.mxgraph.model.mxICell remove(com.mxgraph.model.mxICell);
  public void removeFromParent();
  public int getEdgeCount();
  public int getEdgeIndex(com.mxgraph.model.mxICell);
  public com.mxgraph.model.mxICell getEdgeAt(int);
  public com.mxgraph.model.mxICell insertEdge(com.mxgraph.model.mxICell, boolean);
  public com.mxgraph.model.mxICell removeEdge(com.mxgraph.model.mxICell, boolean);
  public void removeFromTerminal(boolean);
  public java.lang.String getAttribute(java.lang.String);
  public java.lang.String getAttribute(java.lang.String, java.lang.String);
  public void setAttribute(java.lang.String, java.lang.String);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  protected java.lang.Object cloneValue();
}
Compiled from "mxCellPath.java"
public class com.mxgraph.model.mxCellPath {
  public static java.lang.String PATH_SEPARATOR;
  public com.mxgraph.model.mxCellPath();
  public static java.lang.String create(com.mxgraph.model.mxICell);
  public static java.lang.String getParentPath(java.lang.String);
  public static com.mxgraph.model.mxICell resolve(com.mxgraph.model.mxICell, java.lang.String);
  public static int compare(java.lang.String, java.lang.String);
  static {};
}
Compiled from "mxGeometry.java"
public class com.mxgraph.model.mxGeometry extends com.mxgraph.util.mxRectangle {
  public static transient boolean TRANSLATE_CONTROL_POINTS;
  protected com.mxgraph.util.mxRectangle alternateBounds;
  protected com.mxgraph.util.mxPoint sourcePoint;
  protected com.mxgraph.util.mxPoint targetPoint;
  protected java.util.List<com.mxgraph.util.mxPoint> points;
  protected com.mxgraph.util.mxPoint offset;
  protected boolean relative;
  public com.mxgraph.model.mxGeometry();
  public com.mxgraph.model.mxGeometry(double, double, double, double);
  public com.mxgraph.util.mxRectangle getAlternateBounds();
  public void setAlternateBounds(com.mxgraph.util.mxRectangle);
  public com.mxgraph.util.mxPoint getSourcePoint();
  public void setSourcePoint(com.mxgraph.util.mxPoint);
  public com.mxgraph.util.mxPoint getTargetPoint();
  public void setTargetPoint(com.mxgraph.util.mxPoint);
  public java.util.List<com.mxgraph.util.mxPoint> getPoints();
  public void setPoints(java.util.List<com.mxgraph.util.mxPoint>);
  public com.mxgraph.util.mxPoint getOffset();
  public void setOffset(com.mxgraph.util.mxPoint);
  public boolean isRelative();
  public void setRelative(boolean);
  public void swap();
  public com.mxgraph.util.mxPoint getTerminalPoint(boolean);
  public com.mxgraph.util.mxPoint setTerminalPoint(com.mxgraph.util.mxPoint, boolean);
  public void translate(double, double);
  public java.lang.Object clone();
  static {};
}
Compiled from "mxGraphModel.java"
public class com.mxgraph.model.mxGraphModel extends com.mxgraph.util.mxEventSource implements com.mxgraph.model.mxIGraphModel {
  protected com.mxgraph.model.mxICell root;
  protected java.util.Map<java.lang.String, java.lang.Object> cells;
  protected boolean maintainEdgeParent;
  protected boolean createIds;
  protected int nextId;
  protected transient com.mxgraph.util.mxUndoableEdit currentEdit;
  protected transient int updateLevel;
  protected transient boolean endingUpdate;
  public com.mxgraph.model.mxGraphModel();
  public com.mxgraph.model.mxGraphModel(java.lang.Object);
  public void clear();
  public int getUpdateLevel();
  public java.lang.Object createRoot();
  public java.util.Map<java.lang.String, java.lang.Object> getCells();
  public java.lang.Object getCell(java.lang.String);
  public boolean isMaintainEdgeParent();
  public void setMaintainEdgeParent(boolean);
  public boolean isCreateIds();
  public void setCreateIds(boolean);
  public java.lang.Object getRoot();
  public java.lang.Object setRoot(java.lang.Object);
  protected java.lang.Object rootChanged(java.lang.Object);
  protected com.mxgraph.util.mxUndoableEdit createUndoableEdit();
  public java.lang.Object[] cloneCells(java.lang.Object[], boolean);
  protected java.lang.Object cloneCell(java.lang.Object, java.util.Map<java.lang.Object, java.lang.Object>, boolean) throws java.lang.CloneNotSupportedException;
  protected void restoreClone(java.lang.Object, java.lang.Object, java.util.Map<java.lang.Object, java.lang.Object>);
  public boolean isAncestor(java.lang.Object, java.lang.Object);
  public boolean contains(java.lang.Object);
  public java.lang.Object getParent(java.lang.Object);
  public java.lang.Object add(java.lang.Object, java.lang.Object, int);
  protected void cellAdded(java.lang.Object);
  public java.lang.String createId(java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  protected void cellRemoved(java.lang.Object);
  protected java.lang.Object parentForCellChanged(java.lang.Object, java.lang.Object, int);
  public int getChildCount(java.lang.Object);
  public java.lang.Object getChildAt(java.lang.Object, int);
  public java.lang.Object getTerminal(java.lang.Object, boolean);
  public java.lang.Object setTerminal(java.lang.Object, java.lang.Object, boolean);
  protected java.lang.Object terminalForCellChanged(java.lang.Object, java.lang.Object, boolean);
  public void updateEdgeParents(java.lang.Object);
  public void updateEdgeParents(java.lang.Object, java.lang.Object);
  public void updateEdgeParent(java.lang.Object, java.lang.Object);
  public com.mxgraph.util.mxPoint getOrigin(java.lang.Object);
  public java.lang.Object getNearestCommonAncestor(java.lang.Object, java.lang.Object);
  public int getEdgeCount(java.lang.Object);
  public java.lang.Object getEdgeAt(java.lang.Object, int);
  public boolean isVertex(java.lang.Object);
  public boolean isEdge(java.lang.Object);
  public boolean isConnectable(java.lang.Object);
  public java.lang.Object getValue(java.lang.Object);
  public java.lang.Object setValue(java.lang.Object, java.lang.Object);
  protected java.lang.Object valueForCellChanged(java.lang.Object, java.lang.Object);
  public com.mxgraph.model.mxGeometry getGeometry(java.lang.Object);
  public com.mxgraph.model.mxGeometry setGeometry(java.lang.Object, com.mxgraph.model.mxGeometry);
  protected com.mxgraph.model.mxGeometry geometryForCellChanged(java.lang.Object, com.mxgraph.model.mxGeometry);
  public java.lang.String getStyle(java.lang.Object);
  public java.lang.String setStyle(java.lang.Object, java.lang.String);
  protected java.lang.String styleForCellChanged(java.lang.Object, java.lang.String);
  public boolean isCollapsed(java.lang.Object);
  public boolean setCollapsed(java.lang.Object, boolean);
  protected boolean collapsedStateForCellChanged(java.lang.Object, boolean);
  public boolean isVisible(java.lang.Object);
  public boolean setVisible(java.lang.Object, boolean);
  protected boolean visibleStateForCellChanged(java.lang.Object, boolean);
  public void execute(com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange);
  public void beginUpdate();
  public void endUpdate();
  public void mergeChildren(com.mxgraph.model.mxICell, com.mxgraph.model.mxICell, boolean) throws java.lang.CloneNotSupportedException;
  protected void mergeChildrenImpl(com.mxgraph.model.mxICell, com.mxgraph.model.mxICell, boolean, java.util.Hashtable<java.lang.Object, java.lang.Object>) throws java.lang.CloneNotSupportedException;
  public static int getDirectedEdgeCount(com.mxgraph.model.mxIGraphModel, java.lang.Object, boolean);
  public static int getDirectedEdgeCount(com.mxgraph.model.mxIGraphModel, java.lang.Object, boolean, java.lang.Object);
  public static java.lang.Object[] getEdges(com.mxgraph.model.mxIGraphModel, java.lang.Object);
  public static java.lang.Object[] getConnections(com.mxgraph.model.mxIGraphModel, java.lang.Object);
  public static java.lang.Object[] getIncomingEdges(com.mxgraph.model.mxIGraphModel, java.lang.Object);
  public static java.lang.Object[] getOutgoingEdges(com.mxgraph.model.mxIGraphModel, java.lang.Object);
  public static java.lang.Object[] getEdges(com.mxgraph.model.mxIGraphModel, java.lang.Object, boolean, boolean, boolean);
  public static java.lang.Object[] getEdgesBetween(com.mxgraph.model.mxIGraphModel, java.lang.Object, java.lang.Object);
  public static java.lang.Object[] getEdgesBetween(com.mxgraph.model.mxIGraphModel, java.lang.Object, java.lang.Object, boolean);
  public static java.lang.Object[] getOpposites(com.mxgraph.model.mxIGraphModel, java.lang.Object[], java.lang.Object);
  public static java.lang.Object[] getOpposites(com.mxgraph.model.mxIGraphModel, java.lang.Object[], java.lang.Object, boolean, boolean);
  public static void setTerminals(com.mxgraph.model.mxIGraphModel, java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object[] getChildren(com.mxgraph.model.mxIGraphModel, java.lang.Object);
  public static java.lang.Object[] getChildVertices(com.mxgraph.model.mxIGraphModel, java.lang.Object);
  public static java.lang.Object[] getChildEdges(com.mxgraph.model.mxIGraphModel, java.lang.Object);
  public static java.lang.Object[] getChildCells(com.mxgraph.model.mxIGraphModel, java.lang.Object, boolean, boolean);
  public static java.lang.Object[] getParents(com.mxgraph.model.mxIGraphModel, java.lang.Object[]);
  public static java.lang.Object[] filterCells(java.lang.Object[], com.mxgraph.model.mxGraphModel$Filter);
  public static java.util.Collection<java.lang.Object> getDescendants(com.mxgraph.model.mxIGraphModel, java.lang.Object);
  public static java.util.Collection<java.lang.Object> filterDescendants(com.mxgraph.model.mxIGraphModel, com.mxgraph.model.mxGraphModel$Filter);
  public static java.util.Collection<java.lang.Object> filterDescendants(com.mxgraph.model.mxIGraphModel, com.mxgraph.model.mxGraphModel$Filter, java.lang.Object);
  public static java.lang.Object[] getTopmostCells(com.mxgraph.model.mxIGraphModel, java.lang.Object[]);
}
Compiled from "mxGraphModel.java"
class com.mxgraph.model.mxGraphModel$1 extends com.mxgraph.util.mxUndoableEdit {
  final com.mxgraph.model.mxGraphModel this$0;
  com.mxgraph.model.mxGraphModel$1(com.mxgraph.model.mxGraphModel, java.lang.Object);
  public void dispatch();
}
Compiled from "mxGraphModel.java"
public interface com.mxgraph.model.mxGraphModel$Filter {
  public abstract boolean filter(java.lang.Object);
}
Compiled from "mxGraphModel.java"
public class com.mxgraph.model.mxGraphModel$mxChildChange extends com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange {
  protected java.lang.Object parent;
  protected java.lang.Object previous;
  protected java.lang.Object child;
  protected int index;
  protected int previousIndex;
  public com.mxgraph.model.mxGraphModel$mxChildChange();
  public com.mxgraph.model.mxGraphModel$mxChildChange(com.mxgraph.model.mxGraphModel, java.lang.Object, java.lang.Object);
  public com.mxgraph.model.mxGraphModel$mxChildChange(com.mxgraph.model.mxGraphModel, java.lang.Object, java.lang.Object, int);
  public void setParent(java.lang.Object);
  public java.lang.Object getParent();
  public void setPrevious(java.lang.Object);
  public java.lang.Object getPrevious();
  public void setChild(java.lang.Object);
  public java.lang.Object getChild();
  public void setIndex(int);
  public int getIndex();
  public void setPreviousIndex(int);
  public int getPreviousIndex();
  protected java.lang.Object getTerminal(java.lang.Object, boolean);
  protected void setTerminal(java.lang.Object, java.lang.Object, boolean);
  protected void connect(java.lang.Object, boolean);
  protected int getChildIndex(java.lang.Object, java.lang.Object);
  public void execute();
}
Compiled from "mxGraphModel.java"
public class com.mxgraph.model.mxGraphModel$mxCollapseChange extends com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange {
  protected java.lang.Object cell;
  protected boolean collapsed;
  protected boolean previous;
  public com.mxgraph.model.mxGraphModel$mxCollapseChange();
  public com.mxgraph.model.mxGraphModel$mxCollapseChange(com.mxgraph.model.mxGraphModel, java.lang.Object, boolean);
  public void setCell(java.lang.Object);
  public java.lang.Object getCell();
  public void setCollapsed(boolean);
  public boolean isCollapsed();
  public void setPrevious(boolean);
  public boolean getPrevious();
  public void execute();
}
Compiled from "mxGraphModel.java"
public class com.mxgraph.model.mxGraphModel$mxGeometryChange extends com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange {
  protected java.lang.Object cell;
  protected com.mxgraph.model.mxGeometry geometry;
  protected com.mxgraph.model.mxGeometry previous;
  public com.mxgraph.model.mxGraphModel$mxGeometryChange();
  public com.mxgraph.model.mxGraphModel$mxGeometryChange(com.mxgraph.model.mxGraphModel, java.lang.Object, com.mxgraph.model.mxGeometry);
  public void setCell(java.lang.Object);
  public java.lang.Object getCell();
  public void setGeometry(com.mxgraph.model.mxGeometry);
  public com.mxgraph.model.mxGeometry getGeometry();
  public void setPrevious(com.mxgraph.model.mxGeometry);
  public com.mxgraph.model.mxGeometry getPrevious();
  public void execute();
}
Compiled from "mxGraphModel.java"
public class com.mxgraph.model.mxGraphModel$mxRootChange extends com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange {
  protected java.lang.Object root;
  protected java.lang.Object previous;
  public com.mxgraph.model.mxGraphModel$mxRootChange();
  public com.mxgraph.model.mxGraphModel$mxRootChange(com.mxgraph.model.mxGraphModel, java.lang.Object);
  public void setRoot(java.lang.Object);
  public java.lang.Object getRoot();
  public void setPrevious(java.lang.Object);
  public java.lang.Object getPrevious();
  public void execute();
}
Compiled from "mxGraphModel.java"
public class com.mxgraph.model.mxGraphModel$mxStyleChange extends com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange {
  protected java.lang.Object cell;
  protected java.lang.String style;
  protected java.lang.String previous;
  public com.mxgraph.model.mxGraphModel$mxStyleChange();
  public com.mxgraph.model.mxGraphModel$mxStyleChange(com.mxgraph.model.mxGraphModel, java.lang.Object, java.lang.String);
  public void setCell(java.lang.Object);
  public java.lang.Object getCell();
  public void setStyle(java.lang.String);
  public java.lang.String getStyle();
  public void setPrevious(java.lang.String);
  public java.lang.String getPrevious();
  public void execute();
}
Compiled from "mxGraphModel.java"
public class com.mxgraph.model.mxGraphModel$mxTerminalChange extends com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange {
  protected java.lang.Object cell;
  protected java.lang.Object terminal;
  protected java.lang.Object previous;
  protected boolean source;
  public com.mxgraph.model.mxGraphModel$mxTerminalChange();
  public com.mxgraph.model.mxGraphModel$mxTerminalChange(com.mxgraph.model.mxGraphModel, java.lang.Object, java.lang.Object, boolean);
  public void setCell(java.lang.Object);
  public java.lang.Object getCell();
  public void setTerminal(java.lang.Object);
  public java.lang.Object getTerminal();
  public void setPrevious(java.lang.Object);
  public java.lang.Object getPrevious();
  public void setSource(boolean);
  public boolean isSource();
  public void execute();
}
Compiled from "mxGraphModel.java"
public class com.mxgraph.model.mxGraphModel$mxValueChange extends com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange {
  protected java.lang.Object cell;
  protected java.lang.Object value;
  protected java.lang.Object previous;
  public com.mxgraph.model.mxGraphModel$mxValueChange();
  public com.mxgraph.model.mxGraphModel$mxValueChange(com.mxgraph.model.mxGraphModel, java.lang.Object, java.lang.Object);
  public void setCell(java.lang.Object);
  public java.lang.Object getCell();
  public void setValue(java.lang.Object);
  public java.lang.Object getValue();
  public void setPrevious(java.lang.Object);
  public java.lang.Object getPrevious();
  public void execute();
}
Compiled from "mxGraphModel.java"
public class com.mxgraph.model.mxGraphModel$mxVisibleChange extends com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange {
  protected java.lang.Object cell;
  protected boolean visible;
  protected boolean previous;
  public com.mxgraph.model.mxGraphModel$mxVisibleChange();
  public com.mxgraph.model.mxGraphModel$mxVisibleChange(com.mxgraph.model.mxGraphModel, java.lang.Object, boolean);
  public void setCell(java.lang.Object);
  public java.lang.Object getCell();
  public void setVisible(boolean);
  public boolean isVisible();
  public void setPrevious(boolean);
  public boolean getPrevious();
  public void execute();
}
Compiled from "mxICell.java"
public interface com.mxgraph.model.mxICell {
  public abstract java.lang.String getId();
  public abstract void setId(java.lang.String);
  public abstract java.lang.Object getValue();
  public abstract void setValue(java.lang.Object);
  public abstract com.mxgraph.model.mxGeometry getGeometry();
  public abstract void setGeometry(com.mxgraph.model.mxGeometry);
  public abstract java.lang.String getStyle();
  public abstract void setStyle(java.lang.String);
  public abstract boolean isVertex();
  public abstract boolean isEdge();
  public abstract boolean isConnectable();
  public abstract boolean isVisible();
  public abstract void setVisible(boolean);
  public abstract boolean isCollapsed();
  public abstract void setCollapsed(boolean);
  public abstract com.mxgraph.model.mxICell getParent();
  public abstract void setParent(com.mxgraph.model.mxICell);
  public abstract com.mxgraph.model.mxICell getTerminal(boolean);
  public abstract com.mxgraph.model.mxICell setTerminal(com.mxgraph.model.mxICell, boolean);
  public abstract int getChildCount();
  public abstract int getIndex(com.mxgraph.model.mxICell);
  public abstract com.mxgraph.model.mxICell getChildAt(int);
  public abstract com.mxgraph.model.mxICell insert(com.mxgraph.model.mxICell);
  public abstract com.mxgraph.model.mxICell insert(com.mxgraph.model.mxICell, int);
  public abstract com.mxgraph.model.mxICell remove(int);
  public abstract com.mxgraph.model.mxICell remove(com.mxgraph.model.mxICell);
  public abstract void removeFromParent();
  public abstract int getEdgeCount();
  public abstract int getEdgeIndex(com.mxgraph.model.mxICell);
  public abstract com.mxgraph.model.mxICell getEdgeAt(int);
  public abstract com.mxgraph.model.mxICell insertEdge(com.mxgraph.model.mxICell, boolean);
  public abstract com.mxgraph.model.mxICell removeEdge(com.mxgraph.model.mxICell, boolean);
  public abstract void removeFromTerminal(boolean);
  public abstract java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "mxIGraphModel.java"
public interface com.mxgraph.model.mxIGraphModel {
  public abstract java.lang.Object getRoot();
  public abstract java.lang.Object setRoot(java.lang.Object);
  public abstract java.lang.Object[] cloneCells(java.lang.Object[], boolean);
  public abstract boolean isAncestor(java.lang.Object, java.lang.Object);
  public abstract boolean contains(java.lang.Object);
  public abstract java.lang.Object getParent(java.lang.Object);
  public abstract java.lang.Object add(java.lang.Object, java.lang.Object, int);
  public abstract java.lang.Object remove(java.lang.Object);
  public abstract int getChildCount(java.lang.Object);
  public abstract java.lang.Object getChildAt(java.lang.Object, int);
  public abstract java.lang.Object getTerminal(java.lang.Object, boolean);
  public abstract java.lang.Object setTerminal(java.lang.Object, java.lang.Object, boolean);
  public abstract int getEdgeCount(java.lang.Object);
  public abstract java.lang.Object getEdgeAt(java.lang.Object, int);
  public abstract boolean isVertex(java.lang.Object);
  public abstract boolean isEdge(java.lang.Object);
  public abstract boolean isConnectable(java.lang.Object);
  public abstract java.lang.Object getValue(java.lang.Object);
  public abstract java.lang.Object setValue(java.lang.Object, java.lang.Object);
  public abstract com.mxgraph.model.mxGeometry getGeometry(java.lang.Object);
  public abstract com.mxgraph.model.mxGeometry setGeometry(java.lang.Object, com.mxgraph.model.mxGeometry);
  public abstract java.lang.String getStyle(java.lang.Object);
  public abstract java.lang.String setStyle(java.lang.Object, java.lang.String);
  public abstract boolean isCollapsed(java.lang.Object);
  public abstract boolean setCollapsed(java.lang.Object, boolean);
  public abstract boolean isVisible(java.lang.Object);
  public abstract boolean setVisible(java.lang.Object, boolean);
  public abstract void beginUpdate();
  public abstract void endUpdate();
  public abstract void addListener(java.lang.String, com.mxgraph.util.mxEventSource$mxIEventListener);
  public abstract void removeListener(com.mxgraph.util.mxEventSource$mxIEventListener);
  public abstract void removeListener(com.mxgraph.util.mxEventSource$mxIEventListener, java.lang.String);
}
Compiled from "mxIGraphModel.java"
public abstract class com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange implements com.mxgraph.util.mxUndoableEdit$mxUndoableChange {
  protected com.mxgraph.model.mxIGraphModel model;
  public com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange();
  public com.mxgraph.model.mxIGraphModel$mxAtomicGraphModelChange(com.mxgraph.model.mxIGraphModel);
  public com.mxgraph.model.mxIGraphModel getModel();
  public void setModel(com.mxgraph.model.mxIGraphModel);
  public abstract void execute();
}
Compiled from "mxBase64.java"
public class com.mxgraph.util.mxBase64 {
  public com.mxgraph.util.mxBase64();
  public static final char[] encodeToChar(byte[], boolean);
  public static final byte[] decode(char[]);
  public static final byte[] decodeFast(char[]);
  public static final byte[] encodeToByte(byte[], boolean);
  public static final byte[] decode(byte[]);
  public static final byte[] decodeFast(byte[]);
  public static final java.lang.String encodeToString(byte[], boolean);
  public static final byte[] decode(java.lang.String);
  public static final byte[] decodeFast(java.lang.String);
  static {};
}
Compiled from "mxConstants.java"
public class com.mxgraph.util.mxConstants {
  public static double RAD_PER_DEG;
  public static double DEG_PER_RAD;
  public static double MIN_SCALE_FOR_ROUNDED_LINES;
  public static double DEFAULT_HOTSPOT;
  public static int MIN_HOTSPOT_SIZE;
  public static int MAX_HOTSPOT_SIZE;
  public static java.lang.String NS_SVG;
  public static java.lang.String NS_XHTML;
  public static java.lang.String NS_XLINK;
  public static java.awt.Image EMPTY_IMAGE;
  public static java.lang.String DEFAULT_FONTFAMILIES;
  public static java.lang.String DEFAULT_FONTFAMILY;
  public static int DEFAULT_FONTSIZE;
  public static int DEFAULT_STARTSIZE;
  public static int LINESPACING;
  public static int LABEL_INSET;
  public static double LABEL_SCALE_BUFFER;
  public static int DEFAULT_MARKERSIZE;
  public static int DEFAULT_IMAGESIZE;
  public static java.awt.Color SHADOW_COLOR;
  public static int SHADOW_OFFSETX;
  public static int SHADOW_OFFSETY;
  public static java.lang.String W3C_SHADOWCOLOR;
  public static java.lang.String SVG_SHADOWTRANSFORM;
  public static java.awt.Color DEFAULT_VALID_COLOR;
  public static java.awt.Color DEFAULT_INVALID_COLOR;
  public static float[] DEFAULT_DASHED_PATTERN;
  public static double DEFAULT_LABEL_BUFFER;
  public static java.awt.Color RUBBERBAND_BORDERCOLOR;
  public static java.awt.Color RUBBERBAND_FILLCOLOR;
  public static int HANDLE_SIZE;
  public static int LABEL_HANDLE_SIZE;
  public static java.awt.Color HANDLE_BORDERCOLOR;
  public static java.awt.Color HANDLE_FILLCOLOR;
  public static java.awt.Color LABEL_HANDLE_FILLCOLOR;
  public static java.awt.Color CONNECT_HANDLE_FILLCOLOR;
  public static java.awt.Color LOCKED_HANDLE_FILLCOLOR;
  public static boolean CONNECT_HANDLE_ENABLED;
  public static int CONNECT_HANDLE_SIZE;
  public static java.awt.Color EDGE_SELECTION_COLOR;
  public static java.awt.Color VERTEX_SELECTION_COLOR;
  public static java.awt.Stroke EDGE_SELECTION_STROKE;
  public static java.awt.Stroke VERTEX_SELECTION_STROKE;
  public static java.awt.Stroke PREVIEW_STROKE;
  public static javax.swing.border.Border PREVIEW_BORDER;
  public static int ENTITY_SEGMENT;
  public static double RECTANGLE_ROUNDING_FACTOR;
  public static double LINE_ARCSIZE;
  public static int ARROW_SPACING;
  public static int ARROW_WIDTH;
  public static int ARROW_SIZE;
  public static java.lang.String NONE;
  public static java.lang.String STYLE_PERIMETER;
  public static java.lang.String STYLE_SOURCE_PORT;
  public static java.lang.String STYLE_TARGET_PORT;
  public static java.lang.String STYLE_OPACITY;
  public static java.lang.String STYLE_TEXT_OPACITY;
  public static java.lang.String STYLE_OVERFLOW;
  public static java.lang.String STYLE_ORTHOGONAL;
  public static java.lang.String STYLE_EXIT_X;
  public static java.lang.String STYLE_EXIT_Y;
  public static java.lang.String STYLE_EXIT_PERIMETER;
  public static java.lang.String STYLE_ENTRY_X;
  public static java.lang.String STYLE_ENTRY_Y;
  public static java.lang.String STYLE_ENTRY_PERIMETER;
  public static java.lang.String STYLE_WHITE_SPACE;
  public static java.lang.String STYLE_ROTATION;
  public static java.lang.String STYLE_FILLCOLOR;
  public static java.lang.String STYLE_GRADIENTCOLOR;
  public static java.lang.String STYLE_GRADIENT_DIRECTION;
  public static java.lang.String STYLE_STROKECOLOR;
  public static java.lang.String STYLE_SEPARATORCOLOR;
  public static java.lang.String STYLE_STROKEWIDTH;
  public static java.lang.String STYLE_ALIGN;
  public static java.lang.String STYLE_VERTICAL_ALIGN;
  public static java.lang.String STYLE_LABEL_POSITION;
  public static java.lang.String STYLE_VERTICAL_LABEL_POSITION;
  public static java.lang.String STYLE_IMAGE_ALIGN;
  public static java.lang.String STYLE_IMAGE_VERTICAL_ALIGN;
  public static java.lang.String STYLE_GLASS;
  public static java.lang.String STYLE_IMAGE;
  public static java.lang.String STYLE_IMAGE_WIDTH;
  public static java.lang.String STYLE_IMAGE_HEIGHT;
  public static java.lang.String STYLE_IMAGE_BACKGROUND;
  public static java.lang.String STYLE_IMAGE_BORDER;
  public static java.lang.String STYLE_NOLABEL;
  public static java.lang.String STYLE_NOEDGESTYLE;
  public static java.lang.String STYLE_LABEL_BACKGROUNDCOLOR;
  public static java.lang.String STYLE_LABEL_BORDERCOLOR;
  public static java.lang.String STYLE_INDICATOR_SHAPE;
  public static java.lang.String STYLE_INDICATOR_IMAGE;
  public static java.lang.String STYLE_INDICATOR_COLOR;
  public static java.lang.String STYLE_INDICATOR_GRADIENTCOLOR;
  public static java.lang.String STYLE_INDICATOR_SPACING;
  public static java.lang.String STYLE_INDICATOR_WIDTH;
  public static java.lang.String STYLE_INDICATOR_HEIGHT;
  public static java.lang.String STYLE_SHADOW;
  public static java.lang.String STYLE_SEGMENT;
  public static java.lang.String STYLE_ENDARROW;
  public static java.lang.String STYLE_STARTARROW;
  public static java.lang.String STYLE_ENDSIZE;
  public static java.lang.String STYLE_STARTSIZE;
  public static java.lang.String STYLE_DASHED;
  public static java.lang.String STYLE_DASH_PATTERN;
  public static java.lang.String STYLE_ROUNDED;
  public static java.lang.String STYLE_SOURCE_PERIMETER_SPACING;
  public static java.lang.String STYLE_TARGET_PERIMETER_SPACING;
  public static java.lang.String STYLE_PERIMETER_SPACING;
  public static java.lang.String STYLE_SPACING;
  public static java.lang.String STYLE_SPACING_TOP;
  public static java.lang.String STYLE_SPACING_LEFT;
  public static java.lang.String STYLE_SPACING_BOTTOM;
  public static java.lang.String STYLE_SPACING_RIGHT;
  public static java.lang.String STYLE_HORIZONTAL;
  public static java.lang.String STYLE_DIRECTION;
  public static java.lang.String STYLE_ELBOW;
  public static java.lang.String STYLE_FONTCOLOR;
  public static java.lang.String STYLE_FONTFAMILY;
  public static java.lang.String STYLE_FONTSIZE;
  public static java.lang.String STYLE_FONTSTYLE;
  public static java.lang.String STYLE_SHAPE;
  public static java.lang.String STYLE_EDGE;
  public static java.lang.String STYLE_LOOP;
  public static java.lang.String STYLE_ROUTING_CENTER_X;
  public static java.lang.String STYLE_ROUTING_CENTER_Y;
  public static final int FONT_BOLD;
  public static final int FONT_ITALIC;
  public static final int FONT_UNDERLINE;
  public static final int FONT_SHADOW;
  public static final java.lang.String SHAPE_RECTANGLE;
  public static final java.lang.String SHAPE_ELLIPSE;
  public static final java.lang.String SHAPE_DOUBLE_ELLIPSE;
  public static final java.lang.String SHAPE_RHOMBUS;
  public static final java.lang.String SHAPE_LINE;
  public static final java.lang.String SHAPE_IMAGE;
  public static final java.lang.String SHAPE_ARROW;
  public static final java.lang.String SHAPE_CURVE;
  public static final java.lang.String SHAPE_LABEL;
  public static final java.lang.String SHAPE_CYLINDER;
  public static final java.lang.String SHAPE_SWIMLANE;
  public static final java.lang.String SHAPE_CONNECTOR;
  public static final java.lang.String SHAPE_ACTOR;
  public static final java.lang.String SHAPE_CLOUD;
  public static final java.lang.String SHAPE_TRIANGLE;
  public static final java.lang.String SHAPE_HEXAGON;
  public static final java.lang.String ARROW_CLASSIC;
  public static final java.lang.String ARROW_BLOCK;
  public static final java.lang.String ARROW_OPEN;
  public static final java.lang.String ARROW_OVAL;
  public static final java.lang.String ARROW_DIAMOND;
  public static final java.lang.String ALIGN_LEFT;
  public static final java.lang.String ALIGN_CENTER;
  public static final java.lang.String ALIGN_RIGHT;
  public static final java.lang.String ALIGN_TOP;
  public static final java.lang.String ALIGN_MIDDLE;
  public static final java.lang.String ALIGN_BOTTOM;
  public static final java.lang.String DIRECTION_NORTH;
  public static final java.lang.String DIRECTION_SOUTH;
  public static final java.lang.String DIRECTION_EAST;
  public static final java.lang.String DIRECTION_WEST;
  public static final java.lang.String ELBOW_VERTICAL;
  public static final java.lang.String ELBOW_HORIZONTAL;
  public static final java.lang.String EDGESTYLE_ELBOW;
  public static final java.lang.String EDGESTYLE_ENTITY_RELATION;
  public static final java.lang.String EDGESTYLE_LOOP;
  public static final java.lang.String EDGESTYLE_SIDETOSIDE;
  public static final java.lang.String EDGESTYLE_TOPTOBOTTOM;
  public static final java.lang.String PERIMETER_ELLIPSE;
  public static final java.lang.String PERIMETER_RECTANGLE;
  public static final java.lang.String PERIMETER_RHOMBUS;
  public static final java.lang.String PERIMETER_TRIANGLE;
  public static final java.lang.String PERIMETER_HEXAGON;
  public com.mxgraph.util.mxConstants();
  static {};
}
Compiled from "mxConstants.java"
final class com.mxgraph.util.mxConstants$1 extends javax.swing.border.LineBorder {
  com.mxgraph.util.mxConstants$1(java.awt.Color);
  public void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int);
}
Compiled from "mxCurve.java"
public class com.mxgraph.util.mxCurve {
  protected java.util.Map<java.lang.String, com.mxgraph.util.mxPoint[]> points;
  protected double minXBounds;
  protected double maxXBounds;
  protected double minYBounds;
  protected double maxYBounds;
  protected java.util.Map<java.lang.String, double[]> intervals;
  protected java.util.Map<java.lang.String, java.lang.Double> curveLengths;
  public static java.lang.String CORE_CURVE;
  public static java.lang.String LABEL_CURVE;
  public static com.mxgraph.util.mxLine INVALID_POSITION;
  protected double labelBuffer;
  public java.util.List<com.mxgraph.util.mxPoint> guidePoints;
  protected boolean valid;
  public void setLabelBuffer(double);
  public com.mxgraph.util.mxRectangle getBounds();
  public com.mxgraph.util.mxCurve();
  public com.mxgraph.util.mxCurve(java.util.List<com.mxgraph.util.mxPoint>);
  protected int getLowerIndexOfSegment(java.lang.String, double);
  public com.mxgraph.util.mxLine getCurveParallel(java.lang.String, double);
  public com.mxgraph.util.mxPoint[] getCurveSection(java.lang.String, double, double);
  public boolean intersectsRect(java.awt.Rectangle);
  public com.mxgraph.util.mxPoint intersectsRectPerimeter(java.lang.String, com.mxgraph.util.mxRectangle);
  public double intersectsRectPerimeterDist(java.lang.String, com.mxgraph.util.mxRectangle);
  protected int intersectRectPerimeterSeg(java.lang.String, com.mxgraph.util.mxRectangle);
  protected com.mxgraph.util.mxPoint intersectRectPerimeterPoint(java.lang.String, com.mxgraph.util.mxRectangle, int);
  public com.mxgraph.util.mxRectangle getRelativeFromAbsPoint(com.mxgraph.util.mxPoint, java.lang.String);
  protected void createCoreCurve();
  public void configureLabelCurve();
  public boolean isLabelReversed();
  protected void createLabelCurve();
  protected com.mxgraph.util.mxPoint[] getBaseLabelCurve();
  protected void populateIntervals(java.lang.String);
  public void updateCurve(java.util.List<com.mxgraph.util.mxPoint>);
  public com.mxgraph.util.mxPoint[] getCurvePoints(java.lang.String);
  public double[] getIntervals(java.lang.String);
  public double getCurveLength(java.lang.String);
  protected boolean validateCurve();
  protected void updateBounds(double, double);
  public java.util.List<com.mxgraph.util.mxPoint> getGuidePoints();
  static {};
}
Compiled from "mxEvent.java"
public class com.mxgraph.util.mxEvent {
  public static final java.lang.String DONE;
  public static final java.lang.String ADD_CELLS;
  public static final java.lang.String CELLS_ADDED;
  public static final java.lang.String ALIGN_CELLS;
  public static final java.lang.String CONNECT_CELL;
  public static final java.lang.String CELL_CONNECTED;
  public static final java.lang.String FLIP_EDGE;
  public static final java.lang.String FOLD_CELLS;
  public static final java.lang.String CELLS_FOLDED;
  public static final java.lang.String GROUP_CELLS;
  public static final java.lang.String UNGROUP_CELLS;
  public static final java.lang.String REMOVE_CELLS_FROM_PARENT;
  public static final java.lang.String MOVE_CELLS;
  public static final java.lang.String CELLS_MOVED;
  public static final java.lang.String ORDER_CELLS;
  public static final java.lang.String CELLS_ORDERED;
  public static final java.lang.String REMOVE_CELLS;
  public static final java.lang.String CELLS_REMOVED;
  public static final java.lang.String REPAINT;
  public static final java.lang.String RESIZE_CELLS;
  public static final java.lang.String CELLS_RESIZED;
  public static final java.lang.String SPLIT_EDGE;
  public static final java.lang.String TOGGLE_CELLS;
  public static final java.lang.String CELLS_TOGGLED;
  public static final java.lang.String UPDATE_CELL_SIZE;
  public static final java.lang.String LABEL_CHANGED;
  public static final java.lang.String ADD_OVERLAY;
  public static final java.lang.String REMOVE_OVERLAY;
  public static final java.lang.String BEFORE_PAINT;
  public static final java.lang.String PAINT;
  public static final java.lang.String AFTER_PAINT;
  public static final java.lang.String START_EDITING;
  public static final java.lang.String UNDO;
  public static final java.lang.String REDO;
  public static final java.lang.String UP;
  public static final java.lang.String DOWN;
  public static final java.lang.String SCALE;
  public static final java.lang.String TRANSLATE;
  public static final java.lang.String SCALE_AND_TRANSLATE;
  public static final java.lang.String CHANGE;
  public static final java.lang.String EXECUTE;
  public static final java.lang.String BEFORE_UNDO;
  public static final java.lang.String NOTIFY;
  public static final java.lang.String BEGIN_UPDATE;
  public static final java.lang.String END_UPDATE;
  public static final java.lang.String INSERT;
  public static final java.lang.String ADD;
  public static final java.lang.String CLEAR;
  public static final java.lang.String FIRED;
  public static final java.lang.String SELECT;
  public static java.lang.String MARK;
  public static java.lang.String ROOT;
  public static java.lang.String LAYOUT_CELLS;
  public static java.lang.String START;
  public static java.lang.String CONTINUE;
  public static java.lang.String STOP;
  public com.mxgraph.util.mxEvent();
  static {};
}
Compiled from "mxEventObject.java"
public class com.mxgraph.util.mxEventObject {
  protected java.lang.String name;
  protected java.util.Map<java.lang.String, java.lang.Object> properties;
  protected boolean consumed;
  public com.mxgraph.util.mxEventObject(java.lang.String);
  public com.mxgraph.util.mxEventObject(java.lang.String, java.lang.Object...);
  public java.lang.String getName();
  public java.util.Map<java.lang.String, java.lang.Object> getProperties();
  public java.lang.Object getProperty(java.lang.String);
  public boolean isConsumed();
  public void consume();
}
Compiled from "mxEventSource.java"
public class com.mxgraph.util.mxEventSource {
  protected transient java.util.List<java.lang.Object> eventListeners;
  protected java.lang.Object eventSource;
  protected boolean eventsEnabled;
  public com.mxgraph.util.mxEventSource();
  public com.mxgraph.util.mxEventSource(java.lang.Object);
  public java.lang.Object getEventSource();
  public void setEventSource(java.lang.Object);
  public boolean isEventsEnabled();
  public void setEventsEnabled(boolean);
  public void addListener(java.lang.String, com.mxgraph.util.mxEventSource$mxIEventListener);
  public void removeListener(com.mxgraph.util.mxEventSource$mxIEventListener);
  public void removeListener(com.mxgraph.util.mxEventSource$mxIEventListener, java.lang.String);
  public void fireEvent(com.mxgraph.util.mxEventObject);
  public void fireEvent(com.mxgraph.util.mxEventObject, java.lang.Object);
}
Compiled from "mxEventSource.java"
public interface com.mxgraph.util.mxEventSource$mxIEventListener {
  public abstract void invoke(java.lang.Object, com.mxgraph.util.mxEventObject);
}
Compiled from "mxImage.java"
public class com.mxgraph.util.mxImage implements java.io.Serializable,java.lang.Cloneable {
  protected java.lang.String src;
  protected int width;
  protected int height;
  public com.mxgraph.util.mxImage(java.lang.String, int, int);
  public java.lang.String getSrc();
  public void setSrc(java.lang.String);
  public int getWidth();
  public void setWidth(int);
  public int getHeight();
  public void setHeight(int);
}
Compiled from "mxLightweightLabel.java"
public class com.mxgraph.util.mxLightweightLabel extends javax.swing.JLabel {
  protected static com.mxgraph.util.mxLightweightLabel sharedInstance;
  public static com.mxgraph.util.mxLightweightLabel getSharedInstance();
  public com.mxgraph.util.mxLightweightLabel();
  public void validate();
  public void revalidate();
  public void repaint(long, int, int, int, int);
  public void repaint(java.awt.Rectangle);
  protected void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object);
  public void firePropertyChange(java.lang.String, byte, byte);
  public void firePropertyChange(java.lang.String, char, char);
  public void firePropertyChange(java.lang.String, short, short);
  public void firePropertyChange(java.lang.String, int, int);
  public void firePropertyChange(java.lang.String, long, long);
  public void firePropertyChange(java.lang.String, float, float);
  public void firePropertyChange(java.lang.String, double, double);
  public void firePropertyChange(java.lang.String, boolean, boolean);
  static {};
}
Compiled from "mxLine.java"
public class com.mxgraph.util.mxLine extends com.mxgraph.util.mxPoint {
  protected com.mxgraph.util.mxPoint endPoint;
  public com.mxgraph.util.mxLine(com.mxgraph.util.mxPoint, com.mxgraph.util.mxPoint);
  public com.mxgraph.util.mxPoint getEndPoint();
  public void setEndPoint(com.mxgraph.util.mxPoint);
  public double ptLineDistSq(com.mxgraph.util.mxPoint);
  public double ptSegDistSq(com.mxgraph.util.mxPoint);
}
Compiled from "mxPoint.java"
public class com.mxgraph.util.mxPoint implements java.io.Serializable,java.lang.Cloneable {
  protected double x;
  protected double y;
  public com.mxgraph.util.mxPoint();
  public com.mxgraph.util.mxPoint(java.awt.geom.Point2D);
  public com.mxgraph.util.mxPoint(com.mxgraph.util.mxPoint);
  public com.mxgraph.util.mxPoint(double, double);
  public double getX();
  public void setX(double);
  public double getY();
  public void setY(double);
  public java.awt.Point getPoint();
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
  public java.lang.String toString();
}
Compiled from "mxRectangle.java"
public class com.mxgraph.util.mxRectangle extends com.mxgraph.util.mxPoint {
  protected double width;
  protected double height;
  public com.mxgraph.util.mxRectangle();
  public com.mxgraph.util.mxRectangle(java.awt.geom.Rectangle2D);
  public com.mxgraph.util.mxRectangle(com.mxgraph.util.mxRectangle);
  public com.mxgraph.util.mxRectangle(double, double, double, double);
  public double getWidth();
  public void setWidth(double);
  public double getHeight();
  public void setHeight(double);
  public void add(com.mxgraph.util.mxRectangle);
  public double getCenterX();
  public double getCenterY();
  public void grow(double);
  public boolean contains(double, double);
  public com.mxgraph.util.mxPoint intersectLine(double, double, double, double);
  public java.awt.Rectangle getRectangle();
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
  public java.lang.String toString();
}
Compiled from "mxResources.java"
public class com.mxgraph.util.mxResources {
  protected static java.util.LinkedList<java.util.ResourceBundle> bundles;
  public com.mxgraph.util.mxResources();
  public static java.util.LinkedList<java.util.ResourceBundle> getBundles();
  public static void setBundles(java.util.LinkedList<java.util.ResourceBundle>);
  public static void add(java.lang.String);
  public static void add(java.lang.String, java.util.Locale);
  public static java.lang.String get(java.lang.String);
  public static java.lang.String get(java.lang.String, java.lang.String);
  public static java.lang.String get(java.lang.String, java.lang.String[]);
  public static java.lang.String get(java.lang.String, java.lang.String[], java.lang.String);
  protected static java.lang.String getResource(java.lang.String);
  static {};
}
Compiled from "mxSpline.java"
public class com.mxgraph.util.mxSpline {
  public com.mxgraph.util.mxSpline(java.util.List<com.mxgraph.util.mxPoint>);
  public void Spline2D(double[], double[]);
  protected void init(double[], double[]);
  public com.mxgraph.util.mxPoint getPoint(double);
  public boolean checkValues();
  public double getDx(double);
  public double getDy(double);
  public com.mxgraph.util.mxSpline1D getSplineX();
  public com.mxgraph.util.mxSpline1D getSplineY();
  public double getLength();
}
Compiled from "mxSpline1D.java"
public class com.mxgraph.util.mxSpline1D {
  protected double[] xx;
  protected double[] yy;
  protected double[] a;
  protected double[] b;
  protected double[] c;
  protected double[] d;
  public com.mxgraph.util.mxSpline1D(double[], double[]);
  public void setValues(double[], double[]);
  public double getValue(double);
  public double getFastValue(double);
  public boolean checkValues();
  public double getDx(double);
  public void solve(double[][], double[]);
}
Compiled from "mxUndoManager.java"
public class com.mxgraph.util.mxUndoManager extends com.mxgraph.util.mxEventSource {
  protected int size;
  protected java.util.List<com.mxgraph.util.mxUndoableEdit> history;
  protected int indexOfNextAdd;
  public com.mxgraph.util.mxUndoManager();
  public com.mxgraph.util.mxUndoManager(int);
  public boolean isEmpty();
  public void clear();
  public boolean canUndo();
  public void undo();
  public boolean canRedo();
  public void redo();
  public void undoableEditHappened(com.mxgraph.util.mxUndoableEdit);
  protected void trim();
}
Compiled from "mxUndoableEdit.java"
public class com.mxgraph.util.mxUndoableEdit {
  protected java.lang.Object source;
  protected java.util.List<com.mxgraph.util.mxUndoableEdit$mxUndoableChange> changes;
  protected boolean significant;
  protected boolean undone;
  protected boolean redone;
  public com.mxgraph.util.mxUndoableEdit(java.lang.Object);
  public com.mxgraph.util.mxUndoableEdit(java.lang.Object, boolean);
  public void dispatch();
  public void die();
  public java.lang.Object getSource();
  public java.util.List<com.mxgraph.util.mxUndoableEdit$mxUndoableChange> getChanges();
  public boolean isSignificant();
  public boolean isUndone();
  public boolean isRedone();
  public boolean isEmpty();
  public void add(com.mxgraph.util.mxUndoableEdit$mxUndoableChange);
  public void undo();
  public void redo();
}
Compiled from "mxUndoableEdit.java"
public interface com.mxgraph.util.mxUndoableEdit$mxUndoableChange {
  public abstract void execute();
}
Compiled from "mxUtils.java"
public class com.mxgraph.util.mxUtils {
  protected static transient java.awt.Graphics fontGraphics;
  public com.mxgraph.util.mxUtils();
  public static com.mxgraph.util.mxRectangle getLabelSize(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, boolean, int);
  public static java.lang.String getBodyMarkup(java.lang.String, boolean);
  public static com.mxgraph.util.mxRectangle getLabelPaintBounds(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, boolean, com.mxgraph.util.mxPoint, com.mxgraph.util.mxRectangle, double);
  public static com.mxgraph.util.mxRectangle getScaledLabelBounds(double, double, com.mxgraph.util.mxRectangle, double, double, java.util.Map<java.lang.String, java.lang.Object>, double);
  public static com.mxgraph.util.mxRectangle getSizeForString(java.lang.String, java.awt.Font, int);
  public static java.lang.String[] wordWrap(java.lang.String, java.awt.FontMetrics, int);
  public static com.mxgraph.util.mxRectangle getSizeForHtml(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>);
  public static com.mxgraph.util.mxRectangle getBoundingBox(com.mxgraph.util.mxRectangle, double);
  public static com.mxgraph.util.mxPoint getRotatedPoint(com.mxgraph.util.mxPoint, double, double);
  public static int findNearestSegment(com.mxgraph.view.mxCellState, double, double);
  public static com.mxgraph.util.mxPoint getRotatedPoint(com.mxgraph.util.mxPoint, double, double, com.mxgraph.util.mxPoint);
  public static void drawImageClip(java.awt.Graphics, java.awt.image.BufferedImage, java.awt.image.ImageObserver);
  public static void fillClippedRect(java.awt.Graphics, int, int, int, int);
  public static java.util.List<com.mxgraph.util.mxPoint> translatePoints(java.util.List<com.mxgraph.util.mxPoint>, double, double);
  public static com.mxgraph.util.mxPoint intersection(double, double, double, double, double, double, double, double);
  public static java.lang.Object[] sortCells(java.lang.Object[], boolean);
  public static java.util.Collection<java.lang.Object> sortCells(java.util.Collection<java.lang.Object>, boolean);
  public static boolean contains(java.lang.Object[], java.lang.Object);
  public static int indexOf(java.lang.Object[], java.lang.Object);
  public static java.lang.String getStylename(java.lang.String);
  public static java.lang.String[] getStylenames(java.lang.String);
  public static int indexOfStylename(java.lang.String, java.lang.String);
  public java.lang.String addStylename(java.lang.String, java.lang.String);
  public java.lang.String removeStylename(java.lang.String, java.lang.String);
  public static java.lang.String removeAllStylenames(java.lang.String);
  public static void setCellStyles(com.mxgraph.model.mxIGraphModel, java.lang.Object[], java.lang.String, java.lang.String);
  public static java.lang.String setStyle(java.lang.String, java.lang.String, java.lang.String);
  public static void setCellStyleFlags(com.mxgraph.model.mxIGraphModel, java.lang.Object[], java.lang.String, int, java.lang.Boolean);
  public static java.lang.String setStyleFlag(java.lang.String, java.lang.String, int, java.lang.Boolean);
  public static boolean intersectsHotspot(com.mxgraph.view.mxCellState, int, int, double);
  public static boolean intersectsHotspot(com.mxgraph.view.mxCellState, int, int, double, int, int);
  public static boolean isTrue(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String);
  public static boolean isTrue(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, boolean);
  public static int getInt(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String);
  public static int getInt(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, int);
  public static float getFloat(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String);
  public static float getFloat(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, float);
  public static float[] getFloatArray(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, float[]);
  public static double getDouble(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String);
  public static double getDouble(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, double);
  public static java.lang.String getString(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String);
  public static java.lang.String getString(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.lang.String);
  public static java.awt.Color getColor(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String);
  public static java.awt.Color getColor(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.awt.Color);
  public static java.awt.Font getFont(java.util.Map<java.lang.String, java.lang.Object>);
  public static java.awt.Font getFont(java.util.Map<java.lang.String, java.lang.Object>, double);
  public static java.lang.String hexString(java.awt.Color);
  public static java.awt.Color parseColor(java.lang.String) throws java.lang.NumberFormatException;
  public static java.lang.String getHexColorString(java.awt.Color);
  public static java.lang.String readFile(java.lang.String) throws java.io.IOException;
  public static void writeFile(java.lang.String, java.lang.String) throws java.io.IOException;
  public static java.lang.String getMd5Hash(java.lang.String);
  public static boolean isNode(java.lang.Object, java.lang.String);
  public static boolean isNode(java.lang.Object, java.lang.String, java.lang.String, java.lang.String);
  public static void setAntiAlias(java.awt.Graphics2D, boolean, boolean);
  public static void clearRect(java.awt.Graphics2D, java.awt.Rectangle, java.awt.Color);
  public static java.awt.image.BufferedImage createBufferedImage(int, int, java.awt.Color) throws java.lang.OutOfMemoryError;
  public static org.w3c.dom.Document createDocument();
  public static org.w3c.dom.Document createSvgDocument(int, int);
  public static org.w3c.dom.Document createVmlDocument();
  public static org.w3c.dom.Document createHtmlDocument();
  public static java.lang.String createHtmlDocument(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String);
  public static java.lang.String createHtmlDocument(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, double);
  public static javax.swing.text.html.HTMLDocument createHtmlDocumentObject(java.util.Map<java.lang.String, java.lang.Object>, double);
  public static org.w3c.dom.Element createTable(org.w3c.dom.Document, java.lang.String, int, int, int, int, double, java.util.Map<java.lang.String, java.lang.Object>);
  public static java.awt.Image loadImage(java.lang.String);
  public static org.w3c.dom.Document loadDocument(java.lang.String);
  public static org.w3c.dom.Document parse(java.lang.String);
  public static org.w3c.dom.Document parseXml(java.lang.String);
  public static java.lang.Object eval(java.lang.String);
  public static org.w3c.dom.Node findNode(org.w3c.dom.Node, java.lang.String, java.lang.String);
  public static org.w3c.dom.Node selectSingleNode(org.w3c.dom.Document, java.lang.String);
  public static java.lang.String htmlEntities(java.lang.String);
  public static java.lang.String getXml(org.w3c.dom.Node);
  public static java.lang.String getPrettyXml(org.w3c.dom.Node);
  public static java.lang.String getPrettyXml(org.w3c.dom.Node, java.lang.String, java.lang.String);
  static {};
}
Compiled from "mxUtils.java"
final class com.mxgraph.util.mxUtils$1 implements java.util.Comparator<java.lang.Object> {
  final boolean val$ascending;
  com.mxgraph.util.mxUtils$1(boolean);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "mxCellState.java"
public class com.mxgraph.view.mxCellState extends com.mxgraph.util.mxRectangle {
  protected com.mxgraph.view.mxGraphView view;
  protected java.lang.Object cell;
  protected java.util.Map<java.lang.String, java.lang.Object> style;
  protected com.mxgraph.util.mxPoint origin;
  protected java.util.List<com.mxgraph.util.mxPoint> absolutePoints;
  protected com.mxgraph.util.mxPoint absoluteOffset;
  protected double terminalDistance;
  protected double length;
  protected double[] segments;
  protected com.mxgraph.util.mxRectangle labelBounds;
  protected com.mxgraph.util.mxRectangle boundingBox;
  protected boolean invalid;
  public com.mxgraph.view.mxCellState();
  public com.mxgraph.view.mxCellState(com.mxgraph.view.mxGraphView, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>);
  public boolean isInvalid();
  public void setInvalid(boolean);
  public com.mxgraph.view.mxGraphView getView();
  public void setView(com.mxgraph.view.mxGraphView);
  public java.lang.Object getCell();
  public void setCell(java.lang.Object);
  public java.util.Map<java.lang.String, java.lang.Object> getStyle();
  public void setStyle(java.util.Map<java.lang.String, java.lang.Object>);
  public com.mxgraph.util.mxPoint getOrigin();
  public void setOrigin(com.mxgraph.util.mxPoint);
  public com.mxgraph.util.mxPoint getAbsolutePoint(int);
  public com.mxgraph.util.mxPoint setAbsolutePoint(int, com.mxgraph.util.mxPoint);
  public int getAbsolutePointCount();
  public java.util.List<com.mxgraph.util.mxPoint> getAbsolutePoints();
  public void setAbsolutePoints(java.util.List<com.mxgraph.util.mxPoint>);
  public com.mxgraph.util.mxPoint getAbsoluteOffset();
  public void setAbsoluteOffset(com.mxgraph.util.mxPoint);
  public double getTerminalDistance();
  public void setTerminalDistance(double);
  public double getLength();
  public void setLength(double);
  public double[] getSegments();
  public void setSegments(double[]);
  public com.mxgraph.util.mxRectangle getLabelBounds();
  public void setLabelBounds(com.mxgraph.util.mxRectangle);
  public com.mxgraph.util.mxRectangle getBoundingBox();
  public void setBoundingBox(com.mxgraph.util.mxRectangle);
  public com.mxgraph.util.mxRectangle getPerimeterBounds();
  public com.mxgraph.util.mxRectangle getPerimeterBounds(double);
  public void setAbsoluteTerminalPoint(com.mxgraph.util.mxPoint, boolean);
  public java.lang.Object clone();
}
Compiled from "mxConnectionConstraint.java"
public class com.mxgraph.view.mxConnectionConstraint {
  protected com.mxgraph.util.mxPoint point;
  protected boolean perimeter;
  public com.mxgraph.view.mxConnectionConstraint();
  public com.mxgraph.view.mxConnectionConstraint(com.mxgraph.util.mxPoint);
  public com.mxgraph.view.mxConnectionConstraint(com.mxgraph.util.mxPoint, boolean);
  public com.mxgraph.util.mxPoint getPoint();
  public void setPoint(com.mxgraph.util.mxPoint);
  public boolean isPerimeter();
  public void setPerimeter(boolean);
}
Compiled from "mxEdgeStyle.java"
public class com.mxgraph.view.mxEdgeStyle {
  public static com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction EntityRelation;
  public static com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction Loop;
  public static com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction ElbowConnector;
  public static com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction SideToSide;
  public static com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction TopToBottom;
  public com.mxgraph.view.mxEdgeStyle();
  static {};
}
Compiled from "mxEdgeStyle.java"
final class com.mxgraph.view.mxEdgeStyle$1 implements com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction {
  com.mxgraph.view.mxEdgeStyle$1();
  public void apply(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, java.util.List<com.mxgraph.util.mxPoint>, java.util.List<com.mxgraph.util.mxPoint>);
}
Compiled from "mxEdgeStyle.java"
final class com.mxgraph.view.mxEdgeStyle$2 implements com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction {
  com.mxgraph.view.mxEdgeStyle$2();
  public void apply(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, java.util.List<com.mxgraph.util.mxPoint>, java.util.List<com.mxgraph.util.mxPoint>);
}
Compiled from "mxEdgeStyle.java"
final class com.mxgraph.view.mxEdgeStyle$3 implements com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction {
  com.mxgraph.view.mxEdgeStyle$3();
  public void apply(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, java.util.List<com.mxgraph.util.mxPoint>, java.util.List<com.mxgraph.util.mxPoint>);
}
Compiled from "mxEdgeStyle.java"
final class com.mxgraph.view.mxEdgeStyle$4 implements com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction {
  com.mxgraph.view.mxEdgeStyle$4();
  public void apply(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, java.util.List<com.mxgraph.util.mxPoint>, java.util.List<com.mxgraph.util.mxPoint>);
}
Compiled from "mxEdgeStyle.java"
final class com.mxgraph.view.mxEdgeStyle$5 implements com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction {
  com.mxgraph.view.mxEdgeStyle$5();
  public void apply(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, java.util.List<com.mxgraph.util.mxPoint>, java.util.List<com.mxgraph.util.mxPoint>);
}
Compiled from "mxEdgeStyle.java"
public interface com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction {
  public abstract void apply(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, java.util.List<com.mxgraph.util.mxPoint>, java.util.List<com.mxgraph.util.mxPoint>);
}
Compiled from "mxGraph.java"
public class com.mxgraph.view.mxGraph extends com.mxgraph.util.mxEventSource {
  public static final java.lang.String VERSION;
  protected java.beans.PropertyChangeSupport changeSupport;
  protected com.mxgraph.model.mxIGraphModel model;
  protected com.mxgraph.view.mxGraphView view;
  protected com.mxgraph.view.mxStylesheet stylesheet;
  protected com.mxgraph.view.mxGraphSelectionModel selectionModel;
  protected int gridSize;
  protected boolean gridEnabled;
  protected double defaultOverlap;
  protected java.lang.Object defaultParent;
  protected java.lang.String alternateEdgeStyle;
  protected boolean enabled;
  protected boolean cellsLocked;
  protected boolean cellsEditable;
  protected boolean cellsResizable;
  protected boolean cellsMovable;
  protected boolean cellsBendable;
  protected boolean cellsSelectable;
  protected boolean cellsDeletable;
  protected boolean cellsCloneable;
  protected boolean cellsDisconnectable;
  protected boolean labelsClipped;
  protected boolean edgeLabelsMovable;
  protected boolean vertexLabelsMovable;
  protected boolean dropEnabled;
  protected boolean splitEnabled;
  protected boolean autoSizeCells;
  protected com.mxgraph.util.mxRectangle maximumGraphBounds;
  protected com.mxgraph.util.mxRectangle minimumGraphSize;
  protected int border;
  protected boolean keepEdgesInForeground;
  protected boolean keepEdgesInBackground;
  protected boolean collapseToPreferredSize;
  protected boolean allowNegativeCoordinates;
  protected boolean constrainChildren;
  protected boolean extendParents;
  protected boolean extendParentsOnAdd;
  protected boolean resetViewOnRootChange;
  protected boolean resetEdgesOnResize;
  protected boolean resetEdgesOnMove;
  protected boolean resetEdgesOnConnect;
  protected boolean allowLoops;
  protected com.mxgraph.view.mxMultiplicity[] multiplicities;
  protected com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction defaultLoopStyle;
  protected boolean multigraph;
  protected boolean connectableEdges;
  protected boolean allowDanglingEdges;
  protected boolean cloneInvalidEdges;
  protected boolean disconnectOnMove;
  protected boolean labelsVisible;
  protected boolean htmlLabels;
  protected boolean swimlaneNesting;
  protected int changesRepaintThreshold;
  protected boolean autoOrigin;
  protected com.mxgraph.util.mxPoint origin;
  protected com.mxgraph.util.mxEventSource$mxIEventListener fullRepaintHandler;
  protected com.mxgraph.util.mxEventSource$mxIEventListener graphModelChangeHandler;
  public com.mxgraph.view.mxGraph();
  public com.mxgraph.view.mxGraph(com.mxgraph.model.mxIGraphModel);
  public com.mxgraph.view.mxGraph(com.mxgraph.view.mxStylesheet);
  public com.mxgraph.view.mxGraph(com.mxgraph.model.mxIGraphModel, com.mxgraph.view.mxStylesheet);
  protected com.mxgraph.view.mxGraphSelectionModel createSelectionModel();
  protected com.mxgraph.view.mxStylesheet createStylesheet();
  protected com.mxgraph.view.mxGraphView createGraphView();
  public com.mxgraph.model.mxIGraphModel getModel();
  public void setModel(com.mxgraph.model.mxIGraphModel);
  public com.mxgraph.view.mxGraphView getView();
  public void setView(com.mxgraph.view.mxGraphView);
  public com.mxgraph.view.mxStylesheet getStylesheet();
  public void setStylesheet(com.mxgraph.view.mxStylesheet);
  public java.lang.Object[] getSelectionCellsForChanges(java.util.List<com.mxgraph.util.mxUndoableEdit$mxUndoableChange>);
  public com.mxgraph.util.mxRectangle graphModelChanged(com.mxgraph.model.mxIGraphModel, java.util.List<com.mxgraph.util.mxUndoableEdit$mxUndoableChange>);
  protected void updateOrigin();
  public java.lang.Object[] getRemovedCellsForChanges(java.util.List<com.mxgraph.util.mxUndoableEdit$mxUndoableChange>);
  public com.mxgraph.util.mxRectangle processChanges(java.util.List<com.mxgraph.util.mxUndoableEdit$mxUndoableChange>, boolean, boolean);
  public com.mxgraph.util.mxRectangle processChange(com.mxgraph.util.mxUndoableEdit$mxUndoableChange, boolean, boolean);
  protected void removeStateForCell(java.lang.Object);
  public java.util.Map<java.lang.String, java.lang.Object> getCellStyle(java.lang.Object);
  public java.lang.Object[] setCellStyle(java.lang.String);
  public java.lang.Object[] setCellStyle(java.lang.String, java.lang.Object[]);
  public java.lang.Object toggleCellStyle(java.lang.String, boolean, java.lang.Object);
  public java.lang.Object[] toggleCellStyles(java.lang.String, boolean);
  public java.lang.Object[] toggleCellStyles(java.lang.String, boolean, java.lang.Object[]);
  public java.lang.Object[] setCellStyles(java.lang.String, java.lang.String);
  public java.lang.Object[] setCellStyles(java.lang.String, java.lang.String, java.lang.Object[]);
  public java.lang.Object[] toggleCellStyleFlags(java.lang.String, int);
  public java.lang.Object[] toggleCellStyleFlags(java.lang.String, int, java.lang.Object[]);
  public java.lang.Object[] setCellStyleFlags(java.lang.String, int, boolean);
  public java.lang.Object[] setCellStyleFlags(java.lang.String, int, java.lang.Boolean, java.lang.Object[]);
  public java.lang.Object[] alignCells(java.lang.String);
  public java.lang.Object[] alignCells(java.lang.String, java.lang.Object[]);
  public java.lang.Object[] alignCells(java.lang.String, java.lang.Object[], java.lang.Object);
  public java.lang.Object flipEdge(java.lang.Object);
  public java.lang.Object[] orderCells(boolean);
  public java.lang.Object[] orderCells(boolean, java.lang.Object[]);
  public void cellsOrdered(java.lang.Object[], boolean);
  public java.lang.Object groupCells();
  public java.lang.Object groupCells(java.lang.Object);
  public java.lang.Object groupCells(java.lang.Object, double);
  public java.lang.Object groupCells(java.lang.Object, double, java.lang.Object[]);
  public java.lang.Object[] getCellsForGroup(java.lang.Object[]);
  public com.mxgraph.util.mxRectangle getBoundsForGroup(java.lang.Object, java.lang.Object[], double);
  public java.lang.Object createGroupCell(java.lang.Object[]);
  public java.lang.Object[] ungroupCells();
  public java.lang.Object[] ungroupCells(java.lang.Object[]);
  public java.lang.Object[] removeCellsFromParent();
  public java.lang.Object[] removeCellsFromParent(java.lang.Object[]);
  public java.lang.Object[] updateGroupBounds();
  public java.lang.Object[] updateGroupBounds(java.lang.Object[]);
  public java.lang.Object[] updateGroupBounds(java.lang.Object[], int);
  public java.lang.Object[] updateGroupBounds(java.lang.Object[], int, boolean);
  public java.lang.Object[] cloneCells(java.lang.Object[]);
  public java.lang.Object[] cloneCells(java.lang.Object[], boolean);
  public java.lang.Object insertVertex(java.lang.Object, java.lang.String, java.lang.Object, double, double, double, double);
  public java.lang.Object insertVertex(java.lang.Object, java.lang.String, java.lang.Object, double, double, double, double, java.lang.String);
  public java.lang.Object createVertex(java.lang.Object, java.lang.String, java.lang.Object, double, double, double, double, java.lang.String);
  public java.lang.Object insertEdge(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object insertEdge(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.String);
  public java.lang.Object createEdge(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.String);
  public java.lang.Object addEdge(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Integer);
  public java.lang.Object addCell(java.lang.Object);
  public java.lang.Object addCell(java.lang.Object, java.lang.Object);
  public java.lang.Object addCell(java.lang.Object, java.lang.Object, java.lang.Integer, java.lang.Object, java.lang.Object);
  public java.lang.Object[] addCells(java.lang.Object[]);
  public java.lang.Object[] addCells(java.lang.Object[], java.lang.Object);
  public java.lang.Object[] addCells(java.lang.Object[], java.lang.Object, java.lang.Integer);
  public java.lang.Object[] addCells(java.lang.Object[], java.lang.Object, java.lang.Integer, java.lang.Object, java.lang.Object);
  public void cellsAdded(java.lang.Object[], java.lang.Object, java.lang.Integer, java.lang.Object, java.lang.Object, boolean);
  public java.lang.Object[] removeCells();
  public java.lang.Object[] removeCells(java.lang.Object[]);
  public java.lang.Object[] removeCells(java.lang.Object[], boolean);
  public void cellsRemoved(java.lang.Object[]);
  public java.lang.Object splitEdge(java.lang.Object, java.lang.Object[]);
  public java.lang.Object splitEdge(java.lang.Object, java.lang.Object[], double, double);
  public java.lang.Object splitEdge(java.lang.Object, java.lang.Object[], java.lang.Object, double, double);
  public java.lang.Object[] toggleCells(boolean);
  public java.lang.Object[] toggleCells(boolean, java.lang.Object[]);
  public java.lang.Object[] toggleCells(boolean, java.lang.Object[], boolean);
  public void cellsToggled(java.lang.Object[], boolean);
  public java.lang.Object[] foldCells(boolean);
  public java.lang.Object[] foldCells(boolean, boolean);
  public java.lang.Object[] foldCells(boolean, boolean, java.lang.Object[]);
  public void cellsFolded(java.lang.Object[], boolean, boolean);
  public void swapBounds(java.lang.Object, boolean);
  public void updateAlternateBounds(java.lang.Object, com.mxgraph.model.mxGeometry, boolean);
  public java.lang.Object[] addAllEdges(java.lang.Object[]);
  public java.lang.Object[] getAllEdges(java.lang.Object[]);
  public java.lang.Object updateCellSize(java.lang.Object);
  public java.lang.Object updateCellSize(java.lang.Object, boolean);
  public void cellSizeUpdated(java.lang.Object, boolean);
  public com.mxgraph.util.mxRectangle getPreferredSizeForCell(java.lang.Object);
  public java.lang.Object resizeCell(java.lang.Object, com.mxgraph.util.mxRectangle);
  public java.lang.Object[] resizeCells(java.lang.Object[], com.mxgraph.util.mxRectangle[]);
  public void cellsResized(java.lang.Object[], com.mxgraph.util.mxRectangle[]);
  public void extendParent(java.lang.Object);
  public java.lang.Object[] moveCells(java.lang.Object[], double, double);
  public java.lang.Object[] moveCells(java.lang.Object[], double, double, boolean);
  public java.lang.Object[] moveCells(java.lang.Object[], double, double, boolean, java.lang.Object, java.awt.Point);
  public void cellsMoved(java.lang.Object[], double, double, boolean, boolean);
  public void translateCell(java.lang.Object, double, double);
  public com.mxgraph.util.mxRectangle getCellContainmentArea(java.lang.Object);
  public com.mxgraph.util.mxRectangle getMaximumGraphBounds();
  public void setMaximumGraphBounds(com.mxgraph.util.mxRectangle);
  public void constrainChild(java.lang.Object);
  public void resetEdges(java.lang.Object[]);
  public java.lang.Object resetEdge(java.lang.Object);
  public com.mxgraph.view.mxConnectionConstraint[] getAllConnectionConstraints(com.mxgraph.view.mxCellState, boolean);
  public com.mxgraph.view.mxConnectionConstraint getConnectionConstraint(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, boolean);
  public void setConnectionConstraint(java.lang.Object, java.lang.Object, boolean, com.mxgraph.view.mxConnectionConstraint);
  public com.mxgraph.util.mxPoint getConnectionPoint(com.mxgraph.view.mxCellState, com.mxgraph.view.mxConnectionConstraint);
  public java.lang.Object connectCell(java.lang.Object, java.lang.Object, boolean);
  public java.lang.Object connectCell(java.lang.Object, java.lang.Object, boolean, com.mxgraph.view.mxConnectionConstraint);
  public void cellConnected(java.lang.Object, java.lang.Object, boolean, com.mxgraph.view.mxConnectionConstraint);
  public void disconnectGraph(java.lang.Object[]);
  public java.lang.Object getCurrentRoot();
  public com.mxgraph.util.mxPoint getTranslateForRoot(java.lang.Object);
  public boolean isPort(java.lang.Object);
  public java.lang.Object getTerminalForPort(java.lang.Object, boolean);
  public com.mxgraph.util.mxPoint getChildOffsetForCell(java.lang.Object);
  public void enterGroup();
  public void enterGroup(java.lang.Object);
  public void exitGroup();
  public void home();
  public boolean isValidRoot(java.lang.Object);
  public com.mxgraph.util.mxRectangle getGraphBounds();
  public com.mxgraph.util.mxRectangle getCellBounds(java.lang.Object);
  public com.mxgraph.util.mxRectangle getCellBounds(java.lang.Object, boolean);
  public com.mxgraph.util.mxRectangle getCellBounds(java.lang.Object, boolean, boolean);
  public com.mxgraph.util.mxRectangle getBoundingBoxFromGeometry(java.lang.Object[]);
  public com.mxgraph.util.mxRectangle getBoundingBox(java.lang.Object);
  public com.mxgraph.util.mxRectangle getBoundingBox(java.lang.Object, boolean);
  public com.mxgraph.util.mxRectangle getBoundingBox(java.lang.Object, boolean, boolean);
  public com.mxgraph.util.mxRectangle getPaintBounds(java.lang.Object[]);
  public com.mxgraph.util.mxRectangle getBoundsForCells(java.lang.Object[], boolean, boolean, boolean);
  public com.mxgraph.util.mxRectangle getCellBounds(java.lang.Object, boolean, boolean, boolean);
  public void refresh();
  public void repaint();
  public void repaint(com.mxgraph.util.mxRectangle);
  public double snap(double);
  public com.mxgraph.model.mxGeometry getCellGeometry(java.lang.Object);
  public boolean isCellVisible(java.lang.Object);
  public boolean isCellCollapsed(java.lang.Object);
  public boolean isCellConnectable(java.lang.Object);
  public boolean isOrthogonal(com.mxgraph.view.mxCellState);
  public boolean isLoop(com.mxgraph.view.mxCellState);
  public void setMultiplicities(com.mxgraph.view.mxMultiplicity[]);
  public com.mxgraph.view.mxMultiplicity[] getMultiplicities();
  public boolean isEdgeValid(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.String getEdgeValidationError(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.String validateEdge(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.String getCellValidationError(java.lang.Object);
  public java.lang.String validateCell(java.lang.Object, java.util.Hashtable<java.lang.Object, java.lang.Object>);
  public boolean isLabelsVisible();
  public void setLabelsVisible(boolean);
  public void setHtmlLabels(boolean);
  public boolean isHtmlLabels();
  public java.lang.String convertValueToString(java.lang.Object);
  public java.lang.String getLabel(java.lang.Object);
  public void cellLabelChanged(java.lang.Object, java.lang.Object, boolean);
  public boolean isHtmlLabel(java.lang.Object);
  public java.lang.String getToolTipForCell(java.lang.Object);
  public com.mxgraph.util.mxRectangle getStartSize(java.lang.Object);
  public java.lang.String getImage(com.mxgraph.view.mxCellState);
  public int getBorder();
  public void setBorder(int);
  public com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction getDefaultLoopStyle();
  public void setDefaultLoopStyle(com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction);
  public boolean isSwimlane(java.lang.Object);
  public boolean isCellLocked(java.lang.Object);
  public boolean isCellsLocked();
  public void setCellsLocked(boolean);
  public boolean isCellEditable(java.lang.Object);
  public boolean isCellsEditable();
  public void setCellsEditable(boolean);
  public boolean isCellResizable(java.lang.Object);
  public boolean isCellsResizable();
  public void setCellsResizable(boolean);
  public java.lang.Object[] getMovableCells(java.lang.Object[]);
  public boolean isCellMovable(java.lang.Object);
  public boolean isCellsMovable();
  public void setCellsMovable(boolean);
  public boolean isCellBendable(java.lang.Object);
  public boolean isCellsBendable();
  public void setCellsBendable(boolean);
  public boolean isCellSelectable(java.lang.Object);
  public boolean isCellsSelectable();
  public void setCellsSelectable(boolean);
  public java.lang.Object[] getDeletableCells(java.lang.Object[]);
  public boolean isCellDeletable(java.lang.Object);
  public boolean isCellsDeletable();
  public void setCellsDeletable(boolean);
  public java.lang.Object[] getCloneableCells(java.lang.Object[]);
  public boolean isCellCloneable(java.lang.Object);
  public boolean isCellsCloneable();
  public void setCellsCloneable(boolean);
  public boolean isCellDisconnectable(java.lang.Object, java.lang.Object, boolean);
  public boolean isCellsDisconnectable();
  public void setCellsDisconnectable(boolean);
  public boolean isLabelClipped(java.lang.Object);
  public boolean isLabelsClipped();
  public void setLabelsClipped(boolean);
  public boolean isLabelMovable(java.lang.Object);
  public boolean isVertexLabelsMovable();
  public void setVertexLabelsMovable(boolean);
  public boolean isEdgeLabelsMovable();
  public void setEdgeLabelsMovable(boolean);
  public boolean isEnabled();
  public void setEnabled(boolean);
  public boolean isDropEnabled();
  public void setDropEnabled(boolean);
  public boolean isSplitEnabled();
  public void setSplitEnabled(boolean);
  public boolean isMultigraph();
  public void setMultigraph(boolean);
  public boolean isSwimlaneNesting();
  public void setSwimlaneNesting(boolean);
  public boolean isAllowDanglingEdges();
  public void setAllowDanglingEdges(boolean);
  public boolean isCloneInvalidEdges();
  public void setCloneInvalidEdges(boolean);
  public boolean isDisconnectOnMove();
  public void setDisconnectOnMove(boolean);
  public boolean isAllowLoops();
  public void setAllowLoops(boolean);
  public boolean isConnectableEdges();
  public void setConnectableEdges(boolean);
  public boolean isResetEdgesOnMove();
  public void setResetEdgesOnMove(boolean);
  public boolean isResetViewOnRootChange();
  public void setResetViewOnRootChange(boolean);
  public boolean isResetEdgesOnResize();
  public void setResetEdgesOnResize(boolean);
  public boolean isResetEdgesOnConnect();
  public void setResetEdgesOnConnect(boolean);
  public boolean isAutoSizeCell(java.lang.Object);
  public boolean isAutoSizeCells();
  public void setAutoSizeCells(boolean);
  public boolean isExtendParent(java.lang.Object);
  public boolean isExtendParents();
  public void setExtendParents(boolean);
  public boolean isExtendParentsOnAdd();
  public void setExtendParentsOnAdd(boolean);
  public boolean isConstrainChild(java.lang.Object);
  public boolean isConstrainChildren();
  public void setConstrainChildren(boolean);
  public boolean isAutoOrigin();
  public void setAutoOrigin(boolean);
  public com.mxgraph.util.mxPoint getOrigin();
  public void setOrigin(com.mxgraph.util.mxPoint);
  public int getChangesRepaintThreshold();
  public void setChangesRepaintThreshold(int);
  public boolean isAllowNegativeCoordinates();
  public void setAllowNegativeCoordinates(boolean);
  public boolean isCollapseToPreferredSize();
  public void setCollapseToPreferredSize(boolean);
  public boolean isKeepEdgesInForeground();
  public void setKeepEdgesInForeground(boolean);
  public boolean isKeepEdgesInBackground();
  public void setKeepEdgesInBackground(boolean);
  public boolean isValidSource(java.lang.Object);
  public boolean isValidTarget(java.lang.Object);
  public boolean isValidConnection(java.lang.Object, java.lang.Object);
  public com.mxgraph.util.mxRectangle getMinimumGraphSize();
  public void setMinimumGraphSize(com.mxgraph.util.mxRectangle);
  public double getOverlap(java.lang.Object);
  public double getDefaultOverlap();
  public void setDefaultOverlap(double);
  public boolean isAllowOverlapParent(java.lang.Object);
  public java.lang.Object[] getFoldableCells(java.lang.Object[], boolean);
  public boolean isCellFoldable(java.lang.Object, boolean);
  public boolean isGridEnabled();
  public void setGridEnabled(boolean);
  public int getGridSize();
  public void setGridSize(int);
  public java.lang.String getAlternateEdgeStyle();
  public void setAlternateEdgeStyle(java.lang.String);
  public boolean isValidDropTarget(java.lang.Object, java.lang.Object[]);
  public boolean isSplitTarget(java.lang.Object, java.lang.Object[]);
  public java.lang.Object getDropTarget(java.lang.Object[], java.awt.Point, java.lang.Object);
  public java.lang.Object getDefaultParent();
  public void setDefaultParent(java.lang.Object);
  public java.lang.Object[] getChildVertices(java.lang.Object);
  public java.lang.Object[] getChildEdges(java.lang.Object);
  public java.lang.Object[] getChildCells(java.lang.Object);
  public java.lang.Object[] getChildCells(java.lang.Object, boolean, boolean);
  public java.lang.Object[] getConnections(java.lang.Object);
  public java.lang.Object[] getConnections(java.lang.Object, java.lang.Object);
  public java.lang.Object[] getIncomingEdges(java.lang.Object);
  public java.lang.Object[] getIncomingEdges(java.lang.Object, java.lang.Object);
  public java.lang.Object[] getOutgoingEdges(java.lang.Object);
  public java.lang.Object[] getOutgoingEdges(java.lang.Object, java.lang.Object);
  public java.lang.Object[] getEdges(java.lang.Object);
  public java.lang.Object[] getEdges(java.lang.Object, java.lang.Object);
  public java.lang.Object[] getEdges(java.lang.Object, java.lang.Object, boolean, boolean, boolean);
  public java.lang.Object[] getOpposites(java.lang.Object[], java.lang.Object);
  public java.lang.Object[] getOpposites(java.lang.Object[], java.lang.Object, boolean, boolean);
  public java.lang.Object[] getEdgesBetween(java.lang.Object, java.lang.Object);
  public java.lang.Object[] getEdgesBetween(java.lang.Object, java.lang.Object, boolean);
  public java.lang.Object[] getCellsBeyond(double, double, java.lang.Object, boolean, boolean);
  public java.util.List<java.lang.Object> findTreeRoots(java.lang.Object);
  public java.util.List<java.lang.Object> findTreeRoots(java.lang.Object, boolean);
  public java.util.List<java.lang.Object> findTreeRoots(java.lang.Object, boolean, boolean);
  public void traverse(java.lang.Object, boolean, com.mxgraph.view.mxGraph$mxICellVisitor);
  public void traverse(java.lang.Object, boolean, com.mxgraph.view.mxGraph$mxICellVisitor, java.lang.Object, java.util.Set<java.lang.Object>);
  public com.mxgraph.view.mxGraphSelectionModel getSelectionModel();
  public int getSelectionCount();
  public boolean isCellSelected(java.lang.Object);
  public boolean isSelectionEmpty();
  public void clearSelection();
  public java.lang.Object getSelectionCell();
  public void setSelectionCell(java.lang.Object);
  public java.lang.Object[] getSelectionCells();
  public void setSelectionCells(java.lang.Object[]);
  public void setSelectionCells(java.util.Collection<java.lang.Object>);
  public void addSelectionCell(java.lang.Object);
  public void addSelectionCells(java.lang.Object[]);
  public void removeSelectionCell(java.lang.Object);
  public void removeSelectionCells(java.lang.Object[]);
  public void selectNextCell();
  public void selectPreviousCell();
  public void selectParentCell();
  public void selectChildCell();
  public void selectCell(boolean, boolean, boolean);
  public void selectVertices();
  public void selectVertices(java.lang.Object);
  public void selectEdges();
  public void selectEdges(java.lang.Object);
  public void selectCells(boolean, boolean);
  public void selectCells(boolean, boolean, java.lang.Object);
  public void selectAll();
  public void selectAll(java.lang.Object);
  public void drawGraph(com.mxgraph.canvas.mxICanvas);
  public void drawCell(com.mxgraph.canvas.mxICanvas, java.lang.Object);
  public void drawState(com.mxgraph.canvas.mxICanvas, com.mxgraph.view.mxCellState, java.lang.String);
  protected void cellDrawn(com.mxgraph.canvas.mxICanvas, com.mxgraph.view.mxCellState, java.lang.Object, java.lang.Object);
  protected java.lang.String getLinkForCell(java.lang.Object);
  protected java.lang.String getTargetForCell(java.lang.Object);
  public void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  public void removePropertyChangeListener(java.beans.PropertyChangeListener);
  public void removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "mxGraph.java"
class com.mxgraph.view.mxGraph$1 implements com.mxgraph.util.mxEventSource$mxIEventListener {
  final com.mxgraph.view.mxGraph this$0;
  com.mxgraph.view.mxGraph$1(com.mxgraph.view.mxGraph);
  public void invoke(java.lang.Object, com.mxgraph.util.mxEventObject);
}
Compiled from "mxGraph.java"
class com.mxgraph.view.mxGraph$2 implements com.mxgraph.util.mxEventSource$mxIEventListener {
  final com.mxgraph.view.mxGraph this$0;
  com.mxgraph.view.mxGraph$2(com.mxgraph.view.mxGraph);
  public void invoke(java.lang.Object, com.mxgraph.util.mxEventObject);
}
Compiled from "mxGraph.java"
class com.mxgraph.view.mxGraph$3 implements com.mxgraph.model.mxGraphModel$Filter {
  final com.mxgraph.view.mxGraph this$0;
  com.mxgraph.view.mxGraph$3(com.mxgraph.view.mxGraph);
  public boolean filter(java.lang.Object);
}
Compiled from "mxGraph.java"
class com.mxgraph.view.mxGraph$4 implements com.mxgraph.model.mxGraphModel$Filter {
  final com.mxgraph.view.mxGraph this$0;
  com.mxgraph.view.mxGraph$4(com.mxgraph.view.mxGraph);
  public boolean filter(java.lang.Object);
}
Compiled from "mxGraph.java"
class com.mxgraph.view.mxGraph$5 implements com.mxgraph.model.mxGraphModel$Filter {
  final com.mxgraph.view.mxGraph this$0;
  com.mxgraph.view.mxGraph$5(com.mxgraph.view.mxGraph);
  public boolean filter(java.lang.Object);
}
Compiled from "mxGraph.java"
class com.mxgraph.view.mxGraph$6 implements com.mxgraph.model.mxGraphModel$Filter {
  final boolean val$collapse;
  final com.mxgraph.view.mxGraph this$0;
  com.mxgraph.view.mxGraph$6(com.mxgraph.view.mxGraph, boolean);
  public boolean filter(java.lang.Object);
}
Compiled from "mxGraph.java"
class com.mxgraph.view.mxGraph$7 implements com.mxgraph.model.mxGraphModel$Filter {
  final boolean val$vertices;
  final boolean val$edges;
  final com.mxgraph.view.mxGraph this$0;
  com.mxgraph.view.mxGraph$7(com.mxgraph.view.mxGraph, boolean, boolean);
  public boolean filter(java.lang.Object);
}
Compiled from "mxGraph.java"
public interface com.mxgraph.view.mxGraph$mxICellVisitor {
  public abstract boolean visit(java.lang.Object, java.lang.Object);
}
Compiled from "mxGraphSelectionModel.java"
public class com.mxgraph.view.mxGraphSelectionModel extends com.mxgraph.util.mxEventSource {
  protected com.mxgraph.view.mxGraph graph;
  protected boolean singleSelection;
  protected java.util.Set<java.lang.Object> cells;
  public com.mxgraph.view.mxGraphSelectionModel(com.mxgraph.view.mxGraph);
  public boolean isSingleSelection();
  public void setSingleSelection(boolean);
  public boolean isSelected(java.lang.Object);
  public boolean isEmpty();
  public int size();
  public void clear();
  public java.lang.Object getCell();
  public java.lang.Object[] getCells();
  public void setCell(java.lang.Object);
  public void setCells(java.lang.Object[]);
  protected java.lang.Object getFirstSelectableCell(java.lang.Object[]);
  public void addCell(java.lang.Object);
  public void addCells(java.lang.Object[]);
  public void removeCell(java.lang.Object);
  public void removeCells(java.lang.Object[]);
  protected void changeSelection(java.util.Collection<java.lang.Object>, java.util.Collection<java.lang.Object>);
  protected void cellAdded(java.lang.Object);
  protected void cellRemoved(java.lang.Object);
}
Compiled from "mxGraphSelectionModel.java"
public class com.mxgraph.view.mxGraphSelectionModel$mxSelectionChange implements com.mxgraph.util.mxUndoableEdit$mxUndoableChange {
  protected com.mxgraph.view.mxGraphSelectionModel model;
  protected java.util.Collection<java.lang.Object> added;
  protected java.util.Collection<java.lang.Object> removed;
  public com.mxgraph.view.mxGraphSelectionModel$mxSelectionChange(com.mxgraph.view.mxGraphSelectionModel, java.util.Collection<java.lang.Object>, java.util.Collection<java.lang.Object>);
  public void execute();
}
Compiled from "mxGraphView.java"
public class com.mxgraph.view.mxGraphView extends com.mxgraph.util.mxEventSource {
  protected com.mxgraph.view.mxGraph graph;
  protected java.lang.Object currentRoot;
  protected com.mxgraph.util.mxRectangle graphBounds;
  protected double scale;
  protected com.mxgraph.util.mxPoint translate;
  protected java.util.Hashtable<java.lang.Object, com.mxgraph.view.mxCellState> states;
  public com.mxgraph.view.mxGraphView(com.mxgraph.view.mxGraph);
  public com.mxgraph.view.mxGraph getGraph();
  public java.util.Hashtable<java.lang.Object, com.mxgraph.view.mxCellState> getStates();
  public void setStates(java.util.Hashtable<java.lang.Object, com.mxgraph.view.mxCellState>);
  public com.mxgraph.util.mxRectangle getGraphBounds();
  public void setGraphBounds(com.mxgraph.util.mxRectangle);
  public java.lang.Object getCurrentRoot();
  public java.lang.Object setCurrentRoot(java.lang.Object);
  public void scaleAndTranslate(double, double, double);
  public double getScale();
  public void setScale(double);
  public com.mxgraph.util.mxPoint getTranslate();
  public void setTranslate(com.mxgraph.util.mxPoint);
  public com.mxgraph.util.mxRectangle getBounds(java.lang.Object[]);
  public com.mxgraph.util.mxRectangle getBoundingBox(java.lang.Object[]);
  public com.mxgraph.util.mxRectangle getBounds(java.lang.Object[], boolean);
  public void reload();
  public void revalidate();
  public void invalidate();
  public void clear(java.lang.Object, boolean, boolean);
  public void invalidate(java.lang.Object);
  public void validate();
  public void validateBounds(com.mxgraph.view.mxCellState, java.lang.Object);
  public void updateVertexLabelOffset(com.mxgraph.view.mxCellState);
  public com.mxgraph.util.mxRectangle validatePoints(com.mxgraph.view.mxCellState, java.lang.Object);
  protected void childMoved(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState);
  public void updateLabelBounds(com.mxgraph.view.mxCellState);
  public com.mxgraph.util.mxRectangle updateBoundingBox(com.mxgraph.view.mxCellState);
  public void updateFixedTerminalPoints(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState);
  public void updateFixedTerminalPoint(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, boolean, com.mxgraph.view.mxConnectionConstraint);
  public void updatePoints(com.mxgraph.view.mxCellState, java.util.List<com.mxgraph.util.mxPoint>, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState);
  public com.mxgraph.util.mxPoint transformControlPoint(com.mxgraph.view.mxCellState, com.mxgraph.util.mxPoint);
  public com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction getEdgeStyle(com.mxgraph.view.mxCellState, java.util.List<com.mxgraph.util.mxPoint>, java.lang.Object, java.lang.Object);
  public void updateFloatingTerminalPoints(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState);
  public void updateFloatingTerminalPoint(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, boolean);
  public com.mxgraph.view.mxCellState getTerminalPort(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, boolean);
  public com.mxgraph.util.mxPoint getPerimeterPoint(com.mxgraph.view.mxCellState, com.mxgraph.util.mxPoint, boolean);
  public com.mxgraph.util.mxPoint getPerimeterPoint(com.mxgraph.view.mxCellState, com.mxgraph.util.mxPoint, boolean, double);
  public double getRoutingCenterX(com.mxgraph.view.mxCellState);
  public double getRoutingCenterY(com.mxgraph.view.mxCellState);
  public com.mxgraph.util.mxRectangle getPerimeterBounds(com.mxgraph.view.mxCellState, double);
  public com.mxgraph.view.mxPerimeter$mxPerimeterFunction getPerimeterFunction(com.mxgraph.view.mxCellState);
  public com.mxgraph.util.mxPoint getNextPoint(com.mxgraph.view.mxCellState, com.mxgraph.view.mxCellState, boolean);
  public java.lang.Object getVisibleTerminal(java.lang.Object, boolean);
  public void updateEdgeBounds(com.mxgraph.view.mxCellState);
  public com.mxgraph.util.mxPoint getPoint(com.mxgraph.view.mxCellState);
  public com.mxgraph.util.mxPoint getPoint(com.mxgraph.view.mxCellState, com.mxgraph.model.mxGeometry);
  public com.mxgraph.util.mxPoint getRelativePoint(com.mxgraph.view.mxCellState, double, double);
  public com.mxgraph.view.mxCellState[] getCellStates(java.lang.Object[]);
  public com.mxgraph.view.mxCellState getState(java.lang.Object);
  public com.mxgraph.view.mxCellState getState(java.lang.Object, boolean);
  public com.mxgraph.view.mxCellState removeState(java.lang.Object);
  public com.mxgraph.view.mxCellState createState(java.lang.Object);
  static {};
}
Compiled from "mxGraphView.java"
public class com.mxgraph.view.mxGraphView$mxCurrentRootChange implements com.mxgraph.util.mxUndoableEdit$mxUndoableChange {
  protected com.mxgraph.view.mxGraphView view;
  protected java.lang.Object root;
  protected java.lang.Object previous;
  protected boolean up;
  public com.mxgraph.view.mxGraphView$mxCurrentRootChange(com.mxgraph.view.mxGraphView, java.lang.Object);
  public com.mxgraph.view.mxGraphView getView();
  public java.lang.Object getRoot();
  public java.lang.Object getPrevious();
  public boolean isUp();
  public void execute();
}
Compiled from "mxLayoutManager.java"
public class com.mxgraph.view.mxLayoutManager extends com.mxgraph.util.mxEventSource {
  protected com.mxgraph.view.mxGraph graph;
  protected boolean enabled;
  protected boolean bubbling;
  protected com.mxgraph.util.mxEventSource$mxIEventListener undoHandler;
  protected com.mxgraph.util.mxEventSource$mxIEventListener moveHandler;
  public com.mxgraph.view.mxLayoutManager(com.mxgraph.view.mxGraph);
  public boolean isEnabled();
  public void setEnabled(boolean);
  public boolean isBubbling();
  public void setBubbling(boolean);
  public com.mxgraph.view.mxGraph getGraph();
  public void setGraph(com.mxgraph.view.mxGraph);
  protected com.mxgraph.layout.mxIGraphLayout getLayout(java.lang.Object);
  protected void cellsMoved(java.lang.Object[], java.awt.Point);
  protected void beforeUndo(com.mxgraph.util.mxUndoableEdit);
  protected java.util.Collection<java.lang.Object> getCellsForChanges(java.util.List<com.mxgraph.util.mxUndoableEdit$mxUndoableChange>);
  protected java.util.Collection<java.lang.Object> getCellsForChange(com.mxgraph.util.mxUndoableEdit$mxUndoableChange);
  protected void layoutCells(java.lang.Object[]);
  protected void executeLayout(com.mxgraph.layout.mxIGraphLayout, java.lang.Object);
  public void destroy();
}
Compiled from "mxLayoutManager.java"
class com.mxgraph.view.mxLayoutManager$1 implements com.mxgraph.util.mxEventSource$mxIEventListener {
  final com.mxgraph.view.mxLayoutManager this$0;
  com.mxgraph.view.mxLayoutManager$1(com.mxgraph.view.mxLayoutManager);
  public void invoke(java.lang.Object, com.mxgraph.util.mxEventObject);
}
Compiled from "mxLayoutManager.java"
class com.mxgraph.view.mxLayoutManager$2 implements com.mxgraph.util.mxEventSource$mxIEventListener {
  final com.mxgraph.view.mxLayoutManager this$0;
  com.mxgraph.view.mxLayoutManager$2(com.mxgraph.view.mxLayoutManager);
  public void invoke(java.lang.Object, com.mxgraph.util.mxEventObject);
}
Compiled from "mxMultiplicity.java"
public class com.mxgraph.view.mxMultiplicity {
  protected java.lang.String type;
  protected java.lang.String attr;
  protected java.lang.String value;
  protected boolean source;
  protected int min;
  protected java.lang.String max;
  protected java.util.Collection<java.lang.String> validNeighbors;
  protected boolean validNeighborsAllowed;
  protected java.lang.String countError;
  protected java.lang.String typeError;
  public com.mxgraph.view.mxMultiplicity(boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.util.Collection<java.lang.String>, java.lang.String, java.lang.String, boolean);
  public java.lang.String check(com.mxgraph.view.mxGraph, java.lang.Object, java.lang.Object, java.lang.Object, int, int);
  public boolean checkNeighbors(com.mxgraph.view.mxGraph, java.lang.Object, java.lang.Object, java.lang.Object);
  public boolean checkTerminal(com.mxgraph.view.mxGraph, java.lang.Object, java.lang.Object);
  public boolean checkType(com.mxgraph.view.mxGraph, java.lang.Object, java.lang.String);
  public boolean checkType(com.mxgraph.view.mxGraph, java.lang.Object, java.lang.String, java.lang.String, java.lang.String);
  public boolean isUnlimited();
  public int getMaxValue();
}
Compiled from "mxPerimeter.java"
public class com.mxgraph.view.mxPerimeter {
  public static com.mxgraph.view.mxPerimeter$mxPerimeterFunction RectanglePerimeter;
  public static com.mxgraph.view.mxPerimeter$mxPerimeterFunction EllipsePerimeter;
  public static com.mxgraph.view.mxPerimeter$mxPerimeterFunction RhombusPerimeter;
  public static com.mxgraph.view.mxPerimeter$mxPerimeterFunction TrianglePerimeter;
  public static com.mxgraph.view.mxPerimeter$mxPerimeterFunction HexagonPerimeter;
  public com.mxgraph.view.mxPerimeter();
  static {};
}
Compiled from "mxPerimeter.java"
final class com.mxgraph.view.mxPerimeter$1 implements com.mxgraph.view.mxPerimeter$mxPerimeterFunction {
  com.mxgraph.view.mxPerimeter$1();
  public com.mxgraph.util.mxPoint apply(com.mxgraph.util.mxRectangle, com.mxgraph.view.mxCellState, com.mxgraph.util.mxPoint, boolean);
}
Compiled from "mxPerimeter.java"
final class com.mxgraph.view.mxPerimeter$2 implements com.mxgraph.view.mxPerimeter$mxPerimeterFunction {
  com.mxgraph.view.mxPerimeter$2();
  public com.mxgraph.util.mxPoint apply(com.mxgraph.util.mxRectangle, com.mxgraph.view.mxCellState, com.mxgraph.util.mxPoint, boolean);
}
Compiled from "mxPerimeter.java"
final class com.mxgraph.view.mxPerimeter$3 implements com.mxgraph.view.mxPerimeter$mxPerimeterFunction {
  com.mxgraph.view.mxPerimeter$3();
  public com.mxgraph.util.mxPoint apply(com.mxgraph.util.mxRectangle, com.mxgraph.view.mxCellState, com.mxgraph.util.mxPoint, boolean);
}
Compiled from "mxPerimeter.java"
final class com.mxgraph.view.mxPerimeter$4 implements com.mxgraph.view.mxPerimeter$mxPerimeterFunction {
  com.mxgraph.view.mxPerimeter$4();
  public com.mxgraph.util.mxPoint apply(com.mxgraph.util.mxRectangle, com.mxgraph.view.mxCellState, com.mxgraph.util.mxPoint, boolean);
}
Compiled from "mxPerimeter.java"
final class com.mxgraph.view.mxPerimeter$5 implements com.mxgraph.view.mxPerimeter$mxPerimeterFunction {
  com.mxgraph.view.mxPerimeter$5();
  public com.mxgraph.util.mxPoint apply(com.mxgraph.util.mxRectangle, com.mxgraph.view.mxCellState, com.mxgraph.util.mxPoint, boolean);
}
Compiled from "mxPerimeter.java"
public interface com.mxgraph.view.mxPerimeter$mxPerimeterFunction {
  public abstract com.mxgraph.util.mxPoint apply(com.mxgraph.util.mxRectangle, com.mxgraph.view.mxCellState, com.mxgraph.util.mxPoint, boolean);
}
Compiled from "mxSpaceManager.java"
public class com.mxgraph.view.mxSpaceManager extends com.mxgraph.util.mxEventSource {
  protected com.mxgraph.view.mxGraph graph;
  protected boolean enabled;
  protected boolean shiftRightwards;
  protected boolean shiftDownwards;
  protected boolean extendParents;
  protected com.mxgraph.util.mxEventSource$mxIEventListener resizeHandler;
  public com.mxgraph.view.mxSpaceManager(com.mxgraph.view.mxGraph);
  public boolean isCellIgnored(java.lang.Object);
  public boolean isCellShiftable(java.lang.Object);
  public boolean isEnabled();
  public void setEnabled(boolean);
  public boolean isShiftRightwards();
  public void setShiftRightwards(boolean);
  public boolean isShiftDownwards();
  public void setShiftDownwards(boolean);
  public boolean isExtendParents();
  public void setExtendParents(boolean);
  public com.mxgraph.view.mxGraph getGraph();
  public void setGraph(com.mxgraph.view.mxGraph);
  protected void cellsResized(java.lang.Object[]);
  protected void cellResized(java.lang.Object);
  protected void shiftCell(java.lang.Object, double, double, double, double, double, double, double, double, boolean);
  protected java.lang.Object[] getCellsToShift(com.mxgraph.view.mxCellState);
  public void destroy();
}
Compiled from "mxSpaceManager.java"
class com.mxgraph.view.mxSpaceManager$1 implements com.mxgraph.util.mxEventSource$mxIEventListener {
  final com.mxgraph.view.mxSpaceManager this$0;
  com.mxgraph.view.mxSpaceManager$1(com.mxgraph.view.mxSpaceManager);
  public void invoke(java.lang.Object, com.mxgraph.util.mxEventObject);
}
Compiled from "mxStyleRegistry.java"
public class com.mxgraph.view.mxStyleRegistry {
  protected static java.util.Map<java.lang.String, java.lang.Object> values;
  public com.mxgraph.view.mxStyleRegistry();
  public static void putValue(java.lang.String, java.lang.Object);
  public static java.lang.Object getValue(java.lang.String);
  public static java.lang.String getName(java.lang.Object);
  static {};
}
Compiled from "mxStylesheet.java"
public class com.mxgraph.view.mxStylesheet {
  public static final java.util.Map<java.lang.String, java.lang.Object> EMPTY_STYLE;
  protected java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> styles;
  public com.mxgraph.view.mxStylesheet();
  public java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> getStyles();
  public void setStyles(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>);
  protected java.util.Map<java.lang.String, java.lang.Object> createDefaultVertexStyle();
  protected java.util.Map<java.lang.String, java.lang.Object> createDefaultEdgeStyle();
  public java.util.Map<java.lang.String, java.lang.Object> getDefaultVertexStyle();
  public void setDefaultVertexStyle(java.util.Map<java.lang.String, java.lang.Object>);
  public java.util.Map<java.lang.String, java.lang.Object> getDefaultEdgeStyle();
  public void setDefaultEdgeStyle(java.util.Map<java.lang.String, java.lang.Object>);
  public void putCellStyle(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>);
  public java.util.Map<java.lang.String, java.lang.Object> getCellStyle(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>);
  static {};
}
Compiled from "mxSwimlaneManager.java"
public class com.mxgraph.view.mxSwimlaneManager extends com.mxgraph.util.mxEventSource {
  protected com.mxgraph.view.mxGraph graph;
  protected boolean enabled;
  protected boolean horizontal;
  protected boolean siblings;
  protected boolean bubbling;
  protected com.mxgraph.util.mxEventSource$mxIEventListener addHandler;
  protected com.mxgraph.util.mxEventSource$mxIEventListener resizeHandler;
  public com.mxgraph.view.mxSwimlaneManager(com.mxgraph.view.mxGraph);
  public boolean isSwimlaneIgnored(java.lang.Object);
  public boolean isEnabled();
  public void setEnabled(boolean);
  public boolean isHorizontal();
  public void setHorizontal(boolean);
  public boolean isSiblings();
  public void setSiblings(boolean);
  public boolean isBubbling();
  public void setBubbling(boolean);
  public com.mxgraph.view.mxGraph getGraph();
  public void setGraph(com.mxgraph.view.mxGraph);
  protected void cellsAdded(java.lang.Object[]);
  protected void swimlaneAdded(java.lang.Object);
  protected void cellsResized(java.lang.Object[]);
  protected void swimlaneResized(java.lang.Object);
  protected void resizeSwimlane(java.lang.Object, double, double);
  protected void resizeParent(java.lang.Object, double, double);
  public void destroy();
}
Compiled from "mxSwimlaneManager.java"
class com.mxgraph.view.mxSwimlaneManager$1 implements com.mxgraph.util.mxEventSource$mxIEventListener {
  final com.mxgraph.view.mxSwimlaneManager this$0;
  com.mxgraph.view.mxSwimlaneManager$1(com.mxgraph.view.mxSwimlaneManager);
  public void invoke(java.lang.Object, com.mxgraph.util.mxEventObject);
}
Compiled from "mxSwimlaneManager.java"
class com.mxgraph.view.mxSwimlaneManager$2 implements com.mxgraph.util.mxEventSource$mxIEventListener {
  final com.mxgraph.view.mxSwimlaneManager this$0;
  com.mxgraph.view.mxSwimlaneManager$2(com.mxgraph.view.mxSwimlaneManager);
  public void invoke(java.lang.Object, com.mxgraph.util.mxEventObject);
}
Compiled from "mxTemporaryCellStates.java"
public class com.mxgraph.view.mxTemporaryCellStates {
  protected com.mxgraph.view.mxGraphView view;
  protected java.util.Hashtable<java.lang.Object, com.mxgraph.view.mxCellState> oldStates;
  protected com.mxgraph.util.mxRectangle oldBounds;
  protected double oldScale;
  public com.mxgraph.view.mxTemporaryCellStates(com.mxgraph.view.mxGraphView);
  public com.mxgraph.view.mxTemporaryCellStates(com.mxgraph.view.mxGraphView, double);
  public com.mxgraph.view.mxTemporaryCellStates(com.mxgraph.view.mxGraphView, double, java.lang.Object[]);
  public void destroy();
}
Compiled from "JGraph.java"
public class org.jgraph.JGraph extends javax.swing.JComponent implements javax.swing.Scrollable,javax.accessibility.Accessible,java.io.Serializable {
  public static final java.lang.String VERSION;
  public static final int DOT_GRID_MODE;
  public static final int CROSS_GRID_MODE;
  public static final int LINE_GRID_MODE;
  public static boolean IS_MAC;
  protected transient org.jgraph.JGraph$GraphSelectionRedirector selectionRedirector;
  protected transient org.jgraph.graph.GraphModel graphModel;
  protected transient org.jgraph.graph.GraphLayoutCache graphLayoutCache;
  protected transient org.jgraph.graph.GraphSelectionModel selectionModel;
  protected transient org.jgraph.graph.BasicMarqueeHandler marquee;
  protected transient java.awt.Image offscreen;
  protected transient java.awt.geom.Rectangle2D offscreenBounds;
  protected transient java.awt.geom.Point2D offscreenOffset;
  protected transient java.awt.Graphics offgraphics;
  protected transient java.awt.geom.Rectangle2D offscreenDirty;
  protected transient boolean wholeOffscreenDirty;
  protected transient double wholeOffscreenDirtyProportion;
  protected transient int offscreenBuffer;
  protected boolean volatileOffscreen;
  protected boolean lastBufferAllocated;
  protected javax.swing.ImageIcon backgroundImage;
  protected java.awt.Component backgroundComponent;
  protected boolean backgroundScaled;
  protected double scale;
  protected boolean antiAliased;
  protected boolean editable;
  protected boolean groupsEditable;
  protected boolean selectionEnabled;
  protected boolean previewInvalidNullPorts;
  protected boolean gridVisible;
  protected double gridSize;
  protected int gridMode;
  protected boolean portsVisible;
  protected boolean portsScaled;
  protected boolean portsOnTop;
  protected boolean moveBelowZero;
  protected boolean moveBeyondGraphBounds;
  protected boolean edgeLabelsMovable;
  protected boolean autoResizeGraph;
  protected java.awt.Color highlightColor;
  protected java.awt.Color handleColor;
  protected java.awt.Color lockedHandleColor;
  protected java.awt.Color marqueeColor;
  protected java.awt.Color gridColor;
  protected boolean dragEnabled;
  protected boolean dropEnabled;
  protected boolean xorEnabled;
  protected int editClickCount;
  protected boolean enabled;
  protected boolean gridEnabled;
  protected int handleSize;
  protected int tolerance;
  protected int minimumMove;
  protected boolean isJumpToDefaultPort;
  protected boolean isMoveIntoGroups;
  protected boolean isMoveOutOfGroups;
  protected boolean disconnectOnMove;
  protected boolean moveable;
  protected boolean cloneable;
  protected boolean sizeable;
  protected boolean bendable;
  protected boolean connectable;
  protected boolean disconnectable;
  protected boolean invokesStopCellEditing;
  public static final java.lang.String GRAPH_MODEL_PROPERTY;
  public static final java.lang.String GRAPH_LAYOUT_CACHE_PROPERTY;
  public static final java.lang.String MARQUEE_HANDLER_PROPERTY;
  public static final java.lang.String EDITABLE_PROPERTY;
  public static final java.lang.String SELECTIONENABLED_PROPERTY;
  public static final java.lang.String SCALE_PROPERTY;
  public static final java.lang.String ANTIALIASED_PROPERTY;
  public static final java.lang.String GRID_SIZE_PROPERTY;
  public static final java.lang.String GRID_VISIBLE_PROPERTY;
  public static final java.lang.String GRID_COLOR_PROPERTY;
  public static final java.lang.String HANDLE_COLOR_PROPERTY;
  public static final java.lang.String HANDLE_SIZE_PROPERTY;
  public static final java.lang.String LOCKED_HANDLE_COLOR_PROPERTY;
  public static final java.lang.String PORTS_VISIBLE_PROPERTY;
  public static final java.lang.String PORTS_SCALED_PROPERTY;
  public static final java.lang.String SELECTION_MODEL_PROPERTY;
  public static final java.lang.String INVOKES_STOP_CELL_EDITING_PROPERTY;
  public static final java.lang.String PROPERTY_BACKGROUNDIMAGE;
  public static void addSampleData(org.jgraph.graph.GraphModel);
  public static java.util.Map createBounds(org.jgraph.graph.AttributeMap, int, int, java.awt.Color);
  public org.jgraph.JGraph();
  public org.jgraph.JGraph(org.jgraph.graph.GraphModel);
  public org.jgraph.JGraph(org.jgraph.graph.GraphLayoutCache);
  public org.jgraph.JGraph(org.jgraph.graph.GraphModel, org.jgraph.graph.GraphLayoutCache);
  public org.jgraph.JGraph(org.jgraph.graph.GraphModel, org.jgraph.graph.BasicMarqueeHandler);
  public org.jgraph.JGraph(org.jgraph.graph.GraphModel, org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.BasicMarqueeHandler);
  public org.jgraph.plaf.GraphUI getUI();
  public void setUI(org.jgraph.plaf.GraphUI);
  public void updateUI();
  public java.lang.String getUIClassID();
  public java.lang.Object[] getRoots();
  public java.lang.Object[] getRoots(java.awt.Rectangle);
  public java.lang.Object[] getDescendants(java.lang.Object[]);
  public java.lang.Object[] order(java.lang.Object[]);
  public java.util.Map cloneCells(java.lang.Object[]);
  public org.jgraph.graph.CellView getTopmostViewAt(double, double, boolean, boolean);
  public java.lang.Object getFirstCellForLocation(double, double);
  public java.lang.Object getNextCellForLocation(java.lang.Object, double, double);
  public java.awt.geom.Rectangle2D getCellBounds(java.lang.Object);
  public java.awt.geom.Rectangle2D getCellBounds(java.lang.Object[]);
  public org.jgraph.graph.CellView getNextViewAt(org.jgraph.graph.CellView, double, double);
  public org.jgraph.graph.CellView getNextViewAt(org.jgraph.graph.CellView, double, double, boolean);
  public org.jgraph.graph.CellView getNextSelectableViewAt(org.jgraph.graph.CellView, double, double);
  public org.jgraph.graph.CellView getNextViewAt(org.jgraph.graph.CellView[], org.jgraph.graph.CellView, double, double);
  public org.jgraph.graph.CellView getNextViewAt(org.jgraph.graph.CellView[], org.jgraph.graph.CellView, double, double, boolean);
  public org.jgraph.graph.CellView getLeafViewAt(double, double);
  public java.lang.Object getPortForLocation(double, double);
  public org.jgraph.graph.PortView getPortViewAt(double, double);
  public org.jgraph.graph.PortView getPortViewAt(double, double, int);
  public org.jgraph.graph.PortView getDefaultPortForCell(java.lang.Object);
  public java.lang.String convertValueToString(java.lang.Object);
  public java.awt.geom.Point2D snap(java.awt.geom.Point2D);
  public java.awt.geom.Rectangle2D snap(java.awt.geom.Rectangle2D);
  public java.awt.geom.Dimension2D snap(java.awt.geom.Dimension2D);
  public java.awt.geom.Point2D toScreen(java.awt.geom.Point2D);
  public java.awt.geom.Point2D fromScreen(java.awt.geom.Point2D);
  public java.awt.geom.Rectangle2D toScreen(java.awt.geom.Rectangle2D);
  public java.awt.geom.Rectangle2D fromScreen(java.awt.geom.Rectangle2D);
  public void updateAutoSize(org.jgraph.graph.CellView);
  public org.jgraph.graph.AttributeMap getAttributes(java.lang.Object);
  public int getEditClickCount();
  public void setEditClickCount(int);
  public boolean isDropEnabled();
  public void setDropEnabled(boolean);
  public boolean isXorEnabled();
  public void setXorEnabled(boolean);
  public boolean isDragEnabled();
  public void setDragEnabled(boolean);
  public boolean isMoveable();
  public void setMoveable(boolean);
  public boolean isBendable();
  public void setBendable(boolean);
  public boolean isConnectable();
  public void setConnectable(boolean);
  public boolean isDisconnectable();
  public void setDisconnectable(boolean);
  public boolean isCloneable();
  public void setCloneable(boolean);
  public boolean isSizeable();
  public void setSizeable(boolean);
  public void setDisconnectOnMove(boolean);
  public boolean isDisconnectOnMove();
  public void setJumpToDefaultPort(boolean);
  public boolean isJumpToDefaultPort();
  public void setMoveIntoGroups(boolean);
  public boolean isMoveIntoGroups();
  public void setMoveOutOfGroups(boolean);
  public boolean isMoveOutOfGroups();
  public boolean isGridEnabled();
  public void setGridEnabled(boolean);
  public boolean isMoveBelowZero();
  public void setMoveBelowZero(boolean);
  public boolean isMoveBeyondGraphBounds();
  public void setMoveBeyondGraphBounds(boolean);
  public boolean getEdgeLabelsMovable();
  public void setEdgeLabelsMovable(boolean);
  public boolean isAutoResizeGraph();
  public void setAutoResizeGraph(boolean);
  public int getTolerance();
  public void setTolerance(int);
  public int getHandleSize();
  public void setHandleSize(int);
  public int getMinimumMove();
  public void setMinimumMove(int);
  public java.awt.Color getGridColor();
  public void setGridColor(java.awt.Color);
  public java.awt.Color getHandleColor();
  public void setHandleColor(java.awt.Color);
  public java.awt.Color getLockedHandleColor();
  public void setLockedHandleColor(java.awt.Color);
  public java.awt.Color getMarqueeColor();
  public void setMarqueeColor(java.awt.Color);
  public java.awt.Color getHighlightColor();
  public void setHighlightColor(java.awt.Color);
  public double getScale();
  public void setScale(double);
  public void setScale(double, java.awt.geom.Point2D);
  public void clearOffscreen();
  public java.awt.geom.Point2D getCenterPoint();
  public java.awt.geom.Rectangle2D getViewPortBounds();
  public double getGridSize();
  public int getGridMode();
  public void setGridSize(double);
  public void setGridMode(int);
  public boolean isGridVisible();
  public void setGridVisible(boolean);
  public boolean isPortsVisible();
  public void setPortsVisible(boolean);
  public boolean isPortsScaled();
  public void setPortsScaled(boolean);
  public boolean isPortsOnTop();
  public void setPortsOnTop(boolean);
  public boolean isAntiAliased();
  public void setAntiAliased(boolean);
  public boolean isEditable();
  public void setEditable(boolean);
  public boolean isGroupsEditable();
  public void setGroupsEditable(boolean);
  public boolean isSelectionEnabled();
  public void setSelectionEnabled(boolean);
  public boolean isPreviewInvalidNullPorts();
  public void setPreviewInvalidNullPorts(boolean);
  public java.awt.Graphics getOffgraphics();
  protected void createBufferedImage(int, int);
  protected void setupOffScreen(int, int, int, int, java.awt.geom.Rectangle2D);
  public java.awt.Image getOffscreen();
  public java.awt.geom.Rectangle2D getOffscreenDirty();
  public void addOffscreenDirty(java.awt.geom.Rectangle2D);
  public void clearOffscreenDirty();
  public void releaseOffscreenResources();
  public boolean drawImage(int, int, int, int, int, int, int, int);
  public boolean drawImage(java.awt.Graphics);
  public javax.swing.ImageIcon getBackgroundImage();
  public void setBackgroundImage(javax.swing.ImageIcon);
  public void setBackground(java.awt.Color);
  public boolean isBackgroundScaled();
  public java.awt.geom.Point2D getOffscreenOffset();
  public void setOffscreenOffset(java.awt.geom.Point2D);
  public boolean isVolatileOffscreen();
  public void setVolatileOffscreen(boolean);
  public void setBackgroundScaled(boolean);
  public java.awt.Component getBackgroundComponent();
  public void setBackgroundComponent(java.awt.Component);
  public void setOpaque(boolean);
  public org.jgraph.graph.GraphModel getModel();
  public void setModel(org.jgraph.graph.GraphModel);
  public org.jgraph.graph.GraphLayoutCache getGraphLayoutCache();
  public void setGraphLayoutCache(org.jgraph.graph.GraphLayoutCache);
  public org.jgraph.graph.BasicMarqueeHandler getMarqueeHandler();
  public void setMarqueeHandler(org.jgraph.graph.BasicMarqueeHandler);
  public void setInvokesStopCellEditing(boolean);
  public boolean getInvokesStopCellEditing();
  public boolean isCellEditable(java.lang.Object);
  public java.lang.String getToolTipText(java.awt.event.MouseEvent);
  public void setSelectionModel(org.jgraph.graph.GraphSelectionModel);
  public org.jgraph.graph.GraphSelectionModel getSelectionModel();
  public void clearSelection();
  public boolean isSelectionEmpty();
  public void addGraphSelectionListener(org.jgraph.event.GraphSelectionListener);
  public void removeGraphSelectionListener(org.jgraph.event.GraphSelectionListener);
  protected void fireValueChanged(org.jgraph.event.GraphSelectionEvent);
  public void setSelectionCell(java.lang.Object);
  public void setSelectionCells(java.lang.Object[]);
  public void addSelectionCell(java.lang.Object);
  public void addSelectionCells(java.lang.Object[]);
  public void removeSelectionCell(java.lang.Object);
  public java.lang.Object getSelectionCell();
  public java.lang.Object[] getSelectionCells();
  public java.lang.Object[] getSelectionCells(java.lang.Object[]);
  public java.lang.Object getSelectionCellAt(java.awt.geom.Point2D);
  public int getSelectionCount();
  public boolean isCellSelected(java.lang.Object);
  public void scrollCellToVisible(java.lang.Object);
  public void scrollPointToVisible(java.awt.geom.Point2D);
  public boolean isEditing();
  public boolean stopEditing();
  public void cancelEditing();
  public void startEditingAtCell(java.lang.Object);
  public java.lang.Object getEditingCell();
  public void graphDidChange();
  public void refresh();
  public java.awt.image.BufferedImage getImage(java.awt.Color, int);
  public java.awt.geom.Rectangle2D getClipRectangle(org.jgraph.event.GraphLayoutCacheEvent$GraphLayoutCacheChange);
  public java.awt.Dimension getPreferredScrollableViewportSize();
  public int getScrollableUnitIncrement(java.awt.Rectangle, int, int);
  public int getScrollableBlockIncrement(java.awt.Rectangle, int, int);
  public boolean getScrollableTracksViewportWidth();
  public boolean getScrollableTracksViewportHeight();
  protected java.lang.String paramString();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "JGraph.java"
public class org.jgraph.JGraph$EmptySelectionModel extends org.jgraph.graph.DefaultGraphSelectionModel {
  protected static final org.jgraph.JGraph$EmptySelectionModel sharedInstance;
  public org.jgraph.JGraph$EmptySelectionModel();
  public static org.jgraph.JGraph$EmptySelectionModel sharedInstance();
  public void setSelectionCells(java.lang.Object[]);
  public void addSelectionCells(java.lang.Object[]);
  public void removeSelectionCells(java.lang.Object[]);
  static {};
}
Compiled from "JGraph.java"
public class org.jgraph.JGraph$GraphSelectionRedirector implements java.io.Serializable,org.jgraph.event.GraphSelectionListener {
  final org.jgraph.JGraph this$0;
  protected org.jgraph.JGraph$GraphSelectionRedirector(org.jgraph.JGraph);
  public void valueChanged(org.jgraph.event.GraphSelectionEvent);
}
Compiled from "GraphLayoutCacheEvent.java"
public class org.jgraph.event.GraphLayoutCacheEvent extends java.util.EventObject {
  protected org.jgraph.event.GraphLayoutCacheEvent$GraphLayoutCacheChange change;
  public org.jgraph.event.GraphLayoutCacheEvent(java.lang.Object, org.jgraph.event.GraphLayoutCacheEvent$GraphLayoutCacheChange);
  public org.jgraph.event.GraphLayoutCacheEvent$GraphLayoutCacheChange getChange();
}
Compiled from "GraphLayoutCacheEvent.java"
public interface org.jgraph.event.GraphLayoutCacheEvent$GraphLayoutCacheChange {
  public abstract java.lang.Object getSource();
  public abstract java.lang.Object[] getChanged();
  public abstract java.lang.Object[] getInserted();
  public abstract java.lang.Object[] getRemoved();
  public abstract java.util.Map getAttributes();
  public abstract java.util.Map getPreviousAttributes();
  public abstract java.awt.geom.Rectangle2D getDirtyRegion();
  public abstract void setDirtyRegion(java.awt.geom.Rectangle2D);
  public abstract java.lang.Object[] getContext();
}
Compiled from "GraphLayoutCacheListener.java"
public interface org.jgraph.event.GraphLayoutCacheListener extends java.util.EventListener {
  public abstract void graphLayoutCacheChanged(org.jgraph.event.GraphLayoutCacheEvent);
}
Compiled from "GraphModelEvent.java"
public class org.jgraph.event.GraphModelEvent extends java.util.EventObject {
  protected org.jgraph.event.GraphModelEvent$GraphModelChange change;
  public org.jgraph.event.GraphModelEvent(java.lang.Object, org.jgraph.event.GraphModelEvent$GraphModelChange);
  public org.jgraph.event.GraphModelEvent$GraphModelChange getChange();
}
Compiled from "GraphModelEvent.java"
public interface org.jgraph.event.GraphModelEvent$GraphModelChange extends org.jgraph.event.GraphLayoutCacheEvent$GraphLayoutCacheChange {
  public abstract org.jgraph.graph.ConnectionSet getConnectionSet();
  public abstract org.jgraph.graph.ConnectionSet getPreviousConnectionSet();
  public abstract org.jgraph.graph.ParentMap getParentMap();
  public abstract org.jgraph.graph.ParentMap getPreviousParentMap();
  public abstract void putViews(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.CellView[]);
  public abstract org.jgraph.graph.CellView[] getViews(org.jgraph.graph.GraphLayoutCache);
}
Compiled from "GraphModelListener.java"
public interface org.jgraph.event.GraphModelListener extends java.util.EventListener {
  public abstract void graphChanged(org.jgraph.event.GraphModelEvent);
}
Compiled from "GraphSelectionEvent.java"
public class org.jgraph.event.GraphSelectionEvent extends java.util.EventObject {
  protected java.lang.Object[] cells;
  protected boolean[] areNew;
  public org.jgraph.event.GraphSelectionEvent(java.lang.Object, java.lang.Object[], boolean[]);
  public java.lang.Object[] getCells();
  public java.lang.Object getCell();
  public boolean isAddedCell();
  public boolean isAddedCell(java.lang.Object);
  public boolean isAddedCell(int);
  public java.lang.Object cloneWithSource(java.lang.Object);
}
Compiled from "GraphSelectionListener.java"
public interface org.jgraph.event.GraphSelectionListener extends java.util.EventListener {
  public abstract void valueChanged(org.jgraph.event.GraphSelectionEvent);
}
Compiled from "CompoundVertexView.java"
public class org.jgraph.example.CompoundVertexView extends org.jgraph.graph.VertexView {
  public org.jgraph.example.CompoundVertexView();
  public org.jgraph.example.CompoundVertexView(java.lang.Object);
  public java.awt.geom.Rectangle2D getBounds();
  public void setBounds(java.awt.geom.Rectangle2D);
  public void update(org.jgraph.graph.GraphLayoutCache);
  public void translate(double, double);
  public void scale(double, double, java.awt.geom.Point2D);
}
Compiled from "GraphEd.java"
public class org.jgraph.example.GraphEd extends javax.swing.JApplet implements org.jgraph.event.GraphSelectionListener,java.awt.event.KeyListener {
  protected org.jgraph.JGraph graph;
  protected org.jgraph.graph.GraphUndoManager undoManager;
  protected javax.swing.Action undo;
  protected javax.swing.Action redo;
  protected javax.swing.Action remove;
  protected javax.swing.Action group;
  protected javax.swing.Action ungroup;
  protected javax.swing.Action tofront;
  protected javax.swing.Action toback;
  protected javax.swing.Action cut;
  protected javax.swing.Action copy;
  protected javax.swing.Action paste;
  protected int cellCount;
  protected org.jgraph.example.GraphEd$StatusBarGraphListener statusBar;
  public static void main(java.lang.String[]);
  public org.jgraph.example.GraphEd();
  public void destroy();
  protected void populateContentPane();
  protected org.jgraph.JGraph createGraph();
  protected void installListeners(org.jgraph.JGraph);
  protected void uninstallListeners(org.jgraph.JGraph);
  protected org.jgraph.graph.BasicMarqueeHandler createMarqueeHandler();
  public void insert(java.awt.geom.Point2D);
  public java.util.Map createCellAttributes(java.awt.geom.Point2D);
  protected org.jgraph.graph.DefaultGraphCell createDefaultGraphCell();
  public void connect(org.jgraph.graph.Port, org.jgraph.graph.Port);
  protected org.jgraph.graph.DefaultEdge createDefaultEdge();
  public java.util.Map createEdgeAttributes();
  public void group(java.lang.Object[]);
  protected org.jgraph.graph.DefaultGraphCell createGroupCell();
  protected int getCellCount(org.jgraph.JGraph);
  public void ungroup(java.lang.Object[]);
  public boolean isGroup(java.lang.Object);
  public void toFront(java.lang.Object[]);
  public void toBack(java.lang.Object[]);
  public void undo();
  public void redo();
  protected void updateHistoryButtons();
  public void valueChanged(org.jgraph.event.GraphSelectionEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyTyped(java.awt.event.KeyEvent);
  public void keyPressed(java.awt.event.KeyEvent);
  public javax.swing.JPopupMenu createPopupMenu(java.awt.Point, java.lang.Object);
  public javax.swing.JToolBar createToolBar();
  public org.jgraph.JGraph getGraph();
  public void setGraph(org.jgraph.JGraph);
  protected org.jgraph.example.GraphEd$StatusBarGraphListener createStatusBar();
  protected java.lang.String getVersion();
  public javax.swing.Action getRedo();
  public void setRedo(javax.swing.Action);
  public javax.swing.Action getUndo();
  public void setUndo(javax.swing.Action);
  public javax.swing.Action getCopy();
  public void setCopy(javax.swing.Action);
  public javax.swing.Action getCut();
  public void setCut(javax.swing.Action);
  public javax.swing.Action getPaste();
  public void setPaste(javax.swing.Action);
  public javax.swing.Action getToback();
  public void setToback(javax.swing.Action);
  public javax.swing.Action getTofront();
  public void setTofront(javax.swing.Action);
  public javax.swing.Action getRemove();
  public void setRemove(javax.swing.Action);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$1 extends org.jgraph.graph.GraphUndoManager {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$1(org.jgraph.example.GraphEd);
  public void undoableEditHappened(javax.swing.event.UndoableEditEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$10 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$10(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$11 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$11(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$12 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$12(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$13 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$13(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$14 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$14(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$15 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$15(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$16 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$16(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$17 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$17(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$2 extends org.jgraph.graph.DefaultCellViewFactory {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$2(org.jgraph.example.GraphEd);
  protected org.jgraph.graph.EdgeView createEdgeView(java.lang.Object);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$2$1 extends org.jgraph.graph.EdgeView {
  final org.jgraph.example.GraphEd$2 this$1;
  org.jgraph.example.GraphEd$2$1(org.jgraph.example.GraphEd$2, java.lang.Object);
  public org.jgraph.graph.CellHandle getHandle(org.jgraph.graph.GraphContext);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$3 extends javax.swing.AbstractAction {
  final java.lang.Object val$cell;
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$3(org.jgraph.example.GraphEd, java.lang.String, java.lang.Object);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$4 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$4(org.jgraph.example.GraphEd, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$5 extends javax.swing.AbstractAction {
  final java.awt.Point val$pt;
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$5(org.jgraph.example.GraphEd, java.lang.String, java.awt.Point);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$6 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$6(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$7 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$7(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$8 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$8(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
class org.jgraph.example.GraphEd$9 extends javax.swing.AbstractAction {
  final org.jgraph.example.GraphEd this$0;
  org.jgraph.example.GraphEd$9(org.jgraph.example.GraphEd, java.lang.String, javax.swing.Icon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
public class org.jgraph.example.GraphEd$EdStatusBar extends org.jgraph.example.GraphEd$StatusBarGraphListener {
  protected javax.swing.JLabel leftSideStatus;
  protected javax.swing.JLabel rightSideStatus;
  final org.jgraph.example.GraphEd this$0;
  public org.jgraph.example.GraphEd$EdStatusBar(org.jgraph.example.GraphEd);
  protected void updateStatusBar();
  public javax.swing.JLabel getLeftSideStatus();
  public void setLeftSideStatus(javax.swing.JLabel);
  public javax.swing.JLabel getRightSideStatus();
  public void setRightSideStatus(javax.swing.JLabel);
}
Compiled from "GraphEd.java"
public class org.jgraph.example.GraphEd$EventRedirector extends javax.swing.AbstractAction {
  protected javax.swing.Action action;
  final org.jgraph.example.GraphEd this$0;
  public org.jgraph.example.GraphEd$EventRedirector(org.jgraph.example.GraphEd, javax.swing.Action, javax.swing.ImageIcon);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "GraphEd.java"
public class org.jgraph.example.GraphEd$MyEdgeHandle extends org.jgraph.graph.EdgeView$EdgeHandle {
  public org.jgraph.example.GraphEd$MyEdgeHandle(org.jgraph.graph.EdgeView, org.jgraph.graph.GraphContext);
  public boolean isAddPointEvent(java.awt.event.MouseEvent);
  public boolean isRemovePointEvent(java.awt.event.MouseEvent);
}
Compiled from "GraphEd.java"
public class org.jgraph.example.GraphEd$MyGraph extends org.jgraph.JGraph {
  public org.jgraph.example.GraphEd$MyGraph(org.jgraph.graph.GraphModel);
  public org.jgraph.example.GraphEd$MyGraph(org.jgraph.graph.GraphModel, org.jgraph.graph.GraphLayoutCache);
}
Compiled from "GraphEd.java"
public class org.jgraph.example.GraphEd$MyMarqueeHandler extends org.jgraph.graph.BasicMarqueeHandler {
  protected java.awt.geom.Point2D start;
  protected java.awt.geom.Point2D current;
  protected org.jgraph.graph.PortView port;
  protected org.jgraph.graph.PortView firstPort;
  protected javax.swing.JComponent highlight;
  final org.jgraph.example.GraphEd this$0;
  public org.jgraph.example.GraphEd$MyMarqueeHandler(org.jgraph.example.GraphEd);
  protected javax.swing.JComponent createHighlight();
  public boolean isForceMarqueeEvent(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public org.jgraph.graph.PortView getSourcePortAt(java.awt.geom.Point2D);
  protected org.jgraph.graph.PortView getTargetPortAt(java.awt.geom.Point2D);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  protected void paintConnector(java.awt.Color, java.awt.Color, java.awt.Graphics);
  public void paint(org.jgraph.JGraph, java.awt.Graphics);
  protected void drawConnectorLine(java.awt.Graphics);
  protected void paintPort(java.awt.Graphics);
  protected void highlight(org.jgraph.JGraph, org.jgraph.graph.CellView);
  protected java.awt.Rectangle getHighlightBounds(org.jgraph.JGraph, org.jgraph.graph.CellView);
}
Compiled from "GraphEd.java"
public class org.jgraph.example.GraphEd$MyModel extends org.jgraph.graph.DefaultGraphModel {
  public org.jgraph.example.GraphEd$MyModel();
  public boolean acceptsSource(java.lang.Object, java.lang.Object);
  public boolean acceptsTarget(java.lang.Object, java.lang.Object);
}
Compiled from "GraphEd.java"
public class org.jgraph.example.GraphEd$StatusBarGraphListener extends javax.swing.JPanel implements org.jgraph.event.GraphModelListener {
  final org.jgraph.example.GraphEd this$0;
  public org.jgraph.example.GraphEd$StatusBarGraphListener(org.jgraph.example.GraphEd);
  public void graphChanged(org.jgraph.event.GraphModelEvent);
  protected void updateStatusBar();
}
Compiled from "GroupingRemoving.java"
public class org.jgraph.example.GroupingRemoving {
  public org.jgraph.example.GroupingRemoving();
  public static void main(java.lang.String[]);
  public static org.jgraph.graph.DefaultGraphCell createVertex(java.lang.String, double, double, double, double, java.awt.Color, boolean);
}
Compiled from "HelloWorld.java"
public class org.jgraph.example.HelloWorld {
  public org.jgraph.example.HelloWorld();
  public static void main(java.lang.String[]);
  public static org.jgraph.graph.DefaultGraphCell createVertex(java.lang.String, double, double, double, double, java.awt.Color, boolean);
}
Compiled from "IconExample.java"
public class org.jgraph.example.IconExample extends org.jgraph.example.GraphEd {
  protected javax.swing.ImageIcon jgraphIcon;
  protected static org.jgraph.example.IconExample$InvisiblePortRenderer portRenderer;
  public org.jgraph.example.IconExample();
  public java.util.Map createCellAttributes(java.awt.geom.Point2D);
  protected org.jgraph.graph.DefaultGraphCell createDefaultGraphCell();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "IconExample.java"
class org.jgraph.example.IconExample$1 extends org.jgraph.graph.GraphUndoManager {
  final org.jgraph.example.IconExample this$0;
  org.jgraph.example.IconExample$1(org.jgraph.example.IconExample);
  public void undoableEditHappened(javax.swing.event.UndoableEditEvent);
}
Compiled from "IconExample.java"
public class org.jgraph.example.IconExample$CustomCell extends org.jgraph.graph.DefaultGraphCell {
  final org.jgraph.example.IconExample this$0;
  public org.jgraph.example.IconExample$CustomCell(org.jgraph.example.IconExample, javax.swing.ImageIcon, java.lang.String);
  public java.lang.String getDescription();
  public javax.swing.ImageIcon getIcon();
  public void setUserObject(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "IconExample.java"
public class org.jgraph.example.IconExample$IconGraph extends org.jgraph.example.GraphEd$MyGraph {
  final org.jgraph.example.IconExample this$0;
  public org.jgraph.example.IconExample$IconGraph(org.jgraph.example.IconExample, org.jgraph.graph.GraphModel);
}
Compiled from "IconExample.java"
class org.jgraph.example.IconExample$IconGraph$1 extends org.jgraph.graph.DefaultCellViewFactory {
  final org.jgraph.example.IconExample val$this$0;
  final org.jgraph.example.IconExample$IconGraph this$1;
  org.jgraph.example.IconExample$IconGraph$1(org.jgraph.example.IconExample$IconGraph, org.jgraph.example.IconExample);
  public org.jgraph.graph.CellView createView(org.jgraph.graph.GraphModel, java.lang.Object);
}
Compiled from "IconExample.java"
public class org.jgraph.example.IconExample$InvisiblePortRenderer extends org.jgraph.graph.PortRenderer {
  public org.jgraph.example.IconExample$InvisiblePortRenderer();
  public void paint(java.awt.Graphics);
}
Compiled from "IconExample.java"
public class org.jgraph.example.IconExample$InvisiblePortView extends org.jgraph.graph.PortView {
  final org.jgraph.example.IconExample this$0;
  public org.jgraph.example.IconExample$InvisiblePortView(org.jgraph.example.IconExample, java.lang.Object);
  public java.awt.geom.Rectangle2D getBounds();
  public org.jgraph.graph.CellViewRenderer getRenderer();
  public java.awt.geom.Point2D getLocation(org.jgraph.graph.EdgeView);
}
Compiled from "JGraphAbstractIconAnimator.java"
public abstract class org.jgraph.example.JGraphAbstractIconAnimator {
  public static boolean isAnimated(javax.swing.Icon);
  public static org.jgraph.example.JGraphAbstractIconAnimator get(java.awt.Component, java.lang.Object);
  public org.jgraph.example.JGraphAbstractIconAnimator(java.awt.Component, java.lang.Object, javax.swing.ImageIcon);
  protected void repaint(java.awt.Component, java.lang.Object);
  public abstract java.awt.Rectangle getRepaintRect(java.awt.Component, java.lang.Object);
  public void stop();
  public javax.swing.Icon getIcon();
  static {};
}
Compiled from "JGraphAbstractIconAnimator.java"
class org.jgraph.example.JGraphAbstractIconAnimator$1 implements java.awt.image.ImageObserver {
  final java.awt.Component val$context;
  final java.lang.Object val$key;
  final org.jgraph.example.JGraphAbstractIconAnimator this$0;
  org.jgraph.example.JGraphAbstractIconAnimator$1(org.jgraph.example.JGraphAbstractIconAnimator, java.awt.Component, java.lang.Object);
  public boolean imageUpdate(java.awt.Image, int, int, int, int, int);
}
Compiled from "JGraphIconView.java"
public class org.jgraph.example.JGraphIconView extends org.jgraph.graph.VertexView {
  protected static transient org.jgraph.example.JGraphIconView$IconRenderer viewRenderer;
  public org.jgraph.example.JGraphIconView();
  public org.jgraph.example.JGraphIconView(java.lang.Object);
  public org.jgraph.graph.GraphCellEditor getEditor();
  public boolean isMouseOver();
  public void setMouseOver(boolean);
  public java.awt.geom.Point2D getCenterPoint();
  public java.awt.geom.Point2D getPerimeterPoint(java.awt.geom.Point2D, java.awt.geom.Point2D);
  public org.jgraph.graph.CellViewRenderer getRenderer();
  static {};
}
Compiled from "JGraphIconView.java"
public class org.jgraph.example.JGraphIconView$DescriptionTextArea extends javax.swing.JEditorPane {
  public org.jgraph.example.JGraphIconView$DescriptionTextArea(java.lang.String, java.lang.String);
  public void setDescription(java.lang.String);
  public void setText(java.lang.String);
}
Compiled from "JGraphIconView.java"
public class org.jgraph.example.JGraphIconView$IconDisplay extends javax.swing.JLabel {
  public org.jgraph.example.JGraphIconView$IconDisplay();
  public java.awt.Dimension getMinimumSize();
  public java.awt.Dimension getPreferredSize();
  public void paint(java.awt.Graphics);
}
Compiled from "JGraphIconView.java"
public class org.jgraph.example.JGraphIconView$IconRenderer extends javax.swing.JComponent implements org.jgraph.graph.CellViewRenderer {
  public org.jgraph.example.JGraphIconView$IconRenderer();
  public java.awt.Dimension getPreferredSize();
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
  public org.jgraph.example.JGraphIconView getView();
  public boolean isSelected();
  public boolean isFocused();
  public boolean isPreview();
  public org.jgraph.example.JGraphIconView$IconDisplay getIconDisplay();
}
Compiled from "JGraphIconView.java"
public class org.jgraph.example.JGraphIconView$MultiLinedEditor extends org.jgraph.graph.DefaultGraphCellEditor {
  public org.jgraph.example.JGraphIconView$MultiLinedEditor();
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
  protected org.jgraph.graph.GraphCellEditor createGraphCellEditor();
  protected java.awt.Container createContainer();
  static org.jgraph.JGraph access$000(org.jgraph.example.JGraphIconView$MultiLinedEditor);
  static org.jgraph.JGraph access$100(org.jgraph.example.JGraphIconView$MultiLinedEditor);
  static java.awt.Component access$200(org.jgraph.example.JGraphIconView$MultiLinedEditor);
  static java.awt.Component access$300(org.jgraph.example.JGraphIconView$MultiLinedEditor);
}
Compiled from "JGraphIconView.java"
class org.jgraph.example.JGraphIconView$MultiLinedEditor$ModifiedEditorContainer extends org.jgraph.graph.DefaultGraphCellEditor$EditorContainer {
  final org.jgraph.example.JGraphIconView$MultiLinedEditor this$0;
  org.jgraph.example.JGraphIconView$MultiLinedEditor$ModifiedEditorContainer(org.jgraph.example.JGraphIconView$MultiLinedEditor);
  public void doLayout();
}
Compiled from "JGraphIconView.java"
public class org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor extends javax.swing.AbstractCellEditor implements org.jgraph.graph.GraphCellEditor {
  javax.swing.JTextArea editorComponent;
  final org.jgraph.example.JGraphIconView$MultiLinedEditor this$0;
  public org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor(org.jgraph.example.JGraphIconView$MultiLinedEditor);
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
  public java.lang.Object getCellEditorValue();
  public boolean stopCellEditing();
  public boolean shouldSelectCell(java.util.EventObject);
}
Compiled from "JGraphIconView.java"
class org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor$1 extends javax.swing.AbstractAction {
  final org.jgraph.example.JGraphIconView$MultiLinedEditor val$this$0;
  final org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor this$1;
  org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor$1(org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor, org.jgraph.example.JGraphIconView$MultiLinedEditor);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphIconView.java"
class org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor$2 extends javax.swing.AbstractAction {
  final org.jgraph.example.JGraphIconView$MultiLinedEditor val$this$0;
  final org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor this$1;
  org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor$2(org.jgraph.example.JGraphIconView$MultiLinedEditor$RealCellEditor, org.jgraph.example.JGraphIconView$MultiLinedEditor);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "JGraphIconView.java"
class org.jgraph.example.JGraphIconView$MyMultiLinedEditor extends org.jgraph.example.JGraphIconView$MultiLinedEditor {
  final org.jgraph.example.JGraphIconView this$0;
  org.jgraph.example.JGraphIconView$MyMultiLinedEditor(org.jgraph.example.JGraphIconView);
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
}
Compiled from "LiveJGraphDemo.java"
public class org.jgraph.example.LiveJGraphDemo extends javax.swing.JFrame {
  public org.jgraph.example.LiveJGraphDemo();
  public static void main(java.lang.String[]);
  static org.jgraph.graph.DefaultGraphModel access$300(org.jgraph.example.LiveJGraphDemo);
  static org.jgraph.example.LiveJGraphDemo$FrameSelectionListener access$400(org.jgraph.example.LiveJGraphDemo);
  static org.jgraph.example.LiveJGraphDemo$FrameComponentListener access$500(org.jgraph.example.LiveJGraphDemo);
  static javax.swing.JDesktopPane access$600(org.jgraph.example.LiveJGraphDemo);
  static org.jgraph.example.LiveJGraphDemo$AddParentInternalFrameAction access$700(org.jgraph.example.LiveJGraphDemo);
  static org.jgraph.example.LiveJGraphDemo$AddChildInternalFrameAction access$800(org.jgraph.example.LiveJGraphDemo);
  static javax.swing.JPanel access$900(org.jgraph.example.LiveJGraphDemo);
}
Compiled from "LiveJGraphDemo.java"
class org.jgraph.example.LiveJGraphDemo$1 implements java.awt.event.ActionListener {
  final org.jgraph.example.LiveJGraphDemo this$0;
  org.jgraph.example.LiveJGraphDemo$1(org.jgraph.example.LiveJGraphDemo);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "LiveJGraphDemo.java"
class org.jgraph.example.LiveJGraphDemo$AddChildInternalFrameAction extends javax.swing.AbstractAction {
  final org.jgraph.example.LiveJGraphDemo this$0;
  public org.jgraph.example.LiveJGraphDemo$AddChildInternalFrameAction(org.jgraph.example.LiveJGraphDemo);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "LiveJGraphDemo.java"
class org.jgraph.example.LiveJGraphDemo$AddParentInternalFrameAction extends javax.swing.AbstractAction {
  final org.jgraph.example.LiveJGraphDemo this$0;
  public org.jgraph.example.LiveJGraphDemo$AddParentInternalFrameAction(org.jgraph.example.LiveJGraphDemo);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "LiveJGraphDemo.java"
class org.jgraph.example.LiveJGraphDemo$AddRootInternalFrameAction extends javax.swing.AbstractAction {
  final org.jgraph.example.LiveJGraphDemo this$0;
  public org.jgraph.example.LiveJGraphDemo$AddRootInternalFrameAction(org.jgraph.example.LiveJGraphDemo);
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "LiveJGraphDemo.java"
class org.jgraph.example.LiveJGraphDemo$CompListener extends java.awt.event.ComponentAdapter {
  final org.jgraph.example.LiveJGraphDemo this$0;
  public void componentResized(java.awt.event.ComponentEvent);
  org.jgraph.example.LiveJGraphDemo$CompListener(org.jgraph.example.LiveJGraphDemo, org.jgraph.example.LiveJGraphDemo$1);
}
Compiled from "LiveJGraphDemo.java"
class org.jgraph.example.LiveJGraphDemo$FrameComponentListener extends java.awt.event.ComponentAdapter {
  final org.jgraph.example.LiveJGraphDemo this$0;
  public void componentResized(java.awt.event.ComponentEvent);
  public void componentMoved(java.awt.event.ComponentEvent);
  org.jgraph.example.LiveJGraphDemo$FrameComponentListener(org.jgraph.example.LiveJGraphDemo, org.jgraph.example.LiveJGraphDemo$1);
}
Compiled from "LiveJGraphDemo.java"
class org.jgraph.example.LiveJGraphDemo$FrameSelectionListener extends javax.swing.event.InternalFrameAdapter {
  final org.jgraph.example.LiveJGraphDemo this$0;
  public void internalFrameActivated(javax.swing.event.InternalFrameEvent);
  public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent);
  org.jgraph.example.LiveJGraphDemo$FrameSelectionListener(org.jgraph.example.LiveJGraphDemo, org.jgraph.example.LiveJGraphDemo$1);
}
Compiled from "LiveJGraphInternalFrame.java"
public class org.jgraph.example.LiveJGraphInternalFrame extends javax.swing.JInternalFrame {
  public org.jgraph.example.LiveJGraphInternalFrame();
  public void create();
  public java.lang.String toString();
  public void setGraphCell(org.jgraph.graph.DefaultGraphCell);
  public org.jgraph.graph.DefaultGraphCell getGraphCell();
}
Compiled from "AbstractCellView.java"
public abstract class org.jgraph.graph.AbstractCellView implements org.jgraph.graph.CellView,java.io.Serializable {
  public static transient org.jgraph.graph.GraphCellEditor cellEditor;
  protected java.lang.Object cell;
  protected org.jgraph.graph.CellView parent;
  protected java.util.List childViews;
  protected org.jgraph.graph.AttributeMap allAttributes;
  protected org.jgraph.graph.AttributeMap attributes;
  protected transient java.awt.geom.Rectangle2D groupBounds;
  public org.jgraph.graph.AbstractCellView();
  public org.jgraph.graph.AbstractCellView(java.lang.Object);
  protected org.jgraph.graph.AttributeMap createAttributeMap();
  public java.lang.Object getCell();
  public void setCell(java.lang.Object);
  public void refresh(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.CellMapper, boolean);
  protected org.jgraph.graph.AttributeMap getCellAttributes(org.jgraph.graph.GraphModel);
  public void update(org.jgraph.graph.GraphLayoutCache);
  protected void mergeAttributes();
  public void childUpdated();
  public org.jgraph.graph.CellView getParentView();
  public org.jgraph.graph.CellView[] getChildViews();
  public static org.jgraph.graph.CellView[] getDescendantViews(org.jgraph.graph.CellView[]);
  public void removeFromParent();
  public boolean isLeaf();
  public org.jgraph.graph.AttributeMap getAttributes();
  public void setAttributes(org.jgraph.graph.AttributeMap);
  public org.jgraph.graph.AttributeMap getAllAttributes();
  public java.util.Map changeAttributes(org.jgraph.graph.GraphLayoutCache, java.util.Map);
  public java.awt.geom.Rectangle2D getBounds();
  public static java.awt.geom.Rectangle2D getBounds(org.jgraph.graph.CellView[]);
  public void setBounds(java.awt.geom.Rectangle2D);
  protected void updateGroupBounds();
  protected boolean includeInGroupBounds(org.jgraph.graph.CellView);
  public void translate(double, double);
  public void scale(double, double, java.awt.geom.Point2D);
  public boolean intersects(org.jgraph.JGraph, java.awt.geom.Rectangle2D);
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, boolean, boolean, boolean);
  public abstract org.jgraph.graph.CellViewRenderer getRenderer();
  public abstract org.jgraph.graph.CellHandle getHandle(org.jgraph.graph.GraphContext);
  public org.jgraph.graph.GraphCellEditor getEditor();
  public static java.awt.geom.Point2D getCenterPoint(org.jgraph.graph.CellView);
  public java.awt.geom.Point2D getPerimeterPoint(org.jgraph.graph.EdgeView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  static {};
}
Compiled from "AttributeMap.java"
public class org.jgraph.graph.AttributeMap extends java.util.Hashtable implements java.lang.Cloneable {
  public static transient org.jgraph.graph.AttributeMap emptyAttributeMap;
  public org.jgraph.graph.AttributeMap();
  public org.jgraph.graph.AttributeMap(int);
  public org.jgraph.graph.AttributeMap(int, float);
  public org.jgraph.graph.AttributeMap(java.util.Map);
  public java.awt.geom.Point2D createPoint();
  public java.awt.geom.Point2D createPoint(java.awt.geom.Point2D);
  public java.awt.geom.Point2D createPoint(double, double);
  public java.awt.geom.Rectangle2D createRect();
  public java.awt.geom.Rectangle2D createRect(double, double, double, double);
  public java.awt.geom.Rectangle2D createRect(java.awt.geom.Point2D);
  public java.awt.geom.Rectangle2D createRect(java.awt.geom.Point2D, double);
  public java.awt.geom.Rectangle2D createRect(java.awt.geom.Rectangle2D);
  public java.awt.geom.Rectangle2D createRect(double, double, double, double, double, double);
  public java.awt.geom.Rectangle2D createRect(java.awt.geom.Rectangle2D, double, double);
  public org.jgraph.graph.AttributeMap applyMap(java.util.Map);
  public java.lang.Object applyValue(java.lang.Object, java.lang.Object);
  public java.awt.geom.Point2D[] clonePoints(java.awt.geom.Point2D[]);
  public java.util.List clonePoints(java.util.List);
  public java.util.List clonePoints(java.lang.Object[], boolean);
  public static void translate(java.util.Collection, double, double);
  public void translate(double, double);
  public void scale(double, double, java.awt.geom.Point2D);
  public java.util.Map diff(java.util.Map);
  public java.lang.Object clone();
  public org.jgraph.graph.AttributeMap cloneEntries(org.jgraph.graph.AttributeMap);
  static {};
}
Compiled from "AttributeMap.java"
final class org.jgraph.graph.AttributeMap$1 extends org.jgraph.graph.AttributeMap {
  org.jgraph.graph.AttributeMap$1(int);
  public java.lang.Object clone();
}
Compiled from "AttributeMap.java"
public class org.jgraph.graph.AttributeMap$SerializablePoint2D extends java.awt.geom.Point2D$Double implements java.io.Serializable {
  public org.jgraph.graph.AttributeMap$SerializablePoint2D();
  public org.jgraph.graph.AttributeMap$SerializablePoint2D(double, double);
  public void setX(double);
  public void setY(double);
}
Compiled from "AttributeMap.java"
public class org.jgraph.graph.AttributeMap$SerializableRectangle2D extends java.awt.geom.Rectangle2D$Double implements java.io.Serializable {
  public org.jgraph.graph.AttributeMap$SerializableRectangle2D();
  public org.jgraph.graph.AttributeMap$SerializableRectangle2D(double, double, double, double);
  public void setX(double);
  public void setY(double);
  public void setWidth(double);
  public void setHeight(double);
}
Compiled from "BasicMarqueeHandler.java"
public class org.jgraph.graph.BasicMarqueeHandler {
  protected transient java.awt.Cursor previousCursor;
  protected java.awt.geom.Rectangle2D marqueeBounds;
  protected java.awt.geom.Point2D startPoint;
  protected java.awt.geom.Point2D currentPoint;
  public org.jgraph.graph.BasicMarqueeHandler();
  public boolean isForceMarqueeEvent(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void handleMarqueeEvent(java.awt.event.MouseEvent, org.jgraph.JGraph, java.awt.geom.Rectangle2D);
  public void mouseDragged(java.awt.event.MouseEvent);
  protected void processMouseDraggedEvent(java.awt.event.MouseEvent);
  public void paint(org.jgraph.JGraph, java.awt.Graphics);
  public void overlay(org.jgraph.JGraph, java.awt.Graphics, boolean);
  public void mousePressed(java.awt.event.MouseEvent);
  public boolean isMarqueeTriggerEvent(java.awt.event.MouseEvent, org.jgraph.JGraph);
  public void mouseMoved(java.awt.event.MouseEvent);
  public java.awt.geom.Point2D getCurrentPoint();
  public java.awt.geom.Rectangle2D getMarqueeBounds();
  public java.awt.Cursor getPreviousCursor();
  public java.awt.geom.Point2D getStartPoint();
  public void setCurrentPoint(java.awt.geom.Point2D);
  public void setMarqueeBounds(java.awt.geom.Rectangle2D);
  public void setPreviousCursor(java.awt.Cursor);
  public void setStartPoint(java.awt.geom.Point2D);
  public static org.jgraph.JGraph getGraphForEvent(java.awt.event.MouseEvent);
}
Compiled from "CellHandle.java"
public interface org.jgraph.graph.CellHandle {
  public abstract void paint(java.awt.Graphics);
  public abstract void overlay(java.awt.Graphics);
  public abstract void mouseMoved(java.awt.event.MouseEvent);
  public abstract void mousePressed(java.awt.event.MouseEvent);
  public abstract void mouseDragged(java.awt.event.MouseEvent);
  public abstract void mouseReleased(java.awt.event.MouseEvent);
}
Compiled from "CellMapper.java"
public interface org.jgraph.graph.CellMapper {
  public abstract org.jgraph.graph.CellView getMapping(java.lang.Object, boolean);
  public abstract void putMapping(java.lang.Object, org.jgraph.graph.CellView);
}
Compiled from "CellView.java"
public interface org.jgraph.graph.CellView {
  public abstract java.lang.Object getCell();
  public abstract void refresh(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.CellMapper, boolean);
  public abstract void update(org.jgraph.graph.GraphLayoutCache);
  public abstract void childUpdated();
  public abstract org.jgraph.graph.CellView getParentView();
  public abstract org.jgraph.graph.CellView[] getChildViews();
  public abstract void removeFromParent();
  public abstract boolean isLeaf();
  public abstract java.awt.geom.Rectangle2D getBounds();
  public abstract boolean intersects(org.jgraph.JGraph, java.awt.geom.Rectangle2D);
  public abstract java.awt.geom.Point2D getPerimeterPoint(org.jgraph.graph.EdgeView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  public abstract java.util.Map changeAttributes(org.jgraph.graph.GraphLayoutCache, java.util.Map);
  public abstract org.jgraph.graph.AttributeMap getAttributes();
  public abstract org.jgraph.graph.AttributeMap getAllAttributes();
  public abstract java.awt.Component getRendererComponent(org.jgraph.JGraph, boolean, boolean, boolean);
  public abstract org.jgraph.graph.CellHandle getHandle(org.jgraph.graph.GraphContext);
  public abstract org.jgraph.graph.GraphCellEditor getEditor();
}
Compiled from "CellViewFactory.java"
public interface org.jgraph.graph.CellViewFactory {
  public abstract org.jgraph.graph.CellView createView(org.jgraph.graph.GraphModel, java.lang.Object);
}
Compiled from "CellViewRenderer.java"
public interface org.jgraph.graph.CellViewRenderer {
  public abstract java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
}
Compiled from "ConnectionSet.java"
public class org.jgraph.graph.ConnectionSet implements java.io.Serializable {
  protected java.util.Set connections;
  protected java.util.Set edges;
  public static org.jgraph.graph.ConnectionSet create(org.jgraph.graph.GraphModel, java.lang.Object[], boolean);
  public org.jgraph.graph.ConnectionSet();
  public org.jgraph.graph.ConnectionSet(java.lang.Object, java.lang.Object, boolean);
  public org.jgraph.graph.ConnectionSet(java.util.Set);
  public org.jgraph.graph.ConnectionSet(java.lang.Object, java.lang.Object, java.lang.Object);
  protected static void connect(org.jgraph.graph.ConnectionSet, java.lang.Object, java.lang.Object, boolean, boolean);
  public void addConnections(org.jgraph.graph.CellView[]);
  public void connect(java.lang.Object, java.lang.Object, java.lang.Object);
  public void connect(java.lang.Object, java.lang.Object, boolean);
  public void disconnect(java.lang.Object);
  public void disconnect(java.lang.Object, boolean);
  public boolean isEmpty();
  public int size();
  public java.util.Iterator connections();
  public java.util.Set getChangedEdges();
  public java.lang.Object getPort(java.lang.Object, boolean);
  public org.jgraph.graph.ConnectionSet clone(java.util.Map);
  public java.util.Set getConnections();
  public java.util.Set getEdges();
  public void setConnections(java.util.Set);
  public void setEdges(java.util.Set);
}
Compiled from "ConnectionSet.java"
public class org.jgraph.graph.ConnectionSet$Connection implements java.io.Serializable {
  protected java.lang.Object edge;
  protected java.lang.Object port;
  protected boolean isSource;
  public org.jgraph.graph.ConnectionSet$Connection();
  public org.jgraph.graph.ConnectionSet$Connection(java.lang.Object, java.lang.Object, boolean);
  public java.lang.Object getEdge();
  public java.lang.Object getPort();
  public boolean isSource();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void setEdge(java.lang.Object);
  public void setSource(boolean);
  public void setPort(java.lang.Object);
}
Compiled from "DefaultCellViewFactory.java"
public class org.jgraph.graph.DefaultCellViewFactory implements org.jgraph.graph.CellViewFactory,java.io.Serializable {
  public org.jgraph.graph.DefaultCellViewFactory();
  public org.jgraph.graph.CellView createView(org.jgraph.graph.GraphModel, java.lang.Object);
  protected org.jgraph.graph.VertexView createVertexView(java.lang.Object);
  protected org.jgraph.graph.EdgeView createEdgeView(java.lang.Object);
  protected org.jgraph.graph.PortView createPortView(java.lang.Object);
  protected org.jgraph.graph.EdgeView createEdgeView(org.jgraph.graph.Edge);
  protected org.jgraph.graph.PortView createPortView(org.jgraph.graph.Port);
}
Compiled from "DefaultEdge.java"
public class org.jgraph.graph.DefaultEdge extends org.jgraph.graph.DefaultGraphCell implements org.jgraph.graph.Edge {
  protected java.lang.Object source;
  protected java.lang.Object target;
  public org.jgraph.graph.DefaultEdge();
  public org.jgraph.graph.DefaultEdge(java.lang.Object);
  public org.jgraph.graph.DefaultEdge(java.lang.Object, org.jgraph.graph.AttributeMap);
  public java.lang.Object getSource();
  public java.lang.Object getTarget();
  public void setSource(java.lang.Object);
  public void setTarget(java.lang.Object);
  public java.lang.Object clone();
}
Compiled from "DefaultEdge.java"
public class org.jgraph.graph.DefaultEdge$DefaultRouting extends org.jgraph.graph.DefaultEdge$LoopRouting {
  public org.jgraph.graph.DefaultEdge$DefaultRouting();
  protected java.util.List routeEdge(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.EdgeView);
}
Compiled from "DefaultEdge.java"
public class org.jgraph.graph.DefaultEdge$LoopRouting implements org.jgraph.graph.Edge$Routing {
  public org.jgraph.graph.DefaultEdge$LoopRouting();
  public java.util.List route(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.EdgeView);
  protected java.util.List routeLoop(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.EdgeView);
  protected java.util.List routeEdge(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.EdgeView);
  public int getPreferredLineStyle(org.jgraph.graph.EdgeView);
  protected int getLoopStyle();
  protected int getEdgeStyle();
}
Compiled from "DefaultGraphCell.java"
public class org.jgraph.graph.DefaultGraphCell extends javax.swing.tree.DefaultMutableTreeNode implements org.jgraph.graph.GraphCell,java.lang.Cloneable {
  protected org.jgraph.graph.AttributeMap attributes;
  public org.jgraph.graph.DefaultGraphCell();
  public org.jgraph.graph.DefaultGraphCell(java.lang.Object);
  public org.jgraph.graph.DefaultGraphCell(java.lang.Object, org.jgraph.graph.AttributeMap);
  public org.jgraph.graph.DefaultGraphCell(java.lang.Object, org.jgraph.graph.AttributeMap, javax.swing.tree.MutableTreeNode[]);
  public java.util.List getChildren();
  public org.jgraph.graph.AttributeMap getAttributes();
  public java.util.Map changeAttributes(java.util.Map);
  public void setAttributes(org.jgraph.graph.AttributeMap);
  public java.lang.Object addPort();
  public java.lang.Object addPort(java.awt.geom.Point2D);
  public java.lang.Object addPort(java.awt.geom.Point2D, java.lang.Object);
  public java.lang.Object clone();
}
Compiled from "DefaultGraphCellEditor.java"
public class org.jgraph.graph.DefaultGraphCellEditor implements java.awt.event.ActionListener,org.jgraph.graph.GraphCellEditor,org.jgraph.event.GraphSelectionListener,java.io.Serializable {
  protected org.jgraph.graph.GraphCellEditor realEditor;
  protected java.awt.Container editingContainer;
  protected transient java.awt.Component editingComponent;
  protected boolean canEdit;
  protected transient int offsetX;
  protected transient int offsetY;
  protected transient org.jgraph.JGraph graph;
  protected transient java.lang.Object lastCell;
  protected java.awt.Color borderSelectionColor;
  protected transient javax.swing.Icon editingIcon;
  protected java.awt.Font font;
  public org.jgraph.graph.DefaultGraphCellEditor();
  public org.jgraph.graph.DefaultGraphCellEditor(org.jgraph.graph.GraphCellEditor);
  public void setBorderSelectionColor(java.awt.Color);
  public java.awt.Color getBorderSelectionColor();
  public void setFont(java.awt.Font);
  public java.awt.Font getFont();
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
  public java.lang.Object getCellEditorValue();
  public boolean isCellEditable(java.util.EventObject);
  public boolean shouldSelectCell(java.util.EventObject);
  public boolean stopCellEditing();
  public void cancelCellEditing();
  public void addCellEditorListener(javax.swing.event.CellEditorListener);
  public void removeCellEditorListener(javax.swing.event.CellEditorListener);
  public void valueChanged(org.jgraph.event.GraphSelectionEvent);
  public void actionPerformed(java.awt.event.ActionEvent);
  protected void setGraph(org.jgraph.JGraph);
  protected boolean shouldStartEditingTimer(java.util.EventObject);
  protected boolean canEditImmediately(java.util.EventObject);
  protected boolean inHitRegion(double, double);
  protected void determineOffset(org.jgraph.JGraph, java.lang.Object, boolean);
  protected void prepareForEditing();
  protected java.awt.Container createContainer();
  protected org.jgraph.graph.GraphCellEditor createGraphCellEditor();
}
Compiled from "DefaultGraphCellEditor.java"
class org.jgraph.graph.DefaultGraphCellEditor$1 extends org.jgraph.graph.DefaultRealEditor {
  final org.jgraph.graph.DefaultGraphCellEditor this$0;
  org.jgraph.graph.DefaultGraphCellEditor$1(org.jgraph.graph.DefaultGraphCellEditor, javax.swing.JTextField);
  public boolean shouldSelectCell(java.util.EventObject);
}
Compiled from "DefaultGraphCellEditor.java"
public class org.jgraph.graph.DefaultGraphCellEditor$DefaultTextField extends javax.swing.JTextField {
  protected javax.swing.border.Border border;
  final org.jgraph.graph.DefaultGraphCellEditor this$0;
  public org.jgraph.graph.DefaultGraphCellEditor$DefaultTextField(org.jgraph.graph.DefaultGraphCellEditor, javax.swing.border.Border);
  public javax.swing.border.Border getBorder();
  public java.awt.Font getFont();
}
Compiled from "DefaultGraphCellEditor.java"
public class org.jgraph.graph.DefaultGraphCellEditor$EditorContainer extends java.awt.Container {
  final org.jgraph.graph.DefaultGraphCellEditor this$0;
  public org.jgraph.graph.DefaultGraphCellEditor$EditorContainer(org.jgraph.graph.DefaultGraphCellEditor);
  public void paint(java.awt.Graphics);
  public void doLayout();
  public java.awt.Dimension getPreferredSize();
}
Compiled from "DefaultGraphModel.java"
public class org.jgraph.graph.DefaultGraphModel extends javax.swing.undo.UndoableEditSupport implements java.io.Serializable,org.jgraph.graph.GraphModel {
  protected transient javax.swing.event.EventListenerList listenerList;
  protected transient java.util.Iterator emptyIterator;
  protected java.util.List roots;
  protected boolean asksAllowsChildren;
  protected boolean removeEmptyGroups;
  protected org.jgraph.graph.AttributeMap attributes;
  protected transient int updateLevel;
  protected transient java.util.Set transAddedCells;
  protected transient java.util.Set transRemovedCells;
  protected transient java.util.Map transEditAttrs;
  protected transient org.jgraph.graph.ConnectionSet transEditCS;
  protected transient org.jgraph.graph.ParentMap transEditPM;
  public org.jgraph.graph.DefaultGraphModel();
  public org.jgraph.graph.DefaultGraphModel(java.util.List, org.jgraph.graph.AttributeMap);
  public org.jgraph.graph.DefaultGraphModel(java.util.List, org.jgraph.graph.AttributeMap, org.jgraph.graph.ConnectionSet);
  public java.util.List getRoots();
  public int getRootCount();
  public java.lang.Object getRootAt(int);
  public int getIndexOfRoot(java.lang.Object);
  public boolean contains(java.lang.Object);
  public org.jgraph.graph.AttributeMap getAttributes(java.lang.Object);
  public java.lang.Object getValue(java.lang.Object);
  public java.util.Map getAttributes();
  public java.lang.Object getSource(java.lang.Object);
  public java.lang.Object getTarget(java.lang.Object);
  public boolean acceptsSource(java.lang.Object, java.lang.Object);
  public boolean acceptsTarget(java.lang.Object, java.lang.Object);
  public java.util.Iterator edges(java.lang.Object);
  public boolean isEdge(java.lang.Object);
  public boolean isPort(java.lang.Object);
  public org.jgraph.graph.ConnectionSet getConnectionSet();
  public java.util.Map cloneCells(java.lang.Object[]);
  protected void setParent(java.lang.Object, java.lang.Object);
  protected java.lang.Object cloneCell(java.lang.Object);
  protected java.lang.Object cloneUserObject(java.lang.Object);
  public java.lang.Object getParent(java.lang.Object);
  public int getIndexOfChild(java.lang.Object, java.lang.Object);
  public java.lang.Object getChild(java.lang.Object, int);
  public int getChildCount(java.lang.Object);
  public boolean isLeaf(java.lang.Object);
  public void insert(java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public void remove(java.lang.Object[]);
  public void edit(java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public void edit(java.lang.Object[], java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public synchronized void execute(org.jgraph.graph.ExecutableChange);
  public int getUpdateLevel();
  public void beginUpdate();
  public void endUpdate();
  protected void updateTransaction(java.lang.Object[], java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap);
  public void toBack(java.lang.Object[]);
  public void toFront(java.lang.Object[]);
  protected org.jgraph.graph.DefaultGraphModel$GraphModelLayerEdit createLayerEdit(java.lang.Object[], int);
  protected org.jgraph.graph.DefaultGraphModel$GraphModelEdit createRemoveEdit(java.lang.Object[]);
  protected org.jgraph.graph.DefaultGraphModel$GraphModelEdit createEdit(java.lang.Object[], java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  protected java.lang.Object[] handleInsert(java.lang.Object[]);
  protected java.lang.Object[] handleRemove(java.lang.Object[]);
  protected org.jgraph.graph.ParentMap handleParentMap(org.jgraph.graph.ParentMap);
  protected java.util.Map handleAttributes(java.util.Map);
  public java.lang.Object valueForCellChanged(java.lang.Object, java.lang.Object);
  protected org.jgraph.graph.ConnectionSet handleConnectionSet(org.jgraph.graph.ConnectionSet);
  protected void handleConnection(org.jgraph.graph.ConnectionSet$Connection, boolean);
  protected void connect(java.lang.Object, java.lang.Object, boolean, boolean);
  public void addGraphModelListener(org.jgraph.event.GraphModelListener);
  public void removeGraphModelListener(org.jgraph.event.GraphModelListener);
  public void cellsChanged(java.lang.Object[]);
  protected void fireGraphChanged(java.lang.Object, org.jgraph.event.GraphModelEvent$GraphModelChange);
  public org.jgraph.event.GraphModelListener[] getGraphModelListeners();
  public static java.lang.Object cloneCell(org.jgraph.graph.GraphModel, java.lang.Object);
  public static java.lang.Object[] cloneCell(org.jgraph.graph.GraphModel, java.lang.Object[]);
  public static void setSourcePort(org.jgraph.graph.GraphModel, java.lang.Object, java.lang.Object);
  public static void setTargetPort(org.jgraph.graph.GraphModel, java.lang.Object, java.lang.Object);
  public static java.lang.Object getSourceVertex(org.jgraph.graph.GraphModel, java.lang.Object);
  public static java.lang.Object getTargetVertex(org.jgraph.graph.GraphModel, java.lang.Object);
  public static java.lang.Object getUserObject(java.lang.Object);
  public static boolean isGroup(org.jgraph.graph.GraphModel, java.lang.Object);
  public static java.lang.Object[] getAll(org.jgraph.graph.GraphModel);
  public static java.lang.Object[] getRoots(org.jgraph.graph.GraphModel);
  public static java.util.Collection getRootsAsCollection(org.jgraph.graph.GraphModel);
  public static java.lang.Object[] getRoots(org.jgraph.graph.GraphModel, java.lang.Object[]);
  public static java.lang.Object[] getTopmostCells(org.jgraph.graph.GraphModel, java.lang.Object[]);
  public static boolean hasAncestorIn(org.jgraph.graph.GraphModel, java.util.Set, java.lang.Object);
  public static java.util.List getDescendants(org.jgraph.graph.GraphModel, java.lang.Object[]);
  public static java.lang.Object[] order(org.jgraph.graph.GraphModel, java.lang.Object[]);
  public static java.util.Set getEdges(org.jgraph.graph.GraphModel, java.lang.Object[]);
  public static java.lang.Object getOpposite(org.jgraph.graph.GraphModel, java.lang.Object, java.lang.Object);
  public static boolean containsEdgeBetween(org.jgraph.graph.GraphModel, java.lang.Object, java.lang.Object);
  public static java.lang.Object[] getEdgesBetween(org.jgraph.graph.GraphModel, java.lang.Object, java.lang.Object, boolean);
  public static java.lang.Object[] getOutgoingEdges(org.jgraph.graph.GraphModel, java.lang.Object);
  public static java.lang.Object[] getIncomingEdges(org.jgraph.graph.GraphModel, java.lang.Object);
  public static java.lang.Object[] getEdges(org.jgraph.graph.GraphModel, java.lang.Object, boolean);
  public static boolean isVertex(org.jgraph.graph.GraphModel, java.lang.Object);
  public boolean isRemoveEmptyGroups();
  public void setRemoveEmptyGroups(boolean);
}
Compiled from "DefaultGraphModel.java"
class org.jgraph.graph.DefaultGraphModel$1 implements org.jgraph.event.GraphModelEvent$GraphModelChange {
  final java.lang.Object[] val$cells;
  final org.jgraph.graph.DefaultGraphModel this$0;
  org.jgraph.graph.DefaultGraphModel$1(org.jgraph.graph.DefaultGraphModel, java.lang.Object[]);
  public java.lang.Object[] getInserted();
  public java.lang.Object[] getRemoved();
  public java.util.Map getPreviousAttributes();
  public org.jgraph.graph.ConnectionSet getConnectionSet();
  public org.jgraph.graph.ConnectionSet getPreviousConnectionSet();
  public org.jgraph.graph.ParentMap getParentMap();
  public org.jgraph.graph.ParentMap getPreviousParentMap();
  public void putViews(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.CellView[]);
  public org.jgraph.graph.CellView[] getViews(org.jgraph.graph.GraphLayoutCache);
  public java.lang.Object getSource();
  public java.lang.Object[] getChanged();
  public java.util.Map getAttributes();
  public java.lang.Object[] getContext();
  public java.awt.geom.Rectangle2D getDirtyRegion();
  public void setDirtyRegion(java.awt.geom.Rectangle2D);
}
Compiled from "DefaultGraphModel.java"
public class org.jgraph.graph.DefaultGraphModel$EmptyIterator implements java.util.Iterator,java.io.Serializable {
  public org.jgraph.graph.DefaultGraphModel$EmptyIterator();
  public boolean hasNext();
  public java.lang.Object next();
  public void remove();
}
Compiled from "DefaultGraphModel.java"
public class org.jgraph.graph.DefaultGraphModel$GraphModelEdit extends javax.swing.undo.CompoundEdit implements org.jgraph.event.GraphModelEvent$GraphModelChange {
  protected java.lang.Object[] insert;
  protected java.lang.Object[] changed;
  protected java.lang.Object[] remove;
  protected java.lang.Object[] context;
  protected java.lang.Object[] inserted;
  protected java.lang.Object[] removed;
  protected java.util.Map attributes;
  protected java.util.Map previousAttributes;
  protected org.jgraph.graph.ParentMap parentMap;
  protected org.jgraph.graph.ParentMap previousParentMap;
  protected java.awt.geom.Rectangle2D dirtyRegion;
  protected org.jgraph.graph.ConnectionSet connectionSet;
  protected org.jgraph.graph.ConnectionSet previousConnectionSet;
  protected java.util.Map cellViews;
  final org.jgraph.graph.DefaultGraphModel this$0;
  public org.jgraph.graph.DefaultGraphModel$GraphModelEdit(org.jgraph.graph.DefaultGraphModel, java.lang.Object[], java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap);
  public java.lang.Object[] filterParents(java.util.Map, int);
  protected void changeChildCount(java.util.Map, java.lang.Object, int);
  protected void handleEmptyGroups(java.lang.Object[]);
  public boolean isSignificant();
  public java.lang.Object getSource();
  public java.lang.Object[] getChanged();
  public java.lang.Object[] getContext();
  public java.lang.Object[] getInserted();
  public java.lang.Object[] getRemoved();
  public java.util.Map getPreviousAttributes();
  public java.util.Map getAttributes();
  public org.jgraph.graph.ConnectionSet getConnectionSet();
  public org.jgraph.graph.ConnectionSet getPreviousConnectionSet();
  public org.jgraph.graph.ParentMap getParentMap();
  public org.jgraph.graph.ParentMap getPreviousParentMap();
  public java.awt.geom.Rectangle2D getDirtyRegion();
  public void setDirtyRegion(java.awt.geom.Rectangle2D);
  public void redo() throws javax.swing.undo.CannotRedoException;
  public void undo() throws javax.swing.undo.CannotUndoException;
  public void execute();
  public void putViews(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.CellView[]);
  public org.jgraph.graph.CellView[] getViews(org.jgraph.graph.GraphLayoutCache);
  public java.lang.String toString();
}
Compiled from "DefaultGraphModel.java"
public class org.jgraph.graph.DefaultGraphModel$GraphModelLayerEdit extends javax.swing.undo.AbstractUndoableEdit implements org.jgraph.event.GraphModelEvent$GraphModelChange {
  public static final int FRONT;
  public static final int BACK;
  protected java.lang.Object changeSource;
  protected transient java.lang.Object[] cells;
  protected transient int[] next;
  protected transient int[] prev;
  protected int layer;
  protected java.lang.Object[] changed;
  final org.jgraph.graph.DefaultGraphModel this$0;
  public org.jgraph.graph.DefaultGraphModel$GraphModelLayerEdit(org.jgraph.graph.DefaultGraphModel, java.lang.Object[], int);
  protected void updateNext();
  public java.lang.Object getSource();
  public java.lang.Object[] getChanged();
  public java.lang.Object[] getInserted();
  public java.lang.Object[] getRemoved();
  public java.lang.Object[] getContext();
  public java.util.Map getAttributes();
  public java.util.Map getPreviousAttributes();
  public org.jgraph.graph.ConnectionSet getConnectionSet();
  public org.jgraph.graph.ConnectionSet getPreviousConnectionSet();
  public org.jgraph.graph.ParentMap getParentMap();
  public org.jgraph.graph.ParentMap getPreviousParentMap();
  public java.awt.geom.Rectangle2D getDirtyRegion();
  public void setDirtyRegion(java.awt.geom.Rectangle2D);
  public void addImplicitEdit(javax.swing.undo.UndoableEdit);
  public org.jgraph.graph.CellView[] getViews(org.jgraph.graph.GraphLayoutCache);
  public void putViews(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.CellView[]);
  public void redo() throws javax.swing.undo.CannotRedoException;
  public void undo() throws javax.swing.undo.CannotUndoException;
  public void execute();
  protected void updateListeners();
  protected java.util.List getParentList(java.lang.Object);
}
Compiled from "DefaultGraphSelectionModel.java"
public class org.jgraph.graph.DefaultGraphSelectionModel implements org.jgraph.graph.GraphSelectionModel,java.lang.Cloneable,java.io.Serializable {
  public static final java.lang.String SELECTION_MODE_PROPERTY;
  public static final int SELECTED;
  public static final java.lang.Integer UNSELECTED;
  protected org.jgraph.JGraph graph;
  protected javax.swing.event.SwingPropertyChangeSupport changeSupport;
  protected javax.swing.event.EventListenerList listenerList;
  protected int selectionMode;
  protected boolean childrenSelectable;
  protected java.util.Map cellStates;
  protected java.util.Set selection;
  public org.jgraph.graph.DefaultGraphSelectionModel(org.jgraph.JGraph);
  public void setSelectionMode(int);
  public int getSelectionMode();
  public void setChildrenSelectable(boolean);
  public boolean isChildrenSelectable();
  protected boolean isChildrenSelectable(java.lang.Object);
  public void setSelectionCell(java.lang.Object);
  public void setSelectionCells(java.lang.Object[]);
  public void addSelectionCell(java.lang.Object);
  public void addSelectionCells(java.lang.Object[]);
  public void removeSelectionCell(java.lang.Object);
  public void removeSelectionCells(java.lang.Object[]);
  public java.lang.Object[] getSelectables();
  public java.lang.Object getSelectionCell();
  public java.lang.Object[] getSelectionCells();
  public int getSelectionCount();
  public boolean isCellSelected(java.lang.Object);
  public boolean isChildrenSelected(java.lang.Object);
  public boolean isSelectionEmpty();
  public void clearSelection();
  protected int getSelectedChildCount(java.lang.Object);
  protected void setSelectedChildCount(java.lang.Object, int);
  protected boolean select(java.util.Set, java.lang.Object);
  protected boolean deselect(java.lang.Object);
  public void addGraphSelectionListener(org.jgraph.event.GraphSelectionListener);
  public void removeGraphSelectionListener(org.jgraph.event.GraphSelectionListener);
  protected void fireValueChanged(org.jgraph.event.GraphSelectionEvent);
  public java.util.EventListener[] getListeners(java.lang.Class);
  public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener);
  protected void notifyCellChange(java.util.Vector);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static {};
}
Compiled from "DefaultGraphSelectionModel.java"
public class org.jgraph.graph.DefaultGraphSelectionModel$CellPlaceHolder {
  protected boolean isNew;
  protected java.lang.Object cell;
  final org.jgraph.graph.DefaultGraphSelectionModel this$0;
  protected org.jgraph.graph.DefaultGraphSelectionModel$CellPlaceHolder(org.jgraph.graph.DefaultGraphSelectionModel, java.lang.Object, boolean);
  public java.lang.Object getCell();
  public boolean isNew();
  public void setCell(java.lang.Object);
  public void setNew(boolean);
}
Compiled from "DefaultPort.java"
public class org.jgraph.graph.DefaultPort extends org.jgraph.graph.DefaultGraphCell implements org.jgraph.graph.Port {
  protected java.util.HashSet edges;
  protected org.jgraph.graph.Port anchor;
  public org.jgraph.graph.DefaultPort();
  public org.jgraph.graph.DefaultPort(java.lang.Object);
  public org.jgraph.graph.DefaultPort(java.lang.Object, org.jgraph.graph.Port);
  public java.util.Iterator edges();
  public boolean addEdge(java.lang.Object);
  public boolean removeEdge(java.lang.Object);
  public java.util.Set getEdges();
  public void setEdges(java.util.Set);
  public org.jgraph.graph.Port getAnchor();
  public void setAnchor(org.jgraph.graph.Port);
  public java.lang.Object clone();
}
Compiled from "DefaultRealEditor.java"
public class org.jgraph.graph.DefaultRealEditor extends javax.swing.DefaultCellEditor implements org.jgraph.graph.GraphCellEditor {
  public org.jgraph.graph.DefaultRealEditor(javax.swing.JTextField);
  public org.jgraph.graph.DefaultRealEditor(javax.swing.JCheckBox);
  public org.jgraph.graph.DefaultRealEditor(javax.swing.JComboBox);
  public java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
}
Compiled from "Edge.java"
public interface org.jgraph.graph.Edge extends org.jgraph.graph.GraphCell {
  public abstract java.lang.Object getSource();
  public abstract java.lang.Object getTarget();
  public abstract void setSource(java.lang.Object);
  public abstract void setTarget(java.lang.Object);
}
Compiled from "Edge.java"
public interface org.jgraph.graph.Edge$Routing extends java.io.Serializable {
  public static final int NO_PREFERENCE;
  public abstract java.util.List route(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.EdgeView);
  public abstract int getPreferredLineStyle(org.jgraph.graph.EdgeView);
}
Compiled from "EdgeRenderer.java"
public class org.jgraph.graph.EdgeRenderer extends javax.swing.JComponent implements org.jgraph.graph.CellViewRenderer,java.io.Serializable {
  public static boolean HIT_LABEL_EXACT;
  protected static transient java.awt.Graphics fontGraphics;
  public static double LABELWIDTHBUFFER;
  public boolean simpleExtraLabels;
  public java.awt.Font extraLabelFont;
  protected transient java.awt.FontMetrics metrics;
  protected transient java.lang.ref.WeakReference graph;
  protected transient org.jgraph.graph.EdgeView view;
  protected transient int beginDeco;
  protected transient int endDeco;
  protected transient int beginSize;
  protected transient int endSize;
  protected transient int lineStyle;
  protected transient float lineWidth;
  protected transient boolean labelsEnabled;
  protected transient boolean labelBorder;
  protected transient boolean beginFill;
  protected transient boolean endFill;
  protected transient boolean focus;
  protected transient boolean selected;
  protected transient boolean preview;
  protected transient boolean opaque;
  protected transient boolean childrenSelected;
  protected transient boolean labelTransformEnabled;
  protected transient boolean isMoveBelowZero;
  protected transient java.awt.Color borderColor;
  protected transient java.awt.Color defaultForeground;
  protected transient java.awt.Color defaultBackground;
  protected transient java.awt.Color fontColor;
  protected transient float[] lineDash;
  protected transient float dashOffset;
  protected transient java.awt.Color gradientColor;
  protected transient java.awt.Color gridColor;
  protected transient java.awt.Color lockedHandleColor;
  protected transient java.awt.Color highlightColor;
  protected transient org.jgraph.util.Bezier bezier;
  protected transient org.jgraph.util.Spline2D spline;
  public org.jgraph.graph.EdgeRenderer();
  void setView(org.jgraph.graph.CellView);
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
  public boolean intersects(org.jgraph.JGraph, org.jgraph.graph.CellView, java.awt.Rectangle);
  public java.awt.geom.Rectangle2D getBounds(org.jgraph.graph.CellView);
  public java.awt.geom.Rectangle2D getLabelBounds(org.jgraph.JGraph, org.jgraph.graph.EdgeView);
  public java.awt.geom.Rectangle2D getExtraLabelBounds(org.jgraph.JGraph, org.jgraph.graph.EdgeView, int);
  public java.awt.geom.Rectangle2D getLabelBounds(java.awt.geom.Point2D, java.awt.Dimension, java.lang.String);
  public java.awt.geom.Point2D getLabelPosition(org.jgraph.graph.EdgeView);
  public java.awt.geom.Point2D getExtraLabelPosition(org.jgraph.graph.EdgeView, int);
  protected java.awt.geom.Point2D getLabelPosition(java.awt.geom.Point2D);
  public java.awt.Dimension getExtraLabelSize(org.jgraph.JGraph, org.jgraph.graph.EdgeView, int);
  public java.awt.Dimension getLabelSize(org.jgraph.graph.EdgeView, java.lang.String);
  protected void installAttributes(org.jgraph.graph.CellView);
  protected boolean isFillable(int);
  public java.awt.geom.Rectangle2D getPaintBounds(org.jgraph.graph.EdgeView);
  public void paint(java.awt.Graphics);
  protected void paintLabels(java.awt.Graphics);
  protected void paintEdge(java.awt.Graphics);
  protected void paintSelection(java.awt.Graphics);
  protected void beforeEdgePaint(java.awt.Graphics);
  protected void afterEdgePaint(java.awt.Graphics);
  protected void paintSelectionBorder(java.awt.Graphics);
  protected void translateGraphics(java.awt.Graphics);
  protected void paintLabel(java.awt.Graphics, java.lang.String, java.awt.geom.Point2D, boolean);
  protected java.awt.Shape createShape();
  protected java.awt.Shape createLineEnd(int, int, java.awt.geom.Point2D, java.awt.geom.Point2D);
  public java.awt.Color getGradientColor();
  public void setGradientColor(java.awt.Color);
  public void validate();
  public void revalidate();
  public void repaint(long, int, int, int, int);
  public void repaint(java.awt.Rectangle);
  protected void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object);
  public void firePropertyChange(java.lang.String, byte, byte);
  public void firePropertyChange(java.lang.String, char, char);
  public void firePropertyChange(java.lang.String, short, short);
  public void firePropertyChange(java.lang.String, int, int);
  public void firePropertyChange(java.lang.String, long, long);
  public void firePropertyChange(java.lang.String, float, float);
  public void firePropertyChange(java.lang.String, double, double);
  public void firePropertyChange(java.lang.String, boolean, boolean);
  static {};
}
Compiled from "EdgeView.java"
public class org.jgraph.graph.EdgeView extends org.jgraph.graph.AbstractCellView {
  public static transient org.jgraph.graph.EdgeRenderer renderer;
  protected java.util.List points;
  protected org.jgraph.graph.CellView source;
  protected org.jgraph.graph.CellView target;
  protected org.jgraph.graph.CellView sourceParentView;
  protected org.jgraph.graph.CellView targetParentView;
  protected java.awt.geom.Point2D labelPosition;
  protected java.awt.geom.Point2D[] extraLabelPositions;
  protected transient java.awt.geom.Point2D labelVector;
  public transient java.awt.Shape beginShape;
  public transient java.awt.Shape endShape;
  public transient java.awt.Shape lineShape;
  public transient java.awt.geom.GeneralPath sharedPath;
  protected transient java.awt.geom.Rectangle2D cachedBounds;
  public static boolean LEGACY_DISCONNECTABLE;
  public org.jgraph.graph.EdgeView();
  public org.jgraph.graph.EdgeView(java.lang.Object);
  public void refresh(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.CellMapper, boolean);
  protected org.jgraph.graph.CellView getVisibleParent(org.jgraph.graph.GraphModel, org.jgraph.graph.CellMapper, java.lang.Object);
  public void update(org.jgraph.graph.GraphLayoutCache);
  protected void checkDefaultLabelPosition();
  protected void invalidate();
  public java.awt.Shape getShape();
  public boolean intersects(org.jgraph.JGraph, java.awt.geom.Rectangle2D);
  public java.awt.geom.Rectangle2D getBounds();
  org.jgraph.graph.EdgeRenderer getEdgeRenderer();
  public org.jgraph.graph.CellViewRenderer getRenderer();
  public org.jgraph.graph.CellHandle getHandle(org.jgraph.graph.GraphContext);
  public org.jgraph.graph.CellView getSource();
  public org.jgraph.graph.CellView getSourceParentView();
  public void setSource(org.jgraph.graph.CellView);
  public org.jgraph.graph.CellView getTarget();
  public org.jgraph.graph.CellView getTargetParentView();
  public void setTarget(org.jgraph.graph.CellView);
  public java.awt.geom.Point2D getExtraLabelPosition(int);
  public java.awt.geom.Point2D getLabelPosition();
  public void setLabelPosition(java.awt.geom.Point2D);
  public void setExtraLabelPosition(int, java.awt.geom.Point2D);
  public boolean isLoop();
  public java.util.List getPoints();
  public int getPointCount();
  public java.awt.geom.Point2D getPoint(int);
  protected java.awt.geom.Point2D getNearestPoint(boolean);
  protected java.awt.geom.Point2D getPointLocation(int);
  public void setPoint(int, java.awt.geom.Point2D);
  public void addPoint(int, java.awt.geom.Point2D);
  public void removePoint(int);
  public void addExtraLabel(java.awt.geom.Point2D, java.lang.Object);
  public void removeExtraLabel(int);
  public int getFirstPointOfSegment();
  public java.awt.geom.Point2D getLabelVector();
  protected java.awt.geom.Point2D getAbsoluteLabelPosition();
  protected java.awt.geom.Point2D getAbsoluteExtraLabelPosition(int);
  protected java.awt.geom.Point2D getAbsoluteLabelPositionFromRelative(java.awt.geom.Point2D);
  protected java.awt.geom.Point2D convertRelativeLabelPositionToAbsolute(java.awt.geom.Point2D);
  public static double getLength(org.jgraph.graph.CellView);
  public java.awt.geom.Point2D getPerimeterPoint(org.jgraph.graph.EdgeView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  static {};
}
Compiled from "EdgeView.java"
public class org.jgraph.graph.EdgeView$EdgeHandle implements org.jgraph.graph.CellHandle,java.io.Serializable {
  protected org.jgraph.JGraph graph;
  protected org.jgraph.graph.EdgeView edge;
  protected org.jgraph.graph.EdgeView orig;
  protected boolean label;
  protected boolean source;
  protected boolean target;
  protected int currentLabel;
  protected int currentIndex;
  protected java.awt.geom.Point2D currentPoint;
  protected transient java.awt.geom.Rectangle2D[] r;
  protected transient java.awt.geom.Rectangle2D loc;
  protected transient java.awt.geom.Rectangle2D[] extraLabelLocations;
  protected boolean firstOverlayCall;
  protected boolean isEdgeConnectable;
  protected org.jgraph.graph.EdgeView relevantEdge;
  protected boolean editing;
  protected java.awt.geom.Point2D initialLabelLocation;
  protected boolean edgeModified;
  protected javax.swing.JComponent highlight;
  public org.jgraph.graph.EdgeView$EdgeHandle(org.jgraph.graph.EdgeView, org.jgraph.graph.GraphContext);
  protected javax.swing.JComponent createHighlight();
  protected void reloadPoints(org.jgraph.graph.EdgeView);
  public void paint(java.awt.Graphics);
  protected void highlight(org.jgraph.JGraph, org.jgraph.graph.CellView);
  protected java.awt.Rectangle getHighlightBounds(org.jgraph.JGraph, org.jgraph.graph.CellView);
  public void overlay(java.awt.Graphics);
  protected void paintPort(java.awt.Graphics, org.jgraph.graph.CellView);
  protected boolean snap(boolean, java.awt.geom.Point2D);
  public boolean isConstrainedMoveEvent(java.awt.event.MouseEvent);
  public boolean isAddPointEvent(java.awt.event.MouseEvent);
  public boolean isRemovePointEvent(java.awt.event.MouseEvent);
  protected boolean isSourceEditing();
  protected boolean isTargetEditing();
  protected boolean isEditing();
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  protected java.awt.geom.Point2D getRelativeLabelPosition(org.jgraph.graph.EdgeView, java.awt.geom.Point2D);
  public void mouseReleased(java.awt.event.MouseEvent);
  protected void processNestedMap(java.util.Map, boolean);
  protected org.jgraph.graph.ConnectionSet createConnectionSet(org.jgraph.graph.EdgeView, boolean);
  protected void invalidate();
}
Compiled from "ExecutableChange.java"
public abstract class org.jgraph.graph.ExecutableChange extends javax.swing.undo.AbstractUndoableEdit {
  public org.jgraph.graph.ExecutableChange();
  public void undo();
  public void redo();
  public abstract void execute();
}
Compiled from "GraphCell.java"
public interface org.jgraph.graph.GraphCell {
  public abstract org.jgraph.graph.AttributeMap getAttributes();
  public abstract java.util.Map changeAttributes(java.util.Map);
  public abstract void setAttributes(org.jgraph.graph.AttributeMap);
}
Compiled from "GraphCellEditor.java"
public interface org.jgraph.graph.GraphCellEditor extends javax.swing.CellEditor {
  public abstract java.awt.Component getGraphCellEditorComponent(org.jgraph.JGraph, java.lang.Object, boolean);
}
Compiled from "GraphConstants.java"
public class org.jgraph.graph.GraphConstants {
  public static java.awt.Font DEFAULTFONT;
  public static int DEFAULTDECORATIONSIZE;
  public static int DEFAULTINSET;
  public static final int PERMILLE;
  protected static float[] dash;
  public static java.awt.Stroke SELECTION_STROKE;
  public static final int ARROW_NONE;
  public static final int ARROW_CLASSIC;
  public static final int ARROW_TECHNICAL;
  public static final int ARROW_SIMPLE;
  public static final int ARROW_CIRCLE;
  public static final int ARROW_LINE;
  public static final int ARROW_DOUBLELINE;
  public static final int ARROW_DIAMOND;
  public static final int STYLE_ORTHOGONAL;
  public static final int STYLE_BEZIER;
  public static final int STYLE_SPLINE;
  public static final int X_AXIS;
  public static final int Y_AXIS;
  public static org.jgraph.graph.Edge$Routing ROUTING_DEFAULT;
  public static final org.jgraph.graph.Edge$Routing ROUTING_SIMPLE;
  public static final java.lang.String SIZEABLEAXIS;
  public static final java.lang.String MOVEABLEAXIS;
  public static final java.lang.String REPLACEATTRIBUTES;
  public static final java.lang.String REMOVEATTRIBUTES;
  public static final java.lang.String REMOVEALL;
  public static final java.lang.String ICON;
  public static final java.lang.String FONT;
  public static final java.lang.String OPAQUE;
  public static final java.lang.String GROUPOPAQUE;
  public static final java.lang.String BORDER;
  public static final java.lang.String LINECOLOR;
  public static final java.lang.String BORDERCOLOR;
  public static final java.lang.String LINEWIDTH;
  public static final java.lang.String FOREGROUND;
  public static final java.lang.String BACKGROUND;
  public static final java.lang.String GRADIENTCOLOR;
  public static final java.lang.String VERTICAL_ALIGNMENT;
  public static final java.lang.String HORIZONTAL_ALIGNMENT;
  public static final java.lang.String VERTICAL_TEXT_POSITION;
  public static final java.lang.String HORIZONTAL_TEXT_POSITION;
  public static final java.lang.String DASHPATTERN;
  public static final java.lang.String DASHOFFSET;
  public static final java.lang.String LINESTYLE;
  public static final java.lang.String LINEBEGIN;
  public static final java.lang.String LINEEND;
  public static final java.lang.String BEGINSIZE;
  public static final java.lang.String ENDSIZE;
  public static final java.lang.String BEGINFILL;
  public static final java.lang.String ENDFILL;
  public static final java.lang.String VALUE;
  public static final java.lang.String EDITABLE;
  public static final java.lang.String MOVEABLE;
  public static final java.lang.String SIZEABLE;
  public static final java.lang.String AUTOSIZE;
  public static final java.lang.String RESIZE;
  public static final java.lang.String INSET;
  public static final java.lang.String CONSTRAINED;
  public static final java.lang.String SELECTABLE;
  public static final java.lang.String CHILDRENSELECTABLE;
  public static final java.lang.String MOVEHIDDENCHILDREN;
  public static final java.lang.String BENDABLE;
  public static final java.lang.String CONNECTABLE;
  public static final java.lang.String DISCONNECTABLE;
  public static final java.lang.String BOUNDS;
  public static final java.lang.String POINTS;
  public static final java.lang.String ROUTING;
  public static final java.lang.String LABELPOSITION;
  public static final java.lang.String EXTRALABELS;
  public static final java.lang.String EXTRALABELPOSITIONS;
  public static final java.lang.String LABELALONGEDGE;
  public static final java.lang.String ABSOLUTEX;
  public static final java.lang.String ABSOLUTEY;
  public static final java.lang.String OFFSET;
  public static final java.lang.String SIZE;
  public static final java.lang.String LINK;
  public static final java.lang.String LABELENABLED;
  public static final java.lang.String EXACTSEGMENTRELATIVE;
  public org.jgraph.graph.GraphConstants();
  public static java.util.Map createAttributes(java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.util.Map createAttributes(java.lang.Object[], java.lang.Object, java.lang.Object);
  public static java.util.Map createAttributes(java.lang.Object[], java.lang.Object[], java.lang.Object[]);
  public static java.util.Map createAttributes(java.lang.Object[], org.jgraph.graph.CellMapper);
  public static java.util.Map createAttributesFromModel(java.lang.Object[], org.jgraph.graph.GraphModel);
  public static java.util.Map replaceKeys(java.util.Map, java.util.Map);
  public static java.util.Map merge(java.util.Map, java.util.Map);
  public static void setFont(java.util.Map, java.awt.Font);
  public static java.awt.Font getFont(java.util.Map);
  public static final void setRemoveAttributes(java.util.Map, java.lang.Object[]);
  public static final java.lang.Object[] getRemoveAttributes(java.util.Map);
  public static final void setMoveableAxis(java.util.Map, int);
  public static final int getMoveableAxis(java.util.Map);
  public static final void setSizeableAxis(java.util.Map, int);
  public static final int getSizeableAxis(java.util.Map);
  public static final void setIcon(java.util.Map, javax.swing.Icon);
  public static final javax.swing.Icon getIcon(java.util.Map);
  public static final void setOpaque(java.util.Map, boolean);
  public static final boolean isOpaque(java.util.Map);
  public static final void setGroupOpaque(java.util.Map, boolean);
  public static final boolean isGroupOpaque(java.util.Map);
  public static final void setBorder(java.util.Map, javax.swing.border.Border);
  public static final javax.swing.border.Border getBorder(java.util.Map);
  public static final void setLineColor(java.util.Map, java.awt.Color);
  public static final java.awt.Color getLineColor(java.util.Map);
  public static final void setBorderColor(java.util.Map, java.awt.Color);
  public static final java.awt.Color getBorderColor(java.util.Map);
  public static final void setLineWidth(java.util.Map, float);
  public static final float getLineWidth(java.util.Map);
  public static final void setForeground(java.util.Map, java.awt.Color);
  public static final java.awt.Color getForeground(java.util.Map);
  public static final void setBackground(java.util.Map, java.awt.Color);
  public static final java.awt.Color getBackground(java.util.Map);
  public static final void setGradientColor(java.util.Map, java.awt.Color);
  public static final java.awt.Color getGradientColor(java.util.Map);
  public static final void setVerticalAlignment(java.util.Map, int);
  public static final int getVerticalAlignment(java.util.Map);
  public static final void setHorizontalAlignment(java.util.Map, int);
  public static final int getHorizontalAlignment(java.util.Map);
  public static final void setVerticalTextPosition(java.util.Map, int);
  public static final int getVerticalTextPosition(java.util.Map);
  public static final void setHorizontalTextPosition(java.util.Map, int);
  public static final int getHorizontalTextPosition(java.util.Map);
  public static final void setDashPattern(java.util.Map, float[]);
  public static final float[] getDashPattern(java.util.Map);
  public static final void setDashOffset(java.util.Map, float);
  public static final float getDashOffset(java.util.Map);
  public static final void setLineStyle(java.util.Map, int);
  public static final int getLineStyle(java.util.Map);
  public static final void setBeginSize(java.util.Map, int);
  public static final int getBeginSize(java.util.Map);
  public static final void setEndSize(java.util.Map, int);
  public static final int getEndSize(java.util.Map);
  public static final void setLineBegin(java.util.Map, int);
  public static final int getLineBegin(java.util.Map);
  public static final void setLineEnd(java.util.Map, int);
  public static final int getLineEnd(java.util.Map);
  public static final void setValue(java.util.Map, java.lang.Object);
  public static final java.lang.Object getValue(java.util.Map);
  public static final void setLabelPosition(java.util.Map, java.awt.geom.Point2D);
  public static final java.awt.geom.Point2D getLabelPosition(java.util.Map);
  public static final void setExtraLabels(java.util.Map, java.lang.Object[]);
  public static final java.lang.Object[] getExtraLabels(java.util.Map);
  public static final void setExtraLabelPositions(java.util.Map, java.awt.geom.Point2D[]);
  public static final java.awt.geom.Point2D[] getExtraLabelPositions(java.util.Map);
  public static final void setLabelAlongEdge(java.util.Map, boolean);
  public static final boolean isLabelAlongEdge(java.util.Map);
  public static final void setEditable(java.util.Map, boolean);
  public static final boolean isEditable(java.util.Map);
  public static final void setMoveable(java.util.Map, boolean);
  public static final boolean isMoveable(java.util.Map);
  public static final void setSizeable(java.util.Map, boolean);
  public static final boolean isSizeable(java.util.Map);
  public static final void setAutoSize(java.util.Map, boolean);
  public static final boolean isAutoSize(java.util.Map);
  public static final void setResize(java.util.Map, boolean);
  public static final boolean isResize(java.util.Map);
  public static final void setConstrained(java.util.Map, boolean);
  public static final boolean isConstrained(java.util.Map);
  public static final void setSelectable(java.util.Map, boolean);
  public static final boolean isSelectable(java.util.Map);
  public static final void setChildrenSelectable(java.util.Map, boolean);
  public static final boolean isChildrenSelectable(java.util.Map);
  public static final void setBendable(java.util.Map, boolean);
  public static final boolean isBendable(java.util.Map);
  public static final void setConnectable(java.util.Map, boolean);
  public static final boolean isConnectable(java.util.Map);
  public static final void setDisconnectable(java.util.Map, boolean);
  public static final boolean isDisconnectable(java.util.Map);
  public static final void setPoints(java.util.Map, java.util.List);
  public static final java.util.List getPoints(java.util.Map);
  public static final void setRouting(java.util.Map, org.jgraph.graph.Edge$Routing);
  public static final org.jgraph.graph.Edge$Routing getRouting(java.util.Map);
  public static final void setBounds(java.util.Map, java.awt.geom.Rectangle2D);
  public static final java.awt.geom.Rectangle2D getBounds(java.util.Map);
  public static final void setInset(java.util.Map, int);
  public static final int getInset(java.util.Map);
  public static final void setSize(java.util.Map, java.awt.Dimension);
  public static final java.awt.Dimension getSize(java.util.Map);
  public static final void setOffset(java.util.Map, java.awt.geom.Point2D);
  public static final java.awt.geom.Point2D getOffset(java.util.Map);
  public static final void setBeginFill(java.util.Map, boolean);
  public static final boolean isBeginFill(java.util.Map);
  public static final void setEndFill(java.util.Map, boolean);
  public static final boolean isEndFill(java.util.Map);
  public static final void setAbsolute(java.util.Map, boolean);
  public static final void setAbsoluteY(java.util.Map, boolean);
  public static final boolean isAbsoluteY(java.util.Map);
  public static final void setAbsoluteX(java.util.Map, boolean);
  public static final boolean isAbsoluteX(java.util.Map);
  public static final void setRemoveAll(java.util.Map, boolean);
  public static final boolean isRemoveAll(java.util.Map);
  public static org.jgraph.graph.Edge$Routing getROUTING_SIMPLE();
  public static org.jgraph.graph.Edge$Routing getROUTING_DEFAULT();
  public static void setLink(java.util.Map, java.lang.String);
  public static java.lang.String getLink(java.util.Map);
  public static void setLabelEnabled(java.util.Map, boolean);
  public static boolean isLabelEnabled(java.util.Map);
  public static void setExactSegmentLabel(java.util.Map, boolean);
  public static boolean isExactSegmentLabel(java.util.Map);
  static {};
}
Compiled from "GraphContext.java"
public class org.jgraph.graph.GraphContext implements org.jgraph.graph.CellMapper {
  public static boolean PREVIEW_EDGE_GROUPS;
  protected org.jgraph.JGraph graph;
  protected transient org.jgraph.graph.GraphLayoutCache graphLayoutCache;
  protected java.lang.Object[] cells;
  protected java.util.Set allCells;
  protected java.util.Set cellSet;
  protected int cellCount;
  protected java.util.Map views;
  public org.jgraph.graph.GraphContext(org.jgraph.JGraph, java.lang.Object[]);
  public boolean isEmpty();
  public int getDescendantCount();
  public org.jgraph.JGraph getGraph();
  public java.lang.Object[] getCells();
  public boolean contains(java.lang.Object);
  public org.jgraph.graph.CellView[] createTemporaryCellViews();
  public org.jgraph.graph.CellView[] createTemporaryPortViews();
  public org.jgraph.graph.CellView[] createTemporaryContextViews();
  public org.jgraph.graph.CellView[] createTemporaryContextViews(java.util.Set);
  public org.jgraph.graph.CellView getMapping(java.lang.Object, boolean);
  public org.jgraph.graph.CellView createMapping(java.lang.Object);
  public org.jgraph.graph.ConnectionSet disconnect(org.jgraph.graph.CellView[]);
  public void putMapping(java.lang.Object, org.jgraph.graph.CellView);
  static {};
}
Compiled from "GraphLayoutCache.java"
public class org.jgraph.graph.GraphLayoutCache implements org.jgraph.graph.CellMapper,java.io.Serializable {
  protected boolean autoSizeOnValueChange;
  protected boolean showsExistingConnections;
  protected boolean showsChangedConnections;
  protected boolean showsInvisibleEditedCells;
  protected boolean showsInsertedCells;
  protected boolean showsInsertedConnections;
  protected boolean hidesExistingConnections;
  protected boolean hidesDanglingConnections;
  protected boolean remembersCellViews;
  protected boolean selectsAllInsertedCells;
  protected boolean selectsLocalInsertedCells;
  protected boolean movesChildrenOnExpand;
  protected boolean movesParentsOnCollapse;
  protected boolean resizesParentsOnCollapse;
  protected double collapseXScale;
  protected double collapseYScale;
  protected boolean reconnectsEdgesToVisibleParent;
  protected javax.swing.event.EventListenerList listenerList;
  protected org.jgraph.graph.GraphModel graphModel;
  protected java.util.Map mapping;
  protected transient java.util.Map hiddenMapping;
  protected org.jgraph.graph.CellViewFactory factory;
  protected java.util.Set visibleSet;
  protected java.util.List roots;
  protected org.jgraph.graph.PortView[] ports;
  protected boolean partial;
  protected boolean allAttributesLocal;
  protected java.util.Set localAttributes;
  public org.jgraph.graph.GraphLayoutCache();
  public org.jgraph.graph.GraphLayoutCache(org.jgraph.graph.GraphModel, org.jgraph.graph.CellViewFactory);
  public org.jgraph.graph.GraphLayoutCache(org.jgraph.graph.GraphModel, org.jgraph.graph.CellViewFactory, boolean);
  public org.jgraph.graph.GraphLayoutCache(org.jgraph.graph.GraphModel, org.jgraph.graph.CellViewFactory, org.jgraph.graph.CellView[], org.jgraph.graph.CellView[], boolean);
  public void addGraphLayoutCacheListener(org.jgraph.event.GraphLayoutCacheListener);
  public void removeGraphLayoutCacheListener(org.jgraph.event.GraphLayoutCacheListener);
  public void cellViewsChanged(org.jgraph.graph.CellView[]);
  protected void fireGraphLayoutCacheChanged(java.lang.Object, org.jgraph.event.GraphLayoutCacheEvent$GraphLayoutCacheChange);
  public org.jgraph.event.GraphLayoutCacheListener[] getGraphLayoutCacheListeners();
  public void setFactory(org.jgraph.graph.CellViewFactory);
  public org.jgraph.graph.CellViewFactory getFactory();
  public void setModel(org.jgraph.graph.GraphModel);
  public void update();
  public org.jgraph.graph.CellView[] getCellViews();
  public static java.awt.geom.Rectangle2D getBounds(org.jgraph.graph.CellView[]);
  public java.lang.Object[] getCells(boolean, boolean, boolean, boolean);
  public java.util.Map createNestedMap();
  public org.jgraph.graph.CellView[] getHiddenCellViews();
  public synchronized void reload();
  public org.jgraph.graph.GraphModel getModel();
  public org.jgraph.graph.CellView[] getRoots();
  public org.jgraph.graph.CellView[] getRoots(java.awt.geom.Rectangle2D);
  public java.lang.Object[] getVisibleCells(java.lang.Object[]);
  public org.jgraph.graph.PortView[] getPorts();
  protected void updatePorts();
  public void refresh(org.jgraph.graph.CellView[], boolean);
  public void refresh(org.jgraph.graph.CellView, boolean);
  public void update(org.jgraph.graph.CellView[]);
  public void update(org.jgraph.graph.CellView);
  public void graphChanged(org.jgraph.event.GraphModelEvent$GraphModelChange);
  protected void reloadRoots();
  protected java.lang.Object[] getContext(org.jgraph.event.GraphModelEvent$GraphModelChange);
  protected void hideCellsForChange(org.jgraph.event.GraphModelEvent$GraphModelChange);
  protected boolean hasVisibleParent(java.lang.Object, java.util.Set);
  protected void showCellsForChange(org.jgraph.event.GraphModelEvent$GraphModelChange);
  public void insertViews(org.jgraph.graph.CellView[]);
  public org.jgraph.graph.CellView[] removeCells(java.lang.Object[]);
  public java.lang.Object[] getCells(org.jgraph.graph.CellView[]);
  public org.jgraph.graph.CellView getMapping(java.lang.Object, boolean);
  public org.jgraph.graph.CellView[] getMapping(java.lang.Object[]);
  public org.jgraph.graph.CellView[] getMapping(java.lang.Object[], boolean);
  public void putMapping(java.lang.Object, org.jgraph.graph.CellView);
  public org.jgraph.graph.CellView removeMapping(java.lang.Object);
  public boolean isVisible(java.lang.Object);
  public java.util.Set getVisibleSet();
  public void setVisibleSet(java.util.Set);
  public void setVisible(java.lang.Object, boolean);
  public void setVisible(java.lang.Object[], boolean);
  public void setVisible(java.lang.Object[], java.lang.Object[]);
  public void setVisible(java.lang.Object[], java.lang.Object[], org.jgraph.graph.ConnectionSet);
  public void setVisible(java.lang.Object[], java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet);
  protected java.lang.Object[] addVisibleDependencies(java.lang.Object[], boolean);
  public boolean setVisibleImpl(java.lang.Object[], boolean);
  protected java.util.Collection getParentPorts(java.lang.Object);
  protected java.util.Collection getPorts(java.lang.Object);
  public boolean isPartial();
  public boolean getPartial();
  public void valueForCellChanged(java.lang.Object, java.lang.Object);
  protected void augmentNestedMapForValueChange(java.util.Map, java.lang.Object, java.lang.Object);
  public void insert(java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public java.lang.Object[] insertClones(java.lang.Object[], java.util.Map, java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, double, double);
  public void insert(java.lang.Object);
  public void insertEdge(java.lang.Object, java.lang.Object, java.lang.Object);
  public void insert(java.lang.Object[]);
  public void insert(java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap);
  public void insertGroup(java.lang.Object, java.lang.Object[]);
  public void remove(java.lang.Object[]);
  public void remove(java.lang.Object[], boolean, boolean);
  public void hideCells(java.lang.Object[], boolean);
  public void showCells(java.lang.Object[], boolean);
  public java.lang.Object[] ungroup(java.lang.Object[]);
  public void toggleCollapsedState(java.lang.Object[], boolean, boolean);
  public void collapse(java.lang.Object[]);
  public void expand(java.lang.Object[]);
  public void setCollapsedState(java.lang.Object[], java.lang.Object[]);
  protected java.lang.Object getParentPort(java.lang.Object, boolean);
  protected java.lang.Object getChildPort(java.lang.Object, boolean);
  public void edit(java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public void edit(java.util.Map);
  public void edit(java.lang.Object[], java.util.Map);
  public void editCell(java.lang.Object, java.util.Map);
  protected javax.swing.undo.UndoableEdit[] augment(javax.swing.undo.UndoableEdit[], javax.swing.undo.UndoableEdit);
  public void toBack(java.lang.Object[]);
  public void toFront(java.lang.Object[]);
  protected org.jgraph.graph.GraphLayoutCache$GraphLayoutCacheEdit createLocalEdit(java.lang.Object[], java.util.Map, java.lang.Object[], java.lang.Object[]);
  protected boolean isLocalAttribute(java.lang.Object, java.lang.Object, java.lang.Object);
  protected boolean isControlAttribute(java.lang.Object, java.lang.Object, java.lang.Object);
  public boolean removeViewLocalAttribute(java.lang.Object, boolean, boolean);
  protected void cellExpanded(java.lang.Object);
  protected void cellWillCollapse(java.lang.Object);
  protected java.util.Map handleAttributes(java.util.Map);
  public static void translateViews(org.jgraph.graph.CellView[], double, double);
  public java.util.List getNeighbours(java.lang.Object, java.util.Set, boolean, boolean);
  public java.util.List getOutgoingEdges(java.lang.Object, java.util.Set, boolean, boolean);
  public java.util.List getIncomingEdges(java.lang.Object, java.util.Set, boolean, boolean);
  protected java.util.List getEdges(java.lang.Object, java.util.Set, boolean, boolean, boolean);
  public org.jgraph.graph.CellView[] getAllViews();
  public org.jgraph.graph.CellView[] getAllDescendants(org.jgraph.graph.CellView[]);
  public java.util.Map getHiddenMapping();
  public void setShowsExistingConnections(boolean);
  public boolean isShowsExistingConnections();
  public void setShowsInsertedConnections(boolean);
  public boolean isShowsInsertedConnections();
  public void setHidesExistingConnections(boolean);
  public boolean isHidesExistingConnections();
  public void setHidesDanglingConnections(boolean);
  public boolean isHidesDanglingConnections();
  public void setRemembersCellViews(boolean);
  public boolean isRemembersCellViews();
  public void setHiddenSet(java.util.Map);
  public java.util.Set getLocalAttributes();
  public void setLocalAttributes(java.util.Set);
  public boolean isAllAttributesLocal();
  public void setAllAttributesLocal(boolean);
  public boolean isAutoSizeOnValueChange();
  public void setAutoSizeOnValueChange(boolean);
  public boolean isSelectsAllInsertedCells();
  public void setSelectsAllInsertedCells(boolean);
  public boolean isSelectsLocalInsertedCells();
  public void setSelectsLocalInsertedCells(boolean);
  public boolean isReconnectsEdgesToVisibleParent();
  public void setReconnectsEdgesToVisibleParent(boolean);
  public boolean isShowsChangedConnections();
  public void setShowsChangedConnections(boolean);
  public boolean isMovesChildrenOnExpand();
  public void setMovesChildrenOnExpand(boolean);
  public boolean isShowsInvisibleEditedCells();
  public void setShowsInvisibleEditedCells(boolean);
  public double getCollapseXScale();
  public void setCollapseXScale(double);
  public double getCollapseYScale();
  public void setCollapseYScale(double);
  public boolean isMovesParentsOnCollapse();
  public void setMovesParentsOnCollapse(boolean);
  public boolean isResizesParentsOnCollapse();
  public void setResizesParentsOnCollapse(boolean);
}
Compiled from "GraphLayoutCache.java"
class org.jgraph.graph.GraphLayoutCache$1 implements org.jgraph.event.GraphLayoutCacheEvent$GraphLayoutCacheChange {
  final org.jgraph.graph.CellView[] val$cellViews;
  final org.jgraph.graph.GraphLayoutCache this$0;
  org.jgraph.graph.GraphLayoutCache$1(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.CellView[]);
  public java.lang.Object[] getInserted();
  public java.lang.Object[] getRemoved();
  public java.util.Map getPreviousAttributes();
  public java.lang.Object getSource();
  public java.lang.Object[] getChanged();
  public java.util.Map getAttributes();
  public java.lang.Object[] getContext();
  public java.awt.geom.Rectangle2D getDirtyRegion();
  public void setDirtyRegion(java.awt.geom.Rectangle2D);
}
Compiled from "GraphLayoutCache.java"
public class org.jgraph.graph.GraphLayoutCache$GraphLayoutCacheEdit extends javax.swing.undo.CompoundEdit implements org.jgraph.event.GraphLayoutCacheEvent$GraphLayoutCacheChange {
  protected java.lang.Object[] cells;
  protected java.lang.Object[] previousCells;
  protected org.jgraph.graph.CellView[] context;
  protected org.jgraph.graph.CellView[] hidden;
  protected java.util.Map attributes;
  protected java.util.Map previousAttributes;
  protected java.lang.Object[] visible;
  protected java.lang.Object[] invisible;
  protected java.awt.geom.Rectangle2D dirtyRegion;
  protected java.util.Set changedCells;
  final org.jgraph.graph.GraphLayoutCache this$0;
  public org.jgraph.graph.GraphLayoutCache$GraphLayoutCacheEdit(org.jgraph.graph.GraphLayoutCache, java.util.Map);
  public org.jgraph.graph.GraphLayoutCache$GraphLayoutCacheEdit(org.jgraph.graph.GraphLayoutCache, java.lang.Object[], java.util.Map, java.lang.Object[], java.lang.Object[]);
  public java.lang.Object getSource();
  public boolean isSignificant();
  public java.lang.Object[] getChanged();
  public java.lang.Object[] getInserted();
  public java.lang.Object[] getRemoved();
  public java.lang.Object[] getContext();
  public java.util.Map getAttributes();
  public java.util.Map getPreviousAttributes();
  public java.awt.geom.Rectangle2D getDirtyRegion();
  public void setDirtyRegion(java.awt.geom.Rectangle2D);
  public void redo() throws javax.swing.undo.CannotRedoException;
  public void undo() throws javax.swing.undo.CannotUndoException;
  public void execute();
}
Compiled from "GraphModel.java"
public interface org.jgraph.graph.GraphModel {
  public abstract int getRootCount();
  public abstract java.lang.Object getRootAt(int);
  public abstract int getIndexOfRoot(java.lang.Object);
  public abstract boolean contains(java.lang.Object);
  public abstract org.jgraph.graph.AttributeMap getAttributes(java.lang.Object);
  public abstract java.lang.Object getValue(java.lang.Object);
  public abstract java.lang.Object getSource(java.lang.Object);
  public abstract java.lang.Object getTarget(java.lang.Object);
  public abstract boolean acceptsSource(java.lang.Object, java.lang.Object);
  public abstract boolean acceptsTarget(java.lang.Object, java.lang.Object);
  public abstract java.util.Iterator edges(java.lang.Object);
  public abstract boolean isEdge(java.lang.Object);
  public abstract boolean isPort(java.lang.Object);
  public abstract java.lang.Object getParent(java.lang.Object);
  public abstract int getIndexOfChild(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object getChild(java.lang.Object, int);
  public abstract int getChildCount(java.lang.Object);
  public abstract boolean isLeaf(java.lang.Object);
  public abstract void insert(java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public abstract void remove(java.lang.Object[]);
  public abstract void edit(java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, javax.swing.undo.UndoableEdit[]);
  public abstract void beginUpdate();
  public abstract void endUpdate();
  public abstract void execute(org.jgraph.graph.ExecutableChange);
  public abstract java.util.Map cloneCells(java.lang.Object[]);
  public abstract java.lang.Object valueForCellChanged(java.lang.Object, java.lang.Object);
  public abstract void toBack(java.lang.Object[]);
  public abstract void toFront(java.lang.Object[]);
  public abstract void addGraphModelListener(org.jgraph.event.GraphModelListener);
  public abstract void removeGraphModelListener(org.jgraph.event.GraphModelListener);
  public abstract void addUndoableEditListener(javax.swing.event.UndoableEditListener);
  public abstract void removeUndoableEditListener(javax.swing.event.UndoableEditListener);
}
Compiled from "GraphSelectionModel.java"
public interface org.jgraph.graph.GraphSelectionModel {
  public static final int SINGLE_GRAPH_SELECTION;
  public static final int MULTIPLE_GRAPH_SELECTION;
  public abstract void setSelectionMode(int);
  public abstract void setChildrenSelectable(boolean);
  public abstract boolean isChildrenSelectable();
  public abstract int getSelectionMode();
  public abstract void setSelectionCell(java.lang.Object);
  public abstract void setSelectionCells(java.lang.Object[]);
  public abstract void addSelectionCell(java.lang.Object);
  public abstract void addSelectionCells(java.lang.Object[]);
  public abstract void removeSelectionCell(java.lang.Object);
  public abstract void removeSelectionCells(java.lang.Object[]);
  public abstract java.lang.Object[] getSelectables();
  public abstract java.lang.Object getSelectionCell();
  public abstract java.lang.Object[] getSelectionCells();
  public abstract int getSelectionCount();
  public abstract boolean isCellSelected(java.lang.Object);
  public abstract boolean isChildrenSelected(java.lang.Object);
  public abstract boolean isSelectionEmpty();
  public abstract void clearSelection();
  public abstract void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public abstract void removePropertyChangeListener(java.beans.PropertyChangeListener);
  public abstract void addGraphSelectionListener(org.jgraph.event.GraphSelectionListener);
  public abstract void removeGraphSelectionListener(org.jgraph.event.GraphSelectionListener);
}
Compiled from "GraphTransferHandler.java"
public class org.jgraph.graph.GraphTransferHandler extends javax.swing.TransferHandler {
  protected boolean alwaysReceiveAsCopyAction;
  protected java.lang.Object out;
  protected java.lang.Object in;
  protected int inCount;
  public org.jgraph.graph.GraphTransferHandler();
  public boolean canImport(javax.swing.JComponent, java.awt.datatransfer.DataFlavor[]);
  public java.awt.datatransfer.Transferable createTransferableForGraph(org.jgraph.JGraph);
  protected java.awt.datatransfer.Transferable createTransferable(javax.swing.JComponent);
  protected java.awt.datatransfer.Transferable createTransferable(org.jgraph.JGraph, java.lang.Object[]);
  protected org.jgraph.graph.GraphTransferable create(org.jgraph.JGraph, java.lang.Object[], java.util.Map, java.awt.geom.Rectangle2D, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap);
  protected void exportDone(javax.swing.JComponent, java.awt.datatransfer.Transferable, int);
  public int getSourceActions(javax.swing.JComponent);
  public boolean importData(javax.swing.JComponent, java.awt.datatransfer.Transferable);
  protected java.awt.geom.Point2D getInsertionOffset(org.jgraph.JGraph, int, java.awt.geom.Rectangle2D);
  protected void handleExternalDrop(org.jgraph.JGraph, java.lang.Object[], java.util.Map, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap, double, double);
  protected boolean importDataImpl(javax.swing.JComponent, java.awt.datatransfer.Transferable);
  public boolean isAlwaysReceiveAsCopyAction();
  public void setAlwaysReceiveAsCopyAction(boolean);
}
Compiled from "GraphTransferable.java"
public class org.jgraph.graph.GraphTransferable extends org.jgraph.plaf.basic.BasicGraphTransferable implements java.io.Serializable,java.awt.datatransfer.ClipboardOwner {
  public static java.awt.datatransfer.DataFlavor dataFlavor;
  protected java.lang.Object[] cells;
  protected org.jgraph.graph.ConnectionSet cs;
  protected org.jgraph.graph.ParentMap pm;
  protected java.util.Map attributeMap;
  protected java.awt.geom.Rectangle2D bounds;
  public org.jgraph.graph.GraphTransferable(java.lang.Object[], java.util.Map, java.awt.geom.Rectangle2D, org.jgraph.graph.ConnectionSet, org.jgraph.graph.ParentMap);
  public java.lang.Object[] getCells();
  public org.jgraph.graph.ConnectionSet getConnectionSet();
  public org.jgraph.graph.ParentMap getParentMap();
  public java.util.Map getAttributeMap();
  public java.awt.geom.Rectangle2D getBounds();
  public void lostOwnership(java.awt.datatransfer.Clipboard, java.awt.datatransfer.Transferable);
  public java.awt.datatransfer.DataFlavor[] getRicherFlavors();
  public java.lang.Object getRicherData(java.awt.datatransfer.DataFlavor) throws java.awt.datatransfer.UnsupportedFlavorException;
  public boolean isPlainSupported();
  public java.lang.String getPlainData();
  public boolean isHTMLSupported();
  public java.lang.String getHTMLData();
  static {};
}
Compiled from "GraphUndoManager.java"
public class org.jgraph.graph.GraphUndoManager extends javax.swing.undo.UndoManager {
  public org.jgraph.graph.GraphUndoManager();
  public synchronized boolean canUndo(java.lang.Object);
  public synchronized boolean canRedo(java.lang.Object);
  public void undo(java.lang.Object);
  protected javax.swing.undo.UndoableEdit editToBeUndone(java.lang.Object);
  protected javax.swing.undo.UndoableEdit nextEditToBeUndone(javax.swing.undo.UndoableEdit);
  public void redo(java.lang.Object);
  protected javax.swing.undo.UndoableEdit editToBeRedone(java.lang.Object);
  protected javax.swing.undo.UndoableEdit nextEditToBeRedone(javax.swing.undo.UndoableEdit);
}
Compiled from "ParentMap.java"
public class org.jgraph.graph.ParentMap implements java.io.Serializable {
  protected java.util.ArrayList entries;
  protected java.util.Set changedNodes;
  protected java.util.Map childCount;
  public org.jgraph.graph.ParentMap();
  public org.jgraph.graph.ParentMap(java.lang.Object[], java.lang.Object);
  public static org.jgraph.graph.ParentMap create(org.jgraph.graph.GraphModel, java.lang.Object[], boolean, boolean);
  public void addEntry(java.lang.Object, java.lang.Object);
  public void addEntries(java.lang.Object[], java.lang.Object);
  public int size();
  public java.util.Iterator entries();
  public java.util.Set getChangedNodes();
  public org.jgraph.graph.ParentMap clone(java.util.Map);
  public java.lang.String toString();
}
Compiled from "ParentMap.java"
public class org.jgraph.graph.ParentMap$Entry implements java.io.Serializable {
  protected java.lang.Object child;
  protected java.lang.Object parent;
  final org.jgraph.graph.ParentMap this$0;
  public org.jgraph.graph.ParentMap$Entry(org.jgraph.graph.ParentMap, java.lang.Object, java.lang.Object);
  public java.lang.Object getChild();
  public java.lang.Object getParent();
}
Compiled from "Port.java"
public interface org.jgraph.graph.Port extends org.jgraph.graph.GraphCell {
  public abstract java.util.Iterator edges();
  public abstract boolean addEdge(java.lang.Object);
  public abstract boolean removeEdge(java.lang.Object);
  public abstract org.jgraph.graph.Port getAnchor();
  public abstract void setAnchor(org.jgraph.graph.Port);
}
Compiled from "PortRenderer.java"
public class org.jgraph.graph.PortRenderer extends javax.swing.JComponent implements org.jgraph.graph.CellViewRenderer,java.io.Serializable {
  protected transient org.jgraph.graph.PortView view;
  protected java.awt.Color graphBackground;
  protected transient boolean hasFocus;
  protected transient boolean selected;
  protected transient boolean preview;
  protected transient boolean xorEnabled;
  public org.jgraph.graph.PortRenderer();
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
  public void paint(java.awt.Graphics);
  public void validate();
  public void revalidate();
  public void repaint(long, int, int, int, int);
  public void repaint(java.awt.Rectangle);
  protected void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object);
  public void firePropertyChange(java.lang.String, byte, byte);
  public void firePropertyChange(java.lang.String, char, char);
  public void firePropertyChange(java.lang.String, short, short);
  public void firePropertyChange(java.lang.String, int, int);
  public void firePropertyChange(java.lang.String, long, long);
  public void firePropertyChange(java.lang.String, float, float);
  public void firePropertyChange(java.lang.String, double, double);
  public void firePropertyChange(java.lang.String, boolean, boolean);
}
Compiled from "PortView.java"
public class org.jgraph.graph.PortView extends org.jgraph.graph.AbstractCellView {
  public static transient int SIZE;
  public static transient org.jgraph.graph.PortRenderer renderer;
  public static boolean allowPortMagic;
  protected transient org.jgraph.graph.CellView lastParent;
  public org.jgraph.graph.PortView();
  public org.jgraph.graph.PortView(java.lang.Object);
  public org.jgraph.graph.CellView getParentView();
  public java.awt.geom.Rectangle2D getBounds();
  public org.jgraph.graph.CellViewRenderer getRenderer();
  public org.jgraph.graph.CellHandle getHandle(org.jgraph.graph.GraphContext);
  public java.awt.geom.Point2D getLocation();
  public java.awt.geom.Point2D getLocation(org.jgraph.graph.EdgeView);
  public java.awt.geom.Point2D getLocation(org.jgraph.graph.EdgeView, java.awt.geom.Point2D);
  protected boolean shouldInvokePortMagic(org.jgraph.graph.EdgeView);
  public int getPortSize();
  public void setPortSize(int);
  static {};
}
Compiled from "VertexRenderer.java"
public class org.jgraph.graph.VertexRenderer extends javax.swing.JLabel implements org.jgraph.graph.CellViewRenderer,java.io.Serializable {
  protected transient org.jgraph.graph.VertexView view;
  protected transient boolean hasFocus;
  protected transient boolean selected;
  protected transient boolean preview;
  protected transient boolean childrenSelected;
  protected transient java.awt.Color defaultForeground;
  protected transient java.awt.Color defaultBackground;
  protected transient java.awt.Color bordercolor;
  protected transient int borderWidth;
  protected transient boolean isDoubleBuffered;
  protected transient boolean labelEnabled;
  protected transient java.awt.Color gradientColor;
  protected transient java.awt.Color gridColor;
  protected transient java.awt.Color highlightColor;
  protected transient java.awt.Color lockedHandleColor;
  public org.jgraph.graph.VertexRenderer();
  public java.awt.Component getRendererComponent(org.jgraph.JGraph, org.jgraph.graph.CellView, boolean, boolean, boolean);
  protected void resetAttributes();
  protected void installAttributes(org.jgraph.graph.CellView);
  public void paint(java.awt.Graphics);
  protected void paintSelectionBorder(java.awt.Graphics);
  public java.awt.geom.Point2D getPerimeterPoint(org.jgraph.graph.VertexView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  public void validate();
  public void revalidate();
  public void repaint(long, int, int, int, int);
  public void repaint(java.awt.Rectangle);
  protected void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object);
  public void firePropertyChange(java.lang.String, byte, byte);
  public void firePropertyChange(java.lang.String, char, char);
  public void firePropertyChange(java.lang.String, short, short);
  public void firePropertyChange(java.lang.String, int, int);
  public void firePropertyChange(java.lang.String, long, long);
  public void firePropertyChange(java.lang.String, float, float);
  public void firePropertyChange(java.lang.String, double, double);
  public void firePropertyChange(java.lang.String, boolean, boolean);
  public java.awt.Color getGradientColor();
  public void setGradientColor(java.awt.Color);
}
Compiled from "VertexView.java"
public class org.jgraph.graph.VertexView extends org.jgraph.graph.AbstractCellView {
  public static transient org.jgraph.graph.VertexRenderer renderer;
  public static final java.awt.geom.Rectangle2D defaultBounds;
  protected java.awt.geom.Rectangle2D bounds;
  public static transient int[] defaultCursors;
  public static transient int[] xCursors;
  public static transient int[] yCursors;
  public org.jgraph.graph.VertexView();
  public org.jgraph.graph.VertexView(java.lang.Object);
  public void update(org.jgraph.graph.GraphLayoutCache);
  public java.awt.geom.Rectangle2D getCachedBounds();
  public void setCachedBounds(java.awt.geom.Rectangle2D);
  public org.jgraph.graph.CellViewRenderer getRenderer();
  public org.jgraph.graph.CellHandle getHandle(org.jgraph.graph.GraphContext);
  public java.awt.geom.Rectangle2D getBounds();
  public java.awt.geom.Point2D getCenterPoint();
  public java.awt.geom.Point2D getPerimeterPoint(java.awt.geom.Point2D, java.awt.geom.Point2D);
  public java.awt.geom.Point2D getPerimeterPoint(org.jgraph.graph.EdgeView, java.awt.geom.Point2D, java.awt.geom.Point2D);
  static {};
}
Compiled from "VertexView.java"
public class org.jgraph.graph.VertexView$SizeHandle implements org.jgraph.graph.CellHandle,java.io.Serializable {
  protected transient java.awt.Graphics offgraphics;
  protected transient boolean firstDrag;
  protected transient org.jgraph.JGraph graph;
  protected transient org.jgraph.graph.VertexView vertex;
  protected transient org.jgraph.graph.CellView[] portViews;
  protected transient java.awt.geom.Rectangle2D cachedBounds;
  protected transient org.jgraph.graph.GraphContext context;
  protected transient java.awt.geom.Rectangle2D initialBounds;
  protected transient org.jgraph.graph.CellView[] contextViews;
  protected transient int index;
  protected transient java.awt.geom.Rectangle2D[] r;
  protected boolean firstOverlayInvocation;
  public transient int[] cursors;
  protected boolean editing;
  public org.jgraph.graph.VertexView$SizeHandle(org.jgraph.graph.VertexView, org.jgraph.graph.GraphContext);
  public boolean isConstrainedSizeEvent(java.awt.event.MouseEvent);
  public void paint(java.awt.Graphics);
  protected void initOffscreen();
  public void overlay(java.awt.Graphics);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  protected java.awt.geom.Rectangle2D computeBounds(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  protected void invalidate();
}
Compiled from "mxGraphBridge.java"
public class org.jgraph.graph.mxGraphBridge {
  protected com.mxgraph.view.mxGraphView mxView;
  protected com.mxgraph.view.mxGraph graph;
  protected org.jgraph.JGraph jgraph;
  protected com.jgraph.layout.JGraphFacade facade;
  protected java.util.Map<java.lang.Object, java.lang.Object> edges;
  protected java.util.Map<java.lang.Object, java.lang.Object> vertices;
  public org.jgraph.graph.mxGraphBridge();
  public org.jgraph.graph.mxGraphBridge(com.jgraph.layout.JGraphFacade);
  public void syncMx(org.jgraph.JGraph);
  public void syncJGraphFacade();
  protected void insertCell(java.lang.Object, java.lang.Object);
  public java.lang.Object getVertexMapping(java.lang.Object);
  public com.mxgraph.view.mxGraph getGraph();
}
Compiled from "GraphUI.java"
public abstract class org.jgraph.plaf.GraphUI extends javax.swing.plaf.ComponentUI {
  public org.jgraph.plaf.GraphUI();
  public abstract void paintCell(java.awt.Graphics, org.jgraph.graph.CellView, java.awt.geom.Rectangle2D, boolean);
  public abstract void paintPorts(java.awt.Graphics, org.jgraph.graph.CellView[]);
  public abstract void selectCellsForEvent(org.jgraph.JGraph, java.lang.Object[], java.awt.event.MouseEvent);
  public abstract java.awt.geom.Dimension2D getPreferredSize(org.jgraph.JGraph, org.jgraph.graph.CellView);
  public abstract org.jgraph.graph.CellHandle getHandle();
  public abstract boolean isEditing(org.jgraph.JGraph);
  public abstract boolean stopEditing(org.jgraph.JGraph);
  public abstract void cancelEditing(org.jgraph.JGraph);
  public abstract void startEditingAtCell(org.jgraph.JGraph, java.lang.Object);
  public abstract java.lang.Object getEditingCell(org.jgraph.JGraph);
  public abstract void setInsertionLocation(java.awt.Point);
  public abstract java.awt.Point getInsertionLocation();
  public abstract void updateHandle();
  public abstract int getDropAction();
}
Compiled from "BasicGraphDropTargetListener.java"
public class org.jgraph.plaf.basic.BasicGraphDropTargetListener implements java.awt.dnd.DropTargetListener,javax.swing.plaf.UIResource,java.awt.event.ActionListener {
  public org.jgraph.plaf.basic.BasicGraphDropTargetListener();
  protected void saveComponentState(javax.swing.JComponent);
  protected void restoreComponentState(javax.swing.JComponent);
  protected void restoreComponentStateForDrop(javax.swing.JComponent);
  protected void updateInsertionLocation(javax.swing.JComponent, java.awt.Point);
  void updateAutoscrollRegion(javax.swing.JComponent);
  void autoscroll(javax.swing.JComponent, java.awt.Point);
  static javax.swing.JComponent getComponent(java.awt.dnd.DropTargetEvent);
  public synchronized void actionPerformed(java.awt.event.ActionEvent);
  public void dragEnter(java.awt.dnd.DropTargetDragEvent);
  public void dragOver(java.awt.dnd.DropTargetDragEvent);
  public void dragExit(java.awt.dnd.DropTargetEvent);
  public void drop(java.awt.dnd.DropTargetDropEvent);
  public void dropActionChanged(java.awt.dnd.DropTargetDragEvent);
}
Compiled from "BasicGraphTransferable.java"
public class org.jgraph.plaf.basic.BasicGraphTransferable implements java.awt.datatransfer.Transferable,javax.swing.plaf.UIResource,java.io.Serializable {
  public org.jgraph.plaf.basic.BasicGraphTransferable();
  public java.awt.datatransfer.DataFlavor[] getTransferDataFlavors();
  public boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor);
  public java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor) throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException;
  protected boolean isRicherFlavor(java.awt.datatransfer.DataFlavor);
  protected java.awt.datatransfer.DataFlavor[] getRicherFlavors();
  protected java.lang.Object getRicherData(java.awt.datatransfer.DataFlavor) throws java.awt.datatransfer.UnsupportedFlavorException;
  protected boolean isHTMLFlavor(java.awt.datatransfer.DataFlavor);
  protected boolean isHTMLSupported();
  protected java.lang.String getHTMLData();
  protected boolean isPlainFlavor(java.awt.datatransfer.DataFlavor);
  protected boolean isPlainSupported();
  protected java.lang.String getPlainData();
  protected boolean isStringFlavor(java.awt.datatransfer.DataFlavor);
  static {};
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI extends org.jgraph.plaf.GraphUI implements java.io.Serializable {
  public static final boolean DNDPREVIEW;
  public static int SCROLLBORDER;
  public static float SCROLLSTEP;
  public static int MAXCELLS;
  public static int MAXHANDLES;
  public static int MAXCLIPCELLS;
  protected java.awt.Dimension preferredMinSize;
  protected org.jgraph.JGraph graph;
  protected org.jgraph.graph.GraphLayoutCache graphLayoutCache;
  protected org.jgraph.graph.GraphCellEditor cellEditor;
  protected boolean stopEditingInCompleteEditing;
  protected javax.swing.CellRendererPane rendererPane;
  protected java.awt.Dimension preferredSize;
  protected boolean validCachedPreferredSize;
  protected org.jgraph.graph.GraphModel graphModel;
  protected org.jgraph.graph.GraphSelectionModel graphSelectionModel;
  protected org.jgraph.graph.CellHandle handle;
  protected org.jgraph.graph.BasicMarqueeHandler marquee;
  protected java.awt.Component editingComponent;
  protected org.jgraph.graph.CellView focus;
  protected org.jgraph.graph.CellView lastFocus;
  protected java.lang.Object editingCell;
  protected boolean editorHasDifferentSize;
  protected java.awt.Point insertionLocation;
  protected int dropAction;
  protected boolean snapSelectedView;
  protected java.beans.PropertyChangeListener propertyChangeListener;
  protected java.awt.event.MouseListener mouseListener;
  protected java.awt.event.KeyListener keyListener;
  protected java.awt.event.ComponentListener componentListener;
  protected javax.swing.event.CellEditorListener cellEditorListener;
  protected org.jgraph.event.GraphSelectionListener graphSelectionListener;
  protected org.jgraph.event.GraphModelListener graphModelListener;
  protected org.jgraph.event.GraphLayoutCacheListener graphLayoutCacheListener;
  protected javax.swing.TransferHandler defaultTransferHandler;
  protected org.jgraph.plaf.basic.BasicGraphUI$GraphDropTargetListener defaultDropTargetListener;
  protected java.awt.dnd.DropTarget dropTarget;
  public static javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent);
  public org.jgraph.plaf.basic.BasicGraphUI();
  protected void setModel(org.jgraph.graph.GraphModel);
  protected void setGraphLayoutCache(org.jgraph.graph.GraphLayoutCache);
  protected void setMarquee(org.jgraph.graph.BasicMarqueeHandler);
  protected void setSelectionModel(org.jgraph.graph.GraphSelectionModel);
  public org.jgraph.graph.CellHandle getHandle();
  public int getDropAction();
  protected java.lang.Object getFocusedCell();
  public java.awt.geom.Dimension2D getPreferredSize(org.jgraph.JGraph, org.jgraph.graph.CellView);
  public java.awt.Point getInsertionLocation();
  public void setInsertionLocation(java.awt.Point);
  public void selectCellsForEvent(org.jgraph.JGraph, java.lang.Object[], java.awt.event.MouseEvent);
  public void selectCellsForEvent(java.lang.Object[], java.awt.event.MouseEvent);
  public void selectCellForEvent(java.lang.Object, java.awt.event.MouseEvent);
  protected void toggleSelectionCellForEvent(java.lang.Object, java.awt.event.MouseEvent);
  public boolean isAddToSelectionEvent(java.awt.event.MouseEvent);
  public boolean isToggleSelectionEvent(java.awt.event.MouseEvent);
  public boolean isForceMarqueeEvent(java.awt.event.MouseEvent);
  public boolean isConstrainedMoveEvent(java.awt.event.MouseEvent);
  public boolean isEditing(org.jgraph.JGraph);
  public boolean stopEditing(org.jgraph.JGraph);
  public void cancelEditing(org.jgraph.JGraph);
  public void startEditingAtCell(org.jgraph.JGraph, java.lang.Object);
  public java.lang.Object getEditingCell(org.jgraph.JGraph);
  public void installUI(javax.swing.JComponent);
  protected void prepareForUIInstall();
  protected void completeUIInstall();
  protected void installDefaults();
  protected void installListeners();
  protected void installKeyboardActions();
  javax.swing.InputMap getInputMap(int);
  javax.swing.ActionMap createActionMap();
  protected void installComponents();
  protected javax.swing.TransferHandler createTransferHandler();
  protected java.beans.PropertyChangeListener createPropertyChangeListener();
  protected java.awt.event.MouseListener createMouseListener();
  protected java.awt.event.KeyListener createKeyListener();
  protected org.jgraph.event.GraphSelectionListener createGraphSelectionListener();
  protected javax.swing.event.CellEditorListener createCellEditorListener();
  protected java.awt.event.ComponentListener createComponentListener();
  protected javax.swing.CellRendererPane createCellRendererPane();
  protected org.jgraph.event.GraphLayoutCacheListener createGraphLayoutCacheListener();
  protected org.jgraph.event.GraphModelListener createGraphModelListener();
  public void uninstallUI(javax.swing.JComponent);
  protected void completeUIUninstall();
  protected void uninstallListeners();
  protected void uninstallKeyboardActions();
  protected void uninstallComponents();
  public void paint(java.awt.Graphics, javax.swing.JComponent);
  protected void paintOverlay(java.awt.Graphics);
  public void drawGraph(java.awt.Graphics, java.awt.geom.Rectangle2D);
  protected void paintCells(java.awt.Graphics, java.awt.geom.Rectangle2D);
  public void paintCell(java.awt.Graphics, org.jgraph.graph.CellView, java.awt.geom.Rectangle2D, boolean);
  protected void paintBackground(java.awt.Graphics);
  protected void paintBackgroundImage(java.awt.Graphics, java.awt.Rectangle);
  protected void paintBackgroundComponent(java.awt.Graphics, java.awt.Component);
  protected void paintBackgroundComponent(java.awt.Graphics, java.awt.Component, java.awt.Rectangle);
  protected void paintGrid(double, java.awt.Graphics, java.awt.geom.Rectangle2D);
  protected void paintForeground(java.awt.Graphics);
  public void paintPorts(java.awt.Graphics, org.jgraph.graph.CellView[]);
  public void updateHandle();
  protected org.jgraph.graph.GraphContext createContext(org.jgraph.JGraph, java.lang.Object[]);
  public org.jgraph.graph.CellHandle createHandle(org.jgraph.graph.GraphContext);
  public void updateSize();
  protected void updateCachedPreferredSize();
  public void setPreferredMinSize(java.awt.Dimension);
  public java.awt.Dimension getPreferredMinSize();
  public java.awt.Dimension getPreferredSize(javax.swing.JComponent);
  public java.awt.Dimension getMinimumSize(javax.swing.JComponent);
  public java.awt.Dimension getMaximumSize(javax.swing.JComponent);
  protected void completeEditing();
  protected void completeEditing(boolean, boolean, boolean);
  protected boolean startEditing(java.lang.Object, java.awt.event.MouseEvent);
  protected java.awt.geom.Point2D getEditorLocation(java.lang.Object, java.awt.geom.Dimension2D, java.awt.geom.Point2D);
  public static void autoscroll(org.jgraph.JGraph, java.awt.Point);
  public boolean isSnapSelectedView();
  public void setSnapSelectedView(boolean);
  static {};
}
Compiled from "BasicGraphUI.java"
class org.jgraph.plaf.basic.BasicGraphUI$1 {
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$CellEditorHandler implements javax.swing.event.CellEditorListener,java.io.Serializable {
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$CellEditorHandler(org.jgraph.plaf.basic.BasicGraphUI);
  public void editingStopped(javax.swing.event.ChangeEvent);
  public void editingCanceled(javax.swing.event.ChangeEvent);
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$ComponentHandler extends java.awt.event.ComponentAdapter implements java.awt.event.ActionListener {
  protected javax.swing.Timer timer;
  protected javax.swing.JScrollBar scrollBar;
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$ComponentHandler(org.jgraph.plaf.basic.BasicGraphUI);
  public void componentMoved(java.awt.event.ComponentEvent);
  protected void startTimer();
  protected javax.swing.JScrollPane getScrollPane();
  public void actionPerformed(java.awt.event.ActionEvent);
}
Compiled from "BasicGraphUI.java"
class org.jgraph.plaf.basic.BasicGraphUI$GraphCancelEditingAction extends javax.swing.AbstractAction {
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$GraphCancelEditingAction(org.jgraph.plaf.basic.BasicGraphUI, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
  public boolean isEnabled();
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$GraphDropTargetListener extends org.jgraph.plaf.basic.BasicGraphDropTargetListener implements java.io.Serializable {
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$GraphDropTargetListener(org.jgraph.plaf.basic.BasicGraphUI);
  protected void saveComponentState(javax.swing.JComponent);
  protected void restoreComponentState(javax.swing.JComponent);
  protected void updateInsertionLocation(javax.swing.JComponent, java.awt.Point);
  public void dragEnter(java.awt.dnd.DropTargetDragEvent);
  public void dropActionChanged(java.awt.dnd.DropTargetDragEvent);
}
Compiled from "BasicGraphUI.java"
class org.jgraph.plaf.basic.BasicGraphUI$GraphEditAction extends javax.swing.AbstractAction {
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$GraphEditAction(org.jgraph.plaf.basic.BasicGraphUI, java.lang.String);
  public void actionPerformed(java.awt.event.ActionEvent);
  public boolean isEnabled();
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$GraphIncrementAction extends javax.swing.AbstractAction {
  protected int direction;
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public void actionPerformed(java.awt.event.ActionEvent);
  public boolean isEnabled();
  org.jgraph.plaf.basic.BasicGraphUI$GraphIncrementAction(org.jgraph.plaf.basic.BasicGraphUI, int, java.lang.String, org.jgraph.plaf.basic.BasicGraphUI$1);
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$GraphLayoutCacheHandler implements org.jgraph.event.GraphLayoutCacheListener,java.io.Serializable {
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$GraphLayoutCacheHandler(org.jgraph.plaf.basic.BasicGraphUI);
  public void graphLayoutCacheChanged(org.jgraph.event.GraphLayoutCacheEvent);
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$GraphModelHandler implements org.jgraph.event.GraphModelListener,java.io.Serializable {
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$GraphModelHandler(org.jgraph.plaf.basic.BasicGraphUI);
  public void graphChanged(org.jgraph.event.GraphModelEvent);
}
Compiled from "BasicGraphUI.java"
class org.jgraph.plaf.basic.BasicGraphUI$GraphSelectAllAction extends javax.swing.AbstractAction {
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$GraphSelectAllAction(org.jgraph.plaf.basic.BasicGraphUI, java.lang.String, boolean);
  public void actionPerformed(java.awt.event.ActionEvent);
  public boolean isEnabled();
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$GraphSelectionHandler implements org.jgraph.event.GraphSelectionListener,java.io.Serializable {
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$GraphSelectionHandler(org.jgraph.plaf.basic.BasicGraphUI);
  public void valueChanged(org.jgraph.event.GraphSelectionEvent);
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$KeyHandler extends java.awt.event.KeyAdapter implements java.io.Serializable {
  protected javax.swing.Action repeatKeyAction;
  protected boolean isKeyDown;
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$KeyHandler(org.jgraph.plaf.basic.BasicGraphUI);
  public void keyPressed(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$MouseHandler extends java.awt.event.MouseAdapter implements java.awt.event.MouseMotionListener,java.io.Serializable {
  protected org.jgraph.graph.CellView cell;
  protected java.lang.Object handler;
  protected transient java.awt.Cursor previousCursor;
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$MouseHandler(org.jgraph.plaf.basic.BasicGraphUI);
  public void mousePressed(java.awt.event.MouseEvent);
  protected boolean handleEditTrigger(java.lang.Object, java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  protected void postProcessSelection(java.awt.event.MouseEvent, java.lang.Object, boolean);
  protected boolean isDescendant(org.jgraph.graph.CellView, org.jgraph.graph.CellView);
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$MouseInputHandler implements javax.swing.event.MouseInputListener {
  protected java.awt.Component source;
  protected java.awt.Component destination;
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$MouseInputHandler(org.jgraph.plaf.basic.BasicGraphUI, java.awt.Component, java.awt.Component, java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  protected void removeFromSource();
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$PropertyChangeHandler implements java.beans.PropertyChangeListener,java.io.Serializable {
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$PropertyChangeHandler(org.jgraph.plaf.basic.BasicGraphUI);
  public void propertyChange(java.beans.PropertyChangeEvent);
}
Compiled from "BasicGraphUI.java"
public class org.jgraph.plaf.basic.BasicGraphUI$RootHandle implements org.jgraph.graph.CellHandle,java.io.Serializable {
  protected transient double _mouseToViewDelta_x;
  protected transient double _mouseToViewDelta_y;
  protected transient boolean firstDrag;
  protected transient org.jgraph.graph.CellView[] views;
  protected transient org.jgraph.graph.CellView[] contextViews;
  protected transient org.jgraph.graph.CellView[] portViews;
  protected transient org.jgraph.graph.CellView targetGroup;
  protected transient org.jgraph.graph.CellView ignoreTargetGroup;
  protected transient java.awt.geom.Rectangle2D cachedBounds;
  protected transient java.awt.geom.Point2D initialLocation;
  protected transient org.jgraph.graph.CellHandle[] handles;
  protected transient java.awt.geom.Point2D start;
  protected transient java.awt.geom.Point2D last;
  protected transient java.awt.geom.Point2D snapStart;
  protected transient java.awt.geom.Point2D snapLast;
  protected transient java.awt.Graphics offgraphics;
  protected boolean isMoving;
  protected boolean isDragging;
  protected transient org.jgraph.graph.CellHandle activeHandle;
  protected transient org.jgraph.graph.GraphContext context;
  protected boolean isContextVisible;
  protected boolean blockPaint;
  protected java.awt.geom.Point2D current;
  protected transient org.jgraph.graph.ConnectionSet disconnect;
  final org.jgraph.plaf.basic.BasicGraphUI this$0;
  public org.jgraph.plaf.basic.BasicGraphUI$RootHandle(org.jgraph.plaf.basic.BasicGraphUI, org.jgraph.graph.GraphContext);
  protected java.awt.geom.Point2D getInitialLocation(java.lang.Object[]);
  public org.jgraph.graph.GraphContext getContext();
  public void paint(java.awt.Graphics);
  public void overlay(java.awt.Graphics);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mousePressed(java.awt.event.MouseEvent);
  protected org.jgraph.graph.CellView findViewForPoint(java.awt.geom.Point2D);
  protected org.jgraph.graph.CellView findUnselectedInnermostGroup(double, double);
  protected void startDragging(java.awt.event.MouseEvent);
  public java.awt.Component getFirstOpaqueParent(java.awt.Component);
  protected void initOffscreen();
  public void mouseDragged(java.awt.event.MouseEvent);
  protected java.awt.geom.Point2D constrainDrag(java.awt.event.MouseEvent, double, double, double, double);
  public void mouseReleased(java.awt.event.MouseEvent);
}
Compiled from "Bezier.java"
public class org.jgraph.util.Bezier {
  public org.jgraph.util.Bezier(java.awt.geom.Point2D[]);
  public java.awt.geom.Point2D[] getPoints();
  public int getPointCount();
  public java.awt.geom.Point2D getPoint(int);
}
Compiled from "ParallelEdgeRouter.java"
public class org.jgraph.util.ParallelEdgeRouter extends org.jgraph.graph.DefaultEdge$LoopRouting {
  protected static final org.jgraph.util.ParallelEdgeRouter sharedInstance;
  public org.jgraph.util.ParallelEdgeRouter();
  public static org.jgraph.util.ParallelEdgeRouter getSharedInstance();
  public java.util.List routeEdge(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.EdgeView);
  public static double getEdgeSeparation();
  public static void setEdgeSeparation(double);
  public static double getEdgeDeparture();
  public static void setEdgeDeparture(double);
  protected java.lang.Object[] getParallelEdges(org.jgraph.graph.GraphLayoutCache, org.jgraph.graph.EdgeView, org.jgraph.graph.CellView, org.jgraph.graph.CellView);
  public static void setGraph(org.jgraph.JGraph);
  static {};
}
Compiled from "RectUtils.java"
public class org.jgraph.util.RectUtils {
  public org.jgraph.util.RectUtils();
  public static java.awt.geom.Rectangle2D union(java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D);
}
Compiled from "Spline.java"
public class org.jgraph.util.Spline {
  public org.jgraph.util.Spline(double[], double[]);
  public void setValues(double[], double[]);
  public double getValue(double);
  public double getFastValue(double);
  public boolean checkValues();
  public double getDx(double);
  public void solve(double[][], double[]);
}
Compiled from "Spline2D.java"
public class org.jgraph.util.Spline2D {
  public org.jgraph.util.Spline2D(java.awt.geom.Point2D[]);
  public org.jgraph.util.Spline2D(double[], double[]);
  public double[] getPoint(double);
  public boolean checkValues();
  public double getDx(double);
  public double getDy(double);
  public org.jgraph.util.Spline getSplineX();
  public org.jgraph.util.Spline getSplineY();
  public double getLength();
}
