Compiled from "ExampleImagesDemo.java"
public class org.delaunay.ExampleImagesDemo {
  public org.delaunay.ExampleImagesDemo();
  public static void createInterpolationExamples() throws java.lang.Exception;
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "PoissonDiscSamplesDemo.java"
public class org.delaunay.PoissonDiscSamplesDemo {
  public org.delaunay.PoissonDiscSamplesDemo();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "PoissonDiscSamplesDemo.java"
final class org.delaunay.PoissonDiscSamplesDemo$1 extends org.delaunay.algorithm.samples.SampleFunctions$VariablePoissonDiscSampleFunction {
  org.delaunay.PoissonDiscSamplesDemo$1(java.awt.Shape);
  public double getMimimumDistance(org.delaunay.model.Vector);
}
Compiled from "TriangulationDemo.java"
public class org.delaunay.TriangulationDemo {
  public org.delaunay.TriangulationDemo();
  public static void drawTriangulation(org.delaunay.algorithm.Triangulation, int, int, java.lang.String) throws java.io.IOException;
  public static void drawDtfe(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>, int, int, java.lang.String) throws java.io.IOException;
  public static void fourLiner() throws java.lang.Exception;
  public static void createTriangulationAndDtfeDemo() throws org.delaunay.algorithm.Triangulation$InvalidVertexException, java.io.IOException;
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "TriangulationDemo.java"
final class org.delaunay.TriangulationDemo$1 implements org.delaunay.algorithm.Triangulation$DebugLogger {
  org.delaunay.TriangulationDemo$1();
  public void debug(java.lang.String);
}
Compiled from "Utils.java"
public class org.delaunay.Utils {
  public org.delaunay.Utils();
  public static <T> double sum(java.lang.Iterable<java.lang.Double>);
  public static <T> double maxValue(java.lang.Iterable<T>, com.google.common.base.Function<? super T, java.lang.Double>);
  public static <T> double minValue(java.lang.Iterable<T>, com.google.common.base.Function<? super T, java.lang.Double>);
  public static <T> T maxObject(java.lang.Iterable<T>, com.google.common.base.Function<? super T, java.lang.Double>);
  public static <T> T minObject(java.lang.Iterable<T>, com.google.common.base.Function<? super T, java.lang.Double>);
  public static java.lang.Iterable<org.delaunay.model.Vertex> toVertices(java.lang.Iterable<? extends org.delaunay.model.Vector>);
  public static java.lang.Iterable<java.awt.geom.Point2D> toPoints(java.lang.Iterable<? extends org.delaunay.model.Vector>);
  public static java.awt.geom.Path2D pathFromPoints(java.lang.Iterable<? extends java.awt.geom.Point2D>);
}
Compiled from "Utils.java"
final class org.delaunay.Utils$1 implements com.google.common.base.Function<org.delaunay.model.Vector, org.delaunay.model.Vertex> {
  org.delaunay.Utils$1();
  public org.delaunay.model.Vertex apply(org.delaunay.model.Vector);
  public java.lang.Object apply(java.lang.Object);
}
Compiled from "Utils.java"
final class org.delaunay.Utils$2 implements com.google.common.base.Function<org.delaunay.model.Vector, java.awt.geom.Point2D> {
  org.delaunay.Utils$2();
  public java.awt.geom.Point2D apply(org.delaunay.model.Vector);
  public java.lang.Object apply(java.lang.Object);
}
Compiled from "HilbertTableIndex.java"
public class org.delaunay.algorithm.HilbertTableIndex {
  public org.delaunay.algorithm.HilbertTableIndex(int);
  public org.delaunay.algorithm.HilbertTableIndex(int, int);
  public int getIndex(java.awt.Point);
  public java.awt.Point getPoint(int);
  static {};
}
Compiled from "ScaledHilbertIndex.java"
public class org.delaunay.algorithm.ScaledHilbertIndex {
  public org.delaunay.algorithm.ScaledHilbertIndex(int, java.awt.geom.Rectangle2D);
  public int toIndex(double, double);
}
Compiled from "Triangulation.java"
public class org.delaunay.algorithm.Triangulation {
  public strictfp org.delaunay.algorithm.Triangulation();
  public strictfp int getHopCount();
  public strictfp int getLocateCount();
  public strictfp void setDebugLogger(org.delaunay.algorithm.Triangulation$DebugLogger);
  public strictfp org.delaunay.model.Vertex addVertex(double, double);
  public strictfp void addVertex(org.delaunay.model.Vertex);
  public strictfp void addAllVertices(java.lang.Iterable<org.delaunay.model.Vertex>);
  public strictfp java.util.LinkedHashSet<org.delaunay.model.Vertex> getInputVertices();
  public strictfp java.util.LinkedHashSet<org.delaunay.model.Vertex> getVertices();
  public strictfp java.util.List<org.delaunay.model.Vertex> getVerticesInBounds(java.awt.geom.Rectangle2D);
  public strictfp java.util.LinkedHashSet<org.delaunay.model.Triangle> getTriangles();
  public strictfp void setKeepSuperTriangle(boolean);
  public strictfp org.delaunay.model.Vertex locateNearestVertex(org.delaunay.model.Vector);
  public strictfp java.util.Set<org.delaunay.model.Vertex> getVerticesInRadius(org.delaunay.model.Vertex, double);
  public strictfp void triangulate() throws org.delaunay.algorithm.Triangulation$InvalidVertexException;
  public strictfp void clear();
  public strictfp void addVertexToTriangulation(org.delaunay.model.Vertex) throws org.delaunay.algorithm.Triangulation$InvalidVertexException;
  public strictfp void createSuperTriangle(java.lang.Iterable<? extends org.delaunay.model.Vertex>);
  public strictfp void createSuperTriangle(java.awt.geom.Rectangle2D);
  public strictfp void removeSuperTriangle();
  public strictfp boolean touchesSuperVertex(org.delaunay.model.Triangle);
  public strictfp boolean neighborsSuperVertex(org.delaunay.model.Vertex);
  public strictfp java.util.Collection<org.delaunay.model.Triangle> getCircumcircleTriangles(org.delaunay.model.Vector) throws org.delaunay.algorithm.Triangulation$InvalidVertexException, org.delaunay.algorithm.Triangulation$NonDelaunayException;
  public strictfp org.delaunay.model.Triangle locate(org.delaunay.model.Vector) throws org.delaunay.algorithm.Triangulation$NonDelaunayException;
  public strictfp java.util.List<org.delaunay.model.Edge> getEdgeSet(java.util.Collection<org.delaunay.model.Triangle>);
  public strictfp java.util.List<org.delaunay.model.Triangle> createTriangles(java.lang.Iterable<org.delaunay.model.Edge>, org.delaunay.model.Vertex);
}
Compiled from "Triangulation.java"
class org.delaunay.algorithm.Triangulation$1 implements org.delaunay.algorithm.Triangulation$DebugLogger {
  final org.delaunay.algorithm.Triangulation this$0;
  org.delaunay.algorithm.Triangulation$1(org.delaunay.algorithm.Triangulation);
  public void debug(java.lang.String);
}
Compiled from "Triangulation.java"
class org.delaunay.algorithm.Triangulation$2 implements com.google.common.base.Predicate<org.delaunay.model.Vertex> {
  final java.awt.geom.Rectangle2D val$rect;
  final org.delaunay.algorithm.Triangulation this$0;
  strictfp org.delaunay.algorithm.Triangulation$2(org.delaunay.algorithm.Triangulation, java.awt.geom.Rectangle2D);
  public strictfp boolean apply(org.delaunay.model.Vertex);
  public boolean apply(java.lang.Object);
}
Compiled from "Triangulation.java"
class org.delaunay.algorithm.Triangulation$3 implements java.util.Comparator<org.delaunay.model.Vertex> {
  final org.delaunay.algorithm.Triangulation this$0;
  strictfp org.delaunay.algorithm.Triangulation$3(org.delaunay.algorithm.Triangulation);
  public strictfp int compare(org.delaunay.model.Vertex, org.delaunay.model.Vertex);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "Triangulation.java"
class org.delaunay.algorithm.Triangulation$4 implements com.google.common.base.Function<org.delaunay.model.Edge, org.delaunay.model.Triangle> {
  final org.delaunay.model.Vertex val$vertex;
  final org.delaunay.algorithm.Triangulation this$0;
  strictfp org.delaunay.algorithm.Triangulation$4(org.delaunay.algorithm.Triangulation, org.delaunay.model.Vertex);
  public strictfp org.delaunay.model.Triangle apply(org.delaunay.model.Edge);
  public java.lang.Object apply(java.lang.Object);
}
Compiled from "Triangulation.java"
public interface org.delaunay.algorithm.Triangulation$DebugLogger {
  public abstract void debug(java.lang.String);
}
Compiled from "Triangulation.java"
public class org.delaunay.algorithm.Triangulation$InvalidVertexException extends java.lang.Exception {
  public strictfp org.delaunay.algorithm.Triangulation$InvalidVertexException();
}
Compiled from "Triangulation.java"
public class org.delaunay.algorithm.Triangulation$NonDelaunayException extends java.lang.RuntimeException {
  public strictfp org.delaunay.algorithm.Triangulation$NonDelaunayException();
}
Compiled from "Triangulation.java"
public final class org.delaunay.algorithm.Triangulation$VertexExceptionStrategy extends java.lang.Enum<org.delaunay.algorithm.Triangulation$VertexExceptionStrategy> {
  public static final org.delaunay.algorithm.Triangulation$VertexExceptionStrategy THROW_EXCEPTION;
  public static final org.delaunay.algorithm.Triangulation$VertexExceptionStrategy CATCH_AND_DROP_VERTEX;
  public static strictfp org.delaunay.algorithm.Triangulation$VertexExceptionStrategy[] values();
  public static strictfp org.delaunay.algorithm.Triangulation$VertexExceptionStrategy valueOf(java.lang.String);
  static strictfp {};
}
Compiled from "TriangulationLocateTest.java"
public class org.delaunay.algorithm.TriangulationLocateTest {
  public org.delaunay.algorithm.TriangulationLocateTest();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "TriangulationLocateTest.java"
final class org.delaunay.algorithm.TriangulationLocateTest$1 implements com.google.common.base.Function<org.delaunay.model.Vertex, java.lang.Double> {
  final org.delaunay.model.Vertex val$v;
  org.delaunay.algorithm.TriangulationLocateTest$1(org.delaunay.model.Vertex);
  public java.lang.Double apply(org.delaunay.model.Vertex);
  public java.lang.Object apply(java.lang.Object);
}
Compiled from "Triangulations.java"
public class org.delaunay.algorithm.Triangulations {
  public org.delaunay.algorithm.Triangulations();
  public static java.util.List<org.delaunay.model.Vertex> randomVertices(int, int, int);
  public static java.util.List<org.delaunay.model.Vertex> randomGaussian(int, int, int);
}
Compiled from "LocateStrategies.java"
public class org.delaunay.algorithm.samples.LocateStrategies {
  public org.delaunay.algorithm.samples.LocateStrategies();
}
Compiled from "LocateStrategies.java"
public interface org.delaunay.algorithm.samples.LocateStrategies$LocateStrategy {
  public abstract void initialize(java.lang.Iterable<org.delaunay.model.Vector>, java.awt.geom.Rectangle2D);
  public abstract boolean addSample(org.delaunay.model.Vector);
  public abstract org.delaunay.model.Vector getNearest(org.delaunay.model.Vector);
}
Compiled from "LocateStrategies.java"
public class org.delaunay.algorithm.samples.LocateStrategies$NaiveLocateStrategy implements org.delaunay.algorithm.samples.LocateStrategies$LocateStrategy {
  public org.delaunay.algorithm.samples.LocateStrategies$NaiveLocateStrategy();
  public void initialize(java.lang.Iterable<org.delaunay.model.Vector>, java.awt.geom.Rectangle2D);
  public boolean addSample(org.delaunay.model.Vector);
  public org.delaunay.model.Vector getNearest(org.delaunay.model.Vector);
}
Compiled from "LocateStrategies.java"
class org.delaunay.algorithm.samples.LocateStrategies$NaiveLocateStrategy$1 implements com.google.common.base.Function<org.delaunay.model.Vector, java.lang.Double> {
  final org.delaunay.model.Vector val$v;
  final org.delaunay.algorithm.samples.LocateStrategies$NaiveLocateStrategy this$0;
  org.delaunay.algorithm.samples.LocateStrategies$NaiveLocateStrategy$1(org.delaunay.algorithm.samples.LocateStrategies$NaiveLocateStrategy, org.delaunay.model.Vector);
  public java.lang.Double apply(org.delaunay.model.Vector);
  public java.lang.Object apply(java.lang.Object);
}
Compiled from "LocateStrategies.java"
public class org.delaunay.algorithm.samples.LocateStrategies$TriangulationLocateStrategy implements org.delaunay.algorithm.samples.LocateStrategies$LocateStrategy {
  public org.delaunay.algorithm.samples.LocateStrategies$TriangulationLocateStrategy();
  public void initialize(java.lang.Iterable<org.delaunay.model.Vector>, java.awt.geom.Rectangle2D);
  public boolean addSample(org.delaunay.model.Vector);
  public org.delaunay.model.Vector getNearest(org.delaunay.model.Vector);
}
Compiled from "SampleBuilder.java"
public class org.delaunay.algorithm.samples.SampleBuilder {
  public org.delaunay.algorithm.samples.SampleBuilder();
  public int getMaxTries();
  public org.delaunay.algorithm.samples.SampleBuilder setMaxTries(int);
  public org.delaunay.algorithm.samples.LocateStrategies$LocateStrategy getLocateStrategy();
  public org.delaunay.algorithm.samples.SampleBuilder setLocateStrategy(org.delaunay.algorithm.samples.LocateStrategies$LocateStrategy);
  public java.util.List<org.delaunay.model.Vector> getSamples();
  public org.delaunay.algorithm.samples.SampleBuilder fill(org.delaunay.algorithm.samples.SampleFunctions$SampleFunction);
}
Compiled from "SampleFunctions.java"
public class org.delaunay.algorithm.samples.SampleFunctions {
  public org.delaunay.algorithm.samples.SampleFunctions();
}
Compiled from "SampleFunctions.java"
public abstract class org.delaunay.algorithm.samples.SampleFunctions$BoundSampleFunction implements org.delaunay.algorithm.samples.SampleFunctions$SampleFunction {
  protected java.util.Random random;
  protected final java.awt.Shape shape;
  public org.delaunay.algorithm.samples.SampleFunctions$BoundSampleFunction(java.awt.Shape);
  public java.awt.Shape getBoundingShape();
  public org.delaunay.model.Vector createSampleIn(java.awt.Shape);
}
Compiled from "SampleFunctions.java"
public class org.delaunay.algorithm.samples.SampleFunctions$PoissonDiscSampleFunction extends org.delaunay.algorithm.samples.SampleFunctions$BoundSampleFunction {
  public org.delaunay.algorithm.samples.SampleFunctions$PoissonDiscSampleFunction(java.awt.Shape, double);
  public org.delaunay.algorithm.samples.SampleFunctions$PoissonDiscSampleFunction(java.awt.Shape, double, double);
  public org.delaunay.model.Vector createSampleNear(org.delaunay.model.Vector);
  public double getMimimumDistance(org.delaunay.model.Vector);
}
Compiled from "SampleFunctions.java"
public interface org.delaunay.algorithm.samples.SampleFunctions$SampleFunction {
  public abstract java.awt.Shape getBoundingShape();
  public abstract org.delaunay.model.Vector createSampleIn(java.awt.Shape);
  public abstract org.delaunay.model.Vector createSampleNear(org.delaunay.model.Vector);
  public abstract double getMimimumDistance(org.delaunay.model.Vector);
}
Compiled from "SampleFunctions.java"
public abstract class org.delaunay.algorithm.samples.SampleFunctions$VariablePoissonDiscSampleFunction extends org.delaunay.algorithm.samples.SampleFunctions$BoundSampleFunction {
  public org.delaunay.algorithm.samples.SampleFunctions$VariablePoissonDiscSampleFunction(java.awt.Shape);
  public org.delaunay.model.Vector createSampleNear(org.delaunay.model.Vector);
}
Compiled from "BasicDensityModel.java"
public class org.delaunay.dtfe.BasicDensityModel implements org.delaunay.dtfe.DensityModel {
  protected double density;
  protected double weight;
  public org.delaunay.dtfe.BasicDensityModel();
  public org.delaunay.dtfe.BasicDensityModel(double);
  public double getDensity();
  public void setDensity(double);
  public void setWeight(double);
  public double getWeight();
}
Compiled from "ColorScale.java"
public class org.delaunay.dtfe.ColorScale {
  public org.delaunay.dtfe.ColorScale();
  public org.delaunay.dtfe.ColorScale stop(int, double);
  public org.delaunay.dtfe.ColorScale stopAlpha(int, int, double);
  public java.awt.Color get(java.lang.Double);
  public double getMinStop();
  public double getMaxStop();
}
Compiled from "ColorScale.java"
class org.delaunay.dtfe.ColorScale$1 {
}
Compiled from "ColorScale.java"
public class org.delaunay.dtfe.ColorScale$Stop implements java.lang.Comparable<org.delaunay.dtfe.ColorScale$Stop> {
  int a;
  int r;
  int g;
  int b;
  int argb;
  java.lang.Double offset;
  public int compareTo(org.delaunay.dtfe.ColorScale$Stop);
  public int compareTo(java.lang.Object);
  org.delaunay.dtfe.ColorScale$Stop(int, java.lang.Double, org.delaunay.dtfe.ColorScale$1);
}
Compiled from "ColorScales.java"
public class org.delaunay.dtfe.ColorScales {
  public static final org.delaunay.dtfe.ColorScale MODIFIED_RAINBOW;
  public static final org.delaunay.dtfe.ColorScale LINEAR_RAINBOW;
  public static final org.delaunay.dtfe.ColorScale LINEAR_RAINBOW_NO_ALPHA;
  public static final org.delaunay.dtfe.ColorScale TEMPURATURE;
  public static final org.delaunay.dtfe.ColorScale BLUE_TO_YELLOW;
  public static final org.delaunay.dtfe.ColorScale PURPLE_TO_GREEN;
  public static final org.delaunay.dtfe.ColorScale PURPLE_TO_GREEN_LINEAR;
  public static final org.delaunay.dtfe.ColorScale RED_TO_BLUE_POS_NEG;
  public static final org.delaunay.dtfe.ColorScale RED_TO_BLUE;
  public org.delaunay.dtfe.ColorScales();
  public static java.util.List<org.delaunay.dtfe.ColorScale> getDefaultColorScales();
  static {};
}
Compiled from "DensityModel.java"
public interface org.delaunay.dtfe.DensityModel {
  public abstract double getDensity();
  public abstract void setDensity(double);
  public abstract double getWeight();
}
Compiled from "DtfeTriangulationMap.java"
public class org.delaunay.dtfe.DtfeTriangulationMap<T extends org.delaunay.dtfe.DensityModel> extends org.delaunay.model.TriangulationMap<T> {
  public org.delaunay.dtfe.DtfeTriangulationMap();
  public void triangulate() throws org.delaunay.algorithm.Triangulation$InvalidVertexException;
  public double getDensity(org.delaunay.model.Vertex);
  public double getInterpolatedDensity(org.delaunay.model.Vector, org.delaunay.dtfe.interpolation.InterpolationStrategy);
  public double getMaxDensity();
  public double getRelativeDensity(double, org.delaunay.dtfe.DtfeTriangulationMap$ScaleType);
}
Compiled from "DtfeTriangulationMap.java"
class org.delaunay.dtfe.DtfeTriangulationMap$1 implements com.google.common.base.Function<org.delaunay.model.Vertex, java.lang.Double> {
  final org.delaunay.dtfe.DtfeTriangulationMap this$0;
  org.delaunay.dtfe.DtfeTriangulationMap$1(org.delaunay.dtfe.DtfeTriangulationMap);
  public java.lang.Double apply(org.delaunay.model.Vertex);
  public java.lang.Object apply(java.lang.Object);
}
Compiled from "DtfeTriangulationMap.java"
public final class org.delaunay.dtfe.DtfeTriangulationMap$ScaleType extends java.lang.Enum<org.delaunay.dtfe.DtfeTriangulationMap$ScaleType> {
  public static final org.delaunay.dtfe.DtfeTriangulationMap$ScaleType LINEAR;
  public static final org.delaunay.dtfe.DtfeTriangulationMap$ScaleType LOG;
  public static org.delaunay.dtfe.DtfeTriangulationMap$ScaleType[] values();
  public static org.delaunay.dtfe.DtfeTriangulationMap$ScaleType valueOf(java.lang.String);
  static {};
}
Compiled from "Dtfes.java"
public class org.delaunay.dtfe.Dtfes {
  public org.delaunay.dtfe.Dtfes();
  public static <T extends org.delaunay.dtfe.BasicDensityModel> org.delaunay.dtfe.DtfeTriangulationMap<org.delaunay.dtfe.Dtfes$DifferenceDensityModel<T>> difference(org.delaunay.dtfe.DtfeTriangulationMap<T>, org.delaunay.dtfe.DtfeTriangulationMap<T>, org.delaunay.dtfe.interpolation.InterpolationStrategy) throws org.delaunay.algorithm.Triangulation$InvalidVertexException;
}
Compiled from "Dtfes.java"
public class org.delaunay.dtfe.Dtfes$DifferenceDensityModel<T extends org.delaunay.dtfe.BasicDensityModel> extends org.delaunay.dtfe.BasicDensityModel {
  public org.delaunay.dtfe.Dtfes$DifferenceDensityModel(T, T, double);
  public double getDensity();
  public T getAChild();
  public T getBChild();
}
Compiled from "IsolineBuilder.java"
public class org.delaunay.dtfe.IsolineBuilder {
  public org.delaunay.dtfe.IsolineBuilder(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>);
  public org.delaunay.dtfe.IsolineBuilder setScaleType(org.delaunay.dtfe.DtfeTriangulationMap$ScaleType);
  public java.util.List<java.util.List<org.delaunay.model.Vector>> getIsoLines(double);
  static org.delaunay.dtfe.DtfeTriangulationMap access$100(org.delaunay.dtfe.IsolineBuilder);
  static org.delaunay.dtfe.DtfeTriangulationMap$ScaleType access$200(org.delaunay.dtfe.IsolineBuilder);
}
Compiled from "IsolineBuilder.java"
class org.delaunay.dtfe.IsolineBuilder$1 {
}
Compiled from "IsolineBuilder.java"
class org.delaunay.dtfe.IsolineBuilder$Segment {
  final org.delaunay.model.Vector v0;
  final org.delaunay.model.Edge e0;
  final org.delaunay.model.Vector v1;
  final org.delaunay.model.Edge e1;
  final org.delaunay.dtfe.IsolineBuilder this$0;
  org.delaunay.dtfe.IsolineBuilder$Segment(org.delaunay.dtfe.IsolineBuilder, org.delaunay.model.Vertex, org.delaunay.model.Vertex, org.delaunay.model.Vertex, double, org.delaunay.dtfe.IsolineBuilder$1);
}
Compiled from "AlgebraicLinearInterpolationStrategy.java"
public final class org.delaunay.dtfe.interpolation.AlgebraicLinearInterpolationStrategy implements org.delaunay.dtfe.interpolation.InterpolationStrategy {
  public org.delaunay.dtfe.interpolation.AlgebraicLinearInterpolationStrategy();
  public double getDensity(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>, org.delaunay.model.Vector);
}
Compiled from "BarycentricLinearInterpolationStrategy.java"
public final class org.delaunay.dtfe.interpolation.BarycentricLinearInterpolationStrategy implements org.delaunay.dtfe.interpolation.InterpolationStrategy {
  public org.delaunay.dtfe.interpolation.BarycentricLinearInterpolationStrategy();
  public double getDensity(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>, org.delaunay.model.Vector);
}
Compiled from "InterpolationStrategies.java"
public class org.delaunay.dtfe.interpolation.InterpolationStrategies {
  public org.delaunay.dtfe.interpolation.InterpolationStrategies();
  public static org.delaunay.dtfe.interpolation.BarycentricLinearInterpolationStrategy createBarycentricLinear();
  public static org.delaunay.dtfe.interpolation.AlgebraicLinearInterpolationStrategy createAlgebraicLinear();
  public static org.delaunay.dtfe.interpolation.NearestNeighborInterpolationStrategy createNearestNeighbor();
  public static org.delaunay.dtfe.interpolation.MeanInterpolationStrategy createMean();
  public static org.delaunay.dtfe.interpolation.NaturalNeighborInterpolationStrategy createNaturalNeighbor();
}
Compiled from "InterpolationStrategy.java"
public interface org.delaunay.dtfe.interpolation.InterpolationStrategy {
  public abstract double getDensity(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>, org.delaunay.model.Vector);
}
Compiled from "MeanInterpolationStrategy.java"
public class org.delaunay.dtfe.interpolation.MeanInterpolationStrategy implements org.delaunay.dtfe.interpolation.InterpolationStrategy {
  public org.delaunay.dtfe.interpolation.MeanInterpolationStrategy();
  public double getDensity(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>, org.delaunay.model.Vector);
}
Compiled from "NaturalNeighborInterpolationStrategy.java"
public class org.delaunay.dtfe.interpolation.NaturalNeighborInterpolationStrategy implements org.delaunay.dtfe.interpolation.InterpolationStrategy {
  public org.delaunay.dtfe.interpolation.NaturalNeighborInterpolationStrategy();
  public org.delaunay.model.Voronoi getVoronoi(org.delaunay.model.Vertex);
  public org.delaunay.model.Voronoi getSecondOrderVoronoi(org.delaunay.algorithm.Triangulation, org.delaunay.model.Vertex) throws org.delaunay.algorithm.Triangulation$NonDelaunayException, org.delaunay.algorithm.Triangulation$InvalidVertexException;
  public double getDensity(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>, org.delaunay.model.Vector);
}
Compiled from "NearestNeighborInterpolationStrategy.java"
final class org.delaunay.dtfe.interpolation.NearestNeighborInterpolationStrategy implements org.delaunay.dtfe.interpolation.InterpolationStrategy {
  org.delaunay.dtfe.interpolation.NearestNeighborInterpolationStrategy();
  public double getDensity(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>, org.delaunay.model.Vector);
}
Compiled from "ColorScaleLegendPainter.java"
public class org.delaunay.dtfe.painters.ColorScaleLegendPainter {
  public org.delaunay.dtfe.painters.ColorScaleLegendPainter(org.delaunay.dtfe.painters.ColorScaleLegendPainter$ColorScalePainterModel);
  public java.awt.image.BufferedImage createLegendImage(org.delaunay.dtfe.ColorScale);
  public void paintLegendImage(org.delaunay.dtfe.ColorScale, java.awt.image.BufferedImage);
}
Compiled from "ColorScaleLegendPainter.java"
public class org.delaunay.dtfe.painters.ColorScaleLegendPainter$ColorScalePainterModel {
  public org.delaunay.dtfe.painters.ColorScaleLegendPainter$ColorScalePainterModel();
  public org.delaunay.dtfe.painters.ColorScaleLegendPainter$Orientation getOrientation();
  public org.delaunay.dtfe.painters.ColorScaleLegendPainter$ColorScalePainterModel setOrientation(org.delaunay.dtfe.painters.ColorScaleLegendPainter$Orientation);
  public java.awt.Rectangle getBounds();
  public org.delaunay.dtfe.painters.ColorScaleLegendPainter$ColorScalePainterModel setBounds(java.awt.Rectangle);
}
Compiled from "ColorScaleLegendPainter.java"
public final class org.delaunay.dtfe.painters.ColorScaleLegendPainter$Orientation extends java.lang.Enum<org.delaunay.dtfe.painters.ColorScaleLegendPainter$Orientation> {
  public static final org.delaunay.dtfe.painters.ColorScaleLegendPainter$Orientation HORIZONTAL;
  public static final org.delaunay.dtfe.painters.ColorScaleLegendPainter$Orientation VERTICAL;
  public static org.delaunay.dtfe.painters.ColorScaleLegendPainter$Orientation[] values();
  public static org.delaunay.dtfe.painters.ColorScaleLegendPainter$Orientation valueOf(java.lang.String);
  static {};
}
Compiled from "DtfePainter.java"
public class org.delaunay.dtfe.painters.DtfePainter {
  public org.delaunay.dtfe.painters.DtfePainter(org.delaunay.dtfe.painters.DtfePainterModel);
  public java.lang.Iterable<java.awt.image.BufferedImage> paintSlices(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>, org.delaunay.dtfe.painters.PaintTransform, int);
  public java.awt.image.BufferedImage paint(org.delaunay.dtfe.DtfeTriangulationMap<? extends org.delaunay.dtfe.DensityModel>, org.delaunay.dtfe.painters.PaintTransform);
}
Compiled from "DtfePainter.java"
class org.delaunay.dtfe.painters.DtfePainter$1 implements com.google.common.base.Function<org.delaunay.dtfe.painters.PaintTransform, java.awt.image.BufferedImage> {
  final org.delaunay.dtfe.DtfeTriangulationMap val$dtfe;
  final org.delaunay.dtfe.painters.DtfePainter this$0;
  org.delaunay.dtfe.painters.DtfePainter$1(org.delaunay.dtfe.painters.DtfePainter, org.delaunay.dtfe.DtfeTriangulationMap);
  public java.awt.image.BufferedImage apply(org.delaunay.dtfe.painters.PaintTransform);
  public java.lang.Object apply(java.lang.Object);
}
Compiled from "DtfePainterModel.java"
public class org.delaunay.dtfe.painters.DtfePainterModel {
  public org.delaunay.dtfe.painters.DtfePainterModel();
  public org.delaunay.dtfe.DtfeTriangulationMap$ScaleType getScaleType();
  public org.delaunay.dtfe.painters.DtfePainterModel setScaleType(org.delaunay.dtfe.DtfeTriangulationMap$ScaleType);
  public float getEdgeStrokeWidth();
  public org.delaunay.dtfe.painters.DtfePainterModel setEdgeStrokeWidth(float);
  public java.awt.Color getEdgeColor();
  public org.delaunay.dtfe.painters.DtfePainterModel setEdgeColor(java.awt.Color);
  public org.delaunay.dtfe.ColorScale getColorScale();
  public org.delaunay.dtfe.painters.DtfePainterModel setColorScale(org.delaunay.dtfe.ColorScale);
  public double getDensityScalar();
  public org.delaunay.dtfe.painters.DtfePainterModel setDensityScalar(double);
  public org.delaunay.dtfe.interpolation.InterpolationStrategy getInterpolationStrategy();
  public org.delaunay.dtfe.painters.DtfePainterModel setInterpolationStrategy(org.delaunay.dtfe.interpolation.InterpolationStrategy);
}
Compiled from "PaintTransform.java"
public class org.delaunay.dtfe.painters.PaintTransform {
  public org.delaunay.dtfe.painters.PaintTransform(int, int);
  public org.delaunay.dtfe.painters.PaintTransform(int, int, java.awt.geom.Rectangle2D);
  public java.util.List<org.delaunay.dtfe.painters.PaintTransform> createSlices(int);
  public int getWidth();
  public int getHeight();
  public java.awt.geom.Rectangle2D getDtfeWindow();
  public org.delaunay.model.Vector toDtfeVector(int, int);
  public java.awt.Point toImagePoint(org.delaunay.model.Vector);
  public java.lang.Iterable<java.awt.geom.Point2D> toImagePoints(java.lang.Iterable<? extends org.delaunay.model.Vector>);
}
Compiled from "PaintTransform.java"
class org.delaunay.dtfe.painters.PaintTransform$1 implements com.google.common.base.Function<org.delaunay.model.Vector, java.awt.geom.Point2D> {
  final org.delaunay.dtfe.painters.PaintTransform this$0;
  org.delaunay.dtfe.painters.PaintTransform$1(org.delaunay.dtfe.painters.PaintTransform);
  public java.awt.geom.Point2D apply(org.delaunay.model.Vector);
  public java.lang.Object apply(java.lang.Object);
}
Compiled from "TriangulationPainter.java"
public class org.delaunay.dtfe.painters.TriangulationPainter {
  public org.delaunay.dtfe.painters.TriangulationPainter(org.delaunay.dtfe.painters.TriangulationPainterModel);
  public java.awt.image.BufferedImage paint(org.delaunay.algorithm.Triangulation, org.delaunay.dtfe.painters.PaintTransform);
  public static java.util.Set<org.delaunay.model.Edge> getPaintableEdges(org.delaunay.algorithm.Triangulation);
}
Compiled from "TriangulationPainterModel.java"
public class org.delaunay.dtfe.painters.TriangulationPainterModel {
  public org.delaunay.dtfe.painters.TriangulationPainterModel();
  public java.awt.Color getEdgeColor();
  public org.delaunay.dtfe.painters.TriangulationPainterModel setEdgeColor(java.awt.Color);
  public float getEdgeStrokeWidth();
  public org.delaunay.dtfe.painters.TriangulationPainterModel setEdgeStrokeWidth(float);
  public java.awt.Color getVertexDotColor();
  public org.delaunay.dtfe.painters.TriangulationPainterModel setVertexDotColor(java.awt.Color);
  public float getVertexDotRadius();
  public org.delaunay.dtfe.painters.TriangulationPainterModel setVertexDotRadius(float);
}
Compiled from "ConvexPolygon.java"
public class org.delaunay.model.ConvexPolygon {
  public strictfp org.delaunay.model.ConvexPolygon(java.lang.Iterable<? extends org.delaunay.model.Vector>);
  public strictfp java.util.List<org.delaunay.model.Vector> getVertices();
  public strictfp double getArea();
  public strictfp org.delaunay.model.ConvexPolygon intersect(org.delaunay.model.ConvexPolygon);
  public strictfp org.delaunay.model.Vector intersection(org.delaunay.model.Vector, org.delaunay.model.Vector, org.delaunay.model.Vector, org.delaunay.model.Vector);
}
Compiled from "Edge.java"
public class org.delaunay.model.Edge {
  public final org.delaunay.model.Vertex a;
  public final org.delaunay.model.Vertex b;
  public org.delaunay.model.Edge(org.delaunay.model.Vertex, org.delaunay.model.Vertex);
  public int hashCode();
  public boolean equals(java.lang.Object);
}
Compiled from "Triangle.java"
public class org.delaunay.model.Triangle {
  public final org.delaunay.model.Vertex a;
  public final org.delaunay.model.Vertex b;
  public final org.delaunay.model.Vertex c;
  public strictfp org.delaunay.model.Triangle(org.delaunay.model.Vertex, org.delaunay.model.Vertex, org.delaunay.model.Vertex);
  public strictfp java.util.LinkedHashSet<org.delaunay.model.Vertex> getVertices();
  public strictfp org.delaunay.model.Vector getCircumCenter();
  public strictfp boolean isInCircum(org.delaunay.model.Vector);
  public strictfp org.delaunay.model.Triangle nextWalk(org.delaunay.model.Vector);
  public strictfp org.delaunay.model.Triangle opposite(org.delaunay.model.Vertex, org.delaunay.model.Vertex);
  public strictfp void invalidateNeighbors();
  public strictfp java.util.Set<org.delaunay.model.Triangle> getNeighbors();
  public strictfp java.lang.Iterable<org.delaunay.model.Edge> getEdges();
  public strictfp double getArea();
  public strictfp java.lang.String toString();
}
Compiled from "TriangulationMap.java"
public class org.delaunay.model.TriangulationMap<T> {
  public org.delaunay.model.TriangulationMap();
  public void clear();
  public boolean contains(double, double);
  public org.delaunay.model.Vertex put(double, double, T);
  public void triangulate() throws org.delaunay.algorithm.Triangulation$InvalidVertexException;
  public org.delaunay.algorithm.Triangulation getTriangulation();
  public org.delaunay.model.Vertex getVertex(T);
  public T get(org.delaunay.model.Vertex);
  public T locate(double, double);
}
Compiled from "TriangulationMultimap.java"
public class org.delaunay.model.TriangulationMultimap<T> {
  public org.delaunay.model.TriangulationMultimap();
  public void clear();
  public org.delaunay.algorithm.Triangulation getTriangulation();
  public boolean contains(double, double);
  public org.delaunay.model.Vertex put(double, double, T);
  public org.delaunay.model.Vertex put(org.delaunay.model.Vertex, T);
  public org.delaunay.model.Vertex getKey(double, double);
  public java.util.List<T> get(org.delaunay.model.Vertex);
  public void triangulate() throws org.delaunay.algorithm.Triangulation$InvalidVertexException;
  public java.util.List<T> locate(double, double);
}
Compiled from "Vector.java"
public class org.delaunay.model.Vector {
  public final double x;
  public final double y;
  public strictfp org.delaunay.model.Vector(double, double);
  public strictfp org.delaunay.model.Vector multiply(double);
  public strictfp org.delaunay.model.Vector divide(double);
  public strictfp org.delaunay.model.Vector subtract(org.delaunay.model.Vector);
  public strictfp org.delaunay.model.Vector add(org.delaunay.model.Vector);
  public strictfp double dot(org.delaunay.model.Vector);
  public strictfp double cross(org.delaunay.model.Vector);
  public strictfp double lengthSquared();
  public strictfp double length();
  public strictfp org.delaunay.model.Vector normalize();
  public strictfp org.delaunay.model.Vector normalTo(org.delaunay.model.Vector);
  public strictfp int orientation(org.delaunay.model.Vector, org.delaunay.model.Vector);
  public strictfp java.awt.geom.Point2D$Double toPoint();
  public strictfp java.lang.String toString();
  public strictfp int hashCode();
  public strictfp boolean equals(java.lang.Object);
}
Compiled from "Vectors.java"
public class org.delaunay.model.Vectors {
  public org.delaunay.model.Vectors();
  public static java.awt.geom.Rectangle2D boundingBox(java.lang.Iterable<? extends org.delaunay.model.Vector>);
}
Compiled from "Vertex.java"
public class org.delaunay.model.Vertex extends org.delaunay.model.Vector {
  public org.delaunay.model.Vertex(double, double);
  public java.util.Set<org.delaunay.model.Vertex> getNeighborVertices();
  public java.util.Set<org.delaunay.model.Triangle> getNeighborTriangles();
  public void addTriangle(org.delaunay.model.Triangle);
  public void removeTriangle(org.delaunay.model.Triangle);
  public void setHilbertIndex(java.lang.Integer);
  public java.lang.Integer getHilbertIndex();
}
Compiled from "Voronoi.java"
public class org.delaunay.model.Voronoi extends org.delaunay.model.ConvexPolygon {
  public static org.delaunay.model.Voronoi createFromTriangulation(org.delaunay.model.Vertex);
  public static org.delaunay.model.Voronoi create(org.delaunay.model.Vertex, java.lang.Iterable<org.delaunay.model.Vertex>, java.lang.Iterable<org.delaunay.model.Triangle>);
  public java.lang.Iterable<org.delaunay.model.Vertex> getNeighborVertices();
}
Compiled from "Voronoi.java"
final class org.delaunay.model.Voronoi$1 implements java.util.Comparator<org.delaunay.model.Vertex> {
  final org.delaunay.model.Vertex val$vert;
  org.delaunay.model.Voronoi$1(org.delaunay.model.Vertex);
  public int compare(org.delaunay.model.Vertex, org.delaunay.model.Vertex);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "Voronoi.java"
final class org.delaunay.model.Voronoi$2 implements com.google.common.base.Predicate<org.delaunay.model.Triangle> {
  final org.delaunay.model.Vertex val$a;
  final org.delaunay.model.Vertex val$b;
  org.delaunay.model.Voronoi$2(org.delaunay.model.Vertex, org.delaunay.model.Vertex);
  public boolean apply(org.delaunay.model.Triangle);
  public boolean apply(java.lang.Object);
}
