Compiled from "SimpleGrammarInJava.java"
public class groovy.SimpleGrammarInJava {
  static final boolean $assertionsDisabled;
  public groovy.SimpleGrammarInJava();
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "SimpleGrammarInJava.java"
final class groovy.SimpleGrammarInJava$1 implements sjm.grammar.IParserMatched {
  groovy.SimpleGrammarInJava$1();
  public void apply(java.util.List<java.lang.Object>, java.util.Stack<java.lang.Object>);
}
Compiled from "ArithmeticExpressionException.java"
public class sjm.examples.book.arithmetic.ArithmeticExpressionException extends java.lang.Exception {
  public sjm.examples.book.arithmetic.ArithmeticExpressionException();
  public sjm.examples.book.arithmetic.ArithmeticExpressionException(java.lang.String);
}
Compiled from "ArithmeticParser.java"
public class sjm.examples.book.arithmetic.ArithmeticParser {
  protected sjm.parse.Sequence expression;
  protected sjm.parse.Alternation factor;
  public sjm.examples.book.arithmetic.ArithmeticParser();
  protected sjm.parse.Parser divideFactor();
  protected sjm.parse.Parser expFactor();
  public sjm.parse.Parser expression();
  protected sjm.parse.Parser factor();
  protected sjm.parse.Parser minusTerm();
  protected sjm.parse.Parser phrase();
  protected sjm.parse.Parser plusTerm();
  public static sjm.parse.Parser start();
  protected sjm.parse.Parser term();
  protected sjm.parse.Parser timesFactor();
  public static double value(java.lang.String) throws sjm.examples.book.arithmetic.ArithmeticExpressionException;
  public void examples() throws sjm.examples.book.arithmetic.ArithmeticExpressionException;
}
Compiled from "DivideAssembler.java"
public class sjm.examples.book.arithmetic.DivideAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.arithmetic.DivideAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ExpAssembler.java"
public class sjm.examples.book.arithmetic.ExpAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.arithmetic.ExpAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "MinusAssembler.java"
public class sjm.examples.book.arithmetic.MinusAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.arithmetic.MinusAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "NumAssembler.java"
public class sjm.examples.book.arithmetic.NumAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.arithmetic.NumAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PlusAssembler.java"
public class sjm.examples.book.arithmetic.PlusAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.arithmetic.PlusAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ShowArithmeticParser.java"
public class sjm.examples.book.arithmetic.ShowArithmeticParser {
  public sjm.examples.book.arithmetic.ShowArithmeticParser();
  public static void main(java.lang.String[]) throws sjm.examples.book.arithmetic.ArithmeticExpressionException;
}
Compiled from "TimesAssembler.java"
public class sjm.examples.book.arithmetic.TimesAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.arithmetic.TimesAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "Chip.java"
public class sjm.examples.book.chips.Chip {
  protected java.lang.Integer chipID;
  protected java.lang.String chipName;
  protected java.lang.Double price;
  protected java.lang.Double ounces;
  protected java.lang.String oil;
  public sjm.examples.book.chips.Chip(int, java.lang.String, double, double, java.lang.String);
  public sjm.examples.book.chips.Chip(java.lang.Integer, java.lang.String, java.lang.Double, java.lang.Double, java.lang.String);
  public java.lang.Integer getChipID();
  public java.lang.String getChipName();
  public java.lang.String getOil();
  public java.lang.Double getOunces();
  public java.lang.Double getPrice();
  public java.lang.String toString();
}
Compiled from "ChipBase.java"
public class sjm.examples.book.chips.ChipBase {
  protected static java.util.Dictionary<java.lang.Integer, sjm.examples.book.chips.Chip> chip;
  protected static java.util.Dictionary<java.lang.Integer, sjm.examples.book.chips.Customer> customer;
  protected static java.util.Vector<sjm.examples.book.chips.Order> order;
  public sjm.examples.book.chips.ChipBase();
  public static void add(sjm.examples.book.chips.Chip);
  public static void add(sjm.examples.book.chips.Customer);
  public static void add(sjm.examples.book.chips.Order);
  public static java.util.Dictionary<java.lang.Integer, sjm.examples.book.chips.Chip> chip();
  public static sjm.examples.book.chips.Chip chip(int);
  public static java.util.Dictionary<java.lang.Integer, sjm.examples.book.chips.Customer> customer();
  public static sjm.examples.book.chips.Customer customer(int);
  public static java.util.Vector<sjm.examples.book.chips.Order> order();
}
Compiled from "Customer.java"
public class sjm.examples.book.chips.Customer {
  protected java.lang.Integer customerID;
  protected java.lang.String lastName;
  protected java.lang.String firstName;
  public sjm.examples.book.chips.Customer(int, java.lang.String, java.lang.String);
  public sjm.examples.book.chips.Customer(java.lang.Integer, java.lang.String, java.lang.String);
  public java.lang.Integer getCustomerID();
  public java.lang.String getFirstName();
  public java.lang.String getLastName();
  public java.lang.String toString();
}
Compiled from "Order.java"
public class sjm.examples.book.chips.Order {
  protected sjm.examples.book.chips.Customer customer;
  protected sjm.examples.book.chips.Chip chip;
  protected java.lang.Integer bagsPerMonth;
  public sjm.examples.book.chips.Order(sjm.examples.book.chips.Customer, sjm.examples.book.chips.Chip, int);
  public sjm.examples.book.chips.Order(sjm.examples.book.chips.Customer, sjm.examples.book.chips.Chip, java.lang.Integer);
  public java.lang.Integer getBagsPerMonth();
  public sjm.examples.book.chips.Chip getChip();
  public sjm.examples.book.chips.Customer getCustomer();
  public java.lang.String toString();
}
Compiled from "CannotCloneAnotherType.java"
public class sjm.examples.book.cloning.CannotCloneAnotherType {
  public sjm.examples.book.cloning.CannotCloneAnotherType();
  public static void main(java.lang.String[]);
}
Compiled from "CannotCloneWithoutCloneable.java"
public class sjm.examples.book.cloning.CannotCloneWithoutCloneable {
  public sjm.examples.book.cloning.CannotCloneWithoutCloneable();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "CloningOk.java"
public class sjm.examples.book.cloning.CloningOk implements java.lang.Cloneable {
  public sjm.examples.book.cloning.CloningOk();
  public static void main(java.lang.String[]);
}
Compiled from "Course.java"
public class sjm.examples.book.cloning.Course implements sjm.parse.PubliclyCloneable<sjm.examples.book.cloning.Course> {
  protected sjm.examples.book.cloning.Professor professor;
  protected sjm.examples.book.cloning.Textbook textbook;
  public sjm.examples.book.cloning.Course();
  public sjm.examples.book.cloning.Course clone();
  public sjm.examples.book.cloning.Professor getProfessor();
  public sjm.examples.book.cloning.Textbook getTextbook();
  public void setProfessor(sjm.examples.book.cloning.Professor);
  public void setTextbook(sjm.examples.book.cloning.Textbook);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "Customer.java"
public class sjm.examples.book.cloning.Customer implements java.lang.Cloneable {
  protected java.lang.String name;
  protected int IQ;
  public sjm.examples.book.cloning.Customer(java.lang.String, int);
  public java.lang.Object clone();
  public int getIQ();
  public void setIQ(int);
}
Compiled from "OrderFlawed.java"
public class sjm.examples.book.cloning.OrderFlawed implements java.lang.Cloneable {
  protected sjm.examples.book.cloning.Customer customer;
  public sjm.examples.book.cloning.OrderFlawed(sjm.examples.book.cloning.Customer);
  public java.lang.Object clone();
  public sjm.examples.book.cloning.Customer getCustomer();
  public void setCustomer(sjm.examples.book.cloning.Customer);
}
Compiled from "OrderOk.java"
public class sjm.examples.book.cloning.OrderOk implements java.lang.Cloneable {
  protected sjm.examples.book.cloning.Customer customer;
  public sjm.examples.book.cloning.OrderOk(sjm.examples.book.cloning.Customer);
  public java.lang.Object clone();
  public sjm.examples.book.cloning.Customer getCustomer();
  public void setCustomer(sjm.examples.book.cloning.Customer);
}
Compiled from "Person.java"
public class sjm.examples.book.cloning.Person implements java.lang.Cloneable {
  java.lang.String name;
  sjm.examples.book.cloning.Person spouse;
  public sjm.examples.book.cloning.Person(java.lang.String);
  public java.lang.Object clone();
  public java.lang.String getName();
  public sjm.examples.book.cloning.Person getSpouse();
  public void setName(java.lang.String);
  public void setSpouse(sjm.examples.book.cloning.Person);
}
Compiled from "Professor.java"
public class sjm.examples.book.cloning.Professor implements sjm.parse.PubliclyCloneable<sjm.examples.book.cloning.Professor> {
  public sjm.examples.book.cloning.Professor();
  public sjm.examples.book.cloning.Professor clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "ShowCustomer.java"
public class sjm.examples.book.cloning.ShowCustomer {
  public sjm.examples.book.cloning.ShowCustomer();
  public static void main(java.lang.String[]);
}
Compiled from "ShowOrderFlawed.java"
public class sjm.examples.book.cloning.ShowOrderFlawed {
  public sjm.examples.book.cloning.ShowOrderFlawed();
  public static void main(java.lang.String[]);
}
Compiled from "ShowOrderOk.java"
public class sjm.examples.book.cloning.ShowOrderOk {
  public sjm.examples.book.cloning.ShowOrderOk();
  public static void main(java.lang.String[]);
}
Compiled from "Textbook.java"
public class sjm.examples.book.cloning.Textbook implements sjm.parse.PubliclyCloneable<sjm.examples.book.cloning.Textbook> {
  public sjm.examples.book.cloning.Textbook();
  public sjm.examples.book.cloning.Textbook clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "AlsoFrenchAssembler.java"
public class sjm.examples.book.coffee.AlsoFrenchAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.coffee.AlsoFrenchAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "Coffee.java"
public class sjm.examples.book.coffee.Coffee implements sjm.parse.PubliclyCloneable<sjm.examples.book.coffee.Coffee> {
  protected java.lang.String name;
  protected java.lang.String formerName;
  protected java.lang.String roast;
  protected boolean alsoOfferFrench;
  protected java.lang.String country;
  protected double price;
  public sjm.examples.book.coffee.Coffee();
  public sjm.examples.book.coffee.Coffee clone();
  public static boolean equal(java.lang.Object, java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean getAlsoOfferFrench();
  public java.lang.String getCountry();
  public java.lang.String getFormerName();
  public java.lang.String getName();
  public double getPrice();
  public java.lang.String getRoast();
  public void setAlsoOfferFrench(boolean);
  public void setCountry(java.lang.String);
  public void setFormerName(java.lang.String);
  public void setName(java.lang.String);
  public void setPrice(double);
  public void setRoast(java.lang.String);
  public java.lang.String toString();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "CoffeeParser.java"
public class sjm.examples.book.coffee.CoffeeParser {
  public sjm.examples.book.coffee.CoffeeParser();
  public sjm.parse.Parser coffee();
  protected sjm.parse.Parser country();
  protected sjm.parse.Parser formerName();
  protected sjm.parse.Parser name();
  protected sjm.parse.Parser orFrench();
  protected sjm.parse.Parser price();
  protected sjm.parse.Parser roast();
  public static sjm.parse.Parser start();
  public static sjm.parse.tokens.Tokenizer tokenizer();
}
Compiled from "CoffeeParserTest.java"
public class sjm.examples.book.coffee.CoffeeParserTest {
  public sjm.examples.book.coffee.CoffeeParserTest();
  public void examples();
}
Compiled from "CountryAssembler.java"
public class sjm.examples.book.coffee.CountryAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.coffee.CountryAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "CountryHelper.java"
public class sjm.examples.book.coffee.CountryHelper extends sjm.examples.book.coffee.Helper {
  public sjm.examples.book.coffee.CountryHelper();
  public void characters(java.lang.String, java.lang.Object);
}
Compiled from "FormerNameAssembler.java"
public class sjm.examples.book.coffee.FormerNameAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.coffee.FormerNameAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "FormerNameHelper.java"
public class sjm.examples.book.coffee.FormerNameHelper extends sjm.examples.book.coffee.Helper {
  public sjm.examples.book.coffee.FormerNameHelper();
  public void characters(java.lang.String, java.lang.Object);
}
Compiled from "Helper.java"
public class sjm.examples.book.coffee.Helper {
  public sjm.examples.book.coffee.Helper();
  public void characters(java.lang.String, java.lang.Object);
  public void startElement(java.lang.Object);
}
Compiled from "NameAssembler.java"
public class sjm.examples.book.coffee.NameAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.coffee.NameAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "NameHelper.java"
public class sjm.examples.book.coffee.NameHelper extends sjm.examples.book.coffee.Helper {
  public sjm.examples.book.coffee.NameHelper();
  public void characters(java.lang.String, java.lang.Object);
}
Compiled from "NewCoffeeHelper.java"
public class sjm.examples.book.coffee.NewCoffeeHelper extends sjm.examples.book.coffee.Helper {
  public sjm.examples.book.coffee.NewCoffeeHelper();
  public void startElement(java.lang.Object);
}
Compiled from "OrFrenchHelper.java"
public class sjm.examples.book.coffee.OrFrenchHelper extends sjm.examples.book.coffee.Helper {
  public sjm.examples.book.coffee.OrFrenchHelper();
  public void startElement(java.lang.Object);
}
Compiled from "PriceAssembler.java"
public class sjm.examples.book.coffee.PriceAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.coffee.PriceAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PriceHelper.java"
public class sjm.examples.book.coffee.PriceHelper extends sjm.examples.book.coffee.Helper {
  public sjm.examples.book.coffee.PriceHelper();
  public void characters(java.lang.String, java.lang.Object);
}
Compiled from "RoastAssembler.java"
public class sjm.examples.book.coffee.RoastAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.coffee.RoastAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RoastHelper.java"
public class sjm.examples.book.coffee.RoastHelper extends sjm.examples.book.coffee.Helper {
  public sjm.examples.book.coffee.RoastHelper();
  public void characters(java.lang.String, java.lang.Object);
}
Compiled from "ShowCoffee.java"
public class sjm.examples.book.coffee.ShowCoffee {
  public sjm.examples.book.coffee.ShowCoffee();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "Combinations.java"
public class sjm.examples.book.combinatorics.Combinations implements java.util.Iterator<java.lang.Object> {
  protected java.lang.Object[] inArray;
  protected int n;
  protected int m;
  protected int[] index;
  protected boolean hasMore;
  public sjm.examples.book.combinatorics.Combinations(java.lang.Object[], int) throws sjm.examples.book.combinatorics.CombinatoricException;
  public boolean hasNext();
  protected void moveIndex();
  public java.lang.Object next();
  protected int rightmostIndexBelowMax();
  public void remove();
}
Compiled from "Combinatoric.java"
public class sjm.examples.book.combinatorics.Combinatoric {
  public sjm.examples.book.combinatorics.Combinatoric();
  public static java.math.BigInteger c(int, int) throws sjm.examples.book.combinatorics.CombinatoricException;
  static void check(int, int) throws sjm.examples.book.combinatorics.CombinatoricException;
  public static java.math.BigInteger factorial(int) throws sjm.examples.book.combinatorics.CombinatoricException;
  public static java.math.BigInteger p(int) throws sjm.examples.book.combinatorics.CombinatoricException;
  public static java.math.BigInteger p(int, int) throws sjm.examples.book.combinatorics.CombinatoricException;
}
Compiled from "CombinatoricException.java"
public class sjm.examples.book.combinatorics.CombinatoricException extends java.lang.Exception {
  public sjm.examples.book.combinatorics.CombinatoricException();
  public sjm.examples.book.combinatorics.CombinatoricException(java.lang.String);
}
Compiled from "Permutations.java"
public class sjm.examples.book.combinatorics.Permutations implements java.util.Iterator<java.lang.Object> {
  protected java.lang.Object[] inArray;
  protected int n;
  protected int m;
  protected int[] index;
  protected boolean hasMore;
  public sjm.examples.book.combinatorics.Permutations(java.lang.Object[]) throws sjm.examples.book.combinatorics.CombinatoricException;
  public sjm.examples.book.combinatorics.Permutations(java.lang.Object[], int) throws sjm.examples.book.combinatorics.CombinatoricException;
  public boolean hasNext();
  protected void moveIndex();
  public java.lang.Object next();
  protected void reverseAfter(int);
  protected int rightmostDip();
  public void remove();
}
Compiled from "AverageAssembler.java"
public class sjm.examples.book.design.AverageAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.design.AverageAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RunningAverage.java"
public class sjm.examples.book.design.RunningAverage implements sjm.parse.PubliclyCloneable<sjm.examples.book.design.RunningAverage> {
  protected double count;
  protected double total;
  public sjm.examples.book.design.RunningAverage();
  public void add(double);
  public double average();
  public sjm.examples.book.design.RunningAverage clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "ShowAssembler.java"
public class sjm.examples.book.design.ShowAssembler {
  public sjm.examples.book.design.ShowAssembler();
  public static void main(java.lang.String[]);
}
Compiled from "ShowStack.java"
public class sjm.examples.book.design.ShowStack {
  public sjm.examples.book.design.ShowStack();
  public static void main(java.lang.String[]);
}
Compiled from "Anonymous.java"
public class sjm.examples.book.engine.Anonymous extends sjm.examples.book.engine.Variable {
  public sjm.examples.book.engine.Anonymous();
  public sjm.examples.book.engine.Term copyForProof(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope);
  public java.lang.Object eval();
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Structure);
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Term);
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Variable);
  public sjm.examples.book.engine.Unification variables();
}
Compiled from "ArithmeticOperator.java"
public class sjm.examples.book.engine.ArithmeticOperator extends sjm.examples.book.engine.Structure implements sjm.examples.book.engine.ArithmeticTerm {
  protected char operator;
  protected sjm.examples.book.engine.ArithmeticTerm term0;
  protected sjm.examples.book.engine.ArithmeticTerm term1;
  public sjm.examples.book.engine.ArithmeticOperator(char, sjm.examples.book.engine.ArithmeticTerm, sjm.examples.book.engine.ArithmeticTerm);
  protected java.lang.Object arithmeticValue(double, double);
  public sjm.examples.book.engine.Term copyForProof(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope);
  public java.lang.Object eval();
  protected double eval(sjm.examples.book.engine.ArithmeticTerm);
}
Compiled from "ArithmeticTerm.java"
public interface sjm.examples.book.engine.ArithmeticTerm extends sjm.examples.book.engine.ComparisonTerm {
}
Compiled from "Atom.java"
public class sjm.examples.book.engine.Atom extends sjm.examples.book.engine.Fact implements sjm.examples.book.engine.ComparisonTerm {
  public sjm.examples.book.engine.Atom(java.lang.Object);
  public java.lang.Object eval();
}
Compiled from "Axiom.java"
public interface sjm.examples.book.engine.Axiom {
  public abstract sjm.examples.book.engine.DynamicAxiom dynamicAxiom(sjm.examples.book.engine.AxiomSource);
  public abstract sjm.examples.book.engine.Structure head();
}
Compiled from "AxiomEnumeration.java"
public interface sjm.examples.book.engine.AxiomEnumeration {
  public abstract boolean hasMoreAxioms();
  public abstract sjm.examples.book.engine.Axiom nextAxiom();
}
Compiled from "AxiomSource.java"
public interface sjm.examples.book.engine.AxiomSource {
  public abstract sjm.examples.book.engine.AxiomEnumeration axioms();
  public abstract sjm.examples.book.engine.AxiomEnumeration axioms(sjm.examples.book.engine.Structure);
}
Compiled from "BooleanFact.java"
public class sjm.examples.book.engine.BooleanFact extends sjm.examples.book.engine.Atom {
  public sjm.examples.book.engine.BooleanFact(java.lang.Boolean);
  public sjm.examples.book.engine.BooleanFact(boolean);
}
Compiled from "BooleanTerm.java"
public interface sjm.examples.book.engine.BooleanTerm extends sjm.examples.book.engine.Term {
}
Compiled from "Comparison.java"
public class sjm.examples.book.engine.Comparison extends sjm.examples.book.engine.Gateway implements sjm.examples.book.engine.BooleanTerm {
  java.lang.String operator;
  sjm.examples.book.engine.ComparisonTerm term0;
  sjm.examples.book.engine.ComparisonTerm term1;
  public sjm.examples.book.engine.Comparison(java.lang.String, sjm.examples.book.engine.ComparisonTerm, sjm.examples.book.engine.ComparisonTerm);
  public boolean canProveOnce();
  protected boolean compare(java.lang.Object, java.lang.Object);
  protected boolean compareNumber(java.lang.Number, java.lang.Number);
  protected boolean compareString(java.lang.String, java.lang.String);
  public sjm.examples.book.engine.Term copyForProof(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope);
  public java.lang.Object eval();
}
Compiled from "ComparisonTerm.java"
public interface sjm.examples.book.engine.ComparisonTerm extends sjm.examples.book.engine.Term {
}
Compiled from "ConsultingNot.java"
public class sjm.examples.book.engine.ConsultingNot extends sjm.examples.book.engine.Gateway {
  sjm.examples.book.engine.ConsultingStructure consultingStructure;
  protected sjm.examples.book.engine.ConsultingNot(sjm.examples.book.engine.ConsultingStructure);
  public boolean canProveOnce();
  protected void cleanup();
  public java.lang.String toString();
}
Compiled from "ConsultingStructure.java"
public class sjm.examples.book.engine.ConsultingStructure extends sjm.examples.book.engine.Structure {
  protected sjm.examples.book.engine.AxiomSource source;
  protected sjm.examples.book.engine.AxiomEnumeration axioms;
  protected sjm.examples.book.engine.Unification currentUnification;
  protected sjm.examples.book.engine.DynamicRule resolvent;
  protected sjm.examples.book.engine.ConsultingStructure(sjm.examples.book.engine.AxiomSource, java.lang.Object, sjm.examples.book.engine.Term[]);
  protected sjm.examples.book.engine.AxiomEnumeration axioms();
  public boolean canFindNextProof();
  protected boolean canUnify();
  protected void unbind();
}
Compiled from "DynamicAxiom.java"
public interface sjm.examples.book.engine.DynamicAxiom {
  public abstract sjm.examples.book.engine.Structure head();
  public abstract sjm.examples.book.engine.DynamicRule resolvent();
}
Compiled from "DynamicRule.java"
public class sjm.examples.book.engine.DynamicRule extends sjm.examples.book.engine.Rule implements sjm.examples.book.engine.DynamicAxiom {
  protected sjm.examples.book.engine.AxiomSource as;
  protected sjm.examples.book.engine.Scope scope;
  protected boolean headInvolved;
  protected sjm.examples.book.engine.DynamicRule tail;
  protected sjm.examples.book.engine.DynamicRule(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope, sjm.examples.book.engine.Structure[]);
  protected sjm.examples.book.engine.DynamicRule(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope, sjm.examples.book.engine.Rule);
  public boolean canEstablish();
  public boolean canFindNextProof();
  public sjm.examples.book.engine.Scope getScope();
  public boolean isEmpty();
  public sjm.examples.book.engine.Variable lookup(java.lang.String);
  protected static sjm.examples.book.engine.Structure[] provableStructures(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope, sjm.examples.book.engine.Structure[]);
  public sjm.examples.book.engine.DynamicRule resolvent();
  public sjm.examples.book.engine.DynamicRule tail();
  public sjm.examples.book.engine.Unification variables();
}
Compiled from "EmptyList.java"
public class sjm.examples.book.engine.EmptyList extends sjm.examples.book.engine.Fact {
  protected sjm.examples.book.engine.EmptyList();
  public boolean isList();
  public java.lang.String listTailString();
  public java.lang.String toString();
}
Compiled from "Evaluation.java"
public class sjm.examples.book.engine.Evaluation extends sjm.examples.book.engine.Gateway {
  sjm.examples.book.engine.Term term0;
  sjm.examples.book.engine.Term term1;
  protected sjm.examples.book.engine.Unification currentUnification;
  public sjm.examples.book.engine.Evaluation(sjm.examples.book.engine.Term, sjm.examples.book.engine.Term);
  public boolean canProveOnce();
  protected void cleanup();
  public sjm.examples.book.engine.Term copyForProof(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope);
  public void unbind();
}
Compiled from "EvaluationException.java"
public class sjm.examples.book.engine.EvaluationException extends java.lang.RuntimeException {
  public sjm.examples.book.engine.EvaluationException();
  public sjm.examples.book.engine.EvaluationException(java.lang.String);
}
Compiled from "Fact.java"
public class sjm.examples.book.engine.Fact extends sjm.examples.book.engine.Structure implements sjm.examples.book.engine.Axiom,sjm.examples.book.engine.DynamicAxiom {
  protected static final sjm.examples.book.engine.DynamicRule resolvent;
  public sjm.examples.book.engine.Fact(java.lang.Object);
  public sjm.examples.book.engine.Fact(java.lang.Object, java.lang.Object[]);
  public sjm.examples.book.engine.Fact(java.lang.Object, sjm.examples.book.engine.Fact[]);
  public sjm.examples.book.engine.Fact(java.lang.Object, sjm.examples.book.engine.Term[]);
  public sjm.examples.book.engine.Fact(java.lang.Object, java.lang.Object);
  public sjm.examples.book.engine.Fact(java.lang.Object, java.lang.Object, java.lang.Object);
  public sjm.examples.book.engine.Term copyForProof(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope);
  public sjm.examples.book.engine.DynamicAxiom dynamicAxiom(sjm.examples.book.engine.AxiomSource);
  protected static sjm.examples.book.engine.Fact[] facts(java.lang.Object[]);
  public sjm.examples.book.engine.Structure head();
  public sjm.examples.book.engine.DynamicRule resolvent();
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Fact);
  static {};
}
Compiled from "Gateway.java"
public abstract class sjm.examples.book.engine.Gateway extends sjm.examples.book.engine.Structure {
  protected boolean open;
  protected sjm.examples.book.engine.Gateway(java.lang.Object, sjm.examples.book.engine.Term[]);
  public boolean canFindNextProof();
  public boolean canProveOnce();
  protected void cleanup();
}
Compiled from "Not.java"
public class sjm.examples.book.engine.Not extends sjm.examples.book.engine.Structure {
  public sjm.examples.book.engine.Not(java.lang.Object);
  public sjm.examples.book.engine.Not(java.lang.Object, sjm.examples.book.engine.Term[]);
  public sjm.examples.book.engine.Not(sjm.examples.book.engine.Structure);
  public sjm.examples.book.engine.Term copyForProof(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
}
Compiled from "NumberFact.java"
public class sjm.examples.book.engine.NumberFact extends sjm.examples.book.engine.Atom implements sjm.examples.book.engine.ArithmeticTerm {
  public sjm.examples.book.engine.NumberFact(double);
  public sjm.examples.book.engine.NumberFact(java.lang.Number);
}
Compiled from "Program.java"
public class sjm.examples.book.engine.Program implements sjm.examples.book.engine.AxiomSource {
  protected java.util.List<sjm.examples.book.engine.Axiom> axioms;
  public sjm.examples.book.engine.Program();
  public sjm.examples.book.engine.Program(sjm.examples.book.engine.Axiom[]);
  public void addAxiom(sjm.examples.book.engine.Axiom);
  public void append(sjm.examples.book.engine.AxiomSource);
  public sjm.examples.book.engine.AxiomEnumeration axioms();
  public sjm.examples.book.engine.AxiomEnumeration axioms(sjm.examples.book.engine.Structure);
  public java.lang.String toString();
}
Compiled from "ProgramEnumerator.java"
public class sjm.examples.book.engine.ProgramEnumerator implements sjm.examples.book.engine.AxiomEnumeration {
  protected java.util.Iterator<sjm.examples.book.engine.Axiom> i;
  public sjm.examples.book.engine.ProgramEnumerator(sjm.examples.book.engine.Program);
  public boolean hasMoreAxioms();
  public sjm.examples.book.engine.Axiom nextAxiom();
}
Compiled from "Query.java"
public class sjm.examples.book.engine.Query extends sjm.examples.book.engine.DynamicRule {
  public sjm.examples.book.engine.Query(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Structure[]);
  public sjm.examples.book.engine.Query(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Rule);
  protected sjm.examples.book.engine.Query(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope, sjm.examples.book.engine.Structure[]);
  public sjm.examples.book.engine.Query(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Structure);
  public sjm.examples.book.engine.Query(sjm.examples.book.engine.Structure);
  public java.lang.String toString();
}
Compiled from "Rule.java"
public class sjm.examples.book.engine.Rule implements sjm.examples.book.engine.Axiom {
  protected sjm.examples.book.engine.Structure[] structures;
  public sjm.examples.book.engine.Rule(sjm.examples.book.engine.Structure[]);
  public sjm.examples.book.engine.Rule(sjm.examples.book.engine.Structure);
  public sjm.examples.book.engine.DynamicAxiom dynamicAxiom(sjm.examples.book.engine.AxiomSource);
  public boolean equals(java.lang.Object);
  public sjm.examples.book.engine.Structure head();
  public java.lang.String toString();
}
Compiled from "Scope.java"
public class sjm.examples.book.engine.Scope implements sjm.parse.PubliclyCloneable<sjm.examples.book.engine.Scope> {
  java.util.Map<java.lang.String, sjm.examples.book.engine.Variable> dictionary;
  public sjm.examples.book.engine.Scope();
  public sjm.examples.book.engine.Scope(sjm.examples.book.engine.Term[]);
  public void clear();
  public sjm.examples.book.engine.Scope clone();
  public boolean isDefined(java.lang.String);
  public sjm.examples.book.engine.Variable lookup(java.lang.String);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "Structure.java"
public class sjm.examples.book.engine.Structure implements sjm.examples.book.engine.Term {
  protected java.lang.Object functor;
  protected sjm.examples.book.engine.Term[] terms;
  public static final sjm.examples.book.engine.EmptyList emptyList;
  public sjm.examples.book.engine.Structure(java.lang.Object);
  public sjm.examples.book.engine.Structure(java.lang.Object, sjm.examples.book.engine.Term[]);
  public int arity();
  public boolean canFindNextProof();
  public sjm.examples.book.engine.Term copyForProof(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope);
  public boolean equals(java.lang.Object);
  public java.lang.Object eval();
  public boolean functorAndArityEquals(sjm.examples.book.engine.Structure);
  protected static sjm.examples.book.engine.Term[] headAndTail(sjm.examples.book.engine.Term[], sjm.examples.book.engine.Term);
  public boolean isList();
  public static sjm.examples.book.engine.Structure list(java.lang.Object[]);
  public static sjm.examples.book.engine.Structure list(sjm.examples.book.engine.Term[]);
  public static sjm.examples.book.engine.Structure list(sjm.examples.book.engine.Term[], sjm.examples.book.engine.Term);
  public java.lang.String listTailString();
  protected java.lang.String listTermsToString();
  public sjm.examples.book.engine.Term[] terms();
  public java.lang.String toString();
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Structure);
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Term);
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Variable);
  public sjm.examples.book.engine.Unification variables();
  static {};
}
Compiled from "Term.java"
public interface sjm.examples.book.engine.Term {
  public abstract sjm.examples.book.engine.Term copyForProof(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope);
  public abstract java.lang.Object eval();
  public abstract boolean isList();
  public abstract java.lang.String listTailString();
  public abstract sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Structure);
  public abstract sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Term);
  public abstract sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Variable);
  public abstract sjm.examples.book.engine.Unification variables();
}
Compiled from "Unification.java"
public class sjm.examples.book.engine.Unification {
  public static final sjm.examples.book.engine.Unification empty;
  java.util.List<sjm.examples.book.engine.Variable> variables;
  public sjm.examples.book.engine.Unification();
  public sjm.examples.book.engine.Unification(sjm.examples.book.engine.Variable);
  public sjm.examples.book.engine.Unification addVariable(sjm.examples.book.engine.Variable);
  public sjm.examples.book.engine.Unification append(sjm.examples.book.engine.Unification);
  public java.util.Iterator<sjm.examples.book.engine.Variable> iterator();
  public int size();
  public java.lang.String toString();
  public java.lang.String toStringQuiet();
  public void unbind();
  protected sjm.examples.book.engine.Variable variableAt(int);
  protected java.util.List<sjm.examples.book.engine.Variable> variables();
  static {};
}
Compiled from "Variable.java"
public class sjm.examples.book.engine.Variable implements sjm.examples.book.engine.ArithmeticTerm,sjm.examples.book.engine.ComparisonTerm {
  public final java.lang.String name;
  protected sjm.examples.book.engine.Term instantiation;
  public sjm.examples.book.engine.Variable(java.lang.String);
  public sjm.examples.book.engine.Term copyForProof(sjm.examples.book.engine.AxiomSource, sjm.examples.book.engine.Scope);
  public java.lang.String definitionString();
  public boolean equals(java.lang.Object);
  public java.lang.Object eval();
  public boolean isList();
  public java.lang.String listTailString();
  public java.lang.String toString();
  public void unbind();
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Structure);
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Term);
  public sjm.examples.book.engine.Unification unify(sjm.examples.book.engine.Variable);
  public sjm.examples.book.engine.Unification variables();
}
Compiled from "City.java"
public class sjm.examples.book.engine.samples.City {
  public java.lang.String name;
  public int altitude;
  public sjm.examples.book.engine.samples.City(java.lang.String, int);
}
Compiled from "ShowAnonymous.java"
public class sjm.examples.book.engine.samples.ShowAnonymous {
  public sjm.examples.book.engine.samples.ShowAnonymous();
  public static void main(java.lang.String[]);
}
Compiled from "ShowArithmetic.java"
public class sjm.examples.book.engine.samples.ShowArithmetic {
  public sjm.examples.book.engine.samples.ShowArithmetic();
  public static void main(java.lang.String[]);
}
Compiled from "ShowArithmeticEvaluation.java"
public class sjm.examples.book.engine.samples.ShowArithmeticEvaluation {
  public sjm.examples.book.engine.samples.ShowArithmeticEvaluation();
  public static void main(java.lang.String[]);
}
Compiled from "ShowComparison.java"
public class sjm.examples.book.engine.samples.ShowComparison {
  public sjm.examples.book.engine.samples.ShowComparison();
  public static void main(java.lang.String[]);
}
Compiled from "ShowEvaluation.java"
public class sjm.examples.book.engine.samples.ShowEvaluation {
  public sjm.examples.book.engine.samples.ShowEvaluation();
  public static void main(java.lang.String[]);
}
Compiled from "ShowFacts.java"
public class sjm.examples.book.engine.samples.ShowFacts {
  public sjm.examples.book.engine.samples.ShowFacts();
  public static void main(java.lang.String[]);
}
Compiled from "ShowFailedUnification.java"
public class sjm.examples.book.engine.samples.ShowFailedUnification {
  public sjm.examples.book.engine.samples.ShowFailedUnification();
  public static void main(java.lang.String[]);
}
Compiled from "ShowJoin.java"
public class sjm.examples.book.engine.samples.ShowJoin {
  public sjm.examples.book.engine.samples.ShowJoin();
  public static sjm.examples.book.engine.Program coffee();
  public static sjm.examples.book.engine.Program customer();
  public static void main(java.lang.String[]);
  public static sjm.examples.book.engine.Program order();
}
Compiled from "ShowList.java"
public class sjm.examples.book.engine.samples.ShowList {
  public sjm.examples.book.engine.samples.ShowList();
  public static void main(java.lang.String[]);
}
Compiled from "ShowNot.java"
public class sjm.examples.book.engine.samples.ShowNot {
  public sjm.examples.book.engine.samples.ShowNot();
  public static void main(java.lang.String[]);
}
Compiled from "ShowProgram.java"
public class sjm.examples.book.engine.samples.ShowProgram {
  public sjm.examples.book.engine.samples.ShowProgram();
  public static sjm.examples.book.engine.Program altitudes();
  public static void main(java.lang.String[]);
}
Compiled from "ShowProof.java"
public class sjm.examples.book.engine.samples.ShowProof {
  public sjm.examples.book.engine.samples.ShowProof();
  public static sjm.examples.book.engine.Program charges();
  public static sjm.examples.book.engine.Program customers();
  public static void main(java.lang.String[]);
}
Compiled from "ShowRule.java"
public class sjm.examples.book.engine.samples.ShowRule {
  public sjm.examples.book.engine.samples.ShowRule();
  public static void main(java.lang.String[]);
}
Compiled from "ShowScreening.java"
public class sjm.examples.book.engine.samples.ShowScreening {
  public sjm.examples.book.engine.samples.ShowScreening();
  public static void main(java.lang.String[]);
}
Compiled from "ShowStructure.java"
public class sjm.examples.book.engine.samples.ShowStructure {
  public sjm.examples.book.engine.samples.ShowStructure();
  public static void main(java.lang.String[]);
}
Compiled from "ShowStructureEvaluation.java"
public class sjm.examples.book.engine.samples.ShowStructureEvaluation {
  public sjm.examples.book.engine.samples.ShowStructureEvaluation();
  public static void main(java.lang.String[]);
}
Compiled from "ShowStructureUnification.java"
public class sjm.examples.book.engine.samples.ShowStructureUnification {
  public sjm.examples.book.engine.samples.ShowStructureUnification();
  public static void main(java.lang.String[]);
}
Compiled from "ShowTwoStructureQuery.java"
public class sjm.examples.book.engine.samples.ShowTwoStructureQuery {
  public sjm.examples.book.engine.samples.ShowTwoStructureQuery();
  public static void main(java.lang.String[]);
}
Compiled from "ShowVariable.java"
public class sjm.examples.book.engine.samples.ShowVariable {
  public sjm.examples.book.engine.samples.ShowVariable();
  public static void main(java.lang.String[]);
}
Compiled from "ShowVariableUnification.java"
public class sjm.examples.book.engine.samples.ShowVariableUnification {
  public sjm.examples.book.engine.samples.ShowVariableUnification();
  public static void main(java.lang.String[]);
}
Compiled from "ShowVariableUnification2.java"
public class sjm.examples.book.engine.samples.ShowVariableUnification2 {
  public sjm.examples.book.engine.samples.ShowVariableUnification2();
  public static void main(java.lang.String[]);
}
Compiled from "ShowVariableUnification3.java"
public class sjm.examples.book.engine.samples.ShowVariableUnification3 {
  public sjm.examples.book.engine.samples.ShowVariableUnification3();
  public static void main(java.lang.String[]);
}
Compiled from "AssignmentCommand.java"
public class sjm.examples.book.imperative.AssignmentCommand extends sjm.examples.book.imperative.Command {
  protected sjm.examples.book.engine.Evaluation evaluation;
  public sjm.examples.book.imperative.AssignmentCommand(sjm.examples.book.engine.Evaluation);
  public void execute();
  public java.lang.String toString();
}
Compiled from "Command.java"
public abstract class sjm.examples.book.imperative.Command {
  public sjm.examples.book.imperative.Command();
  public abstract void execute();
}
Compiled from "CommandSequence.java"
public class sjm.examples.book.imperative.CommandSequence extends sjm.examples.book.imperative.Command {
  protected java.util.List<sjm.examples.book.imperative.Command> commands;
  public sjm.examples.book.imperative.CommandSequence();
  public void addCommand(sjm.examples.book.imperative.Command);
  protected java.util.List<sjm.examples.book.imperative.Command> commands();
  public void execute();
  public java.lang.String toString();
}
Compiled from "ForCommand.java"
public class sjm.examples.book.imperative.ForCommand extends sjm.examples.book.imperative.Command {
  protected sjm.examples.book.imperative.Command setupCommand;
  protected sjm.examples.book.engine.BooleanTerm condition;
  protected sjm.examples.book.imperative.Command endCommand;
  protected sjm.examples.book.imperative.Command bodyCommand;
  public sjm.examples.book.imperative.ForCommand(sjm.examples.book.engine.Variable, double, double, double, sjm.examples.book.imperative.Command);
  public sjm.examples.book.imperative.ForCommand(sjm.examples.book.engine.Variable, int, int, sjm.examples.book.imperative.Command);
  public sjm.examples.book.imperative.ForCommand(sjm.examples.book.imperative.Command, sjm.examples.book.engine.BooleanTerm, sjm.examples.book.imperative.Command, sjm.examples.book.imperative.Command);
  public void execute();
  public java.lang.String toString();
}
Compiled from "IfCommand.java"
public class sjm.examples.book.imperative.IfCommand extends sjm.examples.book.imperative.Command {
  protected sjm.examples.book.engine.BooleanTerm condition;
  protected sjm.examples.book.imperative.Command ifCommand;
  protected sjm.examples.book.imperative.Command elseCommand;
  public sjm.examples.book.imperative.IfCommand(sjm.examples.book.engine.BooleanTerm, sjm.examples.book.imperative.Command);
  public sjm.examples.book.imperative.IfCommand(sjm.examples.book.engine.BooleanTerm, sjm.examples.book.imperative.Command, sjm.examples.book.imperative.Command);
  public void execute();
  public java.lang.String toString();
}
Compiled from "NullCommand.java"
public class sjm.examples.book.imperative.NullCommand extends sjm.examples.book.imperative.Command {
  public sjm.examples.book.imperative.NullCommand();
  public void execute();
  public java.lang.String toString();
}
Compiled from "PrintlnCommand.java"
public class sjm.examples.book.imperative.PrintlnCommand extends sjm.examples.book.imperative.Command {
  protected sjm.examples.book.engine.Term term;
  protected java.io.PrintWriter out;
  public sjm.examples.book.imperative.PrintlnCommand(sjm.examples.book.engine.Term);
  public sjm.examples.book.imperative.PrintlnCommand(sjm.examples.book.engine.Term, java.io.PrintWriter);
  public void execute();
  public java.lang.String toString();
}
Compiled from "ReadCommand.java"
public class sjm.examples.book.imperative.ReadCommand extends sjm.examples.book.imperative.Command {
  protected sjm.examples.book.engine.Variable variable;
  protected java.io.BufferedReader reader;
  public sjm.examples.book.imperative.ReadCommand(sjm.examples.book.engine.Variable);
  public sjm.examples.book.imperative.ReadCommand(sjm.examples.book.engine.Variable, java.io.BufferedReader);
  public sjm.examples.book.imperative.ReadCommand(sjm.examples.book.engine.Variable, java.io.InputStream);
  public void execute();
  public java.lang.String toString();
}
Compiled from "ShowAssignmentCommand.java"
public class sjm.examples.book.imperative.ShowAssignmentCommand {
  public sjm.examples.book.imperative.ShowAssignmentCommand();
  public static void main(java.lang.String[]);
}
Compiled from "ShowCommand.java"
public class sjm.examples.book.imperative.ShowCommand {
  public sjm.examples.book.imperative.ShowCommand();
  public static void main(java.lang.String[]);
}
Compiled from "WhileCommand.java"
public class sjm.examples.book.imperative.WhileCommand extends sjm.examples.book.imperative.Command {
  protected sjm.examples.book.engine.BooleanTerm condition;
  protected sjm.examples.book.imperative.Command command;
  public sjm.examples.book.imperative.WhileCommand(sjm.examples.book.engine.BooleanTerm, sjm.examples.book.imperative.Command);
  public void execute();
  public java.lang.String toString();
}
Compiled from "ShowApostrophe.java"
public class sjm.examples.book.introduction.ShowApostrophe {
  public sjm.examples.book.introduction.ShowApostrophe();
  public static void main(java.lang.String[]);
}
Compiled from "ShowAssemblyAppearance.java"
public class sjm.examples.book.introduction.ShowAssemblyAppearance {
  public sjm.examples.book.introduction.ShowAssemblyAppearance();
  public static void main(java.lang.String[]);
}
Compiled from "ShowComposite.java"
public class sjm.examples.book.introduction.ShowComposite {
  public sjm.examples.book.introduction.ShowComposite();
  public static void main(java.lang.String[]);
}
Compiled from "ShowElementsAbove.java"
public class sjm.examples.book.introduction.ShowElementsAbove {
  public sjm.examples.book.introduction.ShowElementsAbove();
  public static void main(java.lang.String[]);
}
Compiled from "ShowElementsAbove.java"
final class sjm.examples.book.introduction.ShowElementsAbove$1 implements sjm.parse.IAssembler {
  sjm.examples.book.introduction.ShowElementsAbove$1();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ShowEmpty.java"
public class sjm.examples.book.introduction.ShowEmpty {
  public sjm.examples.book.introduction.ShowEmpty();
  public static void main(java.lang.String[]);
}
Compiled from "ShowLiteral.java"
public class sjm.examples.book.introduction.ShowLiteral {
  public sjm.examples.book.introduction.ShowLiteral();
  public static void main(java.lang.String[]);
}
Compiled from "ShowNums.java"
public class sjm.examples.book.introduction.ShowNums {
  public sjm.examples.book.introduction.ShowNums();
  public static void main(java.lang.String[]);
}
Compiled from "ShowQuotedString.java"
public class sjm.examples.book.introduction.ShowQuotedString {
  public sjm.examples.book.introduction.ShowQuotedString();
  public static void main(java.lang.String[]);
}
Compiled from "ShowRepetition.java"
public class sjm.examples.book.introduction.ShowRepetition {
  public sjm.examples.book.introduction.ShowRepetition();
  public static void main(java.lang.String[]);
}
Compiled from "ShowTerminal.java"
public class sjm.examples.book.introduction.ShowTerminal {
  public sjm.examples.book.introduction.ShowTerminal();
  public static void main(java.lang.String[]);
}
Compiled from "ShowTokenAssembly.java"
public class sjm.examples.book.introduction.ShowTokenAssembly {
  public sjm.examples.book.introduction.ShowTokenAssembly();
  public static void main(java.lang.String[]);
}
Compiled from "KaratePuzzle.java"
public class sjm.examples.book.karate.KaratePuzzle {
  protected sjm.examples.book.karate.Student amy;
  protected sjm.examples.book.karate.Student betti;
  protected sjm.examples.book.karate.Student carla;
  protected sjm.examples.book.karate.Student dianne;
  protected sjm.examples.book.karate.Student[] students;
  protected java.lang.String[] lastNames;
  protected java.lang.String[] specialties;
  public sjm.examples.book.karate.KaratePuzzle();
  protected void assembleStudents(java.lang.Object[], java.lang.Object[]);
  protected boolean cluesVerify();
  public static void main(java.lang.String[]) throws sjm.examples.book.combinatorics.CombinatoricException;
  protected void showStudents();
  protected void solve() throws sjm.examples.book.combinatorics.CombinatoricException;
  protected sjm.examples.book.karate.Student studentNamed(java.lang.String);
}
Compiled from "Student.java"
public class sjm.examples.book.karate.Student {
  public java.lang.String firstName;
  public java.lang.String lastName;
  public java.lang.String specialty;
  public sjm.examples.book.karate.Student(java.lang.String);
  public java.lang.String toString();
}
Compiled from "AnonymousAssembler.java"
public class sjm.examples.book.logic.AnonymousAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.AnonymousAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ArithmeticAssembler.java"
public class sjm.examples.book.logic.ArithmeticAssembler implements sjm.parse.IAssembler {
  protected char operator;
  public sjm.examples.book.logic.ArithmeticAssembler(char);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "AtomAssembler.java"
public class sjm.examples.book.logic.AtomAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.AtomAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "AxiomAssembler.java"
public class sjm.examples.book.logic.AxiomAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.AxiomAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ComparisonAssembler.java"
public class sjm.examples.book.logic.ComparisonAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.ComparisonAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "EvaluationAssembler.java"
public class sjm.examples.book.logic.EvaluationAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.EvaluationAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ListAssembler.java"
public class sjm.examples.book.logic.ListAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.ListAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ListWithTailAssembler.java"
public class sjm.examples.book.logic.ListWithTailAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.ListWithTailAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "LogikusException.java"
public class sjm.examples.book.logic.LogikusException extends java.lang.RuntimeException {
  public sjm.examples.book.logic.LogikusException();
  public sjm.examples.book.logic.LogikusException(java.lang.String);
}
Compiled from "LogikusFacade.java"
public class sjm.examples.book.logic.LogikusFacade {
  public sjm.examples.book.logic.LogikusFacade();
  public static sjm.examples.book.engine.Axiom axiom(java.lang.String);
  protected static sjm.examples.book.engine.Axiom axiom(sjm.parse.tokens.TokenString);
  protected static void checkForUppercase(sjm.parse.tokens.TokenString, java.lang.String);
  protected static java.lang.Object parse(sjm.parse.tokens.TokenString, sjm.parse.IParser, java.lang.String);
  public static sjm.examples.book.engine.Program program(java.lang.String);
  public static sjm.examples.book.engine.Query query(java.lang.String, sjm.examples.book.engine.AxiomSource);
  protected static java.lang.Object reportLeftovers(sjm.parse.Assembly, java.lang.String);
  protected static void reportNoMatch(sjm.parse.tokens.TokenString, java.lang.String);
}
Compiled from "LogikusIde.java"
public class sjm.examples.book.logic.LogikusIde {
  protected sjm.examples.book.logic.LogikusMediator mediator;
  protected javax.swing.JTextArea programArea;
  protected javax.swing.JTextArea resultsArea;
  protected javax.swing.JTextArea queryArea;
  protected javax.swing.JButton proveNextButton;
  protected javax.swing.JButton proveRestButton;
  protected javax.swing.JButton haltButton;
  protected javax.swing.JButton clearProgramButton;
  protected javax.swing.JButton clearResultsButton;
  public sjm.examples.book.logic.LogikusIde();
  protected javax.swing.Box buttonBox();
  protected javax.swing.JPanel clearButtonPanel();
  protected javax.swing.JButton clearProgramButton();
  protected javax.swing.JButton clearResultsButton();
  protected javax.swing.JButton haltButton();
  public static void main(java.lang.String[]);
  protected javax.swing.JPanel mainPanel();
  protected sjm.examples.book.logic.LogikusMediator mediator();
  protected javax.swing.JTextArea programArea();
  protected javax.swing.JPanel proveButtonPanel();
  protected javax.swing.JButton proveNextButton();
  protected javax.swing.JButton proveRestButton();
  protected javax.swing.JTextArea queryArea();
  protected javax.swing.JTextArea resultsArea();
}
Compiled from "LogikusMediator.java"
public class sjm.examples.book.logic.LogikusMediator implements java.awt.event.ActionListener,java.lang.Runnable {
  protected javax.swing.JButton proveNextButton;
  protected javax.swing.JButton proveRestButton;
  protected javax.swing.JButton haltButton;
  protected javax.swing.JButton clearProgramButton;
  protected javax.swing.JButton clearResultsButton;
  protected javax.swing.JTextArea programArea;
  protected javax.swing.JTextArea resultsArea;
  protected javax.swing.JTextArea queryArea;
  protected boolean proveRemaining;
  protected java.lang.Thread computeThread;
  protected java.lang.String lastProgramText;
  protected java.lang.String lastQueryText;
  protected sjm.examples.book.engine.Program program;
  protected sjm.examples.book.engine.Query query;
  public sjm.examples.book.logic.LogikusMediator();
  public void actionPerformed(java.awt.event.ActionEvent);
  protected void conductProof();
  protected void display(java.lang.String);
  public void initialize(javax.swing.JButton, javax.swing.JButton, javax.swing.JButton, javax.swing.JButton, javax.swing.JButton, javax.swing.JTextArea, javax.swing.JTextArea, javax.swing.JTextArea);
  protected void parseProgramAndQuery();
  protected void proveNext();
  protected void proveRemaining();
  public void run();
  protected void setComputing(boolean);
}
Compiled from "LogikusMediator.java"
class sjm.examples.book.logic.LogikusMediator$1 implements java.lang.Runnable {
  final java.lang.String val$s;
  final sjm.examples.book.logic.LogikusMediator this$0;
  sjm.examples.book.logic.LogikusMediator$1(sjm.examples.book.logic.LogikusMediator, java.lang.String);
  public void run();
}
Compiled from "LogikusParser.java"
public class sjm.examples.book.logic.LogikusParser {
  protected sjm.parse.Sequence structure;
  protected sjm.parse.Sequence expression;
  protected sjm.parse.Sequence list;
  public sjm.examples.book.logic.LogikusParser();
  protected sjm.parse.Parser arg();
  public sjm.parse.Parser axiom();
  protected static sjm.parse.Sequence commaList(sjm.parse.Parser);
  public sjm.parse.Sequence comparison();
  public sjm.parse.Alternation condition();
  protected sjm.parse.Parser divideFactor();
  protected sjm.parse.Parser evaluation();
  protected sjm.parse.Parser expression();
  protected sjm.parse.Parser factor();
  protected sjm.parse.Parser functor();
  public sjm.parse.Sequence list();
  protected sjm.parse.Parser listContents();
  protected sjm.parse.Parser listTail();
  protected sjm.parse.Parser minusPhrase();
  protected sjm.parse.Parser not();
  public sjm.parse.Parser num();
  protected sjm.parse.Parser operator();
  protected sjm.parse.Parser phrase();
  protected sjm.parse.Parser plusPhrase();
  public static sjm.parse.IParser query();
  protected sjm.parse.Parser ruleDef();
  public static sjm.parse.Parser start();
  protected sjm.parse.Parser structure();
  protected sjm.parse.Parser term();
  protected sjm.parse.Parser timesFactor();
  protected sjm.parse.Parser variable();
}
Compiled from "LogikusTest.java"
public class sjm.examples.book.logic.LogikusTest {
  public sjm.examples.book.logic.LogikusTest();
  public void atom();
  public void fact();
  public void list();
  public void listWithTail();
}
Compiled from "NotAssembler.java"
public class sjm.examples.book.logic.NotAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.NotAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "StructureWithTermsAssembler.java"
public class sjm.examples.book.logic.StructureWithTermsAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.StructureWithTermsAssembler();
  public static sjm.examples.book.engine.Term[] vectorReversedIntoTerms(java.util.List<java.lang.Object>);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "VariableAssembler.java"
public class sjm.examples.book.logic.VariableAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.logic.VariableAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "LowercaseWord.java"
public class sjm.examples.book.mechanics.LowercaseWord extends sjm.parse.tokens.Word {
  public sjm.examples.book.mechanics.LowercaseWord();
  protected boolean qualifies(java.lang.Object);
  protected char workOnCharForRandomExpansion(char, int);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "ShowAlternationBasic.java"
public class sjm.examples.book.mechanics.ShowAlternationBasic {
  public sjm.examples.book.mechanics.ShowAlternationBasic();
  public static void main(java.lang.String[]);
}
Compiled from "ShowAlternationSet.java"
public class sjm.examples.book.mechanics.ShowAlternationSet {
  public sjm.examples.book.mechanics.ShowAlternationSet();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "ShowAmbiguity.java"
public class sjm.examples.book.mechanics.ShowAmbiguity {
  public sjm.examples.book.mechanics.ShowAmbiguity();
  public static void main(java.lang.String[]);
}
Compiled from "ShowAmbiguity.java"
final class sjm.examples.book.mechanics.ShowAmbiguity$1 implements sjm.parse.IAssembler {
  sjm.examples.book.mechanics.ShowAmbiguity$1();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ShowAssemblies.java"
public class sjm.examples.book.mechanics.ShowAssemblies {
  public sjm.examples.book.mechanics.ShowAssemblies();
  public static void main(java.lang.String[]);
}
Compiled from "ShowAstarAB.java"
public class sjm.examples.book.mechanics.ShowAstarAB {
  public sjm.examples.book.mechanics.ShowAstarAB();
  public static void main(java.lang.String[]);
}
Compiled from "ShowBestMatch.java"
public class sjm.examples.book.mechanics.ShowBestMatch {
  public sjm.examples.book.mechanics.ShowBestMatch();
  public static void main(java.lang.String[]);
}
Compiled from "ShowCompleteMatch.java"
public class sjm.examples.book.mechanics.ShowCompleteMatch {
  public sjm.examples.book.mechanics.ShowCompleteMatch();
  public static void main(java.lang.String[]) throws java.lang.ArithmeticException;
}
Compiled from "ShowCycle.java"
public class sjm.examples.book.mechanics.ShowCycle {
  public sjm.examples.book.mechanics.ShowCycle();
  public static void main(java.lang.String[]);
}
Compiled from "ShowNewTerminals.java"
public class sjm.examples.book.mechanics.ShowNewTerminals {
  public sjm.examples.book.mechanics.ShowNewTerminals();
  public static void main(java.lang.String[]);
}
Compiled from "ShowNewTerminals.java"
final class sjm.examples.book.mechanics.ShowNewTerminals$1 implements sjm.parse.IAssembler {
  sjm.examples.book.mechanics.ShowNewTerminals$1();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ShowNewTerminals.java"
final class sjm.examples.book.mechanics.ShowNewTerminals$2 implements sjm.parse.IAssembler {
  sjm.examples.book.mechanics.ShowNewTerminals$2();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ShowPush.java"
public class sjm.examples.book.mechanics.ShowPush {
  public sjm.examples.book.mechanics.ShowPush();
  public static void main(java.lang.String[]);
}
Compiled from "ShowRepetitionMatch.java"
public class sjm.examples.book.mechanics.ShowRepetitionMatch {
  public sjm.examples.book.mechanics.ShowRepetitionMatch();
  public static void main(java.lang.String[]);
}
Compiled from "ShowSequenceLeftovers.java"
public class sjm.examples.book.mechanics.ShowSequenceLeftovers {
  public sjm.examples.book.mechanics.ShowSequenceLeftovers();
  public static void main(java.lang.String[]);
}
Compiled from "ShowSequenceManual.java"
public class sjm.examples.book.mechanics.ShowSequenceManual {
  public sjm.examples.book.mechanics.ShowSequenceManual();
  public static void main(java.lang.String[]);
}
Compiled from "ShowSequencePinch.java"
public class sjm.examples.book.mechanics.ShowSequencePinch {
  public sjm.examples.book.mechanics.ShowSequencePinch();
  public static void main(java.lang.String[]);
}
Compiled from "ShowSequenceSimple.java"
public class sjm.examples.book.mechanics.ShowSequenceSimple {
  public sjm.examples.book.mechanics.ShowSequenceSimple();
  public static void main(java.lang.String[]);
}
Compiled from "ShowToString1.java"
public class sjm.examples.book.mechanics.ShowToString1 {
  public sjm.examples.book.mechanics.ShowToString1();
  public static void main(java.lang.String[]);
}
Compiled from "ShowToString2.java"
public class sjm.examples.book.mechanics.ShowToString2 {
  public sjm.examples.book.mechanics.ShowToString2();
  public static void main(java.lang.String[]);
}
Compiled from "ShowVacation.java"
public class sjm.examples.book.mechanics.ShowVacation {
  public sjm.examples.book.mechanics.ShowVacation();
  public static void main(java.lang.String[]);
}
Compiled from "ShowZeroMatch.java"
public class sjm.examples.book.mechanics.ShowZeroMatch {
  public sjm.examples.book.mechanics.ShowZeroMatch();
  public static void main(java.lang.String[]);
}
Compiled from "UppercaseWord.java"
public class sjm.examples.book.mechanics.UppercaseWord extends sjm.parse.tokens.Word {
  public sjm.examples.book.mechanics.UppercaseWord();
  protected boolean qualifies(java.lang.Object);
  public java.util.List<java.lang.String> randomExpansion(int, int);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "VerboseRepetition.java"
public class sjm.examples.book.mechanics.VerboseRepetition extends sjm.parse.Repetition {
  public sjm.examples.book.mechanics.VerboseRepetition(sjm.parse.Parser);
  public sjm.examples.book.mechanics.VerboseRepetition(sjm.parse.Parser, java.lang.String);
  public java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
}
Compiled from "VerboseSequence.java"
public class sjm.examples.book.mechanics.VerboseSequence extends sjm.parse.Sequence {
  public sjm.examples.book.mechanics.VerboseSequence();
  public sjm.examples.book.mechanics.VerboseSequence(java.lang.String);
  public java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
}
Compiled from "MidiParser.java"
public class sjm.examples.book.midimath.MidiParser {
  protected static sjm.parse.Sequence expression;
  public sjm.examples.book.midimath.MidiParser();
  public sjm.parse.Parser expression();
  public static void main(java.lang.String[]);
  protected sjm.parse.Parser minusTerm();
  protected sjm.parse.Parser term();
}
Compiled from "Midiloop.java"
public class sjm.examples.book.midimath.Midiloop {
  public sjm.examples.book.midimath.Midiloop();
  public sjm.parse.Parser expression();
  protected sjm.parse.Parser factor();
  public static void main(java.lang.String[]);
  protected sjm.parse.Parser term();
}
Compiled from "MidiloopNot.java"
public class sjm.examples.book.midimath.MidiloopNot {
  protected static sjm.parse.Sequence expression;
  public sjm.examples.book.midimath.MidiloopNot();
  public sjm.parse.Parser expression();
  protected sjm.parse.Parser factor();
  public static void main(java.lang.String[]);
  protected sjm.parse.Parser term();
}
Compiled from "Midimath.java"
public class sjm.examples.book.midimath.Midimath {
  public sjm.examples.book.midimath.Midimath();
  public sjm.parse.IParser expression();
  public static void main(java.lang.String[]);
  protected sjm.parse.Parser term();
}
Compiled from "MiniLeftRecursion.java"
public class sjm.examples.book.minimath.MiniLeftRecursion {
  public sjm.examples.book.minimath.MiniLeftRecursion();
  public static void main(java.lang.String[]);
}
Compiled from "MiniWrongAssociativity.java"
public class sjm.examples.book.minimath.MiniWrongAssociativity {
  public sjm.examples.book.minimath.MiniWrongAssociativity();
  public static void main(java.lang.String[]);
}
Compiled from "MinimathAnonymous.java"
public class sjm.examples.book.minimath.MinimathAnonymous {
  public sjm.examples.book.minimath.MinimathAnonymous();
  public static void main(java.lang.String[]);
}
Compiled from "MinimathAnonymous.java"
final class sjm.examples.book.minimath.MinimathAnonymous$1 implements sjm.parse.IAssembler {
  sjm.examples.book.minimath.MinimathAnonymous$1();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "MinimathAnonymous.java"
final class sjm.examples.book.minimath.MinimathAnonymous$2 implements sjm.parse.IAssembler {
  sjm.examples.book.minimath.MinimathAnonymous$2();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "MinimathCompute.java"
public class sjm.examples.book.minimath.MinimathCompute {
  public sjm.examples.book.minimath.MinimathCompute();
  public static void main(java.lang.String[]);
}
Compiled from "MinimathParser.java"
public class sjm.examples.book.minimath.MinimathParser {
  protected static sjm.parse.Sequence e;
  public sjm.examples.book.minimath.MinimathParser();
  public static sjm.parse.Parser e();
  protected static sjm.parse.Parser m();
  public static void main(java.lang.String[]);
  protected static sjm.parse.Parser n();
  public static sjm.parse.Parser start();
}
Compiled from "MinimathRecognize.java"
public class sjm.examples.book.minimath.MinimathRecognize {
  public sjm.examples.book.minimath.MinimathRecognize();
  public static void main(java.lang.String[]);
}
Compiled from "ShowHello.java"
public class sjm.examples.book.preface.ShowHello {
  public sjm.examples.book.preface.ShowHello();
  public static void main(java.lang.String[]);
}
Compiled from "ComponentNode.java"
public abstract class sjm.examples.book.pretty.ComponentNode {
  protected java.lang.Object value;
  public sjm.examples.book.pretty.ComponentNode();
  public static java.lang.String indent(int);
  public java.lang.String toString();
  protected abstract java.lang.String toString(int, boolean, java.util.Vector<sjm.examples.book.pretty.ComponentNode>);
  public java.lang.String toStringWithoutLabels();
}
Compiled from "CompositeNode.java"
public class sjm.examples.book.pretty.CompositeNode extends sjm.examples.book.pretty.ComponentNode {
  protected java.util.Vector children;
  public sjm.examples.book.pretty.CompositeNode(java.lang.Object);
  public void add(sjm.examples.book.pretty.ComponentNode);
  public void insert(sjm.examples.book.pretty.ComponentNode);
  protected java.lang.String toString(int, boolean, java.util.Vector);
}
Compiled from "FenceAssembler.java"
public class sjm.examples.book.pretty.FenceAssembler implements sjm.parse.IAssembler {
  protected java.lang.Object fence;
  public sjm.examples.book.pretty.FenceAssembler(java.lang.Object);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PrettyAlternationAssembler.java"
public class sjm.examples.book.pretty.PrettyAlternationAssembler implements sjm.parse.IAssembler {
  protected java.lang.String name;
  public sjm.examples.book.pretty.PrettyAlternationAssembler(java.lang.String);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PrettyEmptyAssembler.java"
public class sjm.examples.book.pretty.PrettyEmptyAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.pretty.PrettyEmptyAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PrettyParser.java"
public class sjm.examples.book.pretty.PrettyParser {
  protected sjm.parse.Parser parser;
  boolean showLabels;
  public sjm.examples.book.pretty.PrettyParser(sjm.parse.Parser);
  protected java.util.Set<sjm.parse.Assembly> completeMatches(sjm.parse.Assembly);
  public boolean getShowLabels();
  public java.util.Vector parseTrees(sjm.parse.Assembly);
  public void setShowLabels(boolean);
  protected java.lang.String treeString(sjm.examples.book.pretty.ComponentNode);
}
Compiled from "PrettyRepetitionAssembler.java"
public class sjm.examples.book.pretty.PrettyRepetitionAssembler implements sjm.parse.IAssembler {
  protected java.lang.String name;
  protected java.lang.Object fence;
  public sjm.examples.book.pretty.PrettyRepetitionAssembler(java.lang.String, java.lang.Object);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PrettySequenceAssembler.java"
public class sjm.examples.book.pretty.PrettySequenceAssembler implements sjm.parse.IAssembler {
  protected java.lang.String name;
  protected int numberNodes;
  public sjm.examples.book.pretty.PrettySequenceAssembler(java.lang.String, int);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PrettyTerminalAssembler.java"
public class sjm.examples.book.pretty.PrettyTerminalAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.pretty.PrettyTerminalAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PrettyVisitor.java"
public class sjm.examples.book.pretty.PrettyVisitor extends sjm.parse.ParserVisitor {
  public sjm.examples.book.pretty.PrettyVisitor();
  public void visitAlternation(sjm.parse.Alternation, java.util.Set<sjm.parse.Parser>);
  public void visitEmpty(sjm.parse.Empty, java.util.Set<sjm.parse.Parser>);
  public void visitRepetition(sjm.parse.Repetition, java.util.Set<sjm.parse.Parser>);
  public void visitSequence(sjm.parse.Sequence, java.util.Set<sjm.parse.Parser>);
  public void visitTerminal(sjm.parse.Terminal, java.util.Set<sjm.parse.Parser>);
}
Compiled from "ShowDangle.java"
public class sjm.examples.book.pretty.ShowDangle {
  public sjm.examples.book.pretty.ShowDangle();
  public static void main(java.lang.String[]);
}
Compiled from "ShowPrettyAlternations.java"
public class sjm.examples.book.pretty.ShowPrettyAlternations {
  public sjm.examples.book.pretty.ShowPrettyAlternations();
  public static sjm.parse.Parser alligator();
  public static sjm.parse.Parser crocodile();
  public static sjm.parse.Parser crocodilian();
  public static sjm.parse.Parser lizard();
  public static void main(java.lang.String[]);
  public static sjm.parse.Parser reptile();
  public static sjm.parse.Parser snake();
  public static sjm.parse.Parser squamata();
}
Compiled from "ShowPrettyRepetitions.java"
public class sjm.examples.book.pretty.ShowPrettyRepetitions {
  public sjm.examples.book.pretty.ShowPrettyRepetitions();
  public static void main(java.lang.String[]);
  public static sjm.parse.Sequence seq();
}
Compiled from "TerminalNode.java"
public class sjm.examples.book.pretty.TerminalNode extends sjm.examples.book.pretty.ComponentNode {
  public sjm.examples.book.pretty.TerminalNode(java.lang.Object);
  protected java.lang.String toString(int, boolean, java.util.Vector);
}
Compiled from "ChipSource.java"
public class sjm.examples.book.query.ChipSource implements sjm.examples.book.engine.AxiomSource {
  protected static java.util.Dictionary queries;
  public static sjm.examples.book.query.ChipSpeller speller;
  public sjm.examples.book.query.ChipSource();
  public sjm.examples.book.engine.AxiomEnumeration axioms();
  public sjm.examples.book.engine.AxiomEnumeration axioms(sjm.examples.book.engine.Structure);
  public static sjm.examples.book.engine.Fact fact(sjm.examples.book.chips.Chip);
  public static sjm.examples.book.engine.Fact fact(sjm.examples.book.chips.Customer);
  public static sjm.examples.book.engine.Fact fact(sjm.examples.book.chips.Order);
  public static sjm.examples.book.engine.Program program();
  public static java.util.Dictionary queries();
  public static sjm.examples.book.engine.Structure queryChip();
  public static sjm.examples.book.engine.Structure queryCustomer();
  public static sjm.examples.book.engine.Structure queryOrder();
  public static sjm.examples.book.engine.Structure queryStructure(java.lang.String);
  static {};
}
Compiled from "ChipSpeller.java"
public class sjm.examples.book.query.ChipSpeller implements sjm.examples.book.query.Speller {
  protected java.util.Dictionary classNames;
  protected java.util.Dictionary variableNames;
  public sjm.examples.book.query.ChipSpeller();
  protected void addClassName(java.lang.String);
  protected void addVariableName(java.lang.String);
  public java.lang.String getClassName(java.lang.String);
  public java.lang.String getVariableName(java.lang.String);
  protected void loadClassNames();
  protected void loadVariableNames();
}
Compiled from "ClassNameAssembler.java"
public class sjm.examples.book.query.ClassNameAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.query.ClassNameAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ComparisonAssembler.java"
public class sjm.examples.book.query.ComparisonAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.query.ComparisonAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ComparisonParser.java"
public class sjm.examples.book.query.ComparisonParser {
  protected sjm.parse.Sequence expression;
  protected sjm.examples.book.query.Speller speller;
  public sjm.examples.book.query.ComparisonParser(sjm.examples.book.query.Speller);
  public sjm.parse.Parser arg();
  public sjm.parse.Parser comparison();
  protected sjm.parse.Parser divideFactor();
  public sjm.parse.Parser expression();
  protected sjm.parse.Parser factor();
  protected sjm.parse.Parser minusTerm();
  protected sjm.parse.Parser operator();
  protected sjm.parse.Parser plusTerm();
  protected sjm.parse.Parser term();
  protected sjm.parse.Parser timesFactor();
  protected sjm.parse.Parser variable();
}
Compiled from "JaqlMediator.java"
public class sjm.examples.book.query.JaqlMediator implements java.awt.event.ActionListener {
  protected javax.swing.JButton goButton;
  protected javax.swing.JButton clearButton;
  protected javax.swing.JTextArea metadataArea;
  protected javax.swing.JTextArea queryArea;
  protected javax.swing.JTextArea resultArea;
  protected sjm.parse.Parser parser;
  protected sjm.examples.book.query.ChipSource chipSource;
  protected sjm.examples.book.query.Speller speller;
  public sjm.examples.book.query.JaqlMediator();
  public void actionPerformed(java.awt.event.ActionEvent);
  protected void actionPerformedUnsafe(java.awt.event.ActionEvent);
  protected sjm.examples.book.query.ChipSource chipSource();
  public void initialize(javax.swing.JButton, javax.swing.JButton, javax.swing.JTextArea, javax.swing.JTextArea, javax.swing.JTextArea);
  protected sjm.parse.Assembly parseInput();
  protected sjm.parse.Parser parser();
  protected void showResults(sjm.examples.book.engine.Query);
  protected sjm.examples.book.query.Speller speller();
}
Compiled from "JaqlParser.java"
public class sjm.examples.book.query.JaqlParser {
  protected sjm.examples.book.query.Speller speller;
  protected static sjm.examples.book.query.ComparisonParser comparisonParser;
  public sjm.examples.book.query.JaqlParser(sjm.examples.book.query.Speller);
  protected sjm.parse.Parser className();
  protected sjm.parse.Parser classNames();
  protected static sjm.parse.Sequence commaList(sjm.parse.Parser);
  protected sjm.parse.Parser comparison();
  public sjm.examples.book.query.ComparisonParser comparisonParser();
  protected sjm.parse.Parser comparisons();
  protected sjm.parse.Parser optionalWhere();
  public sjm.parse.Parser select();
  protected sjm.parse.Parser selectTerm();
  protected sjm.parse.Parser selectTerms();
  public sjm.parse.Parser start();
  protected sjm.parse.Parser where();
}
Compiled from "JaqlTester.java"
public class sjm.examples.book.query.JaqlTester extends sjm.parse.tokens.TokenTester {
  protected static sjm.examples.book.query.Speller speller;
  public sjm.examples.book.query.JaqlTester();
  protected sjm.parse.PubliclyCloneable<? extends java.lang.Object> freshTarget();
  public static void main(java.lang.String[]);
  protected static sjm.examples.book.query.Speller speller();
}
Compiled from "JaqlUe.java"
public class sjm.examples.book.query.JaqlUe {
  protected sjm.examples.book.query.JaqlMediator mediator;
  protected javax.swing.JButton goButton;
  protected javax.swing.JButton clearButton;
  protected javax.swing.JTextArea metadataArea;
  protected javax.swing.JTextArea queryArea;
  protected javax.swing.JTextArea resultArea;
  protected static int PREFERREDWIDTH;
  public sjm.examples.book.query.JaqlUe();
  protected javax.swing.JPanel buttonPanel();
  protected javax.swing.JButton clearButton();
  protected javax.swing.JButton goButton();
  protected javax.swing.JSplitPane ioPane();
  public static void main(java.lang.String[]);
  protected javax.swing.JPanel mainPanel();
  protected sjm.examples.book.query.JaqlMediator mediator();
  protected javax.swing.JTextArea metadataArea();
  protected javax.swing.JPanel metadataPanel();
  protected javax.swing.JTextArea queryArea();
  protected javax.swing.JTextArea resultArea();
  protected javax.swing.JPanel upperPanel();
  static {};
}
Compiled from "MellowSpeller.java"
public class sjm.examples.book.query.MellowSpeller implements sjm.examples.book.query.Speller {
  public sjm.examples.book.query.MellowSpeller();
  public java.lang.String getClassName(java.lang.String);
  public java.lang.String getVariableName(java.lang.String);
}
Compiled from "QueryBuilder.java"
public class sjm.examples.book.query.QueryBuilder implements sjm.parse.PubliclyCloneable<sjm.examples.book.query.QueryBuilder> {
  protected sjm.examples.book.query.Speller speller;
  protected java.util.Vector terms;
  protected java.util.Vector classNames;
  protected java.util.Vector comparisons;
  public sjm.examples.book.query.QueryBuilder(sjm.examples.book.query.Speller);
  public void addClassName(java.lang.String);
  public void addComparison(sjm.examples.book.engine.Comparison);
  public void addTerm(sjm.examples.book.engine.Term);
  public sjm.examples.book.engine.Query build(sjm.examples.book.engine.AxiomSource);
  public sjm.examples.book.query.QueryBuilder clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "SelectTermAssembler.java"
public class sjm.examples.book.query.SelectTermAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.query.SelectTermAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ShowChipSource.java"
public class sjm.examples.book.query.ShowChipSource {
  public sjm.examples.book.query.ShowChipSource();
  public static void main(java.lang.String[]);
}
Compiled from "Speller.java"
public interface sjm.examples.book.query.Speller {
  public abstract java.lang.String getClassName(java.lang.String);
  public abstract java.lang.String getVariableName(java.lang.String);
}
Compiled from "UnrecognizedClassException.java"
public class sjm.examples.book.query.UnrecognizedClassException extends java.lang.RuntimeException {
  public sjm.examples.book.query.UnrecognizedClassException();
  public sjm.examples.book.query.UnrecognizedClassException(java.lang.String);
}
Compiled from "UnrecognizedVariableException.java"
public class sjm.examples.book.query.UnrecognizedVariableException extends java.lang.RuntimeException {
  public sjm.examples.book.query.UnrecognizedVariableException();
  public sjm.examples.book.query.UnrecognizedVariableException(java.lang.String);
}
Compiled from "VariableAssembler.java"
public class sjm.examples.book.query.VariableAssembler implements sjm.parse.IAssembler {
  sjm.examples.book.query.Speller speller;
  public sjm.examples.book.query.VariableAssembler(sjm.examples.book.query.Speller);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "AndAssembler.java"
public class sjm.examples.book.regular.AndAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.regular.AndAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "CharAssembler.java"
public class sjm.examples.book.regular.CharAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.regular.CharAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "OrAssembler.java"
public class sjm.examples.book.regular.OrAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.regular.OrAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RegularExpressionException.java"
public class sjm.examples.book.regular.RegularExpressionException extends java.lang.Exception {
  public sjm.examples.book.regular.RegularExpressionException();
  public sjm.examples.book.regular.RegularExpressionException(java.lang.String);
}
Compiled from "RegularParser.java"
public class sjm.examples.book.regular.RegularParser {
  protected sjm.parse.Sequence expression;
  public sjm.examples.book.regular.RegularParser();
  public sjm.parse.Parser expression();
  protected sjm.parse.Parser factor();
  protected sjm.parse.Parser letterOrDigit();
  protected sjm.parse.Parser nextFactor();
  protected sjm.parse.Parser orTerm();
  protected sjm.parse.Parser phrase();
  protected sjm.parse.Parser phraseStar();
  public static sjm.parse.Parser start();
  protected sjm.parse.Parser term();
  public static sjm.parse.Parser value(java.lang.String) throws sjm.examples.book.regular.RegularExpressionException;
}
Compiled from "ShowRegularParser.java"
public class sjm.examples.book.regular.ShowRegularParser {
  public sjm.examples.book.regular.ShowRegularParser();
  public static void main(java.lang.String[]) throws sjm.examples.book.regular.RegularExpressionException;
}
Compiled from "StarAssembler.java"
public class sjm.examples.book.regular.StarAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.regular.StarAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ReservedWord.java"
public class sjm.examples.book.reserved.ReservedWord extends sjm.parse.Terminal {
  public sjm.examples.book.reserved.ReservedWord();
  protected boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Vector);
}
Compiled from "ShowReserved.java"
public class sjm.examples.book.reserved.ShowReserved {
  public sjm.examples.book.reserved.ShowReserved();
  public static void main(java.lang.String[]);
}
Compiled from "VolumeQuery2.java"
public class sjm.examples.book.reserved.VolumeQuery2 {
  public sjm.examples.book.reserved.VolumeQuery2();
  public static sjm.parse.Parser query();
  public static sjm.parse.tokens.Tokenizer tokenizer();
  protected static sjm.parse.Parser volume();
}
Compiled from "VolumeQuery2.java"
final class sjm.examples.book.reserved.VolumeQuery2$1 implements sjm.parse.IAssembler {
  sjm.examples.book.reserved.VolumeQuery2$1();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "WordOrReservedState.java"
public class sjm.examples.book.reserved.WordOrReservedState extends sjm.parse.tokens.WordState {
  java.util.Vector reserved;
  public static final sjm.parse.tokens.TokenType TT_RESERVED;
  public sjm.examples.book.reserved.WordOrReservedState();
  public void addReservedWord(java.lang.String);
  public java.util.Vector getReservedWords();
  public sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
  static {};
}
Compiled from "PickAssembler.java"
public class sjm.examples.book.robot.PickAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.robot.PickAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PickCommand.java"
public class sjm.examples.book.robot.PickCommand extends sjm.examples.book.robot.RobotCommand {
  public sjm.examples.book.robot.PickCommand();
  public java.lang.String toString();
}
Compiled from "PlaceAssembler.java"
public class sjm.examples.book.robot.PlaceAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.robot.PlaceAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PlaceCommand.java"
public class sjm.examples.book.robot.PlaceCommand extends sjm.examples.book.robot.RobotCommand {
  public sjm.examples.book.robot.PlaceCommand();
  public java.lang.String toString();
}
Compiled from "RobotCommand.java"
public class sjm.examples.book.robot.RobotCommand implements sjm.parse.PubliclyCloneable<sjm.examples.book.robot.RobotCommand> {
  protected java.lang.String location;
  public sjm.examples.book.robot.RobotCommand();
  public sjm.examples.book.robot.RobotCommand clone();
  public void execute();
  public java.lang.String getLocation();
  public void setLocation(java.lang.String);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "RobotMonolithic.java"
public class sjm.examples.book.robot.RobotMonolithic {
  public sjm.examples.book.robot.RobotMonolithic();
  public static void main(java.lang.String[]);
}
Compiled from "RobotParser.java"
public class sjm.examples.book.robot.RobotParser {
  public sjm.examples.book.robot.RobotParser();
  public sjm.parse.Parser command();
  protected sjm.parse.Parser location();
  protected sjm.parse.Parser pickCommand();
  protected sjm.parse.Parser placeCommand();
  protected sjm.parse.Parser scanCommand();
  public static sjm.parse.Parser start();
}
Compiled from "RobotRefactored.java"
public class sjm.examples.book.robot.RobotRefactored {
  public sjm.examples.book.robot.RobotRefactored();
  public sjm.parse.IParser command();
  protected sjm.parse.Parser location();
  protected sjm.parse.Parser pickCommand();
  protected sjm.parse.Parser placeCommand();
  protected sjm.parse.Parser scanCommand();
}
Compiled from "ScanAssembler.java"
public class sjm.examples.book.robot.ScanAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.robot.ScanAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ScanCommand.java"
public class sjm.examples.book.robot.ScanCommand extends sjm.examples.book.robot.RobotCommand {
  public sjm.examples.book.robot.ScanCommand();
  public java.lang.String toString();
}
Compiled from "ShowRobotParser.java"
public class sjm.examples.book.robot.ShowRobotParser {
  public sjm.examples.book.robot.ShowRobotParser();
  public static void main(java.lang.String[]);
}
Compiled from "ShowRobotRefactored.java"
public class sjm.examples.book.robot.ShowRobotRefactored {
  public sjm.examples.book.robot.ShowRobotRefactored();
  public static void main(java.lang.String[]);
}
Compiled from "Abs.java"
public class sjm.examples.book.sling.Abs extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Abs();
  public sjm.examples.book.sling.Abs(sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "AddFunctionCommand.java"
public class sjm.examples.book.sling.AddFunctionCommand extends sjm.examples.book.imperative.Command {
  protected sjm.examples.book.sling.RenderableCollection renderables;
  protected sjm.examples.book.sling.SlingFunction f;
  protected sjm.examples.book.sling.Variable nLine;
  public sjm.examples.book.sling.AddFunctionCommand(sjm.examples.book.sling.RenderableCollection, sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.Variable);
  public void execute();
  public java.lang.String toString();
}
Compiled from "Arithmetic.java"
public class sjm.examples.book.sling.Arithmetic extends sjm.examples.book.sling.SlingFunction {
  protected char operator;
  public sjm.examples.book.sling.Arithmetic(char);
  public sjm.examples.book.sling.Arithmetic(char, sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction);
  protected double arithmetic(double, double);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "AssignFunctionCommand.java"
public class sjm.examples.book.sling.AssignFunctionCommand extends sjm.examples.book.imperative.Command {
  protected sjm.examples.book.sling.Variable v;
  protected sjm.examples.book.sling.SlingFunction f;
  public sjm.examples.book.sling.AssignFunctionCommand(sjm.examples.book.sling.Variable, sjm.examples.book.sling.SlingFunction);
  public void execute();
  public java.lang.String toString();
}
Compiled from "AssignmentAssembler.java"
public class sjm.examples.book.sling.AssignmentAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.sling.AssignmentAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "Cartesian.java"
public class sjm.examples.book.sling.Cartesian extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Cartesian();
  public sjm.examples.book.sling.Cartesian(sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "Ceil.java"
public class sjm.examples.book.sling.Ceil extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Ceil();
  public sjm.examples.book.sling.Ceil(sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "Cos.java"
public class sjm.examples.book.sling.Cos extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Cos();
  public sjm.examples.book.sling.Cos(sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "Extrema.java"
public class sjm.examples.book.sling.Extrema {
  public final sjm.examples.book.sling.Point min;
  public final sjm.examples.book.sling.Point max;
  public sjm.examples.book.sling.Extrema(sjm.examples.book.sling.Point, sjm.examples.book.sling.Point);
  public double aspectRatio();
  public java.lang.String toString();
}
Compiled from "Floor.java"
public class sjm.examples.book.sling.Floor extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Floor();
  public sjm.examples.book.sling.Floor(sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "ForAssembler.java"
public class sjm.examples.book.sling.ForAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.sling.ForAssembler();
  protected static sjm.examples.book.imperative.CommandSequence popCommandSequence(sjm.parse.Assembly);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "FunctionAssembler.java"
public class sjm.examples.book.sling.FunctionAssembler implements sjm.parse.IAssembler {
  protected sjm.examples.book.sling.SlingFunction function;
  public sjm.examples.book.sling.FunctionAssembler(sjm.examples.book.sling.SlingFunction);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "FunctionComparison.java"
public class sjm.examples.book.sling.FunctionComparison extends sjm.examples.book.engine.Gateway implements sjm.examples.book.engine.BooleanTerm {
  protected java.lang.String operator;
  protected sjm.examples.book.sling.SlingFunction f0;
  protected sjm.examples.book.sling.SlingFunction f1;
  public sjm.examples.book.sling.FunctionComparison(java.lang.String, sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction);
  public boolean canProveOnce();
  public java.lang.Object eval();
  public java.lang.String toString();
}
Compiled from "NegativeAssembler.java"
public class sjm.examples.book.sling.NegativeAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.sling.NegativeAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "NumAssembler.java"
public class sjm.examples.book.sling.NumAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.sling.NumAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PiAssembler.java"
public class sjm.examples.book.sling.PiAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.sling.PiAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PlotAssembler.java"
public class sjm.examples.book.sling.PlotAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.sling.PlotAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "Point.java"
public class sjm.examples.book.sling.Point extends sjm.examples.book.sling.SlingFunction {
  public double x;
  public double y;
  public sjm.examples.book.sling.Point(double, double);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "Polar.java"
public class sjm.examples.book.sling.Polar extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Polar();
  public sjm.examples.book.sling.Polar(sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "Random.java"
public class sjm.examples.book.sling.Random extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Random();
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "Renderable.java"
public class sjm.examples.book.sling.Renderable {
  protected sjm.examples.book.sling.SlingFunction function;
  protected sjm.examples.book.sling.SlingFunction nLine;
  public sjm.examples.book.sling.Renderable(sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Extrema getExtrema();
  public int nLine();
}
Compiled from "RenderableCollection.java"
public class sjm.examples.book.sling.RenderableCollection {
  protected java.util.Vector renderables;
  public sjm.examples.book.sling.RenderableCollection();
  public void add(sjm.examples.book.sling.Renderable);
  public java.util.Enumeration elements();
  public sjm.examples.book.sling.Extrema getExtrema();
  public boolean isEmpty();
}
Compiled from "ReservedLiteral.java"
public class sjm.examples.book.sling.ReservedLiteral extends sjm.parse.Terminal {
  protected sjm.parse.tokens.Token literal;
  public sjm.examples.book.sling.ReservedLiteral(java.lang.String);
  protected boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Vector);
}
Compiled from "Scale.java"
public class sjm.examples.book.sling.Scale extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Scale();
  public sjm.examples.book.sling.Scale(sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Scale(sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  protected double linear(double, double, double, double, double);
  public java.lang.String toString();
}
Compiled from "ScaleAssembler.java"
public class sjm.examples.book.sling.ScaleAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.sling.ScaleAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "Scope.java"
public class sjm.examples.book.sling.Scope {
  protected java.util.Hashtable dictionary;
  public sjm.examples.book.sling.Scope();
  public boolean isDefined(java.lang.String);
  public sjm.examples.book.sling.Variable lookup(java.lang.String);
}
Compiled from "ShowFunction.java"
public class sjm.examples.book.sling.ShowFunction {
  public sjm.examples.book.sling.ShowFunction();
  public static void main(java.lang.String[]);
}
Compiled from "Sin.java"
public class sjm.examples.book.sling.Sin extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Sin();
  public sjm.examples.book.sling.Sin(sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "Slider.java"
public class sjm.examples.book.sling.Slider extends sjm.examples.book.sling.SlingFunction {
  protected javax.swing.JSlider slider;
  public sjm.examples.book.sling.Slider(javax.swing.JSlider);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "SliderAssembler.java"
public class sjm.examples.book.sling.SliderAssembler implements sjm.parse.IAssembler {
  protected int slider;
  public sjm.examples.book.sling.SliderAssembler(int);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "Sling.java"
public class sjm.examples.book.sling.Sling extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Sling();
  public sjm.examples.book.sling.Sling(sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "SlingFunction.java"
public abstract class sjm.examples.book.sling.SlingFunction implements java.lang.Cloneable {
  protected sjm.examples.book.sling.SlingFunction[] source;
  public sjm.examples.book.sling.SlingFunction();
  public sjm.examples.book.sling.SlingFunction(sjm.examples.book.sling.SlingFunction[]);
  public sjm.examples.book.sling.SlingFunction(sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.SlingFunction(sjm.examples.book.sling.SlingFunction, sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.SlingFunction eval();
  public sjm.examples.book.sling.Extrema extrema(int);
  public abstract sjm.examples.book.sling.Point f(double);
  public sjm.examples.book.sling.SlingFunction fresh();
}
Compiled from "SlingIde.java"
public class sjm.examples.book.sling.SlingIde {
  protected sjm.examples.book.sling.SlingMediator mediator;
  protected javax.swing.JButton clearButton;
  protected javax.swing.JButton goButton;
  protected javax.swing.JButton haltButton;
  protected javax.swing.JTextArea messageArea;
  protected javax.swing.JTextArea programArea;
  protected javax.swing.JSlider s1;
  protected javax.swing.JSlider s2;
  protected sjm.examples.book.sling.SlingPanel plotPanel;
  protected int preferredWidth;
  protected java.awt.Dimension min;
  public sjm.examples.book.sling.SlingIde();
  protected javax.swing.Box buttonBox();
  protected javax.swing.JPanel buttonPanel();
  protected javax.swing.JButton clearButton();
  protected javax.swing.JButton goButton();
  protected javax.swing.JButton haltButton();
  protected javax.swing.JPanel lowerPanel();
  public static void main(java.lang.String[]);
  protected javax.swing.JSplitPane mainPane();
  protected sjm.examples.book.sling.SlingMediator mediator();
  protected javax.swing.JTextArea messageArea();
  protected sjm.examples.book.sling.SlingPanel plotPanel();
  protected javax.swing.JTextArea programArea();
  protected javax.swing.JSplitPane programMessagePane();
  protected javax.swing.JSlider s1();
  protected javax.swing.JSlider s2();
  protected javax.swing.JSlider slider();
  protected javax.swing.Box sliderBox(java.lang.String, javax.swing.JSlider);
  protected javax.swing.JPanel sliderPanel();
  protected static javax.swing.JPanel textPanel(java.lang.String, javax.swing.JTextArea, java.awt.Dimension, java.awt.Dimension);
  protected javax.swing.JPanel titledMessagePanel();
  protected javax.swing.JPanel titledPlotPanel();
  protected javax.swing.JPanel titledProgramPanel();
  protected javax.swing.JPanel upperPanel();
}
Compiled from "SlingMediator.java"
public class sjm.examples.book.sling.SlingMediator implements java.awt.event.ActionListener,javax.swing.event.ChangeListener,java.lang.Runnable {
  protected javax.swing.JButton goSource;
  protected javax.swing.JButton haltSource;
  protected javax.swing.JButton clearSource;
  protected javax.swing.JSlider s1;
  protected javax.swing.JSlider s2;
  protected javax.swing.JTextArea programArea;
  protected javax.swing.JTextArea messageArea;
  protected sjm.examples.book.sling.SlingPanel plotPanel;
  protected sjm.examples.book.imperative.Command command;
  protected java.lang.Thread computeThread;
  protected java.lang.String lastProgram;
  protected sjm.examples.book.sling.SlingTarget target;
  protected sjm.examples.book.sling.SlingParser parser;
  public sjm.examples.book.sling.SlingMediator();
  public void actionPerformed(java.awt.event.ActionEvent);
  protected void checkReserved(sjm.parse.Assembly, sjm.parse.Assembly);
  protected void checkResult(java.lang.String, sjm.parse.Assembly, sjm.parse.Assembly);
  protected sjm.examples.book.imperative.CommandSequence command(sjm.parse.Assembly);
  protected void go();
  public void initialize(javax.swing.JButton, javax.swing.JButton, javax.swing.JButton, javax.swing.JSlider, javax.swing.JSlider, javax.swing.JTextArea, javax.swing.JTextArea, sjm.examples.book.sling.SlingPanel);
  protected sjm.examples.book.imperative.Command parse(java.lang.String);
  public void run();
  protected void setComputing(boolean);
  public void stateChanged(javax.swing.event.ChangeEvent);
  protected sjm.parse.Assembly tryMatch(sjm.parse.tokens.TokenAssembly);
}
Compiled from "SlingPanel.java"
public class sjm.examples.book.sling.SlingPanel extends javax.swing.JPanel {
  protected sjm.examples.book.sling.RenderableCollection renderables;
  protected sjm.examples.book.sling.Point lowerLeft;
  protected sjm.examples.book.sling.Point upperRight;
  protected int[] pointsX;
  protected int[] pointsY;
  public sjm.examples.book.sling.SlingPanel();
  protected void calculateCorners(double);
  protected void checkBuf(int);
  protected void drawFunction(java.awt.Graphics, sjm.examples.book.sling.Scale, int);
  public void paintComponent(java.awt.Graphics);
  public void setPlot(sjm.examples.book.sling.RenderableCollection);
}
Compiled from "SlingParser.java"
public class sjm.examples.book.sling.SlingParser {
  protected sjm.parse.Sequence expression;
  protected sjm.parse.Alternation statement;
  protected sjm.parse.Alternation baseElement;
  protected sjm.examples.book.reserved.WordOrReservedState wors;
  protected sjm.parse.tokens.Tokenizer tokenizer;
  public sjm.examples.book.sling.SlingParser();
  protected sjm.parse.Parser assignment();
  protected sjm.parse.Parser baseElement();
  protected static sjm.parse.Parser comma();
  protected sjm.examples.book.track.Track divideElement();
  protected sjm.parse.Parser element();
  protected sjm.parse.Parser expression();
  protected sjm.parse.Parser forStatement();
  protected static sjm.parse.Parser lBrace();
  protected static sjm.parse.Parser lParen();
  protected sjm.examples.book.track.Track minusTerm();
  protected sjm.parse.Parser negative();
  protected sjm.parse.Parser noArgs(java.lang.String, sjm.examples.book.sling.SlingFunction);
  protected sjm.parse.Parser num();
  protected sjm.parse.Parser oneArg(java.lang.String, sjm.examples.book.sling.SlingFunction);
  protected sjm.parse.Parser pi();
  protected sjm.parse.Parser plotStatement();
  protected sjm.examples.book.track.Track plusTerm();
  protected static sjm.parse.Parser rBrace();
  protected sjm.examples.book.track.Track remainderElement();
  protected sjm.examples.book.sling.ReservedLiteral reserve(java.lang.String);
  protected static sjm.parse.Parser rParen();
  protected sjm.parse.Parser s1();
  protected sjm.parse.Parser s2();
  protected sjm.parse.Parser scale();
  protected static sjm.parse.Parser semicolon();
  public sjm.parse.IParser start();
  protected sjm.parse.Parser statement();
  protected sjm.parse.Parser statements();
  protected sjm.parse.Parser term();
  protected sjm.examples.book.track.Track timesElement();
  public sjm.parse.tokens.Tokenizer tokenizer();
  protected sjm.parse.Parser twoArg(java.lang.String, sjm.examples.book.sling.SlingFunction);
  protected sjm.parse.Parser variable();
  protected sjm.examples.book.reserved.WordOrReservedState wors();
}
Compiled from "SlingTarget.java"
public class sjm.examples.book.sling.SlingTarget implements sjm.parse.PubliclyCloneable<sjm.examples.book.sling.SlingTarget> {
  protected static int DEFAULT_NLINE;
  protected sjm.examples.book.sling.Scope scope;
  protected javax.swing.JSlider s1;
  protected javax.swing.JSlider s2;
  protected sjm.examples.book.sling.RenderableCollection renderables;
  public sjm.examples.book.sling.SlingTarget(javax.swing.JSlider, javax.swing.JSlider);
  public sjm.examples.book.sling.SlingTarget clone();
  public sjm.examples.book.sling.RenderableCollection getRenderables();
  public boolean isDefined(java.lang.String);
  public sjm.examples.book.sling.Variable lookup(java.lang.String);
  public sjm.examples.book.sling.Variable nLine();
  public javax.swing.JSlider s1();
  public javax.swing.JSlider s2();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static {};
}
Compiled from "SlingTester.java"
public class sjm.examples.book.sling.SlingTester extends sjm.parse.tokens.TokenTester {
  public sjm.examples.book.sling.SlingTester();
  protected sjm.parse.Assembly assembly(java.lang.String);
  protected sjm.parse.PubliclyCloneable<? extends java.lang.Object> freshTarget();
  public static void main(java.lang.String[]);
}
Compiled from "T.java"
public class sjm.examples.book.sling.T extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.T();
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "Tan.java"
public class sjm.examples.book.sling.Tan extends sjm.examples.book.sling.SlingFunction {
  public sjm.examples.book.sling.Tan();
  public sjm.examples.book.sling.Tan(sjm.examples.book.sling.SlingFunction);
  public sjm.examples.book.sling.Point f(double);
  public java.lang.String toString();
}
Compiled from "UnassignedVariableException.java"
public class sjm.examples.book.sling.UnassignedVariableException extends java.lang.RuntimeException {
  public sjm.examples.book.sling.UnassignedVariableException();
  public sjm.examples.book.sling.UnassignedVariableException(java.lang.String);
}
Compiled from "Variable.java"
public class sjm.examples.book.sling.Variable extends sjm.examples.book.sling.SlingFunction {
  protected java.lang.String name;
  public sjm.examples.book.sling.Variable(java.lang.String);
  public sjm.examples.book.sling.SlingFunction eval();
  public sjm.examples.book.sling.Point f(double);
  public void setValue(sjm.examples.book.sling.SlingFunction);
  public java.lang.String toString();
}
Compiled from "VariableAssembler.java"
public class sjm.examples.book.sling.VariableAssembler implements sjm.parse.IAssembler {
  public sjm.examples.book.sling.VariableAssembler();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "Identity.java"
public class sjm.examples.book.string.Identity extends sjm.examples.book.string.StringFunction {
  public sjm.examples.book.string.Identity();
  public java.lang.String f(java.lang.String);
}
Compiled from "LowerCase.java"
public class sjm.examples.book.string.LowerCase extends sjm.examples.book.string.StringFunction {
  public sjm.examples.book.string.LowerCase();
  public sjm.examples.book.string.LowerCase(sjm.examples.book.string.StringFunction);
  public java.lang.String f(java.lang.String);
}
Compiled from "ShowStringFunction.java"
public class sjm.examples.book.string.ShowStringFunction {
  public sjm.examples.book.string.ShowStringFunction();
  public static void main(java.lang.String[]);
}
Compiled from "StringFunction.java"
public abstract class sjm.examples.book.string.StringFunction {
  protected sjm.examples.book.string.StringFunction source;
  public sjm.examples.book.string.StringFunction();
  public sjm.examples.book.string.StringFunction(sjm.examples.book.string.StringFunction);
  public abstract java.lang.String f(java.lang.String);
}
Compiled from "Substring.java"
public class sjm.examples.book.string.Substring extends sjm.examples.book.string.StringFunction {
  protected int from;
  protected int to;
  protected boolean rest;
  public sjm.examples.book.string.Substring(sjm.examples.book.string.StringFunction, int);
  public sjm.examples.book.string.Substring(sjm.examples.book.string.StringFunction, int, int);
  public java.lang.String f(java.lang.String);
}
Compiled from "Trim.java"
public class sjm.examples.book.string.Trim extends sjm.examples.book.string.StringFunction {
  public sjm.examples.book.string.Trim();
  public sjm.examples.book.string.Trim(sjm.examples.book.string.StringFunction);
  public java.lang.String f(java.lang.String);
}
Compiled from "UpperCase.java"
public class sjm.examples.book.string.UpperCase extends sjm.examples.book.string.StringFunction {
  public sjm.examples.book.string.UpperCase();
  public sjm.examples.book.string.UpperCase(sjm.examples.book.string.StringFunction);
  public java.lang.String f(java.lang.String);
}
Compiled from "Dangle.java"
public class sjm.examples.book.tests.Dangle {
  protected static sjm.parse.Alternation statement;
  public sjm.examples.book.tests.Dangle();
  public static sjm.parse.Parser callCustomer();
  public static sjm.parse.Parser comparison();
  public static sjm.parse.Parser expression();
  public static sjm.parse.Parser ifelse();
  public static sjm.parse.Parser iff();
  public static sjm.parse.Parser operator();
  public static sjm.parse.Parser sendBill();
  public static sjm.parse.Parser statement();
}
Compiled from "ShowArithmeticTest.java"
public class sjm.examples.book.tests.ShowArithmeticTest {
  public sjm.examples.book.tests.ShowArithmeticTest();
  public static void main(java.lang.String[]);
}
Compiled from "ShowCoffeeTest.java"
public class sjm.examples.book.tests.ShowCoffeeTest {
  public sjm.examples.book.tests.ShowCoffeeTest();
  public static void main(java.lang.String[]);
}
Compiled from "ShowDangleTest.java"
public class sjm.examples.book.tests.ShowDangleTest {
  public sjm.examples.book.tests.ShowDangleTest();
  public static void main(java.lang.String[]);
}
Compiled from "ShowLogikusTester.java"
public class sjm.examples.book.tests.ShowLogikusTester {
  public sjm.examples.book.tests.ShowLogikusTester();
  public static void main(java.lang.String[]);
}
Compiled from "ShowRegularTester.java"
public class sjm.examples.book.tests.ShowRegularTester {
  public sjm.examples.book.tests.ShowRegularTester();
  public static void main(java.lang.String[]);
}
Compiled from "ShowRobotTest.java"
public class sjm.examples.book.tests.ShowRobotTest {
  public sjm.examples.book.tests.ShowRobotTest();
  public static void main(java.lang.String[]);
}
Compiled from "ShowVolumeTest.java"
public class sjm.examples.book.tests.ShowVolumeTest {
  public sjm.examples.book.tests.ShowVolumeTest();
  public static void main(java.lang.String[]);
}
Compiled from "VolumeQuery.java"
public class sjm.examples.book.tests.VolumeQuery {
  public sjm.examples.book.tests.VolumeQuery();
  public static sjm.parse.Parser query();
  public static sjm.parse.Parser volume();
}
Compiled from "ScientificNumberState.java"
public class sjm.examples.book.tokens.ScientificNumberState extends sjm.parse.tokens.NumberState {
  protected boolean absorbedE;
  public sjm.examples.book.tokens.ScientificNumberState();
  public static void main(java.lang.String[]) throws java.io.IOException;
  protected void parseRight(java.io.PushbackReader) throws java.io.IOException;
  protected void reset(int);
  protected sjm.parse.tokens.Token value(java.io.PushbackReader, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
}
Compiled from "ShowDefaultTokenization.java"
public class sjm.examples.book.tokens.ShowDefaultTokenization {
  public sjm.examples.book.tokens.ShowDefaultTokenization();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "ShowNewSymbol.java"
public class sjm.examples.book.tokens.ShowNewSymbol {
  public sjm.examples.book.tokens.ShowNewSymbol();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "ShowNoComment.java"
public class sjm.examples.book.tokens.ShowNoComment {
  public sjm.examples.book.tokens.ShowNoComment();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "ShowQuoteState.java"
public class sjm.examples.book.tokens.ShowQuoteState {
  public sjm.examples.book.tokens.ShowQuoteState();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "ShowScientific.java"
public class sjm.examples.book.tokens.ShowScientific {
  public sjm.examples.book.tokens.ShowScientific();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "ShowSuppliedReader.java"
public class sjm.examples.book.tokens.ShowSuppliedReader {
  public sjm.examples.book.tokens.ShowSuppliedReader();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "ShowTokenString.java"
public class sjm.examples.book.tokens.ShowTokenString {
  public sjm.examples.book.tokens.ShowTokenString();
  public static void main(java.lang.String[]);
}
Compiled from "ShowTokenString.java"
final class sjm.examples.book.tokens.ShowTokenString$1 implements sjm.parse.IAssembler {
  sjm.examples.book.tokens.ShowTokenString$1();
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ShowTokenizer.java"
public class sjm.examples.book.tokens.ShowTokenizer {
  public sjm.examples.book.tokens.ShowTokenizer();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "ShowTokenizer2.java"
public class sjm.examples.book.tokens.ShowTokenizer2 {
  public sjm.examples.book.tokens.ShowTokenizer2();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "ShowWord.java"
public class sjm.examples.book.tokens.ShowWord {
  public sjm.examples.book.tokens.ShowWord();
  public static void main(java.lang.String[]) throws java.io.IOException;
}
Compiled from "ShowTrack.java"
public class sjm.examples.book.track.ShowTrack {
  public sjm.examples.book.track.ShowTrack();
  public static sjm.parse.Parser list();
  public static void main(java.lang.String[]);
}
Compiled from "Track.java"
public class sjm.examples.book.track.Track extends sjm.parse.Sequence {
  public sjm.examples.book.track.Track();
  public sjm.examples.book.track.Track(java.lang.String);
  public java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
  protected void throwTrackException(java.util.Set<sjm.parse.Assembly>, sjm.parse.IParser);
}
Compiled from "TrackException.java"
public class sjm.examples.book.track.TrackException extends java.lang.RuntimeException {
  protected java.lang.String after;
  protected java.lang.String expected;
  protected java.lang.String found;
  public sjm.examples.book.track.TrackException(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getAfter();
  public java.lang.String getExpected();
  public java.lang.String getFound();
}
Compiled from "FileString.java"
public class sjm.examples.book.utensil.FileString {
  public sjm.examples.book.utensil.FileString();
  public static java.lang.String stringFromFileNamed(java.lang.String) throws java.io.IOException;
}
Compiled from "LimitingLinearCalculator.java"
public class sjm.examples.book.utensil.LimitingLinearCalculator extends sjm.examples.book.utensil.LinearCalculator {
  public sjm.examples.book.utensil.LimitingLinearCalculator(double, double, double, double);
  public double calculateXforGivenY(double);
  public double calculateYforGivenX(double);
}
Compiled from "LinearCalculator.java"
public class sjm.examples.book.utensil.LinearCalculator {
  double xFrom;
  double xTo;
  double yFrom;
  double yTo;
  public sjm.examples.book.utensil.LinearCalculator(double, double, double, double);
  public double calculateXforGivenY(double);
  public double calculateYforGivenX(double);
  public static void main(java.lang.String[]);
  public java.lang.String toString();
}
Compiled from "SwingUtensil.java"
public class sjm.examples.book.utensil.SwingUtensil {
  public sjm.examples.book.utensil.SwingUtensil();
  public static void center(java.awt.Frame);
  public static java.awt.Font ideFont();
  public static javax.swing.JTextArea ideTextArea();
  public static javax.swing.border.TitledBorder ideTitledBorder(java.lang.String);
  public static javax.swing.JFrame launch(java.awt.Component, java.lang.String);
  public static void listen(java.awt.Frame);
  public static javax.swing.JPanel textPanel(java.lang.String, javax.swing.JTextArea, java.awt.Dimension, java.awt.Dimension);
}
Compiled from "SwingUtensil.java"
final class sjm.examples.book.utensil.SwingUtensil$1 extends java.awt.event.WindowAdapter {
  sjm.examples.book.utensil.SwingUtensil$1();
  public void windowClosing(java.awt.event.WindowEvent);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.CaselessLiteralDef extends sjm.parse.tokens.QuotedString {
  sjm.grammar.CaselessLiteralDef();
  protected boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public boolean isConstant();
}
Compiled from "Grammar.java"
public class sjm.grammar.Grammar {
  public sjm.grammar.Grammar(java.lang.String);
  public java.lang.String getName();
  public sjm.grammar.IParsingResult parse(java.lang.String);
  public void addRule(java.lang.String, sjm.parse.IParser);
  public void addRule(java.lang.String, sjm.parse.IParser, sjm.parse.IAssembler);
  public void markAsStartRule(java.lang.String);
  public void check();
  public sjm.parse.IParser startParser();
  public sjm.parse.IParser getRule(java.lang.String);
  public java.lang.String defineRule(java.lang.String);
  public java.lang.String defineRule(java.lang.String, sjm.grammar.IParserMatched);
  public java.lang.String defineRule(java.lang.String, groovy.lang.Closure);
  public void addAssembler(java.lang.String, sjm.parse.IAssembler);
  public void initTokenizer(sjm.grammar.Grammar$InitTokenizer);
  public void printOn(java.io.PrintWriter);
  public void registerTerminal(java.lang.Class<? extends sjm.parse.Terminal>);
  public void registerTerminal(java.lang.String, java.lang.Class<? extends sjm.parse.Terminal>);
  public sjm.parse.Terminal terminal(java.lang.String);
  public void discardAllConstants();
  public boolean areAllConstantsDiscarded();
  public void addRulesFrom(java.io.Reader) throws java.io.IOException;
}
Compiled from "Grammar.java"
class sjm.grammar.Grammar$1 implements sjm.grammar.IParserMatched {
  final groovy.lang.Closure val$closure;
  final sjm.grammar.Grammar this$0;
  sjm.grammar.Grammar$1(sjm.grammar.Grammar, groovy.lang.Closure);
  public void apply(java.util.List<java.lang.Object>, java.util.Stack<java.lang.Object>);
}
Compiled from "Grammar.java"
public interface sjm.grammar.Grammar$InitTokenizer {
  public abstract void init(sjm.parse.tokens.Tokenizer);
}
Compiled from "GrammarException.java"
public class sjm.grammar.GrammarException extends java.lang.RuntimeException {
  public sjm.grammar.GrammarException(java.lang.String);
}
Compiled from "GrammarTest.java"
public class sjm.grammar.GrammarTest {
  sjm.grammar.Grammar grammar;
  public sjm.grammar.GrammarTest();
  public void init();
  public void name();
  public void firstRuleIsStartRuleByDefault();
  public void otherStartruleThanFirst();
  public void grammarWithSingleRule();
  public void addingAssemblers();
  public void addRuleTogetherWithAssembler();
  public void assemblersWorkWithRuleReference();
  public void assemblersWorkWithRuleReferenceInSequence();
  public void assemblersCanOnlyBeAddedToExistingRules();
  public void resultStack();
  public void ruleReference();
  public void ruleReferenceMustReferenceExistingClause();
  public void allClausesMustBeAccessibleFromStartParser();
  public void textualRules();
  public void textualRuleWithParserMatched();
  public void textualRuleWithGroovyClosure();
  public void readFromReader() throws java.lang.Exception;
  public void leftRecursivenessCheckerIsPluggedIn();
  public void assemblyInitialization();
  public void complexScenario();
  public void performanceTest();
  public void defaultTerminalTypes();
  public void registeringTerminalTypes();
  public void automaticConstantsDiscard();
  static boolean access$002(sjm.grammar.GrammarTest, boolean);
}
Compiled from "GrammarTest.java"
class sjm.grammar.GrammarTest$1 implements sjm.parse.IAssembler {
  final sjm.grammar.GrammarTest$1MyTarget val$target;
  final sjm.grammar.GrammarTest this$0;
  sjm.grammar.GrammarTest$1(sjm.grammar.GrammarTest, sjm.grammar.GrammarTest$1MyTarget);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "GrammarTest.java"
class sjm.grammar.GrammarTest$1MyTarget implements sjm.parse.PubliclyCloneable<sjm.grammar.GrammarTest$1MyTarget> {
  final sjm.grammar.GrammarTest this$0;
  sjm.grammar.GrammarTest$1MyTarget(sjm.grammar.GrammarTest);
  public sjm.grammar.GrammarTest$1MyTarget clone();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "GrammarTest.java"
class sjm.grammar.GrammarTest$2 implements sjm.parse.IAssembler {
  final sjm.grammar.GrammarTest this$0;
  sjm.grammar.GrammarTest$2(sjm.grammar.GrammarTest);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "GrammarTest.java"
class sjm.grammar.GrammarTest$3 extends groovy.lang.Closure {
  final java.util.List val$expectedMatches;
  final sjm.grammar.GrammarTest this$0;
  sjm.grammar.GrammarTest$3(sjm.grammar.GrammarTest, java.lang.Object, java.util.List);
  public void doCall(java.util.List<java.lang.Object>, java.util.Stack<java.lang.Object>);
}
Compiled from "IParserMatched.java"
public interface sjm.grammar.IParserMatched {
  public abstract void apply(java.util.List<java.lang.Object>, java.util.Stack<java.lang.Object>);
}
Compiled from "IParsingResult.java"
public interface sjm.grammar.IParsingResult {
  public abstract boolean isCompleteMatch();
  public abstract java.util.Stack<java.lang.Object> getStack();
  public abstract sjm.parse.PubliclyCloneable<? extends java.lang.Object> getTarget();
}
Compiled from "LeftRecursionChecker.java"
public class sjm.grammar.LeftRecursionChecker {
  public sjm.grammar.LeftRecursionChecker(sjm.grammar.Grammar);
  public void check();
}
Compiled from "LeftRecursionCheckerTest.java"
public class sjm.grammar.LeftRecursionCheckerTest {
  public sjm.grammar.LeftRecursionCheckerTest();
  public void init();
  public void noRecursion();
  public void rightRecursionIsFine();
  public void ruleReferencesItself();
  public void immediateLeftRecursionInSequence();
  public void immediateLeftRecursionInRepetition();
  public void immediateLeftRecursionInAlternation();
  public void indirectLeftRecursion();
  public void complexExample();
}
Compiled from "ParserCollector.java"
public class sjm.grammar.ParserCollector {
  public sjm.grammar.ParserCollector(sjm.grammar.ParserCollector$Collectable);
  public static java.util.Set<sjm.parse.IParser> collectAllReferencedParsers(sjm.parse.IParser);
  public java.util.Set<sjm.parse.IParser> collect(sjm.parse.IParser);
  public static java.util.Set<sjm.parse.IParser> collectLeftChildren(sjm.parse.IParser);
}
Compiled from "ParserCollector.java"
final class sjm.grammar.ParserCollector$1 implements sjm.grammar.ParserCollector$Collectable {
  sjm.grammar.ParserCollector$1();
  public java.util.Set<sjm.parse.IParser> collectionFrom(sjm.parse.IParser);
}
Compiled from "ParserCollector.java"
final class sjm.grammar.ParserCollector$2 implements sjm.grammar.ParserCollector$Collectable {
  sjm.grammar.ParserCollector$2();
  public java.util.Set<sjm.parse.IParser> collectionFrom(sjm.parse.IParser);
}
Compiled from "ParserCollector.java"
interface sjm.grammar.ParserCollector$Collectable {
  public abstract java.util.Set<sjm.parse.IParser> collectionFrom(sjm.parse.IParser);
}
Compiled from "ParserMatchedAssembler.java"
public class sjm.grammar.ParserMatchedAssembler implements sjm.parse.IAssembler {
  public sjm.grammar.ParserMatchedAssembler(sjm.grammar.IParserMatched);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "ParserMatchedAssemblerTest.java"
public class sjm.grammar.ParserMatchedAssemblerTest {
  public sjm.grammar.ParserMatchedAssemblerTest();
  public void Init();
  public void emptyMatch();
  public void oneElementMatch();
  public void severalElementsMatch();
  public void matchedRuleCanManipulateStack();
}
Compiled from "ParserMatchedAssemblerTest.java"
class sjm.grammar.ParserMatchedAssemblerTest$1 implements sjm.grammar.IParserMatched {
  final sjm.grammar.ParserMatchedAssemblerTest this$0;
  sjm.grammar.ParserMatchedAssemblerTest$1(sjm.grammar.ParserMatchedAssemblerTest);
  public void apply(java.util.List<java.lang.Object>, java.util.Stack<java.lang.Object>);
}
Compiled from "ParsingResult.java"
public class sjm.grammar.ParsingResult implements sjm.grammar.IParsingResult {
  public sjm.grammar.ParsingResult(sjm.parse.Assembly);
  public boolean isCompleteMatch();
  public java.util.Stack<java.lang.Object> getStack();
  public sjm.parse.PubliclyCloneable<? extends java.lang.Object> getTarget();
  public java.lang.String toString();
}
Compiled from "RuleGrammar.java"
public class sjm.grammar.RuleGrammar extends sjm.grammar.Grammar {
  public sjm.grammar.RuleGrammar(sjm.grammar.Grammar);
  public java.lang.String defineRule(java.lang.String);
  static sjm.parse.Sequence access$000(sjm.grammar.RuleGrammar, sjm.parse.Parser[]);
  static sjm.parse.Alternation access$100(sjm.grammar.RuleGrammar, sjm.parse.Parser[]);
  static sjm.grammar.Grammar access$200(sjm.grammar.RuleGrammar);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.RuleGrammar$AlternationAssembler implements sjm.parse.IAssembler {
  final sjm.grammar.RuleGrammar this$0;
  sjm.grammar.RuleGrammar$AlternationAssembler(sjm.grammar.RuleGrammar);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.RuleGrammar$CaselessAssembler implements sjm.parse.IAssembler {
  final sjm.grammar.RuleGrammar this$0;
  sjm.grammar.RuleGrammar$CaselessAssembler(sjm.grammar.RuleGrammar);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.RuleGrammar$DiscardAssembler implements sjm.parse.IAssembler {
  final sjm.grammar.RuleGrammar this$0;
  sjm.grammar.RuleGrammar$DiscardAssembler(sjm.grammar.RuleGrammar);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.RuleGrammar$ReferenceAssembler implements sjm.parse.IAssembler {
  final sjm.grammar.RuleGrammar this$0;
  sjm.grammar.RuleGrammar$ReferenceAssembler(sjm.grammar.RuleGrammar);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.RuleGrammar$RepetitionAssembler implements sjm.parse.IAssembler {
  final sjm.grammar.RuleGrammar this$0;
  public sjm.grammar.RuleGrammar$RepetitionAssembler(sjm.grammar.RuleGrammar, int);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.RuleGrammar$RuleAssembler implements sjm.parse.IAssembler {
  final sjm.grammar.RuleGrammar this$0;
  sjm.grammar.RuleGrammar$RuleAssembler(sjm.grammar.RuleGrammar);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.RuleGrammar$SequenceAssembler implements sjm.parse.IAssembler {
  final sjm.grammar.RuleGrammar this$0;
  sjm.grammar.RuleGrammar$SequenceAssembler(sjm.grammar.RuleGrammar);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.RuleGrammar$SymbolAssembler implements sjm.parse.IAssembler {
  final sjm.grammar.RuleGrammar this$0;
  sjm.grammar.RuleGrammar$SymbolAssembler(sjm.grammar.RuleGrammar);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RuleGrammar.java"
class sjm.grammar.RuleGrammar$TerminalAssembler implements sjm.parse.IAssembler {
  final sjm.grammar.RuleGrammar this$0;
  sjm.grammar.RuleGrammar$TerminalAssembler(sjm.grammar.RuleGrammar);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "RuleGrammarTest.java"
public class sjm.grammar.RuleGrammarTest {
  public sjm.grammar.RuleGrammarTest();
  public void init();
  public void emptyRuleFails();
  public void caselessLiteralDefinition();
  public void resultStackShouldHaveRuleName();
  public void symbolDefinition();
  public void ruleCanEndWithSemicolon();
  public void additionalWhitespaceWillBeIgnored();
  public void reference();
  public void unknownTerminalType();
  public void builtInTerminalTypes();
  public void selfMadeTerminalTypes();
  public void sequence();
  public void repetition();
  public void alternation();
  public void parenthesesForUnnestedElements();
  public void nestedParentheses();
  public void byDefaultConstantsAreNotDiscarded();
  public void switchOnDefaultDiscardOfConstants();
  public void explicitConstantsDiscard();
  public void atLeastOne();
  public void printing();
}
Compiled from "RuleReference.java"
public class sjm.grammar.RuleReference extends sjm.parse.Parser implements sjm.parse.IParser {
  public sjm.grammar.RuleReference(java.lang.String, sjm.grammar.Grammar);
  public sjm.parse.Assembly bestMatch(sjm.parse.Assembly);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public java.lang.String toString();
  public java.util.Set<sjm.parse.IParser> children();
  public void accept(sjm.parse.ParserVisitor, java.util.Set<sjm.parse.Parser>);
  public java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
  protected java.util.List<java.lang.String> randomExpansion(int, int);
  protected java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public boolean equals(java.lang.Object);
  public java.util.Set<sjm.parse.IParser> leftChildren();
}
Compiled from "RuleGrammar.java"
class sjm.grammar.SymbolDef extends sjm.parse.tokens.QuotedString {
  sjm.grammar.SymbolDef();
  protected boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public boolean isConstant();
}
Compiled from "AbstractParsingTest.java"
public abstract class sjm.parse.AbstractParsingTest {
  sjm.parse.tokens.TokenAssembly assembly;
  public sjm.parse.AbstractParsingTest();
  protected void assertCompleteMatch(java.lang.String);
  protected sjm.parse.Assembly completeMatch(java.lang.String);
  protected void assertNoCompleteMatch(java.lang.String);
  protected sjm.parse.Assembly bestMatch(java.lang.String);
  protected abstract sjm.parse.Parser getParser();
  protected java.lang.Object popValueFromAssembly(sjm.parse.Assembly);
  protected void assertNoMatch(java.lang.String);
}
Compiled from "Alternation.java"
public class sjm.parse.Alternation extends sjm.parse.CollectionParser {
  public sjm.parse.Alternation();
  public sjm.parse.Alternation(java.lang.String);
  public void accept(sjm.parse.ParserVisitor, java.util.Set<sjm.parse.Parser>);
  public java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
  public java.util.List<java.lang.String> randomExpansion(int, int);
  protected java.util.List<java.lang.String> randomSettle(int, int);
  protected java.lang.String toStringSeparator();
  public java.util.Set<sjm.parse.IParser> leftChildren();
}
Compiled from "AlternationTest.java"
public class sjm.parse.AlternationTest extends sjm.parse.AbstractParsingTest {
  sjm.parse.Alternation alternation;
  public sjm.parse.AlternationTest();
  public void init();
  public void noMatch();
  public void fullMatch();
  public void children();
  public void leftChildren();
  protected sjm.parse.Parser getParser();
}
Compiled from "AssemblerHelper.java"
public class sjm.parse.AssemblerHelper {
  public sjm.parse.AssemblerHelper();
  public static java.util.List<java.lang.Object> elementsAbove(sjm.parse.Assembly, java.lang.Object);
}
Compiled from "Assembly.java"
public abstract class sjm.parse.Assembly implements java.util.Iterator<java.lang.Object>, sjm.parse.PubliclyCloneable<sjm.parse.Assembly> {
  protected java.util.Stack<java.lang.Object> stack;
  protected sjm.parse.PubliclyCloneable<? extends java.lang.Object> target;
  protected int index;
  protected java.util.Stack<java.lang.Integer> stackSizesBeforeMatch;
  public sjm.parse.Assembly();
  public sjm.parse.Assembly clone();
  public void remove();
  public void announceMatchingStart();
  public void announceMatchingEnd();
  public java.util.Stack<java.lang.Integer> getStackSizesBeforeMatch();
  public abstract java.lang.String consumed(java.lang.String);
  protected abstract java.lang.String defaultDelimiter();
  public int elementsConsumed();
  public int elementsRemaining();
  public java.util.Stack<java.lang.Object> getStack();
  public sjm.parse.PubliclyCloneable<? extends java.lang.Object> getTarget();
  public boolean hasNext();
  protected abstract int length();
  public abstract java.lang.Object peek();
  public java.lang.Object pop();
  public java.util.List<java.lang.Object> popAllMatches();
  public void push(java.lang.Object);
  public abstract java.lang.String remainder(java.lang.String);
  public void setTarget(sjm.parse.PubliclyCloneable<? extends java.lang.Object>);
  public java.lang.String toString();
  public void unget(int);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "CaselessLiteralTest.java"
public class sjm.parse.CaselessLiteralTest extends sjm.parse.AbstractParsingTest {
  sjm.parse.tokens.CaselessLiteral caselessLiteral;
  public sjm.parse.CaselessLiteralTest();
  public void init();
  public void noMatch();
  public void match();
  public void noChildren();
  protected sjm.parse.Parser getParser();
}
Compiled from "CollectionParser.java"
public abstract class sjm.parse.CollectionParser extends sjm.parse.Parser {
  protected java.util.List<sjm.parse.Parser> subparsers;
  public sjm.parse.CollectionParser();
  public sjm.parse.CollectionParser(java.lang.String);
  public sjm.parse.CollectionParser add(sjm.parse.Parser);
  public sjm.parse.CollectionParser addTop(sjm.parse.Parser);
  public sjm.parse.Parser getChild(int);
  public java.util.List<sjm.parse.Parser> getSubparsers();
  protected abstract java.lang.String toStringSeparator();
  protected java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public java.util.Set<sjm.parse.IParser> children();
}
Compiled from "Empty.java"
public class sjm.parse.Empty extends sjm.parse.Parser {
  public sjm.parse.Empty();
  public void accept(sjm.parse.ParserVisitor, java.util.Set<sjm.parse.Parser>);
  public java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
  protected java.util.List<java.lang.String> randomExpansion(int, int);
  protected java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public java.util.Set<sjm.parse.IParser> children();
}
Compiled from "IAssembler.java"
public interface sjm.parse.IAssembler {
  public abstract void workOn(sjm.parse.Assembly);
}
Compiled from "IParser.java"
public interface sjm.parse.IParser {
  public abstract sjm.parse.Assembly bestMatch(sjm.parse.Assembly);
  public abstract java.lang.String getName();
  public abstract void setName(java.lang.String);
  public abstract java.util.Set<sjm.parse.IParser> children();
  public abstract java.util.Set<sjm.parse.IParser> leftChildren();
  public abstract boolean isTerminal();
  public abstract sjm.parse.IParser setAssembler(sjm.parse.IAssembler);
  public abstract boolean isConstant();
}
Compiled from "IntTest.java"
public class sjm.parse.IntTest extends sjm.parse.AbstractParsingTest {
  sjm.parse.tokens.Int intTerminal;
  public sjm.parse.IntTest();
  public void init();
  public void noMatch();
  public void match();
  public void noChildren();
  protected sjm.parse.Parser getParser();
}
Compiled from "LiteralTest.java"
public class sjm.parse.LiteralTest extends sjm.parse.AbstractParsingTest {
  sjm.parse.tokens.Literal literal;
  public sjm.parse.LiteralTest();
  public void init();
  public void noMatch();
  public void match();
  public void noChildren();
  protected sjm.parse.Parser getParser();
}
Compiled from "Parser.java"
public abstract class sjm.parse.Parser implements sjm.parse.IParser {
  protected java.lang.String name;
  protected sjm.parse.IAssembler assembler;
  public sjm.parse.Parser();
  public sjm.parse.Parser(java.lang.String);
  public void accept(sjm.parse.ParserVisitor);
  public abstract void accept(sjm.parse.ParserVisitor, java.util.Set<sjm.parse.Parser>);
  public sjm.parse.Assembly best(java.util.Set<sjm.parse.Assembly>);
  public sjm.parse.Assembly bestMatch(sjm.parse.Assembly);
  public sjm.parse.Assembly completeMatch(sjm.parse.Assembly);
  public static java.util.Set<sjm.parse.Assembly> elementClone(java.util.Set<sjm.parse.Assembly>);
  public java.lang.String getName();
  public void setName(java.lang.String);
  public abstract java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
  public java.util.Set<sjm.parse.Assembly> matchAndAssemble(java.util.Set<sjm.parse.Assembly>);
  protected abstract java.util.List<java.lang.String> randomExpansion(int, int);
  public java.lang.String randomInput(int, java.lang.String);
  public sjm.parse.Parser setAssembler(sjm.parse.IAssembler);
  public java.lang.String toString();
  protected java.lang.String toString(java.util.Set<sjm.parse.Parser>);
  public boolean isTerminal();
  public boolean isConstant();
  public java.util.Set<sjm.parse.IParser> leftChildren();
  protected abstract java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public sjm.parse.IParser setAssembler(sjm.parse.IAssembler);
}
Compiled from "ParserTester.java"
public abstract class sjm.parse.ParserTester {
  protected sjm.parse.Parser p;
  protected boolean logTestStrings;
  public sjm.parse.ParserTester(sjm.parse.Parser);
  protected abstract sjm.parse.Assembly assembly(java.lang.String);
  protected boolean canGenerateProblem(int);
  public static java.util.Set<sjm.parse.Assembly> completeMatches(java.util.Set<sjm.parse.Assembly>);
  protected sjm.parse.PubliclyCloneable<? extends java.lang.Object> freshTarget();
  protected void logDepthChange(int);
  protected void logPassed();
  protected void logProblemFound(java.lang.String, int);
  protected void logTestString(java.lang.String);
  protected java.lang.String separator();
  public void setLogTestStrings(boolean);
  public void test();
}
Compiled from "ParserVisitor.java"
public abstract class sjm.parse.ParserVisitor {
  public sjm.parse.ParserVisitor();
  public abstract void visitAlternation(sjm.parse.Alternation, java.util.Set<sjm.parse.Parser>);
  public abstract void visitEmpty(sjm.parse.Empty, java.util.Set<sjm.parse.Parser>);
  public abstract void visitRepetition(sjm.parse.Repetition, java.util.Set<sjm.parse.Parser>);
  public abstract void visitSequence(sjm.parse.Sequence, java.util.Set<sjm.parse.Parser>);
  public abstract void visitTerminal(sjm.parse.Terminal, java.util.Set<sjm.parse.Parser>);
}
Compiled from "PopAllMatchesTest.java"
public class sjm.parse.PopAllMatchesTest extends sjm.parse.AbstractParsingTest {
  public sjm.parse.PopAllMatchesTest();
  public void empty();
  public void terminal();
  public void sequence();
  public void alternation();
  public void repetition();
  public void repetitionOfSequence();
  public void sequenceOfRepetition();
  public void stackManipulatedByAssemblers();
  public void commaSeparatedListInBrackets();
  protected sjm.parse.Parser getParser();
}
Compiled from "PopAllMatchesTest.java"
class sjm.parse.PopAllMatchesTest$1 implements sjm.parse.IAssembler {
  final sjm.parse.PopAllMatchesTest this$0;
  sjm.parse.PopAllMatchesTest$1(sjm.parse.PopAllMatchesTest);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PopAllMatchesTest.java"
class sjm.parse.PopAllMatchesTest$2 implements sjm.parse.IAssembler {
  final sjm.parse.PopAllMatchesTest this$0;
  sjm.parse.PopAllMatchesTest$2(sjm.parse.PopAllMatchesTest);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PopAllMatchesTest.java"
class sjm.parse.PopAllMatchesTest$3 implements sjm.parse.IAssembler {
  final sjm.parse.PopAllMatchesTest this$0;
  sjm.parse.PopAllMatchesTest$3(sjm.parse.PopAllMatchesTest);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PopAllMatchesTest.java"
class sjm.parse.PopAllMatchesTest$4 implements sjm.parse.IAssembler {
  final sjm.parse.PopAllMatchesTest this$0;
  sjm.parse.PopAllMatchesTest$4(sjm.parse.PopAllMatchesTest);
  public void workOn(sjm.parse.Assembly);
}
Compiled from "PubliclyCloneable.java"
public interface sjm.parse.PubliclyCloneable<T> extends java.lang.Cloneable {
  public abstract T clone();
}
Compiled from "Repetition.java"
public class sjm.parse.Repetition extends sjm.parse.Parser {
  protected sjm.parse.Parser subparser;
  protected static final int EXPWIDTH;
  protected sjm.parse.IAssembler preAssembler;
  protected int numberOfRequiredMatches;
  public sjm.parse.Repetition(sjm.parse.Parser);
  public sjm.parse.Repetition(sjm.parse.Parser, java.lang.String);
  public void accept(sjm.parse.ParserVisitor, java.util.Set<sjm.parse.Parser>);
  public sjm.parse.Parser getSubparser();
  public java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
  protected java.util.List<java.lang.String> randomExpansion(int, int);
  public sjm.parse.IParser setPreAssembler(sjm.parse.IAssembler);
  protected java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public java.util.Set<sjm.parse.IParser> children();
  public sjm.parse.Repetition requireMatches(int);
  public int requiredMatches();
  public java.util.Set<sjm.parse.IParser> leftChildren();
}
Compiled from "RepetitionTest.java"
public class sjm.parse.RepetitionTest extends sjm.parse.AbstractParsingTest {
  sjm.parse.Repetition repetition;
  public sjm.parse.RepetitionTest();
  public void init();
  public void noMatch();
  public void fullMatch();
  public void numberOfRequiredMatches();
  public void children();
  public void leftChildren();
  protected sjm.parse.Parser getParser();
}
Compiled from "Sequence.java"
public class sjm.parse.Sequence extends sjm.parse.CollectionParser {
  public sjm.parse.Sequence();
  public sjm.parse.Sequence(java.lang.String);
  public void accept(sjm.parse.ParserVisitor, java.util.Set<sjm.parse.Parser>);
  public java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
  protected java.util.List<java.lang.String> randomExpansion(int, int);
  protected java.lang.String toStringSeparator();
  public java.util.Set<sjm.parse.IParser> leftChildren();
}
Compiled from "SequenceTest.java"
public class sjm.parse.SequenceTest extends sjm.parse.AbstractParsingTest {
  sjm.parse.Sequence sequence;
  public sjm.parse.SequenceTest();
  public void init();
  public void noMatch();
  public void fullMatch();
  public void partialMatch();
  public void children();
  public void leftChildren();
  protected sjm.parse.Parser getParser();
}
Compiled from "Terminal.java"
public class sjm.parse.Terminal extends sjm.parse.Parser {
  protected boolean discard;
  public sjm.parse.Terminal();
  public sjm.parse.Terminal(java.lang.String);
  public void accept(sjm.parse.ParserVisitor, java.util.Set<sjm.parse.Parser>);
  public sjm.parse.Terminal discard();
  public java.util.Set<sjm.parse.Assembly> match(java.util.Set<sjm.parse.Assembly>);
  protected sjm.parse.Assembly matchOneAssembly(sjm.parse.Assembly);
  protected java.lang.Object elementToPushOnStack(java.lang.Object);
  protected boolean qualifies(java.lang.Object);
  public java.util.List<java.lang.String> randomExpansion(int, int);
  public boolean isDiscarded();
  protected java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public java.util.Set<sjm.parse.IParser> children();
  public boolean isTerminal();
}
Compiled from "TokenAsTypeTest.java"
public class sjm.parse.TokenAsTypeTest {
  public sjm.parse.TokenAsTypeTest();
  public void word();
  public void number();
  public void asUnknownType();
}
Compiled from "TokenizerTest.java"
public class sjm.parse.TokenizerTest {
  sjm.parse.tokens.Tokenizer tokenizer;
  public sjm.parse.TokenizerTest();
  public void eof() throws java.io.IOException;
  public void num() throws java.io.IOException;
  public void moreNums() throws java.io.IOException;
  public void symbol() throws java.io.IOException;
  public void word() throws java.io.IOException;
  public void mixedWords() throws java.io.IOException;
  public void quoted() throws java.io.IOException;
  public void unicodeChars() throws java.io.IOException;
  public void javaStyleComments() throws java.lang.Exception;
  public void disableJavaStyleComments() throws java.lang.Exception;
  public void whitespaceTokenizing() throws java.io.IOException;
}
Compiled from "Char.java"
public class sjm.parse.chars.Char extends sjm.parse.Terminal {
  public sjm.parse.chars.Char();
  public boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "CharacterAssembly.java"
public class sjm.parse.chars.CharacterAssembly extends sjm.parse.Assembly {
  protected java.lang.String string;
  public sjm.parse.chars.CharacterAssembly(java.lang.String);
  public java.lang.String consumed(java.lang.String);
  public java.lang.String defaultDelimiter();
  public int length();
  public java.lang.Object next();
  public java.lang.Object peek();
  public java.lang.String remainder(java.lang.String);
}
Compiled from "CharacterTester.java"
public class sjm.parse.chars.CharacterTester extends sjm.parse.ParserTester {
  public sjm.parse.chars.CharacterTester(sjm.parse.Parser);
  protected sjm.parse.Assembly assembly(java.lang.String);
  protected java.lang.String separator();
}
Compiled from "Digit.java"
public class sjm.parse.chars.Digit extends sjm.parse.Terminal {
  public sjm.parse.chars.Digit();
  public boolean qualifies(java.lang.Object);
  public java.util.List<java.lang.String> randomExpansion(int, int);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "Letter.java"
public class sjm.parse.chars.Letter extends sjm.parse.Terminal {
  public sjm.parse.chars.Letter();
  public boolean qualifies(java.lang.Object);
  public java.util.List<java.lang.String> randomExpansion(int, int);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "SpecificChar.java"
public class sjm.parse.chars.SpecificChar extends sjm.parse.Terminal {
  protected java.lang.Character character;
  public sjm.parse.chars.SpecificChar(char);
  public sjm.parse.chars.SpecificChar(java.lang.Character);
  public boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "CaselessLiteral.java"
public class sjm.parse.tokens.CaselessLiteral extends sjm.parse.tokens.Literal {
  public sjm.parse.tokens.CaselessLiteral(java.lang.String);
  protected boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "ITokenizer.java"
public interface sjm.parse.tokens.ITokenizer {
  public abstract sjm.parse.tokens.Token nextToken() throws java.io.IOException;
}
Compiled from "Int.java"
public class sjm.parse.tokens.Int extends sjm.parse.Terminal {
  public sjm.parse.tokens.Int();
  protected boolean qualifies(java.lang.Object);
  public java.util.List<java.lang.String> randomExpansion(int, int);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  protected java.lang.Object elementToPushOnStack(java.lang.Object);
}
Compiled from "Literal.java"
public class sjm.parse.tokens.Literal extends sjm.parse.Terminal {
  protected sjm.parse.tokens.Token literal;
  public sjm.parse.tokens.Literal(java.lang.String);
  protected boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean isConstant();
}
Compiled from "LowerCaseWord.java"
public class sjm.parse.tokens.LowerCaseWord extends sjm.parse.tokens.Word {
  public sjm.parse.tokens.LowerCaseWord();
  protected boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  protected char workOnCharForRandomExpansion(char, int);
}
Compiled from "Num.java"
public class sjm.parse.tokens.Num extends sjm.parse.Terminal {
  public sjm.parse.tokens.Num();
  protected boolean qualifies(java.lang.Object);
  public java.util.List<java.lang.String> randomExpansion(int, int);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "NumberState.java"
public class sjm.parse.tokens.NumberState extends sjm.parse.tokens.TokenizerState {
  protected int c;
  protected java.math.BigDecimal value;
  protected boolean absorbedLeadingMinus;
  protected boolean absorbedDot;
  protected boolean gotAdigit;
  public sjm.parse.tokens.NumberState();
  protected java.math.BigDecimal absorbDigits(java.io.PushbackReader, boolean) throws java.io.IOException;
  public sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
  protected void parseLeft(java.io.PushbackReader) throws java.io.IOException;
  protected void parseRight(java.io.PushbackReader) throws java.io.IOException;
  protected void reset(int);
  protected sjm.parse.tokens.Token value(java.io.PushbackReader, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
}
Compiled from "QuoteState.java"
public class sjm.parse.tokens.QuoteState extends sjm.parse.tokens.TokenizerState {
  protected char[] charbuf;
  public sjm.parse.tokens.QuoteState();
  protected void checkBufLength(int);
  public sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
}
Compiled from "QuotedString.java"
public class sjm.parse.tokens.QuotedString extends sjm.parse.Terminal {
  public sjm.parse.tokens.QuotedString();
  protected boolean qualifies(java.lang.Object);
  public java.util.List<java.lang.String> randomExpansion(int, int);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "SlashSlashState.java"
public class sjm.parse.tokens.SlashSlashState extends sjm.parse.tokens.TokenizerState {
  public sjm.parse.tokens.SlashSlashState();
  public sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
}
Compiled from "SlashStarState.java"
public class sjm.parse.tokens.SlashStarState extends sjm.parse.tokens.TokenizerState {
  public sjm.parse.tokens.SlashStarState();
  public sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
}
Compiled from "SlashState.java"
public class sjm.parse.tokens.SlashState extends sjm.parse.tokens.TokenizerState {
  protected sjm.parse.tokens.SlashStarState slashStarState;
  protected sjm.parse.tokens.SlashSlashState slashSlashState;
  public sjm.parse.tokens.SlashState();
  public sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
}
Compiled from "Symbol.java"
public class sjm.parse.tokens.Symbol extends sjm.parse.Terminal {
  protected sjm.parse.tokens.Token symbol;
  public sjm.parse.tokens.Symbol(char);
  public sjm.parse.tokens.Symbol(java.lang.String);
  protected boolean qualifies(java.lang.Object);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
  public boolean equals(java.lang.Object);
}
Compiled from "SymbolNode.java"
public class sjm.parse.tokens.SymbolNode {
  protected char myChar;
  protected java.util.List<sjm.parse.tokens.SymbolNode> children;
  protected boolean valid;
  protected sjm.parse.tokens.SymbolNode parent;
  public sjm.parse.tokens.SymbolNode(sjm.parse.tokens.SymbolNode, char);
  protected void addDescendantLine(java.lang.String);
  public java.lang.String ancestry();
  protected sjm.parse.tokens.SymbolNode deepestRead(java.io.PushbackReader) throws java.io.IOException;
  protected sjm.parse.tokens.SymbolNode ensureChildWithChar(char);
  protected sjm.parse.tokens.SymbolNode findChildWithChar(char);
  protected sjm.parse.tokens.SymbolNode findDescendant(java.lang.String);
  protected void setValid(boolean);
  public java.lang.String toString();
  protected sjm.parse.tokens.SymbolNode unreadToValid(java.io.PushbackReader) throws java.io.IOException;
}
Compiled from "SymbolRootNode.java"
public class sjm.parse.tokens.SymbolRootNode extends sjm.parse.tokens.SymbolNode {
  protected sjm.parse.tokens.SymbolNode[] rootsChildren;
  public sjm.parse.tokens.SymbolRootNode();
  public void add(java.lang.String);
  public java.lang.String ancestry();
  protected sjm.parse.tokens.SymbolNode findChildWithChar(char);
  protected void init();
  public java.lang.String nextSymbol(java.io.PushbackReader, int) throws java.io.IOException;
}
Compiled from "SymbolState.java"
public class sjm.parse.tokens.SymbolState extends sjm.parse.tokens.TokenizerState {
  sjm.parse.tokens.SymbolRootNode symbols;
  public sjm.parse.tokens.SymbolState();
  public void add(java.lang.String);
  public sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
}
Compiled from "Token.java"
public class sjm.parse.tokens.Token {
  protected sjm.parse.tokens.TokenType ttype;
  protected java.lang.String sval;
  protected java.lang.Number nval;
  public static final sjm.parse.tokens.TokenType TT_EOF;
  public static final sjm.parse.tokens.Token EOF;
  public static final sjm.parse.tokens.TokenType TT_NUMBER;
  public static final sjm.parse.tokens.TokenType TT_WORD;
  public static final sjm.parse.tokens.TokenType TT_SYMBOL;
  public static final sjm.parse.tokens.TokenType TT_QUOTED;
  public static final sjm.parse.tokens.TokenType TT_WHITESPACE;
  public sjm.parse.tokens.Token(char);
  public sjm.parse.tokens.Token(java.lang.String);
  public sjm.parse.tokens.Token(java.lang.Number);
  public sjm.parse.tokens.Token(sjm.parse.tokens.TokenType, java.lang.String, java.lang.Number);
  public boolean equals(java.lang.Object);
  public boolean equalsIgnoreCase(java.lang.Object);
  public boolean isNumber();
  public boolean isQuotedString();
  public boolean isSymbol();
  public boolean isWord();
  public boolean isWhitespace();
  public double nval();
  public java.lang.String sval();
  public java.lang.String toString();
  public sjm.parse.tokens.TokenType ttype();
  public java.lang.Object value();
  public java.lang.Object asType(java.lang.Class<?>);
  static {};
}
Compiled from "TokenAssembly.java"
public class sjm.parse.tokens.TokenAssembly extends sjm.parse.Assembly {
  protected sjm.parse.tokens.TokenString tokenString;
  public sjm.parse.tokens.TokenAssembly(java.lang.String);
  public sjm.parse.tokens.TokenAssembly(sjm.parse.tokens.ITokenizer);
  public sjm.parse.tokens.TokenAssembly(sjm.parse.tokens.TokenString);
  public java.lang.String consumed(java.lang.String);
  public java.lang.String defaultDelimiter();
  public int length();
  public java.lang.Object next();
  public java.lang.Object peek();
  public java.lang.String remainder(java.lang.String);
}
Compiled from "TokenString.java"
public class sjm.parse.tokens.TokenString {
  protected sjm.parse.tokens.Token[] tokens;
  public sjm.parse.tokens.TokenString(sjm.parse.tokens.Token[]);
  public sjm.parse.tokens.TokenString(java.lang.String);
  public sjm.parse.tokens.TokenString(sjm.parse.tokens.ITokenizer);
  public int length();
  public sjm.parse.tokens.Token tokenAt(int);
  public java.lang.String toString();
}
Compiled from "TokenStringSource.java"
public class sjm.parse.tokens.TokenStringSource {
  protected sjm.parse.tokens.ITokenizer tokenizer;
  protected java.lang.String delimiter;
  protected sjm.parse.tokens.TokenString cachedTokenString;
  public sjm.parse.tokens.TokenStringSource(sjm.parse.tokens.ITokenizer, java.lang.String);
  protected void ensureCacheIsLoaded();
  public boolean hasMoreTokenStrings();
  protected void loadCache();
  public static void main(java.lang.String[]);
  public sjm.parse.tokens.TokenString nextTokenString();
  protected java.util.List<sjm.parse.tokens.Token> nextVector();
}
Compiled from "TokenTester.java"
public class sjm.parse.tokens.TokenTester extends sjm.parse.ParserTester {
  public sjm.parse.tokens.TokenTester(sjm.parse.Parser);
  protected sjm.parse.Assembly assembly(java.lang.String);
}
Compiled from "TokenType.java"
public class sjm.parse.tokens.TokenType {
  protected java.lang.String name;
  public sjm.parse.tokens.TokenType(java.lang.String);
}
Compiled from "Tokenizer.java"
public class sjm.parse.tokens.Tokenizer implements sjm.parse.tokens.ITokenizer {
  protected java.io.PushbackReader reader;
  protected static final int DEFAULT_SYMBOL_MAX;
  protected sjm.parse.tokens.NumberState numberState;
  protected sjm.parse.tokens.QuoteState quoteState;
  protected sjm.parse.tokens.SlashState slashState;
  protected sjm.parse.tokens.SymbolState symbolState;
  protected sjm.parse.tokens.WhitespaceState whitespaceState;
  protected sjm.parse.tokens.WordState wordState;
  public sjm.parse.tokens.Tokenizer();
  public sjm.parse.tokens.Tokenizer(java.lang.String);
  public java.io.PushbackReader getReader();
  public sjm.parse.tokens.Token nextToken() throws java.io.IOException;
  public sjm.parse.tokens.NumberState numberState();
  public sjm.parse.tokens.QuoteState quoteState();
  public void setCharacterState(int, int, sjm.parse.tokens.TokenizerState);
  public void setReader(java.io.PushbackReader);
  public void setString(java.lang.String);
  public void setString(java.lang.String, int);
  public sjm.parse.tokens.SlashState slashState();
  public sjm.parse.tokens.SymbolState symbolState();
  public sjm.parse.tokens.WhitespaceState whitespaceState();
  public sjm.parse.tokens.WordState wordState();
  public void disableComments();
  public void enableWhitespaceTokenizing();
}
Compiled from "TokenizerState.java"
public abstract class sjm.parse.tokens.TokenizerState {
  public sjm.parse.tokens.TokenizerState();
  public abstract sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
}
Compiled from "UpperCaseWord.java"
public class sjm.parse.tokens.UpperCaseWord extends sjm.parse.tokens.Word {
  public sjm.parse.tokens.UpperCaseWord();
  protected boolean qualifies(java.lang.Object);
  protected char workOnCharForRandomExpansion(char, int);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "WhitespaceState.java"
public class sjm.parse.tokens.WhitespaceState extends sjm.parse.tokens.TokenizerState {
  protected boolean[] whitespaceChar;
  protected boolean whitespaceTokensEnabled;
  public sjm.parse.tokens.WhitespaceState();
  public void enableWhitespaceTokens();
  public sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
  public void setWhitespaceChars(int, int, boolean);
}
Compiled from "Word.java"
public class sjm.parse.tokens.Word extends sjm.parse.Terminal {
  public sjm.parse.tokens.Word();
  protected boolean qualifies(java.lang.Object);
  public java.util.List<java.lang.String> randomExpansion(int, int);
  protected char workOnCharForRandomExpansion(char, int);
  public java.lang.String unvisitedString(java.util.Set<sjm.parse.Parser>);
}
Compiled from "WordState.java"
public class sjm.parse.tokens.WordState extends sjm.parse.tokens.TokenizerState {
  protected java.util.Set<java.lang.Integer> wordChars;
  public sjm.parse.tokens.WordState();
  public sjm.parse.tokens.Token nextToken(java.io.PushbackReader, int, sjm.parse.tokens.Tokenizer) throws java.io.IOException;
  public void setWordChars(int, int, boolean);
  protected boolean isWordChar(int);
}
