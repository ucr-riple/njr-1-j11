Compiled from "DemographicData.java"
public class eu.cassandra.sim.DemographicData {
  public eu.cassandra.sim.DemographicData(java.lang.String, java.lang.String, java.lang.String, int, java.util.TreeMap<java.lang.String, java.lang.Double>, java.util.TreeMap<java.lang.String, java.lang.Double>, java.util.TreeMap<java.lang.String, java.lang.Double>);
  public java.lang.String getName();
  public java.lang.String getDescription();
  public java.lang.String getType();
  public int getNumEntities();
  public java.util.TreeMap<java.lang.String, java.lang.Double> getInst_probs();
  public java.util.TreeMap<java.lang.String, java.lang.Double> getPerson_probs();
  public java.util.TreeMap<java.lang.String, java.lang.Double> getApp_probs();
  public void setName(java.lang.String);
  public void setDescription(java.lang.String);
  public void setType(java.lang.String);
  public void setNumEntities(int);
  public void setInst_probs(java.util.TreeMap<java.lang.String, java.lang.Double>);
  public void setPerson_probs(java.util.TreeMap<java.lang.String, java.lang.Double>);
  public void setApp_probs(java.util.TreeMap<java.lang.String, java.lang.Double>);
}
Compiled from "Event.java"
public class eu.cassandra.sim.Event implements java.lang.Comparable<eu.cassandra.sim.Event> {
  public java.lang.String hashcode;
  public static final int SWITCH_OFF;
  public static final int SWITCH_ON;
  public eu.cassandra.sim.Event(int, int, eu.cassandra.sim.entities.appliances.Appliance, java.lang.String, eu.cassandra.sim.entities.people.Activity);
  public eu.cassandra.sim.entities.appliances.Appliance getAppliance();
  public eu.cassandra.sim.entities.people.Activity getActivity();
  public int getAction();
  public int getTick();
  public boolean apply();
  public int compareTo(eu.cassandra.sim.Event);
  public int compareTo(java.lang.Object);
}
Compiled from "Level.java"
public class eu.cassandra.sim.Level {
  public eu.cassandra.sim.Level(double, double);
  public double getPrice();
  public double getLevel();
}
Compiled from "MySimpleDynamicScenarioSimulation.java"
public class eu.cassandra.sim.MySimpleDynamicScenarioSimulation extends eu.cassandra.sim.Simulation {
  public eu.cassandra.sim.MySimpleDynamicScenarioSimulation(java.lang.String, java.lang.String, int, boolean);
  public java.util.Vector<eu.cassandra.sim.entities.installations.Installation> setupScenario();
  public static void main(java.lang.String[]);
}
Compiled from "MySimpleStaticScenarioSimulation.java"
public class eu.cassandra.sim.MySimpleStaticScenarioSimulation extends eu.cassandra.sim.Simulation {
  public eu.cassandra.sim.MySimpleStaticScenarioSimulation(java.lang.String, java.lang.String, int, boolean);
  public java.util.Vector<eu.cassandra.sim.entities.installations.Installation> setupScenario();
  public static void main(java.lang.String[]);
}
Compiled from "Offpeak.java"
public class eu.cassandra.sim.Offpeak {
  public eu.cassandra.sim.Offpeak(java.lang.String, java.lang.String);
  public java.lang.String getFrom();
  public java.lang.String getTo();
}
Compiled from "Period.java"
public class eu.cassandra.sim.Period {
  public eu.cassandra.sim.Period(java.lang.String, java.lang.String, double);
  public java.lang.String getFrom();
  public java.lang.String getTo();
  public void setTo(java.lang.String);
  public double getPrice();
}
Compiled from "PricingPolicy.java"
public class eu.cassandra.sim.PricingPolicy {
  public eu.cassandra.sim.PricingPolicy();
  public int getBillingCycle();
  public double getFixedCharge();
  public java.lang.String getType();
  public double[] getTOUArray();
  public double calculateCost(double, double, double, double, int, double);
  public boolean isOffpeak(int);
  eu.cassandra.sim.PricingPolicy(eu.cassandra.sim.PricingPolicy$Builder, eu.cassandra.sim.PricingPolicy$1);
}
Compiled from "PricingPolicy.java"
class eu.cassandra.sim.PricingPolicy$1 {
}
Compiled from "PricingPolicy.java"
public class eu.cassandra.sim.PricingPolicy$Builder {
  public eu.cassandra.sim.PricingPolicy$Builder(java.lang.String, double, int);
  public eu.cassandra.sim.PricingPolicy$Builder energyPowerPricing(double, double, double);
  public eu.cassandra.sim.PricingPolicy$Builder allInclusivePricing(double, double, double);
  public eu.cassandra.sim.PricingPolicy$Builder touPricing(java.lang.String[], java.lang.String[], double[]);
  public eu.cassandra.sim.PricingPolicy$Builder scalarEnergyPricing(double[], double[]);
  public eu.cassandra.sim.PricingPolicy$Builder scalarEnergyPricingTimeZones(double, double[], double[], java.lang.String[], java.lang.String[]);
  public eu.cassandra.sim.PricingPolicy build();
  static java.lang.String access$100(eu.cassandra.sim.PricingPolicy$Builder);
  static int access$200(eu.cassandra.sim.PricingPolicy$Builder);
  static double access$300(eu.cassandra.sim.PricingPolicy$Builder);
  static double access$400(eu.cassandra.sim.PricingPolicy$Builder);
  static double access$500(eu.cassandra.sim.PricingPolicy$Builder);
  static double access$600(eu.cassandra.sim.PricingPolicy$Builder);
  static double access$700(eu.cassandra.sim.PricingPolicy$Builder);
  static double access$800(eu.cassandra.sim.PricingPolicy$Builder);
  static double access$900(eu.cassandra.sim.PricingPolicy$Builder);
  static double access$1000(eu.cassandra.sim.PricingPolicy$Builder);
  static java.util.ArrayList access$1100(eu.cassandra.sim.PricingPolicy$Builder);
  static java.util.ArrayList access$1200(eu.cassandra.sim.PricingPolicy$Builder);
  static java.util.ArrayList access$1300(eu.cassandra.sim.PricingPolicy$Builder);
}
Compiled from "SimCalendar.java"
public class eu.cassandra.sim.SimCalendar {
  public eu.cassandra.sim.SimCalendar(int, int, int, int);
  public java.util.Calendar getMyCalendar();
  public java.util.Date getBase();
  public java.lang.String getGranularity();
  public int getGranularityRaw();
  public int getGranularityValue();
  public boolean isWeekend(int);
  public java.lang.String getCurrentDate(int);
  public java.lang.String getDayOfWeek(int);
  public java.lang.String toString();
  static {};
}
Compiled from "Simulation.java"
public abstract class eu.cassandra.sim.Simulation {
  protected int mcruns;
  protected double co2;
  protected eu.cassandra.sim.SimulationParams simulationWorld;
  protected eu.cassandra.sim.DemographicData demographics;
  protected eu.cassandra.sim.PricingPolicy pricing;
  protected eu.cassandra.sim.PricingPolicy baseline_pricing;
  protected int numOfDays;
  protected java.lang.String setup;
  protected static eu.cassandra.sim.utilities.SetupFileParser sfp;
  public eu.cassandra.sim.Simulation(java.lang.String, java.lang.String, int, boolean);
  public abstract java.util.Vector<eu.cassandra.sim.entities.installations.Installation> setupScenario();
  public void setup(boolean) throws java.lang.Exception;
  public void runSimulation();
  public java.util.Collection<eu.cassandra.sim.entities.installations.Installation> getInstallations();
  public eu.cassandra.sim.entities.installations.Installation getInstallation(int);
  public int getCurrentTick();
  public int getEndTick();
  public eu.cassandra.sim.utilities.ORNG getOrng();
  public eu.cassandra.sim.SimulationParams getSimulationWorld();
  public void printKPIs();
  protected void printKPIs(java.util.HashMap<java.lang.String, java.lang.Double>, java.lang.String, java.lang.String);
}
Compiled from "SimulationParams.java"
public class eu.cassandra.sim.SimulationParams {
  public eu.cassandra.sim.SimulationParams(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, int, double, java.lang.String);
  public eu.cassandra.sim.SimCalendar getSimCalendar();
  public java.lang.String getName();
  public java.lang.String getResponseType();
  public java.lang.String getLocationInfo();
  public int getMcruns();
  public double getCo2();
  public int getNumOfDays();
  public void setMcruns(int);
  public void setCo2(double);
  public void setNumOfDays(int);
  public java.lang.String getSetup();
  public void setSetup(java.lang.String);
}
Compiled from "StandAloneSimulation.java"
public class eu.cassandra.sim.StandAloneSimulation extends eu.cassandra.sim.Simulation {
  public eu.cassandra.sim.StandAloneSimulation(java.lang.String, java.lang.String, int, boolean);
  public java.util.Vector<eu.cassandra.sim.entities.installations.Installation> setupScenario();
  public static void main(java.lang.String[]);
}
Compiled from "Entity.java"
public abstract class eu.cassandra.sim.entities.Entity {
  protected java.lang.String id;
  protected java.lang.String name;
  protected java.lang.String description;
  protected java.lang.String type;
  protected java.lang.String parentId;
  public eu.cassandra.sim.entities.Entity();
  public void setId(java.lang.String);
  public java.lang.String getId();
  public void setName(java.lang.String);
  public java.lang.String getName();
  public void setType(java.lang.String);
  public java.lang.String getType();
  public void setDescription(java.lang.String);
  public java.lang.String getDescription();
}
Compiled from "Appliance.java"
public class eu.cassandra.sim.entities.appliances.Appliance extends eu.cassandra.sim.entities.Entity {
  public eu.cassandra.sim.entities.installations.Installation getInstallation();
  public boolean isInUse();
  public boolean isBase();
  public eu.cassandra.sim.entities.appliances.ConsumptionModel getQConsumptionModel();
  public eu.cassandra.sim.entities.appliances.ConsumptionModel getPConsumptionModel();
  public double getPower(long, java.lang.String);
  public void turnOff();
  public void turnOn(long, java.lang.String, eu.cassandra.sim.entities.people.Activity);
  public long getOnTick();
  public java.lang.String getWho();
  public eu.cassandra.sim.entities.people.Activity getWhat();
  public java.lang.Double[] getActiveConsumption();
  public boolean isStaticConsumption();
  public void updateMaxPower(double);
  public double getMaxPower();
  public void updateAvgPower(double);
  public double getAvgPower();
  public void updateEnergy(double);
  public void updateEnergyOffpeak(double);
  public void updateCost(eu.cassandra.sim.PricingPolicy, int);
  public double getEnergy();
  public double getCost();
  public double getStandByConsumption();
  eu.cassandra.sim.entities.appliances.Appliance(eu.cassandra.sim.entities.appliances.Appliance$Builder, eu.cassandra.sim.utilities.ORNG, eu.cassandra.sim.entities.appliances.Appliance$1);
}
Compiled from "Appliance.java"
class eu.cassandra.sim.entities.appliances.Appliance$1 {
}
Compiled from "Appliance.java"
public class eu.cassandra.sim.entities.appliances.Appliance$Builder {
  public eu.cassandra.sim.entities.appliances.Appliance$Builder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, eu.cassandra.sim.entities.installations.Installation, eu.cassandra.sim.entities.appliances.ConsumptionModel, eu.cassandra.sim.entities.appliances.ConsumptionModel, double, boolean);
  public eu.cassandra.sim.entities.appliances.Appliance build(eu.cassandra.sim.utilities.ORNG);
  static java.lang.String access$100(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static java.lang.String access$200(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static java.lang.String access$300(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static java.lang.String access$400(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static eu.cassandra.sim.entities.installations.Installation access$500(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static double access$600(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static eu.cassandra.sim.entities.appliances.ConsumptionModel access$700(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static eu.cassandra.sim.entities.appliances.ConsumptionModel access$800(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static boolean access$900(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static long access$1000(eu.cassandra.sim.entities.appliances.Appliance$Builder);
  static java.lang.String access$1100(eu.cassandra.sim.entities.appliances.Appliance$Builder);
}
Compiled from "ConsumptionModel.java"
public class eu.cassandra.sim.entities.appliances.ConsumptionModel extends eu.cassandra.sim.entities.Entity {
  public eu.cassandra.sim.entities.appliances.ConsumptionModel();
  public eu.cassandra.sim.entities.appliances.ConsumptionModel(java.lang.String, java.lang.String) throws java.lang.Exception;
  public eu.cassandra.sim.entities.appliances.ConsumptionModel(int, int[], java.util.ArrayList<eu.cassandra.sim.entities.appliances.Tripplet>[]);
  public int getTotalDuration();
  public int getOuterN();
  public int getPatternN();
  public int getN(int);
  public int getPatternDuration(int);
  public java.util.ArrayList<eu.cassandra.sim.entities.appliances.Tripplet> getPattern(int);
  public java.util.ArrayList<eu.cassandra.sim.entities.appliances.Tripplet>[] getPatterns();
  public boolean checkStatic();
  public java.lang.Double[] getConsumption();
  public com.mongodb.BasicDBObject toDBObject();
}
Compiled from "Tripplet.java"
public class eu.cassandra.sim.entities.appliances.Tripplet {
  double v;
  double s;
  int d;
  public double getV();
  public double getS();
  public int getD();
  public void setV(double);
  public void setS(double);
  public void setD(int);
  public eu.cassandra.sim.entities.appliances.Tripplet();
}
Compiled from "Installation.java"
public class eu.cassandra.sim.entities.installations.Installation extends eu.cassandra.sim.entities.Entity {
  public void updateDailySchedule(int, java.util.concurrent.PriorityBlockingQueue<eu.cassandra.sim.Event>, java.lang.String, eu.cassandra.sim.utilities.ORNG);
  public void updateMaxPower(double);
  public double getMaxPower();
  public void updateAvgPower(double);
  public double getAvgPower();
  public void updateEnergy(double);
  public void updateEnergyOffpeak(double);
  public void updateCost(int);
  public eu.cassandra.sim.PricingPolicy getPricing();
  public void addAppliancesKPIs(eu.cassandra.sim.utilities.DBResults, double, double);
  public void addActivitiesKPIs(eu.cassandra.sim.utilities.DBResults, double, double);
  public double getEnergy();
  public double getCost();
  public void nextStep(int);
  public void updateAppliancesAndActivitiesConsumptions(int, int);
  public void updateRegistry(int);
  public double getCurrentPowerP();
  public double getCurrentPowerQ();
  public java.util.Vector<eu.cassandra.sim.entities.people.Person> getPersons();
  public void addPerson(eu.cassandra.sim.entities.people.Person);
  public java.util.Vector<eu.cassandra.sim.entities.appliances.Appliance> getAppliances();
  public void addAppliance(eu.cassandra.sim.entities.appliances.Appliance);
  public eu.cassandra.sim.entities.appliances.Appliance applianceExists(java.lang.String);
  public void printInstallationInfo();
  eu.cassandra.sim.entities.installations.Installation(eu.cassandra.sim.entities.installations.Installation$Builder, eu.cassandra.sim.entities.installations.Installation$1);
}
Compiled from "Installation.java"
class eu.cassandra.sim.entities.installations.Installation$1 {
}
Compiled from "Installation.java"
public class eu.cassandra.sim.entities.installations.Installation$Builder {
  public eu.cassandra.sim.entities.installations.Installation$Builder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, eu.cassandra.sim.PricingPolicy, eu.cassandra.sim.PricingPolicy);
  public eu.cassandra.sim.entities.installations.Installation build();
  static java.lang.String access$100(eu.cassandra.sim.entities.installations.Installation$Builder);
  static java.lang.String access$200(eu.cassandra.sim.entities.installations.Installation$Builder);
  static java.lang.String access$300(eu.cassandra.sim.entities.installations.Installation$Builder);
  static java.lang.String access$400(eu.cassandra.sim.entities.installations.Installation$Builder);
  static java.util.Vector access$500(eu.cassandra.sim.entities.installations.Installation$Builder);
  static java.util.Vector access$600(eu.cassandra.sim.entities.installations.Installation$Builder);
  static eu.cassandra.sim.PricingPolicy access$700(eu.cassandra.sim.entities.installations.Installation$Builder);
  static eu.cassandra.sim.PricingPolicy access$800(eu.cassandra.sim.entities.installations.Installation$Builder);
}
Compiled from "Activity.java"
public class eu.cassandra.sim.entities.people.Activity extends eu.cassandra.sim.entities.Entity {
  public void addStartTime(java.lang.String, eu.cassandra.sim.math.ProbabilityDistribution);
  public void addDuration(java.lang.String, eu.cassandra.sim.math.ProbabilityDistribution);
  public void addTimes(java.lang.String, eu.cassandra.sim.math.ProbabilityDistribution);
  public void addShiftable(java.lang.String, java.lang.Boolean);
  public void addConfig(java.lang.String, java.lang.Boolean);
  public java.lang.String getName();
  public java.lang.String getDescription();
  public java.lang.String getType();
  public eu.cassandra.sim.SimulationParams getSimulationWorld();
  public double[] calcExpPower();
  public void updateDailySchedule(int, java.util.concurrent.PriorityBlockingQueue<eu.cassandra.sim.Event>, eu.cassandra.sim.PricingPolicy, eu.cassandra.sim.PricingPolicy, double, double, java.lang.String, eu.cassandra.sim.utilities.ORNG);
  public void updateMaxPower(double);
  public double getMaxPower();
  public void updateAvgPower(double);
  public double getAvgPower();
  public void updateEnergy(double);
  public void updateEnergyOffpeak(double);
  public void updateCost(eu.cassandra.sim.PricingPolicy, int);
  public double getEnergy();
  public double getCost();
  public java.util.TreeMap<java.lang.String, eu.cassandra.sim.math.ProbabilityDistribution> getProbStartTime();
  public java.util.TreeMap<java.lang.String, eu.cassandra.sim.math.ProbabilityDistribution> getProbDuration();
  public java.util.TreeMap<java.lang.String, java.lang.Boolean> getShiftable();
  public java.util.TreeMap<java.lang.String, java.lang.Boolean> getConfig();
  public java.util.TreeMap<java.lang.String, java.util.Vector<eu.cassandra.sim.entities.appliances.Appliance>> getAppliances();
  public java.util.TreeMap<java.lang.String, eu.cassandra.sim.math.ProbabilityDistribution> getnTimesGivenDay();
  public void setAppliances(java.util.TreeMap<java.lang.String, java.util.Vector<eu.cassandra.sim.entities.appliances.Appliance>>);
  public void addAppliances(java.lang.String[], java.util.TreeMap<java.lang.String, eu.cassandra.sim.entities.appliances.Appliance>, java.lang.String);
  eu.cassandra.sim.entities.people.Activity(eu.cassandra.sim.entities.people.Activity$Builder, eu.cassandra.sim.entities.people.Activity$1);
}
Compiled from "Activity.java"
class eu.cassandra.sim.entities.people.Activity$1 {
}
Compiled from "Activity.java"
public class eu.cassandra.sim.entities.people.Activity$Builder {
  public eu.cassandra.sim.entities.people.Activity$Builder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, eu.cassandra.sim.SimulationParams);
  public eu.cassandra.sim.entities.people.Activity$Builder startTime(java.lang.String, eu.cassandra.sim.math.ProbabilityDistribution);
  public eu.cassandra.sim.entities.people.Activity$Builder shiftable(java.lang.String, java.lang.Boolean);
  public eu.cassandra.sim.entities.people.Activity$Builder duration(java.lang.String, eu.cassandra.sim.math.ProbabilityDistribution);
  public eu.cassandra.sim.entities.people.Activity$Builder times(java.lang.String, eu.cassandra.sim.math.ProbabilityDistribution);
  public eu.cassandra.sim.entities.people.Activity build();
  static java.lang.String access$100(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.lang.String access$200(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.lang.String access$300(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.lang.String access$400(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.util.TreeMap access$500(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.util.TreeMap access$600(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.util.TreeMap access$700(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.util.TreeMap access$800(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.util.TreeMap access$900(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.util.TreeMap access$1000(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.util.TreeMap access$1100(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.util.TreeMap access$1200(eu.cassandra.sim.entities.people.Activity$Builder);
  static java.util.TreeMap access$1300(eu.cassandra.sim.entities.people.Activity$Builder);
  static eu.cassandra.sim.SimulationParams access$1400(eu.cassandra.sim.entities.people.Activity$Builder);
}
Compiled from "Person.java"
public class eu.cassandra.sim.entities.people.Person extends eu.cassandra.sim.entities.Entity {
  public void addActivity(eu.cassandra.sim.entities.people.Activity);
  public void updateDailySchedule(int, java.util.concurrent.PriorityBlockingQueue<eu.cassandra.sim.Event>, eu.cassandra.sim.PricingPolicy, eu.cassandra.sim.PricingPolicy, java.lang.String, eu.cassandra.sim.utilities.ORNG);
  public eu.cassandra.sim.entities.installations.Installation getInstallation();
  public java.util.Vector<eu.cassandra.sim.entities.people.Activity> getActivities();
  public double getAwareness();
  public void setAwareness(double);
  public double getSensitivity();
  public void setSensitivity(double);
  eu.cassandra.sim.entities.people.Person(eu.cassandra.sim.entities.people.Person$Builder, eu.cassandra.sim.entities.people.Person$1);
}
Compiled from "Person.java"
class eu.cassandra.sim.entities.people.Person$1 {
}
Compiled from "Person.java"
public class eu.cassandra.sim.entities.people.Person$Builder {
  public eu.cassandra.sim.entities.people.Person$Builder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, eu.cassandra.sim.entities.installations.Installation, double, double);
  public eu.cassandra.sim.entities.people.Person build();
  static java.lang.String access$100(eu.cassandra.sim.entities.people.Person$Builder);
  static java.lang.String access$200(eu.cassandra.sim.entities.people.Person$Builder);
  static java.lang.String access$300(eu.cassandra.sim.entities.people.Person$Builder);
  static java.lang.String access$400(eu.cassandra.sim.entities.people.Person$Builder);
  static double access$500(eu.cassandra.sim.entities.people.Person$Builder);
  static double access$600(eu.cassandra.sim.entities.people.Person$Builder);
  static eu.cassandra.sim.entities.installations.Installation access$700(eu.cassandra.sim.entities.people.Person$Builder);
  static java.util.Vector access$800(eu.cassandra.sim.entities.people.Person$Builder);
}
Compiled from "Gaussian.java"
public class eu.cassandra.sim.math.Gaussian implements eu.cassandra.sim.math.ProbabilityDistribution {
  protected double mean;
  protected double sigma;
  protected int numberOfBins;
  protected double precomputeFrom;
  protected double precomputeTo;
  protected double[] histogram;
  protected boolean precomputed;
  protected static double bigPhi(double, double, double);
  public eu.cassandra.sim.math.Gaussian(double, double, boolean);
  public eu.cassandra.sim.math.Gaussian(eu.cassandra.sim.math.Gaussian);
  public java.lang.String getDescription();
  public java.lang.String getType();
  public int getNumberOfParameters();
  public double getParameter(int);
  public void setParameter(int, double);
  public void precompute(double, double, int);
  public double getProbability(double);
  public double getPrecomputedProbability(double);
  public int getPrecomputedBin(double);
  public void status();
  public double[] getHistogram();
  public double getProbabilityGreater(int);
}
Compiled from "GaussianMixtureModels.java"
public class eu.cassandra.sim.math.GaussianMixtureModels implements eu.cassandra.sim.math.ProbabilityDistribution {
  protected double[] pi;
  protected eu.cassandra.sim.math.Gaussian[] gaussians;
  protected int numberOfBins;
  protected double precomputeFrom;
  protected double precomputeTo;
  protected double[] histogram;
  protected boolean precomputed;
  public java.lang.String getType();
  public eu.cassandra.sim.math.GaussianMixtureModels(int, double[], double[], double[], boolean);
  public eu.cassandra.sim.math.GaussianMixtureModels(eu.cassandra.sim.math.GaussianMixtureModels);
  public java.lang.String getDescription();
  public void precompute(double, double, int);
  public double getProbability(double);
  public double getPrecomputedProbability(double);
  public int getPrecomputedBin(double);
  public double[] getHistogram();
  public double getProbabilityGreater(int);
  public double getParameter(int);
  public void setParameter(int, double);
  public int getNumberOfParameters();
  public void status();
}
Compiled from "Histogram.java"
public class eu.cassandra.sim.math.Histogram implements eu.cassandra.sim.math.ProbabilityDistribution {
  protected int numberOfBins;
  protected double precomputeFrom;
  protected double precomputeTo;
  protected double[] histogram;
  protected boolean precomputed;
  public eu.cassandra.sim.math.Histogram(int);
  public java.lang.String getType();
  public eu.cassandra.sim.math.Histogram(double[]);
  public eu.cassandra.sim.math.Histogram(eu.cassandra.sim.math.Histogram);
  public java.lang.String getDescription();
  public int getNumberOfParameters();
  public double getParameter(int);
  public void setParameter(int, double);
  public void precompute(double, double, int);
  public double getProbability(double);
  public double getPrecomputedProbability(double);
  public int getPrecomputedBin(double);
  public double[] getHistogram();
  public double getProbabilityGreater(int);
  public void status();
}
Compiled from "ProbabilityDistribution.java"
public interface eu.cassandra.sim.math.ProbabilityDistribution {
  public abstract java.lang.String getDescription();
  public abstract java.lang.String getType();
  public abstract int getNumberOfParameters();
  public abstract double getParameter(int);
  public abstract void setParameter(int, double);
  public abstract void precompute(double, double, int);
  public abstract double getProbability(double);
  public abstract double getProbabilityGreater(int);
  public abstract double getPrecomputedProbability(double);
  public abstract int getPrecomputedBin(double);
  public abstract double[] getHistogram();
  public abstract void status();
}
Compiled from "Uniform.java"
public class eu.cassandra.sim.math.Uniform implements eu.cassandra.sim.math.ProbabilityDistribution {
  protected boolean precomputed;
  protected int numberOfBins;
  protected double precomputeFrom;
  protected double precomputeTo;
  protected double[] histogram;
  public eu.cassandra.sim.math.Uniform(double, double, boolean);
  public eu.cassandra.sim.math.Uniform(eu.cassandra.sim.math.Uniform);
  public java.lang.String getType();
  public java.lang.String getDescription();
  public int getNumberOfParameters();
  public double getParameter(int);
  public void setParameter(int, double);
  public double getProbability(double);
  public double getPrecomputedProbability(double);
  public int getPrecomputedBin(double);
  public double[] getHistogram();
  public double[] getGreaterProbability();
  public void status();
  public java.lang.String getName();
  public double getProbabilityGreater(int);
  public void precompute(double, double, int);
  public void precompute(int, int, int);
}
Compiled from "Incentive.java"
public class eu.cassandra.sim.math.response.Incentive {
  public eu.cassandra.sim.math.response.Incentive(int, int, double, double, double, double);
  public int getStartMinute();
  public int getEndMinute();
  public double getDifference();
  public boolean isPenalty();
  public double getBeforeDifference();
  public double getAfterDifference();
  public double getBase();
  public double getPrice();
  public void status();
}
Compiled from "IncentiveVector.java"
public class eu.cassandra.sim.math.response.IncentiveVector {
  java.util.ArrayList<eu.cassandra.sim.math.response.Incentive> incentives;
  int numberOfPenalties;
  int numberOfRewards;
  int indexOfLargerPenalty;
  int indexOfLargerReward;
  public eu.cassandra.sim.math.response.IncentiveVector(double[], double[]);
  public java.util.ArrayList<eu.cassandra.sim.math.response.Incentive> getIncentives();
}
Compiled from "Pricing.java"
public class eu.cassandra.sim.math.response.Pricing {
  public eu.cassandra.sim.math.response.Pricing(int, int, double, double, java.lang.String);
  public int getStartMinute();
  public int getEndMinute();
  public double getPreviousPrice();
  public double getCurrentPrice();
  public java.lang.String getType();
  public double getGainRatio();
  public double getLossRatio();
  public void status();
}
Compiled from "PricingVector.java"
public class eu.cassandra.sim.math.response.PricingVector {
  java.util.ArrayList<eu.cassandra.sim.math.response.Pricing> pricings;
  java.util.ArrayList<java.lang.Integer> penalties;
  java.util.ArrayList<java.lang.Integer> rewards;
  java.util.ArrayList<java.lang.Integer> bases;
  java.util.ArrayList<java.lang.Integer> indexOfCheapest;
  public eu.cassandra.sim.math.response.PricingVector(double[], double[]);
  public java.util.ArrayList<eu.cassandra.sim.math.response.Pricing> getPricings();
  public java.util.ArrayList<java.lang.Integer> getPenalties();
  public java.util.ArrayList<java.lang.Integer> getRewards();
  public java.util.ArrayList<java.lang.Integer> getBases();
  public int getNumberOfPenalties();
  public int getNumberOfRewards();
  public int getNumberOfBases();
  public eu.cassandra.sim.math.response.Pricing getPricings(int);
  public java.util.ArrayList<java.lang.Integer> getCheapest();
}
Compiled from "Response.java"
public class eu.cassandra.sim.math.response.Response {
  public static java.util.Comparator<eu.cassandra.sim.math.response.Pricing> comp;
  public eu.cassandra.sim.math.response.Response();
  public static eu.cassandra.sim.math.ProbabilityDistribution respond(eu.cassandra.sim.math.ProbabilityDistribution, eu.cassandra.sim.PricingPolicy, eu.cassandra.sim.PricingPolicy, double, double, java.lang.String);
  static {};
}
Compiled from "Response.java"
final class eu.cassandra.sim.math.response.Response$1 implements java.util.Comparator<eu.cassandra.sim.math.response.Pricing> {
  eu.cassandra.sim.math.response.Response$1();
  public int compare(eu.cassandra.sim.math.response.Pricing, eu.cassandra.sim.math.response.Pricing);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "ConsumptionModelsLibrary.java"
public class eu.cassandra.sim.model_library.ConsumptionModelsLibrary {
  public eu.cassandra.sim.model_library.ConsumptionModelsLibrary();
  public static eu.cassandra.sim.entities.appliances.ConsumptionModel getConsumptionModelForWashingMachine(java.lang.String);
  public static eu.cassandra.sim.entities.appliances.ConsumptionModel getConsumptionModelForLighting(java.lang.String);
  public static eu.cassandra.sim.entities.appliances.ConsumptionModel getConsumptionModelForVacuumCleaner1(java.lang.String);
  public static eu.cassandra.sim.entities.appliances.ConsumptionModel getConsumptionModelForVacuumCleaner2(java.lang.String);
  public static eu.cassandra.sim.entities.appliances.ConsumptionModel getConsumptionModelForWaterHeater(java.lang.String);
  public static void main(java.lang.String[]);
}
Compiled from "DistributionsLibrary.java"
public class eu.cassandra.sim.model_library.DistributionsLibrary {
  static double[] startTimeHistForLighting;
  static double[] startTimeHistForCleaning;
  public eu.cassandra.sim.model_library.DistributionsLibrary();
  public static double[] getStartTimeHistForLighting();
  public static double[] getStartTimeHistForCleaning();
  static {};
}
Compiled from "PricingPoliciesLibrary.java"
public class eu.cassandra.sim.model_library.PricingPoliciesLibrary {
  public eu.cassandra.sim.model_library.PricingPoliciesLibrary();
  public static eu.cassandra.sim.PricingPolicy getDefaultPricingPolicy();
  public static eu.cassandra.sim.PricingPolicy getAllInclusivePricingPolicy();
  public static eu.cassandra.sim.PricingPolicy getScalarEnergyPricingPolicy();
  public static eu.cassandra.sim.PricingPolicy getEnergyPowerPricingPolicy();
  public static eu.cassandra.sim.PricingPolicy getTOUPricingPolicy();
  public static eu.cassandra.sim.PricingPolicy getScalarEnergyPricingTimeZonesPolicy();
}
Compiled from "Constants.java"
public class eu.cassandra.sim.utilities.Constants {
  public static final int SHIFTING_WINDOW_IN_MINUTES;
  public static final int MIN_IN_HOUR;
  public static final int MINUTES_PER_DAY;
  public static final int MIN_IN_DAY;
  public static final double MINUTE_HOUR_RATIO;
  public static final int MU;
  public static final int SIGMA;
  public static final java.lang.String AUTHORIZATION_FAIL;
  public eu.cassandra.sim.utilities.Constants();
}
Compiled from "DBConn.java"
public class eu.cassandra.sim.utilities.DBConn {
  public static com.mongodb.DB getConn();
  public static com.mongodb.DB getConn(java.lang.String);
  static {};
}
Compiled from "DBResults.java"
public interface eu.cassandra.sim.utilities.DBResults {
  public static final java.lang.String COL_APPRESULTS;
  public static final java.lang.String COL_ACTRESULTS_EXP;
  public static final java.lang.String COL_INSTRESULTS;
  public static final java.lang.String COL_INSTRESULTS_EXP;
  public static final java.lang.String COL_INSTRESULTS_HOURLY;
  public static final java.lang.String COL_INSTRESULTS_HOURLY_EN;
  public static final java.lang.String COL_AGGRRESULTS;
  public static final java.lang.String COL_AGGRRESULTS_EXP;
  public static final java.lang.String COL_AGGRRESULTS_HOURLY;
  public static final java.lang.String COL_AGGRRESULTS_HOURLY_EN;
  public static final java.lang.String COL_INSTKPIS;
  public static final java.lang.String COL_APPKPIS;
  public static final java.lang.String COL_ACTKPIS;
  public static final java.lang.String COL_AGGRKPIS;
  public static final java.lang.String AGGR;
  public abstract void createTablesAndIndexes();
  public abstract void addKPIs(java.lang.String, double, double, double, double, double);
  public abstract java.util.HashMap<java.lang.String, java.lang.Double> getKPIs(java.lang.String);
  public abstract void addAppKPIs(java.lang.String, double, double, double, double, double);
  public abstract java.util.HashMap<java.lang.String, java.lang.Double> getAppKPIs(java.lang.String);
  public abstract void addActKPIs(java.lang.String, double, double, double, double, double);
  public abstract java.util.HashMap<java.lang.String, java.lang.Double> getActKPIs(java.lang.String);
  public abstract void addTickResultForInstallation(int, java.lang.String, double, double, java.lang.String);
  public abstract void addExpectedPowerTick(int, java.lang.String, double, java.lang.String);
  public abstract void addAggregatedTickResult(int, double, double, java.lang.String);
}
Compiled from "DerbyResults.java"
public class eu.cassandra.sim.utilities.DerbyResults implements eu.cassandra.sim.utilities.DBResults {
  public eu.cassandra.sim.utilities.DerbyResults(java.lang.String);
  public void createTablesAndIndexes();
  public void addKPIs(java.lang.String, double, double, double, double, double);
  public void addAppKPIs(java.lang.String, double, double, double, double, double);
  public void addActKPIs(java.lang.String, double, double, double, double, double);
  public void addTickResultForInstallation(int, java.lang.String, double, double, java.lang.String);
  public void addExpectedPowerTick(int, java.lang.String, double, java.lang.String);
  public java.sql.ResultSet getTickResultForInstallation(int, java.lang.String, java.lang.String);
  public java.sql.ResultSet getExpectedPowerTickResultForInstallation(int, java.lang.String, java.lang.String);
  public void addAggregatedTickResult(int, double, double, java.lang.String);
  public java.util.HashMap<java.lang.String, java.lang.Double> getKPIs(java.lang.String);
  public java.util.HashMap<java.lang.String, java.lang.Double> getAppKPIs(java.lang.String);
  public java.util.HashMap<java.lang.String, java.lang.Double> getActKPIs(java.lang.String);
}
Compiled from "MongoResults.java"
public class eu.cassandra.sim.utilities.MongoResults implements eu.cassandra.sim.utilities.DBResults {
  public eu.cassandra.sim.utilities.MongoResults(java.lang.String);
  public void createTablesAndIndexes();
  public void addKPIs(java.lang.String, double, double, double, double, double);
  public java.util.HashMap<java.lang.String, java.lang.Double> getKPIs(java.lang.String);
  public void addAppKPIs(java.lang.String, double, double, double, double, double);
  public java.util.HashMap<java.lang.String, java.lang.Double> getAppKPIs(java.lang.String);
  public void addActKPIs(java.lang.String, double, double, double, double, double);
  public java.util.HashMap<java.lang.String, java.lang.Double> getActKPIs(java.lang.String);
  public void addTickResultForInstallation(int, java.lang.String, double, double, java.lang.String);
  public void addExpectedPowerTick(int, java.lang.String, double, java.lang.String);
  public com.mongodb.DBObject getTickResultForInstallation(int, java.lang.String, java.lang.String);
  public com.mongodb.DBObject getExpectedPowerTickResultForInstallation(int, java.lang.String, java.lang.String);
  public void addAggregatedTickResult(int, double, double, java.lang.String);
}
Compiled from "ORNG.java"
public class eu.cassandra.sim.utilities.ORNG {
  public eu.cassandra.sim.utilities.ORNG();
  public eu.cassandra.sim.utilities.ORNG(long);
  public void setSeed(long);
  public int nextInt();
  public int nextInt(int);
  public long nextLong();
  public double nextDouble();
  public float nextFloat();
}
Compiled from "SetupFileParser.java"
public class eu.cassandra.sim.utilities.SetupFileParser {
  public java.util.Properties generalProps;
  public java.util.Properties propPricing;
  public java.util.Properties propPricingBaseline;
  public java.util.Properties propSimulation;
  public java.util.Properties propScenario;
  public java.util.Vector<java.util.Properties> propInstallations;
  public java.util.Vector<java.util.Properties> propPeople;
  public java.util.Vector<java.util.Properties> propConsModels;
  public java.util.Vector<java.util.Properties> propAppliances;
  public java.util.Vector<java.util.Properties> propActivities;
  public java.util.Vector<java.util.Properties> propActModels;
  public java.util.Properties demographics;
  java.util.Hashtable<java.lang.String, java.lang.String[]> propRequired;
  boolean foundSimulationSegment;
  boolean foundScenarioSegment;
  boolean foundPricingSegment;
  boolean foundPricingBaselineSegment;
  public eu.cassandra.sim.utilities.SetupFileParser();
  public void parseFileForProperties(java.lang.String);
}
Compiled from "Utils.java"
public class eu.cassandra.sim.utilities.Utils {
  public eu.cassandra.sim.utilities.Utils();
  public static java.lang.String stackTraceToString(java.lang.StackTraceElement[]);
  public static java.lang.String hashcode(java.lang.String);
  public static java.lang.String readFile(java.lang.String) throws java.io.IOException;
}
