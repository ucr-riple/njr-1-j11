Compiled from "IBsNode.java"
public interface es.uc3m.eda.bstree.IBsNode<K extends java.lang.Comparable<K>, E> {
  public abstract K getKey();
  public abstract E getElem();
  public abstract es.uc3m.eda.bstree.IBsNode<K, E> getLeftNode();
  public abstract es.uc3m.eda.bstree.IBsNode<K, E> getRightNode();
}
Compiled from "IBsTree.java"
public interface es.uc3m.eda.bstree.IBsTree<K extends java.lang.Comparable<K>, E> {
  public abstract es.uc3m.eda.bstree.IBsNode<K, E> getRootNode();
  public abstract boolean isEmpty();
  public abstract void add(K, E);
  public abstract void remove(K);
  public abstract boolean containsKey(K);
  public abstract E searchKey(K);
}
Compiled from "AvlNode.java"
public class es.uc3m.eda.bstree.bs.AvlNode<K extends java.lang.Comparable<K>, E> extends es.uc3m.eda.bstree.bs.BsNode<K, E> {
  int height;
  public es.uc3m.eda.bstree.bs.AvlNode(K, E);
  public es.uc3m.eda.bstree.bs.AvlNode<K, E> getLeftNode();
  public es.uc3m.eda.bstree.bs.AvlNode<K, E> getRightNode();
  void updateHeight();
  public es.uc3m.eda.bstree.bs.BsNode getRightNode();
  public es.uc3m.eda.bstree.bs.BsNode getLeftNode();
  public es.uc3m.eda.bstree.IBsNode getRightNode();
  public es.uc3m.eda.bstree.IBsNode getLeftNode();
}
Compiled from "AvlTree.java"
public class es.uc3m.eda.bstree.bs.AvlTree<K extends java.lang.Comparable<K>, E> extends es.uc3m.eda.bstree.bs.BsTree<K, E> {
  public es.uc3m.eda.bstree.bs.AvlTree();
  public es.uc3m.eda.bstree.bs.AvlNode<K, E> getRootNode();
  public void add(K, E);
  public es.uc3m.eda.bstree.bs.BsNode getRootNode();
  public es.uc3m.eda.bstree.IBsNode getRootNode();
}
Compiled from "BsNode.java"
public class es.uc3m.eda.bstree.bs.BsNode<K extends java.lang.Comparable<K>, E> implements es.uc3m.eda.bstree.IBsNode<K, E> {
  es.uc3m.eda.bstree.bs.BsNode<K, E> leftNode;
  es.uc3m.eda.bstree.bs.BsNode<K, E> rightNode;
  public K getKey();
  public E getElem();
  public es.uc3m.eda.bstree.bs.BsNode<K, E> getLeftNode();
  public es.uc3m.eda.bstree.bs.BsNode<K, E> getRightNode();
  public es.uc3m.eda.bstree.bs.BsNode(K, E);
  public java.lang.String toString();
  public es.uc3m.eda.bstree.IBsNode getRightNode();
  public es.uc3m.eda.bstree.IBsNode getLeftNode();
}
Compiled from "BsTree.java"
public class es.uc3m.eda.bstree.bs.BsTree<K extends java.lang.Comparable<K>, E> implements es.uc3m.eda.bstree.IBsTree<K, E> {
  es.uc3m.eda.bstree.bs.BsNode<K, E> rootNode;
  static boolean recursive;
  public es.uc3m.eda.bstree.bs.BsTree();
  public es.uc3m.eda.bstree.bs.BsNode<K, E> getRootNode();
  public boolean isEmpty();
  public void add(K, E);
  public void remove(K);
  public boolean containsKey(K);
  public E searchKey(K);
  public void show();
  public java.lang.String toString();
  public java.lang.String toStringRec(es.uc3m.eda.bstree.bs.BsNode<K, E>);
  public es.uc3m.eda.bstree.IBsNode getRootNode();
  static {};
}
Compiled from "IList.java"
public interface es.uc3m.eda.list.IList<E> {
  public abstract void addFirst(E);
  public abstract void addLast(E);
  public abstract void insertAt(int, E);
  public abstract boolean isEmpty();
  public abstract boolean contains(E);
  public abstract int getSize();
  public abstract int getIndexOf(E);
  public abstract E getFirst();
  public abstract E getLast();
  public abstract E getAt(int);
  public abstract void removeFirst();
  public abstract void removeLast();
  public abstract void removeAll(E);
  public abstract void removeAt(int);
  public abstract es.uc3m.eda.list.IListIterator<E> createIterator();
}
Compiled from "IListIterator.java"
public interface es.uc3m.eda.list.IListIterator<E> {
  public abstract boolean isValid();
  public abstract E getCurrentElem();
  public abstract void moveNext();
}
Compiled from "IQueue.java"
public interface es.uc3m.eda.list.IQueue<E> {
  public abstract boolean isEmpty();
  public abstract void enqueue(E);
  public abstract E dequeue();
  public abstract E front();
}
Compiled from "IStack.java"
public interface es.uc3m.eda.list.IStack<E> {
  public abstract boolean isEmpty();
  public abstract void push(E);
  public abstract E pop();
  public abstract E top();
}
Compiled from "AList.java"
public class es.uc3m.eda.list.arraylist.AList<E> implements es.uc3m.eda.list.IList<E> {
  E[] array;
  public es.uc3m.eda.list.arraylist.AList();
  public void addFirst(E);
  public void addLast(E);
  public void insertAt(int, E);
  public int getSize();
  public boolean isEmpty();
  public boolean contains(E);
  public int getIndexOf(E);
  public E getFirst();
  public E getLast();
  public E getAt(int);
  public void removeFirst();
  public void removeLast();
  public void removeAt(int);
  public void removeAll(E);
  public es.uc3m.eda.list.arraylist.AListIterator<E> createIterator();
  public java.lang.String toString();
  public es.uc3m.eda.list.IListIterator createIterator();
}
Compiled from "AListIterator.java"
public class es.uc3m.eda.list.arraylist.AListIterator<E> implements es.uc3m.eda.list.IListIterator<E> {
  es.uc3m.eda.list.arraylist.AList<E> list;
  int currentIndex;
  public es.uc3m.eda.list.arraylist.AListIterator(es.uc3m.eda.list.arraylist.AList<E>);
  public boolean isValid();
  public E getCurrentElem();
  public void moveNext();
  public static void main(java.lang.String[]);
}
Compiled from "DList.java"
public class es.uc3m.eda.list.doublelink.DList<E> implements es.uc3m.eda.list.IList<E>, es.uc3m.eda.list.doublelink.IDList<E> {
  es.uc3m.eda.list.doublelink.DNode<E> header;
  es.uc3m.eda.list.doublelink.DNode<E> trailer;
  public es.uc3m.eda.list.doublelink.DList();
  public void addFirst(E);
  public void addLast(E);
  public void insertAt(int, E);
  public boolean isEmpty();
  public boolean contains(E);
  public int getIndexOf(E);
  public void removeFirst();
  public void removeLast();
  public void removeAll(E);
  public void removeAt(int);
  public int getSize();
  public E getFirst();
  public E getLast();
  public E getAt(int);
  public es.uc3m.eda.list.doublelink.DListIterator<E> createIterator();
  public es.uc3m.eda.list.doublelink.DListIterator<E> createIterator(boolean);
  public java.lang.String toString();
  public es.uc3m.eda.list.doublelink.DNode<E> getFirstNode();
  public es.uc3m.eda.list.doublelink.DNode<E> getLastNode();
  public es.uc3m.eda.list.doublelink.DNode<E> getHeader();
  public es.uc3m.eda.list.doublelink.DNode<E> getTrailer();
  public static void main(java.lang.String[]);
  public es.uc3m.eda.list.IListIterator createIterator();
  public es.uc3m.eda.list.doublelink.IDListIterator createIterator(boolean);
  public es.uc3m.eda.list.doublelink.IDListIterator createIterator();
}
Compiled from "DListIterator.java"
public class es.uc3m.eda.list.doublelink.DListIterator<E> implements es.uc3m.eda.list.doublelink.IDListIterator<E> {
  es.uc3m.eda.list.doublelink.IDList<E> list;
  boolean reverse;
  es.uc3m.eda.list.doublelink.DNode<E> currentNode;
  public es.uc3m.eda.list.doublelink.DListIterator(es.uc3m.eda.list.doublelink.IDList<E>);
  public es.uc3m.eda.list.doublelink.DListIterator(es.uc3m.eda.list.doublelink.IDList<E>, boolean);
  public boolean isValid();
  public es.uc3m.eda.list.doublelink.DNode<E> getCurrentNode();
  public E getCurrentElem();
  public void moveNext();
  public void movePrevious();
}
Compiled from "DNode.java"
public class es.uc3m.eda.list.doublelink.DNode<E> {
  es.uc3m.eda.list.doublelink.DNode<E> previousNode;
  es.uc3m.eda.list.doublelink.DNode<E> nextNode;
  E elem;
  public es.uc3m.eda.list.doublelink.DNode<E> getPreviousNode();
  public es.uc3m.eda.list.doublelink.DNode<E> getNextNode();
  public E getElement();
  public es.uc3m.eda.list.doublelink.DNode(E);
}
Compiled from "IDList.java"
public interface es.uc3m.eda.list.doublelink.IDList<E> {
  public abstract es.uc3m.eda.list.doublelink.IDListIterator<E> createIterator();
  public abstract es.uc3m.eda.list.doublelink.IDListIterator<E> createIterator(boolean);
  public abstract es.uc3m.eda.list.doublelink.DNode<E> getFirstNode();
  public abstract es.uc3m.eda.list.doublelink.DNode<E> getLastNode();
  public abstract es.uc3m.eda.list.doublelink.DNode<E> getHeader();
  public abstract es.uc3m.eda.list.doublelink.DNode<E> getTrailer();
}
Compiled from "IDListIterator.java"
public interface es.uc3m.eda.list.doublelink.IDListIterator<E> extends es.uc3m.eda.list.IListIterator<E> {
  public abstract es.uc3m.eda.list.doublelink.DNode<E> getCurrentNode();
  public abstract void movePrevious();
}
Compiled from "ISList.java"
public interface es.uc3m.eda.list.singlelink.ISList<E> {
  public abstract es.uc3m.eda.list.singlelink.ISListIterator<E> createIterator();
  public abstract es.uc3m.eda.list.singlelink.SNode<E> getFirstNode();
}
Compiled from "ISListIterator.java"
public interface es.uc3m.eda.list.singlelink.ISListIterator<E> extends es.uc3m.eda.list.IListIterator<E> {
  public abstract es.uc3m.eda.list.singlelink.SNode<E> getCurrentNode();
}
Compiled from "SList.java"
public class es.uc3m.eda.list.singlelink.SList<E> implements es.uc3m.eda.list.IList<E>, es.uc3m.eda.list.singlelink.ISList<E> {
  es.uc3m.eda.list.singlelink.SNode<E> firstNode;
  public es.uc3m.eda.list.singlelink.SList();
  public void addFirst(E);
  public void addLast(E);
  public void insertAt(int, E);
  public boolean isEmpty();
  public boolean contains(E);
  public void removeFirst();
  public void removeLast();
  public void removeAll(E);
  public void removeAt(int);
  public int getSize();
  public int getIndexOf(E);
  public E getFirst();
  public E getLast();
  public E getAt(int);
  public es.uc3m.eda.list.singlelink.SListIterator<E> createIterator();
  public java.lang.String toString();
  public es.uc3m.eda.list.singlelink.SNode<E> getFirstNode();
  public static void main(java.lang.String[]);
  public es.uc3m.eda.list.IListIterator createIterator();
  public es.uc3m.eda.list.singlelink.ISListIterator createIterator();
}
Compiled from "SListIterator.java"
public class es.uc3m.eda.list.singlelink.SListIterator<E> implements es.uc3m.eda.list.singlelink.ISListIterator<E> {
  es.uc3m.eda.list.singlelink.ISList<E> list;
  es.uc3m.eda.list.singlelink.SNode<E> currentNode;
  public es.uc3m.eda.list.singlelink.SListIterator(es.uc3m.eda.list.singlelink.ISList<E>);
  public boolean isValid();
  public es.uc3m.eda.list.singlelink.SNode<E> getCurrentNode();
  public E getCurrentElem();
  public void moveNext();
}
Compiled from "SNode.java"
public class es.uc3m.eda.list.singlelink.SNode<E> {
  es.uc3m.eda.list.singlelink.SNode<E> nextNode;
  E elem;
  public es.uc3m.eda.list.singlelink.SNode<E> getNextNode();
  public E getElement();
  public es.uc3m.eda.list.singlelink.SNode(E);
}
Compiled from "SQueue.java"
public class es.uc3m.eda.list.singlelink.SQueue<E> implements es.uc3m.eda.list.IQueue<E> {
  public es.uc3m.eda.list.singlelink.SQueue();
  public boolean isEmpty();
  public void enqueue(E);
  public E dequeue();
  public E front();
  public java.lang.String toString();
  public es.uc3m.eda.list.singlelink.SNode<E> getFrontNode();
  public es.uc3m.eda.list.singlelink.SNode<E> getTailNode();
}
Compiled from "SStack.java"
public class es.uc3m.eda.list.singlelink.SStack<E> implements es.uc3m.eda.list.IStack<E> {
  es.uc3m.eda.list.singlelink.SNode<E> topNode;
  public es.uc3m.eda.list.singlelink.SStack();
  public boolean isEmpty();
  public void push(E);
  public E pop();
  public E top();
  public java.lang.String toString();
  public es.uc3m.eda.list.singlelink.SNode<E> getTopNode();
}
Compiled from "BSTNode.java"
public class es.uc3m.eda.tree.BSTNode<K extends java.lang.Comparable<K>, E> implements es.uc3m.eda.tree.IBSTNode<K, E> {
  K key;
  E element;
  es.uc3m.eda.tree.BSTNode<K, E> parent;
  es.uc3m.eda.tree.BSTNode<K, E> leftChild;
  es.uc3m.eda.tree.BSTNode<K, E> rightChild;
  public K getKey();
  public E getElement();
  public es.uc3m.eda.tree.BSTNode<K, E> getParent();
  public es.uc3m.eda.tree.BSTNode<K, E> getLeftChild();
  public es.uc3m.eda.tree.BSTNode<K, E> getRightChild();
  public es.uc3m.eda.tree.BSTNode(K, E);
  public boolean hasLeftChild();
  public boolean hasRightChild();
  public boolean isInternal();
  public boolean isExternal();
  public es.uc3m.eda.tree.IBSTNode<K, E> getRoot();
  public boolean isRoot();
  public int getSize();
  int getSize(es.uc3m.eda.tree.BSTNode<K, E>);
  public int getHeight();
  static <K extends java.lang.Comparable<K>, E> int getHeight(es.uc3m.eda.tree.BSTNode<K, E>);
  public int getDepth();
  static <K extends java.lang.Comparable<K>, E> int getDepth(es.uc3m.eda.tree.BSTNode<K, E>);
  public es.uc3m.eda.list.IList<es.uc3m.eda.tree.IBSTNode<K, E>> getChildren();
  public es.uc3m.eda.list.IList<E> getPreorder();
  static <K extends java.lang.Comparable<K>, E> void getPreorder(es.uc3m.eda.tree.BSTNode<K, E>, es.uc3m.eda.list.IList<E>);
  static <K extends java.lang.Comparable<K>, E> E getElementByKey(es.uc3m.eda.tree.BSTNode<K, E>, K);
  static <K extends java.lang.Comparable<K>, E> boolean containsKey(es.uc3m.eda.tree.BSTNode<K, E>, K);
  static <K extends java.lang.Comparable<K>, E> boolean containsElement(es.uc3m.eda.tree.BSTNode<K, E>, E);
  public es.uc3m.eda.tree.IBSTNode getRightChild();
  public es.uc3m.eda.tree.IBSTNode getLeftChild();
  public es.uc3m.eda.tree.IBSTNode getParent();
}
Compiled from "BSTree.java"
public class es.uc3m.eda.tree.BSTree<K extends java.lang.Comparable<K>, E> implements es.uc3m.eda.tree.IBSTree<K, E> {
  es.uc3m.eda.tree.BSTNode<K, E> root;
  public es.uc3m.eda.tree.BSTree();
  public es.uc3m.eda.tree.BSTree(es.uc3m.eda.tree.BSTNode<K, E>);
  public es.uc3m.eda.tree.BSTNode<K, E> getRoot();
  public void insert(K, E);
  public E getElementByKey(K);
  public void remove(K);
  public es.uc3m.eda.list.IList<E> getPreorder();
  public boolean containsKey(K);
  public boolean containsElement(E);
  public static void main(java.lang.String[]);
  public es.uc3m.eda.tree.IBSTNode getRoot();
}
Compiled from "IBSTNode.java"
public interface es.uc3m.eda.tree.IBSTNode<K extends java.lang.Comparable<K>, E> {
  public abstract K getKey();
  public abstract E getElement();
  public abstract es.uc3m.eda.tree.IBSTNode<K, E> getParent();
  public abstract es.uc3m.eda.tree.IBSTNode<K, E> getLeftChild();
  public abstract es.uc3m.eda.tree.IBSTNode<K, E> getRightChild();
  public abstract boolean hasLeftChild();
  public abstract boolean hasRightChild();
  public abstract boolean isInternal();
  public abstract boolean isExternal();
  public abstract es.uc3m.eda.tree.IBSTNode<K, E> getRoot();
  public abstract boolean isRoot();
  public abstract int getSize();
  public abstract int getHeight();
  public abstract int getDepth();
  public abstract es.uc3m.eda.list.IList<es.uc3m.eda.tree.IBSTNode<K, E>> getChildren();
  public abstract es.uc3m.eda.list.IList<E> getPreorder();
}
Compiled from "IBSTree.java"
public interface es.uc3m.eda.tree.IBSTree<K extends java.lang.Comparable<K>, E> {
  public abstract es.uc3m.eda.tree.IBSTNode<K, E> getRoot();
  public abstract void insert(K, E);
  public abstract void remove(K);
  public abstract E getElementByKey(K);
  public abstract es.uc3m.eda.list.IList<E> getPreorder();
  public abstract boolean containsKey(K);
  public abstract boolean containsElement(E);
}
Compiled from "IntegerTree.java"
public class es.uc3m.eda.tree.integertree.IntegerTree extends es.uc3m.eda.tree.BSTree<java.lang.Integer, java.lang.String> {
  public es.uc3m.eda.tree.integertree.IntegerTree();
  public boolean containsKey(int);
  public boolean containsValue(java.lang.String);
  public es.uc3m.eda.list.singlelink.SList<java.lang.Integer> getKeyRange(int, int);
  public es.uc3m.eda.list.singlelink.SList<java.lang.String> getValueRange(java.lang.String, java.lang.String);
  public static void main(java.lang.String[]);
}
Compiled from "BSTreeView.java"
public class es.uc3m.eda.tree.view.BSTreeView extends javax.swing.JPanel implements java.awt.event.ActionListener {
  public es.uc3m.eda.tree.view.BSTreeView(es.uc3m.eda.tree.IBSTree<?, ?>);
  public void actionPerformed(java.awt.event.ActionEvent);
  public void paint(java.awt.Graphics);
  public static void draw(es.uc3m.eda.tree.IBSTree<?, ?>);
}
Compiled from "IAxle.java"
public interface es.uc3m.recordplayer.interfaces.axle.IAxle {
  public abstract void pinOnTurntable(es.uc3m.recordplayer.interfaces.turntable.ITurntable);
  public abstract void unpinFromTurntable();
  public abstract void putRecord(es.uc3m.recordplayer.logic.Side);
  public abstract void dropRecord();
  public abstract boolean isPinned();
  public abstract boolean isFull();
  public abstract boolean isEmpty();
}
Compiled from "IPlayer.java"
public interface es.uc3m.recordplayer.interfaces.player.IPlayer {
  public abstract boolean isAxlePinned();
  public abstract void pinAxle();
  public abstract void unpinAxle();
  public abstract boolean isAxleEmpty();
  public abstract boolean isAxleFull();
  public abstract boolean isTurntableStarted();
  public abstract void startTurntable();
  public abstract void stopTurntable();
  public abstract void setTurntableRpm();
  public abstract es.uc3m.recordplayer.logic.Rpm getTurntableRpm();
  public abstract void putRecordInAxle(es.uc3m.recordplayer.logic.Side);
  public abstract void dropRecordFromAxle();
  public abstract es.uc3m.eda.list.IList<es.uc3m.recordplayer.logic.Record> removeAllRecordsFromTurntable();
  public abstract boolean isStylusParked();
  public abstract void parkStylus();
  public abstract void unparkStylus();
  public abstract boolean isStylusDropped();
  public abstract void liftStylus();
  public abstract void dropStylus();
  public abstract void setStylusPosition(float);
  public abstract es.uc3m.recordplayer.logic.Record getTopRecord();
  public abstract int getTopSideIndex();
  public abstract es.uc3m.recordplayer.logic.Song getPlayingTrack();
}
Compiled from "IRecordShelf.java"
public interface es.uc3m.recordplayer.interfaces.recordshelf.IRecordShelf {
  public abstract boolean isEmptySlot(int);
  public abstract void putRecordOnSlot(es.uc3m.recordplayer.logic.Record, int);
  public abstract es.uc3m.recordplayer.logic.Record getRecordFromSlot(int);
  public abstract void setLabelOfSlot(es.uc3m.recordplayer.logic.Record, int);
  public abstract es.uc3m.recordplayer.logic.Record getLabelOfSlot(int);
  public abstract int getSize();
}
Compiled from "IRecordStack.java"
public interface es.uc3m.recordplayer.interfaces.recordstack.IRecordStack extends es.uc3m.eda.list.IStack<es.uc3m.recordplayer.logic.Record> {
}
Compiled from "IStylus.java"
public interface es.uc3m.recordplayer.interfaces.stylus.IStylus {
  public abstract boolean isParked();
  public abstract void park();
  public abstract void unpark();
  public abstract boolean isDropped();
  public abstract void lift();
  public abstract void drop();
  public abstract void setPosition(float);
  public abstract float getPosition();
}
Compiled from "ITurntable.java"
public interface es.uc3m.recordplayer.interfaces.turntable.ITurntable {
  public abstract void start();
  public abstract void stop();
  public abstract boolean isStarted();
  public abstract void setRpm();
  public abstract es.uc3m.recordplayer.logic.Rpm getRpm();
  public abstract void putRecord(es.uc3m.recordplayer.logic.Side);
  public abstract es.uc3m.eda.list.IList<es.uc3m.recordplayer.logic.Record> removeRecords();
  public abstract boolean isEmpty();
  public abstract boolean hasAxle();
  public abstract void pinAxle(es.uc3m.recordplayer.interfaces.axle.IAxle);
  public abstract void unpinAxle();
  public abstract es.uc3m.recordplayer.logic.Record getTopRecord();
  public abstract int getTopSideIndex();
}
Compiled from "Axle.java"
public class es.uc3m.recordplayer.logic.Axle implements es.uc3m.recordplayer.interfaces.axle.IAxle {
  public es.uc3m.recordplayer.logic.Axle();
  public void pinOnTurntable(es.uc3m.recordplayer.interfaces.turntable.ITurntable);
  public void unpinFromTurntable();
  public void putRecord(es.uc3m.recordplayer.logic.Side);
  public void dropRecord();
  public boolean isPinned();
  public boolean isFull();
  public boolean isEmpty();
}
Compiled from "Genre.java"
public final class es.uc3m.recordplayer.logic.Genre extends java.lang.Enum<es.uc3m.recordplayer.logic.Genre> {
  public static final es.uc3m.recordplayer.logic.Genre CLASSICAL;
  public static final es.uc3m.recordplayer.logic.Genre POP;
  public static final es.uc3m.recordplayer.logic.Genre ROCK;
  public static final es.uc3m.recordplayer.logic.Genre JAZZ;
  public static final es.uc3m.recordplayer.logic.Genre DANCE;
  public static final es.uc3m.recordplayer.logic.Genre OTHERS;
  public static es.uc3m.recordplayer.logic.Genre[] values();
  public static es.uc3m.recordplayer.logic.Genre valueOf(java.lang.String);
  static {};
}
Compiled from "Performer.java"
public class es.uc3m.recordplayer.logic.Performer {
  public es.uc3m.recordplayer.logic.Performer();
  public es.uc3m.recordplayer.logic.Performer(java.lang.String, es.uc3m.recordplayer.logic.PerformerType);
  public void setName(java.lang.String);
  public void setType(es.uc3m.recordplayer.logic.PerformerType);
  public java.lang.String getName();
  public es.uc3m.recordplayer.logic.PerformerType getType();
  public java.lang.String toString();
}
Compiled from "PerformerType.java"
public final class es.uc3m.recordplayer.logic.PerformerType extends java.lang.Enum<es.uc3m.recordplayer.logic.PerformerType> {
  public static final es.uc3m.recordplayer.logic.PerformerType SOLOIST_MALE;
  public static final es.uc3m.recordplayer.logic.PerformerType SOILOIST_FEMALE;
  public static final es.uc3m.recordplayer.logic.PerformerType GROUP;
  public static final es.uc3m.recordplayer.logic.PerformerType OTHERS;
  public static es.uc3m.recordplayer.logic.PerformerType[] values();
  public static es.uc3m.recordplayer.logic.PerformerType valueOf(java.lang.String);
  static {};
}
Compiled from "Player.java"
public class es.uc3m.recordplayer.logic.Player implements es.uc3m.recordplayer.interfaces.player.IPlayer {
  public es.uc3m.recordplayer.logic.Player();
  public boolean isAxlePinned();
  public void pinAxle();
  public void unpinAxle();
  public boolean isAxleEmpty();
  public boolean isAxleFull();
  public boolean isTurntableStarted();
  public void startTurntable();
  public void stopTurntable();
  public void setTurntableRpm();
  public es.uc3m.recordplayer.logic.Rpm getTurntableRpm();
  public void putRecordInAxle(es.uc3m.recordplayer.logic.Side);
  public void dropRecordFromAxle();
  public es.uc3m.eda.list.IList<es.uc3m.recordplayer.logic.Record> removeAllRecordsFromTurntable();
  public boolean isStylusParked();
  public void parkStylus();
  public void unparkStylus();
  public boolean isStylusDropped();
  public void liftStylus();
  public void dropStylus();
  public void setStylusPosition(float);
  public es.uc3m.recordplayer.logic.Record getTopRecord();
  public int getTopSideIndex();
  public es.uc3m.recordplayer.logic.Song getPlayingTrack();
}
Compiled from "Record.java"
public class es.uc3m.recordplayer.logic.Record {
  public es.uc3m.recordplayer.logic.Record();
  public es.uc3m.recordplayer.logic.Record(es.uc3m.recordplayer.logic.Performer, java.lang.String, int, es.uc3m.recordplayer.logic.Rpm);
  public void setRecordPerformer(es.uc3m.recordplayer.logic.Performer);
  public void setTitle(java.lang.String);
  public void setEditionYear(int);
  public void setRpm(es.uc3m.recordplayer.logic.Rpm);
  public es.uc3m.recordplayer.logic.Side getSide(int);
  public es.uc3m.recordplayer.logic.Performer getRecordPerformer();
  public java.lang.String getTitle();
  public int getEditionYear();
  public es.uc3m.recordplayer.logic.Rpm getRpm();
  public java.lang.String toString();
  public void addTrack(int, java.lang.String, es.uc3m.recordplayer.logic.Genre, int, float, boolean, boolean, boolean);
  public void addTrack(int, java.lang.String, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Performer, int, float, boolean, boolean, boolean);
}
Compiled from "RecordCollection.java"
public class es.uc3m.recordplayer.logic.RecordCollection extends es.uc3m.eda.list.singlelink.SList<es.uc3m.recordplayer.logic.Record> {
  public es.uc3m.recordplayer.logic.RecordCollection();
  public es.uc3m.recordplayer.logic.Record getRecordByTitle(java.lang.String);
  public es.uc3m.eda.list.arraylist.AList<es.uc3m.recordplayer.logic.Record> getRecordsByPerfomer(es.uc3m.recordplayer.logic.Performer);
  public es.uc3m.eda.list.arraylist.AList<es.uc3m.recordplayer.logic.Song> getTracksByGenre(es.uc3m.recordplayer.logic.Genre);
  public es.uc3m.eda.list.arraylist.AList<es.uc3m.recordplayer.logic.Record> getRecordsByTrackTitle(java.lang.String);
  public es.uc3m.recordplayer.logic.Side getSideByTrackTitle(java.lang.String);
}
Compiled from "RecordShelf.java"
public class es.uc3m.recordplayer.logic.RecordShelf implements es.uc3m.recordplayer.interfaces.recordshelf.IRecordShelf {
  public es.uc3m.recordplayer.logic.RecordShelf();
  public es.uc3m.recordplayer.logic.RecordShelf(int);
  public boolean isEmptySlot(int);
  public void putRecordOnSlot(es.uc3m.recordplayer.logic.Record, int);
  public es.uc3m.recordplayer.logic.Record getRecordFromSlot(int);
  public void setLabelOfSlot(es.uc3m.recordplayer.logic.Record, int);
  public es.uc3m.recordplayer.logic.Record getLabelOfSlot(int);
  public int getSize();
}
Compiled from "RecordStack.java"
public class es.uc3m.recordplayer.logic.RecordStack extends es.uc3m.eda.list.singlelink.SStack<es.uc3m.recordplayer.logic.Record> implements es.uc3m.recordplayer.interfaces.recordstack.IRecordStack {
  public es.uc3m.recordplayer.logic.RecordStack();
}
Compiled from "Rpm.java"
public final class es.uc3m.recordplayer.logic.Rpm extends java.lang.Enum<es.uc3m.recordplayer.logic.Rpm> {
  public static final es.uc3m.recordplayer.logic.Rpm SPEED33;
  public static final es.uc3m.recordplayer.logic.Rpm SPEED45;
  public static final es.uc3m.recordplayer.logic.Rpm SPEED72;
  public static es.uc3m.recordplayer.logic.Rpm[] values();
  public static es.uc3m.recordplayer.logic.Rpm valueOf(java.lang.String);
  static {};
}
Compiled from "Side.java"
public class es.uc3m.recordplayer.logic.Side {
  public es.uc3m.recordplayer.logic.Side(es.uc3m.recordplayer.logic.Record, int);
  public int getSideIndex();
  public es.uc3m.eda.list.arraylist.AList<es.uc3m.recordplayer.logic.Song> getSideTracklist();
  public es.uc3m.recordplayer.logic.Record getRecord();
  public void setSide(es.uc3m.eda.list.arraylist.AList<es.uc3m.recordplayer.logic.Song>);
  public float getTotalSideDuration();
  public es.uc3m.recordplayer.logic.Song getSongByTitle(java.lang.String);
  public float getStylusPositionByTrack(java.lang.String);
  public es.uc3m.recordplayer.logic.Song getTrackByStylusPosition(float);
}
Compiled from "Song.java"
public class es.uc3m.recordplayer.logic.Song {
  public es.uc3m.recordplayer.logic.Song();
  public es.uc3m.recordplayer.logic.Song(java.lang.String, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Performer, int, float, boolean, boolean, boolean);
  public void setTitle(java.lang.String);
  public void setGenre(es.uc3m.recordplayer.logic.Genre);
  public void setArtist(es.uc3m.recordplayer.logic.Performer);
  public void setYear(int);
  public void setDuration(float);
  public void setStartPoint(float);
  public void setIsComposed(boolean);
  public void setIsRecorded(boolean);
  public void setIsStudio(boolean);
  public java.lang.String getTitle();
  public es.uc3m.recordplayer.logic.Genre getGenre();
  public es.uc3m.recordplayer.logic.Performer getArtist();
  public int getYear();
  public float getDuration();
  public java.lang.Float getStartPoint();
  public boolean isComposed();
  public boolean isRecorded();
  public boolean isStudio();
  public java.lang.String toString();
}
Compiled from "Stylus.java"
public class es.uc3m.recordplayer.logic.Stylus implements es.uc3m.recordplayer.interfaces.stylus.IStylus {
  public es.uc3m.recordplayer.logic.Stylus();
  public boolean isParked();
  public void park();
  public void unpark();
  public boolean isDropped();
  public void lift();
  public void drop();
  public void setPosition(float);
  public float getPosition();
}
Compiled from "TrackCollection.java"
public class es.uc3m.recordplayer.logic.TrackCollection extends es.uc3m.eda.list.singlelink.SList<es.uc3m.recordplayer.logic.Song> {
  public es.uc3m.recordplayer.logic.TrackCollection();
  public es.uc3m.recordplayer.logic.TrackCollection(es.uc3m.recordplayer.logic.RecordCollection);
  public es.uc3m.recordplayer.logic.TrackCollection getTrackCollectionByPerformer(java.lang.String);
  public void showTrackCollection();
}
Compiled from "TrackTreeByTitle.java"
public class es.uc3m.recordplayer.logic.TrackTreeByTitle extends es.uc3m.eda.tree.BSTree<java.lang.String, es.uc3m.recordplayer.logic.Song> {
  public es.uc3m.recordplayer.logic.TrackTreeByTitle(es.uc3m.recordplayer.logic.TrackCollection);
  public void showTrackTreeByTitleInOrder();
  public boolean containsTrackByTitle(java.lang.String);
  public es.uc3m.recordplayer.logic.TrackCollection tracksByYearsRange(int, int);
}
Compiled from "TrackTreeByYear.java"
public class es.uc3m.recordplayer.logic.TrackTreeByYear extends es.uc3m.eda.tree.BSTree<java.lang.Integer, es.uc3m.recordplayer.logic.Song> {
  public es.uc3m.recordplayer.logic.TrackTreeByYear(es.uc3m.recordplayer.logic.TrackCollection);
  public void showTrackTreeByYearInOrder();
  public boolean containsTrackByTitle(java.lang.String);
  public es.uc3m.recordplayer.logic.TrackCollection tracksByYearsRange(int, int);
}
Compiled from "Turntable.java"
public class es.uc3m.recordplayer.logic.Turntable implements es.uc3m.recordplayer.interfaces.turntable.ITurntable {
  public es.uc3m.recordplayer.logic.Turntable();
  public void start();
  public void stop();
  public boolean isStarted();
  public void setRpm();
  public es.uc3m.recordplayer.logic.Rpm getRpm();
  public void putRecord(es.uc3m.recordplayer.logic.Side);
  public es.uc3m.eda.list.IList<es.uc3m.recordplayer.logic.Record> removeRecords();
  public boolean isEmpty();
  public boolean hasAxle();
  public void pinAxle(es.uc3m.recordplayer.interfaces.axle.IAxle);
  public void unpinAxle();
  public es.uc3m.recordplayer.logic.Record getTopRecord();
  public int getTopSideIndex();
}
Compiled from "Test.java"
public class es.uc3m.recordplayer.test.Test {
  es.uc3m.recordplayer.logic.RecordCollection recordCollection;
  es.uc3m.recordplayer.interfaces.recordstack.IRecordStack stackOne;
  es.uc3m.recordplayer.interfaces.recordstack.IRecordStack stackTwo;
  es.uc3m.recordplayer.interfaces.recordshelf.IRecordShelf recordShelf;
  es.uc3m.recordplayer.interfaces.player.IPlayer player;
  public es.uc3m.recordplayer.test.Test();
  public void initializeRecords();
  public void initializeStacks();
  public boolean isFoundStack(java.lang.String);
  public void fillRecordShelf();
  public void initializeLabelByRecord();
  public void sortLabels();
  public void sortRecordByLabel();
  public es.uc3m.recordplayer.logic.Record findRecord(es.uc3m.recordplayer.logic.Record);
  public void placeRecordInSlot(es.uc3m.recordplayer.logic.Record);
  public void removeRecordsFromPlayer();
  public void playTrack(java.lang.String);
  public void trackCollectionTest();
  public void testQueries();
  public void test1();
  public void testStacks();
  public void testShelf();
  public void test2();
  public void test3();
  public void test4();
  public static void main(java.lang.String[]);
}
