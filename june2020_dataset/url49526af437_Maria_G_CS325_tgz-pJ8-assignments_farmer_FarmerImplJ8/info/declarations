Compiled from "HelloWorld.java"
public class assignments.HelloWorld {
  public assignments.HelloWorld();
}
Compiled from "Farmer.java"
public interface assignments.farmer.Farmer {
  public abstract void plow();
  public abstract void plant();
  public abstract void weedControl();
  public abstract void harvest();
  public abstract void market();
  public abstract void setSeasonState(assignments.farmer.SeasonState);
}
Compiled from "FarmerFactory.java"
public interface assignments.farmer.FarmerFactory {
  public abstract assignments.farmer.Farmer create(java.lang.String);
  public abstract assignments.farmer.actionstrategies.PlowStrategy createPlowStrategy();
  public abstract assignments.farmer.actionstrategies.PlantStrategy createPlantStrategy();
  public abstract assignments.farmer.actionstrategies.WeedControlStrategy createWeedControlStrategy();
  public abstract assignments.farmer.actionstrategies.HarvestStrategy createHarvestStrategy();
  public abstract assignments.farmer.actionstrategies.MarketStrategy createMarketStrategy();
}
Compiled from "FarmerImpl.java"
public class assignments.farmer.FarmerImpl implements assignments.farmer.Farmer {
  public assignments.farmer.FarmerImpl();
  public void plow();
  public void plant();
  public void weedControl();
  public void harvest();
  public void market();
  public void setSeasonState(assignments.farmer.SeasonState);
  public void setStrategies(assignments.farmer.actionstrategies.PlowStrategy, assignments.farmer.actionstrategies.PlantStrategy, assignments.farmer.actionstrategies.WeedControlStrategy, assignments.farmer.actionstrategies.HarvestStrategy, assignments.farmer.actionstrategies.MarketStrategy);
  public static void main(java.lang.String[]);
}
Compiled from "SeasonState.java"
public interface assignments.farmer.SeasonState {
  public abstract void plow(assignments.farmer.actionstrategies.PlowStrategy);
  public abstract void plant(assignments.farmer.actionstrategies.PlantStrategy);
  public abstract void weedControl(assignments.farmer.actionstrategies.WeedControlStrategy);
  public abstract void harvest(assignments.farmer.actionstrategies.HarvestStrategy);
  public abstract void market(assignments.farmer.actionstrategies.MarketStrategy);
}
Compiled from "HarvestStrategy.java"
public interface assignments.farmer.actionstrategies.HarvestStrategy {
  public abstract void harvestInTheSpring();
  public abstract void harvestInTheSummer();
  public abstract void harvestInTheFall();
}
Compiled from "MarketStrategy.java"
public interface assignments.farmer.actionstrategies.MarketStrategy {
  public abstract void marketInTheSpring();
  public abstract void marketInTheSummer();
  public abstract void marketInTheFall();
}
Compiled from "PlantStrategy.java"
public interface assignments.farmer.actionstrategies.PlantStrategy {
  public abstract void plantInTheSpring();
  public abstract void plantInTheSummer();
  public abstract void plantInTheFall();
}
Compiled from "PlowStrategy.java"
public interface assignments.farmer.actionstrategies.PlowStrategy {
  public abstract void plowInTheSpring();
  public abstract void plowInTheSummer();
  public abstract void plowInTheFall();
}
Compiled from "WeedControlStrategy.java"
public interface assignments.farmer.actionstrategies.WeedControlStrategy {
  public abstract void weedControlInTheSpring();
  public abstract void weedControlInTheSummer();
  public abstract void weedControlInTheFall();
}
Compiled from "AmishHarvestStrategy.java"
public class assignments.farmer.actionstrategies.harveststrategies.AmishHarvestStrategy implements assignments.farmer.actionstrategies.HarvestStrategy {
  public assignments.farmer.actionstrategies.harveststrategies.AmishHarvestStrategy();
  public void harvestInTheSpring();
  public void harvestInTheSummer();
  public void harvestInTheFall();
}
Compiled from "ConventionalHarvestStrategy.java"
public class assignments.farmer.actionstrategies.harveststrategies.ConventionalHarvestStrategy implements assignments.farmer.actionstrategies.HarvestStrategy {
  public assignments.farmer.actionstrategies.harveststrategies.ConventionalHarvestStrategy();
  public void harvestInTheSpring();
  public void harvestInTheSummer();
  public void harvestInTheFall();
}
Compiled from "OrganicHarvestStrategy.java"
public class assignments.farmer.actionstrategies.harveststrategies.OrganicHarvestStrategy implements assignments.farmer.actionstrategies.HarvestStrategy {
  public assignments.farmer.actionstrategies.harveststrategies.OrganicHarvestStrategy();
  public void harvestInTheSpring();
  public void harvestInTheSummer();
  public void harvestInTheFall();
}
Compiled from "AmishMarketStrategy.java"
public class assignments.farmer.actionstrategies.marketstrategies.AmishMarketStrategy implements assignments.farmer.actionstrategies.MarketStrategy {
  public assignments.farmer.actionstrategies.marketstrategies.AmishMarketStrategy();
  public void marketInTheSpring();
  public void marketInTheSummer();
  public void marketInTheFall();
}
Compiled from "ConventionalMarketStrategy.java"
public class assignments.farmer.actionstrategies.marketstrategies.ConventionalMarketStrategy implements assignments.farmer.actionstrategies.MarketStrategy {
  public assignments.farmer.actionstrategies.marketstrategies.ConventionalMarketStrategy();
  public void marketInTheSpring();
  public void marketInTheSummer();
  public void marketInTheFall();
}
Compiled from "OrganicMarketStrategy.java"
public class assignments.farmer.actionstrategies.marketstrategies.OrganicMarketStrategy implements assignments.farmer.actionstrategies.MarketStrategy {
  public assignments.farmer.actionstrategies.marketstrategies.OrganicMarketStrategy();
  public void marketInTheSpring();
  public void marketInTheSummer();
  public void marketInTheFall();
}
Compiled from "AmishPlantStrategy.java"
public class assignments.farmer.actionstrategies.plantstrategies.AmishPlantStrategy implements assignments.farmer.actionstrategies.PlantStrategy {
  public assignments.farmer.actionstrategies.plantstrategies.AmishPlantStrategy();
  public void plantInTheSpring();
  public void plantInTheSummer();
  public void plantInTheFall();
}
Compiled from "ConventionalPlantStrategy.java"
public class assignments.farmer.actionstrategies.plantstrategies.ConventionalPlantStrategy implements assignments.farmer.actionstrategies.PlantStrategy {
  public assignments.farmer.actionstrategies.plantstrategies.ConventionalPlantStrategy();
  public void plantInTheSpring();
  public void plantInTheSummer();
  public void plantInTheFall();
}
Compiled from "OrganicPlantStrategy.java"
public class assignments.farmer.actionstrategies.plantstrategies.OrganicPlantStrategy implements assignments.farmer.actionstrategies.PlantStrategy {
  public assignments.farmer.actionstrategies.plantstrategies.OrganicPlantStrategy();
  public void plantInTheSpring();
  public void plantInTheSummer();
  public void plantInTheFall();
}
Compiled from "AmishPlowStrategy.java"
public class assignments.farmer.actionstrategies.plowstrategies.AmishPlowStrategy implements assignments.farmer.actionstrategies.PlowStrategy {
  public assignments.farmer.actionstrategies.plowstrategies.AmishPlowStrategy();
  public void plowInTheSpring();
  public void plowInTheSummer();
  public void plowInTheFall();
}
Compiled from "ConventionalPlowStrategy.java"
public class assignments.farmer.actionstrategies.plowstrategies.ConventionalPlowStrategy implements assignments.farmer.actionstrategies.PlowStrategy {
  public assignments.farmer.actionstrategies.plowstrategies.ConventionalPlowStrategy();
  public void plowInTheSpring();
  public void plowInTheSummer();
  public void plowInTheFall();
}
Compiled from "OrganicPlowStrategy.java"
public class assignments.farmer.actionstrategies.plowstrategies.OrganicPlowStrategy implements assignments.farmer.actionstrategies.PlowStrategy {
  public assignments.farmer.actionstrategies.plowstrategies.OrganicPlowStrategy();
  public void plowInTheSpring();
  public void plowInTheSummer();
  public void plowInTheFall();
}
Compiled from "AmishWeedControlStrategy.java"
public class assignments.farmer.actionstrategies.weedcontrolstrategies.AmishWeedControlStrategy implements assignments.farmer.actionstrategies.WeedControlStrategy {
  public assignments.farmer.actionstrategies.weedcontrolstrategies.AmishWeedControlStrategy();
  public void weedControlInTheSpring();
  public void weedControlInTheSummer();
  public void weedControlInTheFall();
}
Compiled from "ConventionalWeedControlStrategy.java"
public class assignments.farmer.actionstrategies.weedcontrolstrategies.ConventionalWeedControlStrategy implements assignments.farmer.actionstrategies.WeedControlStrategy {
  public assignments.farmer.actionstrategies.weedcontrolstrategies.ConventionalWeedControlStrategy();
  public void weedControlInTheSpring();
  public void weedControlInTheSummer();
  public void weedControlInTheFall();
}
Compiled from "OrganicWeedControlStrategy.java"
public class assignments.farmer.actionstrategies.weedcontrolstrategies.OrganicWeedControlStrategy implements assignments.farmer.actionstrategies.WeedControlStrategy {
  public assignments.farmer.actionstrategies.weedcontrolstrategies.OrganicWeedControlStrategy();
  public void weedControlInTheSpring();
  public void weedControlInTheSummer();
  public void weedControlInTheFall();
}
Compiled from "AmishFarmerFactory.java"
public class assignments.farmer.farmerfactories.AmishFarmerFactory implements assignments.farmer.FarmerFactory {
  public assignments.farmer.farmerfactories.AmishFarmerFactory();
  public assignments.farmer.Farmer create(java.lang.String);
  public assignments.farmer.actionstrategies.PlowStrategy createPlowStrategy();
  public assignments.farmer.actionstrategies.PlantStrategy createPlantStrategy();
  public assignments.farmer.actionstrategies.WeedControlStrategy createWeedControlStrategy();
  public assignments.farmer.actionstrategies.HarvestStrategy createHarvestStrategy();
  public assignments.farmer.actionstrategies.MarketStrategy createMarketStrategy();
}
Compiled from "ConventionalFarmerFactory.java"
public class assignments.farmer.farmerfactories.ConventionalFarmerFactory implements assignments.farmer.FarmerFactory {
  public assignments.farmer.farmerfactories.ConventionalFarmerFactory();
  public assignments.farmer.Farmer create(java.lang.String);
  public assignments.farmer.actionstrategies.PlowStrategy createPlowStrategy();
  public assignments.farmer.actionstrategies.PlantStrategy createPlantStrategy();
  public assignments.farmer.actionstrategies.WeedControlStrategy createWeedControlStrategy();
  public assignments.farmer.actionstrategies.HarvestStrategy createHarvestStrategy();
  public assignments.farmer.actionstrategies.MarketStrategy createMarketStrategy();
}
Compiled from "OrganicFarmerFactory.java"
public class assignments.farmer.farmerfactories.OrganicFarmerFactory implements assignments.farmer.FarmerFactory {
  public assignments.farmer.farmerfactories.OrganicFarmerFactory();
  public assignments.farmer.Farmer create(java.lang.String);
  public assignments.farmer.actionstrategies.PlowStrategy createPlowStrategy();
  public assignments.farmer.actionstrategies.PlantStrategy createPlantStrategy();
  public assignments.farmer.actionstrategies.WeedControlStrategy createWeedControlStrategy();
  public assignments.farmer.actionstrategies.HarvestStrategy createHarvestStrategy();
  public assignments.farmer.actionstrategies.MarketStrategy createMarketStrategy();
}
Compiled from "FallState.java"
public class assignments.farmer.seasonstates.FallState implements assignments.farmer.SeasonState {
  public assignments.farmer.seasonstates.FallState();
  public void plow(assignments.farmer.actionstrategies.PlowStrategy);
  public void plant(assignments.farmer.actionstrategies.PlantStrategy);
  public void weedControl(assignments.farmer.actionstrategies.WeedControlStrategy);
  public void harvest(assignments.farmer.actionstrategies.HarvestStrategy);
  public void market(assignments.farmer.actionstrategies.MarketStrategy);
}
Compiled from "SpringState.java"
public class assignments.farmer.seasonstates.SpringState implements assignments.farmer.SeasonState {
  public assignments.farmer.seasonstates.SpringState();
  public void plow(assignments.farmer.actionstrategies.PlowStrategy);
  public void plant(assignments.farmer.actionstrategies.PlantStrategy);
  public void weedControl(assignments.farmer.actionstrategies.WeedControlStrategy);
  public void harvest(assignments.farmer.actionstrategies.HarvestStrategy);
  public void market(assignments.farmer.actionstrategies.MarketStrategy);
}
Compiled from "SummerState.java"
public class assignments.farmer.seasonstates.SummerState implements assignments.farmer.SeasonState {
  public assignments.farmer.seasonstates.SummerState();
  public void plow(assignments.farmer.actionstrategies.PlowStrategy);
  public void plant(assignments.farmer.actionstrategies.PlantStrategy);
  public void weedControl(assignments.farmer.actionstrategies.WeedControlStrategy);
  public void harvest(assignments.farmer.actionstrategies.HarvestStrategy);
  public void market(assignments.farmer.actionstrategies.MarketStrategy);
}
Compiled from "AllFarmerTests.java"
public class assignments.farmer.tests.AllFarmerTests {
  public assignments.farmer.tests.AllFarmerTests();
}
Compiled from "AmishFarmerTests.java"
public class assignments.farmer.tests.AmishFarmerTests {
  java.io.ByteArrayOutputStream printlnContent;
  assignments.farmer.Farmer f;
  assignments.farmer.FarmerFactory factory;
  assignments.farmer.SeasonState summerState;
  assignments.farmer.SeasonState fallState;
  public assignments.farmer.tests.AmishFarmerTests();
  public void setup();
  public void resetOutputToNormal();
  public void testAmishSpringPlow();
  public void testAmishSpringPlant();
  public void testAmishSpringWeedControl();
  public void testAmishSpringHarvest();
  public void testAmishSpringMarket();
  public void testAmishSummerPlow();
  public void testAmishSummerPlant();
  public void testAmishSummerWeedControl();
  public void testAmishSummerHarvest();
  public void testAmishSummerMarket();
  public void testAmishFallPlow();
  public void testAmishFallPlant();
  public void testAmishFallWeedControl();
  public void testAmishFallHarvest();
  public void testAmishFallMarket();
}
Compiled from "ConventionalFarmerTests.java"
public class assignments.farmer.tests.ConventionalFarmerTests {
  java.io.ByteArrayOutputStream printlnContent;
  assignments.farmer.Farmer f;
  assignments.farmer.FarmerFactory factory;
  assignments.farmer.SeasonState summerState;
  assignments.farmer.SeasonState fallState;
  public assignments.farmer.tests.ConventionalFarmerTests();
  public void setup();
  public void resetOutputToNormal();
  public void testConventionalSpringPlow();
  public void testConventionalSpringPlant();
  public void testConventionalSpringWeedControl();
  public void testConventionalSpringHarvest();
  public void testConventionalSpringMarket();
  public void testConventionalSummerPlow();
  public void testConventionalSummerPlant();
  public void testConventionalSummerWeedControl();
  public void testConventionalSummerHarvest();
  public void testConventionalSummerMarket();
  public void testConventionalFallPlow();
  public void testConventionalFallPlant();
  public void testConventionalFallWeedControl();
  public void testConventionalFallHarvest();
  public void testConventionalFallMarket();
}
Compiled from "OrganicFarmerTests.java"
public class assignments.farmer.tests.OrganicFarmerTests {
  java.io.ByteArrayOutputStream printlnContent;
  assignments.farmer.Farmer f;
  assignments.farmer.FarmerFactory factory;
  assignments.farmer.SeasonState summerState;
  assignments.farmer.SeasonState fallState;
  public assignments.farmer.tests.OrganicFarmerTests();
  public void setup();
  public void resetOutputToNormal();
  public void testOrganicSpringPlow();
  public void testOrganicSpringPlant();
  public void testOrganicSpringWeedControl();
  public void testOrganicSpringHarvest();
  public void testOrganicSpringMarket();
  public void testOrganicSummerPlow();
  public void testOrganicSummerPlant();
  public void testOrganicSummerWeedControl();
  public void testOrganicSummerHarvest();
  public void testOrganicSummerMarket();
  public void testOrganicFallPlow();
  public void testOrganicFallPlant();
  public void testOrganicFallWeedControl();
  public void testOrganicFallHarvest();
  public void testOrganicFallMarket();
}
Compiled from "EmailAddress.java"
public class assignments.frs.chap2.EmailAddress {
  public assignments.frs.chap2.EmailAddress(java.lang.String);
  public boolean isValid();
}
Compiled from "TestEmail.java"
public class assignments.frs.chap2.TestEmail {
  public assignments.frs.chap2.TestEmail();
  public void testForIdentifierThatStartsWithDigit();
  public void testForIdentifierThatContainsIllegalCharacterInIdentifier();
  public void testForNoPeriod();
  public void testForNoAtSymbol();
  public void testForNoDigits();
  public void testForIdentifierThatEndssWithDigit();
  public void testForIdentifierThatContainsDigit();
}
Compiled from "SnapToGridLogoPuzzle.java"
class assignments.frs.chap30.PuzzleFactory implements minidraw.framework.Factory {
  assignments.frs.chap30.PuzzleFactory();
  public minidraw.framework.DrawingView createDrawingView(minidraw.framework.DrawingEditor);
  public minidraw.framework.Drawing createDrawing(minidraw.framework.DrawingEditor);
  public javax.swing.JTextField createStatusField(minidraw.framework.DrawingEditor);
}
Compiled from "SnapToGridDragTracker.java"
public class assignments.frs.chap30.SnapToGridDragTracker extends minidraw.standard.AbstractTool implements minidraw.framework.Tool {
  public assignments.frs.chap30.SnapToGridDragTracker(minidraw.framework.DrawingEditor, minidraw.framework.Figure, int, int);
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
  public void keyDown(java.awt.event.KeyEvent, int);
}
Compiled from "SnapToGridLogoPuzzle.java"
public class assignments.frs.chap30.SnapToGridLogoPuzzle {
  public assignments.frs.chap30.SnapToGridLogoPuzzle();
  public static void main(java.lang.String[]);
}
Compiled from "SnapToGridSelectionTool.java"
public class assignments.frs.chap30.SnapToGridSelectionTool extends minidraw.standard.AbstractTool implements minidraw.framework.Tool {
  protected minidraw.framework.Tool fChild;
  protected minidraw.framework.Tool cachedNullTool;
  protected minidraw.framework.Figure draggedFigure;
  minidraw.framework.RubberBandSelectionStrategy selectionStrategy;
  public assignments.frs.chap30.SnapToGridSelectionTool(minidraw.framework.DrawingEditor, int, int);
  public assignments.frs.chap30.SnapToGridSelectionTool(minidraw.framework.DrawingEditor, minidraw.framework.RubberBandSelectionStrategy);
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void mouseMove(java.awt.event.MouseEvent, int, int);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
  protected minidraw.framework.Tool createDragTracker(minidraw.framework.Figure);
  protected minidraw.framework.Tool createAreaTracker();
}
Compiled from "Board.java"
public class assignments.frs.chap5.Board {
  public assignments.frs.chap5.Board();
  public assignments.frs.chap5.Breakthrough$PieceType get(int, int);
  public void set(int, int, assignments.frs.chap5.Breakthrough$PieceType);
  public void print();
}
Compiled from "Breakthrough.java"
public interface assignments.frs.chap5.Breakthrough {
  public abstract assignments.frs.chap5.Breakthrough$PieceType getPieceAt(int, int);
  public abstract assignments.frs.chap5.Breakthrough$PlayerType getPlayerInTurn();
  public abstract assignments.frs.chap5.Breakthrough$PlayerType getWinner();
  public abstract boolean isMoveValid(int, int, int, int);
  public abstract void move(int, int, int, int) throws java.lang.Exception;
}
Compiled from "Breakthrough.java"
public final class assignments.frs.chap5.Breakthrough$PieceType extends java.lang.Enum<assignments.frs.chap5.Breakthrough$PieceType> {
  public static final assignments.frs.chap5.Breakthrough$PieceType BLACK;
  public static final assignments.frs.chap5.Breakthrough$PieceType WHITE;
  public static final assignments.frs.chap5.Breakthrough$PieceType NONE;
  public static assignments.frs.chap5.Breakthrough$PieceType[] values();
  public static assignments.frs.chap5.Breakthrough$PieceType valueOf(java.lang.String);
  static {};
}
Compiled from "Breakthrough.java"
public final class assignments.frs.chap5.Breakthrough$PlayerType extends java.lang.Enum<assignments.frs.chap5.Breakthrough$PlayerType> {
  public static final assignments.frs.chap5.Breakthrough$PlayerType BLACK;
  public static final assignments.frs.chap5.Breakthrough$PlayerType WHITE;
  public static assignments.frs.chap5.Breakthrough$PlayerType[] values();
  public static assignments.frs.chap5.Breakthrough$PlayerType valueOf(java.lang.String);
  static {};
}
Compiled from "BreakthroughImpl.java"
public class assignments.frs.chap5.BreakthroughImpl implements assignments.frs.chap5.Breakthrough {
  public assignments.frs.chap5.BreakthroughImpl();
  public assignments.frs.chap5.Breakthrough$PieceType getPieceAt(int, int);
  public assignments.frs.chap5.Breakthrough$PlayerType getPlayerInTurn();
  public assignments.frs.chap5.Breakthrough$PlayerType getWinner();
  public boolean isMoveValid(int, int, int, int);
  public void move(int, int, int, int) throws assignments.frs.chap5.InvalidMoveException;
}
Compiled from "InvalidMoveException.java"
public class assignments.frs.chap5.InvalidMoveException extends java.lang.Exception {
  public assignments.frs.chap5.InvalidMoveException();
}
Compiled from "TestBreakthrough.java"
public class assignments.frs.chap5.TestBreakthrough {
  assignments.frs.chap5.Breakthrough game;
  public assignments.frs.chap5.TestBreakthrough();
  public void setUp();
  public void shouldHaveBlackPawnOn00();
  public void shouldBeginWithWhitePlayer();
  public void shouldAlternatePlayersWithTurns() throws java.lang.Exception;
  public void shouldMoveOnePieceOneSquareStraightTowardsHomeRow() throws java.lang.Exception;
  public void shouldMoveOnePieceOneSquareDiagonallyRightTowardsHomeRow() throws java.lang.Exception;
  public void shouldMoveOnePieceOneSquareDiagonallyLeftTowardsHomeRow() throws java.lang.Exception;
  public void shouldOnlyMoveOneSquarePerTurn() throws java.lang.Exception;
  public void shouldNotMovePieceToOccupiedSquare() throws java.lang.Exception;
  public void shouldCaptureOpponentOnTheDiagonal() throws java.lang.Exception;
  public void shouldWinWhenMovePieceToHomeRow() throws java.lang.Exception;
  public void shouldNotAllowWhitePlayerToMoveBlackPiece() throws java.lang.Exception;
  public void shouldNotAllowMoveSideways() throws java.lang.Exception;
  public void shouldNotAllowMoveAwayFromHomeRow() throws java.lang.Exception;
}
Compiled from "Safe.java"
public interface assignments.safe.Safe {
  public static final java.lang.String BLANK_DISPLAY;
  public static final java.lang.String OPEN_DISPLAY;
  public static final int DISPLAY_LENGTH;
  public abstract boolean isLocked();
  public abstract java.lang.String readDisplay();
  public abstract void enter(char);
}
Compiled from "SafeImpl.java"
public class assignments.safe.SafeImpl implements assignments.safe.Safe {
  public assignments.safe.SafeImpl();
  public boolean isLocked();
  public java.lang.String readDisplay();
  public void enter(char);
}
Compiled from "SafeTests.java"
public class assignments.safe.SafeTests {
  public assignments.safe.SafeTests();
  public void shouldBeLockedAndDisplayBlank();
  public void shouldUnlockAndDisplayOpen();
}
Compiled from "Board.java"
public interface frs.hotgammon.Board {
  public abstract boolean move(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location, frs.hotgammon.framework.Color);
  public abstract int getCountAt(frs.hotgammon.framework.Location);
  public abstract frs.hotgammon.framework.Color getColorAt(frs.hotgammon.framework.Location);
  public abstract boolean place(frs.hotgammon.framework.Color, int);
  public abstract boolean remove(frs.hotgammon.framework.Color, int);
}
Compiled from "MonFactory.java"
public interface frs.hotgammon.MonFactory {
  public abstract frs.hotgammon.MoveValidator createMoveValidator();
  public abstract frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public abstract frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public abstract frs.hotgammon.RollDeterminer createRollDeterminer();
  public abstract void setGame(frs.hotgammon.framework.Game);
}
Compiled from "MoveValidator.java"
public interface frs.hotgammon.MoveValidator {
  public abstract boolean isValid(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public abstract void setGame(frs.hotgammon.framework.Game);
}
Compiled from "RollDeterminer.java"
public interface frs.hotgammon.RollDeterminer {
  public abstract void reset();
  public abstract void rollDice();
  public abstract int[] getDiceRoll();
}
Compiled from "TurnDeterminer.java"
public interface frs.hotgammon.TurnDeterminer {
  public abstract frs.hotgammon.framework.Color nextTurn();
  public abstract void setGame(frs.hotgammon.framework.Game);
}
Compiled from "WinnerDeterminer.java"
public interface frs.hotgammon.WinnerDeterminer {
  public abstract frs.hotgammon.framework.Color winner(int);
  public abstract void setGame(frs.hotgammon.framework.Game);
}
Compiled from "BoardImpl.java"
public class frs.hotgammon.common.BoardImpl implements frs.hotgammon.Board {
  public frs.hotgammon.common.BoardImpl();
  public frs.hotgammon.common.BoardImpl(int);
  public boolean move(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location, frs.hotgammon.framework.Color);
  public int getCountAt(frs.hotgammon.framework.Location);
  public frs.hotgammon.framework.Color getColorAt(frs.hotgammon.framework.Location);
  public boolean place(frs.hotgammon.framework.Color, int);
  public boolean remove(frs.hotgammon.framework.Color, int);
  public frs.hotgammon.common.BoardImpl$Square getSquare(int);
}
Compiled from "BoardImpl.java"
public class frs.hotgammon.common.BoardImpl$Square {
  public int occupants;
  final frs.hotgammon.common.BoardImpl this$0;
  public frs.hotgammon.common.BoardImpl$Square(frs.hotgammon.common.BoardImpl);
  public boolean add(frs.hotgammon.framework.Color);
  public boolean remove(frs.hotgammon.framework.Color);
  public frs.hotgammon.framework.Color getColor();
  public int getCount();
  static frs.hotgammon.framework.Color access$000(frs.hotgammon.common.BoardImpl$Square);
}
Compiled from "GameImpl.java"
public class frs.hotgammon.common.GameImpl implements frs.hotgammon.framework.Game {
  protected int movesLeft;
  public frs.hotgammon.common.GameImpl(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public frs.hotgammon.common.GameImpl(frs.hotgammon.MonFactory);
  public void setFactory(frs.hotgammon.MonFactory);
  public void newGame();
  public void nextTurn();
  public boolean move(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public frs.hotgammon.framework.Color getPlayerInTurn();
  public int getNumberOfMovesLeft();
  public int[] diceThrown();
  public int[] diceValuesLeft();
  public frs.hotgammon.framework.Color winner();
  public frs.hotgammon.framework.Color getColor(frs.hotgammon.framework.Location);
  public int getCount(frs.hotgammon.framework.Location);
  protected frs.hotgammon.framework.Location otherPlayerBar();
  public void configure(frs.hotgammon.common.GameImpl$Placement[]);
  public void addObserver(frs.hotgammon.framework.GameObserver);
  public java.util.ArrayList<frs.hotgammon.framework.GameObserver> getObservers();
}
Compiled from "GameImpl.java"
public class frs.hotgammon.common.GameImpl$Placement {
  public frs.hotgammon.framework.Location location;
  public frs.hotgammon.framework.Color player;
  public frs.hotgammon.common.GameImpl$Placement(frs.hotgammon.framework.Color, frs.hotgammon.framework.Location);
}
Compiled from "VisualGameImpl.java"
public class frs.hotgammon.common.VisualGameImpl implements frs.hotgammon.framework.Game {
  protected int movesLeft;
  public frs.hotgammon.common.VisualGameImpl(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public frs.hotgammon.common.VisualGameImpl(frs.hotgammon.MonFactory);
  public void setFactory(frs.hotgammon.MonFactory);
  public void newGame();
  public void nextTurn();
  public boolean move(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public frs.hotgammon.framework.Color getPlayerInTurn();
  public int getNumberOfMovesLeft();
  public int[] diceThrown();
  public int[] diceValuesLeft();
  public frs.hotgammon.framework.Color winner();
  public frs.hotgammon.framework.Color getColor(frs.hotgammon.framework.Location);
  public int getCount(frs.hotgammon.framework.Location);
  protected frs.hotgammon.framework.Location otherPlayerBar();
  public void configure(frs.hotgammon.common.VisualGameImpl$Placement[]);
  public void addObserver(frs.hotgammon.framework.GameObserver);
  public java.util.ArrayList<frs.hotgammon.framework.GameObserver> getObservers();
}
Compiled from "VisualGameImpl.java"
public class frs.hotgammon.common.VisualGameImpl$Move {
  public frs.hotgammon.common.VisualGameImpl$Move(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public frs.hotgammon.framework.Location getTo();
  public frs.hotgammon.framework.Location getFrom();
  public boolean isEqual(frs.hotgammon.common.VisualGameImpl$Move);
  public boolean isReverse(frs.hotgammon.common.VisualGameImpl$Move);
  public boolean isEqual(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public boolean isReverse(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public frs.hotgammon.common.VisualGameImpl$Move reverse();
  public java.lang.String toString();
  static frs.hotgammon.framework.Location access$000(frs.hotgammon.common.VisualGameImpl$Move);
  static frs.hotgammon.framework.Location access$100(frs.hotgammon.common.VisualGameImpl$Move);
}
Compiled from "VisualGameImpl.java"
public class frs.hotgammon.common.VisualGameImpl$MoveRecord {
  public frs.hotgammon.common.VisualGameImpl$MoveRecord();
  public frs.hotgammon.common.VisualGameImpl$MoveRecord(frs.hotgammon.common.VisualGameImpl$Move, frs.hotgammon.common.VisualGameImpl$Move, int);
  public void setMove(frs.hotgammon.common.VisualGameImpl$Move);
  public void setAssociatedMoveToBar(frs.hotgammon.common.VisualGameImpl$Move);
  public void setDieValueUsed(int);
  public frs.hotgammon.common.VisualGameImpl$Move getMove();
  public frs.hotgammon.common.VisualGameImpl$Move getAssociatedMoveToBar();
  public int getDieValueUsed();
}
Compiled from "VisualGameImpl.java"
public class frs.hotgammon.common.VisualGameImpl$Placement {
  public frs.hotgammon.framework.Location location;
  public frs.hotgammon.framework.Color player;
  public frs.hotgammon.common.VisualGameImpl$Placement(frs.hotgammon.framework.Color, frs.hotgammon.framework.Location);
}
Compiled from "Color.java"
public final class frs.hotgammon.framework.Color extends java.lang.Enum<frs.hotgammon.framework.Color> {
  public static final frs.hotgammon.framework.Color RED;
  public static final frs.hotgammon.framework.Color NONE;
  public static final frs.hotgammon.framework.Color BLACK;
  public static frs.hotgammon.framework.Color[] values();
  public static frs.hotgammon.framework.Color valueOf(java.lang.String);
  public final int getSign();
  public static frs.hotgammon.framework.Color getColorFromNumerical(int);
  public java.lang.String toString();
  static {};
}
Compiled from "Game.java"
public interface frs.hotgammon.framework.Game {
  public abstract void newGame();
  public abstract void nextTurn();
  public abstract boolean move(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public abstract frs.hotgammon.framework.Color getPlayerInTurn();
  public abstract int getNumberOfMovesLeft();
  public abstract int[] diceThrown();
  public abstract int[] diceValuesLeft();
  public abstract frs.hotgammon.framework.Color winner();
  public abstract frs.hotgammon.framework.Color getColor(frs.hotgammon.framework.Location);
  public abstract int getCount(frs.hotgammon.framework.Location);
  public abstract void addObserver(frs.hotgammon.framework.GameObserver);
  public abstract java.util.ArrayList<frs.hotgammon.framework.GameObserver> getObservers();
}
Compiled from "GameObserver.java"
public interface frs.hotgammon.framework.GameObserver {
  public abstract void checkerMove(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public abstract void diceRolled(int[]);
  public abstract void setStatus(java.lang.String);
  public abstract void gameOver();
}
Compiled from "Location.java"
public final class frs.hotgammon.framework.Location extends java.lang.Enum<frs.hotgammon.framework.Location> {
  public static final frs.hotgammon.framework.Location B1;
  public static final frs.hotgammon.framework.Location B2;
  public static final frs.hotgammon.framework.Location B3;
  public static final frs.hotgammon.framework.Location B4;
  public static final frs.hotgammon.framework.Location B5;
  public static final frs.hotgammon.framework.Location B6;
  public static final frs.hotgammon.framework.Location B7;
  public static final frs.hotgammon.framework.Location B8;
  public static final frs.hotgammon.framework.Location B9;
  public static final frs.hotgammon.framework.Location B10;
  public static final frs.hotgammon.framework.Location B11;
  public static final frs.hotgammon.framework.Location B12;
  public static final frs.hotgammon.framework.Location R1;
  public static final frs.hotgammon.framework.Location R2;
  public static final frs.hotgammon.framework.Location R3;
  public static final frs.hotgammon.framework.Location R4;
  public static final frs.hotgammon.framework.Location R5;
  public static final frs.hotgammon.framework.Location R6;
  public static final frs.hotgammon.framework.Location R7;
  public static final frs.hotgammon.framework.Location R8;
  public static final frs.hotgammon.framework.Location R9;
  public static final frs.hotgammon.framework.Location R10;
  public static final frs.hotgammon.framework.Location R11;
  public static final frs.hotgammon.framework.Location R12;
  public static final frs.hotgammon.framework.Location B_BAR;
  public static final frs.hotgammon.framework.Location R_BAR;
  public static final frs.hotgammon.framework.Location B_BEAR_OFF;
  public static final frs.hotgammon.framework.Location R_BEAR_OFF;
  public static frs.hotgammon.framework.Location[] values();
  public static frs.hotgammon.framework.Location valueOf(java.lang.String);
  public java.lang.String toString();
  public static int distance(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public static frs.hotgammon.framework.Location findLocation(frs.hotgammon.framework.Color, frs.hotgammon.framework.Location, int);
  static {};
}
Compiled from "AllTests.java"
public class frs.hotgammon.tests.AllTests {
  public frs.hotgammon.tests.AllTests();
}
Compiled from "AlternatingTurnTests.java"
public class frs.hotgammon.tests.AlternatingTurnTests {
  public frs.hotgammon.tests.AlternatingTurnTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldBeAbleToRemovePlayerOfRightColor();
  public void shouldBeRedPlayerTurnAfterSecondNextTurn();
  public void shouldBeZeroMovesAfterTwoConsecutive();
  public void shouldBeRedTurnAfter2NextTurns();
  public void redShouldBeInTurn();
  public void redShouldBeAbleToMove();
  public void redPlayerIsInTurnAfterNextTurnIsInvokedTheSecondTime();
  public void shouldChangeThePlayerAfterEachTurn();
  public void shouldNotBeAbleToMakeThreeMoves();
}
Compiled from "BetaMonTests.java"
public class frs.hotgammon.tests.BetaMonTests {
  public frs.hotgammon.tests.BetaMonTests();
  public void setup();
  public void redShouldOnlyMoveTowardRedInnerTable();
  public void blackShouldOnlyMoveTowardBlackInnerTable();
  public void shouldReportTwoDieLeftBeforeMove();
  public void shouldReportOneDieLeftAfterSingleMove();
  public void shouldReportZeroDieLeftAfterSingleMove();
  public void moveDistanceShouldEqualRoll();
  public void shouldNotBeAbleToUseSameDieTwice();
  public void shouldSendRedBlotToBar();
  public void shouldSendBlackBlotToBar();
  public void shouldRejectRedMoveDueToBlockedPoint();
  public void shouldRejectBlackMoveDueToBlockedPoint();
  public void shouldMoveBlackOffBarToRedInnerTable();
  public void shouldNotMoveBlackOffBarToRedInnerTable();
  public void shouldNotMoveOtherBlackWhenBlackOnBar();
  public void shouldNotMoveOtherRedWhenRedOnBar();
  public void redShouldBearOffWithAllCheckersInInnerTable();
  public void redShouldNotBearOffWithCheckersNotInInnerTable();
  public void blackShouldBearOffWithAllCheckersInInnerTable();
  public void blackShouldNotBearOffWithCheckersNotInInnerTable();
  public void shouldBearOffWithLessThanDieIfNoOtherMoveAvailable();
}
Compiled from "BoardTests.java"
public class frs.hotgammon.tests.BoardTests {
  public frs.hotgammon.tests.BoardTests();
  public void setup();
  public void shouldBeAbleToPlaceSameColorOnGivenSquare();
  public void shouldReturnProperCountForGivenSquare();
  public void shouldNotBeAbleToRemovePlayerOfWrongColor();
  public void shouldBeAbleToRemovePlayerOfCorrectColor();
}
Compiled from "CoreTests.java"
public class frs.hotgammon.tests.CoreTests {
  public frs.hotgammon.tests.CoreTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldHaveNoPlayerInTurnAfterNewGame();
  public void shouldHaveBlackPlayerInTurnAfterFirstRoll();
  public void shoudlBeTwoBlackCheckersOnR1();
  public void shouldHaveBlackOnR1andBlackOnB2AndOneMoreLeft();
  public void shouldNotBeAbleToPlaceBlackOnRedOccupiedSquare();
  public void shouldRoll12Then34Then56Then12();
  public void shouldNotBeAbleToMoveIfNotInTurn();
  public void shouldNotBeAbleToPlaceRedOnBlackOccupiedSquare();
  public void shouldBeTwoBlackCheckersOnR1();
  public void shouldBeValidToMoveFromR1ToR2AtStartOfGame();
  public void shouldBeInvalidToMoveFromR1ToB1AtStartOfGame();
  public void shouldBeNoMovesLeftAfterMovingTwoBlackCheckersFromR1toR2();
  public void shouldBe3_4Die();
  public void shouldNotBeAbleToPlaceTwoDifferentColorsOnSameSquare();
  public void shouldBeAbleToPlaceTwoSameColorPiecesOnSameSquare();
  public void shouldReturnProperCountForGivenSquare();
  public void shouldNotBeAbleToRemovePlayerOfWrongColor();
  public void shouldHaveTwoBlackCheckersOnR1();
  public void shouldBeAbleToMoveBlackR1toR2();
  public void shouldNotBeAbleToMoveBlackR1toB1();
  public void shouldHaveNoMoveLeft();
  public void diceRollsShouldBeIncremental();
  public void shouldNotBeAbleToMoveWithNoMovesLeft();
  public void shouldNotBeAbleToMoveFromASpotWithoutCheckers();
  public void ShouldBeBlackToGoFirst();
  public void shouldRunOutOfMoves();
  public void shouldHaveTwoBlackCheckersOnR1WhenNewGameStarts();
  public void shouldHave1BlackCheckerOnR1and1BlackCheckerOnR2AfterMoveFromR1toR2();
  public void shouldHaveOneMoveLeftForBlackPlayerAfterMoveFromR1ToR2();
  public void shouldHave0NumberOfMovesForBlackPlayerAfterTheBlackMovedTwice();
  public void dieValuesAre34AfterNextTurnIsInvokedTheSecondTime();
  public void moveR1toB1isInvalidAsThereIsAnOpponentThere();
  public void shouldHaveNoPlayerInTurnBeforeTheGameStarted();
  public void R1ShouldBeNoneAndR3BlackAfterMoveFromR1ToR3();
  public void eachTurnThrowsCorrectNumberOfDice();
  public void newGameResetsTheBoardToInitial();
  public void newGameResetsPlayerToBlack();
  public void shouldNotBeAbleToPlaceTwoDifferentCheckersInTheSameContainer();
  public void shouldBeAbleToPlaceTheSameCheckersInOneContainer();
}
Compiled from "DeltaMonTests.java"
public class frs.hotgammon.tests.DeltaMonTests {
  public frs.hotgammon.tests.DeltaMonTests();
  public void setup();
  public void shouldGiveBlackConsectiveTurnsAfter12();
}
Compiled from "GammaMonTests.java"
public class frs.hotgammon.tests.GammaMonTests {
  public frs.hotgammon.tests.GammaMonTests();
  public void setup();
  public void shouldBeWinForBlack();
  public void shouldBeNoWinner();
  public void shouldBeWinForRed();
}
Compiled from "LocationTests.java"
public class frs.hotgammon.tests.LocationTests {
  public frs.hotgammon.tests.LocationTests();
  public void shouldHaveProperNames();
  public void shouldCalculateDistanceCorrectly();
  public void shouldCalculateBarDistanceCorrectly();
  public void shouldCalculateBearOffDistanceCorrectly();
  public void shouldFindProperLocationBasedOnDistance();
  public void shouldIterateThrough28Locations();
}
Compiled from "WinAfterSixTests.java"
public class frs.hotgammon.tests.WinAfterSixTests {
  public frs.hotgammon.tests.WinAfterSixTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldBeRedWinnerAfterSixTurns();
  public void shouldBeNoWinnerAfterFourTurns();
  public void shouldEndGameAfterSixTurns();
  public void shouldNotEndGameAfterFiveTurns();
  public void shouldHaveRedIsWinner();
  public void shouldEndGameAfter6Rolls();
  public void shouldEndGameAfter5Rolls();
  public void redWinsAfter6Turns();
}
Compiled from "AllTests.java"
public class frs.hotgammon.tests.preGuiTests.AllTests {
  public frs.hotgammon.tests.preGuiTests.AllTests();
}
Compiled from "AlternatingTurnTests.java"
public class frs.hotgammon.tests.preGuiTests.AlternatingTurnTests {
  public frs.hotgammon.tests.preGuiTests.AlternatingTurnTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldBeAbleToRemovePlayerOfRightColor();
  public void shouldBeRedPlayerTurnAfterSecondNextTurn();
  public void shouldBeZeroMovesAfterTwoConsecutive();
  public void shouldBeRedTurnAfter2NextTurns();
  public void redShouldBeInTurn();
  public void redShouldBeAbleToMove();
  public void redPlayerIsInTurnAfterNextTurnIsInvokedTheSecondTime();
  public void shouldChangeThePlayerAfterEachTurn();
  public void shouldNotBeAbleToMakeThreeMoves();
}
Compiled from "BetaMonTests.java"
public class frs.hotgammon.tests.preGuiTests.BetaMonTests {
  public frs.hotgammon.tests.preGuiTests.BetaMonTests();
  public void setup();
  public void redShouldOnlyMoveTowardRedInnerTable();
  public void blackShouldOnlyMoveTowardBlackInnerTable();
  public void shouldReportTwoDieLeftBeforeMove();
  public void shouldReportOneDieLeftAfterSingleMove();
  public void shouldReportZeroDieLeftAfterSingleMove();
  public void moveDistanceShouldEqualRoll();
  public void shouldNotBeAbleToUseSameDieTwice();
  public void shouldSendRedBlotToBar();
  public void shouldSendBlackBlotToBar();
  public void shouldRejectRedMoveDueToBlockedPoint();
  public void shouldRejectBlackMoveDueToBlockedPoint();
  public void shouldMoveBlackOffBarToRedInnerTable();
  public void shouldNotMoveBlackOffBarToRedInnerTable();
  public void shouldNotMoveOtherBlackWhenBlackOnBar();
  public void shouldNotMoveOtherRedWhenRedOnBar();
  public void redShouldBearOffWithAllCheckersInInnerTable();
  public void redShouldNotBearOffWithCheckersNotInInnerTable();
  public void blackShouldBearOffWithAllCheckersInInnerTable();
  public void blackShouldNotBearOffWithCheckersNotInInnerTable();
  public void shouldBearOffWithLessThanDieIfNoOtherMoveAvailable();
}
Compiled from "BlackStartsEpsilonMonTests.java"
public class frs.hotgammon.tests.preGuiTests.BlackStartsEpsilonMonTests {
  public frs.hotgammon.tests.preGuiTests.BlackStartsEpsilonMonTests();
  public void setup();
  public void blackShouldBeFirstPlayer();
}
Compiled from "BoardTests.java"
public class frs.hotgammon.tests.preGuiTests.BoardTests {
  public frs.hotgammon.tests.preGuiTests.BoardTests();
  public void setup();
  public void shouldBeAbleToPlaceSameColorOnGivenSquare();
  public void shouldReturnProperCountForGivenSquare();
  public void shouldNotBeAbleToRemovePlayerOfWrongColor();
  public void shouldBeAbleToRemovePlayerOfCorrectColor();
}
Compiled from "CoreTests.java"
public class frs.hotgammon.tests.preGuiTests.CoreTests {
  public frs.hotgammon.tests.preGuiTests.CoreTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldHaveNoPlayerInTurnAfterNewGame();
  public void shoudlBeTwoBlackCheckersOnR1();
  public void shouldBeTwoBlackCheckersOnR1();
  public void shouldReturnProperCountForGivenSquare();
  public void shouldHaveTwoBlackCheckersOnR1();
  public void shouldNotBeAbleToMoveFromASpotWithoutCheckers();
  public void shouldHaveTwoBlackCheckersOnR1WhenNewGameStarts();
  public void shouldHaveNoPlayerInTurnBeforeTheGameStarted();
  public void newGameResetsTheBoardToInitial();
}
Compiled from "DeltaMonTests.java"
public class frs.hotgammon.tests.preGuiTests.DeltaMonTests {
  public frs.hotgammon.tests.preGuiTests.DeltaMonTests();
  public void setup();
  public void shouldGiveBlackConsectiveTurnsAfter12();
}
Compiled from "EpsilonMonTests.java"
public class frs.hotgammon.tests.preGuiTests.EpsilonMonTests {
  public frs.hotgammon.tests.preGuiTests.EpsilonMonTests();
}
Compiled from "FactoryCoreTests.java"
public class frs.hotgammon.tests.preGuiTests.FactoryCoreTests {
  public frs.hotgammon.tests.preGuiTests.FactoryCoreTests(frs.hotgammon.MonFactory);
  public static java.util.Collection<frs.hotgammon.MonFactory[]> data();
  public void shouldHaveNoPlayerInTurnAfterNewGame();
  public void shoudlBeTwoBlackCheckersOnR1();
  public void shouldBeTwoBlackCheckersOnR1();
  public void shouldReturnProperCountForGivenSquare();
  public void shouldHaveTwoBlackCheckersOnR1();
  public void shouldNotBeAbleToMoveFromASpotWithoutCheckers();
  public void shouldHaveTwoBlackCheckersOnR1WhenNewGameStarts();
  public void shouldHaveNoPlayerInTurnBeforeTheGameStarted();
  public void newGameResetsTheBoardToInitial();
}
Compiled from "GammaMonTests.java"
public class frs.hotgammon.tests.preGuiTests.GammaMonTests {
  public frs.hotgammon.tests.preGuiTests.GammaMonTests();
  public void setup();
  public void shouldBeWinForBlack();
  public void shouldBeNoWinner();
  public void shouldBeWinForRed();
}
Compiled from "LocationTests.java"
public class frs.hotgammon.tests.preGuiTests.LocationTests {
  public frs.hotgammon.tests.preGuiTests.LocationTests();
  public void shouldHaveProperNames();
  public void shouldCalculateDistanceCorrectly();
  public void shouldCalculateBarDistanceCorrectly();
  public void shouldCalculateBearOffDistanceCorrectly();
  public void shouldFindProperLocationBasedOnDistance();
  public void shouldIterateThrough28Locations();
}
Compiled from "PairSequenceDeterminerTests.java"
public class frs.hotgammon.tests.preGuiTests.PairSequenceDeterminerTests {
  public frs.hotgammon.tests.preGuiTests.PairSequenceDeterminerTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldHave1BlackCheckerOnR1and1BlackCheckerOnR2AfterMoveFromR1toR2();
  public void shouldHave0NumberOfMovesForBlackPlayerAfterTheBlackMovedTwice();
  public void shouldHaveNoMoveLeft();
  public void ShouldBeBlackToGoFirst();
  public void shouldRunOutOfMoves();
  public void newGameResetsPlayerToBlack();
  public void shouldHaveBlackPlayerInTurnAfterFirstRoll();
  public void shouldNotBeAbleToMoveIfNotInTurn();
  public void shouldBeValidToMoveFromR1ToR2AtStartOfGame();
  public void shouldBeInvalidToMoveFromR1ToB1AtStartOfGame();
  public void shouldNotBeAbleToRemovePlayerOfWrongColor();
  public void shouldBeAbleToMoveBlackR1toR2();
  public void shouldNotBeAbleToMoveBlackR1toB1();
  public void shouldNotBeAbleToMoveWithNoMovesLeft();
  public void moveR1toB1isInvalidAsThereIsAnOpponentThere();
  public void R1ShouldBeNoneAndR3BlackAfterMoveFromR1ToR3();
  public void shouldHaveBlackOnR1andBlackOnB2AndOneMoreLeft();
  public void shouldNotBeAbleToPlaceBlackOnRedOccupiedSquare();
  public void shouldNotBeAbleToPlaceRedOnBlackOccupiedSquare();
  public void shouldBeNoMovesLeftAfterMovingTwoBlackCheckersFromR1toR2();
  public void shouldNotBeAbleToPlaceTwoDifferentColorsOnSameSquare();
  public void shouldBeAbleToPlaceTwoSameColorPiecesOnSameSquare();
  public void shouldHaveOneMoveLeftForBlackPlayerAfterMoveFromR1ToR2();
  public void shouldNotBeAbleToPlaceTwoDifferentCheckersInTheSameContainer();
  public void shouldBeAbleToPlaceTheSameCheckersInOneContainer();
}
Compiled from "RandomRollDeterminerTests.java"
public class frs.hotgammon.tests.preGuiTests.RandomRollDeterminerTests {
  public frs.hotgammon.tests.preGuiTests.RandomRollDeterminerTests(frs.hotgammon.MonFactory);
  public static java.util.Collection<frs.hotgammon.MonFactory[]> data();
  public void shouldDoubleMovesIfDoublesRolled();
}
Compiled from "RedStartsEpsilonMonTests.java"
public class frs.hotgammon.tests.preGuiTests.RedStartsEpsilonMonTests {
  public frs.hotgammon.tests.preGuiTests.RedStartsEpsilonMonTests();
  public void setup();
  public void redShouldBeFirstPlayer();
}
Compiled from "SemiMonTests.java"
public class frs.hotgammon.tests.preGuiTests.SemiMonTests {
  public frs.hotgammon.tests.preGuiTests.SemiMonTests();
  public void setup();
  public void redShouldOnlyMoveTowardRedInnerTableIfFixedBlack();
  public void blackShouldOnlyMoveTowardBlackInnerTableIfFixedBlack();
  public void moveShouldBeValidDieRollIfFixedBlack();
  public void redShouldOnlyMoveTowardRedInnerTableIfFixedRed();
  public void blackShouldOnlyMoveTowardBlackInnerTableIfFixedRed();
  public void moveShouldBeValidDieRollIfFixedRed();
}
Compiled from "WinAfterSixTests.java"
public class frs.hotgammon.tests.preGuiTests.WinAfterSixTests {
  public frs.hotgammon.tests.preGuiTests.WinAfterSixTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldBeRedWinnerAfterSixTurns();
  public void shouldBeNoWinnerAfterFourTurns();
  public void shouldEndGameAfterSixTurns();
  public void shouldNotEndGameAfterFiveTurns();
  public void shouldHaveRedIsWinner();
  public void shouldEndGameAfter6Rolls();
  public void shouldEndGameAfter5Rolls();
  public void redWinsAfter6Turns();
}
Compiled from "AllTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.AllTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.AllTests();
}
Compiled from "AlternatingTurnTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.AlternatingTurnTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.AlternatingTurnTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldBeRedTurnAfter2NextTurns();
  public void redShouldBeInTurn();
  public void shouldBeRedPlayerTurnAfterSecondNextTurn();
  public void shouldBeAbleToRemovePlayerOfRightColor();
  public void redShouldBeAbleToMove();
  public void shouldChangeThePlayerAfterEachTurn();
  public void redPlayerIsInTurnAfterNextTurnIsInvokedTheSecondTime();
}
Compiled from "BetaMonTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.BetaMonTests {
  frs.hotgammon.common.GameImpl game;
  public frs.hotgammon.tests.preGuiTests.mariatests.BetaMonTests();
  public void setUp();
  public void piecesCanOnlyMoveInDirectionOfPlayersInnerTable();
  public void piecesCanOnlyMoveIfDistanceTravelledEqualsOneOfDiceValuesRolled();
  public void diceValuesRolledCanOnlyBeUsedOnce();
  public void shouldMoveOpponentToBarIfLandOnSquareWithOneOpponentPiece();
  public void shouldNotBeAbleToMoveToSquareWithTwoOrMoreOpponentPieces();
  public void shouldHaveToMovePieceFromBarToOpponentsInnerTableWithValidDiceValueRolled();
  public void canNotBearOffWithPiecesOutsideOfInnerTable();
  public void canNotBearOffWithLessThanDiceValueIfValidDiceValueMove();
  public void canBearOffWithLessThanDiceValueIfNoValidDiceValueMove();
}
Compiled from "BoardTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.BoardTests {
  frs.hotgammon.Board board;
  public frs.hotgammon.tests.preGuiTests.mariatests.BoardTests();
  public void setUp();
  public void shouldGetCount0AtStartOfGame();
  public void shouldGetNoColorAtStartOfGame();
  public void shouldAddOneRedPieceToSquareAtIndex1();
  public void shouldBeAbleToMoveToNewLocation();
}
Compiled from "CoreTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.CoreTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.CoreTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldHaveNoPlayerInTurnAfterNewGame();
  public void shouldHaveBlackPlayerInTurnAfterFirstRoll();
  public void shoudlBeTwoBlackCheckersOnR1();
  public void shouldHaveBlackOnR1andBlackOnB2AndOneMoreLeft();
  public void shouldNotBeAbleToPlaceBlackOnRedOccupiedSquare();
  public void shouldBeZeroMovesAfterTwoConsecutive();
  public void shouldBeNoWinnerAfterFourTurns();
  public void shouldRoll12Then34Then56Then12();
  public void shouldNotBeAbleToMoveIfNotInTurn();
  public void shouldNotBeAbleToMakeThreeMoves();
  public void shouldNotBeAbleToPlaceRedOnBlackOccupiedSquare();
  public void shouldBeTwoBlackCheckersOnR1();
  public void shouldBeValidToMoveFromR1ToR2AtStartOfGame();
  public void shouldBeInvalidToMoveFromR1ToB1AtStartOfGame();
  public void shouldBeNoMovesLeftAfterMovingTwoBlackCheckersFromR1toR2();
  public void shouldBe3_4Die();
  public void shouldNotEndGameAfterFiveTurns();
  public void shouldNotBeAbleToPlaceTwoDifferentColorsOnSameSquare();
  public void shouldBeAbleToPlaceTwoSameColorPiecesOnSameSquare();
  public void shouldReturnProperCountForGivenSquare();
  public void shouldNotBeAbleToRemovePlayerOfWrongColor();
  public void shouldHaveTwoBlackCheckersOnR1();
  public void shouldBeAbleToMoveBlackR1toR2();
  public void shouldNotBeAbleToMoveBlackR1toB1();
  public void shouldHaveNoMoveLeft();
  public void diceRollsShouldBeIncremental();
  public void shouldNotBeAbleToMoveWithNoMovesLeft();
  public void shouldNotBeAbleToMoveFromASpotWithoutCheckers();
  public void ShouldBeBlackToGoFirst();
  public void shouldRunOutOfMoves();
  public void shouldHaveTwoBlackCheckersOnR1WhenNewGameStarts();
  public void shouldHave1BlackCheckerOnR1and1BlackCheckerOnR2AfterMoveFromR1toR2();
  public void shouldHaveOneMoveLeftForBlackPlayerAfterMoveFromR1ToR2();
  public void shouldHave0NumberOfMovesForBlackPlayerAfterTheBlackMovedTwice();
  public void dieValuesAre34AfterNextTurnIsInvokedTheSecondTime();
  public void moveR1toB1isInvalidAsThereIsAnOpponentThere();
  public void shouldHaveNoPlayerInTurnBeforeTheGameStarted();
  public void R1ShouldBeNoneAndR3BlackAfterMoveFromR1ToR3();
  public void eachTurnThrowsCorrectNumberOfDice();
  public void newGameResetsTheBoardToInitial();
  public void newGameResetsPlayerToBlack();
  public void shouldNotBeAbleToPlaceTwoDifferentCheckersInTheSameContainer();
}
Compiled from "DeltaMonTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.DeltaMonTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.DeltaMonTests();
  public void setup();
  public void shouldRepeatSamePlayerInTurnIf1_2IsRolled();
}
Compiled from "FactoryCoreTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.FactoryCoreTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.FactoryCoreTests(frs.hotgammon.MonFactory);
  public static java.util.Collection<frs.hotgammon.MonFactory[]> data();
  public void shouldHaveNoPlayerInTurnAfterNewGame();
  public void shoudlBeTwoBlackCheckersOnR1();
  public void shouldBeTwoBlackCheckersOnR1();
  public void shouldReturnProperCountForGivenSquare();
  public void shouldHaveTwoBlackCheckersOnR1();
  public void shouldHaveTwoBlackCheckersOnR1WhenNewGameStarts();
  public void shouldHaveNoPlayerInTurnBeforeTheGameStarted();
  public void newGameResetsTheBoardToInitial();
}
Compiled from "GammaMonTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.GammaMonTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.GammaMonTests();
  public void setup();
  public void shouldBeWinnerIsBlack();
  public void shouldBeWinnerIsNone();
  public void shouldBeWinnerIsRed();
}
Compiled from "HandicapMonTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.HandicapMonTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.HandicapMonTests(frs.hotgammon.MonFactory);
  public static java.util.Collection<java.lang.Object[]> data();
  public void testAlphamonRulesWhenBlackTurn();
  public void testBetamonRulesWhenRedTurn();
  public void testAlphamonRulesForSendPieceToBarWhenBlackTurn();
  public void testBetamonRulesForSendPieceToBarWhenRedTurn();
}
Compiled from "LocationTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.LocationTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.LocationTests();
  public void shouldHaveProperNames();
  public void shouldCalculateDistanceCorrectly();
  public void shouldCalculateBarDistanceCorrectly();
  public void shouldCalculateBearOffDistanceCorrectly();
  public void shouldFindProperLocationBasedOnDistance();
  public void shouldIterateThrough28Locations();
}
Compiled from "PairSequenceDeterminerTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.PairSequenceDeterminerTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.PairSequenceDeterminerTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void ShouldBeBlackToGoFirst();
  public void shouldHave0NumberOfMovesForBlackPlayerAfterTheBlackMovedTwice();
  public void shouldHaveOneMoveLeftForBlackPlayerAfterMoveFromR1ToR2();
  public void shouldHaveBlackPlayerInTurnAfterFirstRoll();
  public void shouldNotBeAbleToMoveIfNotInTurn();
  public void shouldBeAbleToMoveBlackR1toR2();
  public void R1ShouldBeNoneAndR3BlackAfterMoveFromR1ToR3();
  public void shouldHaveNoMoveLeft();
  public void shouldRunOutOfMoves();
  public void newGameResetsPlayerToBlack();
  public void shouldHave1BlackCheckerOnR1and1BlackCheckerOnR2AfterMoveFromR1toR2();
  public void shouldBeNoMovesLeftAfterMovingTwoBlackCheckersFromR1toR2();
  public void shouldBeAbleToPlaceTwoSameColorPiecesOnSameSquare();
  public void shouldBeValidToMoveFromR1ToR2AtStartOfGame();
  public void shouldBeInvalidToMoveFromR1ToB1AtStartOfGame();
  public void shouldHaveBlackOnR1andBlackOnB2AndOneMoreLeft();
  public void shouldBeAbleToPlaceTheSameCheckersInOneContainer();
  public void shouldNotBeAbleToRemovePlayerOfWrongColor();
  public void moveR1toB1isInvalidAsThereIsAnOpponentThere();
  public void shouldNotBeAbleToMoveWithNoMovesLeft();
  public void shouldNotBeAbleToMoveBlackR1toB1();
  public void shouldNotBeAbleToPlaceTwoDifferentCheckersInTheSameContainer();
  public void shouldNotBeAbleToMoveFromASpotWithoutCheckers();
  public void shouldNotBeAbleToPlaceTwoDifferentColorsOnSameSquare();
  public void shouldNotBeAbleToPlaceRedOnBlackOccupiedSquare();
  public void shouldNotBeAbleToPlaceBlackOnRedOccupiedSquare();
  public void shouldBe3_4Die();
  public void diceRollsShouldBeIncremental();
  public void dieValuesAre34AfterNextTurnIsInvokedTheSecondTime();
  public void eachTurnThrowsCorrectNumberOfDice();
  public void shouldRoll12Then34Then56Then12();
}
Compiled from "SimpleMoveValidatorTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.SimpleMoveValidatorTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.SimpleMoveValidatorTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldBeNoMovesLeftAfterMovingTwoBlackCheckersFromR1toR2();
  public void shouldBeAbleToPlaceTheSameCheckersInOneContainer();
}
Compiled from "SixMoveWinnerTests.java"
public class frs.hotgammon.tests.preGuiTests.mariatests.SixMoveWinnerTests {
  public frs.hotgammon.tests.preGuiTests.mariatests.SixMoveWinnerTests(frs.hotgammon.MoveValidator, frs.hotgammon.WinnerDeterminer, frs.hotgammon.TurnDeterminer, frs.hotgammon.RollDeterminer);
  public static java.util.Collection<java.lang.Object[]> data();
  public void shouldBeRedWinnerAfterSixTurns();
  public void shouldEndGameAfterSixTurns();
  public void shouldHaveRedIsWinner();
  public void shouldEndGameAfter6Rolls();
  public void shouldNotEndGameAfter5Rolls();
  public void redWinsAfter6Turns();
}
Compiled from "FixedBlackStartsRandomRollDeterminer.java"
public class frs.hotgammon.tests.preGuiTests.stubs.FixedBlackStartsRandomRollDeterminer implements frs.hotgammon.RollDeterminer {
  public frs.hotgammon.tests.preGuiTests.stubs.FixedBlackStartsRandomRollDeterminer();
  public void rollDice();
  public int[] getDiceRoll();
  public void reset();
}
Compiled from "FixedRedStartsRandomRollDeterminer.java"
public class frs.hotgammon.tests.preGuiTests.stubs.FixedRedStartsRandomRollDeterminer implements frs.hotgammon.RollDeterminer {
  public frs.hotgammon.tests.preGuiTests.stubs.FixedRedStartsRandomRollDeterminer();
  public void rollDice();
  public int[] getDiceRoll();
  public void reset();
}
Compiled from "Fixed_BlackStarts_EpsilonMonFactory.java"
public class frs.hotgammon.tests.preGuiTests.stubs.Fixed_BlackStarts_EpsilonMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.tests.preGuiTests.stubs.Fixed_BlackStarts_EpsilonMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "Fixed_BlackStarts_SemiMonFactory.java"
public class frs.hotgammon.tests.preGuiTests.stubs.Fixed_BlackStarts_SemiMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.tests.preGuiTests.stubs.Fixed_BlackStarts_SemiMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "Fixed_RedStarts_EpsilonMonFactory.java"
public class frs.hotgammon.tests.preGuiTests.stubs.Fixed_RedStarts_EpsilonMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.tests.preGuiTests.stubs.Fixed_RedStarts_EpsilonMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "Fixed_RedStarts_SemiMonFactory.java"
public class frs.hotgammon.tests.preGuiTests.stubs.Fixed_RedStarts_SemiMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.tests.preGuiTests.stubs.Fixed_RedStarts_SemiMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "StubGame1.java"
public class frs.hotgammon.tests.stub.StubGame1 implements frs.hotgammon.framework.Game {
  java.util.ArrayList<frs.hotgammon.framework.GameObserver> observers;
  frs.hotgammon.framework.Location loneRiderHere1;
  frs.hotgammon.framework.Location loneRiderHere2;
  boolean tictac;
  int movesLeft;
  int turn;
  public frs.hotgammon.tests.stub.StubGame1();
  public void newGame();
  public void nextTurn();
  public boolean move(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public frs.hotgammon.framework.Color getPlayerInTurn();
  public int getNumberOfMovesLeft();
  public int[] diceThrown();
  public int[] diceValuesLeft();
  public frs.hotgammon.framework.Color winner();
  public frs.hotgammon.framework.Color getColor(frs.hotgammon.framework.Location);
  public int getCount(frs.hotgammon.framework.Location);
  public void addObserver(frs.hotgammon.framework.GameObserver);
  public java.util.ArrayList<frs.hotgammon.framework.GameObserver> getObservers();
}
Compiled from "ShowCheckersAndDice.java"
class frs.hotgammon.tests.visual.FirstHotGammonFactory implements minidraw.framework.Factory {
  frs.hotgammon.tests.visual.FirstHotGammonFactory();
  public minidraw.framework.DrawingView createDrawingView(minidraw.framework.DrawingEditor);
  public minidraw.framework.Drawing createDrawing(minidraw.framework.DrawingEditor);
  public javax.swing.JTextField createStatusField(minidraw.framework.DrawingEditor);
}
Compiled from "Maria_ShowCheckersAndDice.java"
class frs.hotgammon.tests.visual.HotGammonFactory implements minidraw.framework.Factory {
  frs.hotgammon.tests.visual.HotGammonFactory();
  public minidraw.framework.DrawingView createDrawingView(minidraw.framework.DrawingEditor);
  public minidraw.framework.Drawing createDrawing(minidraw.framework.DrawingEditor);
  public javax.swing.JTextField createStatusField(minidraw.framework.DrawingEditor);
}
Compiled from "Maria_ShowCheckersAndDice.java"
public class frs.hotgammon.tests.visual.Maria_ShowCheckersAndDice {
  public frs.hotgammon.tests.visual.Maria_ShowCheckersAndDice();
  public static void main(java.lang.String[]);
}
Compiled from "Maria_ShowCheckersAndDice.java"
final class frs.hotgammon.tests.visual.Maria_ShowCheckersAndDice$1 extends java.util.HashMap<java.lang.String, minidraw.framework.Tool> {
  final minidraw.framework.Tool val$dieRollTool;
  final minidraw.framework.Tool val$moveTool;
  final minidraw.framework.Tool val$gameOverTool;
  frs.hotgammon.tests.visual.Maria_ShowCheckersAndDice$1(minidraw.framework.Tool, minidraw.framework.Tool, minidraw.framework.Tool);
}
Compiled from "ShowCheckersAndDice.java"
public class frs.hotgammon.tests.visual.ShowCheckersAndDice {
  public frs.hotgammon.tests.visual.ShowCheckersAndDice();
  public static void main(java.lang.String[]);
}
Compiled from "AlphaMonFactory.java"
public class frs.hotgammon.variants.factories.AlphaMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.variants.factories.AlphaMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "BetaMonFactory.java"
public class frs.hotgammon.variants.factories.BetaMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.variants.factories.BetaMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "DeltaMonFactory.java"
public class frs.hotgammon.variants.factories.DeltaMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.variants.factories.DeltaMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "EpsilonMonFactory.java"
public class frs.hotgammon.variants.factories.EpsilonMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.variants.factories.EpsilonMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "GammaMonFactory.java"
public class frs.hotgammon.variants.factories.GammaMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.variants.factories.GammaMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "HandicapMonFactory.java"
public class frs.hotgammon.variants.factories.HandicapMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.variants.factories.HandicapMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "SemiMonFactory.java"
public class frs.hotgammon.variants.factories.SemiMonFactory implements frs.hotgammon.MonFactory {
  public frs.hotgammon.variants.factories.SemiMonFactory();
  public frs.hotgammon.MoveValidator createMoveValidator();
  public frs.hotgammon.TurnDeterminer createTurnDeterminer();
  public frs.hotgammon.WinnerDeterminer createWinnerDeterminer();
  public frs.hotgammon.RollDeterminer createRollDeterminer();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "CompleteMoveValidator.java"
public class frs.hotgammon.variants.movevalidators.CompleteMoveValidator implements frs.hotgammon.MoveValidator {
  public frs.hotgammon.variants.movevalidators.CompleteMoveValidator();
  public frs.hotgammon.variants.movevalidators.CompleteMoveValidator(frs.hotgammon.framework.Game);
  public boolean isValid(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "PlayerDependentMoveValidator.java"
public class frs.hotgammon.variants.movevalidators.PlayerDependentMoveValidator implements frs.hotgammon.MoveValidator {
  public frs.hotgammon.variants.movevalidators.PlayerDependentMoveValidator();
  public frs.hotgammon.variants.movevalidators.PlayerDependentMoveValidator(frs.hotgammon.framework.Game);
  public boolean isValid(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "SimpleMoveValidator.java"
public class frs.hotgammon.variants.movevalidators.SimpleMoveValidator implements frs.hotgammon.MoveValidator {
  public frs.hotgammon.variants.movevalidators.SimpleMoveValidator();
  public frs.hotgammon.variants.movevalidators.SimpleMoveValidator(frs.hotgammon.framework.Game);
  public boolean isValid(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "PairSequenceDeterminer.java"
public class frs.hotgammon.variants.rolldeterminers.PairSequenceDeterminer implements frs.hotgammon.RollDeterminer {
  public frs.hotgammon.variants.rolldeterminers.PairSequenceDeterminer();
  public void rollDice();
  public int[] getDiceRoll();
  public void reset();
}
Compiled from "RandomRollDeterminer.java"
public class frs.hotgammon.variants.rolldeterminers.RandomRollDeterminer implements frs.hotgammon.RollDeterminer {
  public frs.hotgammon.variants.rolldeterminers.RandomRollDeterminer();
  public void rollDice();
  public int[] getDiceRoll();
  public void reset();
}
Compiled from "AceyDeuceyTurnDeterminer.java"
public class frs.hotgammon.variants.turndeterminers.AceyDeuceyTurnDeterminer implements frs.hotgammon.TurnDeterminer {
  public frs.hotgammon.variants.turndeterminers.AceyDeuceyTurnDeterminer();
  public frs.hotgammon.variants.turndeterminers.AceyDeuceyTurnDeterminer(frs.hotgammon.framework.Game);
  public frs.hotgammon.framework.Color nextTurn();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "AlternatingTurnDeterminer.java"
public class frs.hotgammon.variants.turndeterminers.AlternatingTurnDeterminer implements frs.hotgammon.TurnDeterminer {
  public frs.hotgammon.variants.turndeterminers.AlternatingTurnDeterminer();
  public frs.hotgammon.variants.turndeterminers.AlternatingTurnDeterminer(frs.hotgammon.framework.Game);
  public frs.hotgammon.framework.Color nextTurn();
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "BearOffWinnerDeterminer.java"
public class frs.hotgammon.variants.winnerdeterminers.BearOffWinnerDeterminer implements frs.hotgammon.WinnerDeterminer {
  public frs.hotgammon.variants.winnerdeterminers.BearOffWinnerDeterminer();
  public frs.hotgammon.variants.winnerdeterminers.BearOffWinnerDeterminer(frs.hotgammon.framework.Game);
  public frs.hotgammon.framework.Color winner(int);
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "SixMoveWinnerDeterminer.java"
public class frs.hotgammon.variants.winnerdeterminers.SixMoveWinnerDeterminer implements frs.hotgammon.WinnerDeterminer {
  public frs.hotgammon.variants.winnerdeterminers.SixMoveWinnerDeterminer();
  public frs.hotgammon.framework.Color winner(int);
  public void setGame(frs.hotgammon.framework.Game);
}
Compiled from "Convert.java"
public class frs.hotgammon.view.Convert {
  public frs.hotgammon.view.Convert();
  public static frs.hotgammon.framework.Location xy2Location(int, int);
  public static java.awt.Point locationAndCount2xy(frs.hotgammon.framework.Location, int);
  static {};
}
Compiled from "HotGammonApplication.java"
public class frs.hotgammon.view.HotGammonApplication extends minidraw.standard.MiniDrawApplication {
  public frs.hotgammon.view.HotGammonApplication(java.lang.String, minidraw.framework.Factory, frs.hotgammon.framework.Game);
  public void open();
  static void access$000(frs.hotgammon.view.HotGammonApplication);
}
Compiled from "HotGammonApplication.java"
class frs.hotgammon.view.HotGammonApplication$1 extends java.awt.event.MouseAdapter {
  final frs.hotgammon.view.HotGammonApplication this$0;
  frs.hotgammon.view.HotGammonApplication$1(frs.hotgammon.view.HotGammonApplication);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "HotGammonDrawing.java"
public class frs.hotgammon.view.HotGammonDrawing extends minidraw.standard.StandardDrawing implements frs.hotgammon.framework.GameObserver {
  java.awt.Point[] diePoints;
  protected frs.hotgammon.framework.Game subject;
  protected minidraw.framework.DrawingEditor editor;
  public frs.hotgammon.view.HotGammonDrawing(minidraw.framework.DrawingEditor);
  public frs.hotgammon.view.HotGammonDrawing(minidraw.framework.DrawingEditor, frs.hotgammon.framework.Game);
  public void setGame(frs.hotgammon.framework.Game);
  public void checkerMove(frs.hotgammon.framework.Location, frs.hotgammon.framework.Location);
  protected boolean isChecker(minidraw.framework.Figure);
  public void diceRolled(int[]);
  public void addDie(int);
  public void addChecker(frs.hotgammon.framework.Color, java.awt.Point);
  public void setStatus(java.lang.String);
  public void gameOver();
}
Compiled from "CheckerFigure.java"
public class frs.hotgammon.view.figures.CheckerFigure extends minidraw.standard.ImageFigure {
  public frs.hotgammon.view.figures.CheckerFigure(frs.hotgammon.framework.Color, java.awt.Point);
  public frs.hotgammon.framework.Color getColor();
}
Compiled from "DieFigure.java"
public class frs.hotgammon.view.figures.DieFigure extends minidraw.standard.ImageFigure {
  public frs.hotgammon.view.figures.DieFigure(int, java.awt.Point);
}
Compiled from "DieRollTool.java"
public class frs.hotgammon.view.tools.DieRollTool extends minidraw.standard.AbstractTool {
  public frs.hotgammon.view.tools.DieRollTool(minidraw.framework.DrawingEditor, frs.hotgammon.framework.Game);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
}
Compiled from "GameOverTool.java"
public class frs.hotgammon.view.tools.GameOverTool extends minidraw.standard.AbstractTool {
  public frs.hotgammon.view.tools.GameOverTool(minidraw.framework.DrawingEditor);
}
Compiled from "HotGammonTool.java"
public class frs.hotgammon.view.tools.HotGammonTool extends minidraw.standard.AbstractTool {
  public static final java.lang.String DIE_ROLL_TOOL;
  public static final java.lang.String MOVE_TOOL;
  public static final java.lang.String GAME_OVER_TOOL;
  public frs.hotgammon.view.tools.HotGammonTool(minidraw.framework.DrawingEditor, frs.hotgammon.framework.Game, java.lang.String, java.util.HashMap<java.lang.String, minidraw.framework.Tool>);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void setState(java.lang.String);
}
Compiled from "MoveTool.java"
public class frs.hotgammon.view.tools.MoveTool extends minidraw.standard.AbstractTool {
  protected minidraw.framework.Tool fChild;
  protected minidraw.framework.Tool cachedNullTool;
  protected minidraw.framework.Figure draggedFigure;
  public frs.hotgammon.view.tools.MoveTool(minidraw.framework.DrawingEditor, frs.hotgammon.framework.Game);
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void mouseMove(java.awt.event.MouseEvent, int, int);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
  protected minidraw.framework.Tool createDragTracker(minidraw.framework.Figure);
}
Compiled from "BoardActionTool.java"
public class minidraw.boardgame.BoardActionTool extends minidraw.standard.AbstractTool {
  public minidraw.boardgame.BoardActionTool(minidraw.framework.DrawingEditor);
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
}
Compiled from "BoardDrawing.java"
public class minidraw.boardgame.BoardDrawing<LOCATION> extends minidraw.standard.StandardDrawing implements minidraw.boardgame.BoardGameObserver<LOCATION> {
  protected java.util.Map<LOCATION, java.util.List<minidraw.boardgame.BoardFigure>> figureMap;
  protected java.util.Map<java.lang.String, minidraw.boardgame.BoardFigure> propMap;
  protected minidraw.boardgame.FigureFactory<LOCATION> factory;
  protected minidraw.boardgame.PositioningStrategy<LOCATION> adjuster;
  protected minidraw.boardgame.PropAppearanceStrategy propChanger;
  public minidraw.boardgame.BoardDrawing(minidraw.boardgame.FigureFactory<LOCATION>, minidraw.boardgame.PositioningStrategy<LOCATION>, minidraw.boardgame.PropAppearanceStrategy);
  protected void adjustFigurePosition(minidraw.boardgame.BoardFigure, LOCATION, int);
  protected void buildPieceMap();
  protected void buildPropMap();
  public void pieceMovedEvent(LOCATION, LOCATION);
  public void propChangeEvent(java.lang.String);
}
Compiled from "BoardFigure.java"
public class minidraw.boardgame.BoardFigure extends minidraw.standard.ImageFigure {
  public minidraw.boardgame.BoardFigure(java.lang.String, java.awt.Point, boolean, minidraw.boardgame.Command);
  public minidraw.boardgame.BoardFigure(java.lang.String, boolean, minidraw.boardgame.Command);
  public minidraw.boardgame.BoardFigure();
  public minidraw.boardgame.BoardFigure(java.awt.Image, java.awt.Point);
  public minidraw.boardgame.BoardFigure(java.lang.String, java.awt.Point);
  public void changeImage(java.lang.String);
  public boolean isMobile();
  public boolean performAction(int, int, int, int);
}
Compiled from "BoardGameObserver.java"
public interface minidraw.boardgame.BoardGameObserver<LOCATION> {
  public abstract void pieceMovedEvent(LOCATION, LOCATION);
  public abstract void propChangeEvent(java.lang.String);
}
Compiled from "Command.java"
public interface minidraw.boardgame.Command {
  public abstract void setFromCoordinates(int, int);
  public abstract void setToCoordinates(int, int);
  public abstract boolean execute();
}
Compiled from "FigureFactory.java"
public interface minidraw.boardgame.FigureFactory<LOCATION> {
  public abstract java.util.Map<LOCATION, java.util.List<minidraw.boardgame.BoardFigure>> generatePieceMultiMap();
  public abstract java.util.Map<java.lang.String, minidraw.boardgame.BoardFigure> generatePropMap();
}
Compiled from "NullCommand.java"
public class minidraw.boardgame.NullCommand implements minidraw.boardgame.Command {
  public minidraw.boardgame.NullCommand();
  public boolean execute();
  public void setFromCoordinates(int, int);
  public void setToCoordinates(int, int);
}
Compiled from "PositioningStrategy.java"
public interface minidraw.boardgame.PositioningStrategy<LOCATION> {
  public abstract java.awt.Point calculateFigureCoordinatesIndexedForLocation(LOCATION, int);
  public abstract java.awt.Point calculateFigureCoordinatesForProps(java.lang.String);
}
Compiled from "PropAppearanceStrategy.java"
public interface minidraw.boardgame.PropAppearanceStrategy {
  public abstract java.lang.String calculateImageNameForPropWithKey(java.lang.String);
}
Compiled from "Drawing.java"
public interface minidraw.framework.Drawing extends minidraw.framework.SelectionHandler,minidraw.framework.FigureChangeListener,minidraw.framework.DrawingChangeListenerHandler {
  public abstract minidraw.framework.Figure add(minidraw.framework.Figure);
  public abstract minidraw.framework.Figure remove(minidraw.framework.Figure);
  public abstract java.util.Iterator<minidraw.framework.Figure> iterator();
  public abstract minidraw.framework.Figure findFigure(int, int);
  public abstract void requestUpdate();
  public abstract void lock();
  public abstract void unlock();
}
Compiled from "DrawingChangeEvent.java"
public class minidraw.framework.DrawingChangeEvent extends java.util.EventObject {
  public minidraw.framework.DrawingChangeEvent(minidraw.framework.Drawing, java.awt.Rectangle);
  public minidraw.framework.Drawing getDrawing();
  public java.awt.Rectangle getInvalidatedRectangle();
}
Compiled from "DrawingChangeListener.java"
public interface minidraw.framework.DrawingChangeListener extends java.util.EventListener {
  public abstract void drawingInvalidated(minidraw.framework.DrawingChangeEvent);
  public abstract void drawingRequestUpdate(minidraw.framework.DrawingChangeEvent);
}
Compiled from "DrawingChangeListenerHandler.java"
public interface minidraw.framework.DrawingChangeListenerHandler {
  public abstract void addDrawingChangeListener(minidraw.framework.DrawingChangeListener);
  public abstract void removeDrawingChangeListener(minidraw.framework.DrawingChangeListener);
}
Compiled from "DrawingEditor.java"
public interface minidraw.framework.DrawingEditor {
  public static final java.lang.String VERSION;
  public abstract minidraw.framework.Drawing drawing();
  public abstract minidraw.framework.DrawingView view();
  public abstract void setTool(minidraw.framework.Tool);
  public abstract minidraw.framework.Tool tool();
  public abstract void open();
  public abstract void showStatus(java.lang.String);
}
Compiled from "DrawingView.java"
public interface minidraw.framework.DrawingView extends minidraw.framework.DrawingChangeListener {
  public abstract void checkDamage();
  public abstract void drawAll(java.awt.Graphics);
  public abstract void drawDrawing(java.awt.Graphics);
  public abstract void drawBackground(java.awt.Graphics);
  public abstract void drawSelectionHighlight(java.awt.Graphics);
  public abstract void drawOverlay(java.awt.Graphics);
  public abstract java.awt.Graphics getGraphics();
}
Compiled from "Factory.java"
public interface minidraw.framework.Factory {
  public abstract minidraw.framework.DrawingView createDrawingView(minidraw.framework.DrawingEditor);
  public abstract minidraw.framework.Drawing createDrawing(minidraw.framework.DrawingEditor);
  public abstract javax.swing.JTextField createStatusField(minidraw.framework.DrawingEditor);
}
Compiled from "Figure.java"
public interface minidraw.framework.Figure {
  public abstract void draw(java.awt.Graphics);
  public abstract java.awt.Rectangle displayBox();
  public abstract void moveBy(int, int);
  public abstract void invalidate();
  public abstract void changed();
  public abstract void addFigureChangeListener(minidraw.framework.FigureChangeListener);
  public abstract void removeFigureChangeListener(minidraw.framework.FigureChangeListener);
}
Compiled from "FigureChangeEvent.java"
public class minidraw.framework.FigureChangeEvent extends java.util.EventObject {
  public minidraw.framework.FigureChangeEvent(minidraw.framework.Figure, java.awt.Rectangle);
  public minidraw.framework.FigureChangeEvent(minidraw.framework.Figure);
  public minidraw.framework.Figure getFigure();
  public java.awt.Rectangle getInvalidatedRectangle();
  static {};
}
Compiled from "FigureChangeListener.java"
public interface minidraw.framework.FigureChangeListener extends java.util.EventListener {
  public abstract void figureInvalidated(minidraw.framework.FigureChangeEvent);
  public abstract void figureChanged(minidraw.framework.FigureChangeEvent);
  public abstract void figureRemoved(minidraw.framework.FigureChangeEvent);
  public abstract void figureRequestRemove(minidraw.framework.FigureChangeEvent);
  public abstract void figureRequestUpdate(minidraw.framework.FigureChangeEvent);
}
Compiled from "RubberBandSelectionStrategy.java"
public interface minidraw.framework.RubberBandSelectionStrategy {
  public abstract void selectGroup(minidraw.framework.Drawing, java.awt.Rectangle, boolean);
}
Compiled from "SelectionHandler.java"
public interface minidraw.framework.SelectionHandler {
  public abstract java.util.List<minidraw.framework.Figure> selection();
  public abstract void addToSelection(minidraw.framework.Figure);
  public abstract void removeFromSelection(minidraw.framework.Figure);
  public abstract void toggleSelection(minidraw.framework.Figure);
  public abstract void clearSelection();
}
Compiled from "Tool.java"
public interface minidraw.framework.Tool {
  public abstract void mouseDown(java.awt.event.MouseEvent, int, int);
  public abstract void mouseDrag(java.awt.event.MouseEvent, int, int);
  public abstract void mouseUp(java.awt.event.MouseEvent, int, int);
  public abstract void mouseMove(java.awt.event.MouseEvent, int, int);
  public abstract void keyDown(java.awt.event.KeyEvent, int);
}
Compiled from "AbstractFigure.java"
public abstract class minidraw.standard.AbstractFigure implements minidraw.framework.Figure {
  java.util.List<minidraw.framework.FigureChangeListener> listenerList;
  public minidraw.standard.AbstractFigure();
  public void moveBy(int, int);
  protected void willChange();
  public void invalidate();
  protected abstract void basicMoveBy(int, int);
  public void changed();
  public void addFigureChangeListener(minidraw.framework.FigureChangeListener);
  public void removeFigureChangeListener(minidraw.framework.FigureChangeListener);
}
Compiled from "AbstractTool.java"
public abstract class minidraw.standard.AbstractTool implements minidraw.framework.Tool {
  protected minidraw.framework.DrawingEditor editor;
  protected int fAnchorX;
  protected int fAnchorY;
  public minidraw.standard.AbstractTool(minidraw.framework.DrawingEditor);
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
  public void mouseMove(java.awt.event.MouseEvent, int, int);
  public void keyDown(java.awt.event.KeyEvent, int);
  public minidraw.framework.DrawingEditor editor();
}
Compiled from "CompositeFigure.java"
public abstract class minidraw.standard.CompositeFigure extends minidraw.standard.AbstractFigure implements minidraw.framework.FigureChangeListener {
  protected java.util.List<minidraw.framework.Figure> fFigures;
  public minidraw.standard.CompositeFigure();
  public synchronized minidraw.framework.Figure add(minidraw.framework.Figure);
  public synchronized minidraw.framework.Figure remove(minidraw.framework.Figure);
  public java.util.Iterator<minidraw.framework.Figure> iterator();
  public minidraw.framework.Figure findFigure(int, int);
  public void draw(java.awt.Graphics);
  protected void basicMoveBy(int, int);
  public void figureInvalidated(minidraw.framework.FigureChangeEvent);
  public void figureChanged(minidraw.framework.FigureChangeEvent);
  public void figureRemoved(minidraw.framework.FigureChangeEvent);
  public void figureRequestRemove(minidraw.framework.FigureChangeEvent);
  public void figureRequestUpdate(minidraw.framework.FigureChangeEvent);
}
Compiled from "GroupFigure.java"
public class minidraw.standard.GroupFigure extends minidraw.standard.CompositeFigure {
  public minidraw.standard.GroupFigure();
  public java.awt.Rectangle displayBox();
}
Compiled from "ImageFigure.java"
public class minidraw.standard.ImageFigure extends minidraw.standard.AbstractFigure {
  protected java.awt.Image fImage;
  protected java.awt.Rectangle fDisplayBox;
  public minidraw.standard.ImageFigure();
  public void set(java.awt.Image, java.awt.Point);
  public void set(java.lang.String, java.awt.Point);
  public minidraw.standard.ImageFigure(java.awt.Image, java.awt.Point);
  public minidraw.standard.ImageFigure(java.lang.String, java.awt.Point);
  public void draw(java.awt.Graphics);
  public java.awt.Rectangle displayBox();
  protected void basicMoveBy(int, int);
}
Compiled from "ImageManager.java"
public class minidraw.standard.ImageManager {
  public static minidraw.standard.ImageManager singleton;
  minidraw.standard.ImageManager(java.awt.Component);
  public static minidraw.standard.ImageManager getSingleton();
  public java.awt.Image getImage(java.lang.String);
}
Compiled from "ImageManager.java"
class minidraw.standard.ImageManager$1 implements java.io.FilenameFilter {
  final minidraw.standard.ImageManager this$0;
  minidraw.standard.ImageManager$1(minidraw.standard.ImageManager);
  public boolean accept(java.io.File, java.lang.String);
}
Compiled from "MiniDrawApplication.java"
public class minidraw.standard.MiniDrawApplication extends javax.swing.JFrame implements minidraw.framework.DrawingEditor {
  protected minidraw.framework.DrawingView fView;
  protected minidraw.framework.Drawing fDrawing;
  protected minidraw.standard.ImageManager fImageManager;
  protected minidraw.framework.Tool fTool;
  protected minidraw.framework.Factory factory;
  protected javax.swing.JTextField statusField;
  public minidraw.standard.MiniDrawApplication(java.lang.String, minidraw.framework.Factory);
  protected void setFrameCloseOperation();
  public void open();
  protected javax.swing.JPanel createContents(minidraw.framework.DrawingView, javax.swing.JTextField);
  public void setTool(minidraw.framework.Tool);
  public minidraw.framework.Tool tool();
  public minidraw.framework.DrawingView view();
  public minidraw.framework.Drawing drawing();
  public void showStatus(java.lang.String);
}
Compiled from "NullTool.java"
public class minidraw.standard.NullTool implements minidraw.framework.Tool {
  public minidraw.standard.NullTool();
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void mouseMove(java.awt.event.MouseEvent, int, int);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
  public void activate();
  public void deactivate();
  public void keyDown(java.awt.event.KeyEvent, int);
}
Compiled from "SelectionTool.java"
public class minidraw.standard.SelectionTool extends minidraw.standard.AbstractTool implements minidraw.framework.Tool {
  protected minidraw.framework.Tool fChild;
  protected minidraw.framework.Tool cachedNullTool;
  protected minidraw.framework.Figure draggedFigure;
  minidraw.framework.RubberBandSelectionStrategy selectionStrategy;
  public minidraw.standard.SelectionTool(minidraw.framework.DrawingEditor);
  public minidraw.standard.SelectionTool(minidraw.framework.DrawingEditor, minidraw.framework.RubberBandSelectionStrategy);
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void mouseMove(java.awt.event.MouseEvent, int, int);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
  protected minidraw.framework.Tool createDragTracker(minidraw.framework.Figure);
  protected minidraw.framework.Tool createAreaTracker();
}
Compiled from "StandardDrawing.java"
public class minidraw.standard.StandardDrawing extends minidraw.standard.CompositeFigure implements minidraw.framework.Drawing {
  protected minidraw.framework.SelectionHandler selectionHandler;
  protected minidraw.standard.handlers.StandardDrawingChangeListenerHandler listenerHandler;
  public minidraw.standard.StandardDrawing();
  public void addDrawingChangeListener(minidraw.framework.DrawingChangeListener);
  public void removeDrawingChangeListener(minidraw.framework.DrawingChangeListener);
  public void figureInvalidated(minidraw.framework.FigureChangeEvent);
  public void figureChanged(minidraw.framework.FigureChangeEvent);
  public void requestUpdate();
  public java.util.List<minidraw.framework.Figure> selection();
  public void addToSelection(minidraw.framework.Figure);
  public void removeFromSelection(minidraw.framework.Figure);
  public void toggleSelection(minidraw.framework.Figure);
  public void clearSelection();
  public void basicDisplayBox(int, int);
  public java.awt.Rectangle displayBox();
  public synchronized void lock();
  public synchronized void unlock();
}
Compiled from "StandardDrawingView.java"
public class minidraw.standard.StandardDrawingView extends javax.swing.JPanel implements minidraw.framework.DrawingView,java.awt.event.MouseListener,java.awt.event.MouseMotionListener,java.awt.event.KeyListener {
  protected java.awt.Point fLastClick;
  public minidraw.standard.StandardDrawingView(minidraw.framework.DrawingEditor);
  public minidraw.standard.StandardDrawingView(minidraw.framework.DrawingEditor, java.awt.Dimension);
  public minidraw.framework.DrawingEditor editor();
  public synchronized void checkDamage();
  public synchronized void repairDamage();
  public void paint(java.awt.Graphics);
  public void drawAll(java.awt.Graphics);
  public void drawDrawing(java.awt.Graphics);
  public void drawBackground(java.awt.Graphics);
  public void drawSelectionHighlight(java.awt.Graphics);
  public void drawOverlay(java.awt.Graphics);
  public java.awt.Dimension getPreferredSize();
  public java.awt.Dimension getMinimumSize();
  protected java.awt.Point constrainPoint(java.awt.Point);
  public void mousePressed(java.awt.event.MouseEvent);
  public void mouseDragged(java.awt.event.MouseEvent);
  public void mouseMoved(java.awt.event.MouseEvent);
  public void mouseReleased(java.awt.event.MouseEvent);
  public void mouseEntered(java.awt.event.MouseEvent);
  public void mouseExited(java.awt.event.MouseEvent);
  public void mouseClicked(java.awt.event.MouseEvent);
  public void keyTyped(java.awt.event.KeyEvent);
  public void keyReleased(java.awt.event.KeyEvent);
  public void keyPressed(java.awt.event.KeyEvent);
  public void drawingInvalidated(minidraw.framework.DrawingChangeEvent);
  public void drawingRequestUpdate(minidraw.framework.DrawingChangeEvent);
}
Compiled from "StdViewWithBackground.java"
public class minidraw.standard.StdViewWithBackground extends minidraw.standard.StandardDrawingView {
  java.awt.Image background;
  public minidraw.standard.StdViewWithBackground(minidraw.framework.DrawingEditor, java.lang.String);
  public minidraw.standard.StdViewWithBackground(minidraw.framework.DrawingEditor, java.awt.Image);
  public void drawBackground(java.awt.Graphics);
  public java.awt.Dimension getPreferredSize();
  public java.awt.Dimension getMinimumSize();
}
Compiled from "DragTracker.java"
public class minidraw.standard.handlers.DragTracker extends minidraw.standard.AbstractTool implements minidraw.framework.Tool {
  public minidraw.standard.handlers.DragTracker(minidraw.framework.DrawingEditor, minidraw.framework.Figure);
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void keyDown(java.awt.event.KeyEvent, int);
}
Compiled from "SelectAreaTracker.java"
public class minidraw.standard.handlers.SelectAreaTracker extends minidraw.standard.AbstractTool {
  protected minidraw.framework.RubberBandSelectionStrategy rubberBandSelectionStrategy;
  public minidraw.standard.handlers.SelectAreaTracker(minidraw.framework.DrawingEditor);
  public minidraw.standard.handlers.SelectAreaTracker(minidraw.framework.DrawingEditor, minidraw.framework.RubberBandSelectionStrategy);
  public void mouseDown(java.awt.event.MouseEvent, int, int);
  public void mouseDrag(java.awt.event.MouseEvent, int, int);
  public void mouseUp(java.awt.event.MouseEvent, int, int);
}
Compiled from "StandardDrawingChangeListenerHandler.java"
public class minidraw.standard.handlers.StandardDrawingChangeListenerHandler implements minidraw.framework.DrawingChangeListenerHandler {
  protected java.util.List<minidraw.framework.DrawingChangeListener> fListeners;
  public minidraw.standard.handlers.StandardDrawingChangeListenerHandler();
  public void addDrawingChangeListener(minidraw.framework.DrawingChangeListener);
  public void removeDrawingChangeListener(minidraw.framework.DrawingChangeListener);
  public void fireDrawingInvalidated(minidraw.framework.Drawing, java.awt.Rectangle);
  public void fireDrawingRequestUpdate(minidraw.framework.Drawing);
}
Compiled from "StandardRubberBandSelectionStrategy.java"
public class minidraw.standard.handlers.StandardRubberBandSelectionStrategy implements minidraw.framework.RubberBandSelectionStrategy {
  public minidraw.standard.handlers.StandardRubberBandSelectionStrategy();
  public void selectGroup(minidraw.framework.Drawing, java.awt.Rectangle, boolean);
}
Compiled from "StandardSelectionHandler.java"
public class minidraw.standard.handlers.StandardSelectionHandler implements minidraw.framework.SelectionHandler {
  protected java.util.List<minidraw.framework.Figure> selectionList;
  public minidraw.standard.handlers.StandardSelectionHandler();
  public java.util.List<minidraw.framework.Figure> selection();
  public void addToSelection(minidraw.framework.Figure);
  public void removeFromSelection(minidraw.framework.Figure);
  public void toggleSelection(minidraw.framework.Figure);
  public void clearSelection();
}
