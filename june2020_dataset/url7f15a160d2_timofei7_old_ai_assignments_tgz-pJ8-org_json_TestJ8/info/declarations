Compiled from "MCSolver.java"
public class hw1.MCSolver {
  public hw1.MCSolver();
  public java.util.LinkedList<hw1.MCSolver$State> bfs();
}
Compiled from "MCSolver.java"
class hw1.MCSolver$Node {
  hw1.MCSolver$State state;
  hw1.MCSolver$Node parent;
  double distance;
  final hw1.MCSolver this$0;
  hw1.MCSolver$Node(hw1.MCSolver, hw1.MCSolver$State, hw1.MCSolver$Node, double);
}
Compiled from "MCSolver.java"
public class hw1.MCSolver$State {
  public int missionaries;
  public int cannibals;
  public int boat;
  final hw1.MCSolver this$0;
  public hw1.MCSolver$State(hw1.MCSolver);
  public void set(int, int, int);
  public java.lang.String toString();
  public int get();
  public boolean equals(java.lang.Object);
}
Compiled from "MissionaryCannibalsMain.java"
public class hw1.MissionaryCannibalsMain {
  public hw1.MissionaryCannibalsMain();
  public static void main(java.lang.String[]);
}
Compiled from "P1Main.java"
public class hw2_P1.P1Main {
  public hw2_P1.P1Main();
  public static void main(java.lang.String[]);
}
Compiled from "Parser.java"
public class hw2_P1.Parser {
  javax.swing.text.html.parser.ParserDelegator parser;
  javax.swing.text.html.HTMLEditorKit$ParserCallback callback;
  java.util.ArrayList<java.lang.String> list;
  public hw2_P1.Parser();
  public java.util.LinkedList<java.lang.String> getAnchorsInPage(java.lang.String, java.lang.String);
  public java.lang.String getDomain(java.lang.String);
}
Compiled from "Parser.java"
class hw2_P1.Parser$1 {
}
Compiled from "Parser.java"
class hw2_P1.Parser$ParseTags extends javax.swing.text.html.HTMLEditorKit$ParserCallback {
  final hw2_P1.Parser this$0;
  public void handleStartTag(javax.swing.text.html.HTML$Tag, javax.swing.text.MutableAttributeSet, int);
  hw2_P1.Parser$ParseTags(hw2_P1.Parser, hw2_P1.Parser$1);
}
Compiled from "Path.java"
public class hw2_P1.Path {
  public hw2_P1.Path();
  public void findURLS(java.lang.String, java.lang.String);
  public java.util.LinkedList<java.lang.String> bfs(java.lang.String, java.lang.String);
}
Compiled from "Path.java"
class hw2_P1.Path$Node {
  java.lang.String state;
  hw2_P1.Path$Node parent;
  double distance;
  final hw2_P1.Path this$0;
  hw2_P1.Path$Node(hw2_P1.Path, java.lang.String, hw2_P1.Path$Node, double);
}
Compiled from "Loc.java"
public class hw2_P2.Loc implements java.lang.Cloneable {
  public int x;
  public int y;
  public hw2_P2.Loc(int, int);
  public hw2_P2.Loc(hw2_P2.Loc);
  public hw2_P2.Loc clone();
  public boolean equals(hw2_P2.Loc);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "MLoc.java"
public class hw2_P2.MLoc implements java.lang.Cloneable {
  public java.util.List<hw2_P2.Loc> locs;
  public int id;
  public hw2_P2.MLoc(int);
  public hw2_P2.MLoc(hw2_P2.Loc[]);
  public hw2_P2.MLoc clone();
  public boolean equals(hw2_P2.MLoc);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "MMap.java"
public class hw2_P2.MMap {
  public hw2_P2.Loc[] starts;
  public hw2_P2.Loc[] finishes;
  public java.lang.String[] current_map;
  public hw2_P2.MMap$MapSet currentMap;
  public int numRobots;
  public int gridSize;
  public hw2_P2.MMap(hw2_P2.MMap$MapSet);
  public boolean isCollision(hw2_P2.Loc);
  public boolean isCollision(int, int);
}
Compiled from "MMap.java"
class hw2_P2.MMap$1 {
  static final int[] $SwitchMap$hw2_P2$MMap$MapSet;
  static {};
}
Compiled from "MMap.java"
public final class hw2_P2.MMap$MapSet extends java.lang.Enum<hw2_P2.MMap$MapSet> {
  public static final hw2_P2.MMap$MapSet MAP1;
  public static final hw2_P2.MMap$MapSet MAP2;
  public static final hw2_P2.MMap$MapSet MAP3;
  public static final hw2_P2.MMap$MapSet MAP4;
  public static final hw2_P2.MMap$MapSet MAP5;
  public static final hw2_P2.MMap$MapSet MAP6;
  public static hw2_P2.MMap$MapSet[] values();
  public static hw2_P2.MMap$MapSet valueOf(java.lang.String);
  static {};
}
Compiled from "MNode.java"
public class hw2_P2.MNode implements java.lang.Comparable<hw2_P2.MNode> {
  public hw2_P2.MLoc state;
  public hw2_P2.MNode parent;
  public double G;
  public double H;
  public hw2_P2.MNode(hw2_P2.MLoc, hw2_P2.MNode, double, double);
  public double distance();
  public int compareTo(hw2_P2.MNode);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "MPriorityHashQueue.java"
public class hw2_P2.MPriorityHashQueue extends java.util.PriorityQueue<hw2_P2.MNode> {
  public hw2_P2.MPriorityHashQueue();
  public boolean add(hw2_P2.MNode);
  public boolean contains(java.lang.Object);
  public hw2_P2.MNode poll();
  public void clear();
  public boolean remove(java.lang.Object);
  public boolean update(hw2_P2.MNode, hw2_P2.MNode);
  public hw2_P2.MNode get(hw2_P2.MLoc);
  public java.lang.Object poll();
  public boolean add(java.lang.Object);
}
Compiled from "Node.java"
public class hw2_P2.Node implements java.lang.Comparable<hw2_P2.Node> {
  public hw2_P2.Loc state;
  public hw2_P2.Node parent;
  public double G;
  public double H;
  int rid;
  public hw2_P2.Node(hw2_P2.Loc, hw2_P2.Node, double, double);
  hw2_P2.Node(double, int);
  public double distance();
  public int compareTo(hw2_P2.Node);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "P2Graphical.java"
public class hw2_P2.P2Graphical extends java.applet.Applet implements java.awt.event.ActionListener {
  public hw2_P2.P2Graphical();
  public void init();
  public void paint(java.awt.Graphics);
  public void actionPerformed(java.awt.event.ActionEvent);
  static java.util.ArrayList access$000(hw2_P2.P2Graphical);
  static hw2_P2.MMap access$100(hw2_P2.P2Graphical);
}
Compiled from "P2Graphical.java"
public class hw2_P2.P2Graphical$frameManager {
  final hw2_P2.P2Graphical this$0;
  hw2_P2.P2Graphical$frameManager(hw2_P2.P2Graphical);
  public boolean isRobot(int, int, int);
  public void next();
}
Compiled from "P2Main.java"
public class hw2_P2.P2Main {
  public hw2_P2.P2Main();
  public static void main(java.lang.String[]);
}
Compiled from "PriorityHashQueue.java"
public class hw2_P2.PriorityHashQueue extends java.util.PriorityQueue<hw2_P2.Node> {
  public hw2_P2.PriorityHashQueue();
  public boolean add(hw2_P2.Node);
  public boolean contains(java.lang.Object);
  public hw2_P2.Node poll();
  public void clear();
  public boolean remove(java.lang.Object);
  public boolean update(hw2_P2.Node, hw2_P2.Node);
  public hw2_P2.Node get(hw2_P2.Loc);
  public java.lang.Object poll();
  public boolean add(java.lang.Object);
}
Compiled from "RobotSolver.java"
public class hw2_P2.RobotSolver {
  public hw2_P2.MMap map;
  public java.util.ArrayList<java.util.LinkedList<hw2_P2.Loc>> solutions;
  public java.util.LinkedList<hw2_P2.MLoc> mSolutions;
  public hw2_P2.RobotSolver();
  public void Solve(hw2_P2.MMap$MapSet);
  public java.util.ArrayList<hw2_P2.MLoc> getMoves(hw2_P2.MLoc, int);
}
Compiled from "Loc.java"
public class hw2_P3.Loc {
  public int x;
  public int y;
  public hw2_P3.Loc(int, int);
  public hw2_P3.Loc(hw2_P3.Loc);
  public hw2_P3.Loc clone();
  public boolean equals(hw2_P3.Loc);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
}
Compiled from "MMap.java"
public class hw2_P3.MMap {
  public hw2_P3.Loc finish;
  public java.lang.String[] current_map;
  public hw2_P3.MMap$MapSet currentMap;
  public int gridSize;
  public hw2_P3.MMap(hw2_P3.MMap$MapSet);
  public boolean isCollision(hw2_P3.Loc);
  public boolean isCollision(int, int);
}
Compiled from "MMap.java"
class hw2_P3.MMap$1 {
  static final int[] $SwitchMap$hw2_P3$MMap$MapSet;
  static {};
}
Compiled from "MMap.java"
public final class hw2_P3.MMap$MapSet extends java.lang.Enum<hw2_P3.MMap$MapSet> {
  public static final hw2_P3.MMap$MapSet MAP1;
  public static final hw2_P3.MMap$MapSet MAP2;
  public static final hw2_P3.MMap$MapSet MAP3;
  public static final hw2_P3.MMap$MapSet MAP4;
  public static hw2_P3.MMap$MapSet[] values();
  public static hw2_P3.MMap$MapSet valueOf(java.lang.String);
  static {};
}
Compiled from "Node.java"
public class hw2_P3.Node {
  public hw2_P3.State state;
  public hw2_P3.Node parent;
  public double distance;
  hw2_P3.Node(hw2_P3.State, hw2_P3.Node, double);
}
Compiled from "P3Main.java"
public class hw2_P3.P3Main {
  public hw2_P3.P3Main();
  public static void main(java.lang.String[]);
}
Compiled from "SenselessSolver.java"
public class hw2_P3.SenselessSolver {
  public hw2_P3.MMap map;
  public java.util.LinkedList<hw2_P3.State> mSolutions;
  public hw2_P3.SenselessSolver(hw2_P3.MMap);
  public void Solve();
  public java.util.ArrayList<hw2_P3.State> getMovesCorrectlyPlease(hw2_P3.State);
}
Compiled from "SenselessSolver.java"
public final class hw2_P3.SenselessSolver$ActionSet extends java.lang.Enum<hw2_P3.SenselessSolver$ActionSet> {
  public static final hw2_P3.SenselessSolver$ActionSet NORTH;
  public static final hw2_P3.SenselessSolver$ActionSet SOUTH;
  public static final hw2_P3.SenselessSolver$ActionSet EAST;
  public static final hw2_P3.SenselessSolver$ActionSet WEST;
  public static hw2_P3.SenselessSolver$ActionSet[] values();
  public static hw2_P3.SenselessSolver$ActionSet valueOf(java.lang.String);
  static {};
}
Compiled from "State.java"
public class hw2_P3.State extends java.util.HashSet<hw2_P3.Loc> implements java.lang.Cloneable {
  public int id;
  public hw2_P3.State();
  public hw2_P3.State clone();
  public boolean equals(hw2_P3.State);
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
}
Compiled from "CSP.java"
public class hw4.CSP {
  public java.util.Hashtable<java.lang.Integer, java.lang.String> variableNames;
  public java.util.Hashtable<java.lang.Integer, java.lang.String> valueNames;
  public int count;
  public hw4.CSP(java.lang.String, java.lang.String);
  public void addConstraint(java.lang.String, java.lang.String, java.lang.String);
  public boolean checkAssignment(hw4.PartialAssignment);
  public hw4.Solution backtrackingSearch(hw4.PartialAssignment);
  public hw4.Solution backtrackingSearchMRV(hw4.PartialAssignment, hw4.DomainList);
  public hw4.Solution backtrackingSearchMRVLCV(hw4.PartialAssignment, hw4.DomainList);
  public hw4.DomainList forwardCheck(java.lang.Integer, java.lang.Integer, hw4.PartialAssignment, hw4.DomainList);
  public void outputCNF();
}
Compiled from "CSP.java"
class hw4.CSP$priorInt implements java.lang.Comparable<hw4.CSP$priorInt> {
  public int priority;
  public int value;
  final hw4.CSP this$0;
  hw4.CSP$priorInt(hw4.CSP, int, int);
  public int compareTo(hw4.CSP$priorInt);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "CircuitProblem.java"
public class hw4.CircuitProblem {
  public int height;
  public int width;
  public int size;
  public java.util.ArrayList<hw4.Rect> compList;
  static final boolean $assertionsDisabled;
  public hw4.CircuitProblem();
  public void add(hw4.Rect);
  public java.lang.String toString();
  public static java.util.ArrayList<hw4.CircuitProblem> loadCircuitProblems(java.lang.String);
  static {};
}
Compiled from "Constraint.java"
public class hw4.Constraint {
  public java.util.HashSet<hw4.IntegerPair> allowedPairs;
  public hw4.Constraint(java.lang.String, java.util.Hashtable<java.lang.String, java.lang.Integer>);
  boolean satisfied(int, int);
  public java.lang.String toString();
}
Compiled from "DomainList.java"
public class hw4.DomainList implements java.lang.Cloneable {
  public java.util.ArrayList<java.util.LinkedHashSet<java.lang.Integer>> domains;
  public int numVariables;
  public hw4.DomainList(int, int);
  public void deleteValue(int, int);
  public void addValue(int, int);
  public java.util.Set<java.lang.Integer> getValues(int);
  public java.lang.String toString();
  public java.lang.String toString(java.lang.Object, java.lang.reflect.Method, int);
  public java.lang.Object clone();
}
Compiled from "HW4Main.java"
public class hw4.HW4Main {
  public hw4.HW4Main();
  public static void main(java.lang.String[]);
  public static boolean solve(hw4.CircuitProblem);
  public static void test();
  public static void printDL(hw4.DomainList, hw4.CircuitProblem);
  public static java.util.Set<java.lang.Integer> coordSet(int, int, hw4.Rect);
  public static void printSolution(java.util.Map<java.lang.String, java.lang.String>, hw4.CircuitProblem);
}
Compiled from "IntegerPair.java"
public class hw4.IntegerPair {
  public int first;
  public int second;
  public hw4.IntegerPair(int, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public void sort();
}
Compiled from "PartialAssignment.java"
public class hw4.PartialAssignment implements java.lang.Cloneable {
  public hw4.PartialAssignment(int);
  public int get(int);
  public void set(int, int);
  public java.util.Map<java.lang.String, java.lang.String> prettyPrint(java.util.Hashtable<java.lang.Integer, java.lang.String>, java.util.Hashtable<java.lang.Integer, java.lang.String>);
  public java.util.ArrayList<java.lang.Integer> getUnassignedVariables();
  public java.lang.Object clone();
}
Compiled from "Rect.java"
public class hw4.Rect {
  public int width;
  public int height;
  public hw4.Rect();
  public hw4.Rect(int, int);
  public java.lang.String toString();
  public static java.lang.String intToString(int, int);
  public int toInt(int);
  public static int getInt(int, int, int);
  public static hw4.Rect fromInt(int, int);
}
Compiled from "Solution.java"
public class hw4.Solution {
  public boolean value;
  public java.util.Map<java.lang.String, java.lang.String> assignment;
  public hw4.Solution(boolean, java.util.Map<java.lang.String, java.lang.String>);
}
Compiled from "Characters.java"
public class hw5.Characters {
  public java.util.Map<java.lang.String, java.lang.Integer> bigrams;
  public java.util.Map<java.lang.String, java.lang.Integer> trigrams;
  public final char[] dict;
  public int bigramTotal;
  public int trigramTotal;
  public hw5.Characters(java.lang.String);
  public java.lang.Character nextChar(java.lang.String);
  public java.lang.String build(java.lang.String);
  public double sP(java.lang.String);
  public double bigramCondProb(java.lang.Character, java.lang.String);
}
Compiled from "Node.java"
public class hw5.Node {
  public java.lang.String state;
  public hw5.Node parent;
  public java.lang.Double probability;
  public boolean log;
  public hw5.Node(java.lang.String, hw5.Node, java.lang.Double);
  public hw5.Node(java.lang.String, hw5.Node, java.lang.Double, boolean);
  public java.lang.String toString();
  public void updateMax(java.lang.String, hw5.Node, java.lang.Double);
}
Compiled from "P1Main.java"
public class hw5.P1Main {
  public hw5.P1Main();
  public static void main(java.lang.String[]);
}
Compiled from "P2Main.java"
public class hw5.P2Main {
  public hw5.P2Main();
  public static void main(java.lang.String[]);
}
Compiled from "P3aMain.java"
public class hw5.P3aMain {
  public hw5.P3aMain();
  public static void main(java.lang.String[]);
}
Compiled from "P3bMain.java"
public class hw5.P3bMain {
  public hw5.P3bMain();
  public static void main(java.lang.String[]);
}
Compiled from "SpellCharacters.java"
public class hw5.SpellCharacters {
  public java.util.Map<java.lang.String, java.lang.Integer> bigrams;
  public java.util.Map<java.lang.String, java.lang.Integer> trigrams;
  public final char[] dict;
  public int bigramTotal;
  public int trigramTotal;
  public java.lang.String string;
  public hw5.SpellCharacters(java.lang.String);
  public java.lang.Character nextChar(java.lang.String);
  public java.lang.String build(java.lang.String);
  public double sP(java.lang.String);
  public double bigramCondProb(java.lang.Character, java.lang.String);
}
Compiled from "SpellCheck.java"
public class hw5.SpellCheck {
  public hw5.SpellCharacters tchars;
  public hw5.SpellCharacters echars;
  public final boolean logOn;
  public hw5.SpellCheck(java.lang.String, java.lang.String);
  public void viterbi();
}
Compiled from "SpellCheck.java"
class hw5.SpellCheck$SensorModel {
  final hw5.SpellCheck this$0;
  hw5.SpellCheck$SensorModel(hw5.SpellCheck);
  java.lang.Double get(java.lang.String, java.lang.String);
}
Compiled from "SpellCheck.java"
class hw5.SpellCheck$TransitionModel {
  java.util.LinkedList<java.lang.String> last;
  final hw5.SpellCheck this$0;
  hw5.SpellCheck$TransitionModel(hw5.SpellCheck);
  void setLast(java.lang.String);
  java.lang.Double get(java.lang.String, java.lang.String);
}
Compiled from "SpellCheck.java"
class hw5.SpellCheck$initial_probability {
  static java.lang.Double get(java.lang.String);
}
Compiled from "Umbrellas.java"
public class hw5.Umbrellas {
  public hw5.Umbrellas();
  public void viterbi();
}
Compiled from "Words.java"
public class hw5.Words {
  public java.util.Map<java.lang.String, java.lang.Integer> bigrams;
  public java.util.Map<java.lang.String, java.lang.Integer> trigrams;
  public java.util.SortedSet<hw5.Words$sortString> sortedDict;
  public java.util.HashMap<java.lang.String, java.lang.Integer> dict;
  public int bigramTotal;
  public int trigramTotal;
  public hw5.Words(java.lang.String);
  public java.lang.String nextWord(java.lang.String);
  public java.lang.String buildSentence(java.lang.String);
  public double sP(java.lang.String);
  public double bigramCondProb(java.lang.String, java.lang.String);
}
Compiled from "Words.java"
class hw5.Words$sortString implements java.lang.Comparable<hw5.Words$sortString> {
  public java.lang.String string;
  public int count;
  final hw5.Words this$0;
  hw5.Words$sortString(hw5.Words, java.lang.String, int);
  public int compareTo(hw5.Words$sortString);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
}
Compiled from "CDL.java"
public class org.json.CDL {
  public org.json.CDL();
  public static org.json.JSONArray rowToJSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public static org.json.JSONObject rowToJSONObject(org.json.JSONArray, org.json.JSONTokener) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(java.lang.String) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.JSONArray, java.lang.String) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.JSONArray, org.json.JSONTokener) throws org.json.JSONException;
  public static java.lang.String rowToString(org.json.JSONArray);
  public static java.lang.String toString(org.json.JSONArray) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONArray, org.json.JSONArray) throws org.json.JSONException;
}
Compiled from "Cookie.java"
public class org.json.Cookie {
  public org.json.Cookie();
  public static java.lang.String escape(java.lang.String);
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
  public static java.lang.String unescape(java.lang.String);
}
Compiled from "CookieList.java"
public class org.json.CookieList {
  public org.json.CookieList();
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
}
Compiled from "HTTP.java"
public class org.json.HTTP {
  public static final java.lang.String CRLF;
  public org.json.HTTP();
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
}
Compiled from "HTTPTokener.java"
public class org.json.HTTPTokener extends org.json.JSONTokener {
  public org.json.HTTPTokener(java.lang.String);
  public java.lang.String nextToken() throws org.json.JSONException;
}
Compiled from "JSONArray.java"
public class org.json.JSONArray {
  public org.json.JSONArray();
  public org.json.JSONArray(org.json.JSONTokener) throws org.json.JSONException;
  public org.json.JSONArray(java.lang.String) throws org.json.JSONException;
  public org.json.JSONArray(java.util.Collection);
  public org.json.JSONArray(java.util.Collection, boolean);
  public org.json.JSONArray(java.lang.Object) throws org.json.JSONException;
  public org.json.JSONArray(java.lang.Object, boolean) throws org.json.JSONException;
  public java.lang.Object get(int) throws org.json.JSONException;
  public boolean getBoolean(int) throws org.json.JSONException;
  public double getDouble(int) throws org.json.JSONException;
  public int getInt(int) throws org.json.JSONException;
  public org.json.JSONArray getJSONArray(int) throws org.json.JSONException;
  public org.json.JSONObject getJSONObject(int) throws org.json.JSONException;
  public long getLong(int) throws org.json.JSONException;
  public java.lang.String getString(int) throws org.json.JSONException;
  public boolean isNull(int);
  public java.lang.String join(java.lang.String) throws org.json.JSONException;
  public int length();
  public java.lang.Object opt(int);
  public boolean optBoolean(int);
  public boolean optBoolean(int, boolean);
  public double optDouble(int);
  public double optDouble(int, double);
  public int optInt(int);
  public int optInt(int, int);
  public org.json.JSONArray optJSONArray(int);
  public org.json.JSONObject optJSONObject(int);
  public long optLong(int);
  public long optLong(int, long);
  public java.lang.String optString(int);
  public java.lang.String optString(int, java.lang.String);
  public org.json.JSONArray put(boolean);
  public org.json.JSONArray put(java.util.Collection);
  public org.json.JSONArray put(double) throws org.json.JSONException;
  public org.json.JSONArray put(int);
  public org.json.JSONArray put(long);
  public org.json.JSONArray put(java.util.Map);
  public org.json.JSONArray put(java.lang.Object);
  public org.json.JSONArray put(int, boolean) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.util.Collection) throws org.json.JSONException;
  public org.json.JSONArray put(int, double) throws org.json.JSONException;
  public org.json.JSONArray put(int, int) throws org.json.JSONException;
  public org.json.JSONArray put(int, long) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.util.Map) throws org.json.JSONException;
  public org.json.JSONArray put(int, java.lang.Object) throws org.json.JSONException;
  public java.lang.Object remove(int);
  public org.json.JSONObject toJSONObject(org.json.JSONArray) throws org.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws org.json.JSONException;
  java.lang.String toString(int, int) throws org.json.JSONException;
  public java.io.Writer write(java.io.Writer) throws org.json.JSONException;
}
Compiled from "JSONException.java"
public class org.json.JSONException extends java.lang.Exception {
  public org.json.JSONException(java.lang.String);
  public org.json.JSONException(java.lang.Throwable);
  public java.lang.Throwable getCause();
}
Compiled from "JSONML.java"
public class org.json.JSONML {
  public org.json.JSONML();
  public static org.json.JSONArray toJSONArray(java.lang.String) throws org.json.JSONException;
  public static org.json.JSONArray toJSONArray(org.json.XMLTokener) throws org.json.JSONException;
  public static org.json.JSONObject toJSONObject(org.json.XMLTokener) throws org.json.JSONException;
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONArray) throws org.json.JSONException;
  public static java.lang.String toString(org.json.JSONObject) throws org.json.JSONException;
}
Compiled from "JSONObject.java"
public class org.json.JSONObject {
  public static final java.lang.Object NULL;
  public org.json.JSONObject();
  public org.json.JSONObject(org.json.JSONObject, java.lang.String[]) throws org.json.JSONException;
  public org.json.JSONObject(org.json.JSONTokener) throws org.json.JSONException;
  public org.json.JSONObject(java.util.Map);
  public org.json.JSONObject(java.util.Map, boolean);
  public org.json.JSONObject(java.lang.Object);
  public org.json.JSONObject(java.lang.Object, boolean);
  static boolean isStandardProperty(java.lang.Class);
  public org.json.JSONObject(java.lang.Object, java.lang.String[]);
  public org.json.JSONObject(java.lang.String) throws org.json.JSONException;
  public org.json.JSONObject accumulate(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject append(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public static java.lang.String doubleToString(double);
  public java.lang.Object get(java.lang.String) throws org.json.JSONException;
  public boolean getBoolean(java.lang.String) throws org.json.JSONException;
  public double getDouble(java.lang.String) throws org.json.JSONException;
  public int getInt(java.lang.String) throws org.json.JSONException;
  public org.json.JSONArray getJSONArray(java.lang.String) throws org.json.JSONException;
  public org.json.JSONObject getJSONObject(java.lang.String) throws org.json.JSONException;
  public long getLong(java.lang.String) throws org.json.JSONException;
  public static java.lang.String[] getNames(org.json.JSONObject);
  public static java.lang.String[] getNames(java.lang.Object);
  public java.lang.String getString(java.lang.String) throws org.json.JSONException;
  public boolean has(java.lang.String);
  public boolean isNull(java.lang.String);
  public java.util.Iterator keys();
  public int length();
  public org.json.JSONArray names();
  public static java.lang.String numberToString(java.lang.Number) throws org.json.JSONException;
  public java.lang.Object opt(java.lang.String);
  public boolean optBoolean(java.lang.String);
  public boolean optBoolean(java.lang.String, boolean);
  public org.json.JSONObject put(java.lang.String, java.util.Collection) throws org.json.JSONException;
  public double optDouble(java.lang.String);
  public double optDouble(java.lang.String, double);
  public int optInt(java.lang.String);
  public int optInt(java.lang.String, int);
  public org.json.JSONArray optJSONArray(java.lang.String);
  public org.json.JSONObject optJSONObject(java.lang.String);
  public long optLong(java.lang.String);
  public long optLong(java.lang.String, long);
  public java.lang.String optString(java.lang.String);
  public java.lang.String optString(java.lang.String, java.lang.String);
  public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, int) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, long) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.util.Map) throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject putOnce(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public org.json.JSONObject putOpt(java.lang.String, java.lang.Object) throws org.json.JSONException;
  public static java.lang.String quote(java.lang.String);
  public java.lang.Object remove(java.lang.String);
  public java.util.Iterator sortedKeys();
  public static java.lang.Object stringToValue(java.lang.String);
  static void testValidity(java.lang.Object) throws org.json.JSONException;
  public org.json.JSONArray toJSONArray(org.json.JSONArray) throws org.json.JSONException;
  public java.lang.String toString();
  public java.lang.String toString(int) throws org.json.JSONException;
  java.lang.String toString(int, int) throws org.json.JSONException;
  static java.lang.String valueToString(java.lang.Object) throws org.json.JSONException;
  static java.lang.String valueToString(java.lang.Object, int, int) throws org.json.JSONException;
  public java.io.Writer write(java.io.Writer) throws org.json.JSONException;
  static {};
}
Compiled from "JSONObject.java"
class org.json.JSONObject$1 {
}
Compiled from "JSONObject.java"
final class org.json.JSONObject$Null {
  protected final java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  org.json.JSONObject$Null(org.json.JSONObject$1);
}
Compiled from "JSONString.java"
public interface org.json.JSONString {
  public abstract java.lang.String toJSONString();
}
Compiled from "JSONStringer.java"
public class org.json.JSONStringer extends org.json.JSONWriter {
  public org.json.JSONStringer();
  public java.lang.String toString();
}
Compiled from "JSONTokener.java"
public class org.json.JSONTokener {
  public org.json.JSONTokener(java.io.Reader);
  public org.json.JSONTokener(java.lang.String);
  public void back() throws org.json.JSONException;
  public static int dehexchar(char);
  public boolean more() throws org.json.JSONException;
  public char next() throws org.json.JSONException;
  public char next(char) throws org.json.JSONException;
  public java.lang.String next(int) throws org.json.JSONException;
  public char nextClean() throws org.json.JSONException;
  public java.lang.String nextString(char) throws org.json.JSONException;
  public java.lang.String nextTo(char) throws org.json.JSONException;
  public java.lang.String nextTo(java.lang.String) throws org.json.JSONException;
  public java.lang.Object nextValue() throws org.json.JSONException;
  public char skipTo(char) throws org.json.JSONException;
  public org.json.JSONException syntaxError(java.lang.String);
  public java.lang.String toString();
}
Compiled from "JSONWriter.java"
public class org.json.JSONWriter {
  protected char mode;
  protected java.io.Writer writer;
  public org.json.JSONWriter(java.io.Writer);
  public org.json.JSONWriter array() throws org.json.JSONException;
  public org.json.JSONWriter endArray() throws org.json.JSONException;
  public org.json.JSONWriter endObject() throws org.json.JSONException;
  public org.json.JSONWriter key(java.lang.String) throws org.json.JSONException;
  public org.json.JSONWriter object() throws org.json.JSONException;
  public org.json.JSONWriter value(boolean) throws org.json.JSONException;
  public org.json.JSONWriter value(double) throws org.json.JSONException;
  public org.json.JSONWriter value(long) throws org.json.JSONException;
  public org.json.JSONWriter value(java.lang.Object) throws org.json.JSONException;
}
Compiled from "Test.java"
public class org.json.Test {
  public org.json.Test();
  public static void main(java.lang.String[]);
}
Compiled from "Test.java"
class org.json.Test$1Obj implements org.json.JSONString {
  public java.lang.String aString;
  public double aNumber;
  public boolean aBoolean;
  public org.json.Test$1Obj(java.lang.String, double, boolean);
  public double getNumber();
  public java.lang.String getString();
  public boolean isBoolean();
  public java.lang.String getBENT();
  public java.lang.String getX();
  public java.lang.String toJSONString();
  public java.lang.String toString();
}
Compiled from "XML.java"
public class org.json.XML {
  public static final java.lang.Character AMP;
  public static final java.lang.Character APOS;
  public static final java.lang.Character BANG;
  public static final java.lang.Character EQ;
  public static final java.lang.Character GT;
  public static final java.lang.Character LT;
  public static final java.lang.Character QUEST;
  public static final java.lang.Character QUOT;
  public static final java.lang.Character SLASH;
  public org.json.XML();
  public static java.lang.String escape(java.lang.String);
  public static void noSpace(java.lang.String) throws org.json.JSONException;
  public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException;
  public static java.lang.String toString(java.lang.Object) throws org.json.JSONException;
  public static java.lang.String toString(java.lang.Object, java.lang.String) throws org.json.JSONException;
  static {};
}
Compiled from "XMLTokener.java"
public class org.json.XMLTokener extends org.json.JSONTokener {
  public static final java.util.HashMap entity;
  public org.json.XMLTokener(java.lang.String);
  public java.lang.String nextCDATA() throws org.json.JSONException;
  public java.lang.Object nextContent() throws org.json.JSONException;
  public java.lang.Object nextEntity(char) throws org.json.JSONException;
  public java.lang.Object nextMeta() throws org.json.JSONException;
  public java.lang.Object nextToken() throws org.json.JSONException;
  public boolean skipPast(java.lang.String) throws org.json.JSONException;
  static {};
}
