
package net.slreynolds.ds.export;

import java.awt.Color;
import java.io.IOException;
import java.io.PrintStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;


/**
 * Export graph to a Tulip file. See <a href="http://tulip.labri.fr">http://tulip.labri.fr</a>.
 */
public class TulipExporter extends AbstractSimpleExporter {
        
    private List<ExportVertex> nodes = new LinkedList<ExportVertex>();
    private List<ExportEdge> edges = new LinkedList<ExportEdge>();
    private PrintStream ostream = null;
    
    @Override
    protected void resetExportSession(Map<String,Object> opts) throws IOException {
    	nodes.clear();
    	edges.clear();
    	super.resetExportSession(opts);
    	ostream = makePrintStream(opts);
    }
    
    @Override
    protected void startExportSession() {
    	String uname = System.getProperty("user.name");
    	DateFormat dformat = new SimpleDateFormat("yyyy-M-d-H:m:s");
    	String dateStr = dformat.format(new Date());
    	String header = "(tlp \"2.0\"\n" +
    			"(date \"%s\")\n" + 
    			"(comments \"This file was generated by TulipExporter.\")\n" +
    			"(author \"%s\")\n";    
    	ostream.printf(header,dateStr,uname);
    }
    
    @Override
    protected void exportVertex(ExportVertex vertex) {
		nodes.add(vertex);
	}
    
    @Override
    protected void exportEdge(ExportEdge edge) {
    	edges.add(edge);
	}
    
    @Override
    protected void  finishExportSession() {
    	/*--- nodes ---*/
    	ostream.printf("(nodes");
    	for (ExportVertex node : nodes) {
    		ostream.printf(" %d",node.getID());
    	}
    	ostream.printf(")\n\n");
    	
    	/*--- edges ---*/
    	for (ExportEdge edge : edges) {
    		ostream.printf("(edge %d %d %d)\n",edge.getID(),edge.getFromID(),edge.getToID());
    	}  
    	
    	/*--- node color ---*/
    	ostream.printf("\n; node colors\n");
    	ostream.printf("(property 0 color \"viewColor\"\n   (default \"(235,0,23,255)\" \"(0,0,255,255)\")\n");
    	for (ExportVertex node : nodes) {
    		Color c = getColor(node.getGeneration());
    		ostream.printf("(node %d \"(%d,%d,%d,%d)\")\n",node.getID(),
    				c.getRed(),c.getGreen(),c.getBlue(),c.getAlpha());
    	}
    	ostream.printf(")\n");
    	
    	/*--- node label ---*/
    	ostream.printf("\n; node labels\n");
    	ostream.printf("(property 0 string \"viewLabel\"\n   (default \"\" \"\")\n");
    	for (ExportVertex node : nodes) {
    		ostream.printf("(node %d \"%s\")\n",node.getID(),
    				node.getLabel());
    	}
    	ostream.printf(")\n");
    	
    	/*--- node size ---*/
    	ostream.printf("\n; node size (w,h,d)\n");
    	ostream.printf("(property 0 size \"viewSize\"\n   (default \"(2,2,2)\" \"(1,1,1)\")\n");
    	ostream.printf(")\n");
    	
    	/*--- label position ---*/
    	ostream.printf("\n; label position. 4 means Right.\n");
    	ostream.printf("(property 0 int \"viewLabelPosition\"\n   (default \"4\" \"4\")\n");
    	ostream.printf(")\n");
    	
    	/*--- edge end shape ---*/
    	ostream.printf("\n; edge end shape 50 is arrow\n");
    	ostream.printf("(property 0 int \"viewTgtAnchorShape\"\n   (default \"-1\" \"50\")\n");
    	ostream.printf(")\n");
    	
    	/*--- edge end size ---*/
    	ostream.printf("\n; edge end size (w,h,d)\n");
    	ostream.printf("(property 0 size \"viewTgtAnchorSize\"\n   (default \"(2,2,2)\" \"(4,4,4)\")\n");
    	ostream.printf(")\n");
    	
    	/*--- display parameters ---*/
    	ostream.printf("\n; display parameters\n");
    	ostream.printf("(displaying \n");
    	ostream.printf("(bool \"arrow\" true)\n(bool \"nodeLabel\" true)\n(bool \"edgeLabel\" false)\n");
    	ostream.printf(")\n");
    	
    	/*--- close top level parens ---*/
    	ostream.printf(")\n");
    	ostream.close();
    	nodes.clear();
    	edges.clear();
    }
    
}
