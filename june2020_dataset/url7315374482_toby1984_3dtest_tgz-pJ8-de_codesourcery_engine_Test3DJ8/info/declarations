Compiled from "Test3D.java"
public class de.codesourcery.engine.Test3D {
  public static final int NUM_CUBES;
  public de.codesourcery.engine.Test3D();
  public static void main(java.lang.String[]) throws java.lang.InterruptedException;
  public void run() throws java.lang.InterruptedException;
  public de.codesourcery.engine.render.Object3D makeRandomizedCopy(int, de.codesourcery.engine.render.Object3D);
  static float access$002(de.codesourcery.engine.Test3D, float);
  static float access$000(de.codesourcery.engine.Test3D);
}
Compiled from "Test3D.java"
class de.codesourcery.engine.Test3D$1 extends de.codesourcery.engine.render.Panel3D {
  final de.codesourcery.engine.render.World val$world;
  final java.util.concurrent.atomic.AtomicReference val$fov;
  final de.codesourcery.engine.Test3D this$0;
  de.codesourcery.engine.Test3D$1(de.codesourcery.engine.Test3D, de.codesourcery.engine.render.SoftwareRenderer, de.codesourcery.engine.render.World, java.util.concurrent.atomic.AtomicReference);
  protected void panelResized(int, int);
}
Compiled from "Test3D.java"
class de.codesourcery.engine.Test3D$2 extends de.codesourcery.engine.render.MouseMotionTracker {
  final de.codesourcery.engine.render.Camera val$camera;
  final de.codesourcery.engine.render.Panel3D val$canvas;
  final javax.swing.JFrame val$frame;
  final de.codesourcery.engine.Test3D this$0;
  de.codesourcery.engine.Test3D$2(de.codesourcery.engine.Test3D, de.codesourcery.engine.render.Camera, de.codesourcery.engine.render.Panel3D, javax.swing.JFrame);
  protected void updateEyeTarget(float, float, float);
  public void setTrackingEnabled(boolean);
}
Compiled from "Test3D.java"
class de.codesourcery.engine.Test3D$3 extends java.awt.event.MouseMotionAdapter {
  final de.codesourcery.engine.render.MouseMotionTracker val$tracker;
  final de.codesourcery.engine.Test3D this$0;
  de.codesourcery.engine.Test3D$3(de.codesourcery.engine.Test3D, de.codesourcery.engine.render.MouseMotionTracker);
  public void mouseMoved(java.awt.event.MouseEvent);
}
Compiled from "Test3D.java"
class de.codesourcery.engine.Test3D$4 extends java.awt.event.MouseAdapter {
  final de.codesourcery.engine.render.MouseMotionTracker val$tracker;
  final de.codesourcery.engine.Test3D this$0;
  de.codesourcery.engine.Test3D$4(de.codesourcery.engine.Test3D, de.codesourcery.engine.render.MouseMotionTracker);
  public void mouseClicked(java.awt.event.MouseEvent);
}
Compiled from "Test3D.java"
class de.codesourcery.engine.Test3D$5 extends java.awt.event.FocusAdapter {
  final de.codesourcery.engine.render.MouseMotionTracker val$tracker;
  final de.codesourcery.engine.Test3D this$0;
  de.codesourcery.engine.Test3D$5(de.codesourcery.engine.Test3D, de.codesourcery.engine.render.MouseMotionTracker);
  public void focusLost(java.awt.event.FocusEvent);
}
Compiled from "Test3D.java"
class de.codesourcery.engine.Test3D$6 extends java.awt.event.KeyAdapter {
  final de.codesourcery.engine.render.MouseMotionTracker val$tracker;
  final java.util.concurrent.atomic.AtomicReference val$fov;
  final de.codesourcery.engine.render.World val$world;
  final de.codesourcery.engine.render.Camera val$camera;
  final de.codesourcery.engine.Test3D this$0;
  de.codesourcery.engine.Test3D$6(de.codesourcery.engine.Test3D, de.codesourcery.engine.render.MouseMotionTracker, java.util.concurrent.atomic.AtomicReference, de.codesourcery.engine.render.World, de.codesourcery.engine.render.Camera);
  public void keyPressed(java.awt.event.KeyEvent);
}
Compiled from "Test3D.java"
class de.codesourcery.engine.Test3D$7 implements de.codesourcery.engine.math.Function2D {
  final de.codesourcery.engine.Test3D this$0;
  de.codesourcery.engine.Test3D$7(de.codesourcery.engine.Test3D);
  public float apply(float, float);
}
Compiled from "IConvexPolygon.java"
public interface de.codesourcery.engine.geom.IConvexPolygon {
  public abstract de.codesourcery.engine.linalg.Vector4 p1();
  public abstract de.codesourcery.engine.linalg.Vector4 p2();
  public abstract de.codesourcery.engine.linalg.Vector4 p3();
  public abstract de.codesourcery.engine.linalg.Vector4[] getAllPoints();
  public abstract void setColor(int);
  public abstract int getColor();
  public abstract byte getVertexCount();
}
Compiled from "Quad.java"
public final class de.codesourcery.engine.geom.Quad implements de.codesourcery.engine.geom.IConvexPolygon {
  public de.codesourcery.engine.geom.Quad(de.codesourcery.engine.linalg.Vector4[]);
  public de.codesourcery.engine.geom.Quad(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  public void reverseVertices();
  public de.codesourcery.engine.linalg.Vector4 p1();
  public de.codesourcery.engine.linalg.Vector4 p2();
  public de.codesourcery.engine.linalg.Vector4 p3();
  public de.codesourcery.engine.linalg.Vector4[] getAllPoints();
  public void setColor(int);
  public int getColor();
  public final byte getVertexCount();
}
Compiled from "Triangle.java"
public final class de.codesourcery.engine.geom.Triangle implements de.codesourcery.engine.geom.IConvexPolygon {
  public de.codesourcery.engine.geom.Triangle(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  public de.codesourcery.engine.geom.Triangle(int, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  public de.codesourcery.engine.geom.Triangle(de.codesourcery.engine.linalg.Vector4[]);
  public void setColor(int);
  public int getColor();
  public de.codesourcery.engine.linalg.Vector4 p1();
  public de.codesourcery.engine.linalg.Vector4 p2();
  public de.codesourcery.engine.linalg.Vector4 p3();
  public java.lang.String toString();
  public de.codesourcery.engine.linalg.Vector4[] getAllPoints();
  public final byte getVertexCount();
}
Compiled from "BoundingBox.java"
public class de.codesourcery.engine.linalg.BoundingBox {
  public de.codesourcery.engine.linalg.BoundingBox createCopy();
  public de.codesourcery.engine.linalg.BoundingBox(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, float, float, float, boolean);
  public boolean isAxisAligned();
  public de.codesourcery.engine.linalg.Vector4[] getPoints();
  public float[] getVertices();
  public de.codesourcery.engine.linalg.Vector4[] getMinMax();
  public de.codesourcery.engine.linalg.Vector4 getXAxis();
  public de.codesourcery.engine.linalg.Vector4 getYAxis();
  public de.codesourcery.engine.linalg.Vector4 getZAxis();
  public de.codesourcery.engine.render.Object3D toObject3D();
  public de.codesourcery.engine.linalg.Vector4 getCenter();
}
Compiled from "Frustum.java"
public final class de.codesourcery.engine.linalg.Frustum {
  de.codesourcery.engine.linalg.Vector4 ntl;
  de.codesourcery.engine.linalg.Vector4 ntr;
  de.codesourcery.engine.linalg.Vector4 nbl;
  de.codesourcery.engine.linalg.Vector4 nbr;
  de.codesourcery.engine.linalg.Vector4 ftl;
  de.codesourcery.engine.linalg.Vector4 ftr;
  de.codesourcery.engine.linalg.Vector4 fbl;
  de.codesourcery.engine.linalg.Vector4 fbr;
  float nearD;
  float farD;
  float ratio;
  float angle;
  float tang;
  float nw;
  float nh;
  float fw;
  float fh;
  public de.codesourcery.engine.linalg.Frustum();
  public synchronized void setPerspective(float, float, float, float);
  public java.lang.String toString();
  public synchronized void setEyePosition(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  public de.codesourcery.engine.linalg.Frustum$TestResult testContains(de.codesourcery.engine.linalg.Matrix, de.codesourcery.engine.render.Object3D);
  public de.codesourcery.engine.linalg.Frustum$TestResult testContains(de.codesourcery.engine.linalg.Vector4);
  public void forceRecalculatePlaneDefinitions();
  static {};
}
Compiled from "Frustum.java"
class de.codesourcery.engine.linalg.Frustum$1 {
  static final int[] $SwitchMap$de$codesourcery$engine$linalg$Frustum$TestResult;
  static {};
}
Compiled from "Frustum.java"
public final class de.codesourcery.engine.linalg.Frustum$TestResult extends java.lang.Enum<de.codesourcery.engine.linalg.Frustum$TestResult> {
  public static final de.codesourcery.engine.linalg.Frustum$TestResult OUTSIDE;
  public static final de.codesourcery.engine.linalg.Frustum$TestResult INTERSECT;
  public static final de.codesourcery.engine.linalg.Frustum$TestResult INSIDE;
  public static de.codesourcery.engine.linalg.Frustum$TestResult[] values();
  public static de.codesourcery.engine.linalg.Frustum$TestResult valueOf(java.lang.String);
  static {};
}
Compiled from "LinAlgUtils.java"
public class de.codesourcery.engine.linalg.LinAlgUtils {
  public de.codesourcery.engine.linalg.LinAlgUtils();
  public static de.codesourcery.engine.linalg.Matrix createMatrix(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  public static de.codesourcery.engine.linalg.Matrix identity();
  public static de.codesourcery.engine.linalg.Matrix mult(de.codesourcery.engine.linalg.Matrix, de.codesourcery.engine.linalg.Matrix);
  public static de.codesourcery.engine.linalg.Matrix rotX(float);
  public static void convertToCoordinateSystem(java.util.List<de.codesourcery.engine.linalg.Vector4>, de.codesourcery.engine.linalg.Matrix, de.codesourcery.engine.linalg.Vector4);
  public static void main(java.lang.String[]);
  public static java.util.List<de.codesourcery.engine.geom.IConvexPolygon> createPyramid(float, float, float);
  public static de.codesourcery.engine.linalg.Matrix rotY(float);
  public static de.codesourcery.engine.linalg.Matrix rotZ(float);
  public static de.codesourcery.engine.linalg.Matrix scalingMatrix(float, float, float);
  public static de.codesourcery.engine.linalg.Matrix translationMatrix(float, float, float);
  public static de.codesourcery.engine.linalg.Vector4 vector(float, float, float);
  public static de.codesourcery.engine.linalg.Vector4 vector(float, float, float, float);
  public static java.util.List<? extends de.codesourcery.engine.geom.IConvexPolygon> createSphere(float, int, int);
  public static java.util.List<de.codesourcery.engine.geom.Quad> mirrorXZ(java.util.List<de.codesourcery.engine.geom.Quad>);
  public static java.util.List<de.codesourcery.engine.geom.Quad> transform(java.util.List<de.codesourcery.engine.geom.Quad>, de.codesourcery.engine.linalg.Matrix);
  public static java.util.List<de.codesourcery.engine.geom.IConvexPolygon> transformPolygons(java.util.List<? extends de.codesourcery.engine.geom.IConvexPolygon>, de.codesourcery.engine.linalg.Matrix);
  public static java.util.List<de.codesourcery.engine.geom.Quad> createCube(float, float, float);
  public static java.util.List<de.codesourcery.engine.geom.Quad> createXZMesh(float, float, float, float);
  public static java.util.List<de.codesourcery.engine.geom.Quad> createXZMesh(de.codesourcery.engine.math.Function2D, float, float, float, float);
  public static de.codesourcery.engine.linalg.Matrix makeFrustum(float, float, float, float, float, float);
  public static de.codesourcery.engine.linalg.Matrix createOrthoProjection(float, float, float, float);
  public static de.codesourcery.engine.linalg.Matrix createPerspectiveProjection(float, float, float, float);
  public static float findFarestDistance(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4[], int);
}
Compiled from "LinAlgUtils.java"
final class de.codesourcery.engine.linalg.LinAlgUtils$1 implements de.codesourcery.engine.math.Function2D {
  de.codesourcery.engine.linalg.LinAlgUtils$1();
  public float apply(float, float);
}
Compiled from "Matrix.java"
public final class de.codesourcery.engine.linalg.Matrix {
  public static final int SIZE;
  public de.codesourcery.engine.linalg.Matrix(de.codesourcery.engine.linalg.Matrix);
  public de.codesourcery.engine.linalg.Matrix();
  public de.codesourcery.engine.linalg.Matrix(float[]);
  public de.codesourcery.engine.linalg.Vector4 getColumn(int);
  public de.codesourcery.engine.linalg.Vector4 getRow(int);
  public de.codesourcery.engine.linalg.Matrix(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  public void set(int, int, float);
  public float get(int, int);
  public de.codesourcery.engine.linalg.Matrix multiply(de.codesourcery.engine.linalg.Matrix);
  public float[] multiply(de.codesourcery.engine.linalg.Matrix, float[]);
  public static de.codesourcery.engine.linalg.Matrix identity();
  public void setIdentity();
  public static de.codesourcery.engine.linalg.Matrix scale(float);
  public static de.codesourcery.engine.linalg.Matrix scale(float, float, float);
  public java.lang.String toString();
  public de.codesourcery.engine.linalg.Matrix transpose();
  public de.codesourcery.engine.linalg.Vector4[] multiply(de.codesourcery.engine.linalg.Vector4[]);
  public float[] multiply(float[]);
  public de.codesourcery.engine.linalg.Vector4 multiply(de.codesourcery.engine.linalg.Vector4);
  public void multiplyInPlace(de.codesourcery.engine.linalg.Vector4[]);
  public void multiplyInPlaceAndNormalizeW(de.codesourcery.engine.linalg.Vector4[]);
  public void multiplyInPlace(de.codesourcery.engine.linalg.Vector4);
  public de.codesourcery.engine.linalg.Matrix invert();
  public float[] getData();
}
Compiled from "Plane.java"
public class de.codesourcery.engine.linalg.Plane {
  public de.codesourcery.engine.linalg.Plane(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  public de.codesourcery.engine.linalg.Vector4 getNormal();
  public de.codesourcery.engine.linalg.Vector4 getPoint();
  public float distance(de.codesourcery.engine.linalg.Vector4);
  public void setNormalAndPoint(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  public java.lang.String toString();
}
Compiled from "Vector4.java"
public final class de.codesourcery.engine.linalg.Vector4 {
  public de.codesourcery.engine.linalg.Vector4(de.codesourcery.engine.linalg.Vector4);
  public de.codesourcery.engine.linalg.Vector4();
  public de.codesourcery.engine.linalg.Vector4(float[]);
  public void setData(float[], int);
  public void copyFrom(de.codesourcery.engine.linalg.Vector4);
  public void copyInto(float[], int);
  public de.codesourcery.engine.linalg.Vector4(float[], int);
  public boolean isEquals(de.codesourcery.engine.linalg.Vector4);
  public void x(float);
  public void y(float);
  public void z(float);
  public void w(float);
  public float x();
  public float y();
  public float z();
  public float w();
  public de.codesourcery.engine.linalg.Vector4 minus(de.codesourcery.engine.linalg.Vector4);
  public float distanceTo(de.codesourcery.engine.linalg.Vector4);
  public de.codesourcery.engine.linalg.Vector4 plus(de.codesourcery.engine.linalg.Vector4);
  public de.codesourcery.engine.linalg.Vector4(float, float, float);
  public de.codesourcery.engine.linalg.Vector4(float, float, float, float);
  public de.codesourcery.engine.linalg.Vector4 multiply(de.codesourcery.engine.linalg.Matrix);
  public float[] getDataArray();
  public int getDataOffset();
  public float length();
  public de.codesourcery.engine.linalg.Vector4 multiply(float);
  public de.codesourcery.engine.linalg.Vector4 normalize();
  public void normalizeInPlace();
  public de.codesourcery.engine.linalg.Vector4 normalizeW();
  public void normalizeWInPlace();
  public float dotProduct(de.codesourcery.engine.linalg.Vector4);
  public float angleInRadians(de.codesourcery.engine.linalg.Vector4);
  public float angleInDegrees(de.codesourcery.engine.linalg.Vector4);
  public de.codesourcery.engine.linalg.Vector4 crossProduct(de.codesourcery.engine.linalg.Vector4);
  public java.lang.String toString();
}
Compiled from "Constants.java"
public class de.codesourcery.engine.math.Constants {
  public static final float PI;
  public static final float PI_HALF;
  public static final float DEG_TO_RAD;
  public de.codesourcery.engine.math.Constants();
  public static void main(java.lang.String[]);
}
Compiled from "Function2D.java"
public interface de.codesourcery.engine.math.Function2D {
  public abstract float apply(float, float);
}
Compiled from "BoundingBoxGenerator.java"
public class de.codesourcery.engine.render.BoundingBoxGenerator {
  public de.codesourcery.engine.render.BoundingBoxGenerator();
  public static void main(java.lang.String[]);
  public static de.codesourcery.engine.linalg.BoundingBox calculateAxisAlignedBoundingBox(de.codesourcery.engine.render.Object3D);
  public static de.codesourcery.engine.linalg.BoundingBox calculateOrientedBoundingBox(de.codesourcery.engine.render.Object3D);
  static {};
}
Compiled from "Camera.java"
public class de.codesourcery.engine.render.Camera {
  public de.codesourcery.engine.render.Camera();
  public de.codesourcery.engine.linalg.Vector4 getUpVector();
  public void reset();
  public void moveUp(float);
  public void moveDown(float);
  public void strafeLeft(float);
  public void strafeRight(float);
  public void moveForward(float);
  public void moveBackward(float);
  public de.codesourcery.engine.linalg.Vector4 getEyePosition();
  public void setViewOrientation(de.codesourcery.engine.linalg.Vector4);
  public void setEyePosition(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  protected void updateEyeTarget();
  public de.codesourcery.engine.linalg.Vector4 getViewOrientation();
  public de.codesourcery.engine.linalg.Vector4 getEyeTarget();
  public de.codesourcery.engine.linalg.Matrix getViewMatrix();
  public void updateViewMatrix();
}
Compiled from "MouseMotionTracker.java"
public abstract class de.codesourcery.engine.render.MouseMotionTracker {
  public de.codesourcery.engine.render.MouseMotionTracker();
  public void setTrackingEnabled(boolean);
  public void setSensitity(float);
  public float getSensitity();
  public boolean isTrackingEnabled();
  public void reset();
  public void mouseMoved(int, int);
  public void setViewOrientation(de.codesourcery.engine.linalg.Vector4);
  protected abstract void updateEyeTarget(float, float, float);
}
Compiled from "Object3D.java"
public final class de.codesourcery.engine.render.Object3D implements java.lang.Iterable<de.codesourcery.engine.geom.IConvexPolygon> {
  public static final java.lang.String METADATA_IDENTIFIER;
  public static final java.lang.String METADATA_TRANSLATION_MATRIX;
  public java.lang.Object getMetaData(java.lang.String);
  public java.lang.Object setMetaData(java.lang.String, java.lang.Object);
  public de.codesourcery.engine.render.Object3D createCopy(java.lang.String);
  public de.codesourcery.engine.render.Object3D();
  public de.codesourcery.engine.linalg.BoundingBox getOrientedBoundingBox();
  public void setForegroundColor(java.awt.Color);
  public void setIdentifier(java.lang.String);
  public java.lang.String getIdentifier();
  public void setRenderOutline(boolean);
  public boolean isRenderOutline();
  public void setRenderWireframe(boolean);
  public boolean isRenderWireframe();
  public void setPrimitives(java.util.List<? extends de.codesourcery.engine.geom.IConvexPolygon>);
  public int getPointCount();
  public float[] getVertices();
  public java.util.Iterator<de.codesourcery.engine.linalg.Vector4> getVertexIterator();
  public int[] getEdges();
  public void setModelMatrix(de.codesourcery.engine.linalg.Matrix);
  public void markModelMatrixForRecalculation();
  public boolean hasParent();
  public de.codesourcery.engine.linalg.Matrix getModelMatrix();
  public java.util.Iterator<de.codesourcery.engine.geom.IConvexPolygon> iterator();
  public java.lang.String toString();
  public java.util.List<de.codesourcery.engine.render.Object3D> getChildren();
  public boolean hasChildren();
  public de.codesourcery.engine.render.Object3D getParent();
  public void addChild(de.codesourcery.engine.render.Object3D);
  static float[] access$000(de.codesourcery.engine.render.Object3D);
  static int[] access$100(de.codesourcery.engine.render.Object3D);
  static byte[] access$300(de.codesourcery.engine.render.Object3D);
  static int[] access$400(de.codesourcery.engine.render.Object3D);
}
Compiled from "Object3D.java"
class de.codesourcery.engine.render.Object3D$1 implements java.util.Iterator<de.codesourcery.engine.linalg.Vector4> {
  final de.codesourcery.engine.render.Object3D this$0;
  de.codesourcery.engine.render.Object3D$1(de.codesourcery.engine.render.Object3D);
  public void remove();
  public de.codesourcery.engine.linalg.Vector4 next();
  public boolean hasNext();
  public java.lang.Object next();
}
Compiled from "Object3D.java"
class de.codesourcery.engine.render.Object3D$2 implements java.util.Iterator<de.codesourcery.engine.geom.IConvexPolygon> {
  final de.codesourcery.engine.render.Object3D this$0;
  de.codesourcery.engine.render.Object3D$2(de.codesourcery.engine.render.Object3D);
  public boolean hasNext();
  public de.codesourcery.engine.geom.IConvexPolygon next();
  public void remove();
  public java.lang.Object next();
}
Compiled from "Object3D.java"
final class de.codesourcery.engine.render.Object3D$MyTriangle implements de.codesourcery.engine.geom.IConvexPolygon {
  final de.codesourcery.engine.render.Object3D this$0;
  public de.codesourcery.engine.linalg.Vector4 p1();
  public de.codesourcery.engine.linalg.Vector4 p2();
  public int getColor();
  public de.codesourcery.engine.linalg.Vector4 p3();
  public void setVerticesAndColor(int, byte, int);
  public java.lang.String toString();
  public de.codesourcery.engine.linalg.Vector4[] getAllPoints();
  public void setColor(int);
  public byte getVertexCount();
  de.codesourcery.engine.render.Object3D$MyTriangle(de.codesourcery.engine.render.Object3D, de.codesourcery.engine.render.Object3D$1);
}
Compiled from "Object3D.java"
public final class de.codesourcery.engine.render.Object3D$RenderingFlag extends java.lang.Enum<de.codesourcery.engine.render.Object3D$RenderingFlag> {
  public static final de.codesourcery.engine.render.Object3D$RenderingFlag RENDER_OUTLINE;
  public static final de.codesourcery.engine.render.Object3D$RenderingFlag RENDER_WIREFRAME;
  public static de.codesourcery.engine.render.Object3D$RenderingFlag[] values();
  public static de.codesourcery.engine.render.Object3D$RenderingFlag valueOf(java.lang.String);
  public static boolean isFlagSet(de.codesourcery.engine.render.Object3D$RenderingFlag, byte);
  public boolean isFlagSet(byte);
  public byte setFlag(boolean, byte);
  public byte setFlag(byte);
  public byte clearFlag(byte);
  static {};
}
Compiled from "Panel3D.java"
public abstract class de.codesourcery.engine.render.Panel3D extends javax.swing.JPanel {
  public de.codesourcery.engine.render.Panel3D(de.codesourcery.engine.render.SoftwareRenderer);
  public void paint(java.awt.Graphics);
  protected abstract void panelResized(int, int);
  static de.codesourcery.engine.render.SoftwareRenderer access$000(de.codesourcery.engine.render.Panel3D);
}
Compiled from "Panel3D.java"
class de.codesourcery.engine.render.Panel3D$1 extends java.awt.event.ComponentAdapter {
  final de.codesourcery.engine.render.Panel3D this$0;
  de.codesourcery.engine.render.Panel3D$1(de.codesourcery.engine.render.Panel3D);
  public void componentResized(java.awt.event.ComponentEvent);
}
Compiled from "SoftwareRenderer.java"
public final class de.codesourcery.engine.render.SoftwareRenderer {
  public de.codesourcery.engine.render.SoftwareRenderer();
  protected void setupThreadPool(int);
  public void setAmbientLightFactor(float);
  public void setLightPosition(de.codesourcery.engine.linalg.Vector4);
  public int getHeight();
  public int getWidth();
  public void setCpuCount(int);
  public void setHeight(int);
  public void setWidth(int);
  public void setWorld(de.codesourcery.engine.render.World);
  public void paint(java.awt.Graphics);
  protected void drawPolygon(de.codesourcery.engine.linalg.Vector4[], java.awt.Graphics2D, de.codesourcery.engine.render.SoftwareRenderer$RenderingMode);
  protected void drawFilledPolygon(de.codesourcery.engine.linalg.Vector4[], java.awt.Graphics2D);
  protected void drawWirePolygon(de.codesourcery.engine.linalg.Vector4[], java.awt.Graphics2D);
  static de.codesourcery.engine.render.World access$000(de.codesourcery.engine.render.SoftwareRenderer);
  static void access$100(de.codesourcery.engine.render.SoftwareRenderer, de.codesourcery.engine.render.Object3D, de.codesourcery.engine.linalg.Matrix, de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch, java.awt.Graphics2D);
  static java.util.List access$200(de.codesourcery.engine.render.SoftwareRenderer);
  static void access$300(de.codesourcery.engine.render.SoftwareRenderer, java.awt.Graphics2D, de.codesourcery.engine.linalg.Matrix, java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicLong, de.codesourcery.engine.render.Object3D, boolean);
}
Compiled from "SoftwareRenderer.java"
class de.codesourcery.engine.render.SoftwareRenderer$1 implements java.util.concurrent.ThreadFactory {
  final de.codesourcery.engine.render.SoftwareRenderer this$0;
  de.codesourcery.engine.render.SoftwareRenderer$1(de.codesourcery.engine.render.SoftwareRenderer);
  public java.lang.Thread newThread(java.lang.Runnable);
}
Compiled from "SoftwareRenderer.java"
class de.codesourcery.engine.render.SoftwareRenderer$2 implements java.util.Comparator<de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch> {
  final de.codesourcery.engine.render.SoftwareRenderer this$0;
  de.codesourcery.engine.render.SoftwareRenderer$2(de.codesourcery.engine.render.SoftwareRenderer);
  public int compare(de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch, de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "SoftwareRenderer.java"
class de.codesourcery.engine.render.SoftwareRenderer$3 implements java.lang.Runnable {
  final de.codesourcery.engine.render.Object3D val$obj;
  final de.codesourcery.engine.linalg.Matrix val$viewProjectionMatrix;
  final java.awt.Graphics2D val$graphics;
  final boolean val$isLastChild;
  final java.util.concurrent.CountDownLatch val$latch;
  final java.util.concurrent.atomic.AtomicLong val$renderingTime;
  final de.codesourcery.engine.render.SoftwareRenderer this$0;
  de.codesourcery.engine.render.SoftwareRenderer$3(de.codesourcery.engine.render.SoftwareRenderer, de.codesourcery.engine.render.Object3D, de.codesourcery.engine.linalg.Matrix, java.awt.Graphics2D, boolean, java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicLong);
  public void run();
}
Compiled from "SoftwareRenderer.java"
public final class de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch {
  final de.codesourcery.engine.render.SoftwareRenderer this$0;
  public de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch(de.codesourcery.engine.render.SoftwareRenderer, de.codesourcery.engine.render.SoftwareRenderer$RenderingMode, de.codesourcery.engine.render.Object3D);
  public void setDistanceToViewer(float);
  public float getDistanceToViewer();
  public int getPrimitiveCount();
  public de.codesourcery.engine.render.SoftwareRenderer$RenderingMode getRenderingMode();
  public boolean isEmpty();
  public void add(int, de.codesourcery.engine.linalg.Vector4[]);
  public void clear();
  public void renderBatch(java.awt.Graphics2D);
}
Compiled from "SoftwareRenderer.java"
class de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch$1 implements java.util.Comparator<de.codesourcery.engine.render.SoftwareRenderer$PrimitiveWithDepth> {
  final de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch this$1;
  de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch$1(de.codesourcery.engine.render.SoftwareRenderer$PrimitiveBatch);
  public int compare(de.codesourcery.engine.render.SoftwareRenderer$PrimitiveWithDepth, de.codesourcery.engine.render.SoftwareRenderer$PrimitiveWithDepth);
  public int compare(java.lang.Object, java.lang.Object);
}
Compiled from "SoftwareRenderer.java"
public final class de.codesourcery.engine.render.SoftwareRenderer$PrimitiveWithDepth {
  public de.codesourcery.engine.render.SoftwareRenderer$PrimitiveWithDepth(int, de.codesourcery.engine.linalg.Vector4[]);
  public de.codesourcery.engine.linalg.Vector4[] getPoints();
  public int getColor();
  public float getDepth();
}
Compiled from "SoftwareRenderer.java"
public final class de.codesourcery.engine.render.SoftwareRenderer$RenderThread implements java.lang.Runnable {
  final de.codesourcery.engine.render.SoftwareRenderer this$0;
  public de.codesourcery.engine.render.SoftwareRenderer$RenderThread(de.codesourcery.engine.render.SoftwareRenderer, de.codesourcery.engine.render.Object3D, de.codesourcery.engine.linalg.Matrix, java.awt.Graphics2D);
  public void run();
}
Compiled from "SoftwareRenderer.java"
public final class de.codesourcery.engine.render.SoftwareRenderer$RenderingMode extends java.lang.Enum<de.codesourcery.engine.render.SoftwareRenderer$RenderingMode> {
  public static final de.codesourcery.engine.render.SoftwareRenderer$RenderingMode DEFAULT;
  public static final de.codesourcery.engine.render.SoftwareRenderer$RenderingMode RENDER_OUTLINE;
  public static final de.codesourcery.engine.render.SoftwareRenderer$RenderingMode RENDER_WIREFRAME;
  public static de.codesourcery.engine.render.SoftwareRenderer$RenderingMode[] values();
  public static de.codesourcery.engine.render.SoftwareRenderer$RenderingMode valueOf(java.lang.String);
  static {};
}
Compiled from "World.java"
public final class de.codesourcery.engine.render.World {
  public de.codesourcery.engine.render.World();
  public de.codesourcery.engine.linalg.Matrix getViewMatrix();
  public de.codesourcery.engine.linalg.Matrix getProjectionMatrix();
  public void setupPerspectiveProjection(float, float, float, float);
  public de.codesourcery.engine.linalg.Frustum getFrustum();
  public boolean isInClipSpace(de.codesourcery.engine.linalg.Vector4[]);
  public boolean isInClipSpace(de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4, de.codesourcery.engine.linalg.Vector4);
  public boolean isInClipSpace(de.codesourcery.engine.linalg.Vector4);
  public void addObject(de.codesourcery.engine.render.Object3D);
  public java.util.List<de.codesourcery.engine.render.Object3D> getObjects();
  public de.codesourcery.engine.render.Camera getCamera();
  static de.codesourcery.engine.linalg.Frustum access$000(de.codesourcery.engine.render.World);
}
Compiled from "World.java"
class de.codesourcery.engine.render.World$1 extends de.codesourcery.engine.render.Camera {
  final de.codesourcery.engine.render.World this$0;
  de.codesourcery.engine.render.World$1(de.codesourcery.engine.render.World);
  public void updateViewMatrix();
  protected void updateEyeTarget();
}
