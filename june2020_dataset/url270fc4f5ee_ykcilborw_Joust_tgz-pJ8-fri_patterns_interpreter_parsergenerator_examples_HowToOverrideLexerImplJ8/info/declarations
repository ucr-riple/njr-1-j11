Compiled from "ChessPieceSubsetManagerTest.java"
public class com.wroblicky.andrew.joust.ChessPieceSubsetManagerTest {
  public com.wroblicky.andrew.joust.ChessPieceSubsetManagerTest();
  public void init();
  public void testGetAllActiveChessPieces();
  public void testGetAllBlackActiveChessPieces();
  public void testGetAllWhiteActiveChessPieces();
  public void testGetAllDeceasedChessPieces();
  public void testGetAllPawns();
  public void testGetAllRooks();
  public void testGetAllKnights();
  public void testGetAllBishops();
  public void testGetAllQueens();
  public void testGetAllKings();
  public void testGetAllWhitePawns();
  public void testGetAllBlackPawns();
  public void testGetAllWhiteRooks();
  public void testGetAllBlackRooks();
  public void testRemoveChessPiece();
}
Compiled from "Util.java"
public final class com.wroblicky.andrew.joust.Util {
  public com.wroblicky.andrew.joust.Util();
  public static java.lang.String[][] getStringBoard(java.util.Set<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece>);
  public static int reverseNum(int);
  public static int fileToNum(java.lang.String);
  public static int rankToNum(java.lang.String);
  public static com.wroblicky.andrew.joust.game.board.Location getLocation(java.lang.String, com.wroblicky.andrew.joust.game.board.Location[][]);
  public static void print(java.lang.String);
  public static void println(java.lang.String);
  public static void error(java.lang.String);
}
Compiled from "CommandLineDisplay.java"
public final class com.wroblicky.andrew.joust.display.CommandLineDisplay {
  public com.wroblicky.andrew.joust.display.CommandLineDisplay(com.wroblicky.andrew.joust.game.Game, com.wroblicky.andrew.joust.game.PGNViewer, java.lang.String);
  public static void start(com.wroblicky.andrew.joust.game.Game, com.wroblicky.andrew.joust.game.PGNViewer, java.lang.String);
}
Compiled from "DialogBoxDisplay.java"
public class com.wroblicky.andrew.joust.display.DialogBoxDisplay extends javax.swing.JFrame implements java.awt.event.ActionListener {
  public void actionPerformed(java.awt.event.ActionEvent);
  public static void start(com.wroblicky.andrew.joust.game.Game, com.wroblicky.andrew.joust.game.PGNViewer);
}
Compiled from "DialogBoxDisplay.java"
class com.wroblicky.andrew.joust.display.DialogBoxDisplay$1 {
  static final int[] $SwitchMap$com$wroblicky$andrew$joust$game$subset$qualifiable$ChessPieceAllegianceType;
  static {};
}
Compiled from "DisplayConstants.java"
public final class com.wroblicky.andrew.joust.display.DisplayConstants {
  public static final java.lang.String INTERACTIVE_MODE;
  public static final java.lang.String NONINTERACTIVE_MODE;
  public com.wroblicky.andrew.joust.display.DisplayConstants();
}
Compiled from "Game.java"
public final class com.wroblicky.andrew.joust.game.Game {
  public com.wroblicky.andrew.joust.game.Game(com.wroblicky.andrew.joust.game.board.ChessBoard, java.util.List<com.wroblicky.andrew.joust.game.move.Turn>, com.wroblicky.andrew.joust.game.subset.ChessPieceSubsetManager);
  public com.wroblicky.andrew.joust.game.board.ChessBoard getBoard();
  public void setBoard(com.wroblicky.andrew.joust.game.board.ChessBoard);
  public java.util.List<com.wroblicky.andrew.joust.game.move.Turn> getTurns();
  public void addTurn(com.wroblicky.andrew.joust.game.move.Turn);
  public void removeTurn();
  public java.util.Set<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece> getChessPieces(com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable);
  public void addChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece, com.wroblicky.andrew.joust.game.board.Location);
  public void removeChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece);
  public boolean isInProgress();
  public void setInProgress(boolean);
  public int getRound();
  public void setRound(int);
  public void incrementRound();
  public void decrementRound();
  public com.wroblicky.andrew.joust.game.move.Turn getCurrentTurn();
  public boolean isWhiteCastleMoveAllowed();
  public void setWhiteCastleMoveAllowed(boolean);
  public boolean isBlackCastleMoveAllowed();
  public void setBlackCastleMoveAllowed(boolean);
  public boolean isCheckmate();
  public void setCheckmate(boolean);
  public boolean isCheck();
  public void setCheck(boolean);
}
Compiled from "GameManager.java"
public final class com.wroblicky.andrew.joust.game.GameManager {
  public com.wroblicky.andrew.joust.game.GameManager(com.wroblicky.andrew.joust.game.Game);
  public int getRound();
  public java.util.Set<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece> getActivePieces();
  public java.util.Set<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece> getBlackPieces();
  public java.util.Set<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece> getWhitePieces();
  public java.util.Set<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece> getChessPieces(com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable);
  public com.wroblicky.andrew.joust.game.board.ChessBoard getBoard();
  public boolean getBlackCastle();
  public boolean getWhiteCastle();
  public boolean isInProgress();
  public com.wroblicky.andrew.joust.game.Game getGame();
  public boolean getCheckOn();
  public boolean getCheckMateOn();
  public boolean isWhiteTurn();
  public void playTurn(com.wroblicky.andrew.joust.game.move.Turn);
  public void undoTurn();
}
Compiled from "GameSetup.java"
public final class com.wroblicky.andrew.joust.game.GameSetup {
  public com.wroblicky.andrew.joust.game.GameSetup();
  public static com.wroblicky.andrew.joust.game.GameManager setupDefaultGame();
  public static com.wroblicky.andrew.joust.game.GameManager setupSpecialLayout(java.lang.String);
}
Compiled from "GameSetupTest.java"
public class com.wroblicky.andrew.joust.game.GameSetupTest {
  public com.wroblicky.andrew.joust.game.GameSetupTest();
  public void testSetupDefaultGame();
  public void testSetupSpecialLayout();
}
Compiled from "MoveTokenAnalyzer.java"
public final class com.wroblicky.andrew.joust.game.MoveTokenAnalyzer {
  public com.wroblicky.andrew.joust.game.MoveTokenAnalyzer(com.wroblicky.andrew.joust.game.GameManager);
  public com.wroblicky.andrew.joust.game.move.Turn analyzeMove(java.lang.String);
}
Compiled from "PGNViewer.java"
public final class com.wroblicky.andrew.joust.game.PGNViewer {
  public com.wroblicky.andrew.joust.game.PGNViewer(com.wroblicky.andrew.joust.pgn.PGNGame);
  public com.wroblicky.andrew.joust.game.PGNViewer(com.wroblicky.andrew.joust.pgn.PGNGame, java.lang.String);
  public java.lang.String getFilename();
  public com.wroblicky.andrew.joust.game.Game getGame();
  public com.wroblicky.andrew.joust.game.Game initializeGame();
  public com.wroblicky.andrew.joust.game.Game fastForward();
  public com.wroblicky.andrew.joust.game.Game playNextTurn();
  public com.wroblicky.andrew.joust.game.Game rewind();
  public com.wroblicky.andrew.joust.game.Game undoCurrentTurn();
  public static void main(java.lang.String[]);
}
Compiled from "ChessBoard.java"
public final class com.wroblicky.andrew.joust.game.board.ChessBoard {
  public com.wroblicky.andrew.joust.game.board.ChessBoard();
  public com.wroblicky.andrew.joust.game.board.ChessBoard(com.wroblicky.andrew.joust.game.board.Location[][]);
  public com.wroblicky.andrew.joust.game.board.Location getLocation(java.lang.String);
  public com.wroblicky.andrew.joust.game.board.Location getLocation(int, int);
  public com.wroblicky.andrew.joust.game.board.Location getLocation(com.wroblicky.andrew.joust.game.board.Location, int, int);
  public com.wroblicky.andrew.joust.game.board.Location getNorthNeighbor(com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.board.Location getNorthWestNeighbor(com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.board.Location getWestNeighbor(com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.board.Location getSouthWestNeighbor(com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.board.Location getSouthNeighbor(com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.board.Location getSouthEastNeighbor(com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.board.Location getEastNeighbor(com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.board.Location getNorthEastNeighbor(com.wroblicky.andrew.joust.game.board.Location);
  public void addLocation(com.wroblicky.andrew.joust.game.board.Location);
  public static boolean onBoard(int, int);
  public com.wroblicky.andrew.joust.game.board.Location getLocationByChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece);
  public com.wroblicky.andrew.joust.game.chesspiece.ChessPiece getChessPieceByLocation(com.wroblicky.andrew.joust.game.board.Location);
  public void addChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece, com.wroblicky.andrew.joust.game.board.Location);
  public void moveChessPiece(com.wroblicky.andrew.joust.game.move.Move);
  public void moveChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece, com.wroblicky.andrew.joust.game.board.Location, com.wroblicky.andrew.joust.game.board.Location);
  public void removeChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece);
  public void removeChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece, com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.board.ChessBoardIterator iterator();
  public static void printBoard(java.util.Set<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece>);
}
Compiled from "ChessBoardIterator.java"
public final class com.wroblicky.andrew.joust.game.board.ChessBoardIterator {
  public com.wroblicky.andrew.joust.game.board.ChessBoardIterator(com.wroblicky.andrew.joust.game.board.Location[][]);
  public boolean hasNext();
  public com.wroblicky.andrew.joust.game.board.Location next();
}
Compiled from "ChessBoardTest.java"
public class com.wroblicky.andrew.joust.game.board.ChessBoardTest {
  public com.wroblicky.andrew.joust.game.board.ChessBoardTest();
  public void testGetLocation();
  public void testGetLocationWithParameters();
  public void testNorthNeighbor();
  public void testNorthWestNeighbor();
  public void testWestNeighbor();
  public void testSouthWestNeighbor();
  public void testSouthNeighbor();
  public void testSouthEastNeighbor();
  public void testEastNeighbor();
  public void testNorthEastNeighbor();
  public void testOnBoard();
  public void testGetLocationByChessPiece();
  public void testGetChessPieceByLocation();
  public void testAddChessPiece();
  public void testMoveChessPiece();
  public void testRemoveChessPiece();
}
Compiled from "Location.java"
public final class com.wroblicky.andrew.joust.game.board.Location {
  public com.wroblicky.andrew.joust.game.board.Location(java.lang.String);
  public int getXCoordinate();
  public void setXCoordinate(int);
  public int getYCoordinate();
  public void setYCoordinate(int);
  public java.lang.String getAlgebraicLocation();
  public void setMyAlgebraicLocation(java.lang.String);
  public java.lang.String getFile();
  public java.lang.String getRank();
  public int getComponentNumber();
  public com.wroblicky.andrew.joust.game.chesspiece.ChessPiece getChessPiece();
  public void setChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece);
  public boolean equals(com.wroblicky.andrew.joust.game.board.Location);
  public static java.lang.String convert(int, int);
  public java.lang.String toString();
}
Compiled from "Bishop.java"
public final class com.wroblicky.andrew.joust.game.chesspiece.Bishop extends com.wroblicky.andrew.joust.game.chesspiece.ChessPiece {
  public com.wroblicky.andrew.joust.game.chesspiece.Bishop();
  public com.wroblicky.andrew.joust.game.chesspiece.Bishop(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance, int, com.wroblicky.andrew.joust.game.board.ChessBoard);
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType getChessPieceType();
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType getChessPieceAllegianceType();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getPossibleMoves();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getDefenseMoves();
}
Compiled from "BishopTest.java"
public class com.wroblicky.andrew.joust.game.chesspiece.BishopTest {
  public com.wroblicky.andrew.joust.game.chesspiece.BishopTest();
  public void testGetID();
  public void testGetMyType();
  public void testGetMySymbol();
  public void testGetPossibleMoves();
  public void testGetDefenseMoves();
  public void testCanReach();
  public void testCanDefend();
}
Compiled from "ChessPiece.java"
public abstract class com.wroblicky.andrew.joust.game.chesspiece.ChessPiece {
  boolean alive;
  com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance allegiance;
  java.lang.String chessID;
  com.wroblicky.andrew.joust.game.board.ChessBoard chessBoard;
  public com.wroblicky.andrew.joust.game.chesspiece.ChessPiece();
  public com.wroblicky.andrew.joust.game.board.Location getLocation();
  public java.lang.String getFile();
  public java.lang.String getRank();
  public java.lang.String getRelativeRank();
  public boolean isAlive();
  public void setAlive(boolean);
  public com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance getAllegiance();
  public boolean isBlack();
  public boolean isWhite();
  public java.lang.String getID();
  public abstract com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType getChessPieceType();
  public abstract com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType getChessPieceAllegianceType();
  public abstract java.util.List<com.wroblicky.andrew.joust.game.board.Location> getPossibleMoves();
  public abstract java.util.List<com.wroblicky.andrew.joust.game.board.Location> getDefenseMoves();
  public boolean canReach(com.wroblicky.andrew.joust.game.board.Location);
  public boolean canDefend(com.wroblicky.andrew.joust.game.board.Location);
  boolean isCapableOfOccupation(com.wroblicky.andrew.joust.game.board.Location);
  boolean isFriend(com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Occupier checkAvailability(com.wroblicky.andrew.joust.game.board.Location);
  public void move(com.wroblicky.andrew.joust.game.board.Location);
  public java.lang.String toString();
}
Compiled from "ChessPiece.java"
public final class com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance extends java.lang.Enum<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance> {
  public static final com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance BLACK;
  public static final com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance WHITE;
  public static com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance[] values();
  public static com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance valueOf(java.lang.String);
  public java.lang.String getAllegiance();
  static {};
}
Compiled from "ChessPiece.java"
public final class com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Occupier extends java.lang.Enum<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Occupier> {
  public static final com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Occupier FRIEND;
  public static final com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Occupier ENEMY;
  public static final com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Occupier UNOCCUPIED;
  public static com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Occupier[] values();
  public static com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Occupier valueOf(java.lang.String);
  public java.lang.String getOccupier();
  static {};
}
Compiled from "ChessPieceTest.java"
public class com.wroblicky.andrew.joust.game.chesspiece.ChessPieceTest {
  public com.wroblicky.andrew.joust.game.chesspiece.ChessPieceTest();
  public void testGetLocation();
  public void testGetFile();
  public void testGetRank();
  public void testGetRelativeRank();
  public void testGetAllegiance();
  public void testIsBlack();
  public void testIsWhite();
  public void testCheckAvailability();
  public void testMove();
}
Compiled from "King.java"
public final class com.wroblicky.andrew.joust.game.chesspiece.King extends com.wroblicky.andrew.joust.game.chesspiece.ChessPiece {
  public com.wroblicky.andrew.joust.game.chesspiece.King();
  public com.wroblicky.andrew.joust.game.chesspiece.King(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance, int, com.wroblicky.andrew.joust.game.board.ChessBoard);
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType getChessPieceType();
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType getChessPieceAllegianceType();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getPossibleMoves();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getDefenseMoves();
  java.util.List<com.wroblicky.andrew.joust.game.board.Location> getMoveSearchSpace();
}
Compiled from "KingTest.java"
public class com.wroblicky.andrew.joust.game.chesspiece.KingTest {
  public com.wroblicky.andrew.joust.game.chesspiece.KingTest();
  public void testGetID();
  public void testGetMyType();
  public void testGetMySymbol();
  public void testGetPossibleMoves();
  public void testGetDefenseMoves();
  public void testCanReach();
  public void testCanDefend();
  public void testMove();
}
Compiled from "Knight.java"
public final class com.wroblicky.andrew.joust.game.chesspiece.Knight extends com.wroblicky.andrew.joust.game.chesspiece.ChessPiece {
  public com.wroblicky.andrew.joust.game.chesspiece.Knight();
  public com.wroblicky.andrew.joust.game.chesspiece.Knight(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance, int, com.wroblicky.andrew.joust.game.board.ChessBoard);
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType getChessPieceType();
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType getChessPieceAllegianceType();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getPossibleMoves();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getDefenseMoves();
  java.util.List<com.wroblicky.andrew.joust.game.board.Location> getMoveSearchSpace();
}
Compiled from "KnightTest.java"
public class com.wroblicky.andrew.joust.game.chesspiece.KnightTest {
  public com.wroblicky.andrew.joust.game.chesspiece.KnightTest();
  public void testGetID();
  public void testGetMyType();
  public void testGetMySymbol();
  public void testGetPossibleMoves();
  public void testGetDefenseMoves();
  public void testCanReach();
  public void testCanDefend();
  public void testMove();
}
Compiled from "Pawn.java"
public final class com.wroblicky.andrew.joust.game.chesspiece.Pawn extends com.wroblicky.andrew.joust.game.chesspiece.ChessPiece {
  public com.wroblicky.andrew.joust.game.chesspiece.Pawn();
  public com.wroblicky.andrew.joust.game.chesspiece.Pawn(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance, int, com.wroblicky.andrew.joust.game.board.ChessBoard);
  public boolean isMovedAtAll();
  public boolean isMovedTwice();
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType getChessPieceType();
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType getChessPieceAllegianceType();
  public void setMovedAtAll(boolean);
  public void setMovedTwice(boolean);
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getPossibleMoves();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getDefenseMoves();
}
Compiled from "PawnTest.java"
public class com.wroblicky.andrew.joust.game.chesspiece.PawnTest {
  public com.wroblicky.andrew.joust.game.chesspiece.PawnTest();
  public void testGetID();
  public void testGetMyType();
  public void testGetMySymbol();
  public void testGetPossibleMoves();
  public void testGetDefenseMoves();
  public void testCanReach();
  public void testCanDefend();
  public void testMove();
}
Compiled from "Queen.java"
public final class com.wroblicky.andrew.joust.game.chesspiece.Queen extends com.wroblicky.andrew.joust.game.chesspiece.ChessPiece {
  public com.wroblicky.andrew.joust.game.chesspiece.Queen();
  public com.wroblicky.andrew.joust.game.chesspiece.Queen(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance, int, com.wroblicky.andrew.joust.game.board.ChessBoard);
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType getChessPieceType();
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType getChessPieceAllegianceType();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getPossibleMoves();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getDefenseMoves();
}
Compiled from "QueenTest.java"
public class com.wroblicky.andrew.joust.game.chesspiece.QueenTest {
  public com.wroblicky.andrew.joust.game.chesspiece.QueenTest();
  public void testGetID();
  public void testGetMyType();
  public void testGetMySymbol();
  public void testGetPossibleMoves();
  public void testGetDefenseMoves();
  public void testCanReach();
  public void testCanDefend();
  public void testMove();
}
Compiled from "Rook.java"
public final class com.wroblicky.andrew.joust.game.chesspiece.Rook extends com.wroblicky.andrew.joust.game.chesspiece.ChessPiece {
  public com.wroblicky.andrew.joust.game.chesspiece.Rook();
  public com.wroblicky.andrew.joust.game.chesspiece.Rook(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance, int, com.wroblicky.andrew.joust.game.board.ChessBoard);
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType getChessPieceType();
  public com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType getChessPieceAllegianceType();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getPossibleMoves();
  public java.util.List<com.wroblicky.andrew.joust.game.board.Location> getDefenseMoves();
}
Compiled from "RookTest.java"
public class com.wroblicky.andrew.joust.game.chesspiece.RookTest {
  public com.wroblicky.andrew.joust.game.chesspiece.RookTest();
  public void testGetID();
  public void testGetMyType();
  public void testGetMySymbol();
  public void testGetPossibleMoves();
  public void testGetDefenseMoves();
  public void testCanReach();
  public void testCanDefend();
  public void testMove();
}
Compiled from "GameStateChange.java"
public class com.wroblicky.andrew.joust.game.move.GameStateChange {
  public com.wroblicky.andrew.joust.game.move.GameStateChange();
}
Compiled from "Move.java"
public final class com.wroblicky.andrew.joust.game.move.Move extends com.wroblicky.andrew.joust.game.move.GameStateChange {
  public com.wroblicky.andrew.joust.game.move.Move(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece, com.wroblicky.andrew.joust.game.board.Location, com.wroblicky.andrew.joust.game.board.Location);
  public com.wroblicky.andrew.joust.game.chesspiece.ChessPiece getChessPiece();
  public com.wroblicky.andrew.joust.game.board.Location getStart();
  public com.wroblicky.andrew.joust.game.board.Location getDestination();
}
Compiled from "Termination.java"
public final class com.wroblicky.andrew.joust.game.move.Termination extends com.wroblicky.andrew.joust.game.move.GameStateChange {
  public com.wroblicky.andrew.joust.game.move.Termination();
  public com.wroblicky.andrew.joust.game.move.Termination(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece$Allegiance);
  public boolean isBlackWinner();
  public boolean isWhiteWinner();
  public boolean isTie();
}
Compiled from "Turn.java"
public final class com.wroblicky.andrew.joust.game.move.Turn {
  public com.wroblicky.andrew.joust.game.move.Turn();
  public com.wroblicky.andrew.joust.game.move.Turn(com.wroblicky.andrew.joust.game.move.GameStateChange);
  public com.wroblicky.andrew.joust.game.move.Turn(com.wroblicky.andrew.joust.game.move.Move, com.wroblicky.andrew.joust.game.chesspiece.ChessPiece, com.wroblicky.andrew.joust.game.chesspiece.ChessPiece);
  public com.wroblicky.andrew.joust.game.move.Turn(com.wroblicky.andrew.joust.game.move.Move, boolean, boolean);
  public com.wroblicky.andrew.joust.game.move.Turn(com.wroblicky.andrew.joust.game.move.Move, com.wroblicky.andrew.joust.game.chesspiece.ChessPiece, com.wroblicky.andrew.joust.game.chesspiece.ChessPiece, boolean, boolean);
  public java.util.List<com.wroblicky.andrew.joust.game.move.GameStateChange> getGameStateChanges();
  public void addMove(com.wroblicky.andrew.joust.game.move.Move);
  public com.wroblicky.andrew.joust.game.chesspiece.ChessPiece getCaptured();
  public void setCaptured(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece);
  public com.wroblicky.andrew.joust.game.chesspiece.ChessPiece getCapturer();
  public void setCapturer(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece);
  public boolean isCheck();
  public void setCheck(boolean);
  public boolean isCheckmate();
  public void setCheckmate(boolean);
}
Compiled from "ChessPieceSubsetManager.java"
public final class com.wroblicky.andrew.joust.game.subset.ChessPieceSubsetManager {
  public com.wroblicky.andrew.joust.game.subset.ChessPieceSubsetManager(java.util.Set<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece>);
  public java.util.Set<com.wroblicky.andrew.joust.game.chesspiece.ChessPiece> getChessPieces(com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable);
  public void addChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece);
  public void removeChessPiece(com.wroblicky.andrew.joust.game.chesspiece.ChessPiece);
}
Compiled from "ChessPieceAllegianceType.java"
public final class com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType extends java.lang.Enum<com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType> implements com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable {
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType BLACK_PAWN;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType BLACK_ROOK;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType BLACK_KNIGHT;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType BLACK_BISHOP;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType BLACK_QUEEN;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType BLACK_KING;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType WHITE_PAWN;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType WHITE_ROOK;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType WHITE_KNIGHT;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType WHITE_BISHOP;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType WHITE_QUEEN;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType WHITE_KING;
  public static com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType[] values();
  public static com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceAllegianceType valueOf(java.lang.String);
  public java.lang.String getChessPieceAllegianceType();
  public com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable getQualification();
  public java.lang.String toString();
  static {};
}
Compiled from "ChessPieceType.java"
public final class com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType extends java.lang.Enum<com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType> implements com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable {
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType PAWN;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType ROOK;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType KNIGHT;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType BISHOP;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType QUEEN;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType KING;
  public static com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType[] values();
  public static com.wroblicky.andrew.joust.game.subset.qualifiable.ChessPieceType valueOf(java.lang.String);
  public com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable getQualification();
  public java.lang.String getChessPieceType();
  static {};
}
Compiled from "Qualifiable.java"
public interface com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable {
  public abstract com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable getQualification();
}
Compiled from "Scope.java"
public final class com.wroblicky.andrew.joust.game.subset.qualifiable.Scope extends java.lang.Enum<com.wroblicky.andrew.joust.game.subset.qualifiable.Scope> implements com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable {
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.Scope ALL;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.Scope NOTHING;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.Scope ACTIVE;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.Scope DECEASED;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.Scope BLACK_ACTIVE;
  public static final com.wroblicky.andrew.joust.game.subset.qualifiable.Scope WHITE_ACTIVE;
  public static com.wroblicky.andrew.joust.game.subset.qualifiable.Scope[] values();
  public static com.wroblicky.andrew.joust.game.subset.qualifiable.Scope valueOf(java.lang.String);
  public java.lang.String getScope();
  public com.wroblicky.andrew.joust.game.subset.qualifiable.Qualifiable getQualification();
  public java.lang.String toString();
  static {};
}
Compiled from "ITStandardGame.java"
public class com.wroblicky.andrew.joust.integration.ITStandardGame {
  public com.wroblicky.andrew.joust.integration.ITStandardGame();
  public void testGame();
}
Compiled from "PGNGame.java"
public final class com.wroblicky.andrew.joust.pgn.PGNGame {
  public com.wroblicky.andrew.joust.pgn.PGNGame();
  public java.lang.String getFilename();
  public void setFilename(java.lang.String);
  public java.lang.String getEvent();
  public void setEvent(java.lang.String);
  public java.lang.String getSite();
  public void setSite(java.lang.String);
  public java.lang.String getDate();
  public void setDate(java.lang.String);
  public java.lang.String getRound();
  public void setRound(java.lang.String);
  public java.lang.String getBlack();
  public void setBlack(java.lang.String);
  public java.lang.String getWhite();
  public void setWhite(java.lang.String);
  public java.lang.String getResult();
  public void setResult(java.lang.String);
  public java.util.List<java.lang.String> getMoves();
  public void setMoves(java.util.List<java.lang.String>);
}
Compiled from "PGNParser.java"
public final class com.wroblicky.andrew.joust.pgn.PGNParser {
  public com.wroblicky.andrew.joust.pgn.PGNParser();
  public static com.wroblicky.andrew.joust.pgn.PGNGame getPGNGame(java.lang.String);
}
Compiled from "PGNParserTest.java"
public class com.wroblicky.andrew.joust.pgn.PGNParserTest {
  public com.wroblicky.andrew.joust.pgn.PGNParserTest();
  public void testGetPGNGame();
}
Compiled from "Lexer.java"
public interface fri.patterns.interpreter.parsergenerator.Lexer {
  public abstract void setInput(java.lang.Object) throws java.io.IOException;
  public abstract void setTerminals(java.util.List);
  public abstract fri.patterns.interpreter.parsergenerator.Token getNextToken(java.util.Map) throws java.io.IOException;
  public abstract void clear();
  public abstract void addTokenListener(fri.patterns.interpreter.parsergenerator.Lexer$TokenListener);
  public abstract void removeTokenListener(fri.patterns.interpreter.parsergenerator.Lexer$TokenListener);
  public abstract void dump(java.io.PrintStream);
  public abstract void setDebug(boolean);
}
Compiled from "Lexer.java"
public interface fri.patterns.interpreter.parsergenerator.Lexer$TokenListener {
  public abstract void tokenReceived(fri.patterns.interpreter.parsergenerator.Token, boolean);
}
Compiled from "Parser.java"
public class fri.patterns.interpreter.parsergenerator.Parser implements java.io.Serializable {
  protected java.util.Stack stateStack;
  protected java.util.Stack valueStack;
  protected java.util.Stack rangeStack;
  public fri.patterns.interpreter.parsergenerator.Parser(fri.patterns.interpreter.parsergenerator.ParserTables);
  public java.lang.Object getResult();
  public void setLexer(fri.patterns.interpreter.parsergenerator.Lexer);
  public fri.patterns.interpreter.parsergenerator.Lexer getLexer();
  public void setInput(java.lang.Object) throws java.io.IOException;
  public void setSemantic(fri.patterns.interpreter.parsergenerator.Semantic);
  public fri.patterns.interpreter.parsergenerator.Semantic getSemantic();
  public fri.patterns.interpreter.parsergenerator.ParserTables getParserTables();
  public void setPassExpectedToLexer(boolean);
  protected void reduce(java.lang.Integer);
  protected fri.patterns.interpreter.parsergenerator.Token shift(fri.patterns.interpreter.parsergenerator.Token) throws java.io.IOException;
  protected fri.patterns.interpreter.parsergenerator.Token getNextToken() throws java.io.IOException;
  public boolean parse(fri.patterns.interpreter.parsergenerator.Lexer) throws java.io.IOException;
  public boolean parse(fri.patterns.interpreter.parsergenerator.Semantic) throws java.io.IOException;
  public boolean parse(java.lang.Object) throws java.io.IOException;
  public boolean parse(fri.patterns.interpreter.parsergenerator.Lexer, fri.patterns.interpreter.parsergenerator.Semantic) throws java.io.IOException;
  public boolean parse(java.lang.Object, fri.patterns.interpreter.parsergenerator.Semantic) throws java.io.IOException;
  public boolean parse() throws java.io.IOException;
  protected java.lang.Integer recover(java.lang.Integer, fri.patterns.interpreter.parsergenerator.Token);
  protected boolean detectError(fri.patterns.interpreter.parsergenerator.Token, java.lang.Integer, java.lang.Integer);
  public void setPrintStream(java.io.PrintStream);
  public void setDebug(boolean);
}
Compiled from "ParserTables.java"
public interface fri.patterns.interpreter.parsergenerator.ParserTables {
  public static final java.lang.Integer ACCEPT;
  public static final java.lang.Integer ERROR;
  public static final java.lang.Integer SHIFT;
  public abstract java.lang.Integer getGotoState(java.lang.Integer, java.lang.String);
  public abstract java.lang.Integer getParseAction(java.lang.Integer, java.lang.String);
  public abstract java.util.List getTerminals();
  public abstract fri.patterns.interpreter.parsergenerator.syntax.Syntax getSyntax();
  public abstract void dump(java.io.PrintStream);
  public abstract java.util.Map getExpected(java.lang.Integer);
  static {};
}
Compiled from "Semantic.java"
public interface fri.patterns.interpreter.parsergenerator.Semantic {
  public abstract java.lang.Object doSemantic(fri.patterns.interpreter.parsergenerator.syntax.Rule, java.util.List, java.util.List);
}
Compiled from "Token.java"
public class fri.patterns.interpreter.parsergenerator.Token {
  public static final java.lang.String EPSILON;
  public static final char STRING_QUOTE;
  public static final char CHAR_QUOTE;
  public static final char COMMAND_QUOTE;
  public static final java.lang.String UPTO;
  public static final java.lang.String BUTNOT;
  public static final java.lang.String TOKEN;
  public static final java.lang.String IGNORED;
  public static final java.lang.String ARTIFICIAL_NONTERMINAL_START_CHARACTER;
  public final java.lang.String symbol;
  public final java.lang.Object text;
  public final fri.patterns.interpreter.parsergenerator.Token$Range range;
  public fri.patterns.interpreter.parsergenerator.Token(java.lang.String, java.lang.Object, fri.patterns.interpreter.parsergenerator.Token$Range);
  public static boolean isEpsilon(fri.patterns.interpreter.parsergenerator.Token);
  public static boolean isEpsilon(java.lang.String);
  public static boolean isTerminal(java.lang.String);
}
Compiled from "Token.java"
public class fri.patterns.interpreter.parsergenerator.Token$Address implements java.lang.Comparable {
  public final int line;
  public final int column;
  public final int offset;
  public fri.patterns.interpreter.parsergenerator.Token$Address();
  public fri.patterns.interpreter.parsergenerator.Token$Address(int, int, int);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(java.lang.Object);
}
Compiled from "Token.java"
public class fri.patterns.interpreter.parsergenerator.Token$Range implements java.lang.Comparable {
  public final fri.patterns.interpreter.parsergenerator.Token$Address start;
  public final fri.patterns.interpreter.parsergenerator.Token$Address end;
  public fri.patterns.interpreter.parsergenerator.Token$Range(fri.patterns.interpreter.parsergenerator.Token$Address, fri.patterns.interpreter.parsergenerator.Token$Address);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
Compiled from "CompiledTables.java"
public class fri.patterns.interpreter.parsergenerator.builder.CompiledTables {
  public static final java.lang.String CLASSFILE_SUFFIX;
  public fri.patterns.interpreter.parsergenerator.builder.CompiledTables();
  public fri.patterns.interpreter.parsergenerator.builder.CompiledTables(boolean);
  public fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables get(java.lang.Object) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables get(java.lang.Object, java.lang.String) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables get(java.lang.Class, java.lang.Object, java.lang.String) throws java.lang.Exception;
  protected int compile(java.lang.String);
  public static void main(java.lang.String[]);
}
Compiled from "SerializedLexer.java"
public class fri.patterns.interpreter.parsergenerator.builder.SerializedLexer extends fri.patterns.interpreter.parsergenerator.builder.SerializedObject {
  protected boolean PRODUCTION;
  public fri.patterns.interpreter.parsergenerator.builder.SerializedLexer();
  public fri.patterns.interpreter.parsergenerator.builder.SerializedLexer(boolean);
  public fri.patterns.interpreter.parsergenerator.Lexer get(java.lang.Object) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.Lexer get(java.lang.Object, java.lang.String) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.Lexer get(java.lang.Object, java.lang.String, java.util.List, java.util.List) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.Lexer readLexer(java.lang.Object, java.lang.String);
  public fri.patterns.interpreter.parsergenerator.Lexer buildAndStoreLexer(java.lang.Object, java.lang.String, java.util.List, java.util.List) throws java.lang.Exception;
  protected fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxSeparation newSyntaxSeparation(fri.patterns.interpreter.parsergenerator.syntax.Syntax) throws fri.patterns.interpreter.parsergenerator.syntax.SyntaxException;
  protected fri.patterns.interpreter.parsergenerator.lexer.LexerBuilder newLexerBuilder(fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List) throws fri.patterns.interpreter.parsergenerator.lexer.LexerException, fri.patterns.interpreter.parsergenerator.syntax.SyntaxException;
  public fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxSeparation getSyntaxSeparation();
  public static void main(java.lang.String[]);
}
Compiled from "SerializedObject.java"
class fri.patterns.interpreter.parsergenerator.builder.SerializedObject {
  public fri.patterns.interpreter.parsergenerator.builder.SerializedObject();
  protected java.lang.Object read(java.lang.String);
  protected boolean write(java.lang.String, java.lang.Object);
  public static java.lang.String baseNameFromSyntax(java.lang.Object);
  public static fri.patterns.interpreter.parsergenerator.syntax.Syntax toSyntax(java.lang.Object) throws java.lang.Exception;
  protected java.lang.String makeFilePath(java.lang.String);
  protected java.lang.String ensureDirectory(java.lang.String);
}
Compiled from "SerializedParser.java"
public class fri.patterns.interpreter.parsergenerator.builder.SerializedParser extends fri.patterns.interpreter.parsergenerator.builder.SerializedObject {
  public static final java.lang.String PARSERFILE_SUFFIX;
  protected boolean PRODUCTION;
  public fri.patterns.interpreter.parsergenerator.builder.SerializedParser();
  public fri.patterns.interpreter.parsergenerator.builder.SerializedParser(boolean);
  public fri.patterns.interpreter.parsergenerator.Parser get(java.lang.Object) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.Parser get(java.lang.Object, java.lang.String) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.Parser get(java.lang.Class, java.lang.Object) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.Parser get(java.lang.Class, java.lang.Object, java.lang.String) throws java.lang.Exception;
  protected fri.patterns.interpreter.parsergenerator.builder.SerializedLexer newSerializedLexer() throws java.lang.Exception;
  public static void main(java.lang.String[]);
}
Compiled from "SerializedTables.java"
public class fri.patterns.interpreter.parsergenerator.builder.SerializedTables extends fri.patterns.interpreter.parsergenerator.builder.SerializedObject {
  public fri.patterns.interpreter.parsergenerator.builder.SerializedTables();
  public fri.patterns.interpreter.parsergenerator.builder.SerializedTables(boolean);
  public fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables get(java.lang.Object) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables get(java.lang.Object, java.lang.String) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables get(java.lang.Class, java.lang.Object, java.lang.String) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables readParserTables(java.lang.Object, java.lang.String);
  public fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables buildAndStoreParserTables(java.lang.Class, fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.lang.Object, java.lang.String) throws java.lang.Exception;
  public static void main(java.lang.String[]);
}
Compiled from "Calculator.java"
public class fri.patterns.interpreter.parsergenerator.examples.Calculator extends fri.patterns.interpreter.parsergenerator.semantics.ReflectSemantic {
  public fri.patterns.interpreter.parsergenerator.examples.Calculator();
  public java.lang.Object EXPRESSION(java.lang.Object);
  public java.lang.Object EXPRESSION(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object TERM(java.lang.Object);
  public java.lang.Object TERM(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object FACTOR(java.lang.Object);
  public java.lang.Object FACTOR(java.lang.Object, java.lang.Object);
  public java.lang.Object FACTOR(java.lang.Object, java.lang.Object, java.lang.Object);
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "Calculator2.java"
public class fri.patterns.interpreter.parsergenerator.examples.Calculator2 extends fri.patterns.interpreter.parsergenerator.semantics.ReflectSemantic {
  public fri.patterns.interpreter.parsergenerator.examples.Calculator2();
  public java.lang.Object EXPRESSION(java.lang.Object);
  public java.lang.Object EXPRESSION(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object TERM(java.lang.Object);
  public java.lang.Object TERM(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object FACTOR(java.lang.Object);
  public java.lang.Object FACTOR(java.lang.Object, java.lang.Object);
  public java.lang.Object FACTOR(java.lang.Object, java.lang.Object, java.lang.Object);
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "DtdLexer.java"
public class fri.patterns.interpreter.parsergenerator.examples.DtdLexer {
  public fri.patterns.interpreter.parsergenerator.examples.DtdLexer();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "HelloWorldParser.java"
public class fri.patterns.interpreter.parsergenerator.examples.HelloWorldParser {
  public fri.patterns.interpreter.parsergenerator.examples.HelloWorldParser();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "HelloWorldParser2.java"
public class fri.patterns.interpreter.parsergenerator.examples.HelloWorldParser2 {
  public fri.patterns.interpreter.parsergenerator.examples.HelloWorldParser2();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  static {};
}
Compiled from "HowToOverrideLexerImpl.java"
public class fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl {
  public fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "HowToOverrideLexerImpl.java"
final class fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1 extends fri.patterns.interpreter.parsergenerator.builder.SerializedParser {
  fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1();
  protected fri.patterns.interpreter.parsergenerator.builder.SerializedLexer newSerializedLexer() throws java.lang.Exception;
}
Compiled from "HowToOverrideLexerImpl.java"
class fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1$1 extends fri.patterns.interpreter.parsergenerator.builder.SerializedLexer {
  final fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1 this$0;
  fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1$1(fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1);
  protected fri.patterns.interpreter.parsergenerator.lexer.LexerBuilder newLexerBuilder(fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List) throws fri.patterns.interpreter.parsergenerator.lexer.LexerException, fri.patterns.interpreter.parsergenerator.syntax.SyntaxException;
}
Compiled from "HowToOverrideLexerImpl.java"
class fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1$1$1 extends fri.patterns.interpreter.parsergenerator.lexer.LexerBuilder {
  final fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1$1 this$1;
  fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1$1$1(fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1$1, fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List);
  public fri.patterns.interpreter.parsergenerator.Lexer getLexer();
}
Compiled from "HowToOverrideLexerImpl.java"
class fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1OverrideLexer extends fri.patterns.interpreter.parsergenerator.lexer.LexerImpl {
  public fri.patterns.interpreter.parsergenerator.examples.HowToOverrideLexerImpl$1OverrideLexer(java.util.List, java.util.Map);
  public fri.patterns.interpreter.parsergenerator.lexer.Strategy newStrategy();
}
Compiled from "JavaParser.java"
public class fri.patterns.interpreter.parsergenerator.examples.JavaParser {
  public fri.patterns.interpreter.parsergenerator.examples.JavaParser();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "JavaParser.java"
final class fri.patterns.interpreter.parsergenerator.examples.JavaParser$1 implements fri.patterns.interpreter.parsergenerator.Lexer$TokenListener {
  fri.patterns.interpreter.parsergenerator.examples.JavaParser$1();
  public void tokenReceived(fri.patterns.interpreter.parsergenerator.Token, boolean);
}
Compiled from "Joust.java"
public class fri.patterns.interpreter.parsergenerator.examples.Joust extends fri.patterns.interpreter.parsergenerator.semantics.ReflectSemantic {
  public fri.patterns.interpreter.parsergenerator.examples.Joust();
  public java.lang.Object PROGRAM(java.lang.Object);
  public java.lang.Object PROGRAM(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object STATEMENT(java.lang.Object);
  public java.lang.Object STATEMENT(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object STATEMENT(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object BOOLEXP(java.lang.Object);
  public java.lang.Object BOOLEXP(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object BOOLEXP(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object STATEMENT2(java.lang.Object, java.lang.Object);
  public java.lang.Object EXPRESSION(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object EXPRESSION(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object EXPRESSION(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object EXPRESSION(java.lang.Object);
  public java.lang.Object PARAMETERS(java.lang.Object);
  public java.lang.Object PARAMETERS(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object VARPARAMETERS(java.lang.Object);
  public java.lang.Object VARPARAMETERS(java.lang.Object, java.lang.Object, java.lang.Object);
  public java.lang.Object CHESSPIECE(java.lang.Object);
  public java.lang.Object VARCHESSPIECE(java.lang.Object, java.lang.Object);
  public java.lang.Object COORDINATE(java.lang.Object, java.lang.Object);
  public java.lang.Object VARIABLE(java.lang.Object, java.lang.Object);
  public java.lang.Object TYPE(java.lang.Object);
  public static void main(java.lang.String[]) throws java.lang.Exception;
  public static java.util.ArrayList<java.lang.Object> getAST(java.lang.String) throws java.lang.Exception;
  static {};
}
Compiled from "XmlLexer.java"
public class fri.patterns.interpreter.parsergenerator.examples.XmlLexer {
  public fri.patterns.interpreter.parsergenerator.examples.XmlLexer();
  public static void main(java.lang.String[]) throws java.lang.Exception;
}
Compiled from "XmlLexer.java"
class fri.patterns.interpreter.parsergenerator.examples.XmlLexer$PrintXmlLexerSemantic implements fri.patterns.interpreter.parsergenerator.lexer.LexerSemantic {
  fri.patterns.interpreter.parsergenerator.examples.XmlLexer$PrintXmlLexerSemantic();
  public void ruleEvaluated(fri.patterns.interpreter.parsergenerator.syntax.Rule, fri.patterns.interpreter.parsergenerator.lexer.ResultTree);
  public java.util.Set getWantedNonterminals();
  public java.util.Set getIgnoredNonterminals();
}
Compiled from "Consumer.java"
class fri.patterns.interpreter.parsergenerator.lexer.Consumer implements java.lang.Comparable,java.io.Serializable {
  protected fri.patterns.interpreter.parsergenerator.syntax.Rule rule;
  protected int fixedLength;
  protected int startLength;
  protected int variance;
  fri.patterns.interpreter.parsergenerator.lexer.Consumer(fri.patterns.interpreter.parsergenerator.syntax.Rule);
  fri.patterns.interpreter.parsergenerator.lexer.Consumer(java.lang.String);
  protected fri.patterns.interpreter.parsergenerator.lexer.Consumer();
  public void append(java.lang.String);
  public void append(fri.patterns.interpreter.parsergenerator.lexer.Consumer$Reference);
  public void append(fri.patterns.interpreter.parsergenerator.lexer.Consumer);
  public void appendSet(java.lang.String) throws fri.patterns.interpreter.parsergenerator.lexer.LexerException;
  public void subtract(fri.patterns.interpreter.parsergenerator.lexer.Consumer);
  public void subtract(fri.patterns.interpreter.parsergenerator.lexer.Consumer$Reference);
  public void resolveConsumerReferences(java.util.Map, java.util.Map) throws fri.patterns.interpreter.parsergenerator.lexer.LexerException;
  public void setNullable();
  public boolean isNullable();
  public void setRepeatable();
  public boolean isRepeatable();
  public java.util.List getAlternatives();
  public int compareTo(java.lang.Object);
  public java.lang.Character getStartCharacter();
  public int getStartVariance();
  public int getFixedLength();
  public int getStartLength();
  protected int getSomeLength(boolean, java.util.List);
  fri.patterns.interpreter.parsergenerator.lexer.Consumer optimize();
  boolean matchesRepeatableRule(fri.patterns.interpreter.parsergenerator.syntax.Rule);
  public void setStrategyFactoryMethod(fri.patterns.interpreter.parsergenerator.lexer.StrategyFactoryMethod);
  public fri.patterns.interpreter.parsergenerator.lexer.ResultTree consume(fri.patterns.interpreter.parsergenerator.lexer.InputText) throws java.io.IOException;
  protected fri.patterns.interpreter.parsergenerator.lexer.ResultTree consumeInternal(fri.patterns.interpreter.parsergenerator.lexer.InputText) throws java.io.IOException;
  public java.lang.String toString();
  protected java.lang.String toStringBase();
  protected void listToString(java.util.List, java.lang.StringBuffer, java.lang.String, boolean);
  public boolean overlaps(fri.patterns.interpreter.parsergenerator.lexer.Consumer);
}
Compiled from "Consumer.java"
class fri.patterns.interpreter.parsergenerator.lexer.Consumer$CharacterSet implements java.io.Serializable {
  fri.patterns.interpreter.parsergenerator.lexer.Consumer$CharacterSet(java.lang.String, java.lang.String) throws fri.patterns.interpreter.parsergenerator.lexer.LexerException;
  public char getFirstChar();
  public char getLastChar();
  public int getVariance();
  public boolean includes(char);
  public boolean overlaps(fri.patterns.interpreter.parsergenerator.lexer.Consumer$CharacterSet);
  public java.lang.String toString();
}
Compiled from "Consumer.java"
public class fri.patterns.interpreter.parsergenerator.lexer.Consumer$Reference {
  java.lang.String nonterminal;
  fri.patterns.interpreter.parsergenerator.lexer.Consumer$Reference(java.lang.String);
  public java.lang.String toString();
}
Compiled from "ConsumerAlternatives.java"
class fri.patterns.interpreter.parsergenerator.lexer.ConsumerAlternatives extends fri.patterns.interpreter.parsergenerator.lexer.Consumer {
  fri.patterns.interpreter.parsergenerator.lexer.ConsumerAlternatives(fri.patterns.interpreter.parsergenerator.lexer.Consumer);
  public void addAlternate(fri.patterns.interpreter.parsergenerator.lexer.Consumer);
  public java.util.List getAlternatives();
  boolean matchesRepeatableRule(fri.patterns.interpreter.parsergenerator.syntax.Rule);
  public java.lang.Character getStartCharacter();
  public int getStartVariance();
  protected int getSomeLength(boolean, java.util.List);
  protected fri.patterns.interpreter.parsergenerator.lexer.ResultTree consumeInternal(fri.patterns.interpreter.parsergenerator.lexer.InputText) throws java.io.IOException;
  public boolean overlaps(fri.patterns.interpreter.parsergenerator.lexer.Consumer);
  protected java.lang.String toStringBase();
  public void setStrategyFactoryMethod(fri.patterns.interpreter.parsergenerator.lexer.StrategyFactoryMethod);
}
Compiled from "Input.java"
class fri.patterns.interpreter.parsergenerator.lexer.Input {
  public static final int EOF;
  fri.patterns.interpreter.parsergenerator.lexer.Input(java.lang.Object) throws java.io.IOException;
  public int read() throws java.io.IOException;
  public int peek() throws java.io.IOException;
  protected int convertInput(int);
  public int getScanOffset();
  public int getReadOffset();
  public int getMark();
  public void setMark(int);
  public void resolveBuffer();
  public int[] getUnreadBuffer();
  protected int getUnreadLength();
}
Compiled from "InputText.java"
class fri.patterns.interpreter.parsergenerator.lexer.InputText extends fri.patterns.interpreter.parsergenerator.lexer.Input {
  fri.patterns.interpreter.parsergenerator.lexer.InputText(java.lang.Object) throws java.io.IOException;
  protected int convertInput(int);
  public int getReadLine();
  public int getReadColumn();
  public int getScanLine();
  public int getScanColumn();
  public int read() throws java.io.IOException;
  public void setMark(int);
  public java.lang.String getLine();
  public java.lang.String getPreviousLine();
  public java.lang.String getUnreadText();
}
Compiled from "LexerBuilder.java"
public class fri.patterns.interpreter.parsergenerator.lexer.LexerBuilder {
  protected java.util.Map charConsumers;
  protected java.util.List ignoredSymbols;
  public static boolean DEBUG;
  public fri.patterns.interpreter.parsergenerator.lexer.LexerBuilder(fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List) throws fri.patterns.interpreter.parsergenerator.lexer.LexerException, fri.patterns.interpreter.parsergenerator.syntax.SyntaxException;
  public fri.patterns.interpreter.parsergenerator.Lexer getLexer();
  public fri.patterns.interpreter.parsergenerator.Lexer getLexer(java.lang.Object) throws java.io.IOException;
}
Compiled from "LexerException.java"
public class fri.patterns.interpreter.parsergenerator.lexer.LexerException extends java.lang.Exception {
  public fri.patterns.interpreter.parsergenerator.lexer.LexerException(java.lang.String);
}
Compiled from "LexerImpl.java"
public class fri.patterns.interpreter.parsergenerator.lexer.LexerImpl implements fri.patterns.interpreter.parsergenerator.Lexer,fri.patterns.interpreter.parsergenerator.lexer.StrategyFactoryMethod,java.io.Serializable {
  protected fri.patterns.interpreter.parsergenerator.lexer.Strategy strategy;
  public fri.patterns.interpreter.parsergenerator.lexer.LexerImpl(java.util.List, java.util.Map);
  protected fri.patterns.interpreter.parsergenerator.lexer.LexerImpl();
  public void addTokenListener(fri.patterns.interpreter.parsergenerator.Lexer$TokenListener);
  public void removeTokenListener(fri.patterns.interpreter.parsergenerator.Lexer$TokenListener);
  public fri.patterns.interpreter.parsergenerator.lexer.Strategy newStrategy();
  public void setCompeteForLongestInput(boolean);
  public void setInput(java.lang.Object) throws java.io.IOException;
  public void setTerminals(java.util.List);
  public void clear();
  public fri.patterns.interpreter.parsergenerator.Token getNextToken(fri.patterns.interpreter.parsergenerator.lexer.LexerSemantic) throws java.io.IOException;
  public fri.patterns.interpreter.parsergenerator.Token getNextToken(java.util.Map) throws java.io.IOException;
  protected fri.patterns.interpreter.parsergenerator.Token createToken(java.lang.String, fri.patterns.interpreter.parsergenerator.lexer.ResultTree, fri.patterns.interpreter.parsergenerator.lexer.LexerSemantic);
  protected fri.patterns.interpreter.parsergenerator.Token createToken(java.lang.String, java.lang.String, fri.patterns.interpreter.parsergenerator.Token$Range);
  public boolean lex(fri.patterns.interpreter.parsergenerator.lexer.LexerSemantic) throws java.io.IOException;
  protected void loopResultTree(fri.patterns.interpreter.parsergenerator.lexer.ResultTree, fri.patterns.interpreter.parsergenerator.lexer.LexerSemantic);
  public void setDebug(boolean);
  public java.lang.String getLineText();
  public int getLine();
  public int getColumn();
  public int getOffset();
  public void dump(java.io.PrintStream);
}
Compiled from "LexerSemantic.java"
public interface fri.patterns.interpreter.parsergenerator.lexer.LexerSemantic {
  public abstract void ruleEvaluated(fri.patterns.interpreter.parsergenerator.syntax.Rule, fri.patterns.interpreter.parsergenerator.lexer.ResultTree);
  public abstract java.util.Set getWantedNonterminals();
  public abstract java.util.Set getIgnoredNonterminals();
}
Compiled from "ResultTree.java"
public class fri.patterns.interpreter.parsergenerator.lexer.ResultTree {
  fri.patterns.interpreter.parsergenerator.lexer.ResultTree(fri.patterns.interpreter.parsergenerator.syntax.Rule);
  public fri.patterns.interpreter.parsergenerator.Token$Range getRange();
  void setRange(fri.patterns.interpreter.parsergenerator.Token$Range);
  public boolean hasText();
  public java.lang.String toString();
  public fri.patterns.interpreter.parsergenerator.syntax.Rule getRule();
  public java.lang.Object getChild(int);
  public int getChildCount();
  fri.patterns.interpreter.parsergenerator.lexer.ResultTree append(char);
  fri.patterns.interpreter.parsergenerator.lexer.ResultTree append(java.lang.String);
  fri.patterns.interpreter.parsergenerator.lexer.ResultTree addChild(fri.patterns.interpreter.parsergenerator.lexer.ResultTree);
}
Compiled from "StandardLexerRules.java"
public abstract class fri.patterns.interpreter.parsergenerator.lexer.StandardLexerRules {
  public static final java.lang.String[][] lexerSyntax;
  public static final java.lang.String[][] xmlCharRules;
  public static final java.lang.String[][] xmlCombinigAndExtenderRules;
  public static final java.lang.String[][] digitRules;
  public static final java.lang.String[][] numberRules;
  public static final java.lang.String[][] newlinesRules;
  public static final java.lang.String[][] chardefRules;
  public static final java.lang.String[][] whitespaceRules;
  public static java.lang.String[][] rulesForIdentifier(java.lang.String);
  public static final java.lang.String[][] getCustomOneLineCommentRules(java.lang.String, java.lang.String);
  public static final java.lang.String[][] getCustomMultiLineCommentRules(java.lang.String, java.lang.String, java.lang.String);
  public static final java.lang.String[][] getUnicodeCharRules();
  public static final java.lang.String[][] getNewlineRules();
  public static final java.lang.String[][] getNewlinesRules();
  public static final java.lang.String[][] getSpaceRules();
  public static final java.lang.String[][] getSpacesRules();
  public static final java.lang.String[][] getWhitespaceRules();
  public static final java.lang.String[][] getWhitespacesRules();
  public static final java.lang.String[][] getHexDigitRules();
  public static final java.lang.String[][] getHexDigitsRules();
  public static final java.lang.String[][] getUnicodeLetterRules();
  public static final java.lang.String[][] getUnicodeDigitRules();
  public static final java.lang.String[][] getUnicodeDigitsRules();
  public static final java.lang.String[][] getUnicodeIdentifierRules();
  public static final java.lang.String[][] getUnicodeChardefRules();
  public static final java.lang.String[][] getUnicodeBNFChardefRules();
  public static final java.lang.String[][] getUnicodeStringdefRules();
  public static final java.lang.String[][] getRulerefRules();
  public static final java.lang.String[][] getQuantifierRules();
  public static final java.lang.String[][] getCommentRules();
  public static final java.lang.String[][] getCStyleCommentRules();
  public static final java.lang.String[][] getShellStyleCommentRules();
  public static final java.lang.String[][] getUnicodeXmlCharRules();
  public static final java.lang.String[][] getUnicodeCombiningCharRules();
  public static final java.lang.String[][] getUnicodeExtenderCharRules();
  public static final java.lang.String[][] getOctDigitsRules();
  public static final java.lang.String[][] getBinDigitsRules();
  public static final java.lang.String[][] getNumberRules();
  public static final java.lang.String[][] getIntegerRules();
  public static final java.lang.String[][] getFloatRules();
  public static void printRules(java.lang.String[][]);
  public static final java.lang.String[][] catenizeRules(java.lang.String[][][]);
  static {};
}
Compiled from "Strategy.java"
public class fri.patterns.interpreter.parsergenerator.lexer.Strategy implements java.io.Serializable {
  public fri.patterns.interpreter.parsergenerator.lexer.Strategy();
  public void setCompeteForLongestInput(boolean);
  public void addIgnoringConsumer(java.lang.String, fri.patterns.interpreter.parsergenerator.lexer.Consumer);
  public void addTokenConsumer(java.lang.String, fri.patterns.interpreter.parsergenerator.lexer.Consumer);
  public boolean hasTerminal(java.lang.String);
  public fri.patterns.interpreter.parsergenerator.lexer.Strategy$Item consume(fri.patterns.interpreter.parsergenerator.lexer.InputText, int, java.util.Map) throws java.io.IOException;
  public java.lang.String toString();
  static fri.util.collections.AggregatingHashtable access$100(fri.patterns.interpreter.parsergenerator.lexer.Strategy);
  static java.util.List access$200(fri.patterns.interpreter.parsergenerator.lexer.Strategy);
}
Compiled from "Strategy.java"
public class fri.patterns.interpreter.parsergenerator.lexer.Strategy$Item implements java.lang.Comparable,java.io.Serializable {
  public fri.patterns.interpreter.parsergenerator.lexer.Strategy$Item(java.lang.String, fri.patterns.interpreter.parsergenerator.lexer.Consumer);
  public fri.patterns.interpreter.parsergenerator.lexer.ResultTree consume(fri.patterns.interpreter.parsergenerator.lexer.InputText) throws java.io.IOException;
  public java.lang.String getSymbol();
  public java.lang.String getTokenIdentifier();
  public fri.patterns.interpreter.parsergenerator.lexer.ResultTree getResultTree();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
  public boolean equals(java.lang.Object);
  public int hashCode();
  static fri.patterns.interpreter.parsergenerator.lexer.Consumer access$000(fri.patterns.interpreter.parsergenerator.lexer.Strategy$Item);
}
Compiled from "Strategy.java"
class fri.patterns.interpreter.parsergenerator.lexer.Strategy$ItemEnumerator implements java.util.Enumeration {
  final fri.patterns.interpreter.parsergenerator.lexer.Strategy this$0;
  public fri.patterns.interpreter.parsergenerator.lexer.Strategy$ItemEnumerator(fri.patterns.interpreter.parsergenerator.lexer.Strategy);
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
}
Compiled from "StrategyFactoryMethod.java"
public interface fri.patterns.interpreter.parsergenerator.lexer.StrategyFactoryMethod {
  public abstract fri.patterns.interpreter.parsergenerator.lexer.Strategy newStrategy();
}
Compiled from "CStyleCommentStrip.java"
public class fri.patterns.interpreter.parsergenerator.lexer.examples.CStyleCommentStrip {
  public fri.patterns.interpreter.parsergenerator.lexer.examples.CStyleCommentStrip(java.io.Reader, java.io.Writer) throws fri.patterns.interpreter.parsergenerator.lexer.LexerException, java.io.IOException;
  public static void main(java.lang.String[]);
  static {};
}
Compiled from "ExampleLexer.java"
public abstract class fri.patterns.interpreter.parsergenerator.lexer.examples.ExampleLexer {
  public fri.patterns.interpreter.parsergenerator.lexer.examples.ExampleLexer();
  public static void main(java.lang.String[]);
}
Compiled from "LexerReflectSemantic.java"
public abstract class fri.patterns.interpreter.parsergenerator.lexer.semantics.LexerReflectSemantic implements fri.patterns.interpreter.parsergenerator.lexer.LexerSemantic {
  public fri.patterns.interpreter.parsergenerator.lexer.semantics.LexerReflectSemantic();
  public void ruleEvaluated(fri.patterns.interpreter.parsergenerator.syntax.Rule, fri.patterns.interpreter.parsergenerator.lexer.ResultTree);
  public java.util.Set getWantedNonterminals();
  public java.util.Set getIgnoredNonterminals();
}
Compiled from "AbstractParserTables.java"
public abstract class fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables implements fri.patterns.interpreter.parsergenerator.ParserTables,java.io.Serializable {
  protected fri.patterns.interpreter.parsergenerator.syntax.Syntax syntax;
  protected java.util.List gotoTable;
  protected java.util.List parseTable;
  protected transient java.util.List symbols;
  protected transient java.util.List terminals;
  protected java.util.List terminalsWithoutEpsilon;
  protected transient java.util.List nonterminals;
  public static transient int CELLWIDTH;
  protected fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables();
  public java.lang.Integer getGotoState(java.lang.Integer, java.lang.String);
  public java.lang.Integer getParseAction(java.lang.Integer, java.lang.String);
  public java.util.List getTerminals();
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax getSyntax();
  public java.util.Map getExpected(java.lang.Integer);
  public static fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables construct(java.lang.Class, fri.patterns.interpreter.parsergenerator.syntax.Syntax) throws java.lang.Exception;
  public void dump(java.io.PrintStream);
  public void dumpTables(java.io.PrintStream);
  public void dumpSyntax(java.io.PrintStream);
  protected java.lang.String dumpRule(fri.patterns.interpreter.parsergenerator.syntax.Rule, int);
  protected void dumpGoto(java.io.PrintStream);
  protected void dumpParseAction(java.io.PrintStream);
  protected void dumpTable(java.lang.String, java.util.List, java.util.List, java.io.PrintStream);
  public void report(java.io.PrintStream);
  public java.lang.String toSourceFile(java.lang.String) throws java.io.IOException;
  static {};
}
Compiled from "FirstSets.java"
class fri.patterns.interpreter.parsergenerator.parsertables.FirstSets extends fri.util.collections.UniqueAggregatingHashtable {
  public fri.patterns.interpreter.parsergenerator.parsertables.FirstSets(fri.patterns.interpreter.parsergenerator.syntax.Syntax, fri.patterns.interpreter.parsergenerator.parsertables.Nullable, java.util.List) throws fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException;
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public static void main(java.lang.String[]);
}
Compiled from "FollowSets.java"
class fri.patterns.interpreter.parsergenerator.parsertables.FollowSets extends fri.util.collections.UniqueAggregatingHashtable {
  public fri.patterns.interpreter.parsergenerator.parsertables.FollowSets(fri.patterns.interpreter.parsergenerator.syntax.Syntax, fri.patterns.interpreter.parsergenerator.parsertables.Nullable, fri.patterns.interpreter.parsergenerator.parsertables.FirstSets) throws fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException;
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public static void main(java.lang.String[]);
}
Compiled from "LALRParserTables.java"
public class fri.patterns.interpreter.parsergenerator.parsertables.LALRParserTables extends fri.patterns.interpreter.parsergenerator.parsertables.LRParserTables {
  public fri.patterns.interpreter.parsergenerator.parsertables.LALRParserTables(fri.patterns.interpreter.parsergenerator.syntax.Syntax) throws fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException;
  protected fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode createStartNode(fri.patterns.interpreter.parsergenerator.parsertables.Nullable, fri.patterns.interpreter.parsergenerator.parsertables.FirstSets);
  public static void main(java.lang.String[]);
}
Compiled from "LALRSyntaxNode.java"
class fri.patterns.interpreter.parsergenerator.parsertables.LALRSyntaxNode extends fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode {
  public fri.patterns.interpreter.parsergenerator.parsertables.LALRSyntaxNode(fri.patterns.interpreter.parsergenerator.parsertables.Nullable, fri.patterns.interpreter.parsergenerator.parsertables.FirstSets);
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode createSyntaxNode();
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem createRuleStateItem(int, fri.patterns.interpreter.parsergenerator.syntax.Rule);
  public java.util.List build(fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List, java.util.Hashtable);
  protected void addRulesDerivingPendingNonTerminal(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem, java.lang.String, fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List);
  protected void linkParentItemToChild(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem, int, java.util.List, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
}
Compiled from "LALRSyntaxNode.java"
public class fri.patterns.interpreter.parsergenerator.parsertables.LALRSyntaxNode$LALRRuleStateItem extends fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode$LRRuleStateItem {
  boolean needsPropagation;
  java.util.Stack propagateItems;
  final fri.patterns.interpreter.parsergenerator.parsertables.LALRSyntaxNode this$0;
  public fri.patterns.interpreter.parsergenerator.parsertables.LALRSyntaxNode$LALRRuleStateItem(fri.patterns.interpreter.parsergenerator.parsertables.LALRSyntaxNode, int, fri.patterns.interpreter.parsergenerator.syntax.Rule);
  protected fri.patterns.interpreter.parsergenerator.parsertables.LALRSyntaxNode$LALRRuleStateItem(fri.patterns.interpreter.parsergenerator.parsertables.LALRSyntaxNode, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem createRuleStateItem(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
  void addPropagate(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
  void propagateLookaheads(java.util.Iterator);
  public boolean equals(java.lang.Object);
  public int hashCode();
}
Compiled from "LRParserTables.java"
public class fri.patterns.interpreter.parsergenerator.parsertables.LRParserTables extends fri.patterns.interpreter.parsergenerator.parsertables.SLRParserTables {
  public fri.patterns.interpreter.parsergenerator.parsertables.LRParserTables(fri.patterns.interpreter.parsergenerator.syntax.Syntax) throws fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException;
  protected fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode createStartNode(fri.patterns.interpreter.parsergenerator.parsertables.Nullable, fri.patterns.interpreter.parsergenerator.parsertables.FirstSets);
  protected void init() throws fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException;
  public static void main(java.lang.String[]);
}
Compiled from "LRSyntaxNode.java"
class fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode extends fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode {
  protected fri.patterns.interpreter.parsergenerator.parsertables.Nullable nullable;
  protected fri.patterns.interpreter.parsergenerator.parsertables.FirstSets firstSets;
  public fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode(fri.patterns.interpreter.parsergenerator.parsertables.Nullable, fri.patterns.interpreter.parsergenerator.parsertables.FirstSets);
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode createSyntaxNode();
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem createRuleStateItem(int, fri.patterns.interpreter.parsergenerator.syntax.Rule);
  protected void addStartLookahead(fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode$LRRuleStateItem, int);
  protected void addRulesDerivingPendingNonTerminal(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem, java.lang.String, fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List);
  protected java.util.List getNontermShiftSymbols(fri.patterns.interpreter.parsergenerator.parsertables.FirstSets, java.lang.String);
  protected java.util.Iterator getReduceSymbols(fri.patterns.interpreter.parsergenerator.parsertables.FollowSets, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
}
Compiled from "LRSyntaxNode.java"
public class fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode$LRRuleStateItem extends fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem {
  java.util.Hashtable lookahead;
  final fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode this$0;
  public fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode$LRRuleStateItem(fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode, int, fri.patterns.interpreter.parsergenerator.syntax.Rule);
  protected fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode$LRRuleStateItem(fri.patterns.interpreter.parsergenerator.parsertables.LRSyntaxNode, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem createRuleStateItem(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
  boolean addLookahead(java.util.Iterator);
  boolean calculateLookahead(java.util.List, fri.patterns.interpreter.parsergenerator.parsertables.Nullable, fri.patterns.interpreter.parsergenerator.parsertables.FirstSets);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "Nullable.java"
class fri.patterns.interpreter.parsergenerator.parsertables.Nullable extends java.util.Hashtable {
  public static final java.lang.String NULL;
  public fri.patterns.interpreter.parsergenerator.parsertables.Nullable(fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List) throws fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException;
  public boolean isNullable(java.lang.String);
  public static boolean isNull(java.lang.String);
  public static void main(java.lang.String[]);
}
Compiled from "ParserBuildException.java"
public class fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException extends java.lang.Exception {
  public fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException(java.lang.String);
}
Compiled from "SLRParserTables.java"
public class fri.patterns.interpreter.parsergenerator.parsertables.SLRParserTables extends fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables {
  protected transient java.util.List syntaxNodes;
  protected transient fri.patterns.interpreter.parsergenerator.parsertables.FirstSets firstSets;
  protected transient fri.patterns.interpreter.parsergenerator.parsertables.FollowSets followSets;
  public fri.patterns.interpreter.parsergenerator.parsertables.SLRParserTables(fri.patterns.interpreter.parsergenerator.syntax.Syntax) throws fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException;
  protected void init() throws fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException;
  protected java.util.List getAllSymbols() throws fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException;
  protected java.util.List generateGoto(java.util.List);
  protected java.util.List generateParseAction(java.util.List);
  protected void insertTableLine(int, java.util.Map, java.util.List, java.util.Map);
  public void freeSyntaxNodes();
  public void report(java.io.PrintStream);
  public void dump(java.io.PrintStream);
  public void dumpSyntaxNodes(java.io.PrintStream);
  public void dumpSyntaxNode(int, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode, java.io.PrintStream);
  public void dumpFirstSet(java.io.PrintStream);
  public void dumpFollowSet(java.io.PrintStream);
  public void dumpSet(java.lang.String, java.util.Map, java.io.PrintStream);
  public static void main(java.lang.String[]);
}
Compiled from "SLRSyntaxNode.java"
class fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode {
  protected java.util.Hashtable entries;
  public fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode();
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode createSyntaxNode();
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem createRuleStateItem(int, fri.patterns.interpreter.parsergenerator.syntax.Rule);
  public java.util.List build(fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List, java.util.Hashtable);
  protected void generateSyntaxNodes(java.util.List, fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.Hashtable);
  protected void generateSyntaxNodesFromItems(java.util.List, fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.Hashtable);
  protected java.util.List addShiftedItems(java.lang.String, java.util.Hashtable);
  protected void linkParentItemToChild(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem, int, java.util.List, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
  protected void closure(fri.patterns.interpreter.parsergenerator.syntax.Syntax);
  protected void addRulesDerivingPendingNonTerminal(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem, java.lang.String, fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.util.List);
  public java.util.Hashtable fillGotoLine(int);
  public java.util.Hashtable fillParseActionLine(int, fri.patterns.interpreter.parsergenerator.parsertables.FirstSets, fri.patterns.interpreter.parsergenerator.parsertables.FollowSets);
  protected java.util.List getNontermShiftSymbols(fri.patterns.interpreter.parsergenerator.parsertables.FirstSets, java.lang.String);
  protected java.util.Iterator getReduceSymbols(fri.patterns.interpreter.parsergenerator.parsertables.FollowSets, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
  protected void setParseTableLine(int, java.util.Hashtable, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem, java.lang.Integer, java.lang.String);
  protected boolean setTableLine(java.lang.String, int, java.util.Hashtable, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem, java.lang.Integer, java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "SLRSyntaxNode.java"
public class fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem {
  fri.patterns.interpreter.parsergenerator.syntax.Rule rule;
  int pointerPosition;
  int ruleIndex;
  int followNodeIndex;
  protected java.lang.Integer hashCache;
  final fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode this$0;
  public fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode, int, fri.patterns.interpreter.parsergenerator.syntax.Rule);
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
  protected fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem createRuleStateItem(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
  java.lang.String getNonterminal();
  fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem shift();
  java.lang.String getPendingNonTerminal();
  java.lang.String getPendingSymbol();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "SLRSyntaxNode.java"
class fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$Tuple {
  fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem o1;
  fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem o2;
  final fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode this$0;
  fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$Tuple(fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem, fri.patterns.interpreter.parsergenerator.parsertables.SLRSyntaxNode$RuleStateItem);
}
Compiled from "PrintSemantic.java"
public class fri.patterns.interpreter.parsergenerator.semantics.PrintSemantic implements fri.patterns.interpreter.parsergenerator.Semantic {
  public fri.patterns.interpreter.parsergenerator.semantics.PrintSemantic();
  public java.lang.Object doSemantic(fri.patterns.interpreter.parsergenerator.syntax.Rule, java.util.List, java.util.List);
}
Compiled from "ReflectSemantic.java"
public abstract class fri.patterns.interpreter.parsergenerator.semantics.ReflectSemantic implements fri.patterns.interpreter.parsergenerator.Semantic {
  public fri.patterns.interpreter.parsergenerator.semantics.ReflectSemantic();
  public java.lang.Object doSemantic(fri.patterns.interpreter.parsergenerator.syntax.Rule, java.util.List, java.util.List);
  protected java.lang.Object fallback(fri.patterns.interpreter.parsergenerator.syntax.Rule, java.util.List, java.util.List);
  protected java.util.List getRanges();
}
Compiled from "TreeBuilderSemantic.java"
public class fri.patterns.interpreter.parsergenerator.semantics.TreeBuilderSemantic implements fri.patterns.interpreter.parsergenerator.Semantic {
  public fri.patterns.interpreter.parsergenerator.semantics.TreeBuilderSemantic();
  public java.lang.Object doSemantic(fri.patterns.interpreter.parsergenerator.syntax.Rule, java.util.List, java.util.List);
}
Compiled from "TreeBuilderSemantic.java"
public class fri.patterns.interpreter.parsergenerator.semantics.TreeBuilderSemantic$Node {
  public fri.patterns.interpreter.parsergenerator.semantics.TreeBuilderSemantic$Node(fri.patterns.interpreter.parsergenerator.syntax.Rule, java.util.List, java.util.List);
  public fri.patterns.interpreter.parsergenerator.syntax.Rule getRule();
  public java.util.List getInputTokens();
  public java.util.List getRanges();
  public java.lang.String toString();
  public java.lang.String toString(int);
}
Compiled from "TreeBuilderExample.java"
public class fri.patterns.interpreter.parsergenerator.semantics.examples.TreeBuilderExample {
  public fri.patterns.interpreter.parsergenerator.semantics.examples.TreeBuilderExample();
  public static void main(java.lang.String[]);
}
Compiled from "Rule.java"
public class fri.patterns.interpreter.parsergenerator.syntax.Rule implements java.io.Serializable {
  public fri.patterns.interpreter.parsergenerator.syntax.Rule(java.lang.String, int);
  public fri.patterns.interpreter.parsergenerator.syntax.Rule(java.lang.String[]);
  public fri.patterns.interpreter.parsergenerator.syntax.Rule(java.util.List);
  protected fri.patterns.interpreter.parsergenerator.syntax.Rule();
  public java.lang.String getNonterminal();
  public int rightSize();
  public java.lang.String getRightSymbol(int);
  public void setRightSymbol(java.lang.String, int);
  public void addRightSymbol(java.lang.String);
  public int indexOnRightSide(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
}
Compiled from "Syntax.java"
public class fri.patterns.interpreter.parsergenerator.syntax.Syntax implements java.io.Serializable {
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax();
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax(int);
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax(java.lang.String[][]);
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax(java.lang.String[][][]);
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax(java.util.List);
  public void appendRules(java.util.List);
  public int size();
  public fri.patterns.interpreter.parsergenerator.syntax.Rule getRule(int);
  public void addRule(fri.patterns.interpreter.parsergenerator.syntax.Rule);
  public void insertRule(int, fri.patterns.interpreter.parsergenerator.syntax.Rule);
  public void removeRule(int);
  public java.util.List findStartRules();
  public void resolveSingulars();
  public void resolveFrom(fri.patterns.interpreter.parsergenerator.syntax.Syntax);
  public java.util.Set getUnresolvedNonterminals();
  public boolean hasRule(java.lang.String);
  public java.lang.String toString();
}
Compiled from "SyntaxException.java"
public class fri.patterns.interpreter.parsergenerator.syntax.SyntaxException extends java.lang.Exception {
  public fri.patterns.interpreter.parsergenerator.syntax.SyntaxException(java.lang.String);
}
Compiled from "SyntaxUtil.java"
public abstract class fri.patterns.interpreter.parsergenerator.syntax.SyntaxUtil {
  public static java.util.List ruleArrayToList(java.lang.String[][]);
  public static java.util.List ruleToList(java.lang.String[]);
  public static java.util.List appendToSyntax(java.lang.String[][], java.util.List);
  public static java.util.List appendToRule(java.lang.String[], java.util.List);
  public static java.util.List catenizeRules(java.lang.String[][][]);
  public static final java.util.List catenizeRulesUnique(java.lang.String[][][]);
  public static java.lang.String maskQuoteAndBackslash(java.lang.String);
}
Compiled from "ArtificialRule.java"
class fri.patterns.interpreter.parsergenerator.syntax.builder.ArtificialRule {
  public fri.patterns.interpreter.parsergenerator.syntax.builder.ArtificialRule(java.util.List, java.lang.String);
  public fri.patterns.interpreter.parsergenerator.syntax.builder.ArtificialRule(java.lang.Object, java.lang.String);
  public static java.util.List flattenLists(java.util.List, java.util.List);
  public java.lang.String toString();
  public java.util.List getRules();
  public static void resolveArtificialRules(java.util.List, java.util.List);
  public static void main(java.lang.String[]);
}
Compiled from "SyntaxBuilder.java"
public class fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxBuilder {
  public fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxBuilder(java.lang.Object) throws fri.patterns.interpreter.parsergenerator.syntax.SyntaxException, fri.patterns.interpreter.parsergenerator.lexer.LexerException, fri.patterns.interpreter.parsergenerator.parsertables.ParserBuildException, java.io.IOException;
  public fri.patterns.interpreter.parsergenerator.Lexer getLexer() throws fri.patterns.interpreter.parsergenerator.lexer.LexerException, fri.patterns.interpreter.parsergenerator.syntax.SyntaxException;
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax getParserSyntax() throws fri.patterns.interpreter.parsergenerator.syntax.SyntaxException;
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax getSyntax();
  public java.util.List getInitialNonterminals();
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax resolveSingulars();
  public static void main(java.lang.String[]);
}
Compiled from "SyntaxBuilderParserTables.java"
public final class fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxBuilderParserTables extends fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables {
  public fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxBuilderParserTables();
}
Compiled from "SyntaxBuilderSemantic.java"
public class fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxBuilderSemantic implements fri.patterns.interpreter.parsergenerator.Semantic {
  public static java.lang.String[][] syntax;
  public fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxBuilderSemantic();
  public fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxBuilderSemantic(java.util.List);
  public java.lang.Object doSemantic(fri.patterns.interpreter.parsergenerator.syntax.Rule, java.util.List, java.util.List);
  static {};
}
Compiled from "SyntaxSeparation.java"
public class fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxSeparation {
  public static boolean DEBUG;
  public fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxSeparation(fri.patterns.interpreter.parsergenerator.syntax.Syntax) throws fri.patterns.interpreter.parsergenerator.syntax.SyntaxException;
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax getLexerSyntax();
  public fri.patterns.interpreter.parsergenerator.syntax.Syntax getParserSyntax();
  public java.util.List getTokenSymbols();
  public java.util.List getIgnoredSymbols();
  static {};
}
Compiled from "SyntaxSeparation.java"
public class fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxSeparation$IntArray {
  public fri.patterns.interpreter.parsergenerator.syntax.builder.SyntaxSeparation$IntArray(int);
  public void add(int);
  public boolean isEmpty();
  public boolean contains(int);
  public void removeIndexesFrom(fri.patterns.interpreter.parsergenerator.syntax.Syntax);
}
Compiled from "Example.java"
public class fri.patterns.interpreter.parsergenerator.syntax.builder.examples.Example {
  public fri.patterns.interpreter.parsergenerator.syntax.builder.examples.Example();
  public static void main(java.lang.String[]);
}
Compiled from "SemanticSkeletonGenerator.java"
public class fri.patterns.interpreter.parsergenerator.util.SemanticSkeletonGenerator {
  public fri.patterns.interpreter.parsergenerator.util.SemanticSkeletonGenerator(fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.lang.String, java.lang.String, java.io.Writer) throws java.lang.Exception;
}
Compiled from "SourceGenerator.java"
public abstract class fri.patterns.interpreter.parsergenerator.util.SourceGenerator {
  public static void generateSemanticSkeleton(fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.lang.String, java.lang.String) throws java.lang.Exception;
  public static void generateParserTable(fri.patterns.interpreter.parsergenerator.parsertables.AbstractParserTables, java.lang.String, java.lang.String) throws java.lang.Exception;
  public static void generateSyntaxImpl(fri.patterns.interpreter.parsergenerator.syntax.Syntax, java.lang.String, java.lang.String, java.util.List) throws java.io.IOException;
  public static void main(java.lang.String[]);
}
Compiled from "SymbolToName.java"
public abstract class fri.patterns.interpreter.parsergenerator.util.SymbolToName {
  public static java.lang.String makeIdentifier(java.lang.String);
  public static java.lang.String makeIdentifier(java.lang.String, boolean);
  public static java.lang.String makeIdentifier(java.lang.String, java.lang.String);
  public static java.lang.String makeIdentifier(java.lang.String, java.lang.String, boolean);
  public static java.lang.String convert(char);
}
Compiled from "SyntaxChecker.java"
public class fri.patterns.interpreter.parsergenerator.util.SyntaxChecker {
  public fri.patterns.interpreter.parsergenerator.util.SyntaxChecker(java.lang.Object) throws java.lang.Exception;
  public fri.patterns.interpreter.parsergenerator.util.SyntaxChecker(fri.patterns.interpreter.parsergenerator.syntax.Syntax);
  public boolean getDiagnosis();
  public static void main(java.lang.String[]);
}
Compiled from "Equals.java"
public abstract class fri.util.Equals {
  public static boolean equals(java.lang.Object, java.lang.Object);
  public static int hashCode(java.lang.Object);
}
Compiled from "TimeStopper.java"
public class fri.util.TimeStopper {
  public fri.util.TimeStopper();
  public fri.util.TimeStopper(boolean);
  public boolean isRunning();
  public void suspend();
  public void resume();
  public java.lang.String stop();
  public void start();
  public java.lang.String getTime();
  public java.lang.String getTimeMillis();
  public java.lang.String stopMillis();
  public java.lang.String getInterval();
  public static final void main(java.lang.String[]);
}
Compiled from "AggregatingHashtable.java"
public class fri.util.collections.AggregatingHashtable extends java.util.Hashtable {
  public fri.util.collections.AggregatingHashtable();
  public fri.util.collections.AggregatingHashtable(int);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  protected boolean shouldAdd(java.util.List, java.lang.Object);
  protected java.util.List createAggregationList();
  public void replace(java.lang.Object, java.util.List);
}
Compiled from "UniqueAggregatingHashtable.java"
public class fri.util.collections.UniqueAggregatingHashtable extends fri.util.collections.AggregatingHashtable {
  public fri.util.collections.UniqueAggregatingHashtable();
  public fri.util.collections.UniqueAggregatingHashtable(int);
  protected boolean shouldAdd(java.util.List, java.lang.Object);
}
Compiled from "UnicodeReader.java"
public class fri.util.io.UnicodeReader extends java.io.Reader {
  public fri.util.io.UnicodeReader(java.io.InputStream) throws java.io.IOException;
  public fri.util.io.UnicodeReader(java.io.InputStream, java.lang.String) throws java.io.IOException;
  public java.lang.String getEncoding();
  public void close() throws java.io.IOException;
  public int read(char[], int, int) throws java.io.IOException;
}
Compiled from "ConfigDir.java"
public abstract class fri.util.props.ConfigDir {
  public static java.lang.String dir();
  static {};
}
